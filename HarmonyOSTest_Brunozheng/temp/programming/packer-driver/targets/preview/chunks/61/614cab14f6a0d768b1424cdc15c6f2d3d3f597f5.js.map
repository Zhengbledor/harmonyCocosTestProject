{"version":3,"sources":["file:///Users/zhengzhihao/Documents/tencent/cocos/HarmonOSTest_Brunozheng/assets/HarmonyOSTest.ts"],"names":["SpriteNode","_decorator","Component","Node","Vec3","UITransform","Sprite","resources","SpriteFrame","ccclass","HarmonyTestComponent","spriteNodes","Array","start","node","getChildByName","on","EventType","TOUCH_END","currentTime","Date","now","console","error","index","result","generateSpriteNode","length","push","update","deltaTime","forEach","item","constructor","parentNode","direction","speed","spriteNode","undefined","makeNode","setRandomDirection","angle","Math","random","radian","PI","x","cos","y","sin","moveOffset","clone","multiplyScalar","position","add","checkEdgeCollision","spriteTransform","getComponent","spritePos","parentTransform","parentSize","contentSize","halfWidth","width","halfHeight","height","anchorX","anchorY","minX","maxX","minY","maxY","collided","setPosition","adjustOffset","uiTransform","addComponent","set","anchorPoint","sprite","load","asset","spriteFrame","addChild"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, UITransform, Sprite, resources, SpriteFrame } from 'cc';\n\nconst { ccclass } = _decorator;\n\n@ccclass('HarmonyTestComponent')\nexport class HarmonyTestComponent extends Component {\n  start() {\n    this.node.getChildByName('Button')!.on(Node.EventType.TOUCH_END, () => {\n      const currentTime = Date.now()\n      console.error('brunozheng', `start test for each ${currentTime}`)\n      let index = 0\n      let result = 0\n      while (index < 10000000) {\n        result = result + index\n        index = index + 1\n      }\n\n      console.error('brunozheng', `result = ${result}, deltaTime=${Date.now() - currentTime}`)\n    })\n  }\n\n  private spriteNodes = new Array<SpriteNode>()\n\n  private generateSpriteNode(length: number) {\n    while (length > 0) {\n      this.spriteNodes.push(new SpriteNode(this.node))\n      length = length - 1\n    }\n  }\n\n  update(deltaTime: number) {\n    this.spriteNodes.forEach((item) => {\n      let index = 0\n      while (index < 100) {\n        item.update(deltaTime)\n        index = index + 1\n      }\n    })\n  }\n\n}\n\nexport class SpriteNode {\n  private direction: Vec3 = new Vec3();\n  private speed: number = 1000; // 每秒移动的像素数\n  private spriteNode: Node | undefined = undefined\n\n  constructor(private parentNode: Node) {\n    this.makeNode()\n    this.setRandomDirection();\n  }\n\n  private setRandomDirection() {\n    let angle = Math.random() * 360;\n    let radian = angle * (Math.PI / 180);\n    this.direction.x = Math.cos(radian);\n    this.direction.y = Math.sin(radian);\n  }\n\n  update(deltaTime: number) {\n    if (!this.spriteNode) {\n      return\n    }\n    let moveOffset = this.direction.clone().multiplyScalar(this.speed * deltaTime);\n    this.spriteNode!.position = this.spriteNode!.position.add(moveOffset);\n\n    // 检查边缘碰撞\n    this.checkEdgeCollision();\n  }\n\n  checkEdgeCollision() {\n    let spriteTransform = this.spriteNode!.getComponent(UITransform)!;\n    let spritePos = this.spriteNode!.position!;\n    let parentTransform = this.parentNode.getComponent(UITransform)!;\n    let parentSize = parentTransform.contentSize;\n\n    let halfWidth = spriteTransform.width / 2;\n    let halfHeight = spriteTransform.height / 2;\n\n    // 考虑锚点值\n    let anchorX = parentTransform.anchorX;\n    let anchorY = parentTransform.anchorY;\n\n    let minX = -parentSize.width * anchorX + halfWidth;\n    let maxX = parentSize.width * (1 - anchorX) - halfWidth;\n    let minY = -parentSize.height * anchorY + halfHeight;\n    let maxY = parentSize.height * (1 - anchorY) - halfHeight;\n\n    let collided = false;\n\n    if (spritePos.x < minX) {\n      this.direction.x *= -1;\n      this.spriteNode!.setPosition(minX, spritePos.y);\n      collided = true;\n    } else if (spritePos.x > maxX) {\n      this.direction.x *= -1;\n      this.spriteNode!.setPosition(maxX, spritePos.y);\n      collided = true;\n    }\n\n    if (spritePos.y < minY) {\n      this.direction.y *= -1;\n      this.spriteNode!.setPosition(spritePos.x, minY);\n      collided = true;\n    } else if (spritePos.y > maxY) {\n      this.direction.y *= -1;\n      this.spriteNode!.setPosition(spritePos.x, maxY);\n      collided = true;\n    }\n\n    if (collided) {\n      // 轻微调整位置以避免再次碰撞\n      let adjustOffset = this.direction.clone().multiplyScalar(1);\n      this.spriteNode!.position = this.spriteNode!.position.add(adjustOffset);\n    }\n  }\n\n\n  makeNode() {\n    const node = new Node()\n    const uiTransform = node.addComponent(UITransform)!\n    uiTransform.contentSize.set(100, 100)\n    uiTransform.anchorPoint.set(0.5, 0.5)\n    const sprite = node.addComponent(Sprite)!\n    resources.load('img/dm_first_avatar/spriteFrame', SpriteFrame, (error, asset) => {\n      sprite.spriteFrame = asset\n      this.parentNode.addChild(node)\n      this.spriteNode = node\n    });\n  }\n}\n"]}