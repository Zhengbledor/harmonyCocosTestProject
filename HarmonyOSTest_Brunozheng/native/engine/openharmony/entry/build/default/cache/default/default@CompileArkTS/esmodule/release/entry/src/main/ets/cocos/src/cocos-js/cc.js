System.register([], function (g125, h125) {
    "use strict";
    return {
        execute: function () {
            function i125(c1391, d1391, e1391, f1391, g1391) {
                var h1391 = {};
                return Object.keys(f1391).forEach(function (m1391) {
                    h1391[m1391] = f1391[m1391];
                }), h1391.enumerable = !!h1391.enumerable, h1391.configurable = !!h1391.configurable, ("value" in h1391 || h1391.initializer) && (h1391.writable = !0), h1391 = e1391.slice().reverse().reduce(function (k1391, l1391) {
                    return l1391(c1391, d1391, k1391) || k1391;
                }, h1391), g1391 && void 0 !== h1391.initializer && (h1391.value = h1391.initializer ? h1391.initializer.call(g1391) : void 0, h1391.initializer = void 0), void 0 === h1391.initializer && (Object.defineProperty(c1391, d1391, h1391), h1391 = null), h1391;
            }
            function j125(z1390, a1391) {
                const b1391 = "undefined" == typeof window ? global : window;
                return void 0 === b1391[z1390] ? b1391[z1390] = a1391 : b1391[z1390];
            }
            g125({
                BitMask: n127,
                CCClass: s128,
                Enum: p127,
                Eventify: g133,
                WorldNode3DToLocalNodeUI: r133,
                WorldNode3DToWorldNodeUI: s133,
                __checkObsoleteInNamespace__: function (v1390) {
                    return t144 || (t144 = "undefined" == typeof Proxy ? {} : new Proxy(v1390, {
                        get: (w1390, x1390, y1390) => (f126(x1390), Reflect.get(w1390, x1390, y1390))
                    })), t144;
                },
                __checkObsolete__: function (t1390) {
                    for (let u1390 of t1390)
                        f126(u1390);
                },
                _resetDebugSetting: u125,
                absMax: o129,
                absMaxComponent: n129,
                applyMixins: a134,
                approx: w128,
                assert: s125,
                assertID: a126,
                assertIsNonNullable: function () { },
                assertIsTrue: function () { },
                assertsArrayIndex: o127,
                bezier: x132,
                bezierByTime: z132,
                binarySearch: function (r1390, s1390) {
                    return n130(r1390, s1390, 0);
                },
                binarySearchBy: function (k1390, l1390, m1390) {
                    let n1390 = 0, o1390 = k1390.length - 1, p1390 = o1390 >>> 1;
                    for (; n1390 <= o1390; p1390 = n1390 + o1390 >>> 1) {
                        const q1390 = k1390[p1390];
                        if (m1390(q1390, l1390) < 0)
                            o1390 = p1390 - 1;
                        else {
                            if (!(m1390(q1390, l1390) > 0))
                                return p1390;
                            n1390 = p1390 + 1;
                        }
                    }
                    return ~n1390;
                },
                binarySearchEpsilon: n130,
                ccenum: s127,
                clamp: x128,
                clamp01: y128,
                color: u129,
                computeRatioByType: o139,
                debug: t125,
                deprecateModuleExportedName: e126,
                deserialize: e135,
                enumerableProps: p129,
                equals: v128,
                error: r125,
                errorID: z125,
                find: x135,
                flattenCodeArray: z133,
                floatToHalf: q129,
                formerlySerializedAs: y130,
                fragmentText: s137,
                getBaselineOffset: function () {
                    return 0;
                },
                getEnglishWordPartAtFirst: q137,
                getEnglishWordPartAtLast: r137,
                getError: b126,
                getPathFromRoot: function (g1390, h1390) {
                    let i1390 = g1390, j1390 = "";
                    for (; null !== i1390 && i1390 !== h1390;)
                        j1390 = `${i1390.name}/${j1390}`, i1390 = i1390.parent;
                    return j1390.slice(0, -1);
                },
                getSerializationMetadata: function (f1390) {
                    return f1390[i151];
                },
                getWorldTransformUntilRoot: function (c1390, d1390, e1390) {
                    for (o147.identity(e1390); c1390 !== d1390;)
                        o147.fromRTS(d216, c1390.rotation, c1390.position, c1390.scale), o147.multiply(e1390, d216, e1390), c1390 = c1390.parent;
                    return e1390;
                },
                halfToFloat: r129,
                instantiate: h141,
                inverseLerp: m129,
                isCCClassOrFastDefined: t128,
                isCCObject: b131,
                isDisplayStats: c126,
                isEnglishWordPartAtFirst: function (b1390) {
                    return z187.test(b1390);
                },
                isEnglishWordPartAtLast: function (a1390) {
                    return y187.test(a1390);
                },
                isUnicodeCJK: m137,
                isUnicodeSpace: n137,
                isValid: c131,
                lerp: z128,
                log: p125,
                logID: x125,
                mat4: w129,
                murmurhash2_32_gc: u133,
                nextPow2: j129,
                pingPong: l129,
                pseudoRandom: g129,
                pseudoRandomRange: h129,
                pseudoRandomRangeInt: i129,
                quat: v129,
                random: c129,
                randomRange: e129,
                randomRangeInt: f129,
                rect: b130,
                repeat: k129,
                safeMeasureText: o137,
                sampleAnimationCurve: n139,
                setDefaultLogTimes: function (z1389) {
                    z1389 > 0 && (p144 = z1389);
                },
                setDisplayStats: d126,
                setPropertyEnumType: n128,
                setPropertyEnumTypeOnAttrs: o128,
                setRandGenerator: d129,
                shift: function (t1389, u1389, v1389) {
                    if (o127(t1389, u1389), o127(t1389, v1389), u1389 === v1389)
                        return t1389;
                    const w1389 = t1389[u1389];
                    if (u1389 < v1389)
                        for (let y1389 = u1389 + 1; y1389 <= v1389; ++y1389)
                            t1389[y1389 - 1] = t1389[y1389];
                    else
                        for (let x1389 = u1389; x1389 !== v1389; --x1389)
                            t1389[x1389] = t1389[x1389 - 1];
                    return t1389[v1389] = w1389, t1389;
                },
                size: a130,
                toDegree: b129,
                toRadian: a129,
                tween: g143,
                tweenUtil: h143,
                v2: x129,
                v3: t129,
                v4: s129,
                warn: q125,
                warnID: y125
            }), j125("CC_WECHAT", !1), j125("CC_BAIDU", !1), j125("CC_XIAOMI", !1), j125("CC_ALIPAY", !1), j125("CC_BYTEDANCE", !1), j125("CC_OPPO", !1), j125("CC_VIVO", !1), j125("CC_HUAWEI", !1), j125("CC_COCOSPLAY", !1), j125("CC_QTT", !1), j125("CC_LINKSURE", !1);
            j125("CC_EDITOR", !1), j125("CC_PREVIEW", !1), j125("CC_BUILD", !0), j125("CC_TEST", !1), j125("CC_DEBUG", !1), j125("CC_DEV", !1), j125("CC_MINIGAME", !1), j125("CC_RUNTIME_BASED", !1), j125("CC_SUPPORT_JIT", !1), j125("CC_JSB", !0);
            const r143 = "undefined" == typeof window ? global : window, s143 = g125("cclegacy", {
                _global: r143
            });
            s143.internal = {};
            const t143 = g125("VERSION", "3.8.2");
            r143.CocosEngine = s143.ENGINE_VERSION = t143, r143.cc = s143;
            const u143 = void 0 !== globalThis.jsb && void 0 !== jsb.window ? jsb.window : globalThis;
            function k125(q1389) {
                let r1389, s1389;
                return r1389 = (q1389 > 65535) << 4, s1389 = ((q1389 >>>= r1389) > 255) << 3, r1389 |= s1389, s1389 = ((q1389 >>>= s1389) > 15) << 2, r1389 |= s1389, s1389 = ((q1389 >>>= s1389) > 3) << 1, r1389 |= s1389, r1389 | (q1389 >>>= s1389) >> 1;
            }
            function l125(p1389) {
                return 16843009 * ((p1389 = (858993459 & (p1389 -= p1389 >>> 1 & 1431655765)) + (p1389 >>> 2 & 858993459)) + (p1389 >>> 4) & 252645135) >>> 24;
            }
            function m125(n1389) {
                let o1389 = 32;
                return (n1389 &= -n1389) && o1389--, 65535 & n1389 && (o1389 -= 16), 16711935 & n1389 && (o1389 -= 8), 252645135 & n1389 && (o1389 -= 4), 858993459 & n1389 && (o1389 -= 2), 1431655765 & n1389 && (o1389 -= 1), o1389;
            }
            function n125(m1389) {
                return --m1389, m1389 |= m1389 >>> 1, m1389 |= m1389 >>> 2, m1389 |= m1389 >>> 4, m1389 |= m1389 >>> 8, 1 + (m1389 |= m1389 >>> 16);
            }
            r143.ccwindow = u143;
            const v143 = new Array(256);
            (h1389 => {
                for (let i1389 = 0; i1389 < 256; ++i1389) {
                    let j1389 = i1389, k1389 = i1389, l1389 = 7;
                    for (j1389 >>>= 1; j1389; j1389 >>>= 1)
                        k1389 <<= 1, k1389 |= 1 & j1389, --l1389;
                    h1389[i1389] = k1389 << l1389 & 255;
                }
            })(v143);
            var w143 = Object.freeze({
                __proto__: null,
                INT_BITS: 32,
                INT_MAX: 2147483647,
                INT_MIN: -2147483648,
                sign: function (g1389) {
                    return (g1389 > 0) - (g1389 < 0);
                },
                abs: function (e1389) {
                    const f1389 = e1389 >> 31;
                    return (e1389 ^ f1389) - f1389;
                },
                min: function (c1389, d1389) {
                    return d1389 ^ (c1389 ^ d1389) & -(c1389 < d1389);
                },
                max: function (a1389, b1389) {
                    return a1389 ^ (a1389 ^ b1389) & -(a1389 < b1389);
                },
                isPow2: function (z1388) {
                    return !(z1388 & z1388 - 1 || !z1388);
                },
                log2: k125,
                log10: function (y1388) {
                    return y1388 >= 1e9 ? 9 : y1388 >= 1e8 ? 8 : y1388 >= 1e7 ? 7 : y1388 >= 1e6 ? 6 : y1388 >= 1e5 ? 5 : y1388 >= 1e4 ? 4 : y1388 >= 1e3 ? 3 : y1388 >= 100 ? 2 : y1388 >= 10 ? 1 : 0;
                },
                popCount: l125,
                countTrailingZeros: m125,
                nextPow2: n125,
                prevPow2: function (x1388) {
                    return x1388 |= x1388 >>> 1, x1388 |= x1388 >>> 2, x1388 |= x1388 >>> 4, x1388 |= x1388 >>> 8, (x1388 |= x1388 >>> 16) - (x1388 >>> 1);
                },
                parity: function (w1388) {
                    return w1388 ^= w1388 >>> 16, w1388 ^= w1388 >>> 8, w1388 ^= w1388 >>> 4, 27030 >>> (w1388 &= 15) & 1;
                },
                reverse: function (v1388) {
                    return v143[255 & v1388] << 24 | v143[v1388 >>> 8 & 255] << 16 | v143[v1388 >>> 16 & 255] << 8 | v143[v1388 >>> 24 & 255];
                },
                interleave2: function (t1388, u1388) {
                    return (t1388 = 1431655765 & ((t1388 = 858993459 & ((t1388 = 252645135 & ((t1388 = 16711935 & ((t1388 &= 65535) | t1388 << 8)) | t1388 << 4)) | t1388 << 2)) | t1388 << 1)) | (u1388 = 1431655765 & ((u1388 = 858993459 & ((u1388 = 252645135 & ((u1388 = 16711935 & ((u1388 &= 65535) | u1388 << 8)) | u1388 << 4)) | u1388 << 2)) | u1388 << 1)) << 1;
                },
                deinterleave2: function (r1388, s1388) {
                    return (r1388 = 65535 & ((r1388 = 16711935 & ((r1388 = 252645135 & ((r1388 = 858993459 & ((r1388 = r1388 >>> s1388 & 1431655765) | r1388 >>> 1)) | r1388 >>> 2)) | r1388 >>> 4)) | r1388 >>> 16)) << 16 >> 16;
                },
                interleave3: function (o1388, p1388, q1388) {
                    return o1388 = 1227133513 & ((o1388 = 3272356035 & ((o1388 = 251719695 & ((o1388 = 4278190335 & ((o1388 &= 1023) | o1388 << 16)) | o1388 << 8)) | o1388 << 4)) | o1388 << 2), (o1388 |= (p1388 = 1227133513 & ((p1388 = 3272356035 & ((p1388 = 251719695 & ((p1388 = 4278190335 & ((p1388 &= 1023) | p1388 << 16)) | p1388 << 8)) | p1388 << 4)) | p1388 << 2)) << 1) | (q1388 = 1227133513 & ((q1388 = 3272356035 & ((q1388 = 251719695 & ((q1388 = 4278190335 & ((q1388 &= 1023) | q1388 << 16)) | q1388 << 8)) | q1388 << 4)) | q1388 << 2)) << 2;
                },
                deinterleave3: function (m1388, n1388) {
                    return (m1388 = 1023 & ((m1388 = 4278190335 & ((m1388 = 251719695 & ((m1388 = 3272356035 & ((m1388 = m1388 >>> n1388 & 1227133513) | m1388 >>> 2)) | m1388 >>> 4)) | m1388 >>> 8)) | m1388 >>> 16)) << 22 >> 22;
                },
                nextCombination: function (k1388) {
                    const l1388 = k1388 | k1388 - 1;
                    return l1388 + 1 | (~l1388 & -~l1388) - 1 >>> m125(k1388) + 1;
                }
            });
            g125("bits", w143);
            const x143 = u143.document;
            let y143 = null, z143 = console.log.bind(console), a144 = z143, b144 = z143, c144 = (h1388, i1388, ...j1388) => {
                h1388 || console.log(`ASSERT: ${o125(i1388, ...j1388)}`);
            }, d144 = z143;
            function o125(...g1388) {
                return s143.js.formatStr.apply(null, g1388);
            }
            function p125(...f1388) {
                return z143(...f1388);
            }
            function q125(...e1388) {
                return a144(...e1388);
            }
            function r125(...d1388) {
                return b144(...d1388);
            }
            function s125(a1388, b1388, ...c1388) {
                return c144(a1388, b1388, ...c1388);
            }
            function t125(...z1387) {
                return d144(...z1387);
            }
            function u125(z1386) {
                if (z143 = a144 = b144 = c144 = d144 = () => { }, z1386 !== i144.NONE) {
                    if (z1386 > i144.ERROR) {
                        const j1387 = v1387 => {
                            if (s143.game.canvas) {
                                if (!y143) {
                                    const w1387 = x143.createElement("Div");
                                    w1387.setAttribute("id", "logInfoDiv"), w1387.setAttribute("width", "200"), w1387.setAttribute("height", s143.game.canvas.height);
                                    const x1387 = w1387.style;
                                    x1387.zIndex = "99999", x1387.position = "absolute", x1387.top = x1387.left = "0", y143 = x143.createElement("textarea"), y143.setAttribute("rows", "20"), y143.setAttribute("cols", "30"), y143.setAttribute("disabled", "true");
                                    const y1387 = y143.style;
                                    y1387.backgroundColor = "transparent", y1387.borderBottom = "1px solid #cccccc", y1387.borderTopWidth = y1387.borderLeftWidth = y1387.borderRightWidth = "0px", y1387.borderTopStyle = y1387.borderLeftStyle = y1387.borderRightStyle = "none", y1387.padding = "0px", y1387.margin = "0px", w1387.appendChild(y143), s143.game.canvas.parentNode.appendChild(w1387);
                                }
                                y143.value = `${y143.value + v1387}\r\n`, y143.scrollTop = y143.scrollHeight;
                            }
                        };
                        b144 = (...u1387) => {
                            j1387(`ERROR :  ${o125(...u1387)}`);
                        }, c144 = (r1387, s1387, ...t1387) => {
                            r1387 || j1387(`ASSERT: ${o125(s1387, ...t1387)}`);
                        }, z1386 !== i144.ERROR_FOR_WEB_PAGE && (a144 = (...q1387) => {
                            j1387(`WARN :  ${o125(...q1387)}`);
                        }), z1386 === i144.INFO_FOR_WEB_PAGE && (z143 = (...p1387) => {
                            j1387(o125(...p1387));
                        });
                    }
                    else
                        console && (console.error || (console.error = console.log), console.warn || (console.warn = console.log), b144 = console.error.bind ? console.error.bind(console) : console.error, c144 = (f1387, g1387, ...h1387) => {
                            if (!f1387) {
                                const i1387 = o125(g1387, ...h1387);
                                throw new Error(i1387);
                            }
                        });
                    if (z1386 !== i144.ERROR && (a144 = console.warn.bind ? console.warn.bind(console) : console.warn), z1386 <= i144.INFO && (z143 = console.log), z1386 <= i144.VERBOSE && "function" == typeof console.debug) {
                        const c1387 = console.debug.bind(console);
                        d144 = (...e1387) => c1387(...e1387);
                    }
                }
            }
            function v125(x1386) {
                {
                    const y1386 = x1386.stack;
                    return void r125(y1386 ? `${x1386}\n${y1386}` : x1386);
                }
            }
            function w125(s1386) {
                return (u1386, ...v1386) => {
                    const w1386 = `${s1386} ${u1386}, please go to https://github.com/cocos-creator/engine/blob/develop/EngineErrorMap.md#${u1386} to see details.`;
                    return 0 === v1386.length ? w1386 : `${w1386} Arguments: ${v1386.join(", ")}`;
                };
            }
            const e144 = w125("Log");
            function x125(q1386, ...r1386) {
                p125(e144(q1386, ...r1386));
            }
            const f144 = w125("Warning");
            function y125(o1386, ...p1386) {
                q125(f144(o1386, ...p1386));
            }
            const g144 = w125("Error");
            function z125(m1386, ...n1386) {
                r125(g144(m1386, ...n1386));
            }
            const h144 = w125("Assert");
            function a126(j1386, k1386, ...l1386) {
                j1386 || s125(!1, h144(k1386, ...l1386));
            }
            let i144;
            function b126(h1386, ...i1386) {
                return g144(h1386, ...i1386);
            }
            function c126() {
                return !!s143.profiler && s143.profiler.isShowingStats();
            }
            function d126(g1386) {
                s143.profiler && (g1386 ? s143.profiler.showStats() : s143.profiler.hideStats());
            }
            g125("DebugMode", i144), function (f1386) {
                f1386[f1386.NONE = 0] = "NONE", f1386[f1386.VERBOSE = 1] = "VERBOSE", f1386[f1386.INFO = 2] = "INFO", f1386[f1386.WARN = 3] = "WARN", f1386[f1386.ERROR = 4] = "ERROR", f1386[f1386.INFO_FOR_WEB_PAGE = 5] = "INFO_FOR_WEB_PAGE", f1386[f1386.WARN_FOR_WEB_PAGE = 6] = "WARN_FOR_WEB_PAGE", f1386[f1386.ERROR_FOR_WEB_PAGE = 7] = "ERROR_FOR_WEB_PAGE";
            }(i144 || g125("DebugMode", i144 = {}));
            var j144 = Object.freeze({
                __proto__: null,
                log: p125,
                warn: q125,
                error: r125,
                assert: s125,
                debug: t125,
                _resetDebugSetting: u125,
                _throw: v125,
                logID: x125,
                warnID: y125,
                errorID: z125,
                assertID: a126,
                get DebugMode() {
                    return i144;
                },
                getError: b126,
                isDisplayStats: c126,
                setDisplayStats: d126
            });
            let k144, l144, m144, n144, o144, p144 = 10;
            g125("replaceProperty", k144), g125("removeProperty", l144), g125("markAsWarning", m144);
            let q144 = 0;
            const r144 = new Map();
            n144 = (x1385, y1385, z1385, a1386, b1386, c1386, d1386) => {
                const e1386 = r144.get(c1386);
                e1386 && e1386.logTimes > e1386.count && (b1386(`'%s' is deprecated, please use '%s' instead. ${d1386}`, `${x1385}.${y1385}`, `${z1385}.${a1386}`), e1386.count++);
            }, g125("replaceProperty", k144 = (g1385, h1385, i1385) => {
                null != g1385 && i1385.forEach(k1385 => {
                    const l1385 = q144++;
                    r144.set(l1385, {
                        id: l1385,
                        count: 0,
                        logTimes: void 0 !== k1385.logTimes ? k1385.logTimes : p144
                    });
                    const m1385 = null != k1385.target ? k1385.target : g1385, n1385 = null != k1385.newName ? k1385.newName : k1385.name, o1385 = null != k1385.targetName ? k1385.targetName : h1385, p1385 = m1385 === g1385, q1385 = k1385.suggest ? `(${k1385.suggest})` : "";
                    if (null != k1385.customFunction)
                        g1385[k1385.name] = function () {
                            return n144(h1385, k1385.name, o1385, n1385, q125, l1385, q1385), k1385.customFunction.call(this, ...arguments);
                        };
                    else if (null != k1385.customSetter || null != k1385.customGetter) {
                        const t1385 = null != k1385.customSetter, u1385 = null != k1385.customGetter;
                        t1385 && u1385 ? Object.defineProperty(g1385, k1385.name, {
                            get() {
                                return n144(h1385, k1385.name, o1385, n1385, q125, l1385, q1385), k1385.customGetter.call(this);
                            },
                            set(w1385) {
                                n144(h1385, k1385.name, o1385, n1385, q125, l1385, q1385), k1385.customSetter.call(this, w1385);
                            },
                            enumerable: !1
                        }) : t1385 ? Object.defineProperty(g1385, k1385.name, {
                            set(v1385) {
                                n144(h1385, k1385.name, o1385, n1385, q125, l1385, q1385), k1385.customSetter.call(this, v1385);
                            },
                            enumerable: !1
                        }) : u1385 && Object.defineProperty(g1385, k1385.name, {
                            get() {
                                return n144(h1385, k1385.name, o1385, n1385, q125, l1385, q1385), k1385.customGetter.call(this);
                            },
                            enumerable: !1
                        });
                    }
                    else
                        Object.defineProperty(g1385, k1385.name, {
                            get() {
                                return n144(h1385, k1385.name, o1385, n1385, q125, l1385, q1385), p1385 ? this[n1385] : m1385[n1385];
                            },
                            set(s1385) {
                                n144(h1385, k1385.name, o1385, n1385, q125, l1385, q1385), p1385 ? this[n1385] = s1385 : m1385[n1385] = s1385;
                            },
                            enumerable: !1
                        });
                });
            }), o144 = (a1385, b1385, c1385, d1385, e1385) => {
                const f1385 = r144.get(d1385);
                f1385 && f1385.logTimes > f1385.count && (c1385(`'%s' has been removed. ${e1385}`, `${a1385}.${b1385}`), f1385.count++);
            }, g125("removeProperty", l144 = (t1384, u1384, v1384) => {
                null != t1384 && v1384.forEach(x1384 => {
                    const y1384 = q144++;
                    r144.set(y1384, {
                        id: y1384,
                        count: 0,
                        logTimes: void 0 !== x1384.logTimes ? x1384.logTimes : p144
                    });
                    const z1384 = x1384.suggest ? `(${x1384.suggest})` : "";
                    Object.defineProperty(t1384, x1384.name, {
                        get: () => o144(u1384, x1384.name, r125, y1384, z1384),
                        set() {
                            o144(u1384, x1384.name, r125, y1384, z1384);
                        },
                        enumerable: !1
                    });
                });
            }), g125("markAsWarning", m144 = () => { });
            const s144 = {};
            function e126(q1384) {
                for (let r1384 in q1384) {
                    const s1384 = q1384[r1384];
                    s144[r1384] = s1384;
                }
            }
            function f126(l1384) {
                const m1384 = s144[l1384];
                if (!m1384)
                    return;
                const { newName: n1384, since: o1384, removed: p1384 } = m1384;
                p1384 ? n1384 ? z125(16003, l1384, o1384, n1384) : z125(16002, l1384, o1384) : n1384 ? y125(16001, l1384, o1384, n1384) : y125(16e3, l1384, o1384);
            }
            let t144;
            var u144;
            class v144 {
                constructor(k1384) {
                    this.id = void 0, this.prefix = void 0, this.id = 0 | 998 * Math.random(), this.prefix = k1384 ? k1384 + "." : "";
                }
                getNewId() {
                    return this.prefix + (++this.id).toString();
                }
            }
            u144 = v144, v144.global = new u144("global");
            const w144 = new v144("TmpCId."), x144 = "undefined" == typeof Symbol ? "__aliases__" : Symbol("[[Aliases]]"), y144 = "__cid__";
            function g126(j1384) {
                return "number" == typeof j1384 || j1384 instanceof Number;
            }
            function h126(i1384) {
                return "string" == typeof i1384 || i1384 instanceof String;
            }
            function i126(g1384) {
                for (const h1384 in g1384)
                    return !1;
                return !0;
            }
            const z144 = (() => {
                const z1383 = {
                    value: void 0,
                    enumerable: !1,
                    writable: !1,
                    configurable: !0
                };
                return (b1384, c1384, d1384, e1384, f1384) => {
                    z1383.value = d1384, z1383.writable = e1384, z1383.enumerable = f1384, Object.defineProperty(b1384, c1384, z1383), z1383.value = void 0;
                };
            })(), a145 = (() => {
                const r1383 = {
                    get: void 0,
                    set: void 0,
                    enumerable: !1
                };
                return (t1383, u1383, v1383, w1383, x1383 = !1, y1383 = !1) => {
                    "boolean" == typeof w1383 && (console.log("Set `setter` to boolean is deprecated. Please don not use like this again."), x1383 = w1383, w1383 = void 0), r1383.get = v1383, r1383.set = w1383, r1383.enumerable = x1383, r1383.configurable = y1383, Object.defineProperty(t1383, u1383, r1383), r1383.get = void 0, r1383.set = void 0;
                };
            })(), b145 = (() => {
                const k1383 = {
                    get: void 0,
                    enumerable: !1,
                    configurable: !1
                };
                return (m1383, n1383, o1383, p1383, q1383) => {
                    k1383.get = o1383, k1383.enumerable = p1383, k1383.configurable = q1383, Object.defineProperty(m1383, n1383, k1383), k1383.get = void 0;
                };
            })(), c145 = (() => {
                const d1383 = {
                    set: void 0,
                    enumerable: !1,
                    configurable: !1
                };
                return (f1383, g1383, h1383, i1383, j1383) => {
                    d1383.set = h1383, d1383.enumerable = i1383, d1383.configurable = j1383, Object.defineProperty(f1383, g1383, d1383), d1383.set = void 0;
                };
            })();
            function j126(z1382) {
                const a1383 = Object.create(null);
                if (z1382) {
                    const b1383 = ".", c1383 = "/";
                    a1383[b1383] = 1, a1383[c1383] = 1, delete a1383[b1383], delete a1383[c1383];
                }
                return a1383;
            }
            function k126(u1382) {
                if ("function" == typeof u1382) {
                    const v1382 = u1382.prototype;
                    if (v1382 && v1382.hasOwnProperty("__classname__") && v1382.__classname__)
                        return v1382.__classname__;
                    let w1382 = "";
                    if (u1382.name && (w1382 = u1382.name), u1382.toString) {
                        let x1382;
                        const y1382 = u1382.toString();
                        x1382 = "[" === y1382.charAt(0) ? /\[\w+\s*(\w+)\]/.exec(y1382) : /function\s*(\w+)/.exec(y1382), x1382 && 2 === x1382.length && (w1382 = x1382[1]);
                    }
                    return "Object" !== w1382 ? w1382 : "";
                }
                return u1382 && u1382.constructor ? k126(u1382.constructor) : "";
            }
            function l126(k1382, l1382, m1382, n1382) {
                const p1382 = /([^.]+)$/, q1382 = p1382.exec(l1382)[0], r1382 = p1382.exec(m1382)[0];
                function o1382() {
                    return this[r1382];
                }
                n1382 ? a145(k1382, q1382, o1382, function (t1382) {
                    this[r1382] = t1382;
                }) : b145(k1382, q1382, o1382);
            }
            function m126(f1382, g1382, h1382, i1382) {
                for (const j1382 in h1382)
                    l126(f1382, `${g1382}.${j1382}`, h1382[j1382], i1382);
            }
            const d145 = /(%d)|(%s)/, e145 = /%s/;
            function n126(y1381, ...z1381) {
                if (0 === arguments.length)
                    return "";
                if (0 === z1381.length)
                    return `${y1381}`;
                const a1382 = "string" == typeof y1381 && d145.test(y1381);
                if (a1382)
                    for (const c1382 of z1381) {
                        const d1382 = "number" == typeof c1382 ? d145 : e145;
                        if (d1382.test(y1381)) {
                            const e1382 = `${c1382}`;
                            y1381 = y1381.replace(d1382, e1382);
                        }
                        else
                            y1381 += ` ${c1382}`;
                    }
                else
                    for (const b1382 of z1381)
                        y1381 += ` ${b1382}`;
                return y1381;
            }
            function o126() {
                const v1381 = arguments.length - 1, w1381 = new Array(v1381);
                for (let x1381 = 0; x1381 < v1381; ++x1381)
                    w1381[x1381] = arguments[x1381 + 1];
                return w1381;
            }
            function p126(s1381, t1381) {
                for (; s1381;) {
                    const u1381 = Object.getOwnPropertyDescriptor(s1381, t1381);
                    if (u1381)
                        return u1381;
                    s1381 = Object.getPrototypeOf(s1381);
                }
                return null;
            }
            function q126(o1381, p1381, q1381) {
                const r1381 = p126(p1381, o1381);
                r1381 && Object.defineProperty(q1381, o1381, r1381);
            }
            function r126(h1381, i1381, j1381) {
                const k1381 = Object.getOwnPropertyNames(h1381);
                for (let l1381 = 0, m1381 = k1381.length; l1381 < m1381; ++l1381) {
                    const n1381 = k1381[l1381];
                    -1 === j1381.indexOf(n1381) && q126(n1381, h1381, i1381);
                }
            }
            function s126(d1381, ...e1381) {
                d1381 = d1381 || {};
                for (const f1381 of e1381)
                    if (f1381) {
                        if ("object" != typeof f1381) {
                            z125(5402, f1381);
                            continue;
                        }
                        for (const g1381 in f1381)
                            g1381 in d1381 || q126(g1381, f1381, d1381);
                    }
                return d1381;
            }
            function t126(z1380, ...a1381) {
                z1380 = z1380 || {};
                for (const b1381 of a1381)
                    if (b1381) {
                        if ("object" != typeof b1381) {
                            z125(5403, b1381);
                            continue;
                        }
                        for (const c1381 in b1381)
                            q126(c1381, b1381, z1380);
                    }
                return z1380;
            }
            function u126(w1380, x1380) {
                for (const y1380 in x1380)
                    x1380.hasOwnProperty(y1380) && (w1380[y1380] = x1380[y1380]);
                return w1380.prototype = Object.create(x1380.prototype, {
                    constructor: {
                        value: w1380,
                        writable: !0,
                        configurable: !0
                    }
                }), w1380;
            }
            function v126(t1380) {
                const u1380 = t1380.prototype, v1380 = u1380 && Object.getPrototypeOf(u1380);
                return v1380 && v1380.constructor;
            }
            function w126(r1380, s1380) {
                if (r1380 && s1380) {
                    if ("function" != typeof r1380)
                        return !1;
                    if ("function" != typeof s1380)
                        return !1;
                    if (r1380 === s1380)
                        return !0;
                    for (;;) {
                        if (!(r1380 = v126(r1380)))
                            return !1;
                        if (r1380 === s1380)
                            return !0;
                    }
                }
                return !1;
            }
            function x126(p1380) {
                for (const q1380 of Object.keys(p1380))
                    delete p1380[q1380];
            }
            const f145 = j126(!0), g145 = j126(!0);
            function y126(i1380, j1380, k1380) {
                return function (m1380, n1380) {
                    if (n1380.prototype.hasOwnProperty(i1380) && delete j1380[n1380.prototype[i1380]], z144(n1380.prototype, i1380, m1380), m1380) {
                        const o1380 = j1380[m1380];
                        !k1380 && o1380 && o1380 !== n1380 ? r125(`A Class already exists with the same ${i1380} : "${m1380}".`) : j1380[m1380] = n1380;
                    }
                };
            }
            const h145 = y126("__cid__", f145, !1), i145 = y126("__classname__", g145, !0);
            function z126(f1380, g1380) {
                if (i145(f1380, g1380), !g1380.prototype.hasOwnProperty(y144)) {
                    const h1380 = f1380 || w144.getNewId();
                    h1380 && h145(h1380, g1380);
                }
            }
            function a127(z1379, a1380) {
                const b1380 = g145[a1380], c1380 = f145[a1380];
                let d1380 = !0;
                if (b1380 && b1380 !== z1379 && (r125(`"${a1380}" has already been set as name or alias of another class.`), d1380 = !1), c1380 && c1380 !== z1379 && (r125(`"${a1380}" has already been set as id or alias of another class.`), d1380 = !1), d1380) {
                    let e1380 = z1379[x144];
                    e1380 || (e1380 = [], z1379[x144] = e1380), e1380.push(a1380), g145[a1380] = z1379, f145[a1380] = z1379;
                }
            }
            function b127(...r1379) {
                for (const s1379 of r1379) {
                    const t1379 = s1379.prototype, u1379 = t1379.__cid__;
                    u1379 && delete f145[u1379];
                    const v1379 = t1379.__classname__;
                    v1379 && delete g145[v1379];
                    const w1379 = t1379[x144];
                    if (w1379)
                        for (let x1379 = 0; x1379 < w1379.length; ++x1379) {
                            const y1379 = w1379[x1379];
                            delete g145[y1379], delete f145[y1379];
                        }
                }
            }
            function c127(q1379) {
                return d127(q1379);
            }
            function d127(p1379) {
                return f145[p1379];
            }
            function e127(o1379) {
                return g145[o1379];
            }
            function f127(m1379, n1379) {
                return g127(m1379, n1379);
            }
            function g127(i1379, j1379) {
                let k1379;
                if (j1379 = void 0 === j1379 || j1379, "function" == typeof i1379 && i1379.prototype.hasOwnProperty(y144))
                    return k1379 = i1379.prototype.__cid__, k1379;
                if (i1379 && i1379.constructor) {
                    const l1379 = i1379.constructor.prototype;
                    if (l1379 && l1379.hasOwnProperty(y144))
                        return k1379 = i1379.__cid__, k1379;
                }
                return "";
            }
            class j145 {
                get() {
                    return this._get();
                }
                constructor(e1379, f1379) {
                    this.count = void 0, this._pool = void 0, this._cleanup = void 0;
                    const g1379 = void 0 === f1379 ? e1379 : f1379, h1379 = void 0 === f1379 ? null : e1379;
                    this.count = 0, this._pool = new Array(g1379), this._cleanup = h1379;
                }
                _get() {
                    if (this.count > 0) {
                        --this.count;
                        const d1379 = this._pool[this.count];
                        return this._pool[this.count] = null, d1379;
                    }
                    return null;
                }
                put(b1379) {
                    const c1379 = this._pool;
                    if (this.count < c1379.length) {
                        if (this._cleanup && !1 === this._cleanup(b1379))
                            return;
                        c1379[this.count] = b1379, ++this.count;
                    }
                }
                resize(a1379) {
                    a1379 >= 0 && (this._pool.length = a1379, this.count > a1379 && (this.count = a1379));
                }
            }
            class k145 {
                constructor(z1378) {
                    this.i = 0, this.array = z1378;
                }
                get length() {
                    return this.array.length;
                }
                set length(y1378) {
                    this.array.length = y1378, this.i >= y1378 && (this.i = y1378 - 1);
                }
                remove(w1378) {
                    const x1378 = this.array.indexOf(w1378);
                    x1378 >= 0 && this.removeAt(x1378);
                }
                removeAt(v1378) {
                    this.array.splice(v1378, 1), v1378 <= this.i && --this.i;
                }
                fastRemove(t1378) {
                    const u1378 = this.array.indexOf(t1378);
                    u1378 >= 0 && this.fastRemoveAt(u1378);
                }
                fastRemoveAt(r1378) {
                    const s1378 = this.array;
                    s1378[r1378] = s1378[s1378.length - 1], --s1378.length, r1378 <= this.i && --this.i;
                }
                push(q1378) {
                    this.array.push(q1378);
                }
            }
            function h127(o1378, p1378) {
                o1378.splice(p1378, 1);
            }
            function i127(l1378, m1378) {
                const n1378 = l1378.length;
                m1378 < 0 || m1378 >= n1378 || (l1378[m1378] = l1378[n1378 - 1], l1378.length = n1378 - 1);
            }
            function j127(i1378, j1378) {
                const k1378 = i1378.indexOf(j1378);
                return k1378 >= 0 && (h127(i1378, k1378), !0);
            }
            function k127(f1378, g1378) {
                const h1378 = f1378.indexOf(g1378);
                h1378 >= 0 && (f1378[h1378] = f1378[f1378.length - 1], --f1378.length);
            }
            function l127(b1378, c1378) {
                const d1378 = b1378.findIndex(c1378);
                if (d1378 >= 0) {
                    const e1378 = b1378[d1378];
                    return h127(b1378, d1378), e1378;
                }
            }
            function m127(z1377, a1378) {
                return z1377.indexOf(a1378) >= 0;
            }
            var l145 = Object.freeze({
                __proto__: null,
                removeAt: h127,
                fastRemoveAt: i127,
                remove: j127,
                fastRemove: k127,
                removeIf: l127,
                verifyType: function (w1377, x1377) {
                    if (w1377 && w1377.length > 0)
                        for (const y1377 of w1377)
                            if (!(y1377 instanceof x1377))
                                return x125(1300), !1;
                    return !0;
                },
                removeArray: function (s1377, t1377) {
                    for (let u1377 = 0, v1377 = t1377.length; u1377 < v1377; u1377++)
                        j127(s1377, t1377[u1377]);
                },
                appendObjectsAt: function (p1377, q1377, r1377) {
                    return p1377.splice.apply(p1377, [r1377, 0, ...q1377]), p1377;
                },
                contains: m127,
                copy: function (l1377) {
                    const m1377 = l1377.length, n1377 = new Array(m1377);
                    for (let o1377 = 0; o1377 < m1377; o1377 += 1)
                        n1377[o1377] = l1377[o1377];
                    return n1377;
                },
                MutableForwardIterator: k145
            });
            const m145 = {
                IDGenerator: v144,
                Pool: j145,
                array: l145,
                isNumber: g126,
                isString: h126,
                isEmptyObject: i126,
                getPropertyDescriptor: p126,
                addon: s126,
                mixin: t126,
                extend: u126,
                getSuper: v126,
                isChildClassOf: w126,
                clear: x126,
                value: z144,
                getset: a145,
                get: b145,
                set: c145,
                unregisterClass: b127,
                getClassName: k126,
                setClassName: z126,
                setClassAlias: a127,
                getClassByName: e127,
                getClassById: d127,
                get _registeredClassNames() {
                    return {
                        ...g145
                    };
                },
                set _registeredClassNames(k1377) {
                    x126(g145), Object.assign(g145, k1377);
                },
                get _registeredClassIds() {
                    return {
                        ...f145
                    };
                },
                set _registeredClassIds(j1377) {
                    x126(f145), Object.assign(f145, j1377);
                },
                _getClassId: f127,
                getClassId: g127,
                _setClassId: h145,
                _getClassById: c127,
                obsolete: l126,
                obsoletes: m126,
                formatStr: n126,
                shiftArguments: o126,
                createMap: j126
            };
            s143.js = m145;
            var n145, o145 = Object.freeze({
                __proto__: null,
                array: l145,
                js: m145,
                IDGenerator: v144,
                Pool: j145,
                isNumber: g126,
                isString: h126,
                isEmptyObject: i126,
                value: z144,
                getset: a145,
                get: b145,
                set: c145,
                createMap: j126,
                getClassName: k126,
                obsolete: l126,
                obsoletes: m126,
                formatStr: n126,
                shiftArguments: o126,
                getPropertyDescriptor: p126,
                copyAllProperties: r126,
                addon: s126,
                mixin: t126,
                extend: u126,
                getSuper: v126,
                isChildClassOf: w126,
                clear: x126,
                _idToClass: f145,
                _nameToClass: g145,
                _setClassId: h145,
                setClassName: z126,
                setClassAlias: a127,
                unregisterClass: b127,
                _getClassById: c127,
                getClassById: d127,
                getClassByName: e127,
                _getClassId: f127,
                getClassId: g127
            });
            function n127(c1377) {
                if ("__bitmask__" in c1377)
                    return c1377;
                z144(c1377, "__bitmask__", null, !0);
                let d1377 = -1;
                const e1377 = Object.keys(c1377);
                for (let f1377 = 0; f1377 < e1377.length; f1377++) {
                    const g1377 = e1377[f1377];
                    let h1377 = c1377[g1377];
                    if (-1 === h1377)
                        h1377 = ++d1377, c1377[g1377] = h1377;
                    else if ("number" == typeof h1377)
                        d1377 = h1377;
                    else if ("string" == typeof h1377 && Number.isInteger(parseFloat(g1377)))
                        continue;
                    const i1377 = `${h1377}`;
                    g1377 !== i1377 && z144(c1377, i1377, g1377);
                }
                return c1377;
            }
            function o127(a1377, b1377) {
                b1377 >= 0 && a1377.length, a1377.length;
            }
            function p127(z1376) {
                return "__enums__" in z1376 ? z1376 : (z144(z1376, "__enums__", null, !0), p127.update(z1376));
            }
            function q127(y1376) {
                y1376.hasOwnProperty("__enums__");
            }
            function r127(r1376) {
                q127(r1376);
                const s1376 = r1376.__enums__ || [];
                s1376.length = 0;
                for (const w1376 in r1376) {
                    const x1376 = r1376[w1376];
                    Number.isInteger(x1376) && s1376.push({
                        name: w1376,
                        value: x1376
                    });
                }
                return s1376.sort((u1376, v1376) => u1376.value - v1376.value), r1376.__enums__ = s1376, s1376;
            }
            function s127(q1376) {
                "__enums__" in q1376 || z144(q1376, "__enums__", null, !0);
            }
            g125("js", o145), n127.isBitMask = p1376 => p1376 && p1376.hasOwnProperty("__bitmask__"), n127.getList = o1376 => o1376.__bitmask__ ? o1376.__bitmask__ : n127.update(o1376), n127.update = h1376 => {
                Array.isArray(h1376.__bitmask__) || (h1376.__bitmask__ = []);
                const i1376 = h1376.__bitmask__;
                i1376.length = 0;
                for (const m1376 in h1376) {
                    const n1376 = h1376[m1376];
                    Number.isInteger(n1376) && i1376.push({
                        name: m1376,
                        value: n1376
                    });
                }
                return i1376.sort((k1376, l1376) => k1376.value - l1376.value), i1376;
            }, s143.BitMask = n127, p127.update = a1376 => {
                let b1376 = -1;
                const c1376 = Object.keys(a1376);
                for (let d1376 = 0; d1376 < c1376.length; d1376++) {
                    const e1376 = c1376[d1376];
                    let f1376 = a1376[e1376];
                    if (-1 === f1376)
                        f1376 = ++b1376, a1376[e1376] = f1376;
                    else if ("number" == typeof f1376)
                        b1376 = f1376;
                    else if ("string" == typeof f1376 && Number.isInteger(parseFloat(e1376)))
                        continue;
                    const g1376 = `${f1376}`;
                    e1376 !== g1376 && z144(a1376, g1376, e1376);
                }
                return Array.isArray(a1376.__enums__) && r127(a1376), a1376;
            }, p127 || g125("Enum", p127 = {}), p127.isEnum = z1375 => z1375 && z1375.hasOwnProperty("__enums__"), p127.getList = y1375 => (q127(y1375), y1375.__enums__ ? y1375.__enums__ : r127(y1375)), p127.sortList = (w1375, x1375) => {
                q127(w1375), Array.isArray(w1375.__enums__) && w1375.__enums__.sort(x1375);
            }, s143.Enum = p127;
            class p145 {
                clone() {
                    return z125(100, `${k126(this)}.clone`), this;
                }
                equals(v1375) {
                    return !1;
                }
                set(u1375) {
                    z125(100, `${k126(this)}.set`);
                }
                toString() {
                    return "";
                }
            }
            g125("ValueType", p145), z126("cc.ValueType", p145), s143.ValueType = p145, function (t1375) {
                t1375.PATH = "path", t1375.ENGINE = "engine", t1375.ASSETS = "assets", t1375.SCRIPTING = "scripting", t1375.PHYSICS = "physics", t1375.RENDERING = "rendering", t1375.LAUNCH = "launch", t1375.SCREEN = "screen", t1375.SPLASH_SCREEN = "splashScreen", t1375.ANIMATION = "animation", t1375.PROFILING = "profiling", t1375.PLUGINS = "plugins", t1375.XR = "xr";
            }(n145 || (n145 = {}));
            class q145 {
                constructor() {
                    this._settings = {}, this._override = {};
                }
                init(a1375 = "", b1375 = {}) {
                    for (const q1375 in b1375) {
                        const r1375 = b1375[q1375];
                        if (r1375)
                            for (const s1375 in r1375)
                                this.overrideSettings(q1375, s1375, r1375[s1375]);
                    }
                    return a1375 ? window.oh && "napi" === window.scriptEngineType ? new Promise((k1375, l1375) => {
                        h125.import("../settings.js").then(p1375 => {
                            this._settings = p1375.default, k1375();
                        }).catch(o1375 => l1375(o1375));
                    }) : new Promise((e1375, f1375) => {
                        if (a1375.startsWith("http")) {
                            const h1375 = new XMLHttpRequest();
                            h1375.open("GET", a1375), h1375.responseType = "text", h1375.onload = () => {
                                this._settings = JSON.parse(h1375.response), e1375();
                            }, h1375.onerror = () => {
                                f1375(new Error("request settings failed!"));
                            }, h1375.send(null);
                        }
                        else {
                            const g1375 = fsUtils.readJsonSync(a1375);
                            g1375 instanceof Error ? f1375(g1375) : (this._settings = g1375, e1375());
                        }
                    }) : Promise.resolve();
                }
                overrideSettings(x1374, y1374, z1374) {
                    x1374 in this._override || (this._override[x1374] = {}), this._override[x1374][y1374] = z1374;
                }
                querySettings(t1374, u1374) {
                    if (t1374 in this._override) {
                        const w1374 = this._override[t1374];
                        if (w1374 && u1374 in w1374)
                            return w1374[u1374];
                    }
                    if (t1374 in this._settings) {
                        const v1374 = this._settings[t1374];
                        if (v1374 && u1374 in v1374)
                            return v1374[u1374];
                    }
                    return null;
                }
            }
            g125("Settings", q145), q145.Category = n145;
            const r145 = g125("settings", new q145());
            s143.settings = r145;
            const s145 = g125("macro", {
                SUPPORT_TEXTURE_FORMATS: [".astc", ".pkm", ".pvr", ".webp", ".jpg", ".jpeg", ".bmp", ".png"],
                KEY: {
                    none: 0,
                    back: 6,
                    menu: 18,
                    backspace: 8,
                    tab: 9,
                    enter: 13,
                    shift: 16,
                    ctrl: 17,
                    alt: 18,
                    pause: 19,
                    capslock: 20,
                    escape: 27,
                    space: 32,
                    pageup: 33,
                    pagedown: 34,
                    end: 35,
                    home: 36,
                    left: 37,
                    up: 38,
                    right: 39,
                    down: 40,
                    select: 41,
                    insert: 45,
                    Delete: 46,
                    0: 48,
                    1: 49,
                    2: 50,
                    3: 51,
                    4: 52,
                    5: 53,
                    6: 54,
                    7: 55,
                    8: 56,
                    9: 57,
                    a: 65,
                    b: 66,
                    c: 67,
                    d: 68,
                    e: 69,
                    f: 70,
                    g: 71,
                    h: 72,
                    i: 73,
                    j: 74,
                    k: 75,
                    l: 76,
                    m: 77,
                    n: 78,
                    o: 79,
                    p: 80,
                    q: 81,
                    r: 82,
                    s: 83,
                    t: 84,
                    u: 85,
                    v: 86,
                    w: 87,
                    x: 88,
                    y: 89,
                    z: 90,
                    num0: 96,
                    num1: 97,
                    num2: 98,
                    num3: 99,
                    num4: 100,
                    num5: 101,
                    num6: 102,
                    num7: 103,
                    num8: 104,
                    num9: 105,
                    "*": 106,
                    "+": 107,
                    "-": 109,
                    numdel: 110,
                    "/": 111,
                    f1: 112,
                    f2: 113,
                    f3: 114,
                    f4: 115,
                    f5: 116,
                    f6: 117,
                    f7: 118,
                    f8: 119,
                    f9: 120,
                    f10: 121,
                    f11: 122,
                    f12: 123,
                    numlock: 144,
                    scrolllock: 145,
                    ";": 186,
                    semicolon: 186,
                    equal: 187,
                    "=": 187,
                    ",": 188,
                    comma: 188,
                    dash: 189,
                    ".": 190,
                    period: 190,
                    forwardslash: 191,
                    grave: 192,
                    "[": 219,
                    openbracket: 219,
                    backslash: 220,
                    "]": 221,
                    closebracket: 221,
                    quote: 222,
                    dpadLeft: 1e3,
                    dpadRight: 1001,
                    dpadUp: 1003,
                    dpadDown: 1004,
                    dpadCenter: 1005
                },
                RAD: Math.PI / 180,
                DEG: 180 / Math.PI,
                REPEAT_FOREVER: Number.MAX_VALUE - 1,
                FLT_EPSILON: 1.192092896e-7,
                ORIENTATION_PORTRAIT: 1,
                ORIENTATION_LANDSCAPE: 2,
                ORIENTATION_AUTO: 3,
                ENABLE_TILEDMAP_CULLING: !0,
                TOUCH_TIMEOUT: 5e3,
                ENABLE_TRANSPARENT_CANVAS: !1,
                ENABLE_WEBGL_ANTIALIAS: !0,
                ENABLE_FLOAT_OUTPUT: !1,
                CLEANUP_IMAGE_CACHE: !1,
                ENABLE_MULTI_TOUCH: !0,
                MAX_LABEL_CANVAS_POOL_SIZE: 20,
                ENABLE_WEBGL_HIGHP_STRUCT_VALUES: !1,
                BATCHER2D_MEM_INCREMENT: 144,
                CUSTOM_PIPELINE_NAME: "",
                init() {
                    this.CLEANUP_IMAGE_CACHE = !0;
                    const r1374 = r145.querySettings(q145.Category.ENGINE, "macros");
                    if (r1374)
                        for (const s1374 in r1374)
                            s145[s1374] = r1374[s1374];
                }
            });
            s143.macro = s145;
            const t145 = /^(?:cc|dragonBones|sp|ccsg)\..+/, u145 = new Array(123);
            for (let q1374 = 0; q1374 < 123; ++q1374)
                u145[q1374] = 64;
            for (let p1374 = 0; p1374 < 64; ++p1374)
                u145["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(p1374)] = p1374;
            const v145 = u145;
            function t127(a1374, b1374, c1374) {
                function d1374(j1374, k1374, l1374, m1374) {
                    const n1374 = Object.getOwnPropertyDescriptor(j1374, k1374);
                    if (n1374)
                        n1374.get && (j1374[l1374] = n1374.get), n1374.set && m1374 && (j1374[m1374] = n1374.set);
                    else {
                        const o1374 = j1374[l1374];
                        a145(j1374, k1374, o1374, j1374[m1374]);
                    }
                }
                let e1374;
                const f1374 = a1374.prototype;
                for (let h1374 = 0; h1374 < b1374.length; h1374++) {
                    e1374 = b1374[h1374];
                    const i1374 = e1374[0].toUpperCase() + e1374.slice(1);
                    d1374(f1374, e1374, `get${i1374}`, `set${i1374}`);
                }
                for (e1374 in c1374) {
                    const g1374 = c1374[e1374];
                    d1374(f1374, e1374, g1374[0], g1374[1]);
                }
            }
            function u127(v1373, w1373, x1373, y1373) {
                const z1373 = v1373[w1373];
                z1373 ? Array.isArray(z1373) ? y1373 ? (z1373.push(z1373[0]), z1373[0] = x1373) : z1373.push(x1373) : v1373[w1373] = y1373 ? [x1373, z1373] : [z1373, x1373] : v1373[w1373] = x1373;
            }
            function v127(s1373, t1373) {
                if ("function" == typeof s1373.contains)
                    return s1373.contains(t1373);
                if ("function" == typeof s1373.compareDocumentPosition)
                    return !!(16 & s1373.compareDocumentPosition(t1373));
                {
                    let u1373 = t1373.parentNode;
                    if (u1373)
                        do {
                            if (u1373 === s1373)
                                return !0;
                            u1373 = u1373.parentNode;
                        } while (null !== u1373);
                    return !1;
                }
            }
            function w127(r1373) {
                return "object" == typeof window && "function" == typeof Node ? r1373 instanceof Node : !!r1373 && "object" == typeof r1373 && "number" == typeof r1373.nodeType && "string" == typeof r1373.nodeName;
            }
            function x127(e1373, f1373, g1373) {
                e1373 && function (j1373, k1373, ...l1373) {
                    var m1373;
                    const n1373 = performance.now(), o1373 = requestAnimationFrame || window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
                    if (void 0 === o1373 || null !== (m1373 = globalThis.__globalXR) && void 0 !== m1373 && m1373.isWebXR)
                        return setTimeout(j1373, k1373, ...l1373);
                    const p1373 = () => {
                        performance.now() - n1373 < k1373 ? o1373(p1373) : j1373(...l1373);
                    };
                    o1373(p1373);
                }(() => {
                    e1373(f1373, g1373);
                }, 0);
            }
            function y127(d1373) {
                return !(!d1373 || d1373.constructor !== Object) && i126(d1373);
            }
            function z127(z1372, a1373, b1373) {
                if (a1373 > b1373) {
                    const c1373 = a1373;
                    a1373 = b1373, b1373 = c1373;
                }
                return z1372 < a1373 ? a1373 : z1372 < b1373 ? z1372 : b1373;
            }
            function a128(y1372) {
                return y1372 * s145.RAD;
            }
            function b128(x1372) {
                return x1372 * s145.DEG;
            }
            s143.misc = {
                BUILTIN_CLASSID_RE: t145,
                BASE64_VALUES: v145,
                propertyDefine: t127,
                pushToMap: u127,
                contains: v127,
                isDomNode: w127,
                callInNextTick: x127,
                isPlainEmptyObj_DEV: y127,
                clampf: z127,
                degreesToRadians: a128,
                radiansToDegrees: b128
            }, g125("misc", Object.freeze({
                __proto__: null,
                BUILTIN_CLASSID_RE: t145,
                BASE64_VALUES: v145,
                propertyDefine: t127,
                pushToMap: u127,
                contains: v127,
                isDomNode: w127,
                callInNextTick: x127,
                tryCatchFunctor_EDITOR: function (w1372) {
                    return Function("target", `try {\n  target.${w1372}();\n}\ncatch (e) {\n  cc._throw(e);\n}`);
                },
                isPlainEmptyObj_DEV: y127,
                clampf: z127,
                degreesToRadians: a128,
                radiansToDegrees: b128
            }));
            const w145 = "$_$";
            function c128(t1372, u1372) {
                const v1372 = u1372 ? Object.create(u1372) : {};
                return z144(t1372, "__attrs__", v1372), v1372;
            }
            function d128(o1372) {
                if ("function" != typeof o1372)
                    return c128(o1372, f128(o1372.constructor));
                let p1372;
                const q1372 = s143.Class.getInheritanceChain(o1372);
                for (let r1372 = q1372.length - 1; r1372 >= 0; r1372--) {
                    const s1372 = q1372[r1372];
                    s1372.hasOwnProperty("__attrs__") && s1372.__attrs__ || (p1372 = q1372[r1372 + 1], c128(s1372, p1372 && p1372.__attrs__));
                }
                return p1372 = q1372[0], c128(o1372, p1372 && p1372.__attrs__), o1372.__attrs__;
            }
            function e128(i1372, j1372) {
                const k1372 = f128(i1372), l1372 = j1372 + w145, m1372 = {};
                for (const n1372 in k1372)
                    n1372.startsWith(l1372) && (m1372[n1372.slice(l1372.length)] = k1372[n1372]);
                return m1372;
            }
            function f128(h1372) {
                return h1372.hasOwnProperty("__attrs__") && h1372.__attrs__ || d128(h1372);
            }
            function g128(d1372, e1372, f1372, g1372) {
                f128(d1372)[e1372 + w145 + f1372] = g1372;
            }
            class x145 {
                constructor(b1372, c1372) {
                    this.name = void 0, this.default = void 0, this.name = b1372, this.default = c1372;
                }
                toString() {
                    return this.name;
                }
            }
            const y145 = g125("CCInteger", new x145("Integer", 0));
            s143.Integer = y145, s143.CCInteger = y145;
            const z145 = g125("CCFloat", new x145("Float", 0));
            s143.Float = z145, s143.CCFloat = z145;
            const a146 = g125("CCBoolean", new x145("Boolean", !1));
            s143.Boolean = a146, s143.CCBoolean = a146;
            const b146 = g125("CCString", new x145("String", ""));
            function h128(q1371, r1371) {
                return function (t1371, u1371) {
                    const v1371 = `"${k126(t1371)}.${u1371}"`, w1371 = e128(t1371, u1371);
                    let x1371 = w1371.type;
                    if (x1371 === y145 || x1371 === z145 ? x1371 = "Number" : x1371 !== b146 && x1371 !== a146 || (x1371 = `${x1371}`), x1371 !== q1371)
                        return void y125(3604, v1371);
                    if (!w1371.hasOwnProperty("default"))
                        return;
                    const y1371 = w1371.default;
                    if (void 0 === y1371)
                        return;
                    if (Array.isArray(y1371) || y127(y1371))
                        return;
                    const z1371 = typeof y1371, a1372 = q1371.toLowerCase();
                    if (z1371 === a1372) {
                        if ("object" === a1372) {
                            if (!y1371 || y1371 instanceof w1371.ctor)
                                return;
                            y125(3605, v1371, k126(w1371.ctor));
                        }
                        else
                            "Number" !== q1371 && y125(3606, r1371, v1371, q1371);
                    }
                    else {
                        if ("function" === z1371)
                            return;
                        q1371 === b146.default && null == y1371 ? y125(3607, v1371) : y125(3611, r1371, v1371, z1371);
                    }
                    delete w1371.type;
                };
            }
            s143.String = b146, s143.CCString = b146;
            var c146 = Object.freeze({
                __proto__: null,
                DELIMETER: w145,
                createAttrsSingle: c128,
                createAttrs: d128,
                attr: e128,
                getClassAttrs: f128,
                setClassAttr: g128,
                PrimitiveType: x145,
                CCInteger: y145,
                CCFloat: z145,
                CCBoolean: a146,
                CCString: b146,
                getTypeChecker_ET: h128,
                getObjTypeChecker_ET: function (i1371) {
                    return function (k1371, l1371) {
                        h128("Object", "type")(k1371, l1371);
                        const m1371 = f128(k1371)[`${l1371 + w145}default`], n1371 = s143.Class.getDefault(m1371);
                        if (!Array.isArray(n1371) && w126(i1371, s143.ValueType)) {
                            const o1371 = k126(i1371), p1371 = n126('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', k126(k1371), l1371, o1371);
                            m1371 ? p125(p1371) : y125(3612, p1371, o1371, k126(k1371), l1371, o1371);
                        }
                    };
                }
            });
            const d146 = {
                default: {},
                serializable: {},
                editorOnly: {},
                formerlySerializedAs: {}
            };
            function i128(w1370, x1370, y1370, z1370) {
                if (!w1370.get && !w1370.set && w1370.hasOwnProperty("default")) {
                    const a1371 = `_N$${x1370}`;
                    w1370.get = function () {
                        return this[a1371];
                    }, w1370.set = function (g1371) {
                        const h1371 = this[a1371];
                        this[a1371] = g1371, y1370.call(this, h1371);
                    };
                    const b1371 = {};
                    z1370[a1371] = b1371;
                    for (const e1371 in d146) {
                        const f1371 = d146[e1371];
                        w1370.hasOwnProperty(e1371) && (b1371[e1371] = w1370[e1371], f1371.canUsedInGet || delete w1370[e1371]);
                    }
                }
            }
            function j128(s1370, t1370, u1370, v1370) {
                if (Array.isArray(t1370)) {
                    if (!(t1370.length > 0))
                        return z125(5508, u1370, v1370);
                    s1370.type = t1370 = t1370[0];
                }
                "function" == typeof t1370 && (t1370 === String ? s1370.type = s143.String : t1370 === Boolean ? s1370.type = s143.Boolean : t1370 === Number && (s1370.type = s143.Float));
            }
            function k128(o1370, p1370, q1370) {
                const r1370 = o1370 || void 0 === p1370 ? {
                    _short: !0
                } : {
                    _short: !0,
                    default: p1370
                };
                return q1370 && (r1370.type = q1370), r1370;
            }
            function l128(l1370, m1370) {
                if (!l1370 || l1370.constructor !== Object) {
                    if (Array.isArray(l1370) && l1370.length > 0)
                        return k128(m1370, [], l1370);
                    if ("function" == typeof l1370) {
                        const n1370 = l1370;
                        return k128(m1370, w126(n1370, s143.ValueType) ? new n1370() : null, n1370);
                    }
                    return l1370 instanceof x145 ? k128(m1370, void 0, l1370) : k128(m1370, l1370);
                }
                return null;
            }
            let e146, f146 = [];
            function m128() {
                return f146[f146.length - 1];
            }
            function n128(i1370, j1370, k1370) {
                o128(f128(i1370), j1370, k1370);
            }
            function o128(f1370, g1370, h1370) {
                f1370[`${g1370}$_$type`] = "Enum", f1370[`${g1370}$_$enumList`] = p127.getList(h1370);
            }
            s143._RF = {
                push: function (b1370, c1370, d1370, e1370) {
                    void 0 === d1370 && (d1370 = c1370, c1370 = ""), f146.push({
                        uuid: c1370,
                        script: d1370,
                        module: b1370,
                        exports: b1370.exports,
                        beh: null,
                        importMeta: e1370
                    });
                },
                pop: function () {
                    const x1369 = f146.pop(), y1369 = x1369.module;
                    let z1369 = y1369.exports;
                    if (z1369 === x1369.exports) {
                        for (const a1370 in z1369)
                            return;
                        y1369.exports = z1369 = x1369.cls;
                    }
                },
                peek: m128
            }, function (w1369) {
                w1369[w1369.STANDALONE = 1] = "STANDALONE", w1369[w1369.IMPLICIT_VISIBLE = 2] = "IMPLICIT_VISIBLE", w1369[w1369.IMPLICIT_SERIALIZABLE = 4] = "IMPLICIT_SERIALIZABLE";
            }(e146 || (e146 = {}));
            const g146 = w145, h146 = "__ctors__", i146 = g125("ENUM_TAG", "Enum"), j146 = g125("BITMASK_TAG", "BitMask");
            function p128(m1369, n1369, o1369, p1369) {
                !function (r1369, s1369) {
                    !function (u1369, v1369) {
                        u1369.indexOf(v1369) < 0 && u1369.push(v1369);
                    }(r1369.__props__, s1369);
                }(m1369, o1369), u128(m1369, p1369, n1369, o1369);
            }
            function q128(h1369, i1369, j1369, k1369) {
                const l1369 = k1369.get;
                k1369.set, l1369 && (u128(h1369, k1369, i1369, j1369), g128(h1369, j1369, "serializable", !1));
            }
            function r128(g1369) {
                return "function" == typeof g1369 ? g1369() : g1369;
            }
            function s128(x1367) {
                let y1367 = x1367.name;
                const z1367 = x1367.extends, a1368 = function (u1368, v1368, w1368) {
                    const x1368 = s143.Component, y1368 = m128();
                    if (y1368 && w126(v1368, x1368)) {
                        if (w126(y1368.cls, x1368))
                            return z125(3615), null;
                        u1368 = u1368 || y1368.script;
                    }
                    const z1368 = function (c1369, d1369, e1369) {
                        const f1369 = e1369.ctor;
                        return z144(f1369, h146, !0, !0), f1369.prototype, d1369 && (f1369.$super = d1369), z126(c1369, f1369), f1369;
                    }(u1368, v1368, w1368);
                    if (y1368)
                        if (w126(v1368, x1368)) {
                            const b1369 = y1368.uuid;
                            b1369 && h145(b1369, z1368), y1368.cls = z1368;
                        }
                        else
                            w126(y1368.cls, x1368) || (y1368.cls = z1368);
                    return z1368;
                }(y1367, z1367, x1367);
                y1367 || (y1367 = s143.js.getClassName(a1368)), a1368._sealed = !0, z1367 && (z1367._sealed = !1), function (e1368, f1368, g1368, h1368) {
                    if (e1368.__props__ = [], h1368 && h1368.__props__ && (e1368.__props__ = h1368.__props__.slice()), g1368) {
                        !function (o1368, p1368) {
                            for (const q1368 in o1368) {
                                let r1368 = o1368[q1368];
                                const s1368 = l128(r1368, !1);
                                if (s1368 && (r1368 = o1368[q1368] = s1368), r1368) {
                                    const t1368 = r1368.notify;
                                    t1368 && i128(r1368, q1368, t1368, o1368), "type" in r1368 && j128(r1368, r1368.type, p1368, q1368);
                                }
                            }
                        }(g1368, f1368);
                        for (const m1368 in g1368) {
                            const n1368 = g1368[m1368];
                            n1368.get || n1368.set ? q128(e1368, f1368, m1368, n1368) : p128(e1368, f1368, m1368, n1368);
                        }
                    }
                    const i1368 = f128(e1368);
                    e1368.__values__ = e1368.__props__.filter(k1368 => !1 !== i1368[`${k1368}$_$serializable`]);
                }(a1368, y1367, x1367.properties, z1367);
                const b1368 = x1367.editor;
                return b1368 && w126(z1367, s143.Component) && s143.Component._registerEditorProps(a1368, b1368), a1368;
            }
            function t128(v1367) {
                var w1367;
                return null == v1367 || null === (w1367 = v1367.hasOwnProperty) || void 0 === w1367 ? void 0 : w1367.call(v1367, "__values__");
            }
            s128._isCCClass = function (t1367) {
                var u1367;
                return null == t1367 || null === (u1367 = t1367.hasOwnProperty) || void 0 === u1367 ? void 0 : u1367.call(t1367, h146);
            }, s128.fastDefine = function (m1367, n1367, o1367) {
                z126(m1367, n1367);
                const p1367 = n1367.__props__ = n1367.__values__ = Object.keys(o1367), q1367 = f128(n1367);
                for (let r1367 = 0; r1367 < p1367.length; r1367++) {
                    const s1367 = p1367[r1367];
                    q1367[`${s1367 + g146}visible`] = !1, q1367[`${s1367 + g146}default`] = o1367[s1367];
                }
            }, s128.Attr = c146, s128.attr = e128, s128.isCCClassOrFastDefined = t128, s128.getInheritanceChain = function (k1367) {
                const l1367 = [];
                for (; k1367 = v126(k1367);)
                    k1367 !== Object && l1367.push(k1367);
                return l1367;
            };
            const k146 = {
                Integer: "Number",
                Float: "Number",
                Boolean: "Boolean",
                String: "String"
            };
            function u128(v1366, w1366, x1366, y1366) {
                let a1367 = null, b1367 = "";
                function z1366() {
                    return b1367 = y1366 + g146, a1367 = f128(v1366);
                }
                "type" in w1366 && void 0 === w1366.type && y125(3660, y1366, x1366);
                const c1367 = w1366.type;
                c1367 && (k146[c1367] ? (a1367 || z1366())[`${b1367}type`] = c1367 : "Object" === c1367 || ("object" == typeof c1367 ? p127.isEnum(c1367) ? o128(a1367 || z1366(), y1366, c1367) : n127.isBitMask(c1367) && ((a1367 || z1366())[`${b1367}type`] = j146, a1367[`${b1367}bitmaskList`] = n127.getList(c1367)) : "function" == typeof c1367 && ((a1367 || z1366())[`${b1367}type`] = "Object", a1367[`${b1367}ctor`] = c1367))), "default" in w1366 && ((a1367 || z1366())[`${b1367}default`] = w1366.default);
                const d1367 = (h1367, i1367) => {
                    if (h1367 in w1366) {
                        const j1367 = w1366[h1367];
                        typeof j1367 === i1367 && ((a1367 || z1366())[b1367 + h1367] = j1367);
                    }
                };
                let e1367;
                w1366.editorOnly && ((a1367 || z1366())[`${b1367}editorOnly`] = !0), w1366.__internalFlags & e146.STANDALONE ? e1367 = !0 === w1366.serializable || 0 != (w1366.__internalFlags & e146.IMPLICIT_SERIALIZABLE) : !1 === w1366.serializable && (e1367 = !1), void 0 !== e1367 && ((a1367 || z1366())[`${b1367}serializable`] = e1367), d1367("formerlySerializedAs", "string");
                const f1367 = w1366.range;
                f1367 && Array.isArray(f1367) && f1367.length >= 2 && ((a1367 || z1366())[`${b1367}min`] = f1367[0], a1367[`${b1367}max`] = f1367[1], f1367.length > 2 && (a1367[`${b1367}step`] = f1367[2])), d1367("min", "number"), d1367("max", "number"), d1367("step", "number");
            }
            s128.isArray = function (u1366) {
                return u1366 = r128(u1366), Array.isArray(u1366);
            }, s128.getDefault = r128, s128.escapeForJS = function (t1366) {
                return JSON.stringify(t1366).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
            }, s128.IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/, s128.getNewValueTypeCode = !1, s143.Class = s128;
            const l146 = Math.PI / 180, m146 = 180 / Math.PI;
            let n146 = Math.random;
            const o146 = g125("HALF_PI", .5 * Math.PI), p146 = g125("TWO_PI", 2 * Math.PI), q146 = g125("EPSILON", 1e-6);
            function v128(r1366, s1366) {
                return Math.abs(r1366 - s1366) <= q146 * Math.max(1, Math.abs(r1366), Math.abs(s1366));
            }
            function w128(o1366, p1366, q1366) {
                return q1366 = q1366 || q146, Math.abs(o1366 - p1366) <= q1366;
            }
            function x128(k1366, l1366, m1366) {
                if (l1366 > m1366) {
                    const n1366 = l1366;
                    l1366 = m1366, m1366 = n1366;
                }
                return k1366 < l1366 ? l1366 : k1366 > m1366 ? m1366 : k1366;
            }
            function y128(j1366) {
                return j1366 < 0 ? 0 : j1366 > 1 ? 1 : j1366;
            }
            function z128(g1366, h1366, i1366) {
                return g1366 + (h1366 - g1366) * i1366;
            }
            function a129(f1366) {
                return f1366 * l146;
            }
            function b129(e1366) {
                return e1366 * m146;
            }
            function c129() {
                return n146();
            }
            function d129(d1366) {
                n146 = d1366;
            }
            function e129(b1366, c1366) {
                return c129() * (c1366 - b1366) + b1366;
            }
            function f129(z1365, a1366) {
                return Math.floor(e129(z1365, a1366));
            }
            function g129(y1365) {
                return (y1365 = (9301 * y1365 + 49297) % 233280) / 233280;
            }
            function h129(v1365, w1365, x1365) {
                return g129(v1365) * (x1365 - w1365) + w1365;
            }
            function i129(s1365, t1365, u1365) {
                return Math.floor(h129(s1365, t1365, u1365));
            }
            function j129(r1365) {
                return n125(r1365);
            }
            function k129(p1365, q1365) {
                return p1365 - Math.floor(p1365 / q1365) * q1365;
            }
            function l129(n1365, o1365) {
                return n1365 = k129(n1365, 2 * o1365), o1365 - Math.abs(n1365 - o1365);
            }
            function m129(k1365, l1365, m1365) {
                return (m1365 - k1365) / (l1365 - k1365);
            }
            function n129(j1365) {
                return Math.abs(j1365.x) > Math.abs(j1365.y) ? Math.abs(j1365.x) > Math.abs(j1365.z) ? j1365.x : j1365.z : Math.abs(j1365.y) > Math.abs(j1365.z) ? j1365.y : j1365.z;
            }
            function o129(h1365, i1365) {
                return Math.abs(h1365) > Math.abs(i1365) ? h1365 : i1365;
            }
            function p129(d1365, e1365) {
                e1365.forEach(g1365 => {
                    Object.defineProperty(d1365, g1365, {
                        enumerable: !0
                    });
                });
            }
            const r146 = function () {
                const v1364 = new Float32Array(1), w1364 = new Int32Array(v1364.buffer);
                return function (y1364) {
                    v1364[0] = y1364;
                    const z1364 = w1364[0], a1365 = z1364 >> 16 & 32768, b1365 = 2147483647 & z1364;
                    let c1365 = b1365 - (112 << 23) + 4096 >> 13;
                    return c1365 = b1365 < 113 << 23 ? 0 : c1365, c1365 = b1365 >= 143 << 23 ? 31744 : c1365, c1365 = b1365 > 255 << 23 ? 32256 : c1365, w1364[0] = a1365 | c1365, w1364[0];
                };
            }(), s146 = function () {
                const o1364 = new Float32Array(1), p1364 = new Int32Array(o1364.buffer);
                return function (r1364) {
                    const s1364 = 32767 & r1364;
                    let t1364 = s1364 << 13, u1364 = 0;
                    return 31744 !== t1364 ? (t1364 += 112 << 23, 0 === s1364 ? t1364 = (1048575 & t1364) >> 1 : 32767 === s1364 && (t1364 = 2147483647)) : t1364 = 2139095040, u1364 = (r1364 >> 15 & 1) << 31 | t1364, p1364[0] = u1364, o1364[0];
                };
            }();
            function q129(n1364) {
                return r146(n1364);
            }
            function r129(m1364) {
                return s146(m1364);
            }
            var t146, u146;
            class v146 extends p145 {
                static clone(l1364) {
                    return new v146(l1364.x, l1364.y, l1364.z, l1364.w);
                }
                static copy(j1364, k1364) {
                    return j1364.x = k1364.x, j1364.y = k1364.y, j1364.z = k1364.z, j1364.w = k1364.w, j1364;
                }
                static set(a1364, b1364, c1364, d1364, e1364) {
                    return a1364.x = b1364, a1364.y = c1364, a1364.z = d1364, a1364.w = e1364, a1364;
                }
                static fromColor(y1363, z1363) {
                    return y1363.x = z1363.r, y1363.y = z1363.g, y1363.z = z1363.b, y1363.w = z1363.a, y1363;
                }
                static angle(s1363, t1363) {
                    const u1363 = s1363.y * t1363.z - s1363.z * t1363.y, v1363 = s1363.z * t1363.x - s1363.x * t1363.z, w1363 = s1363.x * t1363.y - s1363.y * t1363.x, x1363 = s1363.x * t1363.x + s1363.y * t1363.y + s1363.z * t1363.z;
                    return Math.atan2(Math.sqrt(u1363 * u1363 + v1363 * v1363 + w1363 * w1363), x1363);
                }
                static add(o1363, p1363, q1363) {
                    return o1363.x = p1363.x + q1363.x, o1363.y = p1363.y + q1363.y, o1363.z = p1363.z + q1363.z, o1363.w = p1363.w + q1363.w, o1363;
                }
                static subtract(k1363, l1363, m1363) {
                    return k1363.x = l1363.x - m1363.x, k1363.y = l1363.y - m1363.y, k1363.z = l1363.z - m1363.z, k1363.w = l1363.w - m1363.w, k1363;
                }
                static multiply(g1363, h1363, i1363) {
                    return g1363.x = h1363.x * i1363.x, g1363.y = h1363.y * i1363.y, g1363.z = h1363.z * i1363.z, g1363.w = h1363.w * i1363.w, g1363;
                }
                static divide(c1363, d1363, e1363) {
                    return c1363.x = d1363.x / e1363.x, c1363.y = d1363.y / e1363.y, c1363.z = d1363.z / e1363.z, c1363.w = d1363.w / e1363.w, c1363;
                }
                static ceil(a1363, b1363) {
                    return a1363.x = Math.ceil(b1363.x), a1363.y = Math.ceil(b1363.y), a1363.z = Math.ceil(b1363.z), a1363.w = Math.ceil(b1363.w), a1363;
                }
                static floor(y1362, z1362) {
                    return y1362.x = Math.floor(z1362.x), y1362.y = Math.floor(z1362.y), y1362.z = Math.floor(z1362.z), y1362.w = Math.floor(z1362.w), y1362;
                }
                static min(v1362, w1362, x1362) {
                    return v1362.x = Math.min(w1362.x, x1362.x), v1362.y = Math.min(w1362.y, x1362.y), v1362.z = Math.min(w1362.z, x1362.z), v1362.w = Math.min(w1362.w, x1362.w), v1362;
                }
                static max(s1362, t1362, u1362) {
                    return s1362.x = Math.max(t1362.x, u1362.x), s1362.y = Math.max(t1362.y, u1362.y), s1362.z = Math.max(t1362.z, u1362.z), s1362.w = Math.max(t1362.w, u1362.w), s1362;
                }
                static round(q1362, r1362) {
                    return q1362.x = Math.round(r1362.x), q1362.y = Math.round(r1362.y), q1362.z = Math.round(r1362.z), q1362.w = Math.round(r1362.w), q1362;
                }
                static multiplyScalar(m1362, n1362, o1362) {
                    return m1362.x = n1362.x * o1362, m1362.y = n1362.y * o1362, m1362.z = n1362.z * o1362, m1362.w = n1362.w * o1362, m1362;
                }
                static scaleAndAdd(i1362, j1362, k1362, l1362) {
                    return i1362.x = j1362.x + k1362.x * l1362, i1362.y = j1362.y + k1362.y * l1362, i1362.z = j1362.z + k1362.z * l1362, i1362.w = j1362.w + k1362.w * l1362, i1362;
                }
                static distance(c1362, d1362) {
                    const e1362 = d1362.x - c1362.x, f1362 = d1362.y - c1362.y, g1362 = d1362.z - c1362.z, h1362 = d1362.w - c1362.w;
                    return Math.sqrt(e1362 * e1362 + f1362 * f1362 + g1362 * g1362 + h1362 * h1362);
                }
                static squaredDistance(w1361, x1361) {
                    const y1361 = x1361.x - w1361.x, z1361 = x1361.y - w1361.y, a1362 = x1361.z - w1361.z, b1362 = x1361.w - w1361.w;
                    return y1361 * y1361 + z1361 * z1361 + a1362 * a1362 + b1362 * b1362;
                }
                static len(r1361) {
                    const s1361 = r1361.x, t1361 = r1361.y, u1361 = r1361.z, v1361 = r1361.w;
                    return Math.sqrt(s1361 * s1361 + t1361 * t1361 + u1361 * u1361 + v1361 * v1361);
                }
                static lengthSqr(i1361) {
                    const j1361 = i1361.x, k1361 = i1361.y, l1361 = i1361.z, m1361 = i1361.w;
                    return j1361 * j1361 + k1361 * k1361 + l1361 * l1361 + m1361 * m1361;
                }
                static negate(g1361, h1361) {
                    return g1361.x = -h1361.x, g1361.y = -h1361.y, g1361.z = -h1361.z, g1361.w = -h1361.w, g1361;
                }
                static inverse(e1361, f1361) {
                    return e1361.x = 1 / f1361.x, e1361.y = 1 / f1361.y, e1361.z = 1 / f1361.z, e1361.w = 1 / f1361.w, e1361;
                }
                static inverseSafe(y1360, z1360) {
                    const a1361 = z1360.x, b1361 = z1360.y, c1361 = z1360.z, d1361 = z1360.w;
                    return Math.abs(a1361) < q146 ? y1360.x = 0 : y1360.x = 1 / a1361, Math.abs(b1361) < q146 ? y1360.y = 0 : y1360.y = 1 / b1361, Math.abs(c1361) < q146 ? y1360.z = 0 : y1360.z = 1 / c1361, Math.abs(d1361) < q146 ? y1360.w = 0 : y1360.w = 1 / d1361, y1360;
                }
                static normalize(m1360, n1360) {
                    const o1360 = n1360.x, p1360 = n1360.y, q1360 = n1360.z, r1360 = n1360.w;
                    let s1360 = o1360 * o1360 + p1360 * p1360 + q1360 * q1360 + r1360 * r1360;
                    return s1360 > 0 ? (s1360 = 1 / Math.sqrt(s1360), m1360.x = o1360 * s1360, m1360.y = p1360 * s1360, m1360.z = q1360 * s1360, m1360.w = r1360 * s1360) : (m1360.x = 0, m1360.y = 0, m1360.z = 0, m1360.w = 0), m1360;
                }
                static dot(j1360, k1360) {
                    return j1360.x * k1360.x + j1360.y * k1360.y + j1360.z * k1360.z + j1360.w * k1360.w;
                }
                static lerp(z1359, a1360, b1360, c1360) {
                    return z1359.x = a1360.x + c1360 * (b1360.x - a1360.x), z1359.y = a1360.y + c1360 * (b1360.y - a1360.y), z1359.z = a1360.z + c1360 * (b1360.z - a1360.z), z1359.w = a1360.w + c1360 * (b1360.w - a1360.w), z1359;
                }
                static scale(v1359, w1359, x1359) {
                    return v1359.x = w1359.x * x1359, v1359.y = w1359.y * x1359, v1359.z = w1359.z * x1359, v1359.w = w1359.w * x1359, v1359;
                }
                static random(q1359, r1359) {
                    r1359 = r1359 || 1;
                    const s1359 = 2 * c129() * Math.PI, t1359 = 2 * c129() - 1, u1359 = Math.sqrt(1 - t1359 * t1359);
                    return q1359.x = u1359 * Math.cos(s1359) * r1359, q1359.y = u1359 * Math.sin(s1359) * r1359, q1359.z = t1359 * r1359, q1359.w = 0, q1359;
                }
                static transformMat4(e1359, f1359, g1359) {
                    const h1359 = f1359.x, i1359 = f1359.y, j1359 = f1359.z, k1359 = f1359.w;
                    return e1359.x = g1359.m00 * h1359 + g1359.m04 * i1359 + g1359.m08 * j1359 + g1359.m12 * k1359, e1359.y = g1359.m01 * h1359 + g1359.m05 * i1359 + g1359.m09 * j1359 + g1359.m13 * k1359, e1359.z = g1359.m02 * h1359 + g1359.m06 * i1359 + g1359.m10 * j1359 + g1359.m14 * k1359, e1359.w = g1359.m03 * h1359 + g1359.m07 * i1359 + g1359.m11 * j1359 + g1359.m15 * k1359, e1359;
                }
                static transformAffine(x1358, y1358, z1358) {
                    const a1359 = y1358.x, b1359 = y1358.y, c1359 = y1358.z, d1359 = y1358.w;
                    return x1358.x = z1358.m00 * a1359 + z1358.m04 * b1359 + z1358.m08 * c1359 + z1358.m12 * d1359, x1358.y = z1358.m01 * a1359 + z1358.m05 * b1359 + z1358.m09 * c1359 + z1358.m13 * d1359, x1358.z = z1358.m02 * a1359 + z1358.m06 * b1359 + z1358.m10 * c1359 + z1358.m14 * d1359, x1358.w = y1358.w, x1358;
                }
                static transformQuat(j1358, k1358, l1358) {
                    const { x: m1358, y: n1358, z: o1358 } = k1358, p1358 = l1358.x, q1358 = l1358.y, r1358 = l1358.z, s1358 = l1358.w, t1358 = s1358 * m1358 + q1358 * o1358 - r1358 * n1358, u1358 = s1358 * n1358 + r1358 * m1358 - p1358 * o1358, v1358 = s1358 * o1358 + p1358 * n1358 - q1358 * m1358, w1358 = -p1358 * m1358 - q1358 * n1358 - r1358 * o1358;
                    return j1358.x = t1358 * s1358 + w1358 * -p1358 + u1358 * -r1358 - v1358 * -q1358, j1358.y = u1358 * s1358 + w1358 * -q1358 + v1358 * -p1358 - t1358 * -r1358, j1358.z = v1358 * s1358 + w1358 * -r1358 + t1358 * -q1358 - u1358 * -p1358, j1358.w = k1358.w, j1358;
                }
                static toArray(g1358, h1358, i1358 = 0) {
                    return g1358[i1358 + 0] = h1358.x, g1358[i1358 + 1] = h1358.y, g1358[i1358 + 2] = h1358.z, g1358[i1358 + 3] = h1358.w, g1358;
                }
                static fromArray(d1358, e1358, f1358 = 0) {
                    return d1358.x = e1358[f1358 + 0], d1358.y = e1358[f1358 + 1], d1358.z = e1358[f1358 + 2], d1358.w = e1358[f1358 + 3], d1358;
                }
                static strictEquals(a1358, b1358) {
                    return a1358.x === b1358.x && a1358.y === b1358.y && a1358.z === b1358.z && a1358.w === b1358.w;
                }
                static equals(v1357, w1357, x1357 = q146) {
                    return !(Math.abs(v1357.x) === 1 / 0 || Math.abs(v1357.y) === 1 / 0 || Math.abs(v1357.z) === 1 / 0 || Math.abs(v1357.w) === 1 / 0 || Math.abs(w1357.x) === 1 / 0 || Math.abs(w1357.y) === 1 / 0 || Math.abs(w1357.z) === 1 / 0 || Math.abs(w1357.w) === 1 / 0) && Math.abs(v1357.x - w1357.x) <= x1357 * Math.max(1, Math.abs(v1357.x), Math.abs(w1357.x)) && Math.abs(v1357.y - w1357.y) <= x1357 * Math.max(1, Math.abs(v1357.y), Math.abs(w1357.y)) && Math.abs(v1357.z - w1357.z) <= x1357 * Math.max(1, Math.abs(v1357.z), Math.abs(w1357.z)) && Math.abs(v1357.w - w1357.w) <= x1357 * Math.max(1, Math.abs(v1357.w), Math.abs(w1357.w));
                }
                constructor(r1357, s1357, t1357, u1357) {
                    super(), "object" == typeof r1357 ? (this.x = r1357.x, this.y = r1357.y, this.z = r1357.z, this.w = r1357.w) : (this.x = r1357 || 0, this.y = s1357 || 0, this.z = t1357 || 0, this.w = u1357 || 0);
                }
                clone() {
                    return new v146(this.x, this.y, this.z, this.w);
                }
                set(f1364, g1364, h1364, i1364) {
                    return "object" == typeof f1364 ? (this.x = f1364.x, this.y = f1364.y, this.z = f1364.z, this.w = f1364.w) : (this.x = f1364 || 0, this.y = g1364 || 0, this.z = h1364 || 0, this.w = i1364 || 0), this;
                }
                equals(y1357, z1357 = q146) {
                    return Math.abs(this.x - y1357.x) <= z1357 * Math.max(1, Math.abs(this.x), Math.abs(y1357.x)) && Math.abs(this.y - y1357.y) <= z1357 * Math.max(1, Math.abs(this.y), Math.abs(y1357.y)) && Math.abs(this.z - y1357.z) <= z1357 * Math.max(1, Math.abs(this.z), Math.abs(y1357.z)) && Math.abs(this.w - y1357.w) <= z1357 * Math.max(1, Math.abs(this.w), Math.abs(y1357.w));
                }
                equals4f(m1357, n1357, o1357, p1357, q1357 = q146) {
                    return Math.abs(this.x - m1357) <= q1357 * Math.max(1, Math.abs(this.x), Math.abs(m1357)) && Math.abs(this.y - n1357) <= q1357 * Math.max(1, Math.abs(this.y), Math.abs(n1357)) && Math.abs(this.z - o1357) <= q1357 * Math.max(1, Math.abs(this.z), Math.abs(o1357)) && Math.abs(this.w - p1357) <= q1357 * Math.max(1, Math.abs(this.w), Math.abs(p1357));
                }
                strictEquals(c1358) {
                    return this.x === c1358.x && this.y === c1358.y && this.z === c1358.z && this.w === c1358.w;
                }
                strictEquals4f(i1357, j1357, k1357, l1357) {
                    return this.x === i1357 && this.y === j1357 && this.z === k1357 && this.w === l1357;
                }
                lerp(d1360, e1360) {
                    const f1360 = this.x, g1360 = this.y, h1360 = this.z, i1360 = this.w;
                    return this.x = f1360 + e1360 * (d1360.x - f1360), this.y = g1360 + e1360 * (d1360.y - g1360), this.z = h1360 + e1360 * (d1360.z - h1360), this.w = i1360 + e1360 * (d1360.w - i1360), this;
                }
                toString() {
                    return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)}, ${this.w.toFixed(2)})`;
                }
                clampf(g1357, h1357) {
                    return this.x = x128(this.x, g1357.x, h1357.x), this.y = x128(this.y, g1357.y, h1357.y), this.z = x128(this.z, g1357.z, h1357.z), this.w = x128(this.w, g1357.w, h1357.w), this;
                }
                add(r1363) {
                    return this.x += r1363.x, this.y += r1363.y, this.z += r1363.z, this.w += r1363.w, this;
                }
                add4f(c1357, d1357, e1357, f1357) {
                    return this.x += c1357, this.y += d1357, this.z += e1357, this.w += f1357, this;
                }
                subtract(n1363) {
                    return this.x -= n1363.x, this.y -= n1363.y, this.z -= n1363.z, this.w -= n1363.w, this;
                }
                subtract4f(y1356, z1356, a1357, b1357) {
                    return this.x -= y1356, this.y -= z1356, this.z -= a1357, this.w -= b1357, this;
                }
                multiplyScalar(p1362) {
                    return "object" == typeof p1362 && console.warn("should use Vec4.multiply for vector * vector operation"), this.x *= p1362, this.y *= p1362, this.z *= p1362, this.w *= p1362, this;
                }
                multiply(j1363) {
                    return "object" != typeof j1363 && console.warn("should use Vec4.scale for vector * scalar operation"), this.x *= j1363.x, this.y *= j1363.y, this.z *= j1363.z, this.w *= j1363.w, this;
                }
                multiply4f(u1356, v1356, w1356, x1356) {
                    return this.x *= u1356, this.y *= v1356, this.z *= w1356, this.w *= x1356, this;
                }
                divide(f1363) {
                    return this.x /= f1363.x, this.y /= f1363.y, this.z /= f1363.z, this.w /= f1363.w, this;
                }
                divide4f(q1356, r1356, s1356, t1356) {
                    return this.x /= q1356, this.y /= r1356, this.z /= s1356, this.w /= t1356, this;
                }
                negative() {
                    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
                }
                dot(l1360) {
                    return this.x * l1360.x + this.y * l1360.y + this.z * l1360.z + this.w * l1360.w;
                }
                cross(j1356) {
                    const { x: k1356, y: l1356, z: m1356 } = this, { x: n1356, y: o1356, z: p1356 } = j1356;
                    return this.x = l1356 * p1356 - m1356 * o1356, this.y = m1356 * n1356 - k1356 * p1356, this.z = k1356 * o1356 - l1356 * n1356, this;
                }
                length() {
                    const f1356 = this.x, g1356 = this.y, h1356 = this.z, i1356 = this.w;
                    return Math.sqrt(f1356 * f1356 + g1356 * g1356 + h1356 * h1356 + i1356 * i1356);
                }
                lengthSqr() {
                    const n1361 = this.x, o1361 = this.y, p1361 = this.z, q1361 = this.w;
                    return n1361 * n1361 + o1361 * o1361 + p1361 * p1361 + q1361 * q1361;
                }
                normalize() {
                    const t1360 = this.x, u1360 = this.y, v1360 = this.z, w1360 = this.w;
                    let x1360 = t1360 * t1360 + u1360 * u1360 + v1360 * v1360 + w1360 * w1360;
                    return x1360 > 0 && (x1360 = 1 / Math.sqrt(x1360), this.x = t1360 * x1360, this.y = u1360 * x1360, this.z = v1360 * x1360, this.w = w1360 * x1360), this;
                }
                scale(y1359) {
                    return this.x *= y1359, this.y *= y1359, this.z *= y1359, this.w *= y1359, this;
                }
                transformMat4(l1359) {
                    const m1359 = this.x, n1359 = this.y, o1359 = this.z, p1359 = this.w;
                    return this.x = l1359.m00 * m1359 + l1359.m04 * n1359 + l1359.m08 * o1359 + l1359.m12 * p1359, this.y = l1359.m01 * m1359 + l1359.m05 * n1359 + l1359.m09 * o1359 + l1359.m13 * p1359, this.z = l1359.m02 * m1359 + l1359.m06 * n1359 + l1359.m10 * o1359 + l1359.m14 * p1359, this.w = l1359.m03 * m1359 + l1359.m07 * n1359 + l1359.m11 * o1359 + l1359.m15 * p1359, this;
                }
            }
            function s129(b1356, c1356, d1356, e1356) {
                return new v146(b1356, c1356, d1356, e1356);
            }
            g125("Vec4", v146), t146 = v146, v146.ZERO = Object.freeze(new t146(0, 0, 0, 0)), v146.ONE = Object.freeze(new t146(1, 1, 1, 1)), v146.NEG_ONE = Object.freeze(new t146(-1, -1, -1, -1)), v146.UNIT_X = Object.freeze(new t146(1, 0, 0, 0)), v146.UNIT_Y = Object.freeze(new t146(0, 1, 0, 0)), v146.UNIT_Z = Object.freeze(new t146(0, 0, 1, 0)), v146.UNIT_W = Object.freeze(new t146(0, 0, 0, 1)), s128.fastDefine("cc.Vec4", v146, {
                x: 0,
                y: 0,
                z: 0,
                w: 0
            }), s143.Vec4 = v146, s143.v4 = s129;
            class w146 extends p145 {
                static zero(a1356) {
                    return a1356.x = 0, a1356.y = 0, a1356.z = 0, a1356;
                }
                static clone(z1355) {
                    return new w146(z1355.x, z1355.y, z1355.z);
                }
                static copy(x1355, y1355) {
                    return x1355.x = y1355.x, x1355.y = y1355.y, x1355.z = y1355.z, x1355;
                }
                static set(q1355, r1355, s1355, t1355) {
                    return q1355.x = r1355, q1355.y = s1355, q1355.z = t1355, q1355;
                }
                static add(m1355, n1355, o1355) {
                    return m1355.x = n1355.x + o1355.x, m1355.y = n1355.y + o1355.y, m1355.z = n1355.z + o1355.z, m1355;
                }
                static subtract(i1355, j1355, k1355) {
                    return i1355.x = j1355.x - k1355.x, i1355.y = j1355.y - k1355.y, i1355.z = j1355.z - k1355.z, i1355;
                }
                static multiply(e1355, f1355, g1355) {
                    return e1355.x = f1355.x * g1355.x, e1355.y = f1355.y * g1355.y, e1355.z = f1355.z * g1355.z, e1355;
                }
                static divide(a1355, b1355, c1355) {
                    return a1355.x = b1355.x / c1355.x, a1355.y = b1355.y / c1355.y, a1355.z = b1355.z / c1355.z, a1355;
                }
                static ceil(y1354, z1354) {
                    return y1354.x = Math.ceil(z1354.x), y1354.y = Math.ceil(z1354.y), y1354.z = Math.ceil(z1354.z), y1354;
                }
                static floor(w1354, x1354) {
                    return w1354.x = Math.floor(x1354.x), w1354.y = Math.floor(x1354.y), w1354.z = Math.floor(x1354.z), w1354;
                }
                static min(t1354, u1354, v1354) {
                    return t1354.x = Math.min(u1354.x, v1354.x), t1354.y = Math.min(u1354.y, v1354.y), t1354.z = Math.min(u1354.z, v1354.z), t1354;
                }
                static max(q1354, r1354, s1354) {
                    return q1354.x = Math.max(r1354.x, s1354.x), q1354.y = Math.max(r1354.y, s1354.y), q1354.z = Math.max(r1354.z, s1354.z), q1354;
                }
                static round(o1354, p1354) {
                    return o1354.x = Math.round(p1354.x), o1354.y = Math.round(p1354.y), o1354.z = Math.round(p1354.z), o1354;
                }
                static multiplyScalar(k1354, l1354, m1354) {
                    return k1354.x = l1354.x * m1354, k1354.y = l1354.y * m1354, k1354.z = l1354.z * m1354, k1354;
                }
                static scaleAndAdd(g1354, h1354, i1354, j1354) {
                    return g1354.x = h1354.x + i1354.x * j1354, g1354.y = h1354.y + i1354.y * j1354, g1354.z = h1354.z + i1354.z * j1354, g1354;
                }
                static distance(b1354, c1354) {
                    const d1354 = c1354.x - b1354.x, e1354 = c1354.y - b1354.y, f1354 = c1354.z - b1354.z;
                    return Math.sqrt(d1354 * d1354 + e1354 * e1354 + f1354 * f1354);
                }
                static squaredDistance(w1353, x1353) {
                    const y1353 = x1353.x - w1353.x, z1353 = x1353.y - w1353.y, a1354 = x1353.z - w1353.z;
                    return y1353 * y1353 + z1353 * z1353 + a1354 * a1354;
                }
                static len(s1353) {
                    const t1353 = s1353.x, u1353 = s1353.y, v1353 = s1353.z;
                    return Math.sqrt(t1353 * t1353 + u1353 * u1353 + v1353 * v1353);
                }
                static lengthSqr(o1353) {
                    const p1353 = o1353.x, q1353 = o1353.y, r1353 = o1353.z;
                    return p1353 * p1353 + q1353 * q1353 + r1353 * r1353;
                }
                static negate(m1353, n1353) {
                    return m1353.x = -n1353.x, m1353.y = -n1353.y, m1353.z = -n1353.z, m1353;
                }
                static invert(k1353, l1353) {
                    return k1353.x = 1 / l1353.x, k1353.y = 1 / l1353.y, k1353.z = 1 / l1353.z, k1353;
                }
                static invertSafe(f1353, g1353) {
                    const h1353 = g1353.x, i1353 = g1353.y, j1353 = g1353.z;
                    return Math.abs(h1353) < q146 ? f1353.x = 0 : f1353.x = 1 / h1353, Math.abs(i1353) < q146 ? f1353.y = 0 : f1353.y = 1 / i1353, Math.abs(j1353) < q146 ? f1353.z = 0 : f1353.z = 1 / j1353, f1353;
                }
                static normalize(v1352, w1352) {
                    const x1352 = w1352.x, y1352 = w1352.y, z1352 = w1352.z;
                    let a1353 = x1352 * x1352 + y1352 * y1352 + z1352 * z1352;
                    return a1353 > 0 ? (a1353 = 1 / Math.sqrt(a1353), v1352.x = x1352 * a1353, v1352.y = y1352 * a1353, v1352.z = z1352 * a1353) : (v1352.x = 0, v1352.y = 0, v1352.z = 0), v1352;
                }
                static dot(s1352, t1352) {
                    return s1352.x * t1352.x + s1352.y * t1352.y + s1352.z * t1352.z;
                }
                static cross(c1352, d1352, e1352) {
                    const { x: f1352, y: g1352, z: h1352 } = d1352, { x: i1352, y: j1352, z: k1352 } = e1352;
                    return c1352.x = g1352 * k1352 - h1352 * j1352, c1352.y = h1352 * i1352 - f1352 * k1352, c1352.z = f1352 * j1352 - g1352 * i1352, c1352;
                }
                static lerp(w1351, x1351, y1351, z1351) {
                    return w1351.x = x1351.x + z1351 * (y1351.x - x1351.x), w1351.y = x1351.y + z1351 * (y1351.y - x1351.y), w1351.z = x1351.z + z1351 * (y1351.z - x1351.z), w1351;
                }
                static random(r1351, s1351) {
                    s1351 = s1351 || 1;
                    const t1351 = 2 * c129() * Math.PI, u1351 = 2 * c129() - 1, v1351 = Math.sqrt(1 - u1351 * u1351);
                    return r1351.x = v1351 * Math.cos(t1351) * s1351, r1351.y = v1351 * Math.sin(t1351) * s1351, r1351.z = u1351 * s1351, r1351;
                }
                static transformMat4(f1351, g1351, h1351) {
                    const i1351 = g1351.x, j1351 = g1351.y, k1351 = g1351.z;
                    let l1351 = h1351.m03 * i1351 + h1351.m07 * j1351 + h1351.m11 * k1351 + h1351.m15;
                    return l1351 = l1351 ? 1 / l1351 : 1, f1351.x = (h1351.m00 * i1351 + h1351.m04 * j1351 + h1351.m08 * k1351 + h1351.m12) * l1351, f1351.y = (h1351.m01 * i1351 + h1351.m05 * j1351 + h1351.m09 * k1351 + h1351.m13) * l1351, f1351.z = (h1351.m02 * i1351 + h1351.m06 * j1351 + h1351.m10 * k1351 + h1351.m14) * l1351, f1351;
                }
                static transformMat4Normal(y1350, z1350, a1351) {
                    const b1351 = z1350.x, c1351 = z1350.y, d1351 = z1350.z;
                    let e1351 = a1351.m03 * b1351 + a1351.m07 * c1351 + a1351.m11 * d1351;
                    return e1351 = e1351 ? 1 / e1351 : 1, y1350.x = (a1351.m00 * b1351 + a1351.m04 * c1351 + a1351.m08 * d1351) * e1351, y1350.y = (a1351.m01 * b1351 + a1351.m05 * c1351 + a1351.m09 * d1351) * e1351, y1350.z = (a1351.m02 * b1351 + a1351.m06 * c1351 + a1351.m10 * d1351) * e1351, y1350;
                }
                static transformMat3(s1350, t1350, u1350) {
                    const v1350 = t1350.x, w1350 = t1350.y, x1350 = t1350.z;
                    return s1350.x = v1350 * u1350.m00 + w1350 * u1350.m03 + x1350 * u1350.m06, s1350.y = v1350 * u1350.m01 + w1350 * u1350.m04 + x1350 * u1350.m07, s1350.z = v1350 * u1350.m02 + w1350 * u1350.m05 + x1350 * u1350.m08, s1350;
                }
                static transformAffine(m1350, n1350, o1350) {
                    const p1350 = n1350.x, q1350 = n1350.y, r1350 = n1350.z;
                    return m1350.x = o1350.m00 * p1350 + o1350.m04 * q1350 + o1350.m08 * r1350 + o1350.m12, m1350.y = o1350.m01 * p1350 + o1350.m05 * q1350 + o1350.m09 * r1350 + o1350.m13, m1350.z = o1350.m02 * p1350 + o1350.m06 * q1350 + o1350.m10 * r1350 + o1350.m14, m1350;
                }
                static transformQuat(f1350, g1350, h1350) {
                    const i1350 = h1350.w * g1350.x + h1350.y * g1350.z - h1350.z * g1350.y, j1350 = h1350.w * g1350.y + h1350.z * g1350.x - h1350.x * g1350.z, k1350 = h1350.w * g1350.z + h1350.x * g1350.y - h1350.y * g1350.x, l1350 = -h1350.x * g1350.x - h1350.y * g1350.y - h1350.z * g1350.z;
                    return f1350.x = i1350 * h1350.w + l1350 * -h1350.x + j1350 * -h1350.z - k1350 * -h1350.y, f1350.y = j1350 * h1350.w + l1350 * -h1350.y + k1350 * -h1350.x - i1350 * -h1350.z, f1350.z = k1350 * h1350.w + l1350 * -h1350.z + i1350 * -h1350.y - j1350 * -h1350.x, f1350;
                }
                static transformRTS(t1349, u1349, v1349, w1349, x1349) {
                    const y1349 = u1349.x * x1349.x, z1349 = u1349.y * x1349.y, a1350 = u1349.z * x1349.z, b1350 = v1349.w * y1349 + v1349.y * a1350 - v1349.z * z1349, c1350 = v1349.w * z1349 + v1349.z * y1349 - v1349.x * a1350, d1350 = v1349.w * a1350 + v1349.x * z1349 - v1349.y * y1349, e1350 = -v1349.x * y1349 - v1349.y * z1349 - v1349.z * a1350;
                    return t1349.x = b1350 * v1349.w + e1350 * -v1349.x + c1350 * -v1349.z - d1350 * -v1349.y + w1349.x, t1349.y = c1350 * v1349.w + e1350 * -v1349.y + d1350 * -v1349.x - b1350 * -v1349.z + w1349.y, t1349.z = d1350 * v1349.w + e1350 * -v1349.z + b1350 * -v1349.y - c1350 * -v1349.x + w1349.z, t1349;
                }
                static transformInverseRTS(h1349, i1349, j1349, k1349, l1349) {
                    const m1349 = i1349.x - k1349.x, n1349 = i1349.y - k1349.y, o1349 = i1349.z - k1349.z, p1349 = j1349.w * m1349 - j1349.y * o1349 + j1349.z * n1349, q1349 = j1349.w * n1349 - j1349.z * m1349 + j1349.x * o1349, r1349 = j1349.w * o1349 - j1349.x * n1349 + j1349.y * m1349, s1349 = j1349.x * m1349 + j1349.y * n1349 + j1349.z * o1349;
                    return h1349.x = (p1349 * j1349.w + s1349 * j1349.x + q1349 * j1349.z - r1349 * j1349.y) / l1349.x, h1349.y = (q1349 * j1349.w + s1349 * j1349.y + r1349 * j1349.x - p1349 * j1349.z) / l1349.y, h1349.z = (r1349 * j1349.w + s1349 * j1349.z + p1349 * j1349.y - q1349 * j1349.x) / l1349.z, h1349;
                }
                static rotateX(v1348, w1348, x1348, y1348) {
                    const z1348 = w1348.x - x1348.x, a1349 = w1348.y - x1348.y, b1349 = w1348.z - x1348.z, c1349 = Math.cos(y1348), d1349 = Math.sin(y1348), e1349 = z1348, f1349 = a1349 * c1349 - b1349 * d1349, g1349 = a1349 * d1349 + b1349 * c1349;
                    return v1348.x = e1349 + x1348.x, v1348.y = f1349 + x1348.y, v1348.z = g1349 + x1348.z, v1348;
                }
                static rotateY(j1348, k1348, l1348, m1348) {
                    const n1348 = k1348.x - l1348.x, o1348 = k1348.y - l1348.y, p1348 = k1348.z - l1348.z, q1348 = Math.cos(m1348), r1348 = Math.sin(m1348), s1348 = p1348 * r1348 + n1348 * q1348, t1348 = o1348, u1348 = p1348 * q1348 - n1348 * r1348;
                    return j1348.x = s1348 + l1348.x, j1348.y = t1348 + l1348.y, j1348.z = u1348 + l1348.z, j1348;
                }
                static rotateZ(x1347, y1347, z1347, a1348) {
                    const b1348 = y1347.x - z1347.x, c1348 = y1347.y - z1347.y, d1348 = y1347.z - z1347.z, e1348 = Math.cos(a1348), f1348 = Math.sin(a1348), g1348 = b1348 * e1348 - c1348 * f1348, h1348 = b1348 * f1348 + c1348 * e1348, i1348 = d1348;
                    return x1347.x = g1348 + z1347.x, x1347.y = h1348 + z1347.y, x1347.z = i1348 + z1347.z, x1347;
                }
                static rotateN(h1347, i1347, j1347, k1347, l1347) {
                    const m1347 = i1347.x - j1347.x, n1347 = i1347.y - j1347.y, o1347 = i1347.z - j1347.z, p1347 = k1347.x, q1347 = k1347.y, r1347 = k1347.z, s1347 = Math.cos(l1347), t1347 = Math.sin(l1347), u1347 = m1347 * (p1347 * p1347 * (1 - s1347) + s1347) + n1347 * (p1347 * q1347 * (1 - s1347) - p1347 * t1347) + o1347 * (p1347 * r1347 * (1 - s1347) + q1347 * t1347), v1347 = m1347 * (p1347 * q1347 * (1 - s1347) + r1347 * t1347) + n1347 * (q1347 * q1347 * (1 - s1347) + s1347) + o1347 * (q1347 * r1347 * (1 - s1347) - p1347 * t1347), w1347 = m1347 * (p1347 * r1347 * (1 - s1347) - q1347 * t1347) + n1347 * (q1347 * r1347 * (1 - s1347) + p1347 * t1347) + o1347 * (r1347 * r1347 * (1 - s1347) + s1347);
                    return h1347.x = u1347 + j1347.x, h1347.y = v1347 + j1347.y, h1347.z = w1347 + j1347.z, h1347;
                }
                static toArray(e1347, f1347, g1347 = 0) {
                    return e1347[g1347 + 0] = f1347.x, e1347[g1347 + 1] = f1347.y, e1347[g1347 + 2] = f1347.z, e1347;
                }
                static fromArray(b1347, c1347, d1347 = 0) {
                    return b1347.x = c1347[d1347 + 0], b1347.y = c1347[d1347 + 1], b1347.z = c1347[d1347 + 2], b1347;
                }
                static strictEquals(y1346, z1346) {
                    return y1346.x === z1346.x && y1346.y === z1346.y && y1346.z === z1346.z;
                }
                static equals(n1346, o1346, p1346 = q146) {
                    const { x: q1346, y: r1346, z: s1346 } = n1346, { x: t1346, y: u1346, z: v1346 } = o1346;
                    return Math.abs(q1346 - t1346) <= p1346 * Math.max(1, Math.abs(q1346), Math.abs(t1346)) && Math.abs(r1346 - u1346) <= p1346 * Math.max(1, Math.abs(r1346), Math.abs(u1346)) && Math.abs(s1346 - v1346) <= p1346 * Math.max(1, Math.abs(s1346), Math.abs(v1346));
                }
                static angle(i1346, j1346) {
                    const k1346 = i1346.x * i1346.x + i1346.y * i1346.y + i1346.z * i1346.z, l1346 = j1346.x * j1346.x + j1346.y * j1346.y + j1346.z * j1346.z;
                    if (0 === k1346 || 0 === l1346)
                        return 0;
                    let m1346 = (i1346.x * j1346.x + i1346.y * j1346.y + i1346.z * j1346.z) / Math.sqrt(k1346 * l1346);
                    return m1346 = x128(m1346, -1, 1), Math.acos(m1346);
                }
                static projectOnPlane(f1346, g1346, h1346) {
                    return w146.subtract(f1346, g1346, w146.project(f1346, g1346, h1346));
                }
                static project(b1346, c1346, d1346) {
                    const e1346 = w146.lengthSqr(d1346);
                    return e1346 < 1e-6 ? w146.set(b1346, 0, 0, 0) : w146.multiplyScalar(b1346, d1346, w146.dot(c1346, d1346) / e1346);
                }
                static moveTowards(s1345, t1345, u1345, v1345) {
                    const w1345 = u1345.x - t1345.x, x1345 = u1345.y - t1345.y, y1345 = u1345.z - t1345.z, z1345 = w1345 * w1345 + x1345 * x1345 + y1345 * y1345;
                    if (0 === z1345 || v1345 >= 0 && z1345 < v1345 * v1345)
                        return s1345.x = u1345.x, s1345.y = u1345.y, s1345.z = u1345.z, s1345;
                    const a1346 = v1345 / Math.sqrt(z1345);
                    return s1345.x = t1345.x + w1345 * a1346, s1345.y = t1345.y + x1345 * a1346, s1345.z = t1345.z + y1345 * a1346, s1345;
                }
                static generateOrthogonal(k1345, l1345) {
                    const { x: m1345, y: n1345, z: o1345 } = l1345, p1345 = Math.abs(m1345), q1345 = Math.abs(n1345), r1345 = Math.abs(o1345);
                    return p1345 < q1345 && p1345 < r1345 ? w146.set(k1345, 0, o1345, -n1345) : q1345 < r1345 ? w146.set(k1345, o1345, 0, -m1345) : w146.set(k1345, n1345, -m1345, 0), w146.normalize(k1345, k1345);
                }
                constructor(h1345, i1345, j1345) {
                    super(), "object" == typeof h1345 ? (this.x = h1345.x, this.y = h1345.y, this.z = h1345.z) : (this.x = h1345 || 0, this.y = i1345 || 0, this.z = j1345 || 0);
                }
                clone() {
                    return new w146(this.x, this.y, this.z);
                }
                set(u1355, v1355, w1355) {
                    return "object" == typeof u1355 ? (this.x = u1355.x, this.y = u1355.y, this.z = u1355.z) : (this.x = u1355 || 0, this.y = v1355 || 0, this.z = w1355 || 0), this;
                }
                equals(w1346, x1346 = q146) {
                    return Math.abs(this.x - w1346.x) <= x1346 && Math.abs(this.y - w1346.y) <= x1346 && Math.abs(this.z - w1346.z) <= x1346;
                }
                equals3f(d1345, e1345, f1345, g1345 = q146) {
                    return Math.abs(this.x - d1345) <= g1345 && Math.abs(this.y - e1345) <= g1345 && Math.abs(this.z - f1345) <= g1345;
                }
                strictEquals(a1347) {
                    return this.x === a1347.x && this.y === a1347.y && this.z === a1347.z;
                }
                strictEquals3f(a1345, b1345, c1345) {
                    return this.x === a1345 && this.y === b1345 && this.z === c1345;
                }
                toString() {
                    return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)})`;
                }
                lerp(a1352, b1352) {
                    return this.x += b1352 * (a1352.x - this.x), this.y += b1352 * (a1352.y - this.y), this.z += b1352 * (a1352.z - this.z), this;
                }
                add(p1355) {
                    return this.x += p1355.x, this.y += p1355.y, this.z += p1355.z, this;
                }
                add3f(x1344, y1344, z1344) {
                    return this.x += x1344, this.y += y1344, this.z += z1344, this;
                }
                subtract(l1355) {
                    return this.x -= l1355.x, this.y -= l1355.y, this.z -= l1355.z, this;
                }
                subtract3f(u1344, v1344, w1344) {
                    return this.x -= u1344, this.y -= v1344, this.z -= w1344, this;
                }
                multiplyScalar(n1354) {
                    return "object" == typeof n1354 && console.warn("should use Vec3.multiply for vector * vector operation"), this.x *= n1354, this.y *= n1354, this.z *= n1354, this;
                }
                multiply(h1355) {
                    return "object" != typeof h1355 && console.warn("should use Vec3.scale for vector * scalar operation"), this.x *= h1355.x, this.y *= h1355.y, this.z *= h1355.z, this;
                }
                multiply3f(r1344, s1344, t1344) {
                    return this.x *= r1344, this.y *= s1344, this.z *= t1344, this;
                }
                divide(d1355) {
                    return this.x /= d1355.x, this.y /= d1355.y, this.z /= d1355.z, this;
                }
                divide3f(o1344, p1344, q1344) {
                    return this.x /= o1344, this.y /= p1344, this.z /= q1344, this;
                }
                negative() {
                    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
                }
                clampf(m1344, n1344) {
                    return this.x = x128(this.x, m1344.x, n1344.x), this.y = x128(this.y, m1344.y, n1344.y), this.z = x128(this.z, m1344.z, n1344.z), this;
                }
                dot(u1352) {
                    return this.x * u1352.x + this.y * u1352.y + this.z * u1352.z;
                }
                cross(l1352) {
                    const { x: m1352, y: n1352, z: o1352 } = this, { x: p1352, y: q1352, z: r1352 } = l1352;
                    return this.x = n1352 * r1352 - o1352 * q1352, this.y = o1352 * p1352 - m1352 * r1352, this.z = m1352 * q1352 - n1352 * p1352, this;
                }
                length() {
                    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
                }
                lengthSqr() {
                    return this.x * this.x + this.y * this.y + this.z * this.z;
                }
                normalize() {
                    const b1353 = this.x, c1353 = this.y, d1353 = this.z;
                    let e1353 = b1353 * b1353 + c1353 * c1353 + d1353 * d1353;
                    return e1353 > 0 && (e1353 = 1 / Math.sqrt(e1353), this.x = b1353 * e1353, this.y = c1353 * e1353, this.z = d1353 * e1353), this;
                }
                transformMat4(m1351) {
                    const n1351 = this.x, o1351 = this.y, p1351 = this.z;
                    let q1351 = m1351.m03 * n1351 + m1351.m07 * o1351 + m1351.m11 * p1351 + m1351.m15;
                    return q1351 = q1351 ? 1 / q1351 : 1, this.x = (m1351.m00 * n1351 + m1351.m04 * o1351 + m1351.m08 * p1351 + m1351.m12) * q1351, this.y = (m1351.m01 * n1351 + m1351.m05 * o1351 + m1351.m09 * p1351 + m1351.m13) * q1351, this.z = (m1351.m02 * n1351 + m1351.m06 * o1351 + m1351.m10 * p1351 + m1351.m14) * q1351, this;
                }
            }
            function t129(j1344, k1344, l1344) {
                return new w146(j1344, k1344, l1344);
            }
            g125("Vec3", w146), u146 = w146, w146.UNIT_X = Object.freeze(new u146(1, 0, 0)), w146.UNIT_Y = Object.freeze(new u146(0, 1, 0)), w146.UNIT_Z = Object.freeze(new u146(0, 0, 1)), w146.RIGHT = Object.freeze(new u146(1, 0, 0)), w146.UP = Object.freeze(new u146(0, 1, 0)), w146.FORWARD = Object.freeze(new u146(0, 0, -1)), w146.ZERO = Object.freeze(new u146(0, 0, 0)), w146.ONE = Object.freeze(new u146(1, 1, 1)), w146.NEG_ONE = Object.freeze(new u146(-1, -1, -1)), w146.slerp = (() => {
                const p1343 = new u146(), q1343 = new u146(), r1343 = new u146();
                return (t1343, u1343, v1343, w1343) => {
                    const x1343 = 1e-5, y1343 = u146.len(u1343), z1343 = u146.len(v1343);
                    if (y1343 < x1343 || z1343 < x1343)
                        return u146.lerp(t1343, u1343, v1343, w1343);
                    const a1344 = z128(y1343, z1343, w1343), b1344 = u146.dot(u1343, v1343) / (y1343 * z1343);
                    if (b1344 > .99999)
                        return u146.lerp(t1343, u1343, v1343, w1343);
                    if (b1344 < -.99999) {
                        const g1344 = u146.multiplyScalar(p1343, u1343, 1 / y1343), h1344 = u146.generateOrthogonal(q1343, g1344), i1344 = Math.PI * w1343;
                        return x146(r1343, g1344, h1344, i1344), u146.multiplyScalar(t1343, r1343, a1344), t1343;
                    }
                    {
                        const c1344 = b1344, d1344 = Math.acos(c1344) * w1343, e1344 = u146.multiplyScalar(p1343, u1343, 1 / y1343), f1344 = u146.multiplyScalar(q1343, v1343, 1 / z1343);
                        return u146.scaleAndAdd(r1343, f1344, e1344, -c1344), u146.normalize(r1343, r1343), u146.multiplyScalar(r1343, r1343, Math.sin(d1344)), u146.scaleAndAdd(r1343, r1343, e1344, Math.cos(d1344)), u146.multiplyScalar(t1343, r1343, a1344), t1343;
                    }
                };
            })(), s128.fastDefine("cc.Vec3", w146, {
                x: 0,
                y: 0,
                z: 0
            }), s143.Vec3 = w146;
            const x146 = (() => {
                const h1343 = {
                    x: 0,
                    y: 0,
                    z: 0,
                    w: 0
                };
                return (j1343, k1343, l1343, m1343) => {
                    const n1343 = .5 * m1343, o1343 = Math.sin(n1343);
                    return h1343.x = o1343 * l1343.x, h1343.y = o1343 * l1343.y, h1343.z = o1343 * l1343.z, h1343.w = Math.cos(n1343), w146.transformQuat(j1343, k1343, h1343), j1343;
                };
            })();
            var y146;
            s143.v3 = t129;
            const z146 = 1 / 255;
            class a147 extends p145 {
                static clone(e1343) {
                    const f1343 = new a147();
                    return e1343._val ? f1343._val = e1343._val : f1343._val = (e1343.a << 24 >>> 0) + (e1343.b << 16) + (e1343.g << 8) + e1343.r, f1343;
                }
                static copy(c1343, d1343) {
                    return c1343.r = d1343.r, c1343.g = d1343.g, c1343.b = d1343.b, c1343.a = d1343.a, c1343;
                }
                static set(t1342, u1342, v1342, w1342, x1342) {
                    return t1342.r = u1342, t1342.g = v1342, t1342.b = w1342, t1342.a = x1342, t1342;
                }
                static toVec4(r1342, s1342) {
                    return (s1342 = void 0 !== s1342 ? s1342 : new v146()).x = r1342.r * z146, s1342.y = r1342.g * z146, s1342.z = r1342.b * z146, s1342.w = r1342.a * z146, s1342;
                }
                static fromVec4(p1342, q1342) {
                    return (q1342 = void 0 === q1342 ? new a147() : q1342).r = Math.floor(p1342.x / z146), q1342.g = Math.floor(p1342.y / z146), q1342.b = Math.floor(p1342.z / z146), q1342.a = Math.floor(p1342.w / z146), q1342;
                }
                static fromHEX(h1342, i1342) {
                    let j1342;
                    return "string" == typeof i1342 ? (6 === (i1342 = "#" === i1342[0] ? i1342.substring(1) : i1342).length ? i1342 += "FF" : 3 === i1342.length ? i1342 = i1342[0] + i1342[0] + i1342[1] + i1342[1] + i1342[2] + i1342[2] + "FF" : 4 === i1342.length && (i1342 = i1342[0] + i1342[0] + i1342[1] + i1342[1] + i1342[2] + i1342[2] + i1342[3] + i1342[3]), j1342 = Number("0x" + i1342)) : (i1342 < 16777216 && (i1342 = 255 + (i1342 << 8)), j1342 = i1342), h1342.r = j1342 >>> 24, h1342.g = (16711680 & j1342) >>> 16, h1342.b = (65280 & j1342) >>> 8, h1342.a = 255 & j1342, h1342._val = (h1342.a << 24 >>> 0) + (h1342.b << 16) + (h1342.g << 8) + h1342.r, h1342;
                }
                static add(e1342, f1342, g1342) {
                    return e1342.r = f1342.r + g1342.r, e1342.g = f1342.g + g1342.g, e1342.b = f1342.b + g1342.b, e1342.a = f1342.a + g1342.a, e1342;
                }
                static subtract(b1342, c1342, d1342) {
                    return b1342.r = c1342.r - d1342.r, b1342.g = c1342.g - d1342.g, b1342.b = c1342.b - d1342.b, b1342.a = c1342.a - d1342.a, b1342;
                }
                static multiply(t1341, u1341, v1341) {
                    return t1341.r = u1341.r * v1341.r, t1341.g = u1341.g * v1341.g, t1341.b = u1341.b * v1341.b, t1341.a = u1341.a * v1341.a, t1341;
                }
                static divide(q1341, r1341, s1341) {
                    return q1341.r = r1341.r / s1341.r, q1341.g = r1341.g / s1341.g, q1341.b = r1341.b / s1341.b, q1341.a = r1341.a / s1341.a, q1341;
                }
                static scale(n1341, o1341, p1341) {
                    return n1341.r = o1341.r * p1341, n1341.g = o1341.g * p1341, n1341.b = o1341.b * p1341, n1341.a = o1341.a * p1341, n1341;
                }
                static lerp(z1340, a1341, b1341, c1341) {
                    let d1341 = a1341.r, e1341 = a1341.g, f1341 = a1341.b, g1341 = a1341.a;
                    return d1341 += (b1341.r - d1341) * c1341, e1341 += (b1341.g - e1341) * c1341, f1341 += (b1341.b - f1341) * c1341, g1341 += (b1341.a - g1341) * c1341, z1340._val = Math.floor((g1341 << 24 >>> 0) + (f1341 << 16) + (e1341 << 8) + d1341), z1340;
                }
                static toArray(v1340, w1340, x1340 = 0) {
                    const y1340 = w1340 instanceof a147 || w1340.a > 1 ? 1 / 255 : 1;
                    return v1340[x1340 + 0] = w1340.r * y1340, v1340[x1340 + 1] = w1340.g * y1340, v1340[x1340 + 2] = w1340.b * y1340, v1340[x1340 + 3] = w1340.a * y1340, v1340;
                }
                static fromArray(s1340, t1340, u1340 = 0) {
                    return t1340.r = 255 * s1340[u1340 + 0], t1340.g = 255 * s1340[u1340 + 1], t1340.b = 255 * s1340[u1340 + 2], t1340.a = 255 * s1340[u1340 + 3], t1340;
                }
                static fromUint32(q1340, r1340) {
                    return q1340._val = r1340, q1340;
                }
                static toUint32(p1340) {
                    return p1340._val;
                }
                static strictEquals(n1340, o1340) {
                    return n1340.r === o1340.r && n1340.g === o1340.g && n1340.b === o1340.b && n1340.a === o1340.a;
                }
                static equals(j1340, k1340, l1340 = q146) {
                    return !(Math.abs(j1340.r) === 1 / 0 || Math.abs(j1340.g) === 1 / 0 || Math.abs(j1340.b) === 1 / 0 || Math.abs(j1340.a) === 1 / 0) && Math.abs(j1340.r - k1340.r) <= l1340 * Math.max(1, Math.abs(j1340.r), Math.abs(k1340.r)) && Math.abs(j1340.g - k1340.g) <= l1340 * Math.max(1, Math.abs(j1340.g), Math.abs(k1340.g)) && Math.abs(j1340.b - k1340.b) <= l1340 * Math.max(1, Math.abs(j1340.b), Math.abs(k1340.b)) && Math.abs(j1340.a - k1340.a) <= l1340 * Math.max(1, Math.abs(j1340.a), Math.abs(k1340.a));
                }
                static hex(i1340) {
                    return (255 * i1340.r << 24 | 255 * i1340.g << 16 | 255 * i1340.b << 8 | 255 * i1340.a) >>> 0;
                }
                get r() {
                    return 255 & this._val;
                }
                set r(h1340) {
                    h1340 = ~~x128(h1340, 0, 255), this._val = (4294967040 & this._val | h1340) >>> 0;
                }
                get g() {
                    return (65280 & this._val) >> 8;
                }
                set g(g1340) {
                    g1340 = ~~x128(g1340, 0, 255), this._val = (4294902015 & this._val | g1340 << 8) >>> 0;
                }
                get b() {
                    return (16711680 & this._val) >> 16;
                }
                set b(f1340) {
                    f1340 = ~~x128(f1340, 0, 255), this._val = (4278255615 & this._val | f1340 << 16) >>> 0;
                }
                get a() {
                    return (4278190080 & this._val) >>> 24;
                }
                set a(e1340) {
                    e1340 = ~~x128(e1340, 0, 255), this._val = (16777215 & this._val | e1340 << 24) >>> 0;
                }
                get x() {
                    return this.r * z146;
                }
                set x(d1340) {
                    this.r = 255 * d1340;
                }
                get y() {
                    return this.g * z146;
                }
                set y(c1340) {
                    this.g = 255 * c1340;
                }
                get z() {
                    return this.b * z146;
                }
                set z(b1340) {
                    this.b = 255 * b1340;
                }
                get w() {
                    return this.a * z146;
                }
                set w(a1340) {
                    this.a = 255 * a1340;
                }
                constructor(w1339, x1339, y1339, z1339) {
                    super(), this._val = 0, "string" == typeof w1339 ? this.fromHEX(w1339) : void 0 !== x1339 ? this.set(w1339, x1339, y1339, z1339) : this.set(w1339);
                }
                clone() {
                    const g1343 = new a147();
                    return g1343._val = this._val, g1343;
                }
                equals(m1340) {
                    return m1340 && this._val === m1340._val;
                }
                lerp(h1341, i1341) {
                    let j1341 = this.r, k1341 = this.g, l1341 = this.b, m1341 = this.a;
                    return j1341 += (h1341.r - j1341) * i1341, k1341 += (h1341.g - k1341) * i1341, l1341 += (h1341.b - l1341) * i1341, m1341 += (h1341.a - m1341) * i1341, this._val = Math.floor((m1341 << 24 >>> 0) + (l1341 << 16) + (k1341 << 8) + j1341), this;
                }
                toString() {
                    return `rgba(${this.r.toFixed()}, ${this.g.toFixed()}, ${this.b.toFixed()}, ${this.a.toFixed()})`;
                }
                toCSS(v1339 = "rgba") {
                    return "rgba" === v1339 ? `rgba(${this.r},${this.g},${this.b},${(this.a * z146).toFixed(2)})` : "rgb" === v1339 ? `rgb(${this.r},${this.g},${this.b})` : `#${this.toHEX(v1339)}`;
                }
                fromHEX(k1342) {
                    k1342 = 0 === k1342.indexOf("#") ? k1342.substring(1) : k1342;
                    const l1342 = parseInt(k1342.substr(0, 2), 16) || 0, m1342 = parseInt(k1342.substr(2, 2), 16) || 0, n1342 = parseInt(k1342.substr(4, 2), 16) || 0;
                    let o1342 = parseInt(k1342.substr(6, 2), 16);
                    return o1342 = Number.isNaN(o1342) ? 255 : o1342, this._val = (o1342 << 24 >>> 0) + (n1342 << 16) + (m1342 << 8) + (0 | l1342), this;
                }
                toHEX(s1339 = "#rrggbb") {
                    const t1339 = "0", u1339 = [(this.r < 16 ? t1339 : "") + this.r.toString(16), (this.g < 16 ? t1339 : "") + this.g.toString(16), (this.b < 16 ? t1339 : "") + this.b.toString(16)];
                    return "#rgb" === s1339 ? (u1339[0] = u1339[0][0], u1339[1] = u1339[1][0], u1339[2] = u1339[2][0]) : "#rrggbbaa" === s1339 && u1339.push((this.a < 16 ? t1339 : "") + this.a.toString(16)), u1339.join("");
                }
                toRGBValue() {
                    return 16777215 & this._val;
                }
                fromHSV(h1339, i1339, j1339) {
                    let k1339 = 0, l1339 = 0, m1339 = 0;
                    if (0 === i1339)
                        k1339 = l1339 = m1339 = j1339;
                    else if (0 === j1339)
                        k1339 = l1339 = m1339 = 0;
                    else {
                        1 === h1339 && (h1339 = 0), h1339 *= 6;
                        const n1339 = Math.floor(h1339), o1339 = h1339 - n1339, p1339 = j1339 * (1 - i1339), q1339 = j1339 * (1 - i1339 * o1339), r1339 = j1339 * (1 - i1339 * (1 - o1339));
                        switch (n1339) {
                            default:
                            case 0:
                                k1339 = j1339, l1339 = r1339, m1339 = p1339;
                                break;
                            case 1:
                                k1339 = q1339, l1339 = j1339, m1339 = p1339;
                                break;
                            case 2:
                                k1339 = p1339, l1339 = j1339, m1339 = r1339;
                                break;
                            case 3:
                                k1339 = p1339, l1339 = q1339, m1339 = j1339;
                                break;
                            case 4:
                                k1339 = r1339, l1339 = p1339, m1339 = j1339;
                                break;
                            case 5:
                                k1339 = j1339, l1339 = p1339, m1339 = q1339;
                        }
                    }
                    return k1339 *= 255, l1339 *= 255, m1339 *= 255, this._val = (this.a << 24 >>> 0) + (m1339 << 16) + (l1339 << 8) + (0 | k1339), this;
                }
                toHSV() {
                    const a1339 = this.r * z146, b1339 = this.g * z146, c1339 = this.b * z146, d1339 = {
                        h: 0,
                        s: 0,
                        v: 0
                    }, e1339 = Math.max(a1339, b1339, c1339), f1339 = Math.min(a1339, b1339, c1339);
                    let g1339 = 0;
                    return d1339.v = e1339, d1339.s = e1339 ? (e1339 - f1339) / e1339 : 0, d1339.s ? (g1339 = e1339 - f1339, d1339.h = a1339 === e1339 ? (b1339 - c1339) / g1339 : b1339 === e1339 ? 2 + (c1339 - a1339) / g1339 : 4 + (a1339 - b1339) / g1339, d1339.h /= 6, d1339.h < 0 && (d1339.h += 1)) : d1339.h = 0, d1339;
                }
                set(y1342, z1342, a1343, b1343) {
                    return "object" == typeof y1342 ? null != y1342._val ? this._val = y1342._val : (z1342 = y1342.g || 0, a1343 = y1342.b || 0, b1343 = "number" == typeof y1342.a ? y1342.a : 255, y1342 = y1342.r || 0, this._val = (b1343 << 24 >>> 0) + (a1343 << 16) + (z1342 << 8) + (0 | y1342)) : (y1342 = y1342 || 0, z1342 = z1342 || 0, a1343 = a1343 || 0, b1343 = "number" == typeof b1343 ? b1343 : 255, this._val = (b1343 << 24 >>> 0) + (a1343 << 16) + (z1342 << 8) + (0 | y1342)), this;
                }
                multiply(w1341) {
                    const x1341 = (255 & this._val) * w1341.r >> 8, y1341 = (65280 & this._val) * w1341.g >> 8, z1341 = (16711680 & this._val) * w1341.b >> 8, a1342 = ((4278190080 & this._val) >>> 8) * w1341.a;
                    return this._val = 4278190080 & a1342 | 16711680 & z1341 | 65280 & y1341 | 255 & x1341, this;
                }
                _set_r_unsafe(z1338) {
                    return this._val = (4294967040 & this._val | z1338) >>> 0, this;
                }
                _set_g_unsafe(y1338) {
                    return this._val = (4294902015 & this._val | y1338 << 8) >>> 0, this;
                }
                _set_b_unsafe(x1338) {
                    return this._val = (4278255615 & this._val | x1338 << 16) >>> 0, this;
                }
                _set_a_unsafe(w1338) {
                    return this._val = (16777215 & this._val | w1338 << 24) >>> 0, this;
                }
            }
            function u129(s1338, t1338, u1338, v1338) {
                return new a147(s1338, t1338, u1338, v1338);
            }
            var b147;
            g125("Color", a147), y146 = a147, a147.WHITE = Object.freeze(new y146(255, 255, 255, 255)), a147.GRAY = Object.freeze(new y146(127, 127, 127, 255)), a147.BLACK = Object.freeze(new y146(0, 0, 0, 255)), a147.TRANSPARENT = Object.freeze(new y146(0, 0, 0, 0)), a147.RED = Object.freeze(new y146(255, 0, 0, 255)), a147.GREEN = Object.freeze(new y146(0, 255, 0, 255)), a147.BLUE = Object.freeze(new y146(0, 0, 255, 255)), a147.CYAN = Object.freeze(new y146(0, 255, 255, 255)), a147.MAGENTA = Object.freeze(new y146(255, 0, 255, 255)), a147.YELLOW = Object.freeze(new y146(255, 255, 0, 255)), s128.fastDefine("cc.Color", a147, {
                r: 0,
                g: 0,
                b: 0,
                a: 255
            }), s143.Color = a147, s143.color = u129;
            class c147 extends p145 {
                static clone(q1338) {
                    return new c147(q1338.m00, q1338.m01, q1338.m02, q1338.m03, q1338.m04, q1338.m05, q1338.m06, q1338.m07, q1338.m08);
                }
                static copy(o1338, p1338) {
                    return o1338.m00 = p1338.m00, o1338.m01 = p1338.m01, o1338.m02 = p1338.m02, o1338.m03 = p1338.m03, o1338.m04 = p1338.m04, o1338.m05 = p1338.m05, o1338.m06 = p1338.m06, o1338.m07 = p1338.m07, o1338.m08 = p1338.m08, o1338;
                }
                static set(v1337, w1337, x1337, y1337, z1337, a1338, b1338, c1338, d1338, e1338) {
                    return v1337.m00 = w1337, v1337.m01 = x1337, v1337.m02 = y1337, v1337.m03 = z1337, v1337.m04 = a1338, v1337.m05 = b1338, v1337.m06 = c1338, v1337.m07 = d1338, v1337.m08 = e1338, v1337;
                }
                static identity(u1337) {
                    return u1337.m00 = 1, u1337.m01 = 0, u1337.m02 = 0, u1337.m03 = 0, u1337.m04 = 1, u1337.m05 = 0, u1337.m06 = 0, u1337.m07 = 0, u1337.m08 = 1, u1337;
                }
                static transpose(m1337, n1337) {
                    if (m1337 === n1337) {
                        const r1337 = n1337.m01, s1337 = n1337.m02, t1337 = n1337.m05;
                        m1337.m01 = n1337.m03, m1337.m02 = n1337.m06, m1337.m03 = r1337, m1337.m05 = n1337.m07, m1337.m06 = s1337, m1337.m07 = t1337;
                    }
                    else
                        m1337.m00 = n1337.m00, m1337.m01 = n1337.m03, m1337.m02 = n1337.m06, m1337.m03 = n1337.m01, m1337.m04 = n1337.m04, m1337.m05 = n1337.m07, m1337.m06 = n1337.m02, m1337.m07 = n1337.m05, m1337.m08 = n1337.m08;
                    return m1337;
                }
                static invert(k1336, l1336) {
                    const m1336 = l1336.m00, n1336 = l1336.m01, o1336 = l1336.m02, p1336 = l1336.m03, q1336 = l1336.m04, r1336 = l1336.m05, s1336 = l1336.m06, t1336 = l1336.m07, u1336 = l1336.m08, v1336 = u1336 * q1336 - r1336 * t1336, w1336 = -u1336 * p1336 + r1336 * s1336, x1336 = t1336 * p1336 - q1336 * s1336;
                    let y1336 = m1336 * v1336 + n1336 * w1336 + o1336 * x1336;
                    return 0 === y1336 ? (k1336.m00 = 0, k1336.m01 = 0, k1336.m02 = 0, k1336.m03 = 0, k1336.m04 = 0, k1336.m05 = 0, k1336.m06 = 0, k1336.m07 = 0, k1336.m08 = 0, k1336) : (y1336 = 1 / y1336, k1336.m00 = v1336 * y1336, k1336.m01 = (-u1336 * n1336 + o1336 * t1336) * y1336, k1336.m02 = (r1336 * n1336 - o1336 * q1336) * y1336, k1336.m03 = w1336 * y1336, k1336.m04 = (u1336 * m1336 - o1336 * s1336) * y1336, k1336.m05 = (-r1336 * m1336 + o1336 * p1336) * y1336, k1336.m06 = x1336 * y1336, k1336.m07 = (-t1336 * m1336 + n1336 * s1336) * y1336, k1336.m08 = (q1336 * m1336 - n1336 * p1336) * y1336, k1336);
                }
                static determinant(r1335) {
                    const s1335 = r1335.m00, t1335 = r1335.m01, u1335 = r1335.m02, v1335 = r1335.m03, w1335 = r1335.m04, x1335 = r1335.m05, y1335 = r1335.m06, z1335 = r1335.m07, a1336 = r1335.m08;
                    return s1335 * (a1336 * w1335 - x1335 * z1335) + t1335 * (-a1336 * v1335 + x1335 * y1335) + u1335 * (z1335 * v1335 - w1335 * y1335);
                }
                static multiply(d1334, e1334, f1334) {
                    const g1334 = e1334.m00, h1334 = e1334.m01, i1334 = e1334.m02, j1334 = e1334.m03, k1334 = e1334.m04, l1334 = e1334.m05, m1334 = e1334.m06, n1334 = e1334.m07, o1334 = e1334.m08, p1334 = f1334.m00, q1334 = f1334.m01, r1334 = f1334.m02, s1334 = f1334.m03, t1334 = f1334.m04, u1334 = f1334.m05, v1334 = f1334.m06, w1334 = f1334.m07, x1334 = f1334.m08;
                    return d1334.m00 = p1334 * g1334 + q1334 * j1334 + r1334 * m1334, d1334.m01 = p1334 * h1334 + q1334 * k1334 + r1334 * n1334, d1334.m02 = p1334 * i1334 + q1334 * l1334 + r1334 * o1334, d1334.m03 = s1334 * g1334 + t1334 * j1334 + u1334 * m1334, d1334.m04 = s1334 * h1334 + t1334 * k1334 + u1334 * n1334, d1334.m05 = s1334 * i1334 + t1334 * l1334 + u1334 * o1334, d1334.m06 = v1334 * g1334 + w1334 * j1334 + x1334 * m1334, d1334.m07 = v1334 * h1334 + w1334 * k1334 + x1334 * n1334, d1334.m08 = v1334 * i1334 + w1334 * l1334 + x1334 * o1334, d1334;
                }
                static multiplyMat4(i1333, j1333, k1333) {
                    const l1333 = j1333.m00, m1333 = j1333.m01, n1333 = j1333.m02, o1333 = j1333.m03, p1333 = j1333.m04, q1333 = j1333.m05, r1333 = j1333.m06, s1333 = j1333.m07, t1333 = j1333.m08, u1333 = k1333.m00, v1333 = k1333.m01, w1333 = k1333.m02, x1333 = k1333.m04, y1333 = k1333.m05, z1333 = k1333.m06, a1334 = k1333.m08, b1334 = k1333.m09, c1334 = k1333.m10;
                    return i1333.m00 = u1333 * l1333 + v1333 * o1333 + w1333 * r1333, i1333.m01 = u1333 * m1333 + v1333 * p1333 + w1333 * s1333, i1333.m02 = u1333 * n1333 + v1333 * q1333 + w1333 * t1333, i1333.m03 = x1333 * l1333 + y1333 * o1333 + z1333 * r1333, i1333.m04 = x1333 * m1333 + y1333 * p1333 + z1333 * s1333, i1333.m05 = x1333 * n1333 + y1333 * q1333 + z1333 * t1333, i1333.m06 = a1334 * l1333 + b1334 * o1333 + c1334 * r1333, i1333.m07 = a1334 * m1333 + b1334 * p1333 + c1334 * s1333, i1333.m08 = a1334 * n1333 + b1334 * q1333 + c1334 * t1333, i1333;
                }
                static transform(f1333, g1333, h1333) {
                    this.translate(f1333, g1333, h1333);
                }
                static translate(r1332, s1332, t1332) {
                    const u1332 = s1332.m00, v1332 = s1332.m01, w1332 = s1332.m02, x1332 = s1332.m03, y1332 = s1332.m04, z1332 = s1332.m05, a1333 = s1332.m06, b1333 = s1332.m07, c1333 = s1332.m08, d1333 = t1332.x, e1333 = t1332.y;
                    return r1332.m00 = u1332, r1332.m01 = v1332, r1332.m02 = w1332, r1332.m03 = x1332, r1332.m04 = y1332, r1332.m05 = z1332, r1332.m06 = d1333 * u1332 + e1333 * x1332 + a1333, r1332.m07 = d1333 * v1332 + e1333 * y1332 + b1333, r1332.m08 = d1333 * w1332 + e1333 * z1332 + c1333, r1332;
                }
                static scale(j1332, k1332, l1332) {
                    const m1332 = l1332.x, n1332 = l1332.y;
                    return j1332.m00 = m1332 * k1332.m00, j1332.m01 = m1332 * k1332.m01, j1332.m02 = m1332 * k1332.m02, j1332.m03 = n1332 * k1332.m03, j1332.m04 = n1332 * k1332.m04, j1332.m05 = n1332 * k1332.m05, j1332.m06 = k1332.m06, j1332.m07 = k1332.m07, j1332.m08 = k1332.m08, j1332;
                }
                static rotate(j1331, k1331, l1331) {
                    const m1331 = k1331.m00, n1331 = k1331.m01, o1331 = k1331.m02, p1331 = k1331.m03, q1331 = k1331.m04, r1331 = k1331.m05, s1331 = k1331.m06, t1331 = k1331.m07, u1331 = k1331.m08, v1331 = Math.sin(l1331), w1331 = Math.cos(l1331);
                    return j1331.m00 = w1331 * m1331 + v1331 * p1331, j1331.m01 = w1331 * n1331 + v1331 * q1331, j1331.m02 = w1331 * o1331 + v1331 * r1331, j1331.m03 = w1331 * p1331 - v1331 * m1331, j1331.m04 = w1331 * q1331 - v1331 * n1331, j1331.m05 = w1331 * r1331 - v1331 * o1331, j1331.m06 = s1331, j1331.m07 = t1331, j1331.m08 = u1331, j1331;
                }
                static fromMat4(h1331, i1331) {
                    return h1331.m00 = i1331.m00, h1331.m01 = i1331.m01, h1331.m02 = i1331.m02, h1331.m03 = i1331.m04, h1331.m04 = i1331.m05, h1331.m05 = i1331.m06, h1331.m06 = i1331.m08, h1331.m07 = i1331.m09, h1331.m08 = i1331.m10, h1331;
                }
                static fromViewUp(e1331, f1331, g1331) {
                    return w146.lengthSqr(f1331) < q146 * q146 ? (c147.identity(e1331), e1331) : (g1331 = g1331 || w146.UNIT_Y, w146.normalize(d147, w146.cross(d147, g1331, f1331)), w146.lengthSqr(d147) < q146 * q146 ? (c147.identity(e1331), e1331) : (w146.cross(e147, f1331, d147), c147.set(e1331, d147.x, d147.y, d147.z, e147.x, e147.y, e147.z, f1331.x, f1331.y, f1331.z), e1331));
                }
                static fromTranslation(c1331, d1331) {
                    return c1331.m00 = 1, c1331.m01 = 0, c1331.m02 = 0, c1331.m03 = 0, c1331.m04 = 1, c1331.m05 = 0, c1331.m06 = d1331.x, c1331.m07 = d1331.y, c1331.m08 = 1, c1331;
                }
                static fromScaling(a1331, b1331) {
                    return a1331.m00 = b1331.x, a1331.m01 = 0, a1331.m02 = 0, a1331.m03 = 0, a1331.m04 = b1331.y, a1331.m05 = 0, a1331.m06 = 0, a1331.m07 = 0, a1331.m08 = 1, a1331;
                }
                static fromRotation(w1330, x1330) {
                    const y1330 = Math.sin(x1330), z1330 = Math.cos(x1330);
                    return w1330.m00 = z1330, w1330.m01 = y1330, w1330.m02 = 0, w1330.m03 = -y1330, w1330.m04 = z1330, w1330.m05 = 0, w1330.m06 = 0, w1330.m07 = 0, w1330.m08 = 1, w1330;
                }
                static fromQuat(n1329, o1329) {
                    const p1329 = o1329.x, q1329 = o1329.y, r1329 = o1329.z, s1329 = o1329.w, t1329 = p1329 + p1329, u1329 = q1329 + q1329, v1329 = r1329 + r1329, w1329 = p1329 * t1329, x1329 = q1329 * t1329, y1329 = q1329 * u1329, z1329 = r1329 * t1329, a1330 = r1329 * u1329, b1330 = r1329 * v1329, c1330 = s1329 * t1329, d1330 = s1329 * u1329, e1330 = s1329 * v1329;
                    return n1329.m00 = 1 - y1329 - b1330, n1329.m03 = x1329 - e1330, n1329.m06 = z1329 + d1330, n1329.m01 = x1329 + e1330, n1329.m04 = 1 - w1329 - b1330, n1329.m07 = a1330 - c1330, n1329.m02 = z1329 - d1330, n1329.m05 = a1330 + c1330, n1329.m08 = 1 - w1329 - y1329, n1329;
                }
                static inverseTransposeMat4(i1328, j1328) {
                    const k1328 = j1328.m00, l1328 = j1328.m01, m1328 = j1328.m02, n1328 = j1328.m03, o1328 = j1328.m04, p1328 = j1328.m05, q1328 = j1328.m06, r1328 = j1328.m07, s1328 = j1328.m08, t1328 = j1328.m09, u1328 = j1328.m10, v1328 = j1328.m11, w1328 = j1328.m12, x1328 = j1328.m13, y1328 = j1328.m14, z1328 = j1328.m15, a1329 = k1328 * p1328 - l1328 * o1328, b1329 = k1328 * q1328 - m1328 * o1328, c1329 = k1328 * r1328 - n1328 * o1328, d1329 = l1328 * q1328 - m1328 * p1328, e1329 = l1328 * r1328 - n1328 * p1328, f1329 = m1328 * r1328 - n1328 * q1328, g1329 = s1328 * x1328 - t1328 * w1328, h1329 = s1328 * y1328 - u1328 * w1328, i1329 = s1328 * z1328 - v1328 * w1328, j1329 = t1328 * y1328 - u1328 * x1328, k1329 = t1328 * z1328 - v1328 * x1328, l1329 = u1328 * z1328 - v1328 * y1328;
                    let m1329 = a1329 * l1329 - b1329 * k1329 + c1329 * j1329 + d1329 * i1329 - e1329 * h1329 + f1329 * g1329;
                    return m1329 ? (m1329 = 1 / m1329, i1328.m00 = (p1328 * l1329 - q1328 * k1329 + r1328 * j1329) * m1329, i1328.m01 = (q1328 * i1329 - o1328 * l1329 - r1328 * h1329) * m1329, i1328.m02 = (o1328 * k1329 - p1328 * i1329 + r1328 * g1329) * m1329, i1328.m03 = (m1328 * k1329 - l1328 * l1329 - n1328 * j1329) * m1329, i1328.m04 = (k1328 * l1329 - m1328 * i1329 + n1328 * h1329) * m1329, i1328.m05 = (l1328 * i1329 - k1328 * k1329 - n1328 * g1329) * m1329, i1328.m06 = (x1328 * f1329 - y1328 * e1329 + z1328 * d1329) * m1329, i1328.m07 = (y1328 * c1329 - w1328 * f1329 - z1328 * b1329) * m1329, i1328.m08 = (w1328 * e1329 - x1328 * c1329 + z1328 * a1329) * m1329, i1328) : null;
                }
                static toArray(f1328, g1328, h1328 = 0) {
                    return f1328[h1328 + 0] = g1328.m00, f1328[h1328 + 1] = g1328.m01, f1328[h1328 + 2] = g1328.m02, f1328[h1328 + 3] = g1328.m03, f1328[h1328 + 4] = g1328.m04, f1328[h1328 + 5] = g1328.m05, f1328[h1328 + 6] = g1328.m06, f1328[h1328 + 7] = g1328.m07, f1328[h1328 + 8] = g1328.m08, f1328;
                }
                static fromArray(c1328, d1328, e1328 = 0) {
                    return c1328.m00 = d1328[e1328 + 0], c1328.m01 = d1328[e1328 + 1], c1328.m02 = d1328[e1328 + 2], c1328.m03 = d1328[e1328 + 3], c1328.m04 = d1328[e1328 + 4], c1328.m05 = d1328[e1328 + 5], c1328.m06 = d1328[e1328 + 6], c1328.m07 = d1328[e1328 + 7], c1328.m08 = d1328[e1328 + 8], c1328;
                }
                static add(y1327, z1327, a1328) {
                    return y1327.m00 = z1327.m00 + a1328.m00, y1327.m01 = z1327.m01 + a1328.m01, y1327.m02 = z1327.m02 + a1328.m02, y1327.m03 = z1327.m03 + a1328.m03, y1327.m04 = z1327.m04 + a1328.m04, y1327.m05 = z1327.m05 + a1328.m05, y1327.m06 = z1327.m06 + a1328.m06, y1327.m07 = z1327.m07 + a1328.m07, y1327.m08 = z1327.m08 + a1328.m08, y1327;
                }
                static subtract(u1327, v1327, w1327) {
                    return u1327.m00 = v1327.m00 - w1327.m00, u1327.m01 = v1327.m01 - w1327.m01, u1327.m02 = v1327.m02 - w1327.m02, u1327.m03 = v1327.m03 - w1327.m03, u1327.m04 = v1327.m04 - w1327.m04, u1327.m05 = v1327.m05 - w1327.m05, u1327.m06 = v1327.m06 - w1327.m06, u1327.m07 = v1327.m07 - w1327.m07, u1327.m08 = v1327.m08 - w1327.m08, u1327;
                }
                static multiplyScalar(q1327, r1327, s1327) {
                    return q1327.m00 = r1327.m00 * s1327, q1327.m01 = r1327.m01 * s1327, q1327.m02 = r1327.m02 * s1327, q1327.m03 = r1327.m03 * s1327, q1327.m04 = r1327.m04 * s1327, q1327.m05 = r1327.m05 * s1327, q1327.m06 = r1327.m06 * s1327, q1327.m07 = r1327.m07 * s1327, q1327.m08 = r1327.m08 * s1327, q1327;
                }
                static multiplyScalarAndAdd(m1327, n1327, o1327, p1327) {
                    return m1327.m00 = o1327.m00 * p1327 + n1327.m00, m1327.m01 = o1327.m01 * p1327 + n1327.m01, m1327.m02 = o1327.m02 * p1327 + n1327.m02, m1327.m03 = o1327.m03 * p1327 + n1327.m03, m1327.m04 = o1327.m04 * p1327 + n1327.m04, m1327.m05 = o1327.m05 * p1327 + n1327.m05, m1327.m06 = o1327.m06 * p1327 + n1327.m06, m1327.m07 = o1327.m07 * p1327 + n1327.m07, m1327.m08 = o1327.m08 * p1327 + n1327.m08, m1327;
                }
                static strictEquals(j1327, k1327) {
                    return j1327.m00 === k1327.m00 && j1327.m01 === k1327.m01 && j1327.m02 === k1327.m02 && j1327.m03 === k1327.m03 && j1327.m04 === k1327.m04 && j1327.m05 === k1327.m05 && j1327.m06 === k1327.m06 && j1327.m07 === k1327.m07 && j1327.m08 === k1327.m08;
                }
                static equals(e1327, f1327, g1327 = q146) {
                    return Math.abs(e1327.m00 - f1327.m00) <= g1327 * Math.max(1, Math.abs(e1327.m00), Math.abs(f1327.m00)) && Math.abs(e1327.m01 - f1327.m01) <= g1327 * Math.max(1, Math.abs(e1327.m01), Math.abs(f1327.m01)) && Math.abs(e1327.m02 - f1327.m02) <= g1327 * Math.max(1, Math.abs(e1327.m02), Math.abs(f1327.m02)) && Math.abs(e1327.m03 - f1327.m03) <= g1327 * Math.max(1, Math.abs(e1327.m03), Math.abs(f1327.m03)) && Math.abs(e1327.m04 - f1327.m04) <= g1327 * Math.max(1, Math.abs(e1327.m04), Math.abs(f1327.m04)) && Math.abs(e1327.m05 - f1327.m05) <= g1327 * Math.max(1, Math.abs(e1327.m05), Math.abs(f1327.m05)) && Math.abs(e1327.m06 - f1327.m06) <= g1327 * Math.max(1, Math.abs(e1327.m06), Math.abs(f1327.m06)) && Math.abs(e1327.m07 - f1327.m07) <= g1327 * Math.max(1, Math.abs(e1327.m07), Math.abs(f1327.m07)) && Math.abs(e1327.m08 - f1327.m08) <= g1327 * Math.max(1, Math.abs(e1327.m08), Math.abs(f1327.m08));
                }
                static toEuler(v1326, w1326) {
                    const x1326 = v1326.m00, y1326 = v1326.m01;
                    v1326.m02;
                    const z1326 = v1326.m03, a1327 = v1326.m04;
                    v1326.m05;
                    const b1327 = v1326.m06, c1327 = v1326.m07, d1327 = v1326.m08;
                    return c1327 < .999 ? c1327 > -.999 ? (w1326.x = Math.asin(-c1327), w1326.y = Math.atan2(b1327, d1327), w1326.z = Math.atan2(y1326, a1327), !0) : (w1326.x = o146, w1326.y = Math.atan2(z1326, x1326), w1326.z = 0, !1) : (w1326.x = -o146, w1326.y = Math.atan2(-z1326, x1326), w1326.z = 0, !1);
                }
                constructor(m1326 = 1, n1326 = 0, o1326 = 0, p1326 = 0, q1326 = 1, r1326 = 0, s1326 = 0, t1326 = 0, u1326 = 1) {
                    super(), "object" == typeof m1326 ? (this.m00 = m1326.m00, this.m01 = m1326.m01, this.m02 = m1326.m02, this.m03 = m1326.m03, this.m04 = m1326.m04, this.m05 = m1326.m05, this.m06 = m1326.m06, this.m07 = m1326.m07, this.m08 = m1326.m08) : (this.m00 = m1326, this.m01 = n1326, this.m02 = o1326, this.m03 = p1326, this.m04 = q1326, this.m05 = r1326, this.m06 = s1326, this.m07 = t1326, this.m08 = u1326);
                }
                clone() {
                    const r1338 = this;
                    return new c147(r1338.m00, r1338.m01, r1338.m02, r1338.m03, r1338.m04, r1338.m05, r1338.m06, r1338.m07, r1338.m08);
                }
                set(f1338 = 1, g1338 = 0, h1338 = 0, i1338 = 0, j1338 = 1, k1338 = 0, l1338 = 0, m1338 = 0, n1338 = 1) {
                    return "object" == typeof f1338 ? (this.m00 = f1338.m00, this.m01 = f1338.m01, this.m02 = f1338.m02, this.m03 = f1338.m03, this.m04 = f1338.m04, this.m05 = f1338.m05, this.m06 = f1338.m06, this.m07 = f1338.m07, this.m08 = f1338.m08) : (this.m00 = f1338, this.m01 = g1338, this.m02 = h1338, this.m03 = i1338, this.m04 = j1338, this.m05 = k1338, this.m06 = l1338, this.m07 = m1338, this.m08 = n1338), this;
                }
                equals(h1327, i1327 = q146) {
                    return Math.abs(this.m00 - h1327.m00) <= i1327 * Math.max(1, Math.abs(this.m00), Math.abs(h1327.m00)) && Math.abs(this.m01 - h1327.m01) <= i1327 * Math.max(1, Math.abs(this.m01), Math.abs(h1327.m01)) && Math.abs(this.m02 - h1327.m02) <= i1327 * Math.max(1, Math.abs(this.m02), Math.abs(h1327.m02)) && Math.abs(this.m03 - h1327.m03) <= i1327 * Math.max(1, Math.abs(this.m03), Math.abs(h1327.m03)) && Math.abs(this.m04 - h1327.m04) <= i1327 * Math.max(1, Math.abs(this.m04), Math.abs(h1327.m04)) && Math.abs(this.m05 - h1327.m05) <= i1327 * Math.max(1, Math.abs(this.m05), Math.abs(h1327.m05)) && Math.abs(this.m06 - h1327.m06) <= i1327 * Math.max(1, Math.abs(this.m06), Math.abs(h1327.m06)) && Math.abs(this.m07 - h1327.m07) <= i1327 * Math.max(1, Math.abs(this.m07), Math.abs(h1327.m07)) && Math.abs(this.m08 - h1327.m08) <= i1327 * Math.max(1, Math.abs(this.m08), Math.abs(h1327.m08));
                }
                strictEquals(l1327) {
                    return this.m00 === l1327.m00 && this.m01 === l1327.m01 && this.m02 === l1327.m02 && this.m03 === l1327.m03 && this.m04 === l1327.m04 && this.m05 === l1327.m05 && this.m06 === l1327.m06 && this.m07 === l1327.m07 && this.m08 === l1327.m08;
                }
                toString() {
                    const l1326 = this;
                    return `[\n${l1326.m00}, ${l1326.m01}, ${l1326.m02},\n${l1326.m03},\n${l1326.m04}, ${l1326.m05},\n${l1326.m06}, ${l1326.m07},\n${l1326.m08}\n]`;
                }
                identity() {
                    return this.m00 = 1, this.m01 = 0, this.m02 = 0, this.m03 = 0, this.m04 = 1, this.m05 = 0, this.m06 = 0, this.m07 = 0, this.m08 = 1, this;
                }
                transpose() {
                    const o1337 = this.m01, p1337 = this.m02, q1337 = this.m05;
                    return this.m01 = this.m03, this.m02 = this.m06, this.m03 = o1337, this.m05 = this.m07, this.m06 = p1337, this.m07 = q1337, this;
                }
                invert() {
                    const z1336 = this.m00, a1337 = this.m01, b1337 = this.m02, c1337 = this.m03, d1337 = this.m04, e1337 = this.m05, f1337 = this.m06, g1337 = this.m07, h1337 = this.m08, i1337 = h1337 * d1337 - e1337 * g1337, j1337 = -h1337 * c1337 + e1337 * f1337, k1337 = g1337 * c1337 - d1337 * f1337;
                    let l1337 = z1336 * i1337 + a1337 * j1337 + b1337 * k1337;
                    return 0 === l1337 ? (this.set(0, 0, 0, 0, 0, 0, 0, 0, 0), this) : (l1337 = 1 / l1337, this.m00 = i1337 * l1337, this.m01 = (-h1337 * a1337 + b1337 * g1337) * l1337, this.m02 = (e1337 * a1337 - b1337 * d1337) * l1337, this.m03 = j1337 * l1337, this.m04 = (h1337 * z1336 - b1337 * f1337) * l1337, this.m05 = (-e1337 * z1336 + b1337 * c1337) * l1337, this.m06 = k1337 * l1337, this.m07 = (-g1337 * z1336 + a1337 * f1337) * l1337, this.m08 = (d1337 * z1336 - a1337 * c1337) * l1337, this);
                }
                determinant() {
                    const b1336 = this.m00, c1336 = this.m01, d1336 = this.m02, e1336 = this.m03, f1336 = this.m04, g1336 = this.m05, h1336 = this.m06, i1336 = this.m07, j1336 = this.m08;
                    return b1336 * (j1336 * f1336 - g1336 * i1336) + c1336 * (-j1336 * e1336 + g1336 * h1336) + d1336 * (i1336 * e1336 - f1336 * h1336);
                }
                add(b1328) {
                    return this.m00 += b1328.m00, this.m01 += b1328.m01, this.m02 += b1328.m02, this.m03 += b1328.m03, this.m04 += b1328.m04, this.m05 += b1328.m05, this.m06 += b1328.m06, this.m07 += b1328.m07, this.m08 += b1328.m08, this;
                }
                subtract(x1327) {
                    return this.m00 -= x1327.m00, this.m01 -= x1327.m01, this.m02 -= x1327.m02, this.m03 -= x1327.m03, this.m04 -= x1327.m04, this.m05 -= x1327.m05, this.m06 -= x1327.m06, this.m07 -= x1327.m07, this.m08 -= x1327.m08, this;
                }
                multiply(y1334) {
                    const z1334 = this.m00, a1335 = this.m01, b1335 = this.m02, c1335 = this.m03, d1335 = this.m04, e1335 = this.m05, f1335 = this.m06, g1335 = this.m07, h1335 = this.m08, i1335 = y1334.m00, j1335 = y1334.m01, k1335 = y1334.m02, l1335 = y1334.m03, m1335 = y1334.m04, n1335 = y1334.m05, o1335 = y1334.m06, p1335 = y1334.m07, q1335 = y1334.m08;
                    return this.m00 = i1335 * z1334 + j1335 * c1335 + k1335 * f1335, this.m01 = i1335 * a1335 + j1335 * d1335 + k1335 * g1335, this.m02 = i1335 * b1335 + j1335 * e1335 + k1335 * h1335, this.m03 = l1335 * z1334 + m1335 * c1335 + n1335 * f1335, this.m04 = l1335 * a1335 + m1335 * d1335 + n1335 * g1335, this.m05 = l1335 * b1335 + m1335 * e1335 + n1335 * h1335, this.m06 = o1335 * z1334 + p1335 * c1335 + q1335 * f1335, this.m07 = o1335 * a1335 + p1335 * d1335 + q1335 * g1335, this.m08 = o1335 * b1335 + p1335 * e1335 + q1335 * h1335, this;
                }
                multiplyScalar(t1327) {
                    return this.m00 *= t1327, this.m01 *= t1327, this.m02 *= t1327, this.m03 *= t1327, this.m04 *= t1327, this.m05 *= t1327, this.m06 *= t1327, this.m07 *= t1327, this.m08 *= t1327, this;
                }
                scale(o1332) {
                    const p1332 = o1332.x, q1332 = o1332.y;
                    return this.m00 = p1332 * this.m00, this.m01 = p1332 * this.m01, this.m02 = p1332 * this.m02, this.m03 = q1332 * this.m03, this.m04 = q1332 * this.m04, this.m05 = q1332 * this.m05, this.m06 = this.m06, this.m07 = this.m07, this.m08 = this.m08, this;
                }
                rotate(x1331) {
                    const y1331 = this.m00, z1331 = this.m01, a1332 = this.m02, b1332 = this.m03, c1332 = this.m04, d1332 = this.m05, e1332 = this.m06, f1332 = this.m07, g1332 = this.m08, h1332 = Math.sin(x1331), i1332 = Math.cos(x1331);
                    return this.m00 = i1332 * y1331 + h1332 * b1332, this.m01 = i1332 * z1331 + h1332 * c1332, this.m02 = i1332 * a1332 + h1332 * d1332, this.m03 = i1332 * b1332 - h1332 * y1331, this.m04 = i1332 * c1332 - h1332 * z1331, this.m05 = i1332 * d1332 - h1332 * a1332, this.m06 = e1332, this.m07 = f1332, this.m08 = g1332, this;
                }
                fromQuat(f1330) {
                    const g1330 = f1330.x, h1330 = f1330.y, i1330 = f1330.z, j1330 = f1330.w, k1330 = g1330 + g1330, l1330 = h1330 + h1330, m1330 = i1330 + i1330, n1330 = g1330 * k1330, o1330 = h1330 * k1330, p1330 = h1330 * l1330, q1330 = i1330 * k1330, r1330 = i1330 * l1330, s1330 = i1330 * m1330, t1330 = j1330 * k1330, u1330 = j1330 * l1330, v1330 = j1330 * m1330;
                    return this.m00 = 1 - p1330 - s1330, this.m03 = o1330 - v1330, this.m06 = q1330 + u1330, this.m01 = o1330 + v1330, this.m04 = 1 - n1330 - s1330, this.m07 = r1330 - t1330, this.m02 = q1330 - u1330, this.m05 = r1330 + t1330, this.m08 = 1 - n1330 - p1330, this;
                }
            }
            g125("Mat3", c147), b147 = c147, c147.IDENTITY = Object.freeze(new b147());
            const d147 = new w146(), e147 = new w146();
            var f147;
            s128.fastDefine("cc.Mat3", c147, {
                m00: 1,
                m01: 0,
                m02: 0,
                m03: 0,
                m04: 1,
                m05: 0,
                m06: 0,
                m07: 0,
                m08: 1
            }), s143.Mat3 = c147;
            class g147 extends p145 {
                static clone(k1326) {
                    return new g147(k1326.x, k1326.y, k1326.z, k1326.w);
                }
                static copy(i1326, j1326) {
                    return i1326.x = j1326.x, i1326.y = j1326.y, i1326.z = j1326.z, i1326.w = j1326.w, i1326;
                }
                static set(z1325, a1326, b1326, c1326, d1326) {
                    return z1325.x = a1326, z1325.y = b1326, z1325.z = c1326, z1325.w = d1326, z1325;
                }
                static identity(y1325) {
                    return y1325.x = 0, y1325.y = 0, y1325.z = 0, y1325.w = 1, y1325;
                }
                static rotationTo(u1325, v1325, w1325) {
                    const x1325 = w146.dot(v1325, w1325);
                    return x1325 < -.999999 ? (w146.cross(j147, w146.UNIT_X, v1325), j147.length() < 1e-6 && w146.cross(j147, w146.UNIT_Y, v1325), w146.normalize(j147, j147), g147.fromAxisAngle(u1325, j147, Math.PI), u1325) : x1325 > .999999 ? (u1325.x = 0, u1325.y = 0, u1325.z = 0, u1325.w = 1, u1325) : (w146.cross(j147, v1325, w1325), u1325.x = j147.x, u1325.y = j147.y, u1325.z = j147.z, u1325.w = 1 + x1325, g147.normalize(u1325, u1325));
                }
                static getAxisAngle(q1325, r1325) {
                    const s1325 = 2 * Math.acos(r1325.w), t1325 = Math.sin(s1325 / 2);
                    return 0 !== t1325 ? (q1325.x = r1325.x / t1325, q1325.y = r1325.y / t1325, q1325.z = r1325.z / t1325) : (q1325.x = 1, q1325.y = 0, q1325.z = 0), s1325;
                }
                static multiply(j1325, k1325, l1325) {
                    const m1325 = k1325.x * l1325.w + k1325.w * l1325.x + k1325.y * l1325.z - k1325.z * l1325.y, n1325 = k1325.y * l1325.w + k1325.w * l1325.y + k1325.z * l1325.x - k1325.x * l1325.z, o1325 = k1325.z * l1325.w + k1325.w * l1325.z + k1325.x * l1325.y - k1325.y * l1325.x, p1325 = k1325.w * l1325.w - k1325.x * l1325.x - k1325.y * l1325.y - k1325.z * l1325.z;
                    return j1325.x = m1325, j1325.y = n1325, j1325.z = o1325, j1325.w = p1325, j1325;
                }
                static multiplyScalar(g1325, h1325, i1325) {
                    return g1325.x = h1325.x * i1325, g1325.y = h1325.y * i1325, g1325.z = h1325.z * i1325, g1325.w = h1325.w * i1325, g1325;
                }
                static scaleAndAdd(c1325, d1325, e1325, f1325) {
                    return c1325.x = d1325.x + e1325.x * f1325, c1325.y = d1325.y + e1325.y * f1325, c1325.z = d1325.z + e1325.z * f1325, c1325.w = d1325.w + e1325.w * f1325, c1325;
                }
                static rotateX(t1324, u1324, v1324) {
                    v1324 *= .5;
                    const w1324 = Math.sin(v1324), x1324 = Math.cos(v1324), { x: y1324, y: z1324, z: a1325, w: b1325 } = u1324;
                    return t1324.x = y1324 * x1324 + b1325 * w1324, t1324.y = z1324 * x1324 + a1325 * w1324, t1324.z = a1325 * x1324 - z1324 * w1324, t1324.w = b1325 * x1324 - y1324 * w1324, t1324;
                }
                static rotateY(k1324, l1324, m1324) {
                    m1324 *= .5;
                    const n1324 = Math.sin(m1324), o1324 = Math.cos(m1324), { x: p1324, y: q1324, z: r1324, w: s1324 } = l1324;
                    return k1324.x = p1324 * o1324 - r1324 * n1324, k1324.y = q1324 * o1324 + s1324 * n1324, k1324.z = r1324 * o1324 + p1324 * n1324, k1324.w = s1324 * o1324 - q1324 * n1324, k1324;
                }
                static rotateZ(b1324, c1324, d1324) {
                    d1324 *= .5;
                    const e1324 = Math.sin(d1324), f1324 = Math.cos(d1324), { x: g1324, y: h1324, z: i1324, w: j1324 } = c1324;
                    return b1324.x = g1324 * f1324 + h1324 * e1324, b1324.y = h1324 * f1324 - g1324 * e1324, b1324.z = i1324 * f1324 + j1324 * e1324, b1324.w = j1324 * f1324 - i1324 * e1324, b1324;
                }
                static rotateAround(x1323, y1323, z1323, a1324) {
                    return g147.invert(h147, y1323), w146.transformQuat(j147, z1323, h147), g147.fromAxisAngle(h147, j147, a1324), g147.multiply(x1323, y1323, h147), x1323;
                }
                static rotateAroundLocal(t1323, u1323, v1323, w1323) {
                    return g147.fromAxisAngle(h147, v1323, w1323), g147.multiply(t1323, u1323, h147), t1323;
                }
                static calculateW(r1323, s1323) {
                    return r1323.x = s1323.x, r1323.y = s1323.y, r1323.z = s1323.z, r1323.w = Math.sqrt(Math.abs(1 - s1323.x * s1323.x - s1323.y * s1323.y - s1323.z * s1323.z)), r1323;
                }
                static dot(p1323, q1323) {
                    return p1323.x * q1323.x + p1323.y * q1323.y + p1323.z * q1323.z + p1323.w * q1323.w;
                }
                static lerp(j1323, k1323, l1323, m1323) {
                    return j1323.x = k1323.x + m1323 * (l1323.x - k1323.x), j1323.y = k1323.y + m1323 * (l1323.y - k1323.y), j1323.z = k1323.z + m1323 * (l1323.z - k1323.z), j1323.w = k1323.w + m1323 * (l1323.w - k1323.w), j1323;
                }
                static slerp(u1322, v1322, w1322, x1322) {
                    let y1322 = 0, z1322 = 0, a1323 = w1322.x, b1323 = w1322.y, c1323 = w1322.z, d1323 = w1322.w, e1323 = v1322.x * w1322.x + v1322.y * w1322.y + v1322.z * w1322.z + v1322.w * w1322.w;
                    if (e1323 < 0 && (e1323 = -e1323, a1323 = -a1323, b1323 = -b1323, c1323 = -c1323, d1323 = -d1323), 1 - e1323 > 1e-6) {
                        const h1323 = Math.acos(e1323), i1323 = Math.sin(h1323);
                        y1322 = Math.sin((1 - x1322) * h1323) / i1323, z1322 = Math.sin(x1322 * h1323) / i1323;
                    }
                    else
                        y1322 = 1 - x1322, z1322 = x1322;
                    return u1322.x = y1322 * v1322.x + z1322 * a1323, u1322.y = y1322 * v1322.y + z1322 * b1323, u1322.z = y1322 * v1322.z + z1322 * c1323, u1322.w = y1322 * v1322.w + z1322 * d1323, u1322;
                }
                static sqlerp(o1322, p1322, q1322, r1322, s1322, t1322) {
                    return g147.slerp(h147, p1322, s1322, t1322), g147.slerp(i147, q1322, r1322, t1322), g147.slerp(o1322, h147, i147, 2 * t1322 * (1 - t1322)), o1322;
                }
                static invert(k1322, l1322) {
                    const m1322 = l1322.x * l1322.x + l1322.y * l1322.y + l1322.z * l1322.z + l1322.w * l1322.w, n1322 = m1322 ? 1 / m1322 : 0;
                    return k1322.x = -l1322.x * n1322, k1322.y = -l1322.y * n1322, k1322.z = -l1322.z * n1322, k1322.w = l1322.w * n1322, k1322;
                }
                static conjugate(i1322, j1322) {
                    return i1322.x = -j1322.x, i1322.y = -j1322.y, i1322.z = -j1322.z, i1322.w = j1322.w, i1322;
                }
                static len(h1322) {
                    return Math.sqrt(h1322.x * h1322.x + h1322.y * h1322.y + h1322.z * h1322.z + h1322.w * h1322.w);
                }
                static lengthSqr(g1322) {
                    return g1322.x * g1322.x + g1322.y * g1322.y + g1322.z * g1322.z + g1322.w * g1322.w;
                }
                static normalize(d1322, e1322) {
                    let f1322 = e1322.x * e1322.x + e1322.y * e1322.y + e1322.z * e1322.z + e1322.w * e1322.w;
                    return f1322 > 0 ? (f1322 = 1 / Math.sqrt(f1322), d1322.x = e1322.x * f1322, d1322.y = e1322.y * f1322, d1322.z = e1322.z * f1322, d1322.w = e1322.w * f1322) : (d1322.x = 0, d1322.y = 0, d1322.z = 0, d1322.w = 0), d1322;
                }
                static fromAxes(z1321, a1322, b1322, c1322) {
                    return c147.set(k147, a1322.x, a1322.y, a1322.z, b1322.x, b1322.y, b1322.z, c1322.x, c1322.y, c1322.z), g147.normalize(z1321, g147.fromMat3(z1321, k147));
                }
                static fromViewUp(w1321, x1321, y1321) {
                    return c147.fromViewUp(k147, x1321, y1321), g147.normalize(w1321, g147.fromMat3(w1321, k147));
                }
                static fromAxisAngle(s1321, t1321, u1321) {
                    u1321 *= .5;
                    const v1321 = Math.sin(u1321);
                    return s1321.x = v1321 * t1321.x, s1321.y = v1321 * t1321.y, s1321.z = v1321 * t1321.z, s1321.w = Math.cos(u1321), s1321;
                }
                static fromMat3(a1321, b1321) {
                    const { m00: c1321, m01: d1321, m02: e1321, m03: f1321, m04: g1321, m05: h1321, m06: i1321, m07: j1321, m08: k1321 } = b1321, l1321 = c1321 - g1321 - k1321, m1321 = g1321 - c1321 - k1321, n1321 = k1321 - c1321 - g1321;
                    let o1321 = 0, p1321 = c1321 + g1321 + k1321;
                    l1321 > p1321 && (p1321 = l1321, o1321 = 1), m1321 > p1321 && (p1321 = m1321, o1321 = 2), n1321 > p1321 && (p1321 = n1321, o1321 = 3);
                    const q1321 = .5 * Math.sqrt(p1321 + 1), r1321 = .25 / q1321;
                    switch (o1321) {
                        case 0:
                            a1321.w = q1321, a1321.x = (h1321 - j1321) * r1321, a1321.y = (i1321 - e1321) * r1321, a1321.z = (d1321 - f1321) * r1321;
                            break;
                        case 1:
                            a1321.w = (h1321 - j1321) * r1321, a1321.x = q1321, a1321.y = (d1321 + f1321) * r1321, a1321.z = (i1321 + e1321) * r1321;
                            break;
                        case 2:
                            a1321.w = (i1321 - e1321) * r1321, a1321.x = (d1321 + f1321) * r1321, a1321.y = q1321, a1321.z = (h1321 + j1321) * r1321;
                            break;
                        case 3:
                            a1321.w = (d1321 - f1321) * r1321, a1321.x = (i1321 + e1321) * r1321, a1321.y = (h1321 + j1321) * r1321, a1321.z = q1321;
                            break;
                        default:
                            a1321.w = 1, a1321.x = 0, a1321.y = 0, a1321.z = 0;
                    }
                    return a1321;
                }
                static fromEuler(q1320, r1320, s1320, t1320) {
                    r1320 *= l147, s1320 *= l147, t1320 *= l147;
                    const u1320 = Math.sin(r1320), v1320 = Math.cos(r1320), w1320 = Math.sin(s1320), x1320 = Math.cos(s1320), y1320 = Math.sin(t1320), z1320 = Math.cos(t1320);
                    return q1320.x = u1320 * x1320 * z1320 + v1320 * w1320 * y1320, q1320.y = v1320 * w1320 * z1320 + u1320 * x1320 * y1320, q1320.z = v1320 * x1320 * y1320 - u1320 * w1320 * z1320, q1320.w = v1320 * x1320 * z1320 - u1320 * w1320 * y1320, q1320;
                }
                static fromAngleZ(o1320, p1320) {
                    return p1320 *= l147, o1320.x = o1320.y = 0, o1320.z = Math.sin(p1320), o1320.w = Math.cos(p1320), o1320;
                }
                static toAxisX(k1320, l1320) {
                    const m1320 = 2 * l1320.y, n1320 = 2 * l1320.z;
                    return k1320.x = 1 - m1320 * l1320.y - n1320 * l1320.z, k1320.y = m1320 * l1320.x + n1320 * l1320.w, k1320.z = n1320 * l1320.x - m1320 * l1320.w, k1320;
                }
                static toAxisY(f1320, g1320) {
                    const h1320 = 2 * g1320.x, i1320 = 2 * g1320.y, j1320 = 2 * g1320.z;
                    return f1320.x = i1320 * g1320.x - j1320 * g1320.w, f1320.y = 1 - h1320 * g1320.x - j1320 * g1320.z, f1320.z = j1320 * g1320.y + h1320 * g1320.w, f1320;
                }
                static toAxisZ(a1320, b1320) {
                    const c1320 = 2 * b1320.x, d1320 = 2 * b1320.y, e1320 = 2 * b1320.z;
                    return a1320.x = e1320 * b1320.x + d1320 * b1320.w, a1320.y = e1320 * b1320.y - c1320 * b1320.w, a1320.z = 1 - c1320 * b1320.x - d1320 * b1320.y, a1320;
                }
                static toEuler(m1319, n1319, o1319) {
                    const { x: p1319, y: q1319, z: r1319, w: s1319 } = n1319;
                    let t1319 = 0, u1319 = 0, v1319 = 0;
                    const w1319 = p1319 * q1319 + r1319 * s1319;
                    if (w1319 > .499999)
                        t1319 = 0, u1319 = b129(2 * Math.atan2(p1319, s1319)), v1319 = 90;
                    else if (w1319 < -.499999)
                        t1319 = 0, u1319 = -b129(2 * Math.atan2(p1319, s1319)), v1319 = -90;
                    else {
                        const x1319 = p1319 * p1319, y1319 = q1319 * q1319, z1319 = r1319 * r1319;
                        t1319 = b129(Math.atan2(2 * p1319 * s1319 - 2 * q1319 * r1319, 1 - 2 * x1319 - 2 * z1319)), u1319 = b129(Math.atan2(2 * q1319 * s1319 - 2 * p1319 * r1319, 1 - 2 * y1319 - 2 * z1319)), v1319 = b129(Math.asin(2 * w1319)), o1319 && (t1319 = -180 * Math.sign(t1319 + 1e-6) + t1319, u1319 = -180 * Math.sign(u1319 + 1e-6) + u1319, v1319 = 180 * Math.sign(v1319 + 1e-6) - v1319);
                    }
                    return m1319.x = t1319, m1319.y = u1319, m1319.z = v1319, m1319;
                }
                static toEulerInYXZOrder(k1319, l1319) {
                    c147.fromQuat(k147, l1319), c147.toEuler(k147, k1319), k1319.x = b129(k1319.x), k1319.y = b129(k1319.y), k1319.z = b129(k1319.z);
                }
                static toArray(h1319, i1319, j1319 = 0) {
                    return h1319[j1319 + 0] = i1319.x, h1319[j1319 + 1] = i1319.y, h1319[j1319 + 2] = i1319.z, h1319[j1319 + 3] = i1319.w, h1319;
                }
                static fromArray(e1319, f1319, g1319 = 0) {
                    return e1319.x = f1319[g1319 + 0], e1319.y = f1319[g1319 + 1], e1319.z = f1319[g1319 + 2], e1319.w = f1319[g1319 + 3], e1319;
                }
                static strictEquals(b1319, c1319) {
                    return b1319.x === c1319.x && b1319.y === c1319.y && b1319.z === c1319.z && b1319.w === c1319.w;
                }
                static equals(w1318, x1318, y1318 = q146) {
                    return Math.abs(w1318.x - x1318.x) <= y1318 * Math.max(1, Math.abs(w1318.x), Math.abs(x1318.x)) && Math.abs(w1318.y - x1318.y) <= y1318 * Math.max(1, Math.abs(w1318.y), Math.abs(x1318.y)) && Math.abs(w1318.z - x1318.z) <= y1318 * Math.max(1, Math.abs(w1318.z), Math.abs(x1318.z)) && Math.abs(w1318.w - x1318.w) <= y1318 * Math.max(1, Math.abs(w1318.w), Math.abs(x1318.w));
                }
                static angle(t1318, u1318) {
                    const v1318 = Math.min(Math.abs(g147.dot(t1318, u1318)), 1);
                    return 2 * Math.acos(v1318);
                }
                static rotateTowards(n1318, o1318, p1318, q1318) {
                    const r1318 = g147.angle(o1318, p1318);
                    if (0 === r1318)
                        return n1318.x = p1318.x, n1318.y = p1318.y, n1318.z = p1318.z, n1318.w = p1318.w, n1318;
                    const s1318 = Math.min(q1318 / b129(r1318), 1);
                    return g147.slerp(n1318, o1318, p1318, s1318);
                }
                constructor(j1318, k1318, l1318, m1318) {
                    super(), "object" == typeof j1318 ? (this.x = j1318.x, this.y = j1318.y, this.z = j1318.z, this.w = j1318.w) : (this.x = j1318 || 0, this.y = k1318 || 0, this.z = l1318 || 0, this.w = null != m1318 ? m1318 : 1);
                }
                clone() {
                    return new g147(this.x, this.y, this.z, this.w);
                }
                set(e1326, f1326, g1326, h1326) {
                    return "object" == typeof e1326 ? (this.x = e1326.x, this.y = e1326.y, this.z = e1326.z, this.w = e1326.w) : (this.x = e1326 || 0, this.y = f1326 || 0, this.z = g1326 || 0, this.w = null != h1326 ? h1326 : 1), this;
                }
                equals(z1318, a1319 = q146) {
                    return Math.abs(this.x - z1318.x) <= a1319 * Math.max(1, Math.abs(this.x), Math.abs(z1318.x)) && Math.abs(this.y - z1318.y) <= a1319 * Math.max(1, Math.abs(this.y), Math.abs(z1318.y)) && Math.abs(this.z - z1318.z) <= a1319 * Math.max(1, Math.abs(this.z), Math.abs(z1318.z)) && Math.abs(this.w - z1318.w) <= a1319 * Math.max(1, Math.abs(this.w), Math.abs(z1318.w));
                }
                strictEquals(d1319) {
                    return d1319 && this.x === d1319.x && this.y === d1319.y && this.z === d1319.z && this.w === d1319.w;
                }
                getEulerAngles(i1318) {
                    return g147.toEuler(i1318, this);
                }
                lerp(n1323, o1323) {
                    return this.x += o1323 * (n1323.x - this.x), this.y += o1323 * (n1323.y - this.y), this.z += o1323 * (n1323.z - this.z), this.w += o1323 * (n1323.w - this.w), this;
                }
                slerp(f1323, g1323) {
                    return g147.slerp(this, this, f1323, g1323);
                }
                length() {
                    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
                }
                lengthSqr() {
                    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
                }
            }
            g125("Quat", g147), f147 = g147, g147.IDENTITY = Object.freeze(new f147());
            const h147 = new g147(), i147 = new g147(), j147 = new w146(), k147 = new c147(), l147 = .5 * Math.PI / 180;
            function v129(e1318 = 0, f1318 = 0, g1318 = 0, h1318 = 1) {
                return new g147(e1318, f1318, g1318, h1318);
            }
            var m147;
            s128.fastDefine("cc.Quat", g147, {
                x: 0,
                y: 0,
                z: 0,
                w: 1
            }), s143.Quat = g147, s143.quat = v129;
            const n147 = g125("preTransforms", Object.freeze([Object.freeze([1, 0, 0, 1]), Object.freeze([0, 1, -1, 0]), Object.freeze([-1, 0, 0, -1]), Object.freeze([0, -1, 1, 0])]));
            class o147 extends p145 {
                static clone(d1318) {
                    return new o147(d1318.m00, d1318.m01, d1318.m02, d1318.m03, d1318.m04, d1318.m05, d1318.m06, d1318.m07, d1318.m08, d1318.m09, d1318.m10, d1318.m11, d1318.m12, d1318.m13, d1318.m14, d1318.m15);
                }
                static copy(b1318, c1318) {
                    return b1318.m00 = c1318.m00, b1318.m01 = c1318.m01, b1318.m02 = c1318.m02, b1318.m03 = c1318.m03, b1318.m04 = c1318.m04, b1318.m05 = c1318.m05, b1318.m06 = c1318.m06, b1318.m07 = c1318.m07, b1318.m08 = c1318.m08, b1318.m09 = c1318.m09, b1318.m10 = c1318.m10, b1318.m11 = c1318.m11, b1318.m12 = c1318.m12, b1318.m13 = c1318.m13, b1318.m14 = c1318.m14, b1318.m15 = c1318.m15, b1318;
                }
                static set(u1316, v1316, w1316, x1316, y1316, z1316, a1317, b1317, c1317, d1317, e1317, f1317, g1317, h1317, i1317, j1317, k1317) {
                    return u1316.m00 = v1316, u1316.m01 = w1316, u1316.m02 = x1316, u1316.m03 = y1316, u1316.m04 = z1316, u1316.m05 = a1317, u1316.m06 = b1317, u1316.m07 = c1317, u1316.m08 = d1317, u1316.m09 = e1317, u1316.m10 = f1317, u1316.m11 = g1317, u1316.m12 = h1317, u1316.m13 = i1317, u1316.m14 = j1317, u1316.m15 = k1317, u1316;
                }
                static identity(t1316) {
                    return t1316.m00 = 1, t1316.m01 = 0, t1316.m02 = 0, t1316.m03 = 0, t1316.m04 = 0, t1316.m05 = 1, t1316.m06 = 0, t1316.m07 = 0, t1316.m08 = 0, t1316.m09 = 0, t1316.m10 = 1, t1316.m11 = 0, t1316.m12 = 0, t1316.m13 = 0, t1316.m14 = 0, t1316.m15 = 1, t1316;
                }
                static transpose(f1316, g1316) {
                    if (f1316 === g1316) {
                        const n1316 = g1316.m01, o1316 = g1316.m02, p1316 = g1316.m03, q1316 = g1316.m06, r1316 = g1316.m07, s1316 = g1316.m11;
                        f1316.m01 = g1316.m04, f1316.m02 = g1316.m08, f1316.m03 = g1316.m12, f1316.m04 = n1316, f1316.m06 = g1316.m09, f1316.m07 = g1316.m13, f1316.m08 = o1316, f1316.m09 = q1316, f1316.m11 = g1316.m14, f1316.m12 = p1316, f1316.m13 = r1316, f1316.m14 = s1316;
                    }
                    else
                        f1316.m00 = g1316.m00, f1316.m01 = g1316.m04, f1316.m02 = g1316.m08, f1316.m03 = g1316.m12, f1316.m04 = g1316.m01, f1316.m05 = g1316.m05, f1316.m06 = g1316.m09, f1316.m07 = g1316.m13, f1316.m08 = g1316.m02, f1316.m09 = g1316.m06, f1316.m10 = g1316.m10, f1316.m11 = g1316.m14, f1316.m12 = g1316.m03, f1316.m13 = g1316.m07, f1316.m14 = g1316.m11, f1316.m15 = g1316.m15;
                    return f1316;
                }
                static invert(x1313, y1313) {
                    const z1313 = y1313.m00, a1314 = y1313.m01, b1314 = y1313.m02, c1314 = y1313.m03, d1314 = y1313.m04, e1314 = y1313.m05, f1314 = y1313.m06, g1314 = y1313.m07, h1314 = y1313.m08, i1314 = y1313.m09, j1314 = y1313.m10, k1314 = y1313.m11, l1314 = y1313.m12, m1314 = y1313.m13, n1314 = y1313.m14, o1314 = y1313.m15, p1314 = z1313 * e1314 - a1314 * d1314, q1314 = z1313 * f1314 - b1314 * d1314, r1314 = z1313 * g1314 - c1314 * d1314, s1314 = a1314 * f1314 - b1314 * e1314, t1314 = a1314 * g1314 - c1314 * e1314, u1314 = b1314 * g1314 - c1314 * f1314, v1314 = h1314 * m1314 - i1314 * l1314, w1314 = h1314 * n1314 - j1314 * l1314, x1314 = h1314 * o1314 - k1314 * l1314, y1314 = i1314 * n1314 - j1314 * m1314, z1314 = i1314 * o1314 - k1314 * m1314, a1315 = j1314 * o1314 - k1314 * n1314;
                    let b1315 = p1314 * a1315 - q1314 * z1314 + r1314 * y1314 + s1314 * x1314 - t1314 * w1314 + u1314 * v1314;
                    return 0 === b1315 ? (x1313.m00 = 0, x1313.m01 = 0, x1313.m02 = 0, x1313.m03 = 0, x1313.m04 = 0, x1313.m05 = 0, x1313.m06 = 0, x1313.m07 = 0, x1313.m08 = 0, x1313.m09 = 0, x1313.m10 = 0, x1313.m11 = 0, x1313.m12 = 0, x1313.m13 = 0, x1313.m14 = 0, x1313.m15 = 0, x1313) : (b1315 = 1 / b1315, x1313.m00 = (e1314 * a1315 - f1314 * z1314 + g1314 * y1314) * b1315, x1313.m01 = (b1314 * z1314 - a1314 * a1315 - c1314 * y1314) * b1315, x1313.m02 = (m1314 * u1314 - n1314 * t1314 + o1314 * s1314) * b1315, x1313.m03 = (j1314 * t1314 - i1314 * u1314 - k1314 * s1314) * b1315, x1313.m04 = (f1314 * x1314 - d1314 * a1315 - g1314 * w1314) * b1315, x1313.m05 = (z1313 * a1315 - b1314 * x1314 + c1314 * w1314) * b1315, x1313.m06 = (n1314 * r1314 - l1314 * u1314 - o1314 * q1314) * b1315, x1313.m07 = (h1314 * u1314 - j1314 * r1314 + k1314 * q1314) * b1315, x1313.m08 = (d1314 * z1314 - e1314 * x1314 + g1314 * v1314) * b1315, x1313.m09 = (a1314 * x1314 - z1313 * z1314 - c1314 * v1314) * b1315, x1313.m10 = (l1314 * t1314 - m1314 * r1314 + o1314 * p1314) * b1315, x1313.m11 = (i1314 * r1314 - h1314 * t1314 - k1314 * p1314) * b1315, x1313.m12 = (e1314 * w1314 - d1314 * y1314 - f1314 * v1314) * b1315, x1313.m13 = (z1313 * y1314 - a1314 * w1314 + b1314 * v1314) * b1315, x1313.m14 = (m1314 * q1314 - l1314 * s1314 - n1314 * p1314) * b1315, x1313.m15 = (h1314 * s1314 - i1314 * q1314 + j1314 * p1314) * b1315, x1313);
                }
                static determinant(q1312) {
                    const r1312 = q1312.m00, s1312 = q1312.m01, t1312 = q1312.m02, u1312 = q1312.m03, v1312 = q1312.m04, w1312 = q1312.m05, x1312 = q1312.m06, y1312 = q1312.m07, z1312 = q1312.m08, a1313 = q1312.m09, b1313 = q1312.m10, c1313 = q1312.m11, d1313 = q1312.m12, e1313 = q1312.m13, f1313 = q1312.m14, g1313 = q1312.m15;
                    return (r1312 * w1312 - s1312 * v1312) * (b1313 * g1313 - c1313 * f1313) - (r1312 * x1312 - t1312 * v1312) * (a1313 * g1313 - c1313 * e1313) + (r1312 * y1312 - u1312 * v1312) * (a1313 * f1313 - b1313 * e1313) + (s1312 * x1312 - t1312 * w1312) * (z1312 * g1313 - c1313 * d1313) - (s1312 * y1312 - u1312 * w1312) * (z1312 * f1313 - b1313 * d1313) + (t1312 * y1312 - u1312 * x1312) * (z1312 * e1313 - a1313 * d1313);
                }
                static multiply(y1310, z1310, a1311) {
                    const b1311 = z1310.m00, c1311 = z1310.m01, d1311 = z1310.m02, e1311 = z1310.m03, f1311 = z1310.m04, g1311 = z1310.m05, h1311 = z1310.m06, i1311 = z1310.m07, j1311 = z1310.m08, k1311 = z1310.m09, l1311 = z1310.m10, m1311 = z1310.m11, n1311 = z1310.m12, o1311 = z1310.m13, p1311 = z1310.m14, q1311 = z1310.m15;
                    let r1311 = a1311.m00, s1311 = a1311.m01, t1311 = a1311.m02, u1311 = a1311.m03;
                    return y1310.m00 = r1311 * b1311 + s1311 * f1311 + t1311 * j1311 + u1311 * n1311, y1310.m01 = r1311 * c1311 + s1311 * g1311 + t1311 * k1311 + u1311 * o1311, y1310.m02 = r1311 * d1311 + s1311 * h1311 + t1311 * l1311 + u1311 * p1311, y1310.m03 = r1311 * e1311 + s1311 * i1311 + t1311 * m1311 + u1311 * q1311, r1311 = a1311.m04, s1311 = a1311.m05, t1311 = a1311.m06, u1311 = a1311.m07, y1310.m04 = r1311 * b1311 + s1311 * f1311 + t1311 * j1311 + u1311 * n1311, y1310.m05 = r1311 * c1311 + s1311 * g1311 + t1311 * k1311 + u1311 * o1311, y1310.m06 = r1311 * d1311 + s1311 * h1311 + t1311 * l1311 + u1311 * p1311, y1310.m07 = r1311 * e1311 + s1311 * i1311 + t1311 * m1311 + u1311 * q1311, r1311 = a1311.m08, s1311 = a1311.m09, t1311 = a1311.m10, u1311 = a1311.m11, y1310.m08 = r1311 * b1311 + s1311 * f1311 + t1311 * j1311 + u1311 * n1311, y1310.m09 = r1311 * c1311 + s1311 * g1311 + t1311 * k1311 + u1311 * o1311, y1310.m10 = r1311 * d1311 + s1311 * h1311 + t1311 * l1311 + u1311 * p1311, y1310.m11 = r1311 * e1311 + s1311 * i1311 + t1311 * m1311 + u1311 * q1311, r1311 = a1311.m12, s1311 = a1311.m13, t1311 = a1311.m14, u1311 = a1311.m15, y1310.m12 = r1311 * b1311 + s1311 * f1311 + t1311 * j1311 + u1311 * n1311, y1310.m13 = r1311 * c1311 + s1311 * g1311 + t1311 * k1311 + u1311 * o1311, y1310.m14 = r1311 * d1311 + s1311 * h1311 + t1311 * l1311 + u1311 * p1311, y1310.m15 = r1311 * e1311 + s1311 * i1311 + t1311 * m1311 + u1311 * q1311, y1310;
                }
                static transform(q1309, r1309, s1309) {
                    const t1309 = s1309.x, u1309 = s1309.y, v1309 = s1309.z;
                    if (r1309 === q1309)
                        q1309.m12 = r1309.m00 * t1309 + r1309.m04 * u1309 + r1309.m08 * v1309 + r1309.m12, q1309.m13 = r1309.m01 * t1309 + r1309.m05 * u1309 + r1309.m09 * v1309 + r1309.m13, q1309.m14 = r1309.m02 * t1309 + r1309.m06 * u1309 + r1309.m10 * v1309 + r1309.m14, q1309.m15 = r1309.m03 * t1309 + r1309.m07 * u1309 + r1309.m11 * v1309 + r1309.m15;
                    else {
                        const m1310 = r1309.m00, n1310 = r1309.m01, o1310 = r1309.m02, p1310 = r1309.m03, q1310 = r1309.m04, r1310 = r1309.m05, s1310 = r1309.m06, t1310 = r1309.m07, u1310 = r1309.m08, v1310 = r1309.m09, w1310 = r1309.m10, x1310 = r1309.m11;
                        q1309.m00 = m1310, q1309.m01 = n1310, q1309.m02 = o1310, q1309.m03 = p1310, q1309.m04 = q1310, q1309.m05 = r1310, q1309.m06 = s1310, q1309.m07 = t1310, q1309.m08 = u1310, q1309.m09 = v1310, q1309.m10 = w1310, q1309.m11 = x1310, q1309.m12 = m1310 * t1309 + q1310 * u1309 + u1310 * v1309 + r1309.m12, q1309.m13 = n1310 * t1309 + r1310 * u1309 + v1310 * v1309 + r1309.m13, q1309.m14 = o1310 * t1309 + s1310 * u1309 + w1310 * v1309 + r1309.m14, q1309.m15 = p1310 * t1309 + t1310 * u1309 + x1310 * v1309 + r1309.m15;
                    }
                    return q1309;
                }
                static translate(m1309, n1309, o1309) {
                    return n1309 === m1309 ? (m1309.m12 += o1309.x, m1309.m13 += o1309.y, m1309.m14 += o1309.z) : (m1309.m00 = n1309.m00, m1309.m01 = n1309.m01, m1309.m02 = n1309.m02, m1309.m03 = n1309.m03, m1309.m04 = n1309.m04, m1309.m05 = n1309.m05, m1309.m06 = n1309.m06, m1309.m07 = n1309.m07, m1309.m08 = n1309.m08, m1309.m09 = n1309.m09, m1309.m10 = n1309.m10, m1309.m11 = n1309.m11, m1309.m12 = n1309.m12 + o1309.x, m1309.m13 = n1309.m13 + o1309.y, m1309.m14 = n1309.m14 + o1309.z, m1309.m15 = n1309.m15), m1309;
                }
                static scale(c1309, d1309, e1309) {
                    const f1309 = e1309.x, g1309 = e1309.y, h1309 = e1309.z;
                    return c1309.m00 = d1309.m00 * f1309, c1309.m01 = d1309.m01 * f1309, c1309.m02 = d1309.m02 * f1309, c1309.m03 = d1309.m03 * f1309, c1309.m04 = d1309.m04 * g1309, c1309.m05 = d1309.m05 * g1309, c1309.m06 = d1309.m06 * g1309, c1309.m07 = d1309.m07 * g1309, c1309.m08 = d1309.m08 * h1309, c1309.m09 = d1309.m09 * h1309, c1309.m10 = d1309.m10 * h1309, c1309.m11 = d1309.m11 * h1309, c1309.m12 = d1309.m12, c1309.m13 = d1309.m13, c1309.m14 = d1309.m14, c1309.m15 = d1309.m15, c1309;
                }
                static rotate(s1306, t1306, u1306, v1306) {
                    let w1306 = v1306.x, x1306 = v1306.y, y1306 = v1306.z, z1306 = Math.sqrt(w1306 * w1306 + x1306 * x1306 + y1306 * y1306);
                    if (Math.abs(z1306) < q146)
                        return null;
                    z1306 = 1 / z1306, w1306 *= z1306, x1306 *= z1306, y1306 *= z1306;
                    const a1307 = Math.sin(u1306), b1307 = Math.cos(u1306), c1307 = 1 - b1307, d1307 = t1306.m00, e1307 = t1306.m01, f1307 = t1306.m02, g1307 = t1306.m03, h1307 = t1306.m04, i1307 = t1306.m05, j1307 = t1306.m06, k1307 = t1306.m07, l1307 = t1306.m08, m1307 = t1306.m09, n1307 = t1306.m10, o1307 = t1306.m11, p1307 = w1306 * w1306 * c1307 + b1307, q1307 = x1306 * w1306 * c1307 + y1306 * a1307, r1307 = y1306 * w1306 * c1307 - x1306 * a1307, s1307 = w1306 * x1306 * c1307 - y1306 * a1307, t1307 = x1306 * x1306 * c1307 + b1307, u1307 = y1306 * x1306 * c1307 + w1306 * a1307, v1307 = w1306 * y1306 * c1307 + x1306 * a1307, w1307 = x1306 * y1306 * c1307 - w1306 * a1307, x1307 = y1306 * y1306 * c1307 + b1307;
                    return s1306.m00 = d1307 * p1307 + h1307 * q1307 + l1307 * r1307, s1306.m01 = e1307 * p1307 + i1307 * q1307 + m1307 * r1307, s1306.m02 = f1307 * p1307 + j1307 * q1307 + n1307 * r1307, s1306.m03 = g1307 * p1307 + k1307 * q1307 + o1307 * r1307, s1306.m04 = d1307 * s1307 + h1307 * t1307 + l1307 * u1307, s1306.m05 = e1307 * s1307 + i1307 * t1307 + m1307 * u1307, s1306.m06 = f1307 * s1307 + j1307 * t1307 + n1307 * u1307, s1306.m07 = g1307 * s1307 + k1307 * t1307 + o1307 * u1307, s1306.m08 = d1307 * v1307 + h1307 * w1307 + l1307 * x1307, s1306.m09 = e1307 * v1307 + i1307 * w1307 + m1307 * x1307, s1306.m10 = f1307 * v1307 + j1307 * w1307 + n1307 * x1307, s1306.m11 = g1307 * v1307 + k1307 * w1307 + o1307 * x1307, t1306 !== s1306 && (s1306.m12 = t1306.m12, s1306.m13 = t1306.m13, s1306.m14 = t1306.m14, s1306.m15 = t1306.m15), s1306;
                }
                static rotateX(f1306, g1306, h1306) {
                    const i1306 = Math.sin(h1306), j1306 = Math.cos(h1306), k1306 = g1306.m04, l1306 = g1306.m05, m1306 = g1306.m06, n1306 = g1306.m07, o1306 = g1306.m08, p1306 = g1306.m09, q1306 = g1306.m10, r1306 = g1306.m11;
                    return g1306 !== f1306 && (f1306.m00 = g1306.m00, f1306.m01 = g1306.m01, f1306.m02 = g1306.m02, f1306.m03 = g1306.m03, f1306.m12 = g1306.m12, f1306.m13 = g1306.m13, f1306.m14 = g1306.m14, f1306.m15 = g1306.m15), f1306.m04 = k1306 * j1306 + o1306 * i1306, f1306.m05 = l1306 * j1306 + p1306 * i1306, f1306.m06 = m1306 * j1306 + q1306 * i1306, f1306.m07 = n1306 * j1306 + r1306 * i1306, f1306.m08 = o1306 * j1306 - k1306 * i1306, f1306.m09 = p1306 * j1306 - l1306 * i1306, f1306.m10 = q1306 * j1306 - m1306 * i1306, f1306.m11 = r1306 * j1306 - n1306 * i1306, f1306;
                }
                static rotateY(s1305, t1305, u1305) {
                    const v1305 = Math.sin(u1305), w1305 = Math.cos(u1305), x1305 = t1305.m00, y1305 = t1305.m01, z1305 = t1305.m02, a1306 = t1305.m03, b1306 = t1305.m08, c1306 = t1305.m09, d1306 = t1305.m10, e1306 = t1305.m11;
                    return t1305 !== s1305 && (s1305.m04 = t1305.m04, s1305.m05 = t1305.m05, s1305.m06 = t1305.m06, s1305.m07 = t1305.m07, s1305.m12 = t1305.m12, s1305.m13 = t1305.m13, s1305.m14 = t1305.m14, s1305.m15 = t1305.m15), s1305.m00 = x1305 * w1305 - b1306 * v1305, s1305.m01 = y1305 * w1305 - c1306 * v1305, s1305.m02 = z1305 * w1305 - d1306 * v1305, s1305.m03 = a1306 * w1305 - e1306 * v1305, s1305.m08 = x1305 * v1305 + b1306 * w1305, s1305.m09 = y1305 * v1305 + c1306 * w1305, s1305.m10 = z1305 * v1305 + d1306 * w1305, s1305.m11 = a1306 * v1305 + e1306 * w1305, s1305;
                }
                static rotateZ(f1305, g1305, h1305) {
                    const i1305 = Math.sin(h1305), j1305 = Math.cos(h1305), k1305 = g1305.m00, l1305 = g1305.m01, m1305 = g1305.m02, n1305 = g1305.m03, o1305 = g1305.m04, p1305 = g1305.m05, q1305 = g1305.m06, r1305 = g1305.m07;
                    return g1305 !== f1305 && (f1305.m08 = g1305.m08, f1305.m09 = g1305.m09, f1305.m10 = g1305.m10, f1305.m11 = g1305.m11, f1305.m12 = g1305.m12, f1305.m13 = g1305.m13, f1305.m14 = g1305.m14, f1305.m15 = g1305.m15), f1305.m00 = k1305 * j1305 + o1305 * i1305, f1305.m01 = l1305 * j1305 + p1305 * i1305, f1305.m02 = m1305 * j1305 + q1305 * i1305, f1305.m03 = n1305 * j1305 + r1305 * i1305, f1305.m04 = o1305 * j1305 - k1305 * i1305, f1305.m05 = p1305 * j1305 - l1305 * i1305, f1305.m06 = q1305 * j1305 - m1305 * i1305, f1305.m07 = r1305 * j1305 - n1305 * i1305, f1305;
                }
                static fromTranslation(d1305, e1305) {
                    return d1305.m00 = 1, d1305.m01 = 0, d1305.m02 = 0, d1305.m03 = 0, d1305.m04 = 0, d1305.m05 = 1, d1305.m06 = 0, d1305.m07 = 0, d1305.m08 = 0, d1305.m09 = 0, d1305.m10 = 1, d1305.m11 = 0, d1305.m12 = e1305.x, d1305.m13 = e1305.y, d1305.m14 = e1305.z, d1305.m15 = 1, d1305;
                }
                static fromScaling(b1305, c1305) {
                    return b1305.m00 = c1305.x, b1305.m01 = 0, b1305.m02 = 0, b1305.m03 = 0, b1305.m04 = 0, b1305.m05 = c1305.y, b1305.m06 = 0, b1305.m07 = 0, b1305.m08 = 0, b1305.m09 = 0, b1305.m10 = c1305.z, b1305.m11 = 0, b1305.m12 = 0, b1305.m13 = 0, b1305.m14 = 0, b1305.m15 = 1, b1305;
                }
                static fromRotation(r1304, s1304, t1304) {
                    let u1304 = t1304.x, v1304 = t1304.y, w1304 = t1304.z, x1304 = Math.sqrt(u1304 * u1304 + v1304 * v1304 + w1304 * w1304);
                    if (Math.abs(x1304) < q146)
                        return null;
                    x1304 = 1 / x1304, u1304 *= x1304, v1304 *= x1304, w1304 *= x1304;
                    const y1304 = Math.sin(s1304), z1304 = Math.cos(s1304), a1305 = 1 - z1304;
                    return r1304.m00 = u1304 * u1304 * a1305 + z1304, r1304.m01 = v1304 * u1304 * a1305 + w1304 * y1304, r1304.m02 = w1304 * u1304 * a1305 - v1304 * y1304, r1304.m03 = 0, r1304.m04 = u1304 * v1304 * a1305 - w1304 * y1304, r1304.m05 = v1304 * v1304 * a1305 + z1304, r1304.m06 = w1304 * v1304 * a1305 + u1304 * y1304, r1304.m07 = 0, r1304.m08 = u1304 * w1304 * a1305 + v1304 * y1304, r1304.m09 = v1304 * w1304 * a1305 - u1304 * y1304, r1304.m10 = w1304 * w1304 * a1305 + z1304, r1304.m11 = 0, r1304.m12 = 0, r1304.m13 = 0, r1304.m14 = 0, r1304.m15 = 1, r1304;
                }
                static fromXRotation(n1304, o1304) {
                    const p1304 = Math.sin(o1304), q1304 = Math.cos(o1304);
                    return n1304.m00 = 1, n1304.m01 = 0, n1304.m02 = 0, n1304.m03 = 0, n1304.m04 = 0, n1304.m05 = q1304, n1304.m06 = p1304, n1304.m07 = 0, n1304.m08 = 0, n1304.m09 = -p1304, n1304.m10 = q1304, n1304.m11 = 0, n1304.m12 = 0, n1304.m13 = 0, n1304.m14 = 0, n1304.m15 = 1, n1304;
                }
                static fromYRotation(j1304, k1304) {
                    const l1304 = Math.sin(k1304), m1304 = Math.cos(k1304);
                    return j1304.m00 = m1304, j1304.m01 = 0, j1304.m02 = -l1304, j1304.m03 = 0, j1304.m04 = 0, j1304.m05 = 1, j1304.m06 = 0, j1304.m07 = 0, j1304.m08 = l1304, j1304.m09 = 0, j1304.m10 = m1304, j1304.m11 = 0, j1304.m12 = 0, j1304.m13 = 0, j1304.m14 = 0, j1304.m15 = 1, j1304;
                }
                static fromZRotation(f1304, g1304) {
                    const h1304 = Math.sin(g1304), i1304 = Math.cos(g1304);
                    return f1304.m00 = i1304, f1304.m01 = h1304, f1304.m02 = 0, f1304.m03 = 0, f1304.m04 = -h1304, f1304.m05 = i1304, f1304.m06 = 0, f1304.m07 = 0, f1304.m08 = 0, f1304.m09 = 0, f1304.m10 = 1, f1304.m11 = 0, f1304.m12 = 0, f1304.m13 = 0, f1304.m14 = 0, f1304.m15 = 1, f1304;
                }
                static fromRT(m1303, n1303, o1303) {
                    const p1303 = n1303.x, q1303 = n1303.y, r1303 = n1303.z, s1303 = n1303.w, t1303 = p1303 + p1303, u1303 = q1303 + q1303, v1303 = r1303 + r1303, w1303 = p1303 * t1303, x1303 = p1303 * u1303, y1303 = p1303 * v1303, z1303 = q1303 * u1303, a1304 = q1303 * v1303, b1304 = r1303 * v1303, c1304 = s1303 * t1303, d1304 = s1303 * u1303, e1304 = s1303 * v1303;
                    return m1303.m00 = 1 - (z1303 + b1304), m1303.m01 = x1303 + e1304, m1303.m02 = y1303 - d1304, m1303.m03 = 0, m1303.m04 = x1303 - e1304, m1303.m05 = 1 - (w1303 + b1304), m1303.m06 = a1304 + c1304, m1303.m07 = 0, m1303.m08 = y1303 + d1304, m1303.m09 = a1304 - c1304, m1303.m10 = 1 - (w1303 + z1303), m1303.m11 = 0, m1303.m12 = o1303.x, m1303.m13 = o1303.y, m1303.m14 = o1303.z, m1303.m15 = 1, m1303;
                }
                static getTranslation(j1303, k1303) {
                    return j1303.x = k1303.m12, j1303.y = k1303.m13, j1303.z = k1303.m14, j1303;
                }
                static getScaling(y1302, z1302) {
                    const a1303 = q147.m00 = z1302.m00, b1303 = q147.m01 = z1302.m01, c1303 = q147.m02 = z1302.m02, d1303 = q147.m03 = z1302.m04, e1303 = q147.m04 = z1302.m05, f1303 = q147.m05 = z1302.m06, g1303 = q147.m06 = z1302.m08, h1303 = q147.m07 = z1302.m09, i1303 = q147.m08 = z1302.m10;
                    return y1302.x = Math.sqrt(a1303 * a1303 + b1303 * b1303 + c1303 * c1303), y1302.y = Math.sqrt(d1303 * d1303 + e1303 * e1303 + f1303 * f1303), y1302.z = Math.sqrt(g1303 * g1303 + h1303 * h1303 + i1303 * i1303), c147.determinant(q147) < 0 && (y1302.x *= -1), y1302;
                }
                static getRotation(q1302, r1302) {
                    const s1302 = r1302.m00 + r1302.m05 + r1302.m10;
                    let t1302 = 0;
                    return s1302 > 0 ? (t1302 = 2 * Math.sqrt(s1302 + 1), q1302.w = .25 * t1302, q1302.x = (r1302.m06 - r1302.m09) / t1302, q1302.y = (r1302.m08 - r1302.m02) / t1302, q1302.z = (r1302.m01 - r1302.m04) / t1302) : r1302.m00 > r1302.m05 && r1302.m00 > r1302.m10 ? (t1302 = 2 * Math.sqrt(1 + r1302.m00 - r1302.m05 - r1302.m10), q1302.w = (r1302.m06 - r1302.m09) / t1302, q1302.x = .25 * t1302, q1302.y = (r1302.m01 + r1302.m04) / t1302, q1302.z = (r1302.m08 + r1302.m02) / t1302) : r1302.m05 > r1302.m10 ? (t1302 = 2 * Math.sqrt(1 + r1302.m05 - r1302.m00 - r1302.m10), q1302.w = (r1302.m08 - r1302.m02) / t1302, q1302.x = (r1302.m01 + r1302.m04) / t1302, q1302.y = .25 * t1302, q1302.z = (r1302.m06 + r1302.m09) / t1302) : (t1302 = 2 * Math.sqrt(1 + r1302.m10 - r1302.m00 - r1302.m05), q1302.w = (r1302.m01 - r1302.m04) / t1302, q1302.x = (r1302.m08 + r1302.m02) / t1302, q1302.y = (r1302.m06 + r1302.m09) / t1302, q1302.z = .25 * t1302), q1302;
                }
                static toRTS(i1302, j1302, k1302, l1302) {
                    const m1302 = w146.set(p147, i1302.m00, i1302.m01, i1302.m02).length(), n1302 = w146.set(p147, i1302.m04, i1302.m05, i1302.m06).length(), o1302 = w146.set(p147, i1302.m08, i1302.m09, i1302.m10).length();
                    q147.m00 = i1302.m00 / m1302, q147.m01 = i1302.m01 / m1302, q147.m02 = i1302.m02 / m1302, q147.m03 = i1302.m04 / n1302, q147.m04 = i1302.m05 / n1302, q147.m05 = i1302.m06 / n1302, q147.m06 = i1302.m08 / o1302, q147.m07 = i1302.m09 / o1302, q147.m08 = i1302.m10 / o1302;
                    const p1302 = c147.determinant(q147);
                    l1302 && (w146.set(l1302, m1302, n1302, o1302), p1302 < 0 && (l1302.x *= -1)), k1302 && w146.set(k1302, i1302.m12, i1302.m13, i1302.m14), j1302 && (p1302 < 0 && (q147.m00 *= -1, q147.m01 *= -1, q147.m02 *= -1), g147.fromMat3(j1302, q147));
                }
                static toSRT(b1302, c1302, d1302, e1302) {
                    const f1302 = w146.set(p147, b1302.m00, b1302.m01, b1302.m02).length(), g1302 = w146.set(p147, b1302.m04, b1302.m05, b1302.m06).length(), h1302 = w146.set(p147, b1302.m08, b1302.m09, b1302.m10).length();
                    e1302 && (e1302.x = f1302, e1302.y = g1302, e1302.z = h1302), d1302 && w146.set(d1302, b1302.m12, b1302.m13, b1302.m14), c1302 && (q147.m00 = b1302.m00 / f1302, q147.m01 = b1302.m01 / f1302, q147.m02 = b1302.m02 / f1302, q147.m03 = b1302.m04 / g1302, q147.m04 = b1302.m05 / g1302, q147.m05 = b1302.m06 / g1302, q147.m06 = b1302.m08 / h1302, q147.m07 = b1302.m09 / h1302, q147.m08 = b1302.m10 / h1302, c147.determinant(q147) < 0 && (e1302 && (e1302.x *= -1), q147.m00 *= -1, q147.m01 *= -1, q147.m02 *= -1), g147.fromMat3(c1302, q147));
                }
                static toEuler(z1301, a1302) {
                    return c147.set(q147, z1301.m00, z1301.m01, z1301.m02, z1301.m04, z1301.m05, z1301.m06, z1301.m08, z1301.m09, z1301.m10), c147.toEuler(q147, a1302);
                }
                static fromRTS(g1300, h1300, i1300, j1300) {
                    const k1300 = h1300.x, l1300 = h1300.y, m1300 = h1300.z, n1300 = h1300.w, o1300 = k1300 + k1300, p1300 = l1300 + l1300, q1300 = m1300 + m1300, r1300 = k1300 * o1300, s1300 = k1300 * p1300, t1300 = k1300 * q1300, u1300 = l1300 * p1300, v1300 = l1300 * q1300, w1300 = m1300 * q1300, x1300 = n1300 * o1300, y1300 = n1300 * p1300, z1300 = n1300 * q1300, a1301 = j1300.x, b1301 = j1300.y, c1301 = j1300.z;
                    return g1300.m00 = (1 - (u1300 + w1300)) * a1301, g1300.m01 = (s1300 + z1300) * a1301, g1300.m02 = (t1300 - y1300) * a1301, g1300.m03 = 0, g1300.m04 = (s1300 - z1300) * b1301, g1300.m05 = (1 - (r1300 + w1300)) * b1301, g1300.m06 = (v1300 + x1300) * b1301, g1300.m07 = 0, g1300.m08 = (t1300 + y1300) * c1301, g1300.m09 = (v1300 - x1300) * c1301, g1300.m10 = (1 - (r1300 + u1300)) * c1301, g1300.m11 = 0, g1300.m12 = i1300.x, g1300.m13 = i1300.y, g1300.m14 = i1300.z, g1300.m15 = 1, g1300;
                }
                static fromSRT(n1298, o1298, p1298, q1298) {
                    const r1298 = o1298.x, s1298 = o1298.y, t1298 = o1298.z, u1298 = o1298.w, v1298 = r1298 + r1298, w1298 = s1298 + s1298, x1298 = t1298 + t1298, y1298 = r1298 * v1298, z1298 = r1298 * w1298, a1299 = r1298 * x1298, b1299 = s1298 * w1298, c1299 = s1298 * x1298, d1299 = t1298 * x1298, e1299 = u1298 * v1298, f1299 = u1298 * w1298, g1299 = u1298 * x1298, h1299 = q1298.x, i1299 = q1298.y, j1299 = q1298.z;
                    return n1298.m00 = (1 - (b1299 + d1299)) * h1299, n1298.m01 = (z1298 + g1299) * h1299, n1298.m02 = (a1299 - f1299) * h1299, n1298.m03 = 0, n1298.m04 = (z1298 - g1299) * i1299, n1298.m05 = (1 - (y1298 + d1299)) * i1299, n1298.m06 = (c1299 + e1299) * i1299, n1298.m07 = 0, n1298.m08 = (a1299 + f1299) * j1299, n1298.m09 = (c1299 - e1299) * j1299, n1298.m10 = (1 - (y1298 + b1299)) * j1299, n1298.m11 = 0, n1298.m12 = p1298.x, n1298.m13 = p1298.y, n1298.m14 = p1298.z, n1298.m15 = 1, n1298;
                }
                static fromRTSOrigin(m1297, n1297, o1297, p1297, q1297) {
                    const r1297 = n1297.x, s1297 = n1297.y, t1297 = n1297.z, u1297 = n1297.w, v1297 = r1297 + r1297, w1297 = s1297 + s1297, x1297 = t1297 + t1297, y1297 = r1297 * v1297, z1297 = r1297 * w1297, a1298 = r1297 * x1297, b1298 = s1297 * w1297, c1298 = s1297 * x1297, d1298 = t1297 * x1297, e1298 = u1297 * v1297, f1298 = u1297 * w1297, g1298 = u1297 * x1297, h1298 = p1297.x, i1298 = p1297.y, j1298 = p1297.z, k1298 = q1297.x, l1298 = q1297.y, m1298 = q1297.z;
                    return m1297.m00 = (1 - (b1298 + d1298)) * h1298, m1297.m01 = (z1297 + g1298) * h1298, m1297.m02 = (a1298 - f1298) * h1298, m1297.m03 = 0, m1297.m04 = (z1297 - g1298) * i1298, m1297.m05 = (1 - (y1297 + d1298)) * i1298, m1297.m06 = (c1298 + e1298) * i1298, m1297.m07 = 0, m1297.m08 = (a1298 + f1298) * j1298, m1297.m09 = (c1298 - e1298) * j1298, m1297.m10 = (1 - (y1297 + b1298)) * j1298, m1297.m11 = 0, m1297.m12 = o1297.x + k1298 - (m1297.m00 * k1298 + m1297.m04 * l1298 + m1297.m08 * m1298), m1297.m13 = o1297.y + l1298 - (m1297.m01 * k1298 + m1297.m05 * l1298 + m1297.m09 * m1298), m1297.m14 = o1297.z + m1298 - (m1297.m02 * k1298 + m1297.m06 * l1298 + m1297.m10 * m1298), m1297.m15 = 1, m1297;
                }
                static fromSRTOrigin(l1296, m1296, n1296, o1296, p1296) {
                    const q1296 = m1296.x, r1296 = m1296.y, s1296 = m1296.z, t1296 = m1296.w, u1296 = q1296 + q1296, v1296 = r1296 + r1296, w1296 = s1296 + s1296, x1296 = q1296 * u1296, y1296 = q1296 * v1296, z1296 = q1296 * w1296, a1297 = r1296 * v1296, b1297 = r1296 * w1296, c1297 = s1296 * w1296, d1297 = t1296 * u1296, e1297 = t1296 * v1296, f1297 = t1296 * w1296, g1297 = o1296.x, h1297 = o1296.y, i1297 = o1296.z, j1297 = p1296.x, k1297 = p1296.y, l1297 = p1296.z;
                    return l1296.m00 = (1 - (a1297 + c1297)) * g1297, l1296.m01 = (y1296 + f1297) * g1297, l1296.m02 = (z1296 - e1297) * g1297, l1296.m03 = 0, l1296.m04 = (y1296 - f1297) * h1297, l1296.m05 = (1 - (x1296 + c1297)) * h1297, l1296.m06 = (b1297 + d1297) * h1297, l1296.m07 = 0, l1296.m08 = (z1296 + e1297) * i1297, l1296.m09 = (b1297 - d1297) * i1297, l1296.m10 = (1 - (x1296 + a1297)) * i1297, l1296.m11 = 0, l1296.m12 = n1296.x + j1297 - (l1296.m00 * j1297 + l1296.m04 * k1297 + l1296.m08 * l1297), l1296.m13 = n1296.y + k1297 - (l1296.m01 * j1297 + l1296.m05 * k1297 + l1296.m09 * l1297), l1296.m14 = n1296.z + l1297 - (l1296.m02 * j1297 + l1296.m06 * k1297 + l1296.m10 * l1297), l1296.m15 = 1, l1296;
                }
                static fromQuat(c1295, d1295) {
                    const e1295 = d1295.x, f1295 = d1295.y, g1295 = d1295.z, h1295 = d1295.w, i1295 = e1295 + e1295, j1295 = f1295 + f1295, k1295 = g1295 + g1295, l1295 = e1295 * i1295, m1295 = f1295 * i1295, n1295 = f1295 * j1295, o1295 = g1295 * i1295, p1295 = g1295 * j1295, q1295 = g1295 * k1295, r1295 = h1295 * i1295, s1295 = h1295 * j1295, t1295 = h1295 * k1295;
                    return c1295.m00 = 1 - n1295 - q1295, c1295.m01 = m1295 + t1295, c1295.m02 = o1295 - s1295, c1295.m03 = 0, c1295.m04 = m1295 - t1295, c1295.m05 = 1 - l1295 - q1295, c1295.m06 = p1295 + r1295, c1295.m07 = 0, c1295.m08 = o1295 + s1295, c1295.m09 = p1295 - r1295, c1295.m10 = 1 - l1295 - n1295, c1295.m11 = 0, c1295.m12 = 0, c1295.m13 = 0, c1295.m14 = 0, c1295.m15 = 1, c1295;
                }
                static frustum(s1294, t1294, u1294, v1294, w1294, x1294, y1294) {
                    const z1294 = 1 / (u1294 - t1294), a1295 = 1 / (w1294 - v1294), b1295 = 1 / (x1294 - y1294);
                    return s1294.m00 = 2 * x1294 * z1294, s1294.m01 = 0, s1294.m02 = 0, s1294.m03 = 0, s1294.m04 = 0, s1294.m05 = 2 * x1294 * a1295, s1294.m06 = 0, s1294.m07 = 0, s1294.m08 = (u1294 + t1294) * z1294, s1294.m09 = (w1294 + v1294) * a1295, s1294.m10 = (y1294 + x1294) * b1295, s1294.m11 = -1, s1294.m12 = 0, s1294.m13 = 0, s1294.m14 = y1294 * x1294 * 2 * b1295, s1294.m15 = 0, s1294;
                }
                static perspective(e1294, f1294, g1294, h1294, i1294, j1294 = !0, k1294 = -1, l1294 = 1, m1294 = 0) {
                    const n1294 = 1 / Math.tan(f1294 / 2), o1294 = 1 / (h1294 - i1294), p1294 = j1294 ? n1294 / g1294 : n1294, q1294 = (j1294 ? n1294 : n1294 * g1294) * l1294, r1294 = n147[m1294];
                    return e1294.m00 = p1294 * r1294[0], e1294.m01 = p1294 * r1294[1], e1294.m02 = 0, e1294.m03 = 0, e1294.m04 = q1294 * r1294[2], e1294.m05 = q1294 * r1294[3], e1294.m06 = 0, e1294.m07 = 0, e1294.m08 = 0, e1294.m09 = 0, e1294.m10 = (i1294 - k1294 * h1294) * o1294, e1294.m11 = -1, e1294.m12 = 0, e1294.m13 = 0, e1294.m14 = i1294 * h1294 * o1294 * (1 - k1294), e1294.m15 = 0, e1294;
                }
                static ortho(m1293, n1293, o1293, p1293, q1293, r1293, s1293, t1293 = -1, u1293 = 1, v1293 = 0) {
                    const w1293 = 1 / (n1293 - o1293), x1293 = 1 / (p1293 - q1293) * u1293, y1293 = 1 / (r1293 - s1293), z1293 = -2 * w1293, a1294 = -2 * x1293, b1294 = (n1293 + o1293) * w1293, c1294 = (q1293 + p1293) * x1293, d1294 = n147[v1293];
                    return m1293.m00 = z1293 * d1294[0], m1293.m01 = z1293 * d1294[1], m1293.m02 = 0, m1293.m03 = 0, m1293.m04 = a1294 * d1294[2], m1293.m05 = a1294 * d1294[3], m1293.m06 = 0, m1293.m07 = 0, m1293.m08 = 0, m1293.m09 = 0, m1293.m10 = y1293 * (1 - t1293), m1293.m11 = 0, m1293.m12 = b1294 * d1294[0] + c1294 * d1294[2], m1293.m13 = b1294 * d1294[1] + c1294 * d1294[3], m1293.m14 = (r1293 - t1293 * s1293) * y1293, m1293.m15 = 1, m1293;
                }
                static lookAt(s1292, t1292, u1292, v1292) {
                    const w1292 = t1292.x, x1292 = t1292.y, y1292 = t1292.z, z1292 = v1292.x, a1293 = v1292.y, b1293 = v1292.z;
                    let c1293 = w1292 - u1292.x, d1293 = x1292 - u1292.y, e1293 = y1292 - u1292.z, f1293 = 1 / Math.sqrt(c1293 * c1293 + d1293 * d1293 + e1293 * e1293);
                    c1293 *= f1293, d1293 *= f1293, e1293 *= f1293;
                    let g1293 = a1293 * e1293 - b1293 * d1293, h1293 = b1293 * c1293 - z1292 * e1293, i1293 = z1292 * d1293 - a1293 * c1293;
                    f1293 = 1 / Math.sqrt(g1293 * g1293 + h1293 * h1293 + i1293 * i1293), g1293 *= f1293, h1293 *= f1293, i1293 *= f1293;
                    const j1293 = d1293 * i1293 - e1293 * h1293, k1293 = e1293 * g1293 - c1293 * i1293, l1293 = c1293 * h1293 - d1293 * g1293;
                    return s1292.m00 = g1293, s1292.m01 = j1293, s1292.m02 = c1293, s1292.m03 = 0, s1292.m04 = h1293, s1292.m05 = k1293, s1292.m06 = d1293, s1292.m07 = 0, s1292.m08 = i1293, s1292.m09 = l1293, s1292.m10 = e1293, s1292.m11 = 0, s1292.m12 = -(g1293 * w1292 + h1293 * x1292 + i1293 * y1292), s1292.m13 = -(j1293 * w1292 + k1293 * x1292 + l1293 * y1292), s1292.m14 = -(c1293 * w1292 + d1293 * x1292 + e1293 * y1292), s1292.m15 = 1, s1292;
                }
                static inverseTranspose(n1291, o1291) {
                    const p1291 = o1291.m00, q1291 = o1291.m01, r1291 = o1291.m02, s1291 = o1291.m03, t1291 = o1291.m04, u1291 = o1291.m05, v1291 = o1291.m06, w1291 = o1291.m07, x1291 = o1291.m08, y1291 = o1291.m09, z1291 = o1291.m10, a1292 = o1291.m11, b1292 = o1291.m12, c1292 = o1291.m13, d1292 = o1291.m14, e1292 = o1291.m15, f1292 = p1291 * u1291 - q1291 * t1291, g1292 = p1291 * v1291 - r1291 * t1291, h1292 = p1291 * w1291 - s1291 * t1291, i1292 = q1291 * v1291 - r1291 * u1291, j1292 = q1291 * w1291 - s1291 * u1291, k1292 = r1291 * w1291 - s1291 * v1291, l1292 = x1291 * c1292 - y1291 * b1292, m1292 = x1291 * d1292 - z1291 * b1292, n1292 = x1291 * e1292 - a1292 * b1292, o1292 = y1291 * d1292 - z1291 * c1292, p1292 = y1291 * e1292 - a1292 * c1292, q1292 = z1291 * e1292 - a1292 * d1292;
                    let r1292 = f1292 * q1292 - g1292 * p1292 + h1292 * o1292 + i1292 * n1292 - j1292 * m1292 + k1292 * l1292;
                    return r1292 ? (r1292 = 1 / r1292, n1291.m00 = (u1291 * q1292 - v1291 * p1292 + w1291 * o1292) * r1292, n1291.m01 = (v1291 * n1292 - t1291 * q1292 - w1291 * m1292) * r1292, n1291.m02 = (t1291 * p1292 - u1291 * n1292 + w1291 * l1292) * r1292, n1291.m03 = 0, n1291.m04 = (r1291 * p1292 - q1291 * q1292 - s1291 * o1292) * r1292, n1291.m05 = (p1291 * q1292 - r1291 * n1292 + s1291 * m1292) * r1292, n1291.m06 = (q1291 * n1292 - p1291 * p1292 - s1291 * l1292) * r1292, n1291.m07 = 0, n1291.m08 = (c1292 * k1292 - d1292 * j1292 + e1292 * i1292) * r1292, n1291.m09 = (d1292 * h1292 - b1292 * k1292 - e1292 * g1292) * r1292, n1291.m10 = (b1292 * j1292 - c1292 * h1292 + e1292 * f1292) * r1292, n1291.m11 = 0, n1291.m12 = 0, n1291.m13 = 0, n1291.m14 = 0, n1291.m15 = 1, n1291) : null;
                }
                static toArray(k1291, l1291, m1291 = 0) {
                    return k1291[m1291 + 0] = l1291.m00, k1291[m1291 + 1] = l1291.m01, k1291[m1291 + 2] = l1291.m02, k1291[m1291 + 3] = l1291.m03, k1291[m1291 + 4] = l1291.m04, k1291[m1291 + 5] = l1291.m05, k1291[m1291 + 6] = l1291.m06, k1291[m1291 + 7] = l1291.m07, k1291[m1291 + 8] = l1291.m08, k1291[m1291 + 9] = l1291.m09, k1291[m1291 + 10] = l1291.m10, k1291[m1291 + 11] = l1291.m11, k1291[m1291 + 12] = l1291.m12, k1291[m1291 + 13] = l1291.m13, k1291[m1291 + 14] = l1291.m14, k1291[m1291 + 15] = l1291.m15, k1291;
                }
                static fromArray(h1291, i1291, j1291 = 0) {
                    return h1291.m00 = i1291[j1291 + 0], h1291.m01 = i1291[j1291 + 1], h1291.m02 = i1291[j1291 + 2], h1291.m03 = i1291[j1291 + 3], h1291.m04 = i1291[j1291 + 4], h1291.m05 = i1291[j1291 + 5], h1291.m06 = i1291[j1291 + 6], h1291.m07 = i1291[j1291 + 7], h1291.m08 = i1291[j1291 + 8], h1291.m09 = i1291[j1291 + 9], h1291.m10 = i1291[j1291 + 10], h1291.m11 = i1291[j1291 + 11], h1291.m12 = i1291[j1291 + 12], h1291.m13 = i1291[j1291 + 13], h1291.m14 = i1291[j1291 + 14], h1291.m15 = i1291[j1291 + 15], h1291;
                }
                static add(d1291, e1291, f1291) {
                    return d1291.m00 = e1291.m00 + f1291.m00, d1291.m01 = e1291.m01 + f1291.m01, d1291.m02 = e1291.m02 + f1291.m02, d1291.m03 = e1291.m03 + f1291.m03, d1291.m04 = e1291.m04 + f1291.m04, d1291.m05 = e1291.m05 + f1291.m05, d1291.m06 = e1291.m06 + f1291.m06, d1291.m07 = e1291.m07 + f1291.m07, d1291.m08 = e1291.m08 + f1291.m08, d1291.m09 = e1291.m09 + f1291.m09, d1291.m10 = e1291.m10 + f1291.m10, d1291.m11 = e1291.m11 + f1291.m11, d1291.m12 = e1291.m12 + f1291.m12, d1291.m13 = e1291.m13 + f1291.m13, d1291.m14 = e1291.m14 + f1291.m14, d1291.m15 = e1291.m15 + f1291.m15, d1291;
                }
                static subtract(z1290, a1291, b1291) {
                    return z1290.m00 = a1291.m00 - b1291.m00, z1290.m01 = a1291.m01 - b1291.m01, z1290.m02 = a1291.m02 - b1291.m02, z1290.m03 = a1291.m03 - b1291.m03, z1290.m04 = a1291.m04 - b1291.m04, z1290.m05 = a1291.m05 - b1291.m05, z1290.m06 = a1291.m06 - b1291.m06, z1290.m07 = a1291.m07 - b1291.m07, z1290.m08 = a1291.m08 - b1291.m08, z1290.m09 = a1291.m09 - b1291.m09, z1290.m10 = a1291.m10 - b1291.m10, z1290.m11 = a1291.m11 - b1291.m11, z1290.m12 = a1291.m12 - b1291.m12, z1290.m13 = a1291.m13 - b1291.m13, z1290.m14 = a1291.m14 - b1291.m14, z1290.m15 = a1291.m15 - b1291.m15, z1290;
                }
                static multiplyScalar(v1290, w1290, x1290) {
                    return v1290.m00 = w1290.m00 * x1290, v1290.m01 = w1290.m01 * x1290, v1290.m02 = w1290.m02 * x1290, v1290.m03 = w1290.m03 * x1290, v1290.m04 = w1290.m04 * x1290, v1290.m05 = w1290.m05 * x1290, v1290.m06 = w1290.m06 * x1290, v1290.m07 = w1290.m07 * x1290, v1290.m08 = w1290.m08 * x1290, v1290.m09 = w1290.m09 * x1290, v1290.m10 = w1290.m10 * x1290, v1290.m11 = w1290.m11 * x1290, v1290.m12 = w1290.m12 * x1290, v1290.m13 = w1290.m13 * x1290, v1290.m14 = w1290.m14 * x1290, v1290.m15 = w1290.m15 * x1290, v1290;
                }
                static multiplyScalarAndAdd(r1290, s1290, t1290, u1290) {
                    return r1290.m00 = s1290.m00 + t1290.m00 * u1290, r1290.m01 = s1290.m01 + t1290.m01 * u1290, r1290.m02 = s1290.m02 + t1290.m02 * u1290, r1290.m03 = s1290.m03 + t1290.m03 * u1290, r1290.m04 = s1290.m04 + t1290.m04 * u1290, r1290.m05 = s1290.m05 + t1290.m05 * u1290, r1290.m06 = s1290.m06 + t1290.m06 * u1290, r1290.m07 = s1290.m07 + t1290.m07 * u1290, r1290.m08 = s1290.m08 + t1290.m08 * u1290, r1290.m09 = s1290.m09 + t1290.m09 * u1290, r1290.m10 = s1290.m10 + t1290.m10 * u1290, r1290.m11 = s1290.m11 + t1290.m11 * u1290, r1290.m12 = s1290.m12 + t1290.m12 * u1290, r1290.m13 = s1290.m13 + t1290.m13 * u1290, r1290.m14 = s1290.m14 + t1290.m14 * u1290, r1290.m15 = s1290.m15 + t1290.m15 * u1290, r1290;
                }
                static strictEquals(o1290, p1290) {
                    return o1290.m00 === p1290.m00 && o1290.m01 === p1290.m01 && o1290.m02 === p1290.m02 && o1290.m03 === p1290.m03 && o1290.m04 === p1290.m04 && o1290.m05 === p1290.m05 && o1290.m06 === p1290.m06 && o1290.m07 === p1290.m07 && o1290.m08 === p1290.m08 && o1290.m09 === p1290.m09 && o1290.m10 === p1290.m10 && o1290.m11 === p1290.m11 && o1290.m12 === p1290.m12 && o1290.m13 === p1290.m13 && o1290.m14 === p1290.m14 && o1290.m15 === p1290.m15;
                }
                static equals(j1290, k1290, l1290 = q146) {
                    return Math.abs(j1290.m00 - k1290.m00) <= l1290 * Math.max(1, Math.abs(j1290.m00), Math.abs(k1290.m00)) && Math.abs(j1290.m01 - k1290.m01) <= l1290 * Math.max(1, Math.abs(j1290.m01), Math.abs(k1290.m01)) && Math.abs(j1290.m02 - k1290.m02) <= l1290 * Math.max(1, Math.abs(j1290.m02), Math.abs(k1290.m02)) && Math.abs(j1290.m03 - k1290.m03) <= l1290 * Math.max(1, Math.abs(j1290.m03), Math.abs(k1290.m03)) && Math.abs(j1290.m04 - k1290.m04) <= l1290 * Math.max(1, Math.abs(j1290.m04), Math.abs(k1290.m04)) && Math.abs(j1290.m05 - k1290.m05) <= l1290 * Math.max(1, Math.abs(j1290.m05), Math.abs(k1290.m05)) && Math.abs(j1290.m06 - k1290.m06) <= l1290 * Math.max(1, Math.abs(j1290.m06), Math.abs(k1290.m06)) && Math.abs(j1290.m07 - k1290.m07) <= l1290 * Math.max(1, Math.abs(j1290.m07), Math.abs(k1290.m07)) && Math.abs(j1290.m08 - k1290.m08) <= l1290 * Math.max(1, Math.abs(j1290.m08), Math.abs(k1290.m08)) && Math.abs(j1290.m09 - k1290.m09) <= l1290 * Math.max(1, Math.abs(j1290.m09), Math.abs(k1290.m09)) && Math.abs(j1290.m10 - k1290.m10) <= l1290 * Math.max(1, Math.abs(j1290.m10), Math.abs(k1290.m10)) && Math.abs(j1290.m11 - k1290.m11) <= l1290 * Math.max(1, Math.abs(j1290.m11), Math.abs(k1290.m11)) && Math.abs(j1290.m12 - k1290.m12) <= l1290 * Math.max(1, Math.abs(j1290.m12), Math.abs(k1290.m12)) && Math.abs(j1290.m13 - k1290.m13) <= l1290 * Math.max(1, Math.abs(j1290.m13), Math.abs(k1290.m13)) && Math.abs(j1290.m14 - k1290.m14) <= l1290 * Math.max(1, Math.abs(j1290.m14), Math.abs(k1290.m14)) && Math.abs(j1290.m15 - k1290.m15) <= l1290 * Math.max(1, Math.abs(j1290.m15), Math.abs(k1290.m15));
                }
                constructor(t1289 = 1, u1289 = 0, v1289 = 0, w1289 = 0, x1289 = 0, y1289 = 1, z1289 = 0, a1290 = 0, b1290 = 0, c1290 = 0, d1290 = 1, e1290 = 0, f1290 = 0, g1290 = 0, h1290 = 0, i1290 = 1) {
                    super(), "object" == typeof t1289 ? (this.m00 = t1289.m00, this.m01 = t1289.m01, this.m02 = t1289.m02, this.m03 = t1289.m03, this.m04 = t1289.m04, this.m05 = t1289.m05, this.m06 = t1289.m06, this.m07 = t1289.m07, this.m08 = t1289.m08, this.m09 = t1289.m09, this.m10 = t1289.m10, this.m11 = t1289.m11, this.m12 = t1289.m12, this.m13 = t1289.m13, this.m14 = t1289.m14, this.m15 = t1289.m15) : (this.m00 = t1289, this.m01 = u1289, this.m02 = v1289, this.m03 = w1289, this.m04 = x1289, this.m05 = y1289, this.m06 = z1289, this.m07 = a1290, this.m08 = b1290, this.m09 = c1290, this.m10 = d1290, this.m11 = e1290, this.m12 = f1290, this.m13 = g1290, this.m14 = h1290, this.m15 = i1290);
                }
                clone() {
                    return new o147(this.m00, this.m01, this.m02, this.m03, this.m04, this.m05, this.m06, this.m07, this.m08, this.m09, this.m10, this.m11, this.m12, this.m13, this.m14, this.m15);
                }
                set(l1317 = 1, m1317 = 0, n1317 = 0, o1317 = 0, p1317 = 0, q1317 = 1, r1317 = 0, s1317 = 0, t1317 = 0, u1317 = 0, v1317 = 1, w1317 = 0, x1317 = 0, y1317 = 0, z1317 = 0, a1318 = 1) {
                    return "object" == typeof l1317 ? (this.m01 = l1317.m01, this.m02 = l1317.m02, this.m03 = l1317.m03, this.m04 = l1317.m04, this.m05 = l1317.m05, this.m06 = l1317.m06, this.m07 = l1317.m07, this.m08 = l1317.m08, this.m09 = l1317.m09, this.m10 = l1317.m10, this.m11 = l1317.m11, this.m12 = l1317.m12, this.m13 = l1317.m13, this.m14 = l1317.m14, this.m15 = l1317.m15, this.m00 = l1317.m00) : (this.m01 = m1317, this.m02 = n1317, this.m03 = o1317, this.m04 = p1317, this.m05 = q1317, this.m06 = r1317, this.m07 = s1317, this.m08 = t1317, this.m09 = u1317, this.m10 = v1317, this.m11 = w1317, this.m12 = x1317, this.m13 = y1317, this.m14 = z1317, this.m15 = a1318, this.m00 = l1317), this;
                }
                equals(m1290, n1290 = q146) {
                    return !(Math.abs(this.m00) === 1 / 0 || Math.abs(this.m01) === 1 / 0 || Math.abs(this.m02) === 1 / 0 || Math.abs(this.m03) === 1 / 0 || Math.abs(this.m04) === 1 / 0 || Math.abs(this.m05) === 1 / 0 || Math.abs(this.m06) === 1 / 0 || Math.abs(this.m07) === 1 / 0 || Math.abs(this.m08) === 1 / 0 || Math.abs(this.m09) === 1 / 0 || Math.abs(this.m10) === 1 / 0 || Math.abs(this.m11) === 1 / 0 || Math.abs(this.m12) === 1 / 0 || Math.abs(this.m13) === 1 / 0 || Math.abs(this.m14) === 1 / 0 || Math.abs(this.m15) === 1 / 0) && Math.abs(this.m00 - m1290.m00) <= n1290 * Math.max(1, Math.abs(this.m00), Math.abs(m1290.m00)) && Math.abs(this.m01 - m1290.m01) <= n1290 * Math.max(1, Math.abs(this.m01), Math.abs(m1290.m01)) && Math.abs(this.m02 - m1290.m02) <= n1290 * Math.max(1, Math.abs(this.m02), Math.abs(m1290.m02)) && Math.abs(this.m03 - m1290.m03) <= n1290 * Math.max(1, Math.abs(this.m03), Math.abs(m1290.m03)) && Math.abs(this.m04 - m1290.m04) <= n1290 * Math.max(1, Math.abs(this.m04), Math.abs(m1290.m04)) && Math.abs(this.m05 - m1290.m05) <= n1290 * Math.max(1, Math.abs(this.m05), Math.abs(m1290.m05)) && Math.abs(this.m06 - m1290.m06) <= n1290 * Math.max(1, Math.abs(this.m06), Math.abs(m1290.m06)) && Math.abs(this.m07 - m1290.m07) <= n1290 * Math.max(1, Math.abs(this.m07), Math.abs(m1290.m07)) && Math.abs(this.m08 - m1290.m08) <= n1290 * Math.max(1, Math.abs(this.m08), Math.abs(m1290.m08)) && Math.abs(this.m09 - m1290.m09) <= n1290 * Math.max(1, Math.abs(this.m09), Math.abs(m1290.m09)) && Math.abs(this.m10 - m1290.m10) <= n1290 * Math.max(1, Math.abs(this.m10), Math.abs(m1290.m10)) && Math.abs(this.m11 - m1290.m11) <= n1290 * Math.max(1, Math.abs(this.m11), Math.abs(m1290.m11)) && Math.abs(this.m12 - m1290.m12) <= n1290 * Math.max(1, Math.abs(this.m12), Math.abs(m1290.m12)) && Math.abs(this.m13 - m1290.m13) <= n1290 * Math.max(1, Math.abs(this.m13), Math.abs(m1290.m13)) && Math.abs(this.m14 - m1290.m14) <= n1290 * Math.max(1, Math.abs(this.m14), Math.abs(m1290.m14)) && Math.abs(this.m15 - m1290.m15) <= n1290 * Math.max(1, Math.abs(this.m15), Math.abs(m1290.m15));
                }
                strictEquals(q1290) {
                    return this.m00 === q1290.m00 && this.m01 === q1290.m01 && this.m02 === q1290.m02 && this.m03 === q1290.m03 && this.m04 === q1290.m04 && this.m05 === q1290.m05 && this.m06 === q1290.m06 && this.m07 === q1290.m07 && this.m08 === q1290.m08 && this.m09 === q1290.m09 && this.m10 === q1290.m10 && this.m11 === q1290.m11 && this.m12 === q1290.m12 && this.m13 === q1290.m13 && this.m14 === q1290.m14 && this.m15 === q1290.m15;
                }
                toString() {
                    return `[\n${this.m00}, ${this.m01}, ${this.m02}, ${this.m03},\n${this.m04}, ${this.m05}, ${this.m06}, ${this.m07},\n${this.m08}, ${this.m09}, ${this.m10}, ${this.m11},\n${this.m12}, ${this.m13}, ${this.m14}, ${this.m15}\n]`;
                }
                identity() {
                    return this.m00 = 1, this.m01 = 0, this.m02 = 0, this.m03 = 0, this.m04 = 0, this.m05 = 1, this.m06 = 0, this.m07 = 0, this.m08 = 0, this.m09 = 0, this.m10 = 1, this.m11 = 0, this.m12 = 0, this.m13 = 0, this.m14 = 0, this.m15 = 1, this;
                }
                zero() {
                    return this.m00 = 0, this.m01 = 0, this.m02 = 0, this.m03 = 0, this.m04 = 0, this.m05 = 0, this.m06 = 0, this.m07 = 0, this.m08 = 0, this.m09 = 0, this.m10 = 0, this.m11 = 0, this.m12 = 0, this.m13 = 0, this.m14 = 0, this.m15 = 0, this;
                }
                transpose() {
                    const h1316 = this.m01, i1316 = this.m02, j1316 = this.m03, k1316 = this.m06, l1316 = this.m07, m1316 = this.m11;
                    return this.m01 = this.m04, this.m02 = this.m08, this.m03 = this.m12, this.m04 = h1316, this.m06 = this.m09, this.m07 = this.m13, this.m08 = i1316, this.m09 = k1316, this.m11 = this.m14, this.m12 = j1316, this.m13 = l1316, this.m14 = m1316, this;
                }
                invert() {
                    const c1315 = this.m00, d1315 = this.m01, e1315 = this.m02, f1315 = this.m03, g1315 = this.m04, h1315 = this.m05, i1315 = this.m06, j1315 = this.m07, k1315 = this.m08, l1315 = this.m09, m1315 = this.m10, n1315 = this.m11, o1315 = this.m12, p1315 = this.m13, q1315 = this.m14, r1315 = this.m15, s1315 = c1315 * h1315 - d1315 * g1315, t1315 = c1315 * i1315 - e1315 * g1315, u1315 = c1315 * j1315 - f1315 * g1315, v1315 = d1315 * i1315 - e1315 * h1315, w1315 = d1315 * j1315 - f1315 * h1315, x1315 = e1315 * j1315 - f1315 * i1315, y1315 = k1315 * p1315 - l1315 * o1315, z1315 = k1315 * q1315 - m1315 * o1315, a1316 = k1315 * r1315 - n1315 * o1315, b1316 = l1315 * q1315 - m1315 * p1315, c1316 = l1315 * r1315 - n1315 * p1315, d1316 = m1315 * r1315 - n1315 * q1315;
                    let e1316 = s1315 * d1316 - t1315 * c1316 + u1315 * b1316 + v1315 * a1316 - w1315 * z1315 + x1315 * y1315;
                    return 0 === e1316 ? (this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), this) : (e1316 = 1 / e1316, this.m00 = (h1315 * d1316 - i1315 * c1316 + j1315 * b1316) * e1316, this.m01 = (e1315 * c1316 - d1315 * d1316 - f1315 * b1316) * e1316, this.m02 = (p1315 * x1315 - q1315 * w1315 + r1315 * v1315) * e1316, this.m03 = (m1315 * w1315 - l1315 * x1315 - n1315 * v1315) * e1316, this.m04 = (i1315 * a1316 - g1315 * d1316 - j1315 * z1315) * e1316, this.m05 = (c1315 * d1316 - e1315 * a1316 + f1315 * z1315) * e1316, this.m06 = (q1315 * u1315 - o1315 * x1315 - r1315 * t1315) * e1316, this.m07 = (k1315 * x1315 - m1315 * u1315 + n1315 * t1315) * e1316, this.m08 = (g1315 * c1316 - h1315 * a1316 + j1315 * y1315) * e1316, this.m09 = (d1315 * a1316 - c1315 * c1316 - f1315 * y1315) * e1316, this.m10 = (o1315 * w1315 - p1315 * u1315 + r1315 * s1315) * e1316, this.m11 = (l1315 * u1315 - k1315 * w1315 - n1315 * s1315) * e1316, this.m12 = (h1315 * z1315 - g1315 * b1316 - i1315 * y1315) * e1316, this.m13 = (c1315 * b1316 - d1315 * z1315 + e1315 * y1315) * e1316, this.m14 = (p1315 * t1315 - o1315 * v1315 - q1315 * s1315) * e1316, this.m15 = (k1315 * v1315 - l1315 * t1315 + m1315 * s1315) * e1316, this);
                }
                determinant() {
                    const h1313 = this.m00, i1313 = this.m01, j1313 = this.m02, k1313 = this.m03, l1313 = this.m04, m1313 = this.m05, n1313 = this.m06, o1313 = this.m07, p1313 = this.m08, q1313 = this.m09, r1313 = this.m10, s1313 = this.m11, t1313 = this.m12, u1313 = this.m13, v1313 = this.m14, w1313 = this.m15;
                    return (h1313 * m1313 - i1313 * l1313) * (r1313 * w1313 - s1313 * v1313) - (h1313 * n1313 - j1313 * l1313) * (q1313 * w1313 - s1313 * u1313) + (h1313 * o1313 - k1313 * l1313) * (q1313 * v1313 - r1313 * u1313) + (i1313 * n1313 - j1313 * m1313) * (p1313 * w1313 - s1313 * t1313) - (i1313 * o1313 - k1313 * m1313) * (p1313 * v1313 - r1313 * t1313) + (j1313 * o1313 - k1313 * n1313) * (p1313 * u1313 - q1313 * t1313);
                }
                add(g1291) {
                    return this.m00 += g1291.m00, this.m01 += g1291.m01, this.m02 += g1291.m02, this.m03 += g1291.m03, this.m04 += g1291.m04, this.m05 += g1291.m05, this.m06 += g1291.m06, this.m07 += g1291.m07, this.m08 += g1291.m08, this.m09 += g1291.m09, this.m10 += g1291.m10, this.m11 += g1291.m11, this.m12 += g1291.m12, this.m13 += g1291.m13, this.m14 += g1291.m14, this.m15 += g1291.m15, this;
                }
                subtract(c1291) {
                    return this.m00 -= c1291.m00, this.m01 -= c1291.m01, this.m02 -= c1291.m02, this.m03 -= c1291.m03, this.m04 -= c1291.m04, this.m05 -= c1291.m05, this.m06 -= c1291.m06, this.m07 -= c1291.m07, this.m08 -= c1291.m08, this.m09 -= c1291.m09, this.m10 -= c1291.m10, this.m11 -= c1291.m11, this.m12 -= c1291.m12, this.m13 -= c1291.m13, this.m14 -= c1291.m14, this.m15 -= c1291.m15, this;
                }
                multiply(v1311) {
                    const w1311 = this.m00, x1311 = this.m01, y1311 = this.m02, z1311 = this.m03, a1312 = this.m04, b1312 = this.m05, c1312 = this.m06, d1312 = this.m07, e1312 = this.m08, f1312 = this.m09, g1312 = this.m10, h1312 = this.m11, i1312 = this.m12, j1312 = this.m13, k1312 = this.m14, l1312 = this.m15;
                    let m1312 = v1311.m00, n1312 = v1311.m01, o1312 = v1311.m02, p1312 = v1311.m03;
                    return this.m00 = m1312 * w1311 + n1312 * a1312 + o1312 * e1312 + p1312 * i1312, this.m01 = m1312 * x1311 + n1312 * b1312 + o1312 * f1312 + p1312 * j1312, this.m02 = m1312 * y1311 + n1312 * c1312 + o1312 * g1312 + p1312 * k1312, this.m03 = m1312 * z1311 + n1312 * d1312 + o1312 * h1312 + p1312 * l1312, m1312 = v1311.m04, n1312 = v1311.m05, o1312 = v1311.m06, p1312 = v1311.m07, this.m04 = m1312 * w1311 + n1312 * a1312 + o1312 * e1312 + p1312 * i1312, this.m05 = m1312 * x1311 + n1312 * b1312 + o1312 * f1312 + p1312 * j1312, this.m06 = m1312 * y1311 + n1312 * c1312 + o1312 * g1312 + p1312 * k1312, this.m07 = m1312 * z1311 + n1312 * d1312 + o1312 * h1312 + p1312 * l1312, m1312 = v1311.m08, n1312 = v1311.m09, o1312 = v1311.m10, p1312 = v1311.m11, this.m08 = m1312 * w1311 + n1312 * a1312 + o1312 * e1312 + p1312 * i1312, this.m09 = m1312 * x1311 + n1312 * b1312 + o1312 * f1312 + p1312 * j1312, this.m10 = m1312 * y1311 + n1312 * c1312 + o1312 * g1312 + p1312 * k1312, this.m11 = m1312 * z1311 + n1312 * d1312 + o1312 * h1312 + p1312 * l1312, m1312 = v1311.m12, n1312 = v1311.m13, o1312 = v1311.m14, p1312 = v1311.m15, this.m12 = m1312 * w1311 + n1312 * a1312 + o1312 * e1312 + p1312 * i1312, this.m13 = m1312 * x1311 + n1312 * b1312 + o1312 * f1312 + p1312 * j1312, this.m14 = m1312 * y1311 + n1312 * c1312 + o1312 * g1312 + p1312 * k1312, this.m15 = m1312 * z1311 + n1312 * d1312 + o1312 * h1312 + p1312 * l1312, this;
                }
                multiplyScalar(y1290) {
                    return this.m00 *= y1290, this.m01 *= y1290, this.m02 *= y1290, this.m03 *= y1290, this.m04 *= y1290, this.m05 *= y1290, this.m06 *= y1290, this.m07 *= y1290, this.m08 *= y1290, this.m09 *= y1290, this.m10 *= y1290, this.m11 *= y1290, this.m12 *= y1290, this.m13 *= y1290, this.m14 *= y1290, this.m15 *= y1290, this;
                }
                translate(p1309) {
                    return this.m12 += p1309.x, this.m13 += p1309.y, this.m14 += p1309.z, this;
                }
                transform(w1309) {
                    const { x: x1309, y: y1309, z: z1309 } = w1309, a1310 = this.m00, b1310 = this.m01, c1310 = this.m02, d1310 = this.m03, e1310 = this.m04, f1310 = this.m05, g1310 = this.m06, h1310 = this.m07, i1310 = this.m08, j1310 = this.m09, k1310 = this.m10, l1310 = this.m11;
                    return this.m12 = a1310 * x1309 + e1310 * y1309 + i1310 * z1309 + this.m12, this.m13 = b1310 * x1309 + f1310 * y1309 + j1310 * z1309 + this.m13, this.m14 = c1310 * x1309 + g1310 * y1309 + k1310 * z1309 + this.m14, this.m15 = d1310 * x1309 + h1310 * y1309 + l1310 * z1309 + this.m15, this;
                }
                scale(i1309) {
                    const j1309 = i1309.x, k1309 = i1309.y, l1309 = i1309.z;
                    return this.m00 *= j1309, this.m01 *= j1309, this.m02 *= j1309, this.m03 *= j1309, this.m04 *= k1309, this.m05 *= k1309, this.m06 *= k1309, this.m07 *= k1309, this.m08 *= l1309, this.m09 *= l1309, this.m10 *= l1309, this.m11 *= l1309, this;
                }
                rotate(y1307, z1307) {
                    let a1308 = z1307.x, b1308 = z1307.y, c1308 = z1307.z, d1308 = Math.sqrt(a1308 * a1308 + b1308 * b1308 + c1308 * c1308);
                    if (Math.abs(d1308) < q146)
                        return null;
                    d1308 = 1 / d1308, a1308 *= d1308, b1308 *= d1308, c1308 *= d1308;
                    const e1308 = Math.sin(y1307), f1308 = Math.cos(y1307), g1308 = 1 - f1308, h1308 = this.m00, i1308 = this.m01, j1308 = this.m02, k1308 = this.m03, l1308 = this.m04, m1308 = this.m05, n1308 = this.m06, o1308 = this.m07, p1308 = this.m08, q1308 = this.m09, r1308 = this.m10, s1308 = this.m11, t1308 = a1308 * a1308 * g1308 + f1308, u1308 = b1308 * a1308 * g1308 + c1308 * e1308, v1308 = c1308 * a1308 * g1308 - b1308 * e1308, w1308 = a1308 * b1308 * g1308 - c1308 * e1308, x1308 = b1308 * b1308 * g1308 + f1308, y1308 = c1308 * b1308 * g1308 + a1308 * e1308, z1308 = a1308 * c1308 * g1308 + b1308 * e1308, a1309 = b1308 * c1308 * g1308 - a1308 * e1308, b1309 = c1308 * c1308 * g1308 + f1308;
                    return this.m00 = h1308 * t1308 + l1308 * u1308 + p1308 * v1308, this.m01 = i1308 * t1308 + m1308 * u1308 + q1308 * v1308, this.m02 = j1308 * t1308 + n1308 * u1308 + r1308 * v1308, this.m03 = k1308 * t1308 + o1308 * u1308 + s1308 * v1308, this.m04 = h1308 * w1308 + l1308 * x1308 + p1308 * y1308, this.m05 = i1308 * w1308 + m1308 * x1308 + q1308 * y1308, this.m06 = j1308 * w1308 + n1308 * x1308 + r1308 * y1308, this.m07 = k1308 * w1308 + o1308 * x1308 + s1308 * y1308, this.m08 = h1308 * z1308 + l1308 * a1309 + p1308 * b1309, this.m09 = i1308 * z1308 + m1308 * a1309 + q1308 * b1309, this.m10 = j1308 * z1308 + n1308 * a1309 + r1308 * b1309, this.m11 = k1308 * z1308 + o1308 * a1309 + s1308 * b1309, this;
                }
                getTranslation(l1303) {
                    return l1303.x = this.m12, l1303.y = this.m13, l1303.z = this.m14, l1303;
                }
                getScale(j1289) {
                    const k1289 = q147.m00 = this.m00, l1289 = q147.m01 = this.m01, m1289 = q147.m02 = this.m02, n1289 = q147.m03 = this.m04, o1289 = q147.m04 = this.m05, p1289 = q147.m05 = this.m06, q1289 = q147.m06 = this.m08, r1289 = q147.m07 = this.m09, s1289 = q147.m08 = this.m10;
                    return j1289.x = Math.sqrt(k1289 * k1289 + l1289 * l1289 + m1289 * m1289), j1289.y = Math.sqrt(n1289 * n1289 + o1289 * o1289 + p1289 * p1289), j1289.z = Math.sqrt(q1289 * q1289 + r1289 * r1289 + s1289 * s1289), c147.determinant(q147) < 0 && (j1289.x *= -1), j1289;
                }
                getRotation(u1302) {
                    const v1302 = w146.set(p147, this.m00, this.m01, this.m02).length(), w1302 = w146.set(p147, this.m04, this.m05, this.m06).length(), x1302 = w146.set(p147, this.m08, this.m09, this.m10).length();
                    return q147.m00 = this.m00 / v1302, q147.m01 = this.m01 / v1302, q147.m02 = this.m02 / v1302, q147.m03 = this.m04 / w1302, q147.m04 = this.m05 / w1302, q147.m05 = this.m06 / w1302, q147.m06 = this.m08 / x1302, q147.m07 = this.m09 / x1302, q147.m08 = this.m10 / x1302, c147.determinant(q147) < 0 && (q147.m00 *= -1, q147.m01 *= -1, q147.m02 *= -1), g147.fromMat3(u1302, q147);
                }
                fromRTS(d1301, e1301, f1301) {
                    const g1301 = d1301.x, h1301 = d1301.y, i1301 = d1301.z, j1301 = d1301.w, k1301 = g1301 + g1301, l1301 = h1301 + h1301, m1301 = i1301 + i1301, n1301 = g1301 * k1301, o1301 = g1301 * l1301, p1301 = g1301 * m1301, q1301 = h1301 * l1301, r1301 = h1301 * m1301, s1301 = i1301 * m1301, t1301 = j1301 * k1301, u1301 = j1301 * l1301, v1301 = j1301 * m1301, w1301 = f1301.x, x1301 = f1301.y, y1301 = f1301.z;
                    return this.m00 = (1 - (q1301 + s1301)) * w1301, this.m01 = (o1301 + v1301) * w1301, this.m02 = (p1301 - u1301) * w1301, this.m03 = 0, this.m04 = (o1301 - v1301) * x1301, this.m05 = (1 - (n1301 + s1301)) * x1301, this.m06 = (r1301 + t1301) * x1301, this.m07 = 0, this.m08 = (p1301 + u1301) * y1301, this.m09 = (r1301 - t1301) * y1301, this.m10 = (1 - (n1301 + q1301)) * y1301, this.m11 = 0, this.m12 = e1301.x, this.m13 = e1301.y, this.m14 = e1301.z, this.m15 = 1, this;
                }
                fromSRT(k1299, l1299, m1299) {
                    const n1299 = k1299.x, o1299 = k1299.y, p1299 = k1299.z, q1299 = k1299.w, r1299 = n1299 + n1299, s1299 = o1299 + o1299, t1299 = p1299 + p1299, u1299 = n1299 * r1299, v1299 = n1299 * s1299, w1299 = n1299 * t1299, x1299 = o1299 * s1299, y1299 = o1299 * t1299, z1299 = p1299 * t1299, a1300 = q1299 * r1299, b1300 = q1299 * s1299, c1300 = q1299 * t1299, d1300 = m1299.x, e1300 = m1299.y, f1300 = m1299.z;
                    return this.m00 = (1 - (x1299 + z1299)) * d1300, this.m01 = (v1299 + c1300) * d1300, this.m02 = (w1299 - b1300) * d1300, this.m03 = 0, this.m04 = (v1299 - c1300) * e1300, this.m05 = (1 - (u1299 + z1299)) * e1300, this.m06 = (y1299 + a1300) * e1300, this.m07 = 0, this.m08 = (w1299 + b1300) * f1300, this.m09 = (y1299 - a1300) * f1300, this.m10 = (1 - (u1299 + x1299)) * f1300, this.m11 = 0, this.m12 = l1299.x, this.m13 = l1299.y, this.m14 = l1299.z, this.m15 = 1, this;
                }
                fromQuat(u1295) {
                    const v1295 = u1295.x, w1295 = u1295.y, x1295 = u1295.z, y1295 = u1295.w, z1295 = v1295 + v1295, a1296 = w1295 + w1295, b1296 = x1295 + x1295, c1296 = v1295 * z1295, d1296 = w1295 * z1295, e1296 = w1295 * a1296, f1296 = x1295 * z1295, g1296 = x1295 * a1296, h1296 = x1295 * b1296, i1296 = y1295 * z1295, j1296 = y1295 * a1296, k1296 = y1295 * b1296;
                    return this.m00 = 1 - e1296 - h1296, this.m01 = d1296 + k1296, this.m02 = f1296 - j1296, this.m03 = 0, this.m04 = d1296 - k1296, this.m05 = 1 - c1296 - h1296, this.m06 = g1296 + i1296, this.m07 = 0, this.m08 = f1296 + j1296, this.m09 = g1296 - i1296, this.m10 = 1 - c1296 - e1296, this.m11 = 0, this.m12 = 0, this.m13 = 0, this.m14 = 0, this.m15 = 1, this;
                }
            }
            g125("Mat4", o147), m147 = o147, o147.IDENTITY = Object.freeze(new m147());
            const p147 = new w146(), q147 = new c147();
            function w129(t1288, u1288, v1288, w1288, x1288, y1288, z1288, a1289, b1289, c1289, d1289, e1289, f1289, g1289, h1289, i1289) {
                return new o147(t1288, u1288, v1288, w1288, x1288, y1288, z1288, a1289, b1289, c1289, d1289, e1289, f1289, g1289, h1289, i1289);
            }
            var r147;
            s128.fastDefine("cc.Mat4", o147, {
                m00: 1,
                m01: 0,
                m02: 0,
                m03: 0,
                m04: 0,
                m05: 1,
                m06: 0,
                m07: 0,
                m08: 0,
                m09: 0,
                m10: 1,
                m11: 0,
                m12: 0,
                m13: 0,
                m14: 0,
                m15: 1
            }), s143.Mat4 = o147, s143.mat4 = w129;
            class s147 extends p145 {
                static clone(s1288) {
                    return new s147(s1288.x, s1288.y);
                }
                static copy(q1288, r1288) {
                    return q1288.x = r1288.x, q1288.y = r1288.y, q1288;
                }
                static set(l1288, m1288, n1288) {
                    return l1288.x = m1288, l1288.y = n1288, l1288;
                }
                static add(h1288, i1288, j1288) {
                    return h1288.x = i1288.x + j1288.x, h1288.y = i1288.y + j1288.y, h1288;
                }
                static subtract(d1288, e1288, f1288) {
                    return d1288.x = e1288.x - f1288.x, d1288.y = e1288.y - f1288.y, d1288;
                }
                static multiply(z1287, a1288, b1288) {
                    return z1287.x = a1288.x * b1288.x, z1287.y = a1288.y * b1288.y, z1287;
                }
                static divide(v1287, w1287, x1287) {
                    return v1287.x = w1287.x / x1287.x, v1287.y = w1287.y / x1287.y, v1287;
                }
                static ceil(t1287, u1287) {
                    return t1287.x = Math.ceil(u1287.x), t1287.y = Math.ceil(u1287.y), t1287;
                }
                static floor(r1287, s1287) {
                    return r1287.x = Math.floor(s1287.x), r1287.y = Math.floor(s1287.y), r1287;
                }
                static min(o1287, p1287, q1287) {
                    return o1287.x = Math.min(p1287.x, q1287.x), o1287.y = Math.min(p1287.y, q1287.y), o1287;
                }
                static max(l1287, m1287, n1287) {
                    return l1287.x = Math.max(m1287.x, n1287.x), l1287.y = Math.max(m1287.y, n1287.y), l1287;
                }
                static round(j1287, k1287) {
                    return j1287.x = Math.round(k1287.x), j1287.y = Math.round(k1287.y), j1287;
                }
                static multiplyScalar(f1287, g1287, h1287) {
                    return f1287.x = g1287.x * h1287, f1287.y = g1287.y * h1287, f1287;
                }
                static scaleAndAdd(b1287, c1287, d1287, e1287) {
                    return b1287.x = c1287.x + d1287.x * e1287, b1287.y = c1287.y + d1287.y * e1287, b1287;
                }
                static distance(x1286, y1286) {
                    const z1286 = y1286.x - x1286.x, a1287 = y1286.y - x1286.y;
                    return Math.sqrt(z1286 * z1286 + a1287 * a1287);
                }
                static squaredDistance(t1286, u1286) {
                    const v1286 = u1286.x - t1286.x, w1286 = u1286.y - t1286.y;
                    return v1286 * v1286 + w1286 * w1286;
                }
                static len(q1286) {
                    const r1286 = q1286.x, s1286 = q1286.y;
                    return Math.sqrt(r1286 * r1286 + s1286 * s1286);
                }
                static lengthSqr(n1286) {
                    const o1286 = n1286.x, p1286 = n1286.y;
                    return o1286 * o1286 + p1286 * p1286;
                }
                static negate(l1286, m1286) {
                    return l1286.x = -m1286.x, l1286.y = -m1286.y, l1286;
                }
                static inverse(j1286, k1286) {
                    return j1286.x = 1 / k1286.x, j1286.y = 1 / k1286.y, j1286;
                }
                static inverseSafe(f1286, g1286) {
                    const h1286 = g1286.x, i1286 = g1286.y;
                    return Math.abs(h1286) < q146 ? f1286.x = 0 : f1286.x = 1 / h1286, Math.abs(i1286) < q146 ? f1286.y = 0 : f1286.y = 1 / i1286, f1286;
                }
                static normalize(x1285, y1285) {
                    const z1285 = y1285.x, a1286 = y1285.y;
                    let b1286 = z1285 * z1285 + a1286 * a1286;
                    return b1286 > 0 ? (b1286 = 1 / Math.sqrt(b1286), x1285.x = z1285 * b1286, x1285.y = a1286 * b1286) : (x1285.x = 0, x1285.y = 0), x1285;
                }
                static dot(u1285, v1285) {
                    return u1285.x * v1285.x + u1285.y * v1285.y;
                }
                static cross(q1285, r1285, s1285) {
                    return q1285 instanceof w146 ? (q1285.x = q1285.y = 0, q1285.z = r1285.x * s1285.y - r1285.y * s1285.x, q1285) : q1285.x * r1285.y - q1285.y * r1285.x;
                }
                static lerp(g1285, h1285, i1285, j1285) {
                    const k1285 = h1285.x, l1285 = h1285.y;
                    return g1285.x = k1285 + j1285 * (i1285.x - k1285), g1285.y = l1285 + j1285 * (i1285.y - l1285), g1285;
                }
                static random(d1285, e1285) {
                    e1285 = e1285 || 1;
                    const f1285 = 2 * c129() * Math.PI;
                    return d1285.x = Math.cos(f1285) * e1285, d1285.y = Math.sin(f1285) * e1285, d1285;
                }
                static transformMat3(y1284, z1284, a1285) {
                    const b1285 = z1284.x, c1285 = z1284.y;
                    return y1284.x = a1285.m00 * b1285 + a1285.m03 * c1285 + a1285.m06, y1284.y = a1285.m01 * b1285 + a1285.m04 * c1285 + a1285.m07, y1284;
                }
                static transformMat4(q1284, r1284, s1284) {
                    const t1284 = r1284.x, u1284 = r1284.y;
                    return q1284.x = s1284.m00 * t1284 + s1284.m04 * u1284 + s1284.m12, q1284.y = s1284.m01 * t1284 + s1284.m05 * u1284 + s1284.m13, q1284;
                }
                static str(p1284) {
                    return `Vec2(${p1284.x}, ${p1284.y})`;
                }
                static toArray(m1284, n1284, o1284 = 0) {
                    return m1284[o1284 + 0] = n1284.x, m1284[o1284 + 1] = n1284.y, m1284;
                }
                static fromArray(j1284, k1284, l1284 = 0) {
                    return j1284.x = k1284[l1284 + 0], j1284.y = k1284[l1284 + 1], j1284;
                }
                static strictEquals(g1284, h1284) {
                    return g1284.x === h1284.x && g1284.y === h1284.y;
                }
                static equals(b1284, c1284, d1284 = q146) {
                    return Math.abs(b1284.x - c1284.x) <= d1284 * Math.max(1, Math.abs(b1284.x), Math.abs(c1284.x)) && Math.abs(b1284.y - c1284.y) <= d1284 * Math.max(1, Math.abs(b1284.y), Math.abs(c1284.y));
                }
                static angle(s1283, t1283) {
                    const u1283 = s1283.x * s1283.x + s1283.y * s1283.y, v1283 = t1283.x * t1283.x + t1283.y * t1283.y;
                    if (0 === u1283 || 0 === v1283)
                        return 0;
                    let w1283 = (s1283.x * t1283.x + s1283.y * t1283.y) / Math.sqrt(u1283 * v1283);
                    return w1283 = x128(w1283, -1, 1), Math.acos(w1283);
                }
                constructor(q1283, r1283) {
                    super(), "object" == typeof q1283 ? (this.x = q1283.x, this.y = q1283.y) : (this.x = q1283 || 0, this.y = r1283 || 0);
                }
                clone() {
                    return new s147(this.x, this.y);
                }
                set(o1288, p1288) {
                    return "object" == typeof o1288 ? (this.x = o1288.x, this.y = o1288.y) : (this.x = o1288 || 0, this.y = p1288 || 0), this;
                }
                equals(e1284, f1284 = q146) {
                    return Math.abs(this.x - e1284.x) <= f1284 * Math.max(1, Math.abs(this.x), Math.abs(e1284.x)) && Math.abs(this.y - e1284.y) <= f1284 * Math.max(1, Math.abs(this.y), Math.abs(e1284.y));
                }
                equals2f(n1283, o1283, p1283 = q146) {
                    return Math.abs(this.x - n1283) <= p1283 * Math.max(1, Math.abs(this.x), Math.abs(n1283)) && Math.abs(this.y - o1283) <= p1283 * Math.max(1, Math.abs(this.y), Math.abs(o1283));
                }
                strictEquals(i1284) {
                    return i1284 && this.x === i1284.x && this.y === i1284.y;
                }
                strictEquals2f(l1283, m1283) {
                    return this.x === l1283 && this.y === m1283;
                }
                toString() {
                    return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`;
                }
                lerp(m1285, n1285) {
                    const o1285 = this.x, p1285 = this.y;
                    return this.x = o1285 + n1285 * (m1285.x - o1285), this.y = p1285 + n1285 * (m1285.y - p1285), this;
                }
                clampf(j1283, k1283) {
                    return this.x = x128(this.x, j1283.x, k1283.x), this.y = x128(this.y, j1283.y, k1283.y), this;
                }
                add(k1288) {
                    return this.x += k1288.x, this.y += k1288.y, this;
                }
                add2f(h1283, i1283) {
                    return this.x += h1283, this.y += i1283, this;
                }
                subtract(g1288) {
                    return this.x -= g1288.x, this.y -= g1288.y, this;
                }
                subtract2f(f1283, g1283) {
                    return this.x -= f1283, this.y -= g1283, this;
                }
                multiplyScalar(i1287) {
                    return "object" == typeof i1287 && console.warn("should use Vec2.multiply for vector * vector operation"), this.x *= i1287, this.y *= i1287, this;
                }
                multiply(c1288) {
                    return "object" != typeof c1288 && console.warn("should use Vec2.scale for vector * scalar operation"), this.x *= c1288.x, this.y *= c1288.y, this;
                }
                multiply2f(d1283, e1283) {
                    return this.x *= d1283, this.y *= e1283, this;
                }
                divide(y1287) {
                    return this.x /= y1287.x, this.y /= y1287.y, this;
                }
                divide2f(b1283, c1283) {
                    return this.x /= b1283, this.y /= c1283, this;
                }
                negative() {
                    return this.x = -this.x, this.y = -this.y, this;
                }
                dot(w1285) {
                    return this.x * w1285.x + this.y * w1285.y;
                }
                cross(t1285) {
                    return this.x * t1285.y - this.y * t1285.x;
                }
                length() {
                    return Math.sqrt(this.x * this.x + this.y * this.y);
                }
                lengthSqr() {
                    return this.x * this.x + this.y * this.y;
                }
                normalize() {
                    const c1286 = this.x, d1286 = this.y;
                    let e1286 = c1286 * c1286 + d1286 * d1286;
                    return e1286 > 0 && (e1286 = 1 / Math.sqrt(e1286), this.x *= e1286, this.y *= e1286), this;
                }
                angle(x1283) {
                    const y1283 = this.lengthSqr(), z1283 = x1283.lengthSqr();
                    if (0 === y1283 || 0 === z1283)
                        return 0;
                    let a1284 = this.dot(x1283) / Math.sqrt(y1283 * z1283);
                    return a1284 = x128(a1284, -1, 1), Math.acos(a1284);
                }
                signAngle(y1282) {
                    const z1282 = this.cross(y1282), a1283 = this.dot(y1282);
                    return Math.atan2(z1282, a1283);
                }
                rotate(t1282) {
                    const u1282 = this.x, v1282 = this.y, w1282 = Math.sin(t1282), x1282 = Math.cos(t1282);
                    return this.x = x1282 * u1282 - w1282 * v1282, this.y = w1282 * u1282 + x1282 * v1282, this;
                }
                project(r1282) {
                    const s1282 = this.dot(r1282) / r1282.dot(r1282);
                    return this.x = r1282.x * s1282, this.y = r1282.y * s1282, this;
                }
                transformMat4(v1284) {
                    const w1284 = this.x, x1284 = this.y;
                    return this.x = v1284.m00 * w1284 + v1284.m04 * x1284 + v1284.m12, this.y = v1284.m01 * w1284 + v1284.m05 * x1284 + v1284.m13, this;
                }
            }
            function x129(p1282, q1282) {
                return new s147(p1282, q1282);
            }
            g125("Vec2", s147), r147 = s147, s147.ZERO = Object.freeze(new r147(0, 0)), s147.ONE = Object.freeze(new r147(1, 1)), s147.NEG_ONE = Object.freeze(new r147(-1, -1)), s147.UNIT_X = Object.freeze(new r147(1, 0)), s147.UNIT_Y = Object.freeze(new r147(0, 1)), s128.fastDefine("cc.Vec2", s147, {
                x: 0,
                y: 0
            }), s143.Vec2 = s147, s143.v2 = x129, k144(s147, "Vec2", [{
                    name: "sub",
                    newName: "subtract",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "div",
                    newName: "divide",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "dist",
                    newName: "distance",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "sqrDist",
                    newName: "squaredDistance",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "mag",
                    newName: "len",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "sqrMag",
                    newName: "lengthSqr",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "scale",
                    newName: "multiplyScalar",
                    target: s147,
                    targetName: "Vec2"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: s147,
                    targetName: "Vec2"
                }]), k144(s147.prototype, "Vec2", [{
                    name: "mag",
                    newName: "length",
                    target: s147.prototype,
                    targetName: "Vec2"
                }, {
                    name: "magSqr",
                    newName: "lengthSqr",
                    target: s147.prototype,
                    targetName: "Vec2"
                }, {
                    name: "scale",
                    newName: "multiplyScalar",
                    target: s147.prototype,
                    targetName: "Vec2"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: s147.prototype,
                    targetName: "Vec2"
                }]), k144(w146, "Vec3", [{
                    name: "sub",
                    newName: "subtract",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "div",
                    newName: "divide",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "dist",
                    newName: "distance",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "sqrDist",
                    newName: "squaredDistance",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "mag",
                    newName: "len",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "sqrMag",
                    newName: "lengthSqr",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "scale",
                    newName: "multiplyScalar",
                    target: w146,
                    targetName: "Vec3"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: w146,
                    targetName: "Vec3"
                }]), k144(w146.prototype, "Vec3", [{
                    name: "mag",
                    newName: "length",
                    target: w146.prototype,
                    targetName: "Vec3"
                }, {
                    name: "magSqr",
                    newName: "lengthSqr",
                    target: w146.prototype,
                    targetName: "Vec3"
                }, {
                    name: "scale",
                    newName: "multiplyScalar",
                    target: w146.prototype,
                    targetName: "Vec3"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: w146.prototype,
                    targetName: "Vec3"
                }]), k144(v146, "Vec4", [{
                    name: "sub",
                    newName: "subtract",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "div",
                    newName: "divide",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "dist",
                    newName: "distance",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "sqrDist",
                    newName: "squaredDistance",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "mag",
                    newName: "len",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "sqrMag",
                    newName: "lengthSqr",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "scale",
                    newName: "multiplyScalar",
                    target: v146,
                    targetName: "Vec4"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: v146,
                    targetName: "Vec4"
                }]), k144(v146.prototype, "Vec4", [{
                    name: "mag",
                    newName: "length",
                    target: v146.prototype,
                    targetName: "Vec4"
                }, {
                    name: "magSqr",
                    newName: "lengthSqr",
                    target: v146.prototype,
                    targetName: "Vec4"
                }, {
                    name: "scale",
                    newName: "multiplyScalar",
                    target: v146.prototype,
                    targetName: "Vec4"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: v146.prototype,
                    targetName: "Vec4"
                }]), k144(g147, "Quat", [{
                    name: "mag",
                    newName: "len",
                    target: g147,
                    targetName: "Quat"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: g147,
                    targetName: "Quat"
                }, {
                    name: "sqrMag",
                    newName: "lengthSqr",
                    target: g147,
                    targetName: "Quat"
                }, {
                    name: "scale",
                    newName: "multiplyScalar",
                    target: g147,
                    targetName: "Quat"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: g147,
                    targetName: "Quat"
                }]), k144(g147.prototype, "Quat", [{
                    name: "scale",
                    newName: "multiplyScalar",
                    target: g147.prototype,
                    targetName: "Quat"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: g147.prototype,
                    targetName: "Quat"
                }]), k144(a147, "Color", [{
                    name: "sub",
                    newName: "subtract",
                    target: a147,
                    targetName: "Color"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: a147,
                    targetName: "Color"
                }, {
                    name: "div",
                    newName: "divide",
                    target: a147,
                    targetName: "Color"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: a147,
                    targetName: "Color"
                }, {
                    name: "fromHex",
                    newName: "fromHEX",
                    customFunction(...n1282) {
                        const o1282 = n1282[1].toString(16);
                        return s143.Color.fromHEX(n1282[0], o1282);
                    }
                }]), k144(c147, "Mat3", [{
                    name: "sub",
                    newName: "subtract",
                    target: c147,
                    targetName: "Mat3"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: c147,
                    targetName: "Mat3"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: c147,
                    targetName: "Mat3"
                }, {
                    name: "transfrom",
                    newName: "transform",
                    target: c147,
                    targetName: "Mat3"
                }]), k144(c147.prototype, "Mat3", [{
                    name: "sub",
                    newName: "subtract",
                    target: c147.prototype,
                    targetName: "Mat3"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: c147.prototype,
                    targetName: "Mat3"
                }, {
                    name: "mulScalar",
                    newName: "multiplyScalar",
                    target: c147.prototype,
                    targetName: "Mat3"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: c147.prototype,
                    targetName: "Mat3"
                }]), k144(o147, "Mat4", [{
                    name: "sub",
                    newName: "subtract",
                    target: o147,
                    targetName: "Mat4"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: o147,
                    targetName: "Mat4"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: o147,
                    targetName: "Mat4"
                }]), k144(o147.prototype, "Mat4", [{
                    name: "sub",
                    newName: "subtract",
                    target: o147.prototype,
                    targetName: "Mat4"
                }, {
                    name: "mul",
                    newName: "multiply",
                    target: o147.prototype,
                    targetName: "Mat4"
                }, {
                    name: "mulScalar",
                    newName: "multiplyScalar",
                    target: o147.prototype,
                    targetName: "Mat4"
                }, {
                    name: "exactEquals",
                    newName: "strictEquals",
                    target: o147.prototype,
                    targetName: "Mat4"
                }]);
            const t147 = (j1282, k1282, l1282) => {
                Object.defineProperty(j1282, k1282, {
                    configurable: !0,
                    enumerable: !0,
                    get() {
                        return this._data()[l1282];
                    },
                    set(m1282) {
                        this._data()[l1282] = m1282;
                    }
                });
            };
            let u147;
            function y129(f1282, g1282, h1282) {
                f1282._data = function () {
                    return this.__data || (this.__data = new Float32Array(this.underlyingData())), this.__data;
                }, Object.setPrototypeOf(f1282, g1282), Object.defineProperty(f1282, "type", {
                    configurable: !0,
                    enumerable: !0,
                    writable: !1,
                    value: h1282
                });
            }
            function z129(b1282, c1282) {
                for (const e1282 of ["__cid__", "__classname__"])
                    Object.defineProperty(b1282.prototype, e1282, {
                        value: c1282.prototype[e1282],
                        writable: !1,
                        enumerable: !1,
                        configurable: !0
                    });
                for (const d1282 of ["__attrs__", "__props__", "__values__"])
                    b1282[d1282] = c1282[d1282];
            }
            !function (a1282) {
                a1282[a1282.VEC2 = 0] = "VEC2", a1282[a1282.VEC3 = 1] = "VEC3", a1282[a1282.VEC4 = 2] = "VEC4", a1282[a1282.QUATERNION = 3] = "QUATERNION", a1282[a1282.MAT3 = 4] = "MAT3", a1282[a1282.MAT4 = 5] = "MAT4", a1282[a1282.SIZE = 6] = "SIZE", a1282[a1282.RECT = 7] = "RECT", a1282[a1282.COLOR = 8] = "COLOR";
            }(u147 || (u147 = {})), y129(jsb.Mat4.prototype, o147.prototype, u147.MAT4);
            for (let y1281 = 0; y1281 < 16; y1281++) {
                const z1281 = `0${y1281}`;
                t147(jsb.Mat4.prototype, `m${z1281.substring(z1281.length - 2)}`, y1281);
            }
            for (let w1281 = 0; w1281 < 9; w1281++) {
                const x1281 = `0${w1281}`;
                t147(jsb.Mat3.prototype, `m${x1281.substring(x1281.length - 2)}`, w1281);
            }
            y129(jsb.Mat3.prototype, c147.prototype, u147.MAT3), t147(jsb.Vec2.prototype, "x", 0), t147(jsb.Vec2.prototype, "y", 1), y129(jsb.Vec2.prototype, s147.prototype, u147.VEC2), t147(jsb.Vec3.prototype, "x", 0), t147(jsb.Vec3.prototype, "y", 1), t147(jsb.Vec3.prototype, "z", 2), y129(jsb.Vec3.prototype, w146.prototype, u147.VEC3), t147(jsb.Vec4.prototype, "x", 0), t147(jsb.Vec4.prototype, "y", 1), t147(jsb.Vec4.prototype, "z", 2), t147(jsb.Vec4.prototype, "w", 3), y129(jsb.Vec4.prototype, v146.prototype, u147.VEC4), t147(jsb.Quat.prototype, "x", 0), t147(jsb.Quat.prototype, "y", 1), t147(jsb.Quat.prototype, "z", 2), t147(jsb.Quat.prototype, "w", 3), y129(jsb.Quat.prototype, g147.prototype, u147.QUATERNION), Object.setPrototypeOf(jsb.Color.prototype, a147.prototype), Object.defineProperty(jsb.Color.prototype, "type", {
                configurable: !0,
                enumerable: !0,
                writable: !1,
                value: u147.COLOR
            }), z129(jsb.Vec4, v146), z129(jsb.Vec3, w146), z129(jsb.Vec2, s147), z129(jsb.Mat4, o147), z129(jsb.Mat3, c147), z129(jsb.Color, a147), z129(jsb.Quat, g147);
            class v147 {
                static identity() {
                    return new v147();
                }
                static clone(v1281) {
                    return new v147(v1281.a, v1281.b, v1281.c, v1281.d, v1281.tx, v1281.ty);
                }
                static concat(m1281, n1281, o1281) {
                    const p1281 = n1281.a, q1281 = n1281.b, r1281 = n1281.c, s1281 = n1281.d, t1281 = n1281.tx, u1281 = n1281.ty;
                    m1281.a = p1281 * o1281.a + q1281 * o1281.c, m1281.b = p1281 * o1281.b + q1281 * o1281.d, m1281.c = r1281 * o1281.a + s1281 * o1281.c, m1281.d = r1281 * o1281.b + s1281 * o1281.d, m1281.tx = t1281 * o1281.a + u1281 * o1281.c + o1281.tx, m1281.ty = t1281 * o1281.b + u1281 * o1281.d + o1281.ty;
                }
                static invert(j1281, k1281) {
                    const l1281 = 1 / (k1281.a * k1281.d - k1281.b * k1281.c);
                    j1281.a = l1281 * k1281.d, j1281.b = -l1281 * k1281.b, j1281.c = -l1281 * k1281.c, j1281.d = l1281 * k1281.a, j1281.tx = l1281 * (k1281.c * k1281.ty - k1281.d * k1281.tx), j1281.ty = l1281 * (k1281.b * k1281.tx - k1281.a * k1281.ty);
                }
                static fromMat4(h1281, i1281) {
                    h1281.a = i1281.m00, h1281.b = i1281.m01, h1281.c = i1281.m04, h1281.d = i1281.m05, h1281.tx = i1281.m12, h1281.ty = i1281.m13;
                }
                static transformVec2(b1281, c1281, d1281, e1281) {
                    let f1281, g1281;
                    e1281 ? (f1281 = c1281, g1281 = d1281) : (e1281 = d1281, f1281 = c1281.x, g1281 = c1281.y), b1281.x = e1281.a * f1281 + e1281.c * g1281 + e1281.tx, b1281.y = e1281.b * f1281 + e1281.d * g1281 + e1281.ty;
                }
                static transformSize(y1280, z1280, a1281) {
                    y1280.width = a1281.a * z1280.width + a1281.c * z1280.height, y1280.height = a1281.b * z1280.width + a1281.d * z1280.height;
                }
                static transformRect(h1280, i1280, j1280) {
                    const k1280 = i1280.x + i1280.width, l1280 = i1280.y + i1280.height, m1280 = j1280.a * i1280.x + j1280.c * i1280.y + j1280.tx, n1280 = j1280.b * i1280.x + j1280.d * i1280.y + j1280.ty, o1280 = j1280.a * k1280 + j1280.c * i1280.y + j1280.tx, p1280 = j1280.b * k1280 + j1280.d * i1280.y + j1280.ty, q1280 = j1280.a * i1280.x + j1280.c * l1280 + j1280.tx, r1280 = j1280.b * i1280.x + j1280.d * l1280 + j1280.ty, s1280 = j1280.a * k1280 + j1280.c * l1280 + j1280.tx, t1280 = j1280.b * k1280 + j1280.d * l1280 + j1280.ty, u1280 = Math.min(m1280, o1280, q1280, s1280), v1280 = Math.max(m1280, o1280, q1280, s1280), w1280 = Math.min(n1280, p1280, r1280, t1280), x1280 = Math.max(n1280, p1280, r1280, t1280);
                    h1280.x = u1280, h1280.y = w1280, h1280.width = v1280 - u1280, h1280.height = x1280 - w1280;
                }
                static transformObb(u1279, v1279, w1279, x1279, y1279, z1279, a1280 = !0) {
                    const b1280 = z1279.a * y1279.x + z1279.c * y1279.y + z1279.tx, c1280 = z1279.b * y1279.x + z1279.d * y1279.y + z1279.ty, d1280 = z1279.a * y1279.width, e1280 = z1279.b * y1279.width, f1280 = z1279.c * y1279.height, g1280 = z1279.d * y1279.height;
                    a1280 ? (v1279.x = b1280, v1279.y = c1280, w1279.x = d1280 + b1280, w1279.y = e1280 + c1280, u1279.x = f1280 + b1280, u1279.y = g1280 + c1280, x1279.x = d1280 + f1280 + b1280, x1279.y = e1280 + g1280 + c1280) : (u1279.x = b1280, u1279.y = c1280, x1279.x = d1280 + b1280, x1279.y = e1280 + c1280, v1279.x = f1280 + b1280, v1279.y = g1280 + c1280, w1279.x = d1280 + f1280 + b1280, w1279.y = e1280 + g1280 + c1280);
                }
                constructor(o1279 = 1, p1279 = 0, q1279 = 0, r1279 = 1, s1279 = 0, t1279 = 0) {
                    this.a = o1279, this.b = p1279, this.c = q1279, this.d = r1279, this.tx = s1279, this.ty = t1279;
                }
            }
            var w147;
            g125("AffineTransform", v147), s143.AffineTransform = v147;
            class x147 extends p145 {
                static lerp(i1279, j1279, k1279, l1279) {
                    return i1279.width = j1279.width + (k1279.width - j1279.width) * l1279, i1279.height = j1279.height + (k1279.height - j1279.height) * l1279, i1279;
                }
                static equals(f1279, g1279) {
                    return f1279.width === g1279.width && f1279.height === g1279.height;
                }
                set x(e1279) {
                    this.width = e1279;
                }
                get x() {
                    return this.width;
                }
                set y(d1279) {
                    this.height = d1279;
                }
                get y() {
                    return this.height;
                }
                constructor(b1279, c1279) {
                    super(), "object" == typeof b1279 ? (this.width = b1279.width, this.height = b1279.height) : (this.width = b1279 || 0, this.height = c1279 || 0);
                }
                clone() {
                    return new x147(this.width, this.height);
                }
                set(z1278, a1279) {
                    return "object" == typeof z1278 ? (this.height = z1278.height, this.width = z1278.width) : (this.width = z1278 || 0, this.height = a1279 || 0), this;
                }
                equals(h1279) {
                    return this.width === h1279.width && this.height === h1279.height;
                }
                lerp(m1279, n1279) {
                    return this.width += (m1279.width - this.width) * n1279, this.height += (m1279.height - this.height) * n1279, this;
                }
                toString() {
                    return `(${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
                }
            }
            function a130(x1278 = 0, y1278 = 0) {
                return new x147(x1278, y1278);
            }
            g125("Size", x147), w147 = x147, x147.ZERO = Object.freeze(new w147(0, 0)), x147.ONE = Object.freeze(new w147(1, 1)), s128.fastDefine("cc.Size", x147, {
                width: 0,
                height: 0
            }), s143.size = a130, s143.Size = x147;
            class y147 extends p145 {
                static fromMinMax(q1278, r1278, s1278) {
                    const t1278 = Math.min(r1278.x, s1278.x), u1278 = Math.min(r1278.y, s1278.y), v1278 = Math.max(r1278.x, s1278.x), w1278 = Math.max(r1278.y, s1278.y);
                    return q1278.x = t1278, q1278.y = u1278, q1278.width = v1278 - t1278, q1278.height = w1278 - u1278, q1278;
                }
                static lerp(c1278, d1278, e1278, f1278) {
                    const g1278 = d1278.x, h1278 = d1278.y, i1278 = d1278.width, j1278 = d1278.height;
                    return c1278.x = g1278 + (e1278.x - g1278) * f1278, c1278.y = h1278 + (e1278.y - h1278) * f1278, c1278.width = i1278 + (e1278.width - i1278) * f1278, c1278.height = j1278 + (e1278.height - j1278) * f1278, c1278;
                }
                static intersection(r1277, s1277, t1277) {
                    const u1277 = s1277.x, v1277 = s1277.y, w1277 = s1277.x + s1277.width, x1277 = s1277.y + s1277.height, y1277 = t1277.x, z1277 = t1277.y, a1278 = t1277.x + t1277.width, b1278 = t1277.y + t1277.height;
                    return r1277.x = Math.max(u1277, y1277), r1277.y = Math.max(v1277, z1277), r1277.width = Math.min(w1277, a1278) - r1277.x, r1277.height = Math.min(x1277, b1278) - r1277.y, r1277;
                }
                static union(g1277, h1277, i1277) {
                    const j1277 = h1277.x, k1277 = h1277.y, l1277 = h1277.width, m1277 = h1277.height, n1277 = i1277.x, o1277 = i1277.y, p1277 = i1277.width, q1277 = i1277.height;
                    return g1277.x = Math.min(j1277, n1277), g1277.y = Math.min(k1277, o1277), g1277.width = Math.max(j1277 + l1277, n1277 + p1277) - g1277.x, g1277.height = Math.max(k1277 + m1277, o1277 + q1277) - g1277.y, g1277;
                }
                static equals(d1277, e1277) {
                    return d1277.x === e1277.x && d1277.y === e1277.y && d1277.width === e1277.width && d1277.height === e1277.height;
                }
                get xMin() {
                    return this.x;
                }
                set xMin(c1277) {
                    this.width += this.x - c1277, this.x = c1277;
                }
                get yMin() {
                    return this.y;
                }
                set yMin(b1277) {
                    this.height += this.y - b1277, this.y = b1277;
                }
                get xMax() {
                    return this.x + this.width;
                }
                set xMax(a1277) {
                    this.width = a1277 - this.x;
                }
                get yMax() {
                    return this.y + this.height;
                }
                set yMax(z1276) {
                    this.height = z1276 - this.y;
                }
                get center() {
                    return new s147(this.x + .5 * this.width, this.y + .5 * this.height);
                }
                set center(y1276) {
                    this.x = y1276.x - .5 * this.width, this.y = y1276.y - .5 * this.height;
                }
                get origin() {
                    return new s147(this.x, this.y);
                }
                set origin(x1276) {
                    this.x = x1276.x, this.y = x1276.y;
                }
                get size() {
                    return new x147(this.width, this.height);
                }
                set size(w1276) {
                    this.width = w1276.width, this.height = w1276.height;
                }
                set z(v1276) {
                    this.width = v1276;
                }
                get z() {
                    return this.width;
                }
                set w(u1276) {
                    this.height = u1276;
                }
                get w() {
                    return this.height;
                }
                constructor(q1276, r1276, s1276, t1276) {
                    super(), "object" == typeof q1276 ? (this.x = q1276.x, this.y = q1276.y, this.width = q1276.width, this.height = q1276.height) : (this.x = q1276 || 0, this.y = r1276 || 0, this.width = s1276 || 0, this.height = t1276 || 0);
                }
                clone() {
                    return new y147(this.x, this.y, this.width, this.height);
                }
                set(m1276, n1276, o1276, p1276) {
                    return "object" == typeof m1276 ? (this.x = m1276.x, this.y = m1276.y, this.width = m1276.width, this.height = m1276.height) : (this.x = m1276 || 0, this.y = n1276 || 0, this.width = o1276 || 0, this.height = p1276 || 0), this;
                }
                equals(f1277) {
                    return this.x === f1277.x && this.y === f1277.y && this.width === f1277.width && this.height === f1277.height;
                }
                lerp(k1278, l1278) {
                    const m1278 = this.x, n1278 = this.y, o1278 = this.width, p1278 = this.height;
                    return this.x = m1278 + (k1278.x - m1278) * l1278, this.y = n1278 + (k1278.y - n1278) * l1278, this.width = o1278 + (k1278.width - o1278) * l1278, this.height = p1278 + (k1278.height - p1278) * l1278, this;
                }
                toString() {
                    return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
                }
                intersects(h1276) {
                    const i1276 = this.x + this.width, j1276 = this.y + this.height, k1276 = h1276.x + h1276.width, l1276 = h1276.y + h1276.height;
                    return !(i1276 < h1276.x || k1276 < this.x || j1276 < h1276.y || l1276 < this.y);
                }
                contains(g1276) {
                    return this.x <= g1276.x && this.x + this.width >= g1276.x && this.y <= g1276.y && this.y + this.height >= g1276.y;
                }
                containsRect(f1276) {
                    return this.x <= f1276.x && this.x + this.width >= f1276.x + f1276.width && this.y <= f1276.y && this.y + this.height >= f1276.y + f1276.height;
                }
                transformMat4(o1275) {
                    const p1275 = this.x, q1275 = this.y, r1275 = p1275 + this.width, s1275 = q1275 + this.height, t1275 = o1275.m00 * p1275 + o1275.m04 * q1275 + o1275.m12, u1275 = o1275.m01 * p1275 + o1275.m05 * q1275 + o1275.m13, v1275 = o1275.m00 * r1275 + o1275.m04 * q1275 + o1275.m12, w1275 = o1275.m01 * r1275 + o1275.m05 * q1275 + o1275.m13, x1275 = o1275.m00 * p1275 + o1275.m04 * s1275 + o1275.m12, y1275 = o1275.m01 * p1275 + o1275.m05 * s1275 + o1275.m13, z1275 = o1275.m00 * r1275 + o1275.m04 * s1275 + o1275.m12, a1276 = o1275.m01 * r1275 + o1275.m05 * s1275 + o1275.m13, b1276 = Math.min(t1275, v1275, x1275, z1275), c1276 = Math.max(t1275, v1275, x1275, z1275), d1276 = Math.min(u1275, w1275, y1275, a1276), e1276 = Math.max(u1275, w1275, y1275, a1276);
                    return this.x = b1276, this.y = d1276, this.width = c1276 - b1276, this.height = e1276 - d1276, this;
                }
                transformMat4ToPoints(f1275, g1275, h1275, i1275, j1275) {
                    const k1275 = this.x, l1275 = this.y, m1275 = k1275 + this.width, n1275 = l1275 + this.height;
                    g1275.x = f1275.m00 * k1275 + f1275.m04 * l1275 + f1275.m12, g1275.y = f1275.m01 * k1275 + f1275.m05 * l1275 + f1275.m13, j1275.x = f1275.m00 * m1275 + f1275.m04 * l1275 + f1275.m12, j1275.y = f1275.m01 * m1275 + f1275.m05 * l1275 + f1275.m13, h1275.x = f1275.m00 * k1275 + f1275.m04 * n1275 + f1275.m12, h1275.y = f1275.m01 * k1275 + f1275.m05 * n1275 + f1275.m13, i1275.x = f1275.m00 * m1275 + f1275.m04 * n1275 + f1275.m12, i1275.y = f1275.m01 * m1275 + f1275.m05 * n1275 + f1275.m13;
                }
            }
            function b130(b1275 = 0, c1275 = 0, d1275 = 0, e1275 = 0) {
                return new y147(b1275, c1275, d1275, e1275);
            }
            g125("Rect", y147), s128.fastDefine("cc.Rect", y147, {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            }), s143.Rect = y147, s143.rect = b130;
            const z147 = g125("MATH_FLOAT_ARRAY", Float32Array);
            class a148 extends p145 {
                static createFloatArray(a1275) {
                    return new z147(a1275);
                }
                get array() {
                    return this._array;
                }
            }
            g125("MathBase", a148);
            var b148 = Object.freeze({
                __proto__: null,
                bits: w143,
                Vec2: s147,
                v2: x129,
                Vec3: w146,
                v3: t129,
                Vec4: v146,
                v4: s129,
                Quat: g147,
                quat: v129,
                Mat3: c147,
                Mat4: o147,
                mat4: w129,
                AffineTransform: v147,
                Size: x147,
                size: a130,
                Rect: y147,
                rect: b130,
                Color: a147,
                color: u129,
                preTransforms: n147,
                HALF_PI: o146,
                TWO_PI: p146,
                EPSILON: q146,
                equals: v128,
                approx: w128,
                clamp: x128,
                clamp01: y128,
                lerp: z128,
                toRadian: a129,
                toDegree: b129,
                random: c129,
                setRandGenerator: d129,
                randomRange: e129,
                randomRangeInt: f129,
                pseudoRandom: g129,
                pseudoRandomRange: h129,
                pseudoRandomRangeInt: i129,
                nextPow2: j129,
                repeat: k129,
                pingPong: l129,
                inverseLerp: m129,
                absMaxComponent: n129,
                absMax: o129,
                enumerableProps: p129,
                floatToHalf: q129,
                halfToFloat: r129,
                MATH_FLOAT_ARRAY: z147,
                MathBase: a148
            });
            g125("math", b148);
            const c148 = new w146(), d148 = new w146(), e148 = new w146(), f148 = new w146(), g148 = new w146(), h148 = new w146(), i148 = new Array(3), j148 = new Array(3);
            function c130(y1274, z1274) {
                return w146.dot(z1274.n, y1274) - z1274.d;
            }
            function d130(v1274, w1274, x1274) {
                return w146.copy(v1274, w1274), w146.subtract(g148, x1274.center, x1274.halfExtents), w146.add(h148, x1274.center, x1274.halfExtents), v1274.x = v1274.x < g148.x ? g148.x : v1274.x, v1274.y = v1274.y < g148.y ? g148.y : v1274.y, v1274.z = v1274.z < g148.z ? g148.z : v1274.z, v1274.x = v1274.x > h148.x ? h148.x : v1274.x, v1274.y = v1274.y > h148.y ? h148.y : v1274.y, v1274.z = v1274.z > h148.z ? h148.z : v1274.z, v1274;
            }
            function e130(q1274, r1274, s1274) {
                w146.set(c148, s1274.orientation.m00, s1274.orientation.m01, s1274.orientation.m02), w146.set(d148, s1274.orientation.m03, s1274.orientation.m04, s1274.orientation.m05), w146.set(e148, s1274.orientation.m06, s1274.orientation.m07, s1274.orientation.m08), i148[0] = c148, i148[1] = d148, i148[2] = e148, j148[0] = s1274.halfExtents.x, j148[1] = s1274.halfExtents.y, j148[2] = s1274.halfExtents.z, w146.subtract(f148, r1274, s1274.center), w146.set(q1274, s1274.center.x, s1274.center.y, s1274.center.z);
                for (let t1274 = 0; t1274 < 3; t1274++) {
                    let u1274 = w146.dot(f148, i148[t1274]);
                    u1274 > j148[t1274] && (u1274 = j148[t1274]), u1274 < -j148[t1274] && (u1274 = -j148[t1274]), q1274.x += u1274 * i148[t1274].x, q1274.y += u1274 * i148[t1274].y, q1274.z += u1274 * i148[t1274].z;
                }
                return q1274;
            }
            var k148 = Object.freeze({
                __proto__: null,
                point_plane: c130,
                pt_point_plane: function (m1274, n1274, o1274) {
                    const p1274 = c130(n1274, o1274);
                    return w146.subtract(m1274, n1274, w146.multiplyScalar(m1274, o1274.n, p1274));
                },
                pt_point_aabb: d130,
                pt_point_obb: e130,
                pt_point_line: function (f1274, g1274, h1274, i1274) {
                    w146.subtract(c148, h1274, i1274);
                    const j1274 = c148.clone(), k1274 = w146.lengthSqr(j1274);
                    if (0 === k1274)
                        w146.copy(f1274, h1274);
                    else {
                        w146.subtract(c148, g1274, h1274);
                        const l1274 = w146.dot(c148, j1274) / k1274;
                        l1274 < 0 ? w146.copy(f1274, h1274) : l1274 > 1 ? w146.copy(f1274, i1274) : w146.scaleAndAdd(f1274, h1274, j1274, l1274);
                    }
                }
            }), l148 = {
                SHAPE_RAY: 1,
                SHAPE_LINE: 2,
                SHAPE_SPHERE: 4,
                SHAPE_AABB: 8,
                SHAPE_OBB: 16,
                SHAPE_PLANE: 32,
                SHAPE_TRIANGLE: 64,
                SHAPE_FRUSTUM: 128,
                SHAPE_FRUSTUM_ACCURATE: 256,
                SHAPE_CAPSULE: 512,
                SHAPE_SPLINE: 1024
            };
            class m148 {
                static create(z1273, a1274, b1274, c1274, d1274, e1274) {
                    return new m148(z1273, a1274, b1274, c1274, d1274, e1274);
                }
                static clone(y1273) {
                    return new m148(y1273.s.x, y1273.s.y, y1273.s.z, y1273.e.x, y1273.e.y, y1273.e.z);
                }
                static copy(w1273, x1273) {
                    return w146.copy(w1273.s, x1273.s), w146.copy(w1273.e, x1273.e), w1273;
                }
                static fromPoints(t1273, u1273, v1273) {
                    return w146.copy(t1273.s, u1273), w146.copy(t1273.e, v1273), t1273;
                }
                static set(m1273, n1273, o1273, p1273, q1273, r1273, s1273) {
                    return m1273.s.x = n1273, m1273.s.y = o1273, m1273.s.z = p1273, m1273.e.x = q1273, m1273.e.y = r1273, m1273.e.z = s1273, m1273;
                }
                static len(l1273) {
                    return w146.distance(l1273.s, l1273.e);
                }
                get type() {
                    return this._type;
                }
                constructor(f1273 = 0, g1273 = 0, h1273 = 0, i1273 = 0, j1273 = 0, k1273 = -1) {
                    this.s = void 0, this.e = void 0, this._type = void 0, this._type = l148.SHAPE_LINE, this.s = new w146(f1273, g1273, h1273), this.e = new w146(i1273, j1273, k1273);
                }
                length() {
                    return w146.distance(this.s, this.e);
                }
            }
            class n148 {
                static create(z1272 = 0, a1273 = 0, b1273 = 0, c1273 = 0, d1273 = 0, e1273 = 1) {
                    return new n148(z1272, a1273, b1273, c1273, d1273, e1273);
                }
                static clone(y1272) {
                    return new n148(y1272.o.x, y1272.o.y, y1272.o.z, y1272.d.x, y1272.d.y, y1272.d.z);
                }
                static copy(w1272, x1272) {
                    return w146.copy(w1272.o, x1272.o), w146.copy(w1272.d, x1272.d), w1272;
                }
                static fromPoints(t1272, u1272, v1272) {
                    return w146.copy(t1272.o, u1272), w146.normalize(t1272.d, w146.subtract(t1272.d, v1272, u1272)), t1272;
                }
                static set(m1272, n1272, o1272, p1272, q1272, r1272, s1272) {
                    return m1272.o.x = n1272, m1272.o.y = o1272, m1272.o.z = p1272, m1272.d.x = q1272, m1272.d.y = r1272, m1272.d.z = s1272, m1272;
                }
                get type() {
                    return this._type;
                }
                constructor(g1272 = 0, h1272 = 0, i1272 = 0, j1272 = 0, k1272 = 0, l1272 = -1) {
                    this.o = void 0, this.d = void 0, this._type = void 0, this._type = l148.SHAPE_RAY, this.o = new w146(g1272, h1272, i1272), this.d = new w146(j1272, k1272, l1272);
                }
                computeHit(e1272, f1272) {
                    w146.normalize(e1272, this.d), w146.scaleAndAdd(e1272, this.o, e1272, f1272);
                }
            }
            const o148 = new w146(), p148 = new w146(), q148 = new w146(), r148 = new w146();
            function f130(d1272) {
                return Math.max(Math.max(d1272.x, d1272.y), d1272.z);
            }
            class s148 {
                static create(z1271, a1272, b1272, c1272) {
                    return new s148(z1271, a1272, b1272, c1272);
                }
                static clone(y1271) {
                    return new s148(y1271.center.x, y1271.center.y, y1271.center.z, y1271.radius);
                }
                static copy(v1271, w1271) {
                    return w146.copy(v1271.center, w1271.center), v1271.radius = w1271.radius, v1271;
                }
                static fromPoints(s1271, t1271, u1271) {
                    return w146.multiplyScalar(s1271.center, w146.add(o148, t1271, u1271), .5), s1271.radius = .5 * w146.subtract(o148, u1271, t1271).length(), s1271;
                }
                static set(n1271, o1271, p1271, q1271, r1271) {
                    return n1271.center.x = o1271, n1271.center.y = p1271, n1271.center.z = q1271, n1271.radius = r1271, n1271;
                }
                get center() {
                    return this._center;
                }
                set center(m1271) {
                    this._center = m1271;
                }
                get radius() {
                    return this._radius;
                }
                set radius(l1271) {
                    this._radius = l1271;
                }
                get type() {
                    return this._type;
                }
                constructor(h1271 = 0, i1271 = 0, j1271 = 0, k1271 = 1) {
                    this._center = new w146(0, 0, 0), this._radius = 0, this._type = void 0, this._type = l148.SHAPE_SPHERE, this._center = new w146(h1271, i1271, j1271), this._radius = k1271;
                }
                destroy() { }
                clone() {
                    return s148.clone(this);
                }
                copy(x1271) {
                    return s148.copy(this, x1271);
                }
                getBoundary(f1271, g1271) {
                    w146.set(f1271, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius), w146.set(g1271, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
                }
                transform(a1271, b1271, c1271, d1271, e1271) {
                    w146.transformMat4(e1271.center, this.center, a1271), e1271.radius = this.radius * f130(d1271);
                }
                translateAndRotate(x1270, y1270, z1270) {
                    w146.transformMat4(z1270.center, this.center, x1270);
                }
                setScale(v1270, w1270) {
                    w1270.radius = this.radius * f130(v1270);
                }
                mergePoint(s1270) {
                    this.radius < 0 && (this.center.set(s1270), this.radius = 0), w146.subtract(p148, s1270, this.center);
                    const t1270 = p148.length();
                    if (t1270 > this.radius) {
                        const u1270 = .5 * (t1270 - this.radius);
                        this.radius += u1270, w146.multiplyScalar(p148, p148, u1270 / t1270), w146.add(this.center, this.center, p148);
                    }
                }
                mergePoints(p1270) {
                    const q1270 = p1270.length;
                    if (!(q1270 < 1)) {
                        this.radius = -1;
                        for (let r1270 = 0; r1270 < q1270; r1270++)
                            this.mergePoint(p1270[r1270]);
                    }
                }
                mergeAABB(o1270) {
                    o1270.getBoundary(q148, r148), this.mergePoint(q148), this.mergePoint(r148);
                }
            }
            const t148 = function (k1270, l1270) {
                const m1270 = w146.dot(k1270.d, l1270.n);
                if (Math.abs(m1270) < Number.EPSILON)
                    return 0;
                const n1270 = -c130(k1270.o, l1270) / m1270;
                return n1270 < 0 ? 0 : n1270;
            }, u148 = function () {
                const w1269 = new w146(0, 0, 0), x1269 = new w146(0, 0, 0), y1269 = new w146(0, 0, 0), z1269 = new w146(0, 0, 0), a1270 = new w146(0, 0, 0);
                return function (c1270, d1270, e1270) {
                    w146.subtract(w1269, d1270.b, d1270.a), w146.subtract(x1269, d1270.c, d1270.a), w146.cross(y1269, c1270.d, x1269);
                    const f1270 = w146.dot(w1269, y1269);
                    if (f1270 < Number.EPSILON && (!e1270 || f1270 > -Number.EPSILON))
                        return 0;
                    const g1270 = 1 / f1270;
                    w146.subtract(z1269, c1270.o, d1270.a);
                    const h1270 = w146.dot(z1269, y1269) * g1270;
                    if (h1270 < 0 || h1270 > 1)
                        return 0;
                    w146.cross(a1270, z1269, w1269);
                    const i1270 = w146.dot(c1270.d, a1270) * g1270;
                    if (i1270 < 0 || h1270 + i1270 > 1)
                        return 0;
                    const j1270 = w146.dot(x1269, a1270) * g1270;
                    return j1270 < 0 ? 0 : j1270;
                };
            }(), v148 = function () {
                const i1269 = new w146(0, 0, 0);
                return function (k1269, l1269) {
                    const m1269 = l1269.radius, n1269 = l1269.center, o1269 = k1269.o, p1269 = k1269.d, q1269 = m1269 * m1269;
                    w146.subtract(i1269, n1269, o1269);
                    const r1269 = i1269.lengthSqr(), s1269 = w146.dot(i1269, p1269), t1269 = q1269 - (r1269 - s1269 * s1269);
                    if (t1269 < 0)
                        return 0;
                    const u1269 = Math.sqrt(t1269), v1269 = r1269 < q1269 ? s1269 + u1269 : s1269 - u1269;
                    return v1269 < 0 ? 0 : v1269;
                };
            }(), w148 = function () {
                const m1268 = new w146(), n1268 = new w146();
                return function (p1268, q1268) {
                    return w146.subtract(m1268, q1268.center, q1268.halfExtents), w146.add(n1268, q1268.center, q1268.halfExtents), function (s1268, t1268, u1268) {
                        const v1268 = s1268.o, w1268 = s1268.d, x1268 = 1 / w1268.x, y1268 = 1 / w1268.y, z1268 = 1 / w1268.z, a1269 = (t1268.x - v1268.x) * x1268, b1269 = (u1268.x - v1268.x) * x1268, c1269 = (t1268.y - v1268.y) * y1268, d1269 = (u1268.y - v1268.y) * y1268, e1269 = (t1268.z - v1268.z) * z1268, f1269 = (u1268.z - v1268.z) * z1268, g1269 = Math.max(Math.max(Math.min(a1269, b1269), Math.min(c1269, d1269)), Math.min(e1269, f1269)), h1269 = Math.min(Math.min(Math.max(a1269, b1269), Math.max(c1269, d1269)), Math.max(e1269, f1269));
                        return h1269 < 0 || g1269 > h1269 ? 0 : g1269 > 0 ? g1269 : h1269;
                    }(p1268, m1268, n1268);
                };
            }(), x148 = function () {
                let v1267 = new w146(), w1267 = new w146(), x1267 = new w146();
                const y1267 = new w146(), z1267 = new w146(), a1268 = new w146(), b1268 = new w146(), c1268 = new Array(3), d1268 = new Array(3), e1268 = new Array(3), f1268 = new Array(6);
                return function (h1268, i1268) {
                    c1268[0] = i1268.halfExtents.x, c1268[1] = i1268.halfExtents.y, c1268[2] = i1268.halfExtents.z, v1267 = i1268.center, w1267 = h1268.o, x1267 = h1268.d, w146.set(y1267, i1268.orientation.m00, i1268.orientation.m01, i1268.orientation.m02), w146.set(z1267, i1268.orientation.m03, i1268.orientation.m04, i1268.orientation.m05), w146.set(a1268, i1268.orientation.m06, i1268.orientation.m07, i1268.orientation.m08), w146.subtract(b1268, v1267, w1267), d1268[0] = w146.dot(y1267, x1267), d1268[1] = w146.dot(z1267, x1267), d1268[2] = w146.dot(a1268, x1267), e1268[0] = w146.dot(y1267, b1268), e1268[1] = w146.dot(z1267, b1268), e1268[2] = w146.dot(a1268, b1268);
                    for (let l1268 = 0; l1268 < 3; ++l1268) {
                        if (0 === d1268[l1268]) {
                            if (-e1268[l1268] - c1268[l1268] > 0 || -e1268[l1268] + c1268[l1268] < 0)
                                return 0;
                            d1268[l1268] = 1e-7;
                        }
                        f1268[2 * l1268 + 0] = (e1268[l1268] + c1268[l1268]) / d1268[l1268], f1268[2 * l1268 + 1] = (e1268[l1268] - c1268[l1268]) / d1268[l1268];
                    }
                    const j1268 = Math.max(Math.max(Math.min(f1268[0], f1268[1]), Math.min(f1268[2], f1268[3])), Math.min(f1268[4], f1268[5])), k1268 = Math.min(Math.min(Math.max(f1268[0], f1268[1]), Math.max(f1268[2], f1268[3])), Math.max(f1268[4], f1268[5]));
                    return k1268 < 0 || j1268 > k1268 ? 0 : j1268 > 0 ? j1268 : k1268;
                };
            }(), y148 = function () {
                const r1266 = new w146(), s1266 = new w146(), t1266 = new w146(), u1266 = new w146(), v1266 = new w146(), w1266 = new w146(), x1266 = new w146(), y1266 = new s148();
                return function (a1267, b1267) {
                    const c1267 = b1267.ellipseCenter0, d1267 = b1267.ellipseCenter1, e1267 = w146.subtract(s1266, d1267, c1267);
                    if (e1267.length() < q146)
                        return y1266.radius = b1267.radius, y1266.center.set(b1267.ellipseCenter0), v149.raySphere(a1267, y1266);
                    const f1267 = a1267.o, g1267 = w146.subtract(t1266, f1267, c1267), h1267 = w146.normalize(r1266, a1267.d), i1267 = w146.cross(u1266, h1267, e1267), j1267 = i1267.lengthSqr();
                    if (0 === j1267) {
                        y1266.radius = b1267.radius;
                        const u1267 = w146.subtract(v1266, d1267, f1267);
                        return g1267.lengthSqr() < u1267.lengthSqr() ? y1266.center.set(c1267) : y1266.center.set(d1267), v149.raySphere(a1267, y1266);
                    }
                    const k1267 = w146.cross(v1266, g1267, e1267), l1267 = e1267.lengthSqr(), m1267 = 2 * w146.dot(i1267, k1267), n1267 = b1267.radius * b1267.radius, o1267 = m1267 * m1267 - 4 * j1267 * (k1267.lengthSqr() - n1267 * l1267);
                    if (o1267 < 0)
                        return 0;
                    const p1267 = (-m1267 - Math.sqrt(o1267)) / (2 * j1267);
                    if (p1267 < 0) {
                        y1266.radius = b1267.radius;
                        const t1267 = w146.subtract(w1266, d1267, f1267);
                        return g1267.lengthSqr() < t1267.lengthSqr() ? y1266.center.set(b1267.ellipseCenter0) : y1266.center.set(b1267.ellipseCenter1), v149.raySphere(a1267, y1266);
                    }
                    {
                        const q1267 = w146.scaleAndAdd(w1266, a1267.o, h1267, p1267), r1267 = w146.subtract(x1266, q1267, c1267), s1267 = w146.dot(r1267, e1267) / l1267;
                        return s1267 >= 0 && s1267 <= 1 ? p1267 : s1267 < 0 ? (y1266.radius = b1267.radius, y1266.center.set(b1267.ellipseCenter0), v149.raySphere(a1267, y1266)) : s1267 > 1 ? (y1266.radius = b1267.radius, y1266.center.set(b1267.ellipseCenter1), v149.raySphere(a1267, y1266)) : 0;
                    }
                };
            }(), z148 = function () {
                const m1266 = new w146(0, 0, 0);
                return function (o1266, p1266) {
                    w146.subtract(m1266, o1266.e, o1266.s);
                    const q1266 = -c130(o1266.s, p1266) / w146.dot(m1266, p1266.n);
                    return q1266 < 0 || q1266 > 1 ? 0 : q1266;
                };
            }(), a149 = function () {
                const w1265 = new w146(0, 0, 0), x1265 = new w146(0, 0, 0), y1265 = new w146(0, 0, 0), z1265 = new w146(0, 0, 0), a1266 = new w146(0, 0, 0), b1266 = new w146(0, 0, 0);
                return function (d1266, e1266, f1266) {
                    w146.subtract(w1265, e1266.b, e1266.a), w146.subtract(x1265, e1266.c, e1266.a), w146.subtract(y1265, d1266.s, d1266.e), w146.cross(a1266, w1265, x1265);
                    const g1266 = w146.dot(y1265, a1266);
                    if (g1266 <= 0)
                        return 0;
                    w146.subtract(z1265, d1266.s, e1266.a);
                    const h1266 = w146.dot(z1265, a1266);
                    if (h1266 < 0 || h1266 > g1266)
                        return 0;
                    w146.cross(b1266, y1265, z1265);
                    let i1266 = w146.dot(x1265, b1266);
                    if (i1266 < 0 || i1266 > g1266)
                        return 0;
                    let j1266 = -w146.dot(w1265, b1266);
                    if (j1266 < 0 || i1266 + j1266 > g1266)
                        return 0;
                    if (f1266) {
                        const k1266 = 1 / g1266;
                        i1266 *= k1266, j1266 *= k1266;
                        const l1266 = 1 - i1266 - j1266;
                        w146.set(f1266, e1266.a.x * l1266 + e1266.b.x * i1266 + e1266.c.x * j1266, e1266.a.y * l1266 + e1266.b.y * i1266 + e1266.c.y * j1266, e1266.a.z * l1266 + e1266.b.z * i1266 + e1266.c.z * j1266);
                    }
                    return 1;
                };
            }(), b149 = new n148();
            function g130(t1265, u1265) {
                b149.o.set(t1265.s), w146.subtract(b149.d, t1265.e, t1265.s), b149.d.normalize();
                const v1265 = w148(b149, u1265);
                return v1265 <= t1265.length() ? v1265 : 0;
            }
            function h130(q1265, r1265) {
                b149.o.set(q1265.s), w146.subtract(b149.d, q1265.e, q1265.s), b149.d.normalize();
                const s1265 = x148(b149, r1265);
                return s1265 <= q1265.length() ? s1265 : 0;
            }
            function i130(n1265, o1265) {
                b149.o.set(n1265.s), w146.subtract(b149.d, n1265.e, n1265.s), b149.d.normalize();
                const p1265 = v148(b149, o1265);
                return p1265 <= n1265.length() ? p1265 : 0;
            }
            const c149 = function () {
                const g1265 = new w146(), h1265 = new w146(), i1265 = new w146(), j1265 = new w146();
                return function (l1265, m1265) {
                    return w146.subtract(g1265, l1265.center, l1265.halfExtents), w146.add(h1265, l1265.center, l1265.halfExtents), w146.subtract(i1265, m1265.center, m1265.halfExtents), w146.add(j1265, m1265.center, m1265.halfExtents), g1265.x <= j1265.x && h1265.x >= i1265.x && g1265.y <= j1265.y && h1265.y >= i1265.y && g1265.z <= j1265.z && h1265.z >= i1265.z;
                };
            }();
            function j130(a1265, b1265, c1265, d1265, e1265, f1265) {
                w146.set(f1265[0], a1265.x + c1265.x * b1265.x + d1265.x * b1265.y + e1265.x * b1265.z, a1265.y + c1265.y * b1265.x + d1265.y * b1265.y + e1265.y * b1265.z, a1265.z + c1265.z * b1265.x + d1265.z * b1265.y + e1265.z * b1265.z), w146.set(f1265[1], a1265.x - c1265.x * b1265.x + d1265.x * b1265.y + e1265.x * b1265.z, a1265.y - c1265.y * b1265.x + d1265.y * b1265.y + e1265.y * b1265.z, a1265.z - c1265.z * b1265.x + d1265.z * b1265.y + e1265.z * b1265.z), w146.set(f1265[2], a1265.x + c1265.x * b1265.x - d1265.x * b1265.y + e1265.x * b1265.z, a1265.y + c1265.y * b1265.x - d1265.y * b1265.y + e1265.y * b1265.z, a1265.z + c1265.z * b1265.x - d1265.z * b1265.y + e1265.z * b1265.z), w146.set(f1265[3], a1265.x + c1265.x * b1265.x + d1265.x * b1265.y - e1265.x * b1265.z, a1265.y + c1265.y * b1265.x + d1265.y * b1265.y - e1265.y * b1265.z, a1265.z + c1265.z * b1265.x + d1265.z * b1265.y - e1265.z * b1265.z), w146.set(f1265[4], a1265.x - c1265.x * b1265.x - d1265.x * b1265.y - e1265.x * b1265.z, a1265.y - c1265.y * b1265.x - d1265.y * b1265.y - e1265.y * b1265.z, a1265.z - c1265.z * b1265.x - d1265.z * b1265.y - e1265.z * b1265.z), w146.set(f1265[5], a1265.x + c1265.x * b1265.x - d1265.x * b1265.y - e1265.x * b1265.z, a1265.y + c1265.y * b1265.x - d1265.y * b1265.y - e1265.y * b1265.z, a1265.z + c1265.z * b1265.x - d1265.z * b1265.y - e1265.z * b1265.z), w146.set(f1265[6], a1265.x - c1265.x * b1265.x + d1265.x * b1265.y - e1265.x * b1265.z, a1265.y - c1265.y * b1265.x + d1265.y * b1265.y - e1265.y * b1265.z, a1265.z - c1265.z * b1265.x + d1265.z * b1265.y - e1265.z * b1265.z), w146.set(f1265[7], a1265.x - c1265.x * b1265.x - d1265.x * b1265.y + e1265.x * b1265.z, a1265.y - c1265.y * b1265.x - d1265.y * b1265.y + e1265.y * b1265.z, a1265.z - c1265.z * b1265.x - d1265.z * b1265.y + e1265.z * b1265.z);
            }
            function k130(u1264, v1264) {
                let w1264 = w146.dot(v1264, u1264[0]), x1264 = w1264;
                for (let y1264 = 1; y1264 < 8; ++y1264) {
                    const z1264 = w146.dot(v1264, u1264[y1264]);
                    w1264 = z1264 < w1264 ? z1264 : w1264, x1264 = z1264 > x1264 ? z1264 : x1264;
                }
                return [w1264, x1264];
            }
            const d149 = function () {
                const c1264 = new Array(15);
                for (let t1264 = 0; t1264 < 15; t1264++)
                    c1264[t1264] = new w146(0, 0, 0);
                const d1264 = new Array(8), e1264 = new Array(8);
                for (let s1264 = 0; s1264 < 8; s1264++)
                    d1264[s1264] = new w146(0, 0, 0), e1264[s1264] = new w146(0, 0, 0);
                const f1264 = new w146(), g1264 = new w146();
                return function (i1264, j1264) {
                    w146.set(c1264[0], 1, 0, 0), w146.set(c1264[1], 0, 1, 0), w146.set(c1264[2], 0, 0, 1), w146.set(c1264[3], j1264.orientation.m00, j1264.orientation.m01, j1264.orientation.m02), w146.set(c1264[4], j1264.orientation.m03, j1264.orientation.m04, j1264.orientation.m05), w146.set(c1264[5], j1264.orientation.m06, j1264.orientation.m07, j1264.orientation.m08);
                    for (let r1264 = 0; r1264 < 3; ++r1264)
                        w146.cross(c1264[6 + 3 * r1264], c1264[r1264], c1264[3]), w146.cross(c1264[7 + 3 * r1264], c1264[r1264], c1264[4]), w146.cross(c1264[7 + 3 * r1264], c1264[r1264], c1264[5]);
                    w146.subtract(f1264, i1264.center, i1264.halfExtents), w146.add(g1264, i1264.center, i1264.halfExtents), function (o1264, p1264, q1264) {
                        w146.set(q1264[0], o1264.x, p1264.y, p1264.z), w146.set(q1264[1], o1264.x, p1264.y, o1264.z), w146.set(q1264[2], o1264.x, o1264.y, p1264.z), w146.set(q1264[3], o1264.x, o1264.y, o1264.z), w146.set(q1264[4], p1264.x, p1264.y, p1264.z), w146.set(q1264[5], p1264.x, p1264.y, o1264.z), w146.set(q1264[6], p1264.x, o1264.y, p1264.z), w146.set(q1264[7], p1264.x, o1264.y, o1264.z);
                    }(f1264, g1264, d1264), j130(j1264.center, j1264.halfExtents, c1264[3], c1264[4], c1264[5], e1264);
                    for (let l1264 = 0; l1264 < 15; ++l1264) {
                        const m1264 = k130(d1264, c1264[l1264]), n1264 = k130(e1264, c1264[l1264]);
                        if (n1264[0] > m1264[1] || m1264[0] > n1264[1])
                            return 0;
                    }
                    return 1;
                };
            }(), e149 = function (y1263, z1263) {
                const a1264 = y1263.halfExtents.x * Math.abs(z1263.n.x) + y1263.halfExtents.y * Math.abs(z1263.n.y) + y1263.halfExtents.z * Math.abs(z1263.n.z), b1264 = w146.dot(z1263.n, y1263.center);
                return b1264 + a1264 < z1263.d ? -1 : b1264 - a1264 > z1263.d ? 0 : 1;
            }, f149 = function (v1263, w1263) {
                for (let x1263 = 0; x1263 < w1263.planes.length; x1263++)
                    if (-1 === e149(v1263, w1263.planes[x1263]))
                        return 0;
                return 1;
            }, g149 = function () {
                const h1263 = new Array(8);
                let i1263 = 0, j1263 = 0;
                for (let u1263 = 0; u1263 < h1263.length; u1263++)
                    h1263[u1263] = new w146(0, 0, 0);
                return function (l1263, m1263) {
                    let n1263 = 0, o1263 = !1;
                    for (let t1263 = 0; t1263 < m1263.planes.length; t1263++) {
                        if (n1263 = e149(l1263, m1263.planes[t1263]), -1 === n1263)
                            return 0;
                        1 === n1263 && (o1263 = !0);
                    }
                    if (!o1263)
                        return 1;
                    for (let s1263 = 0; s1263 < m1263.vertices.length; s1263++)
                        w146.subtract(h1263[s1263], m1263.vertices[s1263], l1263.center);
                    i1263 = 0, j1263 = 0;
                    for (let r1263 = 0; r1263 < m1263.vertices.length; r1263++)
                        h1263[r1263].x > l1263.halfExtents.x ? i1263++ : h1263[r1263].x < -l1263.halfExtents.x && j1263++;
                    if (i1263 === m1263.vertices.length || j1263 === m1263.vertices.length)
                        return 0;
                    i1263 = 0, j1263 = 0;
                    for (let q1263 = 0; q1263 < m1263.vertices.length; q1263++)
                        h1263[q1263].y > l1263.halfExtents.y ? i1263++ : h1263[q1263].y < -l1263.halfExtents.y && j1263++;
                    if (i1263 === m1263.vertices.length || j1263 === m1263.vertices.length)
                        return 0;
                    i1263 = 0, j1263 = 0;
                    for (let p1263 = 0; p1263 < m1263.vertices.length; p1263++)
                        h1263[p1263].z > l1263.halfExtents.z ? i1263++ : h1263[p1263].z < -l1263.halfExtents.z && j1263++;
                    return i1263 === m1263.vertices.length || j1263 === m1263.vertices.length ? 0 : 1;
                };
            }(), h149 = function () {
                const a1263 = new w146(0, 0, 0), b1263 = new c147();
                return function (d1263, e1263) {
                    return w146.subtract(a1263, e1263, d1263.center), w146.transformMat3(a1263, a1263, c147.transpose(b1263, d1263.orientation)), f1263 = a1263, g1263 = d1263.halfExtents, Math.abs(f1263.x) < g1263.x && Math.abs(f1263.y) < g1263.y && Math.abs(f1263.z) < g1263.z;
                    var f1263, g1263;
                };
            }(), i149 = function () {
                const p1262 = function (w1262, x1262, y1262, z1262) {
                    return Math.abs(w1262.x * x1262 + w1262.y * y1262 + w1262.z * z1262);
                };
                return function (s1262, t1262) {
                    const u1262 = s1262.halfExtents.x * p1262(t1262.n, s1262.orientation.m00, s1262.orientation.m01, s1262.orientation.m02) + s1262.halfExtents.y * p1262(t1262.n, s1262.orientation.m03, s1262.orientation.m04, s1262.orientation.m05) + s1262.halfExtents.z * p1262(t1262.n, s1262.orientation.m06, s1262.orientation.m07, s1262.orientation.m08), v1262 = w146.dot(t1262.n, s1262.center);
                    return v1262 + u1262 < t1262.d ? -1 : v1262 - u1262 > t1262.d ? 0 : 1;
                };
            }(), j149 = function (m1262, n1262) {
                for (let o1262 = 0; o1262 < n1262.planes.length; o1262++)
                    if (-1 === i149(m1262, n1262.planes[o1262]))
                        return 0;
                return 1;
            }, k149 = function () {
                const r1261 = new Array(8);
                let s1261 = 0, t1261 = 0, u1261 = 0;
                for (let l1262 = 0; l1262 < r1261.length; l1262++)
                    r1261[l1262] = new w146(0, 0, 0);
                const v1261 = function (h1262, i1262, j1262, k1262) {
                    return h1262.x * i1262 + h1262.y * j1262 + h1262.z * k1262;
                };
                return function (y1261, z1261) {
                    let a1262 = 0, b1262 = !1;
                    for (let g1262 = 0; g1262 < z1261.planes.length; g1262++) {
                        if (a1262 = i149(y1261, z1261.planes[g1262]), -1 === a1262)
                            return 0;
                        1 === a1262 && (b1262 = !0);
                    }
                    if (!b1262)
                        return 1;
                    for (let f1262 = 0; f1262 < z1261.vertices.length; f1262++)
                        w146.subtract(r1261[f1262], z1261.vertices[f1262], y1261.center);
                    t1261 = 0, u1261 = 0;
                    for (let e1262 = 0; e1262 < z1261.vertices.length; e1262++)
                        s1261 = v1261(r1261[e1262], y1261.orientation.m00, y1261.orientation.m01, y1261.orientation.m02), s1261 > y1261.halfExtents.x ? t1261++ : s1261 < -y1261.halfExtents.x && u1261++;
                    if (t1261 === z1261.vertices.length || u1261 === z1261.vertices.length)
                        return 0;
                    t1261 = 0, u1261 = 0;
                    for (let d1262 = 0; d1262 < z1261.vertices.length; d1262++)
                        s1261 = v1261(r1261[d1262], y1261.orientation.m03, y1261.orientation.m04, y1261.orientation.m05), s1261 > y1261.halfExtents.y ? t1261++ : s1261 < -y1261.halfExtents.y && u1261++;
                    if (t1261 === z1261.vertices.length || u1261 === z1261.vertices.length)
                        return 0;
                    t1261 = 0, u1261 = 0;
                    for (let c1262 = 0; c1262 < z1261.vertices.length; c1262++)
                        s1261 = v1261(r1261[c1262], y1261.orientation.m06, y1261.orientation.m07, y1261.orientation.m08), s1261 > y1261.halfExtents.z ? t1261++ : s1261 < -y1261.halfExtents.z && u1261++;
                    return t1261 === z1261.vertices.length || u1261 === z1261.vertices.length ? 0 : 1;
                };
            }(), l149 = function () {
                const f1261 = new Array(15);
                for (let q1261 = 0; q1261 < 15; q1261++)
                    f1261[q1261] = new w146(0, 0, 0);
                const g1261 = new Array(8), h1261 = new Array(8);
                for (let p1261 = 0; p1261 < 8; p1261++)
                    g1261[p1261] = new w146(0, 0, 0), h1261[p1261] = new w146(0, 0, 0);
                return function (j1261, k1261) {
                    w146.set(f1261[0], j1261.orientation.m00, j1261.orientation.m01, j1261.orientation.m02), w146.set(f1261[1], j1261.orientation.m03, j1261.orientation.m04, j1261.orientation.m05), w146.set(f1261[2], j1261.orientation.m06, j1261.orientation.m07, j1261.orientation.m08), w146.set(f1261[3], k1261.orientation.m00, k1261.orientation.m01, k1261.orientation.m02), w146.set(f1261[4], k1261.orientation.m03, k1261.orientation.m04, k1261.orientation.m05), w146.set(f1261[5], k1261.orientation.m06, k1261.orientation.m07, k1261.orientation.m08);
                    for (let o1261 = 0; o1261 < 3; ++o1261)
                        w146.cross(f1261[6 + 3 * o1261], f1261[o1261], f1261[3]), w146.cross(f1261[7 + 3 * o1261], f1261[o1261], f1261[4]), w146.cross(f1261[8 + 3 * o1261], f1261[o1261], f1261[5]);
                    j130(j1261.center, j1261.halfExtents, f1261[0], f1261[1], f1261[2], g1261), j130(k1261.center, k1261.halfExtents, f1261[3], f1261[4], f1261[5], h1261);
                    for (let l1261 = 0; l1261 < 15; ++l1261) {
                        const m1261 = k130(g1261, f1261[l1261]), n1261 = k130(h1261, f1261[l1261]);
                        if (n1261[0] > m1261[1] || m1261[0] > n1261[1])
                            return 0;
                    }
                    return 1;
                };
            }(), m149 = function () {
                const i1260 = new s148(), j1260 = new w146(), k1260 = new w146(), l1260 = new w146(), m1260 = new Array(8);
                for (let e1261 = 0; e1261 < 8; e1261++)
                    m1260[e1261] = new w146();
                const n1260 = new Array(8);
                for (let d1261 = 0; d1261 < 8; d1261++)
                    n1260[d1261] = new w146();
                return function (p1260, q1260) {
                    if (0 === w146.squaredDistance(q1260.ellipseCenter0, q1260.ellipseCenter1))
                        return i1260.radius = q1260.radius, i1260.center.set(q1260.ellipseCenter0), v149.sphereOBB(i1260, p1260);
                    {
                        j1260.x = p1260.orientation.m00, j1260.y = p1260.orientation.m01, j1260.z = p1260.orientation.m02, k1260.x = p1260.orientation.m03, k1260.y = p1260.orientation.m04, k1260.z = p1260.orientation.m05, l1260.x = p1260.orientation.m06, l1260.y = p1260.orientation.m07, l1260.z = p1260.orientation.m08, j130(p1260.center, p1260.halfExtents, j1260, k1260, l1260, m1260);
                        const r1260 = n1260, s1260 = w146.copy(r1260[0], j1260), t1260 = w146.copy(r1260[1], k1260), u1260 = w146.copy(r1260[2], l1260);
                        w146.subtract(r1260[3], q1260.center, p1260.center).normalize();
                        const v1260 = w146.subtract(r1260[4], q1260.ellipseCenter0, q1260.ellipseCenter1);
                        v1260.normalize(), w146.cross(r1260[5], s1260, v1260), w146.cross(r1260[6], t1260, v1260), w146.cross(r1260[7], u1260, v1260);
                        for (let w1260 = 0; w1260 < 8; ++w1260) {
                            const x1260 = k130(m1260, r1260[w1260]), y1260 = w146.dot(r1260[w1260], q1260.ellipseCenter0), z1260 = w146.dot(r1260[w1260], q1260.ellipseCenter1), a1261 = Math.max(y1260, z1260), b1261 = Math.min(y1260, z1260) - q1260.radius, c1261 = a1261 + q1260.radius;
                            if (b1261 > x1260[1] || x1260[0] > c1261)
                                return 0;
                        }
                        return 1;
                    }
                };
            }(), n149 = function (e1260, f1260) {
                const g1260 = w146.dot(f1260.n, e1260.center), h1260 = e1260.radius * f1260.n.length();
                return g1260 + h1260 < f1260.d ? -1 : g1260 - h1260 > f1260.d ? 0 : 1;
            }, o149 = function (b1260, c1260) {
                for (let d1260 = 0; d1260 < c1260.planes.length; d1260++)
                    if (-1 === n149(b1260, c1260.planes[d1260]))
                        return 0;
                return 1;
            }, p149 = function () {
                const n1259 = new w146(0, 0, 0), o1259 = [1, -1, 1, -1, 1, -1];
                return function (q1259, r1259) {
                    for (let s1259 = 0; s1259 < 6; s1259++) {
                        const t1259 = r1259.planes[s1259], u1259 = q1259.radius, v1259 = q1259.center, w1259 = t1259.n, x1259 = t1259.d, y1259 = w146.dot(w1259, v1259);
                        if (y1259 + u1259 < x1259)
                            return 0;
                        if (!(y1259 - u1259 > x1259)) {
                            w146.add(n1259, v1259, w146.multiplyScalar(n1259, w1259, u1259));
                            for (let z1259 = 0; z1259 < 6; z1259++) {
                                if (z1259 === s1259 || z1259 === s1259 + o1259[s1259])
                                    continue;
                                const a1260 = r1259.planes[z1259];
                                if (w146.dot(a1260.n, n1259) < a1260.d)
                                    return 0;
                            }
                        }
                    }
                    return 1;
                };
            }(), q149 = function (k1259, l1259) {
                const m1259 = k1259.radius + l1259.radius;
                return w146.squaredDistance(k1259.center, l1259.center) < m1259 * m1259;
            }, r149 = function () {
                const g1259 = new w146();
                return function (i1259, j1259) {
                    return d130(g1259, i1259.center, j1259), w146.squaredDistance(i1259.center, g1259) < i1259.radius * i1259.radius;
                };
            }(), s149 = function () {
                const c1259 = new w146();
                return function (e1259, f1259) {
                    return e130(c1259, e1259.center, f1259), w146.squaredDistance(e1259.center, c1259) < e1259.radius * e1259.radius;
                };
            }(), t149 = function () {
                const t1258 = new w146(), u1258 = new w146();
                return function (w1258, x1258) {
                    const y1258 = w1258.radius + x1258.radius, z1258 = y1258 * y1258, a1259 = w146.squaredDistance(x1258.ellipseCenter0, x1258.ellipseCenter1);
                    if (0 === a1259)
                        return w146.squaredDistance(w1258.center, x1258.center) < z1258;
                    {
                        w146.subtract(t1258, w1258.center, x1258.ellipseCenter0), w146.subtract(u1258, x1258.ellipseCenter1, x1258.ellipseCenter0);
                        const b1259 = w146.dot(t1258, u1258) / a1259;
                        return b1259 < 0 ? w146.squaredDistance(w1258.center, x1258.ellipseCenter0) < z1258 : b1259 > 1 ? w146.squaredDistance(w1258.center, x1258.ellipseCenter1) < z1258 : (w146.scaleAndAdd(t1258, x1258.ellipseCenter0, u1258, b1259), w146.squaredDistance(w1258.center, t1258) < z1258);
                    }
                };
            }(), u149 = function () {
                const t1257 = new w146(), u1257 = new w146(), v1257 = new w146(), w1257 = new w146(), x1257 = new w146(), y1257 = new w146();
                return function (a1258, b1258) {
                    const c1258 = w146.subtract(t1257, a1258.ellipseCenter1, a1258.ellipseCenter0), d1258 = w146.subtract(u1257, b1258.ellipseCenter1, b1258.ellipseCenter0), e1258 = w146.subtract(v1257, a1258.ellipseCenter0, b1258.ellipseCenter0), f1258 = w146.dot(c1258, c1258), g1258 = w146.dot(c1258, d1258), h1258 = w146.dot(d1258, d1258), i1258 = w146.dot(c1258, e1258), j1258 = w146.dot(d1258, e1258), k1258 = f1258 * h1258 - g1258 * g1258;
                    let l1258, m1258, n1258 = k1258, o1258 = k1258;
                    k1258 < q146 ? (l1258 = 0, n1258 = 1, m1258 = j1258, o1258 = h1258) : (l1258 = g1258 * j1258 - h1258 * i1258, m1258 = f1258 * j1258 - g1258 * i1258, l1258 < 0 ? (l1258 = 0, m1258 = j1258, o1258 = h1258) : l1258 > n1258 && (l1258 = n1258, m1258 = j1258 + g1258, o1258 = h1258)), m1258 < 0 ? (m1258 = 0, -i1258 < 0 ? l1258 = 0 : -i1258 > f1258 ? l1258 = n1258 : (l1258 = -i1258, n1258 = f1258)) : m1258 > o1258 && (m1258 = o1258, -i1258 + g1258 < 0 ? l1258 = 0 : -i1258 + g1258 > f1258 ? l1258 = n1258 : (l1258 = -i1258 + g1258, n1258 = f1258));
                    const p1258 = Math.abs(l1258) < q146 ? 0 : l1258 / n1258, q1258 = Math.abs(m1258) < q146 ? 0 : m1258 / o1258, r1258 = w1257;
                    r1258.set(e1258), r1258.add(w146.multiplyScalar(x1257, c1258, p1258)), r1258.subtract(w146.multiplyScalar(y1257, d1258, q1258));
                    const s1258 = a1258.radius + b1258.radius;
                    return r1258.lengthSqr() < s1258 * s1258;
                };
            }(), v149 = {
                raySphere: v148,
                rayAABB: w148,
                rayOBB: x148,
                rayPlane: t148,
                rayTriangle: u148,
                rayCapsule: y148,
                raySubMesh: null,
                rayMesh: null,
                rayModel: null,
                lineSphere: i130,
                lineAABB: g130,
                lineOBB: h130,
                linePlane: z148,
                lineTriangle: a149,
                sphereWithSphere: q149,
                sphereAABB: r149,
                sphereOBB: s149,
                spherePlane: n149,
                sphereFrustum: o149,
                sphereFrustumAccurate: p149,
                sphereCapsule: t149,
                aabbWithAABB: c149,
                aabbWithOBB: d149,
                aabbPlane: e149,
                aabbFrustum: f149,
                aabbFrustumAccurate: g149,
                obbWithOBB: l149,
                obbPlane: i149,
                obbFrustum: j149,
                obbFrustumAccurate: k149,
                obbPoint: h149,
                obbCapsule: m149,
                aabbFrustumCompletelyInside: function (q1257, r1257) {
                    for (let s1257 = 0; s1257 < r1257.planes.length; s1257++)
                        if (0 !== e149(q1257, r1257.planes[s1257]))
                            return 0;
                    return 1;
                },
                capsuleWithCapsule: u149,
                resolve(k1257, l1257, m1257 = null) {
                    const n1257 = k1257._type, o1257 = l1257._type, p1257 = this[n1257 | o1257];
                    return n1257 < o1257 ? p1257(k1257, l1257, m1257) : p1257(l1257, k1257, m1257);
                }
            };
            v149[l148.SHAPE_RAY | l148.SHAPE_SPHERE] = v148, v149[l148.SHAPE_RAY | l148.SHAPE_AABB] = w148, v149[l148.SHAPE_RAY | l148.SHAPE_OBB] = x148, v149[l148.SHAPE_RAY | l148.SHAPE_PLANE] = t148, v149[l148.SHAPE_RAY | l148.SHAPE_TRIANGLE] = u148, v149[l148.SHAPE_RAY | l148.SHAPE_CAPSULE] = y148, v149[l148.SHAPE_LINE | l148.SHAPE_SPHERE] = i130, v149[l148.SHAPE_LINE | l148.SHAPE_AABB] = g130, v149[l148.SHAPE_LINE | l148.SHAPE_OBB] = h130, v149[l148.SHAPE_LINE | l148.SHAPE_PLANE] = z148, v149[l148.SHAPE_LINE | l148.SHAPE_TRIANGLE] = a149, v149[l148.SHAPE_SPHERE] = q149, v149[l148.SHAPE_SPHERE | l148.SHAPE_AABB] = r149, v149[l148.SHAPE_SPHERE | l148.SHAPE_OBB] = s149, v149[l148.SHAPE_SPHERE | l148.SHAPE_PLANE] = n149, v149[l148.SHAPE_SPHERE | l148.SHAPE_FRUSTUM] = o149, v149[l148.SHAPE_SPHERE | l148.SHAPE_FRUSTUM_ACCURATE] = p149, v149[l148.SHAPE_SPHERE | l148.SHAPE_CAPSULE] = t149, v149[l148.SHAPE_AABB] = c149, v149[l148.SHAPE_AABB | l148.SHAPE_OBB] = d149, v149[l148.SHAPE_AABB | l148.SHAPE_PLANE] = e149, v149[l148.SHAPE_AABB | l148.SHAPE_FRUSTUM] = f149, v149[l148.SHAPE_AABB | l148.SHAPE_FRUSTUM_ACCURATE] = g149, v149[l148.SHAPE_OBB] = l149, v149[l148.SHAPE_OBB | l148.SHAPE_PLANE] = i149, v149[l148.SHAPE_OBB | l148.SHAPE_FRUSTUM] = j149, v149[l148.SHAPE_OBB | l148.SHAPE_FRUSTUM_ACCURATE] = k149, v149[l148.SHAPE_OBB | l148.SHAPE_CAPSULE] = m149, v149[l148.SHAPE_CAPSULE] = u149, k144(m148.prototype, "line", [{
                    name: "mag",
                    newName: "len"
                }, {
                    name: "magnitude",
                    newName: "len"
                }]), l144(v149, "intersect", [{
                    name: "line_quad"
                }]);
            const w149 = new w146(0, 0, 0), x149 = new w146(0, 0, 0), y149 = s143.mat4(), z149 = s143.v4();
            class a150 {
                static create(g1257, h1257, i1257, j1257) {
                    return new a150(g1257, h1257, i1257, j1257);
                }
                static clone(f1257) {
                    return new a150(f1257.n.x, f1257.n.y, f1257.n.z, f1257.d);
                }
                static copy(d1257, e1257) {
                    return w146.copy(d1257.n, e1257.n), d1257.d = e1257.d, d1257;
                }
                static fromPoints(z1256, a1257, b1257, c1257) {
                    return w146.subtract(w149, b1257, a1257), w146.subtract(x149, c1257, a1257), w146.normalize(z1256.n, w146.cross(z1256.n, w149, x149)), z1256.d = w146.dot(z1256.n, a1257), z1256;
                }
                static set(u1256, v1256, w1256, x1256, y1256) {
                    return u1256.n.x = v1256, u1256.n.y = w1256, u1256.n.z = x1256, u1256.d = y1256, u1256;
                }
                static fromNormalAndPoint(r1256, s1256, t1256) {
                    return w146.copy(r1256.n, s1256), r1256.d = w146.dot(s1256, t1256), r1256;
                }
                static normalize(o1256, p1256) {
                    const q1256 = p1256.n.length();
                    return w146.normalize(o1256.n, p1256.n), q1256 > 0 && (o1256.d = p1256.d / q1256), o1256;
                }
                get type() {
                    return this._type;
                }
                set x(n1256) {
                    this.n.x = n1256;
                }
                get x() {
                    return this.n.x;
                }
                set y(m1256) {
                    this.n.y = m1256;
                }
                get y() {
                    return this.n.y;
                }
                set z(l1256) {
                    this.n.z = l1256;
                }
                get z() {
                    return this.n.z;
                }
                set w(k1256) {
                    this.d = k1256;
                }
                get w() {
                    return this.d;
                }
                constructor(g1256 = 0, h1256 = 1, i1256 = 0, j1256 = 0) {
                    this.n = void 0, this._type = l148.SHAPE_PLANE, this.n = new w146(g1256, h1256, i1256), this.d = j1256;
                }
                transform(f1256) {
                    o147.invert(y149, f1256), o147.transpose(y149, y149), v146.set(z149, this.n.x, this.n.y, this.n.z, -this.d), v146.transformMat4(z149, z149, y149), w146.set(this.n, z149.x, z149.y, z149.z), this.d = -z149.w;
                }
            }
            class b150 {
                static create(w1255 = 1, x1255 = 0, y1255 = 0, z1255 = 0, a1256 = 0, b1256 = 0, c1256 = 0, d1256 = 0, e1256 = 1) {
                    return new b150(w1255, x1255, y1255, z1255, a1256, b1256, c1256, d1256, e1256);
                }
                static clone(v1255) {
                    return new b150(v1255.a.x, v1255.a.y, v1255.a.z, v1255.b.x, v1255.b.y, v1255.b.z, v1255.c.x, v1255.c.y, v1255.c.z);
                }
                static copy(t1255, u1255) {
                    return w146.copy(t1255.a, u1255.a), w146.copy(t1255.b, u1255.b), w146.copy(t1255.c, u1255.c), t1255;
                }
                static fromPoints(p1255, q1255, r1255, s1255) {
                    return w146.copy(p1255.a, q1255), w146.copy(p1255.b, r1255), w146.copy(p1255.c, s1255), p1255;
                }
                static set(f1255, g1255, h1255, i1255, j1255, k1255, l1255, m1255, n1255, o1255) {
                    return f1255.a.x = g1255, f1255.a.y = h1255, f1255.a.z = i1255, f1255.b.x = j1255, f1255.b.y = k1255, f1255.b.z = l1255, f1255.c.x = m1255, f1255.c.y = n1255, f1255.c.z = o1255, f1255;
                }
                get type() {
                    return this._type;
                }
                constructor(w1254 = 0, x1254 = 0, y1254 = 0, z1254 = 1, a1255 = 0, b1255 = 0, c1255 = 0, d1255 = 1, e1255 = 0) {
                    this.a = void 0, this.b = void 0, this.c = void 0, this._type = void 0, this._type = l148.SHAPE_TRIANGLE, this.a = new w146(w1254, x1254, y1254), this.b = new w146(z1254, a1255, b1255), this.c = new w146(c1255, d1255, e1255);
                }
            }
            const c150 = new w146(), d150 = new w146(), e150 = new w146(), f150 = new w146(), g150 = new c147(), h150 = (t1254, u1254, v1254) => {
                g150.m00 = Math.abs(v1254.m00), g150.m01 = Math.abs(v1254.m01), g150.m02 = Math.abs(v1254.m02), g150.m03 = Math.abs(v1254.m04), g150.m04 = Math.abs(v1254.m05), g150.m05 = Math.abs(v1254.m06), g150.m06 = Math.abs(v1254.m08), g150.m07 = Math.abs(v1254.m09), g150.m08 = Math.abs(v1254.m10), w146.transformMat3(t1254, u1254, g150);
            };
            class i150 {
                static create(n1254, o1254, p1254, q1254, r1254, s1254) {
                    return new i150(n1254, o1254, p1254, q1254, r1254, s1254);
                }
                static clone(m1254) {
                    return new i150(m1254.center.x, m1254.center.y, m1254.center.z, m1254.halfExtents.x, m1254.halfExtents.y, m1254.halfExtents.z);
                }
                static copy(j1254, k1254) {
                    return w146.copy(j1254.center, k1254.center), w146.copy(j1254.halfExtents, k1254.halfExtents), j1254;
                }
                static fromPoints(g1254, h1254, i1254) {
                    return w146.add(c150, i1254, h1254), w146.subtract(d150, i1254, h1254), w146.multiplyScalar(g1254.center, c150, .5), w146.multiplyScalar(g1254.halfExtents, d150, .5), g1254;
                }
                static set(z1253, a1254, b1254, c1254, d1254, e1254, f1254) {
                    return z1253.center.set(a1254, b1254, c1254), z1253.halfExtents.set(d1254, e1254, f1254), z1253;
                }
                static merge(w1253, x1253, y1253) {
                    return w146.subtract(c150, x1253.center, x1253.halfExtents), w146.subtract(d150, y1253.center, y1253.halfExtents), w146.add(e150, x1253.center, x1253.halfExtents), w146.add(f150, y1253.center, y1253.halfExtents), w146.max(f150, e150, f150), w146.min(e150, c150, d150), i150.fromPoints(w1253, e150, f150);
                }
                static toBoundingSphere(u1253, v1253) {
                    return u1253.center.set(v1253.center), u1253.radius = v1253.halfExtents.length(), u1253;
                }
                static transform(m1253, n1253, o1253) {
                    return w146.transformMat4(m1253.center, n1253.center, o1253), h150(m1253.halfExtents, n1253.halfExtents, o1253), m1253;
                }
                get type() {
                    return this._type;
                }
                constructor(g1253 = 0, h1253 = 0, i1253 = 0, j1253 = 1, k1253 = 1, l1253 = 1) {
                    this.center = void 0, this.halfExtents = void 0, this._type = void 0, this._type = l148.SHAPE_AABB, this.center = new w146(g1253, h1253, i1253), this.halfExtents = new w146(j1253, k1253, l1253);
                }
                getBoundary(e1253, f1253) {
                    w146.subtract(e1253, this.center, this.halfExtents), w146.add(f1253, this.center, this.halfExtents);
                }
                transform(p1253, q1253, r1253, s1253, t1253) {
                    w146.transformMat4(t1253.center, this.center, p1253), h150(t1253.halfExtents, this.halfExtents, p1253);
                }
                clone() {
                    return i150.clone(this);
                }
                copy(l1254) {
                    return i150.copy(this, l1254);
                }
                mergePoint(d1253) {
                    this.getBoundary(c150, d150), d1253.x < c150.x && (c150.x = d1253.x), d1253.y < c150.y && (c150.y = d1253.y), d1253.z < c150.z && (c150.z = d1253.z), d1253.x > d150.x && (d150.x = d1253.x), d1253.y > d150.y && (d150.y = d1253.y), d1253.z > d150.z && (d150.z = d1253.z), w146.add(e150, c150, d150), this.center.set(w146.multiplyScalar(e150, e150, .5)), this.halfExtents.set(d150.x - e150.x, d150.y - e150.y, d150.z - e150.z);
                }
                mergePoints(b1253) {
                    if (!(b1253.length < 1))
                        for (let c1253 = 0; c1253 < b1253.length; c1253++)
                            this.mergePoint(b1253[c1253]);
                }
                mergeFrustum(a1253) {
                    this.mergePoints(a1253.vertices);
                }
            }
            class j150 {
                get type() {
                    return this._type;
                }
                constructor(x1252 = .5, y1252 = .5, z1252 = 1) {
                    this._type = void 0, this.radius = void 0, this.halfHeight = void 0, this.axis = void 0, this.center = void 0, this.rotation = void 0, this.ellipseCenter0 = void 0, this.ellipseCenter1 = void 0, this._type = l148.SHAPE_CAPSULE, this.radius = x1252, this.halfHeight = y1252, this.axis = z1252, this.center = new w146(), this.rotation = new g147(), this.ellipseCenter0 = new w146(0, y1252, 0), this.ellipseCenter1 = new w146(0, -y1252, 0), this.updateCache();
                }
                transform(p1252, q1252, r1252, s1252, t1252) {
                    const u1252 = s1252, v1252 = n129(u1252);
                    t1252.radius = this.radius * Math.abs(v1252);
                    let w1252 = (this.halfHeight + this.radius) * Math.abs(u1252.y) - t1252.radius;
                    w1252 < 0 && (w1252 = 0), t1252.halfHeight = w1252, w146.transformMat4(t1252.center, this.center, p1252), g147.multiply(t1252.rotation, this.rotation, r1252), t1252.updateCache();
                }
                updateCache() {
                    this.updateLocalCenter(), w146.transformQuat(this.ellipseCenter0, this.ellipseCenter0, this.rotation), w146.transformQuat(this.ellipseCenter1, this.ellipseCenter1, this.rotation), this.ellipseCenter0.add(this.center), this.ellipseCenter1.add(this.center);
                }
                updateLocalCenter() {
                    const o1252 = this.halfHeight;
                    switch (this.axis) {
                        case 0:
                            this.ellipseCenter0.set(o1252, 0, 0), this.ellipseCenter1.set(-o1252, 0, 0);
                            break;
                        case 1:
                            this.ellipseCenter0.set(0, o1252, 0), this.ellipseCenter1.set(0, -o1252, 0);
                            break;
                        case 2:
                            this.ellipseCenter0.set(0, 0, o1252), this.ellipseCenter1.set(0, 0, -o1252);
                    }
                }
            }
            const k150 = new Array(8);
            k150[0] = new w146(1, 1, 1), k150[1] = new w146(-1, 1, 1), k150[2] = new w146(-1, -1, 1), k150[3] = new w146(1, -1, 1), k150[4] = new w146(1, 1, -1), k150[5] = new w146(-1, 1, -1), k150[6] = new w146(-1, -1, -1), k150[7] = new w146(1, -1, -1);
            const l150 = new w146(), m150 = new w146(), n150 = new w146();
            class o150 {
                static createOrthographic(g1252, h1252, i1252, j1252, k1252, l1252) {
                    const m1252 = h1252 / 2, n1252 = i1252 / 2;
                    w146.set(n150, m1252, n1252, -j1252), w146.transformMat4(g1252.vertices[0], n150, l1252), w146.set(n150, -m1252, n1252, -j1252), w146.transformMat4(g1252.vertices[1], n150, l1252), w146.set(n150, -m1252, -n1252, -j1252), w146.transformMat4(g1252.vertices[2], n150, l1252), w146.set(n150, m1252, -n1252, -j1252), w146.transformMat4(g1252.vertices[3], n150, l1252), w146.set(n150, m1252, n1252, -k1252), w146.transformMat4(g1252.vertices[4], n150, l1252), w146.set(n150, -m1252, n1252, -k1252), w146.transformMat4(g1252.vertices[5], n150, l1252), w146.set(n150, -m1252, -n1252, -k1252), w146.transformMat4(g1252.vertices[6], n150, l1252), w146.set(n150, m1252, -n1252, -k1252), w146.transformMat4(g1252.vertices[7], n150, l1252), g1252.updatePlanes();
                }
                static createOrtho(a1252, b1252, c1252, d1252, e1252, f1252) {
                    return o150.createOrthographic(a1252, b1252, c1252, d1252, e1252, f1252);
                }
                static createPerspective(r1251, s1251, t1251, u1251, v1251, w1251) {
                    const x1251 = Math.tan(.5 * t1251), y1251 = x1251 * s1251;
                    l150.set(u1251 * y1251, u1251 * x1251, u1251), m150.set(v1251 * y1251, v1251 * x1251, v1251);
                    const z1251 = r1251.vertices;
                    n150.set(l150.x, l150.y, -l150.z), w146.transformMat4(z1251[0], n150, w1251), n150.set(-l150.x, l150.y, -l150.z), w146.transformMat4(z1251[1], n150, w1251), n150.set(-l150.x, -l150.y, -l150.z), w146.transformMat4(z1251[2], n150, w1251), n150.set(l150.x, -l150.y, -l150.z), w146.transformMat4(z1251[3], n150, w1251), n150.set(m150.x, m150.y, -m150.z), w146.transformMat4(z1251[4], n150, w1251), n150.set(-m150.x, m150.y, -m150.z), w146.transformMat4(z1251[5], n150, w1251), n150.set(-m150.x, -m150.y, -m150.z), w146.transformMat4(z1251[6], n150, w1251), n150.set(m150.x, -m150.y, -m150.z), w146.transformMat4(z1251[7], n150, w1251), r1251.updatePlanes();
                }
                static createFromAABB(n1251, o1251) {
                    const p1251 = new w146(), q1251 = new w146();
                    return w146.subtract(p1251, o1251.center, o1251.halfExtents), w146.add(q1251, o1251.center, o1251.halfExtents), n1251.vertices[0].set(q1251.x, q1251.y, -p1251.z), n1251.vertices[1].set(p1251.x, q1251.y, -p1251.z), n1251.vertices[2].set(p1251.x, p1251.y, -p1251.z), n1251.vertices[3].set(q1251.x, p1251.y, -p1251.z), n1251.vertices[4].set(q1251.x, q1251.y, -q1251.z), n1251.vertices[5].set(p1251.x, q1251.y, -q1251.z), n1251.vertices[6].set(p1251.x, p1251.y, -q1251.z), n1251.vertices[7].set(q1251.x, p1251.y, -q1251.z), n1251.updatePlanes(), n1251;
                }
                split(i1251, j1251, k1251, l1251, m1251) {
                    return o150.createPerspective(this, k1251, l1251, i1251, j1251, m1251);
                }
                static create() {
                    return new o150();
                }
                static clone(h1251) {
                    return o150.copy(new o150(), h1251);
                }
                static copy(d1251, e1251) {
                    d1251._type = e1251.type;
                    for (let g1251 = 0; g1251 < 6; ++g1251)
                        a150.copy(d1251.planes[g1251], e1251.planes[g1251]);
                    for (let f1251 = 0; f1251 < 8; ++f1251)
                        w146.copy(d1251.vertices[f1251], e1251.vertices[f1251]);
                    return d1251;
                }
                set accurate(c1251) {
                    this._type = c1251 ? l148.SHAPE_FRUSTUM_ACCURATE : l148.SHAPE_FRUSTUM;
                }
                get type() {
                    return this._type;
                }
                constructor() {
                    this.planes = void 0, this.vertices = void 0, this._type = void 0, this._type = l148.SHAPE_FRUSTUM, this.planes = new Array(6);
                    for (let b1251 = 0; b1251 < 6; ++b1251)
                        this.planes[b1251] = a150.create(0, 0, 0, 0);
                    this.vertices = new Array(8);
                    for (let a1251 = 0; a1251 < 8; ++a1251)
                        this.vertices[a1251] = new w146();
                }
                update(u1250, v1250) {
                    w146.set(this.planes[0].n, u1250.m03 + u1250.m00, u1250.m07 + u1250.m04, u1250.m11 + u1250.m08), this.planes[0].d = -(u1250.m15 + u1250.m12), w146.set(this.planes[1].n, u1250.m03 - u1250.m00, u1250.m07 - u1250.m04, u1250.m11 - u1250.m08), this.planes[1].d = -(u1250.m15 - u1250.m12), w146.set(this.planes[2].n, u1250.m03 + u1250.m01, u1250.m07 + u1250.m05, u1250.m11 + u1250.m09), this.planes[2].d = -(u1250.m15 + u1250.m13), w146.set(this.planes[3].n, u1250.m03 - u1250.m01, u1250.m07 - u1250.m05, u1250.m11 - u1250.m09), this.planes[3].d = -(u1250.m15 - u1250.m13), w146.set(this.planes[4].n, u1250.m03 + u1250.m02, u1250.m07 + u1250.m06, u1250.m11 + u1250.m10), this.planes[4].d = -(u1250.m15 + u1250.m14), w146.set(this.planes[5].n, u1250.m03 - u1250.m02, u1250.m07 - u1250.m06, u1250.m11 - u1250.m10), this.planes[5].d = -(u1250.m15 - u1250.m14);
                    for (let x1250 = 0; x1250 < 6; x1250++) {
                        const y1250 = this.planes[x1250], z1250 = 1 / y1250.n.length();
                        w146.multiplyScalar(y1250.n, y1250.n, z1250), y1250.d *= z1250;
                    }
                    for (let w1250 = 0; w1250 < 8; w1250++)
                        w146.transformMat4(this.vertices[w1250], k150[w1250], v1250);
                }
                transform(s1250) {
                    for (let t1250 = 0; t1250 < 8; t1250++)
                        w146.transformMat4(this.vertices[t1250], this.vertices[t1250], s1250);
                    this.updatePlanes();
                }
                zero() {
                    for (let r1250 = 0; r1250 < 8; r1250++)
                        this.vertices[r1250].set(0, 0, 0);
                    for (let q1250 = 0; q1250 < 6; q1250++)
                        a150.set(this.planes[q1250], 0, 0, 0, 0);
                }
                updatePlanes() {
                    a150.fromPoints(this.planes[0], this.vertices[1], this.vertices[6], this.vertices[5]), a150.fromPoints(this.planes[1], this.vertices[3], this.vertices[4], this.vertices[7]), a150.fromPoints(this.planes[2], this.vertices[6], this.vertices[3], this.vertices[7]), a150.fromPoints(this.planes[3], this.vertices[0], this.vertices[5], this.vertices[4]), a150.fromPoints(this.planes[4], this.vertices[2], this.vertices[0], this.vertices[3]), a150.fromPoints(this.planes[5], this.vertices[7], this.vertices[5], this.vertices[6]);
                }
            }
            function l130(k1250, l1250) {
                const m1250 = Object.getOwnPropertyDescriptor(k1250.prototype, l1250), n1250 = `_$cache_${l1250}`, o1250 = `_$_${l1250}`;
                Object.defineProperty(k1250.prototype, o1250, m1250), Object.defineProperty(k1250.prototype, l1250, {
                    get() {
                        return void 0 === this[n1250] && (this[n1250] = this[o1250]), this[n1250];
                    },
                    set(p1250) {
                        this[o1250] = p1250;
                    },
                    configurable: !0,
                    enumerable: !0
                });
            }
            function m130(i1250) {
                i1250.prototype._arraybuffer = function () {
                    return this.__data || (this.__data = this.underlyingData()), this.__data;
                };
            }
            const p150 = (d1250, e1250) => {
                const f1250 = d1250.__nativeFields__[e1250], g1250 = `_$_${e1250}`;
                s125(4 === f1250.fieldSize, `field ${e1250} size ${f1250.fieldSize}`), Object.defineProperty(d1250.prototype, f1250.fieldName, {
                    configurable: !0,
                    enumerable: !0,
                    get() {
                        return void 0 === this[g1250] && (this[g1250] = new Float32Array(this._arraybuffer(), f1250.fieldOffset, 1)), this[g1250][0];
                    },
                    set(h1250) {
                        void 0 === this[g1250] && (this[g1250] = new Float32Array(this._arraybuffer(), f1250.fieldOffset, 1)), this[g1250][0] = h1250;
                    }
                });
            }, q150 = (y1249, z1249) => {
                const a1250 = y1249.__nativeFields__[z1249];
                a1250 || console.error(`attr ${z1249} not defined in class ${y1249.toString()}`);
                const b1250 = `_$_${z1249}`;
                s125(4 === a1250.fieldSize, `field ${z1249} size ${a1250.fieldSize}`), Object.defineProperty(y1249.prototype, a1250.fieldName, {
                    configurable: !0,
                    enumerable: !0,
                    get() {
                        return void 0 === this[b1250] && (this[b1250] = new Int32Array(this._arraybuffer(), a1250.fieldOffset, 1)), this[b1250][0];
                    },
                    set(c1250) {
                        void 0 === this[b1250] && (this[b1250] = new Int32Array(this._arraybuffer(), a1250.fieldOffset, 1)), this[b1250][0] = c1250;
                    }
                });
            };
            {
                l130(ns.Line, "s"), l130(ns.Line, "e"), Object.setPrototypeOf(ns.Line.prototype, m148.prototype), m130(ns.Plane), l130(ns.Plane, "n"), p150(ns.Plane, "d"), Object.setPrototypeOf(ns.Plane.prototype, a150.prototype), m130(ns.Ray), l130(ns.Ray, "o"), l130(ns.Ray, "d"), Object.setPrototypeOf(ns.Ray.prototype, n148.prototype), m130(ns.Triangle), l130(ns.Triangle, "a"), l130(ns.Triangle, "b"), l130(ns.Triangle, "c"), Object.setPrototypeOf(ns.Triangle.prototype, b150.prototype), m130(ns.Sphere), l130(ns.Sphere, "_center"), p150(ns.Sphere, "_radius"), Object.setPrototypeOf(ns.Sphere.prototype, s148.prototype), m130(ns.AABB), l130(ns.AABB, "center"), l130(ns.AABB, "halfExtents"), Object.setPrototypeOf(ns.AABB.prototype, i150.prototype), m130(ns.Capsule), p150(ns.Capsule, "radius"), p150(ns.Capsule, "halfHeight"), q150(ns.Capsule, "axis"), l130(ns.Capsule, "center"), l130(ns.Capsule, "rotation"), l130(ns.Capsule, "ellipseCenter0"), l130(ns.Capsule, "ellipseCenter1"), Object.setPrototypeOf(ns.Capsule.prototype, j150.prototype), l130(ns.Frustum, "vertices"), l130(ns.Frustum, "planes"), Object.setPrototypeOf(ns.Frustum.prototype, o150.prototype);
                const w1249 = Object.getOwnPropertyDescriptor(ns.ShapeBase.prototype, "_type");
                for (const x1249 of [ns.Line, ns.Plane, ns.Ray, ns.Triangle, ns.Sphere, ns.AABB, ns.Capsule, ns.Frustum])
                    Object.defineProperty(x1249.prototype, "_type", w1249);
            }
            const r150 = new w146(), s150 = new w146(), t150 = new c147();
            class u150 {
                static create(h1249, i1249, j1249, k1249, l1249, m1249, n1249, o1249, p1249, q1249, r1249, s1249, t1249, u1249, v1249) {
                    return new u150(h1249, i1249, j1249, k1249, l1249, m1249, n1249, o1249, p1249, q1249, r1249, s1249, t1249, u1249, v1249);
                }
                static clone(g1249) {
                    return new u150(g1249.center.x, g1249.center.y, g1249.center.z, g1249.halfExtents.x, g1249.halfExtents.y, g1249.halfExtents.z, g1249.orientation.m00, g1249.orientation.m01, g1249.orientation.m02, g1249.orientation.m03, g1249.orientation.m04, g1249.orientation.m05, g1249.orientation.m06, g1249.orientation.m07, g1249.orientation.m08);
                }
                static copy(e1249, f1249) {
                    return w146.copy(e1249.center, f1249.center), w146.copy(e1249.halfExtents, f1249.halfExtents), c147.copy(e1249.orientation, f1249.orientation), e1249;
                }
                static fromPoints(b1249, c1249, d1249) {
                    return w146.multiplyScalar(b1249.center, w146.add(r150, c1249, d1249), .5), w146.multiplyScalar(b1249.halfExtents, w146.subtract(s150, d1249, c1249), .5), c147.identity(b1249.orientation), b1249;
                }
                static set(l1248, m1248, n1248, o1248, p1248, q1248, r1248, s1248, t1248, u1248, v1248, w1248, x1248, y1248, z1248, a1249) {
                    return w146.set(l1248.center, m1248, n1248, o1248), w146.set(l1248.halfExtents, p1248, q1248, r1248), c147.set(l1248.orientation, s1248, t1248, u1248, v1248, w1248, x1248, y1248, z1248, a1249), l1248;
                }
                get type() {
                    return this._type;
                }
                constructor(w1247 = 0, x1247 = 0, y1247 = 0, z1247 = 1, a1248 = 1, b1248 = 1, c1248 = 1, d1248 = 0, e1248 = 0, f1248 = 0, g1248 = 1, h1248 = 0, i1248 = 0, j1248 = 0, k1248 = 1) {
                    this.center = void 0, this.halfExtents = void 0, this.orientation = void 0, this._type = void 0, this._type = l148.SHAPE_OBB, this.center = new w146(w1247, x1247, y1247), this.halfExtents = new w146(z1247, a1248, b1248), this.orientation = new c147(c1248, d1248, e1248, f1248, g1248, h1248, i1248, j1248, k1248);
                }
                getBoundary(r1247, s1247) {
                    var t1247, u1247, v1247;
                    t1247 = r150, u1247 = this.halfExtents, v1247 = this.orientation, t150.m00 = Math.abs(v1247.m00), t150.m01 = Math.abs(v1247.m01), t150.m02 = Math.abs(v1247.m02), t150.m03 = Math.abs(v1247.m03), t150.m04 = Math.abs(v1247.m04), t150.m05 = Math.abs(v1247.m05), t150.m06 = Math.abs(v1247.m06), t150.m07 = Math.abs(v1247.m07), t150.m08 = Math.abs(v1247.m08), w146.transformMat3(t1247, u1247, t150), w146.subtract(r1247, this.center, r150), w146.add(s1247, this.center, r150);
                }
                transform(m1247, n1247, o1247, p1247, q1247) {
                    w146.transformMat4(q1247.center, this.center, m1247), c147.fromQuat(q1247.orientation, o1247), w146.multiply(q1247.halfExtents, this.halfExtents, p1247);
                }
                translateAndRotate(j1247, k1247, l1247) {
                    w146.transformMat4(l1247.center, this.center, j1247), c147.fromQuat(l1247.orientation, k1247);
                }
                setScale(h1247, i1247) {
                    w146.multiply(i1247.halfExtents, this.halfExtents, h1247);
                }
            }
            function n130(a1247, b1247, c1247 = 1e-6) {
                let d1247 = 0, e1247 = a1247.length - 1, f1247 = e1247 >>> 1;
                for (; d1247 <= e1247; f1247 = d1247 + e1247 >>> 1) {
                    const g1247 = a1247[f1247];
                    if (g1247 > b1247 + c1247)
                        e1247 = f1247 - 1;
                    else {
                        if (!(g1247 < b1247 - c1247))
                            return f1247;
                        d1247 = f1247 + 1;
                    }
                }
                return ~d1247;
            }
            let v150, w150, x150, y150;
            v150 = Symbol.iterator;
            class z150 {
                constructor() {
                    this._times = [], this._values = [];
                }
                get keyFramesCount() {
                    return this._times.length;
                }
                get rangeMin() {
                    return this._times[0];
                }
                get rangeMax() {
                    return this._times[this._values.length - 1];
                }
                [v150]() {
                    let y1246 = 0;
                    return {
                        next: () => {
                            if (y1246 >= this._times.length)
                                return {
                                    done: !0,
                                    value: void 0
                                };
                            {
                                const z1246 = [this._times[y1246], this._values[y1246]];
                                return ++y1246, {
                                    done: !1,
                                    value: z1246
                                };
                            }
                        }
                    };
                }
                keyframes() {
                    return this;
                }
                times() {
                    return this._times;
                }
                values() {
                    return this._values;
                }
                getKeyframeTime(x1246) {
                    return this._times[x1246];
                }
                getKeyframeValue(w1246) {
                    return this._values[w1246];
                }
                addKeyFrame(u1246, v1246) {
                    return this._insertNewKeyframe(u1246, v1246);
                }
                removeKeyframe(t1246) {
                    this._times.splice(t1246, 1), this._values.splice(t1246, 1);
                }
                indexOfKeyframe(s1246) {
                    return n130(this._times, s1246);
                }
                updateTime(p1246, q1246) {
                    const r1246 = this._values[p1246];
                    this.removeKeyframe(p1246), this._insertNewKeyframe(q1246, r1246);
                }
                assignSorted(i1246, j1246) {
                    if (void 0 !== j1246)
                        this.setKeyframes(i1246.slice(), j1246.slice());
                    else {
                        const k1246 = Array.from(i1246);
                        this.setKeyframes(k1246.map(([o1246]) => o1246), k1246.map(([, n1246]) => n1246));
                    }
                }
                clear() {
                    this._times.length = 0, this._values.length = 0;
                }
                searchKeyframe(h1246) {
                    return n130(this._times, h1246);
                }
                setKeyframes(z1245, a1246) {
                    z1245.length, a1246.length, function (c1246) {
                        c1246.every((e1246, f1246, g1246) => 0 === f1246 || e1246 > g1246[f1246 - 1] || w128(e1246, g1246[f1246 - 1], 1e-6));
                    }(z1245), this._times = z1245, this._values = a1246;
                }
                _insertNewKeyframe(s1245, t1245) {
                    const u1245 = this._times, v1245 = this._values, w1245 = u1245.length, x1245 = n130(u1245, s1245);
                    if (x1245 >= 0)
                        return x1245;
                    const y1245 = ~x1245;
                    return 0 === y1245 ? (u1245.unshift(s1245), v1245.unshift(t1245)) : y1245 === w1245 ? (u1245.push(s1245), v1245.push(t1245)) : (u1245.splice(y1245 - 1, 0, s1245), v1245.splice(y1245 - 1, 0, t1245)), y1245;
                }
            }
            function o130(r1245) {
                return r1245 > -1e-9 && r1245 < 1e-9;
            }
            function p130(k1245, l1245, m1245, n1245) {
                return m1245.slice().reverse().reduce(function (p1245, q1245) {
                    return q1245(k1245, l1245, p1245) || p1245;
                }, n1245);
            }
            s128.fastDefine("cc.KeyframeCurve", z150, {
                _times: [],
                _values: []
            }), g125("RealInterpolationMode", w150), function (j1245) {
                j1245[j1245.LINEAR = 0] = "LINEAR", j1245[j1245.CONSTANT = 1] = "CONSTANT", j1245[j1245.CUBIC = 2] = "CUBIC";
            }(w150 || g125("RealInterpolationMode", w150 = {})), g125("ExtrapolationMode", x150), function (i1245) {
                i1245[i1245.LINEAR = 0] = "LINEAR", i1245[i1245.CLAMP = 1] = "CLAMP", i1245[i1245.LOOP = 2] = "LOOP", i1245[i1245.PING_PONG = 3] = "PING_PONG";
            }(x150 || g125("ExtrapolationMode", x150 = {})), g125("TangentWeightMode", y150), function (h1245) {
                h1245[h1245.NONE = 0] = "NONE", h1245[h1245.LEFT = 1] = "LEFT", h1245[h1245.RIGHT = 2] = "RIGHT", h1245[h1245.BOTH = 3] = "BOTH";
            }(y150 || g125("TangentWeightMode", y150 = {}));
            const a151 = () => { }, b151 = () => a151, c151 = q130(() => { });
            function q130(c1245) {
                return function (e1245) {
                    return "function" == typeof e1245 ? c1245(e1245) : function (g1245) {
                        return c1245(g1245, e1245);
                    };
                };
            }
            function r130(r1244) {
                return t1244 => v1244 => {
                    !function (x1244, y1244, z1244) {
                        const a1245 = s130(x1244);
                        if (a1245) {
                            const b1245 = t130(a1245, "proto");
                            t130(b1245, "editor")[y1244] = z1244;
                        }
                    }(v1244, r1244, t1244);
                };
            }
            const d151 = "__ccclassCache__";
            function s130(q1244) {
                return t130(q1244, d151);
            }
            function t130(o1244, p1244) {
                return o1244[p1244] || (o1244[p1244] = {});
            }
            const e151 = q130((i1244, j1244) => {
                let k1244 = v126(i1244);
                k1244 === Object && (k1244 = null);
                const l1244 = {
                    name: j1244,
                    extends: k1244,
                    ctor: i1244
                }, m1244 = i1244[d151];
                if (m1244) {
                    const n1244 = m1244.proto;
                    n1244 && t126(l1244, n1244), i1244[d151] = void 0;
                }
                return s128(l1244);
            }), f151 = r130("requireComponent"), g151 = r130("executionOrder"), h151 = c151;
            function u130(h1243, i1243, j1243) {
                let l1243 = null;
                function k1243(m1243, n1243, o1243) {
                    !function (z1243, a1244, b1244, c1244, d1244, e1244) {
                        let f1244;
                        const g1244 = e1244 && "function" != typeof e1244 && (e1244.get || e1244.set);
                        d1244 && (f1244 = l128(d1244, g1244));
                        const h1244 = t126(a1244, f1244 || d1244 || {});
                        g1244 ? (e1244.get && (h1244.get = e1244.get), e1244.set && (h1244.set = e1244.set)) : x130(z1243, h1244, b1244, c1244, e1244);
                    }(function (y1243) {
                        return s130(y1243.constructor);
                    }(m1243), function (s1243, t1243) {
                        var u1243, v1243;
                        const w1243 = t130(s130(s1243.constructor), "proto"), x1243 = t130(w1243, "properties");
                        return null !== (v1243 = x1243[u1243 = t1243]) && void 0 !== v1243 ? v1243 : x1243[u1243] = {};
                    }(m1243, n1243), m1243.constructor, n1243, l1243, o1243);
                }
                return void 0 === h1243 ? u130({
                    type: void 0
                }) : void 0 === i1243 ? (l1243 = h1243, k1243) : void k1243(h1243, i1243, j1243);
            }
            function v130(e1243) {
                let f1243;
                try {
                    f1243 = e1243();
                }
                catch (g1243) {
                    return e1243;
                }
                return "object" != typeof f1243 || null === f1243 ? f1243 : e1243;
            }
            function w130(v1242, w1242, x1242) {
                var y1242, z1242;
                const a1243 = s130(v1242.constructor), b1243 = t130(a1243, "proto"), c1243 = t130(b1243, "properties"), d1243 = null !== (z1242 = c1243[y1242 = w1242]) && void 0 !== z1242 ? z1242 : c1243[y1242] = {};
                return d1243.__internalFlags |= e146.STANDALONE, x1242 && "function" != typeof x1242 && (x1242.get || x1242.set) ? (x1242.get && (d1243.get = x1242.get), x1242.set && (d1243.set = x1242.set)) : x130(a1243, d1243, v1242.constructor, w1242, x1242), d1243;
            }
            function x130(l1242, m1242, n1242, o1242, p1242) {
                if (void 0 !== p1242)
                    "function" == typeof p1242 ? m1242.default = v130(p1242) : null === p1242 || p1242.initializer && (m1242.default = v130(p1242.initializer));
                else {
                    const q1242 = l1242.default || (l1242.default = function (s1242) {
                        let t1242;
                        try {
                            t1242 = new s1242();
                        }
                        catch (u1242) {
                            return {};
                        }
                        return t1242;
                    }(n1242));
                    q1242.hasOwnProperty(o1242) && (m1242.default = q1242[o1242]);
                }
            }
            const i151 = Symbol("cc:SerializationMetadata"), j151 = g125("serializable", (i1242, j1242, k1242) => {
                z130(w130(i1242, j1242, k1242));
            });
            function y130(c1242) {
                return (e1242, f1242, g1242) => {
                    const h1242 = w130(e1242, f1242, g1242);
                    h1242.formerlySerializedAs = c1242, z130(h1242);
                };
            }
            const k151 = (y1241, z1241, a1242) => {
                const b1242 = w130(y1241, z1241, a1242);
                b1242.editorOnly = !0, z130(b1242);
            };
            function z130(x1241) {
                x1241.__internalFlags |= e146.IMPLICIT_SERIALIZABLE;
            }
            const l151 = a151, m151 = c151, n151 = b151, o151 = c151, p151 = b151, q151 = b151, r151 = b151, s151 = g125("editable", a151), t151 = g125("visible", b151), u151 = a151, v151 = g125("displayName", b151), w151 = g125("tooltip", b151), x151 = g125("range", b151), y151 = b151, z151 = g125("rangeStep", b151), a152 = g125("slide", a151), b152 = g125("displayOrder", b151), c152 = g125("disallowAnimation", a151), d152 = a131(y145), e152 = a131(z145), f152 = a131(a146), g152 = a131(b146);
            function a131(w1241) {
                return u130({
                    type: w1241
                });
            }
            const h152 = g125("override", (t1241, u1241, v1241) => {
                w130(t1241, u1241, v1241).override = !0;
            }), i152 = g125("editorExtrasTag", "__editorExtras__");
            const j152 = g125("EditorExtendable", class {
            });
            var k152 = Object.freeze({
                __proto__: null,
                uniquelyReferenced: l151,
                ccclass: e151,
                property: u130,
                requireComponent: f151,
                executionOrder: g151,
                disallowMultiple: h151,
                executeInEditMode: m151,
                menu: n151,
                playOnFocus: o151,
                inspector: p151,
                icon: q151,
                help: r151,
                type: a131,
                integer: d152,
                float: e152,
                boolean: f152,
                string: g152,
                editable: s151,
                tooltip: w151,
                visible: t151,
                displayName: v151,
                displayOrder: b152,
                range: x151,
                rangeStep: z151,
                slide: a152,
                disallowAnimation: c152,
                override: h152,
                formerlySerializedAs: y130,
                serializable: j151
            });
            g125("_decorator", k152);
            const l152 = [];
            class m152 {
                static _deferredDestroy() {
                    const q1241 = l152.length;
                    for (let r1241 = 0; r1241 < q1241; ++r1241) {
                        const s1241 = l152[r1241];
                        1 & s1241._objFlags || s1241._destroyImmediate();
                    }
                    q1241 === l152.length ? l152.length = 0 : l152.splice(0, q1241);
                }
                constructor(p1241 = "") {
                    this._objFlags = void 0, this._name = void 0, this._name = p1241, this._objFlags = 0;
                }
                get name() {
                    return this._name;
                }
                set name(o1241) {
                    this._name = o1241;
                }
                set hideFlags(m1241) {
                    const n1241 = m1241 & m152.Flags.AllHideMasks;
                    this._objFlags = this._objFlags & ~m152.Flags.AllHideMasks | n1241;
                }
                get hideFlags() {
                    return this._objFlags & m152.Flags.AllHideMasks;
                }
                get isValid() {
                    return !(1 & this._objFlags);
                }
                destroy() {
                    return 1 & this._objFlags ? (y125(5e3), !1) : !(4 & this._objFlags || (this._objFlags |= 4, l152.push(this), this._destroy(), 0));
                }
                _destruct() {
                    const w1240 = this.constructor;
                    let x1240 = w1240.__destruct__;
                    x1240 || (x1240 = function (z1240, a1241) {
                        const b1241 = z1240 instanceof s143.Node || z1240 instanceof s143.Component, c1241 = b1241 ? "_id" : null;
                        let d1241;
                        const e1241 = {};
                        for (d1241 in z1240)
                            if (z1240.hasOwnProperty(d1241)) {
                                if (d1241 === c1241)
                                    continue;
                                switch (typeof z1240[d1241]) {
                                    case "string":
                                        e1241[d1241] = "";
                                        break;
                                    case "object":
                                    case "function":
                                        e1241[d1241] = null;
                                }
                            }
                        if (s128._isCCClass(a1241)) {
                            const i1241 = s143.Class.Attr.getClassAttrs(a1241), j1241 = a1241.__props__;
                            for (let k1241 = 0; k1241 < j1241.length; k1241++) {
                                d1241 = j1241[k1241];
                                const l1241 = `${d1241}`;
                                if (l1241 in i1241) {
                                    if (b1241 && "_id" === d1241)
                                        continue;
                                    switch (typeof i1241[l1241]) {
                                        case "string":
                                            e1241[d1241] = "";
                                            break;
                                        case "object":
                                        case "function":
                                            e1241[d1241] = null;
                                            break;
                                        case "undefined":
                                            e1241[d1241] = void 0;
                                    }
                                }
                            }
                        }
                        return g1241 => {
                            for (const h1241 in e1241)
                                g1241[h1241] = e1241[h1241];
                        };
                    }(this, w1240), z144(w1240, "__destruct__", x1240, !0)), x1240(this);
                }
                _destroyImmediate() {
                    var v1240;
                    1 & this._objFlags ? z125(5e3) : (null === (v1240 = this._onPreDestroy) || void 0 === v1240 || v1240.call(this), this.destruct && this.destruct(), this._destruct(), this._objFlags |= 1);
                }
            }
            function b131(u1240) {
                return u1240 instanceof m152;
            }
            function c131(s1240, t1240) {
                return "object" == typeof s1240 ? !(!s1240 || s1240._objFlags & (t1240 ? 5 : 1)) : void 0 !== s1240;
            }
            var n152, o152, p152, q152, r152, s152, t152;
            let u152, v152;
            function d131(q1240, r1240) {
                return (r1240 << 3) + q1240;
            }
            function e131(p1240) {
                return w152[p1240];
            }
            function f131(o1240) {
                switch (o1240) {
                    case u152.Uint8:
                        return Uint8Array;
                    case u152.Uint16:
                        return Uint16Array;
                    case u152.Uint32:
                        return Uint32Array;
                    case u152.Int8:
                        return Int8Array;
                    case u152.Int16:
                        return Int16Array;
                    case u152.Int32:
                        return Int32Array;
                    case u152.Float32:
                        return Float32Array;
                    case u152.Float64:
                        return Float64Array;
                }
            }
            g125("CCObject", m152), m152.prototype._deserialize = null, s128.fastDefine("cc.Object", m152, {
                _name: "",
                _objFlags: 0
            }), z144(m152, "Flags", {
                Destroyed: 1,
                DontSave: 8,
                EditorOnly: 16,
                Dirty: 32,
                DontDestroy: 64,
                PersistentMask: -4192741,
                Destroying: 128,
                Deactivating: 256,
                LockedInEditor: 512,
                HideInHierarchy: 1024,
                AllHideMasks: 1560,
                IsPreloadStarted: 8192,
                IsOnLoadStarted: 32768,
                IsOnLoadCalled: 16384,
                IsOnEnableCalled: 2048,
                IsStartCalled: 65536,
                IsEditorOnEnableCalled: 4096,
                IsPositionLocked: 1 << 21,
                IsRotationLocked: 1 << 17,
                IsScaleLocked: 1 << 18,
                IsAnchorLocked: 1 << 19,
                IsSizeLocked: 1 << 20
            }), s143.isValid = c131, r126(m152, jsb.CCObject, ["prototype", "length", "name"]), r126(m152.prototype, jsb.CCObject.prototype, ["constructor", "name", "hideFlags", "isValid"]), g125("CCObject", m152 = jsb.CCObject), s143.Object = m152, function (n1240) {
                n1240[n1240.Uint8 = 0] = "Uint8", n1240[n1240.Uint16 = 1] = "Uint16", n1240[n1240.Uint32 = 2] = "Uint32", n1240[n1240.Int8 = 3] = "Int8", n1240[n1240.Int16 = 4] = "Int16", n1240[n1240.Int32 = 5] = "Int32", n1240[n1240.Float32 = 6] = "Float32", n1240[n1240.Float64 = 7] = "Float64";
            }(u152 || (u152 = {})), function (m1240) {
                m1240[m1240.Scalar = 0] = "Scalar", m1240[m1240.Vec2 = 1] = "Vec2", m1240[m1240.Vec3 = 2] = "Vec3", m1240[m1240.Vec4 = 3] = "Vec4", m1240[m1240.Quat = 4] = "Quat", m1240[m1240.Mat4 = 5] = "Mat4";
            }(v152 || (v152 = {})), g125("CompactValueTypeArray", e151("cc.CompactValueTypeArray")(((t152 = class t {
                constructor() {
                    this._byteOffset = p152 && p152(), this._unitCount = q152 && q152(), this._unitElement = r152 && r152(), this._length = s152 && s152();
                }
                static lengthFor(j1240, k1240, l1240) {
                    return e131(k1240).requiredUnits * j1240.length * f131(l1240).BYTES_PER_ELEMENT;
                }
                static compress(x1239, y1239, z1239, a1240, b1240, c1240) {
                    const d1240 = e131(y1239), e1240 = f131(z1239), f1240 = d1240.requiredUnits * x1239.length, g1240 = new e1240(a1240, b1240, f1240);
                    for (let i1240 = 0; i1240 < x1239.length; ++i1240)
                        d1240.compress(g1240, i1240, x1239[i1240]);
                    const h1240 = new t();
                    return h1240._unitElement = d131(z1239, y1239), h1240._byteOffset = c1240, h1240._unitCount = f1240, h1240._length = x1239.length, h1240;
                }
                decompress(p1239) {
                    const { storageUnit: q1239, elementType: r1239 } = {
                        storageUnit: 7 & (s1239 = this._unitElement),
                        elementType: s1239 >> 3
                    };
                    var s1239;
                    const t1239 = e131(r1239), u1239 = new (f131(q1239))(p1239, this._byteOffset, this._unitCount), v1239 = new Array(this._length);
                    for (let w1239 = 0; w1239 < this._length; ++w1239)
                        v1239[w1239] = t1239.decompress(u1239, w1239);
                    return v1239;
                }
            }).StorageUnit = u152, t152.ElementType = v152, p152 = p130((o152 = t152).prototype, "_byteOffset", [j151], function () {
                return 0;
            }), q152 = p130(o152.prototype, "_unitCount", [j151], function () {
                return 0;
            }), r152 = p130(o152.prototype, "_unitElement", [j151], function () {
                return d131(u152.Uint8, v152.Scalar);
            }), s152 = p130(o152.prototype, "_length", [j151], function () {
                return 0;
            }), n152 = o152)) || n152);
            const w152 = {
                [v152.Scalar]: {
                    requiredUnits: 1,
                    compress(m1239, n1239, o1239) {
                        m1239[n1239] = o1239;
                    },
                    decompress: (k1239, l1239) => k1239[l1239]
                },
                [v152.Vec2]: {
                    requiredUnits: 2,
                    compress(h1239, i1239, j1239) {
                        h1239[2 * i1239] = j1239.x, h1239[2 * i1239 + 1] = j1239.y;
                    },
                    decompress: (f1239, g1239) => new w146(f1239[2 * g1239], f1239[2 * g1239 + 1])
                },
                [v152.Vec3]: {
                    requiredUnits: 3,
                    compress(c1239, d1239, e1239) {
                        c1239[3 * d1239] = e1239.x, c1239[3 * d1239 + 1] = e1239.y, c1239[3 * d1239 + 2] = e1239.z;
                    },
                    decompress: (a1239, b1239) => new w146(a1239[3 * b1239], a1239[3 * b1239 + 1], a1239[3 * b1239 + 2])
                },
                [v152.Vec4]: {
                    requiredUnits: 4,
                    compress(x1238, y1238, z1238) {
                        x1238[4 * y1238] = z1238.x, x1238[4 * y1238 + 1] = z1238.y, x1238[4 * y1238 + 2] = z1238.z, x1238[4 * y1238 + 3] = z1238.w;
                    },
                    decompress: (v1238, w1238) => new v146(v1238[4 * w1238], v1238[4 * w1238 + 1], v1238[4 * w1238 + 2], v1238[4 * w1238 + 3])
                },
                [v152.Quat]: {
                    requiredUnits: 4,
                    compress(s1238, t1238, u1238) {
                        s1238[4 * t1238] = u1238.x, s1238[4 * t1238 + 1] = u1238.y, s1238[4 * t1238 + 2] = u1238.z, s1238[4 * t1238 + 3] = u1238.w;
                    },
                    decompress: (q1238, r1238) => new g147(q1238[4 * r1238], q1238[4 * r1238 + 1], q1238[4 * r1238 + 2], q1238[4 * r1238 + 3])
                },
                [v152.Mat4]: {
                    requiredUnits: 16,
                    compress(n1238, o1238, p1238) {
                        o147.toArray(n1238, p1238, 16 * o1238);
                    },
                    decompress: (l1238, m1238) => o147.fromArray(new o147(), l1238, 16 * m1238)
                }
            }, x152 = g125("serializeTag", Symbol("[[Serialize]]")), y152 = g125("deserializeTag", Symbol("[[Deserialize]]"));
            function g131() {
                return 0;
            }
            function h131(k1238) {
                return k1238;
            }
            function i131(j1238) {
                return j1238 * j1238;
            }
            function j131(i1238) {
                return i1238 * (2 - i1238);
            }
            function k131(h1238) {
                return (h1238 *= 2) < 1 ? .5 * h1238 * h1238 : -.5 * (--h1238 * (h1238 - 2) - 1);
            }
            function l131(g1238) {
                return g1238 * g1238 * g1238;
            }
            function m131(f1238) {
                return --f1238 * f1238 * f1238 + 1;
            }
            function n131(e1238) {
                return (e1238 *= 2) < 1 ? .5 * e1238 * e1238 * e1238 : .5 * ((e1238 -= 2) * e1238 * e1238 + 2);
            }
            function o131(d1238) {
                return d1238 * d1238 * d1238 * d1238;
            }
            function p131(c1238) {
                return 1 - --c1238 * c1238 * c1238 * c1238;
            }
            function q131(b1238) {
                return (b1238 *= 2) < 1 ? .5 * b1238 * b1238 * b1238 * b1238 : -.5 * ((b1238 -= 2) * b1238 * b1238 * b1238 - 2);
            }
            function r131(a1238) {
                return a1238 * a1238 * a1238 * a1238 * a1238;
            }
            function s131(z1237) {
                return --z1237 * z1237 * z1237 * z1237 * z1237 + 1;
            }
            function t131(y1237) {
                return (y1237 *= 2) < 1 ? .5 * y1237 * y1237 * y1237 * y1237 * y1237 : .5 * ((y1237 -= 2) * y1237 * y1237 * y1237 * y1237 + 2);
            }
            function u131(x1237) {
                return 1 === x1237 ? 1 : 1 - Math.cos(x1237 * Math.PI / 2);
            }
            function v131(w1237) {
                return Math.sin(w1237 * Math.PI / 2);
            }
            function w131(v1237) {
                return .5 * (1 - Math.cos(Math.PI * v1237));
            }
            function x131(u1237) {
                return 0 === u1237 ? 0 : Math.pow(1024, u1237 - 1);
            }
            function y131(t1237) {
                return 1 === t1237 ? 1 : 1 - Math.pow(2, -10 * t1237);
            }
            function z131(s1237) {
                return 0 === s1237 ? 0 : 1 === s1237 ? 1 : (s1237 *= 2) < 1 ? .5 * Math.pow(1024, s1237 - 1) : .5 * (2 - Math.pow(2, -10 * (s1237 - 1)));
            }
            function a132(r1237) {
                return 1 - Math.sqrt(1 - r1237 * r1237);
            }
            function b132(q1237) {
                return Math.sqrt(1 - --q1237 * q1237);
            }
            function c132(p1237) {
                return (p1237 *= 2) < 1 ? -.5 * (Math.sqrt(1 - p1237 * p1237) - 1) : .5 * (Math.sqrt(1 - (p1237 -= 2) * p1237) + 1);
            }
            function d132(m1237) {
                let n1237, o1237 = .1;
                return 0 === m1237 ? 0 : 1 === m1237 ? 1 : (!o1237 || o1237 < 1 ? (o1237 = 1, n1237 = .1) : n1237 = .4 * Math.asin(1 / o1237) / (2 * Math.PI), -o1237 * Math.pow(2, 10 * (m1237 -= 1)) * Math.sin(2 * (m1237 - n1237) * Math.PI / .4));
            }
            function e132(j1237) {
                let k1237, l1237 = .1;
                return 0 === j1237 ? 0 : 1 === j1237 ? 1 : (!l1237 || l1237 < 1 ? (l1237 = 1, k1237 = .1) : k1237 = .4 * Math.asin(1 / l1237) / (2 * Math.PI), l1237 * Math.pow(2, -10 * j1237) * Math.sin(2 * (j1237 - k1237) * Math.PI / .4) + 1);
            }
            function f132(g1237) {
                let h1237, i1237 = .1;
                return 0 === g1237 ? 0 : 1 === g1237 ? 1 : (!i1237 || i1237 < 1 ? (i1237 = 1, h1237 = .1) : h1237 = .4 * Math.asin(1 / i1237) / (2 * Math.PI), (g1237 *= 2) < 1 ? i1237 * Math.pow(2, 10 * (g1237 -= 1)) * Math.sin(2 * (g1237 - h1237) * Math.PI / .4) * -.5 : i1237 * Math.pow(2, -10 * (g1237 -= 1)) * Math.sin(2 * (g1237 - h1237) * Math.PI / .4) * .5 + 1);
            }
            function g132(e1237) {
                if (1 === e1237)
                    return 1;
                const f1237 = 1.70158;
                return e1237 * e1237 * ((f1237 + 1) * e1237 - f1237);
            }
            function h132(c1237) {
                if (0 === c1237)
                    return 0;
                const d1237 = 1.70158;
                return --c1237 * c1237 * ((d1237 + 1) * c1237 + d1237) + 1;
            }
            function i132(a1237) {
                const b1237 = 2.5949095;
                return (a1237 *= 2) < 1 ? a1237 * a1237 * ((b1237 + 1) * a1237 - b1237) * .5 : .5 * ((a1237 -= 2) * a1237 * ((b1237 + 1) * a1237 + b1237) + 2);
            }
            function j132(z1236) {
                return 1 - k132(1 - z1236);
            }
            function k132(y1236) {
                return y1236 < 1 / 2.75 ? 7.5625 * y1236 * y1236 : y1236 < 2 / 2.75 ? 7.5625 * (y1236 -= 1.5 / 2.75) * y1236 + .75 : y1236 < 2.5 / 2.75 ? 7.5625 * (y1236 -= 2.25 / 2.75) * y1236 + .9375 : 7.5625 * (y1236 -= 2.625 / 2.75) * y1236 + .984375;
            }
            function l132(x1236) {
                return x1236 < .5 ? .5 * j132(2 * x1236) : .5 * k132(2 * x1236 - 1) + .5;
            }
            function m132(w1236) {
                return w1236 <= 0 ? 0 : w1236 >= 1 ? 1 : w1236 * w1236 * (3 - 2 * w1236);
            }
            function n132(v1236) {
                return v1236 <= 0 ? 0 : v1236 >= 1 ? 1 : v1236 * v1236 * v1236 * (v1236 * (6 * v1236 - 15) + 10);
            }
            s143._decorator = k152;
            const z152 = o132(i131, j131), a153 = o132(l131, m131), b153 = o132(o131, p131), c153 = o132(r131, s131), d153 = o132(u131, v131), e153 = o132(x131, y131), f153 = o132(a132, b132), g153 = o132(d132, e132), h153 = o132(g132, h132), i153 = o132(j132, k132);
            function o132(r1236, s1236) {
                return u1236 => u1236 < .5 ? s1236(2 * u1236) / 2 : r1236(2 * u1236 - 1) / 2 + .5;
            }
            var j153 = Object.freeze({
                __proto__: null,
                constant: g131,
                linear: h131,
                quadIn: i131,
                quadOut: j131,
                quadInOut: k131,
                cubicIn: l131,
                cubicOut: m131,
                cubicInOut: n131,
                quartIn: o131,
                quartOut: p131,
                quartInOut: q131,
                quintIn: r131,
                quintOut: s131,
                quintInOut: t131,
                sineIn: u131,
                sineOut: v131,
                sineInOut: w131,
                expoIn: x131,
                expoOut: y131,
                expoInOut: z131,
                circIn: a132,
                circOut: b132,
                circInOut: c132,
                elasticIn: d132,
                elasticOut: e132,
                elasticInOut: f132,
                backIn: g132,
                backOut: h132,
                backInOut: i132,
                bounceIn: j132,
                bounceOut: k132,
                bounceInOut: l132,
                smooth: m132,
                fade: n132,
                quadOutIn: z152,
                cubicOutIn: a153,
                quartOutIn: b153,
                quintOutIn: c153,
                sineOutIn: d153,
                expoOutIn: e153,
                circOutIn: f153,
                elasticOutIn: g153,
                backOutIn: h153,
                bounceOutIn: i153
            });
            let k153;
            g125("easing", j153), g125("EasingMethod", k153), function (q1236) {
                q1236[q1236.LINEAR = 0] = "LINEAR", q1236[q1236.CONSTANT = 1] = "CONSTANT", q1236[q1236.QUAD_IN = 2] = "QUAD_IN", q1236[q1236.QUAD_OUT = 3] = "QUAD_OUT", q1236[q1236.QUAD_IN_OUT = 4] = "QUAD_IN_OUT", q1236[q1236.QUAD_OUT_IN = 5] = "QUAD_OUT_IN", q1236[q1236.CUBIC_IN = 6] = "CUBIC_IN", q1236[q1236.CUBIC_OUT = 7] = "CUBIC_OUT", q1236[q1236.CUBIC_IN_OUT = 8] = "CUBIC_IN_OUT", q1236[q1236.CUBIC_OUT_IN = 9] = "CUBIC_OUT_IN", q1236[q1236.QUART_IN = 10] = "QUART_IN", q1236[q1236.QUART_OUT = 11] = "QUART_OUT", q1236[q1236.QUART_IN_OUT = 12] = "QUART_IN_OUT", q1236[q1236.QUART_OUT_IN = 13] = "QUART_OUT_IN", q1236[q1236.QUINT_IN = 14] = "QUINT_IN", q1236[q1236.QUINT_OUT = 15] = "QUINT_OUT", q1236[q1236.QUINT_IN_OUT = 16] = "QUINT_IN_OUT", q1236[q1236.QUINT_OUT_IN = 17] = "QUINT_OUT_IN", q1236[q1236.SINE_IN = 18] = "SINE_IN", q1236[q1236.SINE_OUT = 19] = "SINE_OUT", q1236[q1236.SINE_IN_OUT = 20] = "SINE_IN_OUT", q1236[q1236.SINE_OUT_IN = 21] = "SINE_OUT_IN", q1236[q1236.EXPO_IN = 22] = "EXPO_IN", q1236[q1236.EXPO_OUT = 23] = "EXPO_OUT", q1236[q1236.EXPO_IN_OUT = 24] = "EXPO_IN_OUT", q1236[q1236.EXPO_OUT_IN = 25] = "EXPO_OUT_IN", q1236[q1236.CIRC_IN = 26] = "CIRC_IN", q1236[q1236.CIRC_OUT = 27] = "CIRC_OUT", q1236[q1236.CIRC_IN_OUT = 28] = "CIRC_IN_OUT", q1236[q1236.CIRC_OUT_IN = 29] = "CIRC_OUT_IN", q1236[q1236.ELASTIC_IN = 30] = "ELASTIC_IN", q1236[q1236.ELASTIC_OUT = 31] = "ELASTIC_OUT", q1236[q1236.ELASTIC_IN_OUT = 32] = "ELASTIC_IN_OUT", q1236[q1236.ELASTIC_OUT_IN = 33] = "ELASTIC_OUT_IN", q1236[q1236.BACK_IN = 34] = "BACK_IN", q1236[q1236.BACK_OUT = 35] = "BACK_OUT", q1236[q1236.BACK_IN_OUT = 36] = "BACK_IN_OUT", q1236[q1236.BACK_OUT_IN = 37] = "BACK_OUT_IN", q1236[q1236.BOUNCE_IN = 38] = "BOUNCE_IN", q1236[q1236.BOUNCE_OUT = 39] = "BOUNCE_OUT", q1236[q1236.BOUNCE_IN_OUT = 40] = "BOUNCE_IN_OUT", q1236[q1236.BOUNCE_OUT_IN = 41] = "BOUNCE_OUT_IN", q1236[q1236.SMOOTH = 42] = "SMOOTH", q1236[q1236.FADE = 43] = "FADE";
            }(k153 || g125("EasingMethod", k153 = {}));
            const l153 = {
                [k153.CONSTANT]: g131,
                [k153.LINEAR]: h131,
                [k153.QUAD_IN]: i131,
                [k153.QUAD_OUT]: j131,
                [k153.QUAD_IN_OUT]: k131,
                [k153.QUAD_OUT_IN]: z152,
                [k153.CUBIC_IN]: l131,
                [k153.CUBIC_OUT]: m131,
                [k153.CUBIC_IN_OUT]: n131,
                [k153.CUBIC_OUT_IN]: a153,
                [k153.QUART_IN]: o131,
                [k153.QUART_OUT]: p131,
                [k153.QUART_IN_OUT]: q131,
                [k153.QUART_OUT_IN]: b153,
                [k153.QUINT_IN]: r131,
                [k153.QUINT_OUT]: s131,
                [k153.QUINT_IN_OUT]: t131,
                [k153.QUINT_OUT_IN]: c153,
                [k153.SINE_IN]: u131,
                [k153.SINE_OUT]: v131,
                [k153.SINE_IN_OUT]: w131,
                [k153.SINE_OUT_IN]: d153,
                [k153.EXPO_IN]: x131,
                [k153.EXPO_OUT]: y131,
                [k153.EXPO_IN_OUT]: z131,
                [k153.EXPO_OUT_IN]: e153,
                [k153.CIRC_IN]: a132,
                [k153.CIRC_OUT]: b132,
                [k153.CIRC_IN_OUT]: c132,
                [k153.CIRC_OUT_IN]: f153,
                [k153.ELASTIC_IN]: d132,
                [k153.ELASTIC_OUT]: e132,
                [k153.ELASTIC_IN_OUT]: f132,
                [k153.ELASTIC_OUT_IN]: g153,
                [k153.BACK_IN]: g132,
                [k153.BACK_OUT]: h132,
                [k153.BACK_IN_OUT]: i132,
                [k153.BACK_OUT_IN]: h153,
                [k153.BOUNCE_IN]: j132,
                [k153.BOUNCE_OUT]: k132,
                [k153.BOUNCE_IN_OUT]: l132,
                [k153.BOUNCE_OUT_IN]: i153,
                [k153.SMOOTH]: m132,
                [k153.FADE]: n132
            };
            function p132(p1236) {
                return l153[p1236];
            }
            l125(255), l125(65280);
            const m153 = w150.LINEAR << 0 | y150.NONE << 8 | k153.LINEAR << 16;
            class n153 extends j152 {
                constructor(...o1236) {
                    super(...o1236), this.value = 0, this.rightTangent = 0, this.rightTangentWeight = 0, this.leftTangent = 0, this.leftTangentWeight = 0, this._flags = m153;
                }
                get interpolationMode() {
                    return (255 & this._flags) >> 0;
                }
                set interpolationMode(n1236) {
                    this._flags &= -256, this._flags |= n1236 << 0;
                }
                get tangentWeightMode() {
                    return (65280 & this._flags) >> 8;
                }
                set tangentWeightMode(m1236) {
                    this._flags &= -65281, this._flags |= m1236 << 8;
                }
                get easingMethod() {
                    return (16711680 & this._flags) >> 16;
                }
                set easingMethod(l1236) {
                    this._flags &= -16711681, this._flags |= l1236 << 16;
                }
            }
            var o153, p153, q153, r153;
            function q132(a1236) {
                const b1236 = new n153();
                if ("number" == typeof a1236)
                    b1236.value = a1236;
                else {
                    const { interpolationMode: c1236, tangentWeightMode: d1236, value: e1236, rightTangent: f1236, rightTangentWeight: g1236, leftTangent: h1236, leftTangentWeight: i1236, easingMethod: j1236, [i152]: k1236 } = a1236;
                    b1236.value = null != e1236 ? e1236 : b1236.value, b1236.rightTangent = null != f1236 ? f1236 : b1236.rightTangent, b1236.rightTangentWeight = null != g1236 ? g1236 : b1236.rightTangentWeight, b1236.leftTangent = null != h1236 ? h1236 : b1236.leftTangent, b1236.leftTangentWeight = null != i1236 ? i1236 : b1236.leftTangentWeight, b1236.interpolationMode = null != c1236 ? c1236 : b1236.interpolationMode, b1236.tangentWeightMode = null != d1236 ? d1236 : b1236.tangentWeightMode, b1236.easingMethod = null != j1236 ? j1236 : b1236.easingMethod, k1236 && (b1236[i152] = k1236);
                }
                return b1236;
            }
            s128.fastDefine("cc.RealKeyframeValue", n153, {
                interpolationMode: w150.LINEAR,
                tangentWeightMode: y150.NONE,
                value: 0,
                rightTangent: 0,
                rightTangentWeight: 0,
                leftTangent: 0,
                leftTangentWeight: 0,
                easingMethod: k153.LINEAR,
                [i152]: void 0
            }), s128.Attr.setClassAttr(n153, i152, "editorOnly", !0), (o153 = n153, null !== (q153 = (p153 = o153)[i151]) && void 0 !== q153 ? q153 : p153[i151] = {}).uniquelyReferenced = !0;
            class s153 extends z150 {
                constructor(...z1235) {
                    super(...z1235), this.preExtrapolation = x150.CLAMP, this.postExtrapolation = x150.CLAMP;
                }
                evaluate(y1232) {
                    const { _times: z1232, _values: a1233 } = this, b1233 = z1232.length;
                    if (0 === b1233)
                        return 0;
                    const c1233 = z1232[0], d1233 = z1232[b1233 - 1];
                    if (y1232 < c1233) {
                        const { preExtrapolation: x1235 } = this, y1235 = a1233[0];
                        if (x1235 === x150.CLAMP || b1233 < 2)
                            return y1235.value;
                        switch (x1235) {
                            case x150.LINEAR:
                                return v132(c1233, a1233[0].value, z1232[1], a1233[1].value, y1232);
                            case x150.LOOP:
                                y1232 = t132(y1232, c1233, d1233);
                                break;
                            case x150.PING_PONG:
                                y1232 = u132(y1232, c1233, d1233);
                                break;
                            default:
                                return y1235.value;
                        }
                    }
                    else if (y1232 > d1233) {
                        const { postExtrapolation: v1235 } = this, w1235 = a1233[b1233 - 1];
                        if (v1235 === x150.CLAMP || b1233 < 2)
                            return w1235.value;
                        switch (v1235) {
                            case x150.LINEAR:
                                return v132(d1233, w1235.value, z1232[b1233 - 2], a1233[b1233 - 2].value, y1232);
                            case x150.LOOP:
                                y1232 = t132(y1232, c1233, d1233);
                                break;
                            case x150.PING_PONG:
                                y1232 = u132(y1232, c1233, d1233);
                                break;
                            default:
                                return w1235.value;
                        }
                    }
                    const e1233 = n130(z1232, y1232);
                    if (e1233 >= 0)
                        return a1233[e1233].value;
                    const f1233 = ~e1233, g1233 = f1233 - 1, h1233 = z1232[g1233], i1233 = a1233[g1233], j1233 = z1232[f1233];
                    return function (l1233, m1233, n1233, o1233, p1233) {
                        const q1233 = n1233 - l1233;
                        switch (m1233.interpolationMode) {
                            default:
                            case w150.CONSTANT:
                                return m1233.value;
                            case w150.LINEAR:
                                {
                                    const u1235 = m1233.easingMethod === k153.LINEAR ? p1233 : p132(m1233.easingMethod)(p1233);
                                    return z128(m1233.value, o1233.value, u1235);
                                }
                            case w150.CUBIC:
                                {
                                    const r1233 = 1 / 3, { rightTangent: s1233, rightTangentWeight: t1233 } = m1233, u1233 = 0 != (m1233.tangentWeightMode & y150.RIGHT), { leftTangent: v1233, leftTangentWeight: w1233 } = o1233, x1233 = 0 != (o1233.tangentWeightMode & y150.LEFT);
                                    if (u1233 || x1233) {
                                        let a1234 = 0;
                                        if (u1233)
                                            a1234 = t1233;
                                        else {
                                            const s1235 = q1233, t1235 = q1233 * s1233;
                                            a1234 = Math.sqrt(s1235 * s1235 + t1235 * t1235) * r1233;
                                        }
                                        const b1234 = Math.atan(s1233), c1234 = Math.cos(b1234) * a1234 + l1233, d1234 = Math.sin(b1234) * a1234 + m1233.value;
                                        let e1234 = 0;
                                        if (x1233)
                                            e1234 = w1233;
                                        else {
                                            const q1235 = q1233, r1235 = q1233 * v1233;
                                            e1234 = Math.sqrt(q1235 * q1235 + r1235 * r1235) * r1233;
                                        }
                                        const f1234 = Math.atan(v1233), g1234 = (c1234 - l1233) / q1233, h1234 = (-Math.cos(f1234) * e1234 + n1233 - l1233) / q1233, i1234 = d1234, j1234 = -Math.sin(f1234) * e1234 + o1233.value, k1234 = [0, 0, 0], l1234 = function (v1234, w1234, x1234, y1234, z1234) {
                                            const a1235 = x1234 / y1234, b1235 = w1234 / y1234, c1235 = a1235 * a1235, d1235 = 1 / 3 * (-1 / 3 * c1235 + b1235), e1235 = .5 * (2 / 27 * a1235 * c1235 - 1 / 3 * a1235 * b1235 + v1234 / y1234), f1235 = d1235 * d1235 * d1235, g1235 = e1235 * e1235 + f1235;
                                            let h1235 = 0;
                                            if (o130(g1235)) {
                                                if (o130(e1235))
                                                    return z1234[0] = 0, 1;
                                                {
                                                    const p1235 = Math.cbrt(-e1235);
                                                    return z1234[0] = 2 * p1235, z1234[1] = -p1235, 2;
                                                }
                                            }
                                            if (g1235 < 0) {
                                                const n1235 = 1 / 3 * Math.acos(-e1235 / Math.sqrt(-f1235)), o1235 = 2 * Math.sqrt(-d1235);
                                                z1234[0] = o1235 * Math.cos(n1235), z1234[1] = -o1235 * Math.cos(n1235 + Math.PI / 3), z1234[2] = -o1235 * Math.cos(n1235 - Math.PI / 3), h1235 = 3;
                                            }
                                            else {
                                                const k1235 = Math.sqrt(g1235), l1235 = Math.cbrt(k1235 - e1235), m1235 = -Math.cbrt(k1235 + e1235);
                                                z1234[0] = l1235 + m1235, h1235 = 1;
                                            }
                                            const i1235 = 1 / 3 * a1235;
                                            for (let j1235 = 0; j1235 < h1235; ++j1235)
                                                z1234[j1235] -= i1235;
                                            return h1235;
                                        }(0 - p1233, 3 * g1234, 3 * h1234 - 6 * g1234, 3 * (g1234 - h1234) + 1, k1234), m1234 = function (p1234, q1234, r1234) {
                                            let s1234 = r1234;
                                            if (1 === q1234)
                                                s1234 = p1234[0];
                                            else {
                                                s1234 = -1 / 0;
                                                for (let t1234 = 0; t1234 < q1234; ++t1234) {
                                                    const u1234 = p1234[t1234];
                                                    u1234 >= 0 && u1234 <= 1 && u1234 > s1234 && (s1234 = u1234);
                                                }
                                                s1234 === -1 / 0 && (s1234 = 0);
                                            }
                                            return s1234;
                                        }(k1234, l1234, p1233);
                                        return w132(m1233.value, i1234, j1234, o1233.value, m1234);
                                    }
                                    {
                                        const y1233 = m1233.value + r1233 * s1233 * q1233, z1233 = o1233.value - r1233 * v1233 * q1233;
                                        return w132(m1233.value, y1233, z1233, o1233.value, p1233);
                                    }
                                }
                        }
                    }(h1233, i1233, j1233, a1233[f1233], (y1232 - h1233) / (j1233 - h1233));
                }
                addKeyFrame(w1232, x1232) {
                    return super.addKeyFrame(w1232, q132(x1232));
                }
                assignSorted(n1232, o1232) {
                    if (void 0 !== o1232)
                        this.setKeyframes(n1232.slice(), o1232.map(v1232 => q132(v1232)));
                    else {
                        const q1232 = Array.from(n1232);
                        this.setKeyframes(q1232.map(([u1232]) => u1232), q1232.map(([, t1232]) => q132(t1232)));
                    }
                }
                isConstant(j1232) {
                    if (this._values.length <= 1)
                        return !0;
                    const k1232 = this._values[0].value;
                    return this._values.every(m1232 => w128(m1232.value, k1232, j1232));
                }
                [x152](s1231, t1231) {
                    if (!t1231.toCCON)
                        return void s1231.writeThis();
                    const { _times: u1231, _values: v1231 } = this, w1231 = u1231.length, x1231 = new DataView(new ArrayBuffer(0 + t153 + t153 + u153 + v153 * w1231 + c154 * w1231));
                    let y1231 = 0;
                    x1231.setUint8(y1231, this.preExtrapolation), y1231 += t153, x1231.setUint8(y1231, this.postExtrapolation), y1231 += t153, x1231.setUint32(y1231, w1231, !0), y1231 += u153, u1231.forEach((h1232, i1232) => x1231.setFloat32(y1231 + v153 * i1232, h1232, !0)), y1231 += v153 * w1231;
                    for (const g1232 of v1231)
                        y1231 = r132(x1231, g1232, y1231);
                    const z1231 = new Uint8Array(x1231.buffer, 0, y1231);
                    s1231.writeProperty("bytes", z1231);
                    const a1232 = v1231.map(f1232 => f1232[i152]);
                    a1232.some(e1232 => void 0 !== e1232) && s1231.writeProperty("keyframeValueEditorExtras", a1232);
                }
                [y152](b1231, c1231) {
                    if (!c1231.fromCCON)
                        return void b1231.readThis();
                    const d1231 = b1231.readProperty("bytes"), e1231 = new DataView(d1231.buffer, d1231.byteOffset, d1231.byteLength);
                    let f1231 = 0;
                    this.preExtrapolation = e1231.getUint8(f1231), f1231 += t153, this.postExtrapolation = e1231.getUint8(f1231), f1231 += t153;
                    const g1231 = e1231.getUint32(f1231, !0);
                    f1231 += u153;
                    const h1231 = Array.from({
                        length: g1231
                    }, (q1231, r1231) => e1231.getFloat32(f1231 + v153 * r1231, !0));
                    f1231 += v153 * g1231;
                    const i1231 = new Array(g1231);
                    for (let o1231 = 0; o1231 < g1231; ++o1231) {
                        const p1231 = q132({});
                        f1231 = s132(e1231, p1231, f1231), i1231[o1231] = p1231;
                    }
                    d1231.byteLength;
                    const j1231 = b1231.readProperty("keyframeValueEditorExtras");
                    j1231 && (j1231.length, j1231.forEach((m1231, n1231) => i1231[n1231][i152] = m1231)), this._times = h1231, this._values = i1231;
                }
            }
            g125("RealCurve", s153), s128.fastDefine("cc.RealCurve", s153, {
                _times: [],
                _values: [],
                preExtrapolation: x150.CLAMP,
                postExtrapolation: x150.CLAMP
            }), function (a1231) {
                a1231[a1231.VALUE = 1] = "VALUE", a1231[a1231.INTERPOLATION_MODE = 2] = "INTERPOLATION_MODE", a1231[a1231.TANGENT_WEIGHT_MODE = 4] = "TANGENT_WEIGHT_MODE", a1231[a1231.LEFT_TANGENT = 8] = "LEFT_TANGENT", a1231[a1231.LEFT_TANGENT_WEIGHT = 16] = "LEFT_TANGENT_WEIGHT", a1231[a1231.RIGHT_TANGENT = 32] = "RIGHT_TANGENT", a1231[a1231.RIGHT_TANGENT_WEIGHT = 64] = "RIGHT_TANGENT_WEIGHT";
            }(r153 || (r153 = {}));
            const t153 = 1, u153 = 4, v153 = 4, { interpolationMode: w153, tangentWeightMode: x153, leftTangent: y153, leftTangentWeight: z153, rightTangent: a154, rightTangentWeight: b154 } = q132({}), c154 = 26;
            function r132(m1230, n1230, o1230) {
                let p1230 = 0, q1230 = o1230;
                const r1230 = q1230;
                q1230 += 4;
                const { value: s1230, interpolationMode: t1230, tangentWeightMode: u1230, rightTangent: v1230, rightTangentWeight: w1230, leftTangent: x1230, leftTangentWeight: y1230, easingMethod: z1230 } = n1230;
                return m1230.setFloat32(q1230, s1230, !0), q1230 += 4, t1230 !== w153 && (p1230 |= r153.INTERPOLATION_MODE, m1230.setUint8(q1230, t1230), q1230 += 1), u1230 !== x153 && (p1230 |= r153.TANGENT_WEIGHT_MODE, m1230.setUint8(q1230, u1230), q1230 += 1), x1230 !== y153 && (p1230 |= r153.LEFT_TANGENT, m1230.setFloat32(q1230, x1230, !0), q1230 += 4), y1230 !== z153 && (p1230 |= r153.LEFT_TANGENT_WEIGHT, m1230.setFloat32(q1230, y1230, !0), q1230 += 4), v1230 !== a154 && (p1230 |= r153.RIGHT_TANGENT, m1230.setFloat32(q1230, v1230, !0), q1230 += 4), w1230 !== b154 && (p1230 |= r153.RIGHT_TANGENT_WEIGHT, m1230.setFloat32(q1230, w1230, !0), q1230 += 4), p1230 |= z1230 << 8, m1230.setUint32(r1230, p1230, !0), q1230;
            }
            function s132(g1230, h1230, i1230) {
                let j1230 = i1230;
                const k1230 = g1230.getUint32(j1230, !0);
                j1230 += 4, h1230.value = g1230.getFloat32(j1230, !0), j1230 += 4, k1230 & r153.INTERPOLATION_MODE && (h1230.interpolationMode = g1230.getUint8(j1230), j1230 += 1), k1230 & r153.TANGENT_WEIGHT_MODE && (h1230.tangentWeightMode = g1230.getUint8(j1230), j1230 += 1), k1230 & r153.LEFT_TANGENT && (h1230.leftTangent = g1230.getFloat32(j1230, !0), j1230 += 4), k1230 & r153.LEFT_TANGENT_WEIGHT && (h1230.leftTangentWeight = g1230.getFloat32(j1230, !0), j1230 += 4), k1230 & r153.RIGHT_TANGENT && (h1230.rightTangent = g1230.getFloat32(j1230, !0), j1230 += 4), k1230 & r153.RIGHT_TANGENT_WEIGHT && (h1230.rightTangentWeight = g1230.getFloat32(j1230, !0), j1230 += 4);
                const l1230 = (65280 & k1230) >> 8;
                return h1230.easingMethod = l1230, j1230;
            }
            function t132(d1230, e1230, f1230) {
                return e1230 + k129(d1230 - e1230, f1230 - e1230);
            }
            function u132(a1230, b1230, c1230) {
                return b1230 + l129(a1230 - b1230, c1230 - b1230);
            }
            function v132(v1229, w1229, x1229, y1229, z1229) {
                return w1229 + (y1229 - w1229) / (x1229 - v1229) * (z1229 - v1229);
            }
            function w132(p1229, q1229, r1229, s1229, t1229) {
                const u1229 = 1 - t1229;
                return u1229 * u1229 * u1229 * p1229 + 3 * u1229 * u1229 * t1229 * q1229 + 3 * u1229 * t1229 * t1229 * r1229 + t1229 * t1229 * t1229 * s1229;
            }
            function x132(j1229, k1229, l1229, m1229, n1229) {
                const o1229 = 1 - n1229;
                return o1229 * (o1229 * (j1229 + (3 * k1229 - j1229) * n1229) + 3 * l1229 * n1229 * n1229) + m1229 * n1229 * n1229 * n1229;
            }
            s143.bezier = x132;
            const d154 = Math.cos, e154 = Math.acos, f154 = Math.max, g154 = 2 * Math.PI, h154 = Math.sqrt;
            function y132(i1229) {
                return i1229 < 0 ? -Math.pow(-i1229, 1 / 3) : Math.pow(i1229, 1 / 3);
            }
            function z132(b1228, c1228) {
                const d1228 = function (g1228, h1228) {
                    const i1228 = h1228 - 0, j1228 = h1228 - g1228[0], k1228 = 3 * i1228, l1228 = 3 * j1228, m1228 = 3 * (h1228 - g1228[2]), n1228 = 1 / (-i1228 + l1228 - m1228 + (h1228 - 1)), o1228 = 1 / 3, p1228 = (k1228 - 6 * j1228 + m1228) * n1228, q1228 = p1228 * o1228, r1228 = (-k1228 + l1228) * n1228, s1228 = (3 * r1228 - p1228 * p1228) * o1228, t1228 = s1228 * o1228, u1228 = (2 * p1228 * p1228 * p1228 - 9 * p1228 * r1228 + i1228 * n1228 * 27) / 27, v1228 = u1228 / 2, w1228 = v1228 * v1228 + t1228 * t1228 * t1228;
                    let x1228, y1228, z1228, a1229, b1229;
                    if (w1228 < 0) {
                        const d1229 = -s1228 * o1228, e1229 = h154(d1229 * d1229 * d1229), f1229 = -u1228 / (2 * e1229), g1229 = e154(f1229 < -1 ? -1 : f1229 > 1 ? 1 : f1229), h1229 = 2 * y132(e1229);
                        return z1228 = h1229 * d154(g1229 * o1228) - q1228, a1229 = h1229 * d154((g1229 + g154) * o1228) - q1228, b1229 = h1229 * d154((g1229 + 2 * g154) * o1228) - q1228, z1228 >= 0 && z1228 <= 1 ? a1229 >= 0 && a1229 <= 1 ? b1229 >= 0 && b1229 <= 1 ? f154(z1228, a1229, b1229) : f154(z1228, a1229) : b1229 >= 0 && b1229 <= 1 ? f154(z1228, b1229) : z1228 : a1229 >= 0 && a1229 <= 1 ? b1229 >= 0 && b1229 <= 1 ? f154(a1229, b1229) : a1229 : b1229;
                    }
                    if (0 === w1228)
                        return x1228 = v1228 < 0 ? y132(-v1228) : -y132(v1228), z1228 = 2 * x1228 - q1228, a1229 = -x1228 - q1228, z1228 >= 0 && z1228 <= 1 ? a1229 >= 0 && a1229 <= 1 ? f154(z1228, a1229) : z1228 : a1229;
                    {
                        const c1229 = h154(w1228);
                        return x1228 = y132(-v1228 + c1229), y1228 = y132(v1228 + c1229), z1228 = x1228 - y1228 - q1228, z1228;
                    }
                }(b1228, c1228), e1228 = b1228[1];
                return ((1 - d1228) * (e1228 + (b1228[3] - e1228) * d1228) * 3 + d1228 * d1228) * d1228;
            }
            var i154, j154, k154, l154, m154, n154, o154, p154, q154;
            let r154;
            s143.bezierByTime = z132, g125("QuatInterpolationMode", r154), function (a1228) {
                a1228[a1228.SLERP = 0] = "SLERP", a1228[a1228.CONSTANT = 1] = "CONSTANT";
            }(r154 || g125("QuatInterpolationMode", r154 = {}));
            let s154 = e151("cc.QuatKeyframeValue")(i154 = l151((j154 = class {
                constructor({ value: x1227, interpolationMode: y1227, easingMethod: z1227 } = {}) {
                    this.interpolationMode = k154 && k154(), this.value = l154 && l154(), this.easingMethod = m154 && m154(), this.value = x1227 ? g147.clone(x1227) : this.value, this.interpolationMode = null != y1227 ? y1227 : this.interpolationMode, this.easingMethod = null != z1227 ? z1227 : this.easingMethod;
                }
            }, k154 = p130(j154.prototype, "interpolationMode", [j151], function () {
                return r154.SLERP;
            }), l154 = p130(j154.prototype, "value", [j151], function () {
                return g147.clone(g147.IDENTITY);
            }), m154 = p130(j154.prototype, "easingMethod", [j151], function () {
                return k153.LINEAR;
            }), i154 = j154)) || i154) || i154;
            function a133(w1227) {
                return new s154(w1227);
            }
            let t154 = g125("QuatCurve", e151("cc.QuatCurve")((o154 = class extends z150 {
                constructor(...v1227) {
                    super(...v1227), this.preExtrapolation = p154 && p154(), this.postExtrapolation = q154 && q154();
                }
                evaluate(z1226, a1227) {
                    var b1227;
                    null !== (b1227 = a1227) && void 0 !== b1227 || (a1227 = new g147());
                    const { _times: c1227, _values: d1227, postExtrapolation: e1227, preExtrapolation: f1227 } = this, g1227 = c1227.length;
                    if (0 === g1227)
                        return a1227;
                    const h1227 = c1227[0], i1227 = c1227[g1227 - 1];
                    if (z1226 < h1227) {
                        const u1227 = d1227[0];
                        switch (f1227) {
                            case x150.LOOP:
                                z1226 = h1227 + k129(z1226 - h1227, i1227 - h1227);
                                break;
                            case x150.PING_PONG:
                                z1226 = h1227 + l129(z1226 - h1227, i1227 - h1227);
                                break;
                            case x150.CLAMP:
                            default:
                                return g147.copy(a1227, u1227.value);
                        }
                    }
                    else if (z1226 > i1227) {
                        const t1227 = d1227[g1227 - 1];
                        switch (e1227) {
                            case x150.LOOP:
                                z1226 = h1227 + k129(z1226 - h1227, i1227 - h1227);
                                break;
                            case x150.PING_PONG:
                                z1226 = h1227 + l129(z1226 - h1227, i1227 - h1227);
                                break;
                            case x150.CLAMP:
                            default:
                                return g147.copy(a1227, t1227.value);
                        }
                    }
                    const j1227 = n130(c1227, z1226);
                    if (j1227 >= 0)
                        return g147.copy(a1227, d1227[j1227].value);
                    const k1227 = ~j1227, l1227 = k1227 - 1, m1227 = c1227[l1227], n1227 = d1227[l1227], o1227 = c1227[k1227], p1227 = d1227[k1227], q1227 = (z1226 - m1227) / (o1227 - m1227);
                    switch (n1227.interpolationMode) {
                        default:
                        case r154.CONSTANT:
                            return g147.copy(a1227, n1227.value);
                        case r154.SLERP:
                            {
                                const { easingMethod: r1227 } = n1227, s1227 = r1227 === k153.LINEAR ? q1227 : Array.isArray(r1227) ? z132(r1227, q1227) : p132(r1227)(q1227);
                                return g147.slerp(a1227, n1227.value, p1227.value, s1227);
                            }
                    }
                }
                addKeyFrame(w1226, x1226) {
                    const y1226 = new s154(x1226);
                    return super.addKeyFrame(w1226, y1226);
                }
                assignSorted(n1226, o1226) {
                    if (void 0 !== o1226)
                        this.setKeyframes(n1226.slice(), o1226.map(v1226 => a133(v1226)));
                    else {
                        const q1226 = Array.from(n1226);
                        this.setKeyframes(q1226.map(([u1226]) => u1226), q1226.map(([, t1226]) => a133(t1226)));
                    }
                }
                [x152](d1225, e1225) {
                    if (!e1225.toCCON)
                        return void d1225.writeThis();
                    const { _times: f1225, _values: g1225 } = this;
                    let h1225 = !0;
                    g1225.forEach((k1226, l1226, [m1226]) => {
                        h1225 && k1226.interpolationMode !== m1226.interpolationMode && (h1225 = !1);
                    });
                    const i1225 = f1225.length, j1225 = z154 * (h1225 ? 1 : i1225), k1225 = g1225.reduce((i1226, { easingMethod: j1226 }) => i1226 + (Array.isArray(j1226) ? a155 + 4 * c155 : a155), 0);
                    let l1225 = 0;
                    l1225 += v154 + w154 + x154 * i1225 + 4 * y154 * i1225 + k1225 + j1225 + 0;
                    const m1225 = new DataView(new ArrayBuffer(l1225));
                    let n1225 = 0, o1225 = 0;
                    h1225 && (o1225 |= u154.INTERPOLATION_MODE), m1225.setUint32(n1225, o1225, !0), n1225 += v154, m1225.setUint32(n1225, i1225, !0), n1225 += w154, f1225.forEach((g1226, h1226) => m1225.setFloat32(n1225 + x154 * h1226, g1226, !0)), n1225 += x154 * i1225, g1225.forEach(({ value: { x: a1226, y: b1226, z: c1226, w: d1226 } }, e1226) => {
                        const f1226 = n1225 + 4 * y154 * e1226;
                        m1225.setFloat32(f1226 + 0 * y154, a1226, !0), m1225.setFloat32(f1226 + 1 * y154, b1226, !0), m1225.setFloat32(f1226 + 2 * y154, c1226, !0), m1225.setFloat32(f1226 + 3 * y154, d1226, !0);
                    }), n1225 += 4 * y154 * i1225, g1225.forEach(({ easingMethod: z1225 }) => {
                        Array.isArray(z1225) ? (m1225.setUint8(n1225, b155), ++n1225, m1225.setFloat32(n1225 + 0 * c155, z1225[0], !0), m1225.setFloat32(n1225 + 1 * c155, z1225[1], !0), m1225.setFloat32(n1225 + 2 * c155, z1225[2], !0), m1225.setFloat32(n1225 + 3 * c155, z1225[3], !0), n1225 += 4 * c155) : (m1225.setUint8(n1225, z1225), ++n1225);
                    });
                    const p1225 = n1225;
                    n1225 += j1225;
                    let q1225 = p1225;
                    g1225.forEach(({ interpolationMode: y1225 }) => {
                        m1225.setUint8(q1225, y1225), h1225 || (q1225 += z154);
                    });
                    const r1225 = new Uint8Array(m1225.buffer);
                    d1225.writeProperty("bytes", r1225);
                }
                [y152](b1224, c1224) {
                    if (!c1224.fromCCON)
                        return void b1224.readThis();
                    const d1224 = b1224.readProperty("bytes"), e1224 = new DataView(d1224.buffer, d1224.byteOffset, d1224.byteLength);
                    let f1224 = 0;
                    const g1224 = e1224.getUint32(f1224, !0);
                    f1224 += v154;
                    const h1224 = g1224 & u154.INTERPOLATION_MODE, i1224 = e1224.getUint32(f1224, !0);
                    f1224 += w154;
                    const j1224 = Array.from({
                        length: i1224
                    }, (b1225, c1225) => e1224.getFloat32(f1224 + x154 * c1225, !0));
                    f1224 += x154 * i1224;
                    const k1224 = f1224;
                    f1224 += 4 * y154 * i1224;
                    const l1224 = Array.from({
                        length: i1224
                    }, (s1224, t1224) => {
                        const u1224 = k1224 + 4 * y154 * t1224, v1224 = e1224.getFloat32(u1224 + 0 * y154, !0), w1224 = e1224.getFloat32(u1224 + 1 * y154, !0), x1224 = e1224.getFloat32(u1224 + 2 * y154, !0), y1224 = e1224.getFloat32(u1224 + 3 * y154, !0), z1224 = e1224.getUint8(f1224);
                        ++f1224;
                        const a1225 = a133({
                            value: {
                                x: v1224,
                                y: w1224,
                                z: x1224,
                                w: y1224
                            }
                        });
                        return z1224 !== b155 ? a1225.easingMethod = z1224 : (a1225.easingMethod = [e1224.getFloat32(f1224 + 0 * c155, !0), e1224.getFloat32(f1224 + 1 * c155, !0), e1224.getFloat32(f1224 + 2 * c155, !0), e1224.getFloat32(f1224 + 3 * c155, !0)], f1224 += 4 * c155), a1225;
                    });
                    if (h1224) {
                        const q1224 = e1224.getUint8(f1224);
                        ++f1224;
                        for (let r1224 = 0; r1224 < i1224; ++r1224)
                            l1224[r1224].interpolationMode = q1224;
                    }
                    else {
                        for (let o1224 = 0; o1224 < i1224; ++o1224) {
                            const p1224 = e1224.getUint8(f1224 + o1224);
                            l1224[o1224].interpolationMode = p1224;
                        }
                        f1224 += i1224;
                    }
                    this._times = j1224, this._values = l1224;
                }
            }, p154 = p130(o154.prototype, "preExtrapolation", [j151], function () {
                return x150.CLAMP;
            }), q154 = p130(o154.prototype, "postExtrapolation", [j151], function () {
                return x150.CLAMP;
            }), n154 = o154)) || n154);
            var u154;
            !function (a1224) {
                a1224[a1224.INTERPOLATION_MODE = 1] = "INTERPOLATION_MODE";
            }(u154 || (u154 = {}));
            const v154 = 1, w154 = 4, x154 = 4, y154 = 4, z154 = 1, a155 = 1, b155 = 255, c155 = 4;
            var d155;
            let e155 = g125("ObjectCurve", e151("cc.ObjectCurve")(d155 = class extends z150 {
                evaluate(x1223) {
                    const y1223 = this.searchKeyframe(x1223);
                    if (y1223 >= 0)
                        return this._values[y1223];
                    const z1223 = x128(~y1223 - 1, 0, this._values.length - 1);
                    return this._values[z1223];
                }
            }) || d155);
            const f155 = p127({
                Blend: 0,
                Fixed: 1
            });
            class g155 {
                constructor() {
                    this.color = a147.WHITE.clone(), this.time = 0;
                }
            }
            g125("ColorKey", g155), s128.fastDefine("cc.ColorKey", g155, {
                color: a147.WHITE.clone(),
                time: 0
            }), s128.Attr.setClassAttr(g155, "color", "visible", !0), s128.Attr.setClassAttr(g155, "time", "visible", !0);
            class h155 {
                constructor() {
                    this.alpha = 1, this.time = 0;
                }
            }
            g125("AlphaKey", h155), s128.fastDefine("cc.AlphaKey", h155, {
                alpha: 1,
                time: 0
            }), s128.Attr.setClassAttr(h155, "alpha", "visible", !0), s128.Attr.setClassAttr(h155, "time", "visible", !0);
            class i155 {
                constructor() {
                    this.colorKeys = [], this.alphaKeys = [], this.mode = f155.Blend;
                }
                setKeys(v1223, w1223) {
                    this.colorKeys = v1223, this.alphaKeys = w1223;
                }
                sortKeys() {
                    this.colorKeys.length > 1 && this.colorKeys.sort((t1223, u1223) => t1223.time - u1223.time), this.alphaKeys.length > 1 && this.alphaKeys.sort((r1223, s1223) => r1223.time - s1223.time);
                }
                evaluate(o1223) {
                    return this.evaluateFast(new a147(), o1223);
                }
                evaluateFast(m1223, n1223) {
                    return this.getRGB(m1223, n1223), m1223._set_a_unsafe(this.getAlpha(n1223)), m1223;
                }
                randomColor() {
                    return this.getRandomColor(new a147());
                }
                getRandomColor(j1223) {
                    const k1223 = this.colorKeys[Math.trunc(c129() * this.colorKeys.length)], l1223 = this.alphaKeys[Math.trunc(c129() * this.alphaKeys.length)];
                    return j1223.set(k1223.color), j1223._set_a_unsafe(l1223.alpha), j1223;
                }
                getRGB(a1223, b1223) {
                    const c1223 = this.colorKeys, d1223 = c1223.length;
                    if (d1223 > 1) {
                        b1223 = k129(b1223, 1 + q146);
                        for (let f1223 = 1; f1223 < d1223; ++f1223) {
                            const g1223 = c1223[f1223 - 1].time, h1223 = c1223[f1223].time;
                            if (b1223 >= g1223 && b1223 < h1223) {
                                if (this.mode === f155.Fixed)
                                    return a147.copy(a1223, c1223[f1223].color), a1223;
                                const i1223 = (b1223 - g1223) / (h1223 - g1223);
                                return a147.lerp(a1223, c1223[f1223 - 1].color, c1223[f1223].color, i1223), a1223;
                            }
                        }
                        const e1223 = d1223 - 1;
                        w128(b1223, c1223[e1223].time, q146) ? a147.copy(a1223, c1223[e1223].color) : b1223 < c1223[0].time ? a147.lerp(a1223, a147.BLACK, c1223[0].color, b1223 / c1223[0].time) : b1223 > c1223[e1223].time && a147.lerp(a1223, c1223[e1223].color, a147.BLACK, (b1223 - c1223[e1223].time) / (1 - c1223[e1223].time));
                    }
                    else
                        1 === d1223 ? a147.copy(a1223, c1223[0].color) : a147.copy(a1223, a147.WHITE);
                    return a1223;
                }
                getAlpha(s1222) {
                    const t1222 = this.alphaKeys, u1222 = t1222.length;
                    if (u1222 > 1) {
                        s1222 = k129(s1222, 1 + q146);
                        for (let w1222 = 1; w1222 < u1222; ++w1222) {
                            const x1222 = t1222[w1222 - 1].time, y1222 = t1222[w1222].time;
                            if (s1222 >= x1222 && s1222 < y1222) {
                                if (this.mode === f155.Fixed)
                                    return t1222[w1222].alpha;
                                const z1222 = (s1222 - x1222) / (y1222 - x1222);
                                return z128(t1222[w1222 - 1].alpha, t1222[w1222].alpha, z1222);
                            }
                        }
                        const v1222 = u1222 - 1;
                        return w128(s1222, t1222[v1222].time, q146) ? t1222[v1222].alpha : s1222 < t1222[0].time ? z128(0, t1222[0].alpha, s1222 / t1222[0].time) : s1222 > t1222[v1222].time ? z128(t1222[v1222].alpha, 0, (s1222 - t1222[v1222].time) / (1 - t1222[v1222].time)) : 255;
                    }
                    return 1 === u1222 ? t1222[0].alpha : 255;
                }
            }
            g125("Gradient", i155), i155.Mode = f155, s128.fastDefine("cc.Gradient", i155, {
                colorKeys: [],
                alphaKeys: [],
                mode: f155.Blend
            }), s128.Attr.setClassAttr(i155, "colorKeys", "visible", !0), s128.Attr.setClassAttr(i155, "alphaKeys", "visible", !0), s128.Attr.setClassAttr(i155, "mode", "visible", !0);
            class j155 {
                constructor() {
                    this.time = 0, this.value = 0, this.inTangent = 0, this.outTangent = 0;
                }
            }
            s128.fastDefine("cc.Keyframe", j155, {
                time: 0,
                value: 0,
                inTangent: 0,
                outTangent: 0
            });
            class k155 {
                constructor() {
                    this.index = void 0, this.time = void 0, this.endTime = void 0, this.coefficient = void 0, this.index = -1, this.time = 0, this.endTime = 0, this.coefficient = new Float32Array(4);
                }
                evaluate(r1222) {
                    return b133(r1222 - this.time, this.coefficient);
                }
            }
            function b133(p1222, q1222) {
                return p1222 * (p1222 * (p1222 * q1222[0] + q1222[1]) + q1222[2]) + q1222[3];
            }
            class l155 {
                get _internalCurve() {
                    return this._curve;
                }
                get keyFrames() {
                    return Array.from(this._curve.keyframes()).map(([m1222, n1222]) => {
                        const o1222 = new j155();
                        return o1222.time = m1222, o1222.value = n1222.value, o1222.inTangent = n1222.leftTangent, o1222.outTangent = n1222.rightTangent, o1222;
                    });
                }
                set keyFrames(j1222) {
                    this._curve.assignSorted(j1222.map(l1222 => [l1222.time, {
                            interpolationMode: w150.CUBIC,
                            value: l1222.value,
                            leftTangent: l1222.inTangent,
                            rightTangent: l1222.outTangent
                        }]));
                }
                get preWrapMode() {
                    return d133(this._curve.preExtrapolation);
                }
                set preWrapMode(h1222) {
                    this._curve.preExtrapolation = c133(h1222);
                }
                get postWrapMode() {
                    return d133(this._curve.postExtrapolation);
                }
                set postWrapMode(g1222) {
                    this._curve.postExtrapolation = c133(g1222);
                }
                constructor(c1222 = null) {
                    if (this._curve = void 0, this.cachedKey = void 0, c1222 instanceof s153)
                        this._curve = c1222;
                    else {
                        const d1222 = new s153();
                        this._curve = d1222, d1222.preExtrapolation = x150.LOOP, d1222.postExtrapolation = x150.CLAMP, c1222 ? d1222.assignSorted(c1222.map(f1222 => [f1222.time, {
                                interpolationMode: w150.CUBIC,
                                value: f1222.value,
                                leftTangent: f1222.inTangent,
                                rightTangent: f1222.outTangent
                            }])) : d1222.assignSorted([[0, {
                                    interpolationMode: w150.CUBIC,
                                    value: 1
                                }], [1, {
                                    interpolationMode: w150.CUBIC,
                                    value: 1
                                }]]);
                    }
                    this.cachedKey = new k155();
                }
                addKey(b1222) {
                    b1222 ? this._curve.addKeyFrame(b1222.time, {
                        interpolationMode: w150.CUBIC,
                        value: b1222.value,
                        leftTangent: b1222.inTangent,
                        rightTangent: b1222.outTangent
                    }) : this._curve.clear();
                }
                evaluate_slow(a1222) {
                    return this._curve.evaluate(a1222);
                }
                evaluate(q1221) {
                    const { cachedKey: r1221, _curve: s1221 } = this, t1221 = s1221.keyFramesCount - 1;
                    let u1221 = q1221;
                    const v1221 = q1221 < 0 ? s1221.preExtrapolation : s1221.postExtrapolation, w1221 = s1221.getKeyframeTime(0), x1221 = s1221.getKeyframeTime(t1221);
                    switch (v1221) {
                        case x150.LOOP:
                            u1221 = k129(q1221 - w1221, x1221 - w1221) + w1221;
                            break;
                        case x150.PING_PONG:
                            u1221 = l129(q1221 - w1221, x1221 - w1221) + w1221;
                            break;
                        case x150.CLAMP:
                        default:
                            u1221 = x128(q1221, w1221, x1221);
                    }
                    if (u1221 >= r1221.time && u1221 < r1221.endTime)
                        return r1221.evaluate(u1221);
                    const y1221 = this.findIndex(r1221, u1221), z1221 = Math.min(y1221 + 1, t1221);
                    return this.calcOptimizedKey(r1221, y1221, z1221), r1221.evaluate(u1221);
                }
                calcOptimizedKey(c1221, d1221, e1221) {
                    const f1221 = this._curve.getKeyframeTime(d1221), g1221 = this._curve.getKeyframeTime(e1221), { value: h1221, leftTangent: i1221 } = this._curve.getKeyframeValue(d1221), { value: j1221, rightTangent: k1221 } = this._curve.getKeyframeValue(e1221);
                    c1221.index = d1221, c1221.time = f1221, c1221.endTime = g1221;
                    const l1221 = g1221 - f1221, m1221 = j1221 - h1221, n1221 = 1 / (l1221 * l1221), o1221 = i1221 * l1221, p1221 = k1221 * l1221;
                    c1221.coefficient[0] = (o1221 + p1221 - m1221 - m1221) * n1221 / l1221, c1221.coefficient[1] = (m1221 + m1221 + m1221 - o1221 - o1221 - p1221) * n1221, c1221.coefficient[2] = i1221, c1221.coefficient[3] = h1221;
                }
                findIndex(q1220, r1220) {
                    const { _curve: s1220 } = this, t1220 = s1220.keyFramesCount, u1220 = q1220.index;
                    if (-1 !== u1220)
                        if (r1220 > s1220.getKeyframeTime(u1220))
                            for (let a1221 = 0; a1221 < 3; a1221++) {
                                const b1221 = u1220 + a1221;
                                if (b1221 + 1 < t1220 && s1220.getKeyframeTime(b1221 + 1) > r1220)
                                    return b1221;
                            }
                        else
                            for (let y1220 = 0; y1220 < 3; y1220++) {
                                const z1220 = u1220 - y1220;
                                if (z1220 >= 0 && s1220.getKeyframeTime(z1220 - 1) <= r1220)
                                    return z1220 - 1;
                            }
                    let v1220, w1220 = 0, x1220 = t1220;
                    for (; x1220 - w1220 > 1;)
                        v1220 = Math.floor((w1220 + x1220) / 2), s1220.getKeyframeTime(v1220) >= r1220 ? x1220 = v1220 : w1220 = v1220;
                    return w1220;
                }
            }
            let m155, n155;
            function c133(p1220) {
                switch (p1220) {
                    default:
                    case m155.Default:
                    case m155.Normal:
                    case m155.Clamp:
                        return x150.CLAMP;
                    case m155.PingPong:
                        return x150.PING_PONG;
                    case m155.Loop:
                        return x150.LOOP;
                }
            }
            function d133(o1220) {
                switch (o1220) {
                    default:
                    case x150.LINEAR:
                    case x150.CLAMP:
                        return m155.Clamp;
                    case x150.PING_PONG:
                        return m155.PingPong;
                    case x150.LOOP:
                        return m155.Loop;
                }
            }
            l155.defaultKF = [{
                    time: 0,
                    value: 1,
                    inTangent: 0,
                    outTangent: 0
                }, {
                    time: 1,
                    value: 1,
                    inTangent: 0,
                    outTangent: 0
                }], s128.fastDefine("cc.AnimationCurve", l155, {
                _curve: null
            }), function (n1220) {
                n1220[n1220.Default = 0] = "Default", n1220[n1220.Normal = 1] = "Normal", n1220[n1220.Loop = 2] = "Loop", n1220[n1220.ShouldWrap = 4] = "ShouldWrap", n1220[n1220.Clamp = 8] = "Clamp", n1220[n1220.PingPong = 22] = "PingPong", n1220[n1220.Reverse = 36] = "Reverse";
            }(m155 || (m155 = {})), function (m1220) {
                m1220[m1220.LINEAR = 0] = "LINEAR", m1220[m1220.BEZIER = 1] = "BEZIER", m1220[m1220.CATMULL_ROM = 2] = "CATMULL_ROM";
            }(n155 || (n155 = {}));
            const o155 = new w146(), p155 = new w146(), q155 = new w146(), r155 = new w146();
            class s155 {
                constructor(j1220 = n155.CATMULL_ROM, k1220 = []) {
                    this._type = void 0, this._mode = n155.CATMULL_ROM, this._knots = [], this._type = l148.SHAPE_SPLINE, this._mode = j1220;
                    for (let l1220 = 0; l1220 < k1220.length; l1220++)
                        this._knots[l1220] = new w146(k1220[l1220]);
                }
                static create(h1220, i1220 = []) {
                    return new s155(h1220, i1220);
                }
                static clone(g1220) {
                    return new s155(g1220.mode, g1220.knots);
                }
                static copy(b1220, c1220) {
                    b1220._mode = c1220.mode, b1220._knots.length = 0;
                    const d1220 = c1220.knots, e1220 = d1220.length;
                    for (let f1220 = 0; f1220 < e1220; f1220++)
                        b1220._knots[f1220] = new w146(d1220[f1220]);
                    return b1220;
                }
                get type() {
                    return this._type;
                }
                get mode() {
                    return this._mode;
                }
                get knots() {
                    return this._knots;
                }
                setModeAndKnots(y1219, z1219) {
                    this._mode = y1219, this._knots.length = 0;
                    for (let a1220 = 0; a1220 < z1219.length; a1220++)
                        this._knots[a1220] = new w146(z1219[a1220]);
                }
                clearKnots() {
                    this._knots.length = 0;
                }
                getKnotCount() {
                    return this._knots.length;
                }
                addKnot(x1219) {
                    this._knots.push(new w146(x1219));
                }
                insertKnot(u1219, v1219) {
                    const w1219 = new w146(v1219);
                    u1219 >= this._knots.length ? this._knots.push(w1219) : this._knots.splice(u1219, 0, w1219);
                }
                removeKnot(t1219) {
                    t1219 >= 0 && this._knots.length, this._knots.splice(t1219, 1);
                }
                setKnot(r1219, s1219) {
                    r1219 >= 0 && this._knots.length, this._knots[r1219].set(s1219);
                }
                getKnot(q1219) {
                    return q1219 >= 0 && this._knots.length, this._knots[q1219];
                }
                getPoint(k1219, l1219 = 4294967295) {
                    k1219 = x128(k1219, 0, 1);
                    const m1219 = this.getSegments();
                    if (0 === m1219)
                        return new w146(0, 0, 0);
                    if (4294967295 === l1219) {
                        const p1219 = 1 / m1219;
                        l1219 = Math.floor(k1219 / p1219), k1219 = k1219 % p1219 / p1219;
                    }
                    if (l1219 >= m1219)
                        return new w146(this._knots[this._knots.length - 1]);
                    switch (this._mode) {
                        case n155.LINEAR:
                            return s155.calcLinear(this._knots[l1219], this._knots[l1219 + 1], k1219);
                        case n155.BEZIER:
                            return s155.calcBezier(this._knots[4 * l1219], this._knots[4 * l1219 + 1], this._knots[4 * l1219 + 2], this._knots[4 * l1219 + 3], k1219);
                        case n155.CATMULL_ROM:
                            {
                                const n1219 = l1219 > 0 ? this._knots[l1219 - 1] : this._knots[l1219], o1219 = l1219 + 2 < this._knots.length ? this._knots[l1219 + 2] : this._knots[l1219 + 1];
                                return s155.calcCatmullRom(n1219, this._knots[l1219], this._knots[l1219 + 1], o1219, k1219);
                            }
                        default:
                            return new w146(0, 0, 0);
                    }
                }
                getPoints(d1219, e1219 = 4294967295) {
                    if (0 === d1219)
                        return [];
                    if (1 === d1219)
                        return [this.getPoint(0, e1219)];
                    const f1219 = [], g1219 = 1 / (d1219 - 1);
                    for (let h1219 = 0; h1219 < d1219; h1219++) {
                        const i1219 = h1219 * g1219, j1219 = this.getPoint(i1219, e1219);
                        f1219.push(j1219);
                    }
                    return f1219;
                }
                getSegments() {
                    const c1219 = this._knots.length;
                    switch (this._mode) {
                        case n155.LINEAR:
                        case n155.CATMULL_ROM:
                            return c1219 < 2 ? (y125(14300), 0) : c1219 - 1;
                        case n155.BEZIER:
                            return c1219 < 4 || c1219 % 4 != 0 ? (y125(14301), 0) : c1219 / 4;
                    }
                }
                static calcLinear(y1218, z1218, a1219) {
                    const b1219 = new w146();
                    return w146.multiplyScalar(o155, y1218, 1 - a1219), w146.multiplyScalar(p155, z1218, a1219), w146.add(b1219, o155, p155), b1219;
                }
                static calcBezier(r1218, s1218, t1218, u1218, v1218) {
                    const w1218 = new w146(), x1218 = 1 - v1218;
                    return w146.multiplyScalar(o155, r1218, x1218 * x1218 * x1218), w146.multiplyScalar(p155, s1218, 3 * v1218 * x1218 * x1218), w146.multiplyScalar(q155, t1218, 3 * v1218 * v1218 * x1218), w146.multiplyScalar(r155, u1218, v1218 * v1218 * v1218), w146.add(o155, o155, p155), w146.add(q155, q155, r155), w146.add(w1218, o155, q155), w1218;
                }
                static calcCatmullRom(j1218, k1218, l1218, m1218, n1218) {
                    const o1218 = new w146(), p1218 = n1218 * n1218, q1218 = p1218 * n1218;
                    return w146.multiplyScalar(o155, j1218, -.5 * q1218 + p1218 - .5 * n1218), w146.multiplyScalar(p155, k1218, 1.5 * q1218 - 2.5 * p1218 + 1), w146.multiplyScalar(q155, l1218, -1.5 * q1218 + 2 * p1218 + .5 * n1218), w146.multiplyScalar(r155, m1218, .5 * q1218 - .5 * p1218), w146.add(o155, o155, p155), w146.add(q155, q155, r155), w146.add(o1218, o155, q155), o1218;
                }
            }
            let t155;
            function e133(h1218, i1218) {
                console.warn(`${h1218} is deprecated, please use ${i1218} instead.`);
            }
            !function (g1218) {
                g1218[g1218.ALL = 0] = "ALL", g1218[g1218.CLOSEST = 1] = "CLOSEST", g1218[g1218.ANY = 2] = "ANY";
            }(t155 || (t155 = {})), k144(v149, "intersect", [{
                    name: "ray_aabb",
                    newName: "rayAABB"
                }, {
                    name: "ray_plane",
                    newName: "rayPlane"
                }, {
                    name: "ray_triangle",
                    newName: "rayTriangle"
                }, {
                    name: "ray_sphere",
                    newName: "raySphere"
                }, {
                    name: "ray_obb",
                    newName: "rayOBB"
                }, {
                    name: "ray_capsule",
                    newName: "rayCapsule"
                }, {
                    name: "ray_subMesh",
                    newName: "raySubMesh"
                }, {
                    name: "ray_mesh",
                    newName: "rayMesh"
                }, {
                    name: "ray_model",
                    newName: "rayModel"
                }, {
                    name: "line_plane",
                    newName: "linePlane"
                }, {
                    name: "line_triangle",
                    newName: "lineTriangle"
                }, {
                    name: "line_aabb",
                    newName: "lineAABB"
                }, {
                    name: "line_obb",
                    newName: "lineOBB"
                }, {
                    name: "line_sphere",
                    newName: "lineSphere"
                }, {
                    name: "aabb_aabb",
                    newName: "aabbWithAABB"
                }, {
                    name: "aabb_obb",
                    newName: "aabbWithOBB"
                }, {
                    name: "aabb_plane",
                    newName: "aabbPlane"
                }, {
                    name: "aabb_frustum",
                    newName: "aabbFrustum"
                }, {
                    name: "aabbFrustum_accurate",
                    newName: "aabbFrustumAccurate"
                }, {
                    name: "obb_point",
                    newName: "obbPoint"
                }, {
                    name: "obb_plane",
                    newName: "obbPlane"
                }, {
                    name: "obb_frustum",
                    newName: "obbFrustum"
                }, {
                    name: "obbFrustum_accurate",
                    newName: "obbFrustumAccurate"
                }, {
                    name: "obb_obb",
                    newName: "obbWithOBB"
                }, {
                    name: "obb_capsule",
                    newName: "obbCapsule"
                }, {
                    name: "sphere_plane",
                    newName: "spherePlane"
                }, {
                    name: "sphere_frustum",
                    newName: "sphereFrustum"
                }, {
                    name: "sphereFrustum_accurate",
                    newName: "sphereFrustumAccurate"
                }, {
                    name: "sphere_sphere",
                    newName: "sphereWithSphere"
                }, {
                    name: "sphere_aabb",
                    newName: "sphereAABB"
                }, {
                    name: "sphere_obb",
                    newName: "sphereOBB"
                }, {
                    name: "sphere_capsule",
                    newName: "sphereCapsule"
                }, {
                    name: "capsule_capsule",
                    newName: "capsuleWithCapsule"
                }]);
            var u155 = Object.freeze({
                __proto__: null,
                distance: k148,
                enums: l148,
                intersect: v149,
                Line: m148,
                Plane: a150,
                Ray: n148,
                Triangle: b150,
                Sphere: s148,
                AABB: i150,
                OBB: u150,
                Capsule: j150,
                Frustum: o150,
                Keyframe: j155,
                AnimationCurve: l155,
                get WrapModeMask() {
                    return m155;
                },
                get SplineMode() {
                    return n155;
                },
                Spline: s155,
                constructLegacyCurveAndConvert: function () {
                    const f1218 = new s153();
                    return f1218.assignSorted([[0, {
                                interpolationMode: w150.CUBIC,
                                value: 1
                            }], [1, {
                                interpolationMode: w150.CUBIC,
                                value: 1
                            }]]), f1218;
                },
                OptimizedKey: k155,
                evalOptCurve: b133,
                get ERaycastMode() {
                    return t155;
                },
                line: class extends m148 {
                    constructor() {
                        super(), e133("line", "Line");
                    }
                },
                plane: class extends a150 {
                    constructor() {
                        super(), e133("plane", "Plane");
                    }
                },
                ray: class extends n148 {
                    constructor() {
                        super(), e133("ray", "Ray");
                    }
                },
                triangle: class extends b150 {
                    constructor() {
                        super(), e133("triangle", "Triangle");
                    }
                },
                sphere: class extends s148 {
                    constructor() {
                        super(), e133("sphere", "Sphere");
                    }
                },
                aabb: class extends i150 {
                    constructor() {
                        super(), e133("aabb", "AABB");
                    }
                },
                obb: class extends u150 {
                    constructor() {
                        super(), e133("obb", "OBB");
                    }
                },
                capsule: class extends j150 {
                    constructor() {
                        super(), e133("capsule", "Capsule");
                    }
                },
                frustum: class extends o150 {
                    constructor() {
                        super(), e133("frustum", "Frustum");
                    }
                }
            });
            g125("geometry", u155);
            class v155 {
                constructor() {
                    this._poolHandle = -1, w155.addContainer(this);
                }
                destroy() {
                    w155.removeContainer(this);
                }
            }
            const w155 = new class {
                constructor() {
                    this._pools = [], this._lastShrinkPassed = 0, this.shrinkTimeSpan = 5;
                }
                addContainer(e1218) {
                    -1 === e1218._poolHandle && (e1218._poolHandle = this._pools.length, this._pools.push(e1218));
                }
                removeContainer(d1218) {
                    -1 !== d1218._poolHandle && (this._pools[this._pools.length - 1]._poolHandle = d1218._poolHandle, i127(this._pools, d1218._poolHandle), d1218._poolHandle = -1);
                }
                tryShrink() {
                    for (let c1218 = 0; c1218 < this._pools.length; c1218++)
                        this._pools[c1218].tryShrink();
                }
                update(b1218) {
                    this._lastShrinkPassed += b1218, this._lastShrinkPassed > this.shrinkTimeSpan && (this.tryShrink(), this._lastShrinkPassed -= this.shrinkTimeSpan);
                }
            }();
            class x155 extends v155 {
                constructor(x1217, y1217, z1217) {
                    super(), this._ctor = void 0, this._elementsPerBatch = void 0, this._nextAvail = void 0, this._freePool = [], this._dtor = void 0, this._ctor = x1217, this._dtor = z1217 || null, this._elementsPerBatch = Math.max(y1217, 1), this._nextAvail = this._elementsPerBatch - 1;
                    for (let a1218 = 0; a1218 < this._elementsPerBatch; ++a1218)
                        this._freePool.push(x1217());
                }
                alloc() {
                    if (this._nextAvail < 0) {
                        this._freePool.length = this._elementsPerBatch;
                        for (let w1217 = 0; w1217 < this._elementsPerBatch; w1217++)
                            this._freePool[w1217] = this._ctor();
                        this._nextAvail = this._elementsPerBatch - 1;
                    }
                    return this._freePool[this._nextAvail--];
                }
                free(v1217) {
                    this._freePool[++this._nextAvail] = v1217;
                }
                freeArray(u1217) {
                    this._freePool.length = this._nextAvail + 1, Array.prototype.push.apply(this._freePool, u1217), this._nextAvail += u1217.length;
                }
                tryShrink() {
                    if (this._nextAvail >> 1 > this._elementsPerBatch) {
                        if (this._dtor)
                            for (let t1217 = this._nextAvail >> 1; t1217 <= this._nextAvail; t1217++)
                                this._dtor(this._freePool[t1217]);
                        this._freePool.length = this._nextAvail >> 1, this._nextAvail = this._freePool.length - 1;
                    }
                }
                destroy() {
                    const q1217 = arguments.length > 0 ? arguments[0] : null;
                    q1217 && y125(14100);
                    const r1217 = q1217 || this._dtor;
                    if (r1217)
                        for (let s1217 = 0; s1217 <= this._nextAvail; s1217++)
                            r1217(this._freePool[s1217]);
                    this._freePool.length = 0, this._nextAvail = -1, super.destroy();
                }
            }
            g125("Pool", x155);
            class y155 extends v155 {
                constructor(m1217, n1217, o1217) {
                    super(), this._fn = void 0, this._dtor = null, this._count = 0, this._data = void 0, this._initSize = 0, this._fn = m1217, this._dtor = o1217 || null, this._data = new Array(n1217), this._initSize = n1217;
                    for (let p1217 = 0; p1217 < n1217; ++p1217)
                        this._data[p1217] = m1217();
                }
                get length() {
                    return this._count;
                }
                get data() {
                    return this._data;
                }
                reset() {
                    this._count = 0;
                }
                resize(k1217) {
                    if (k1217 > this._data.length)
                        for (let l1217 = this._data.length; l1217 < k1217; ++l1217)
                            this._data[l1217] = this._fn();
                }
                add() {
                    return this._count >= this._data.length && this.resize(this._data.length << 1), this._data[this._count++];
                }
                destroy() {
                    if (this._dtor)
                        for (let j1217 = 0; j1217 < this._data.length; j1217++)
                            this._dtor(this._data[j1217]);
                    this._data.length = 0, this._count = 0, super.destroy();
                }
                tryShrink() {
                    if (this._data.length >> 2 > this._count) {
                        const h1217 = Math.max(this._initSize, this._data.length >> 1);
                        if (this._dtor)
                            for (let i1217 = h1217; i1217 < this._data.length; i1217++)
                                this._dtor(this._data[i1217]);
                        this._data.length = h1217;
                    }
                }
                removeAt(e1217) {
                    if (e1217 >= this._count)
                        return;
                    const f1217 = this._count - 1, g1217 = this._data[e1217];
                    this._data[e1217] = this._data[f1217], this._data[f1217] = g1217, this._count -= 1;
                }
            }
            g125("RecyclePool", y155);
            class z155 extends v155 {
                constructor(c1217, d1217) {
                    super(), this.array = void 0, this.length = 0, this._compareFn = void 0, this._initSize = 0, this.array = new Array(c1217), this._initSize = c1217, this.length = 0, this._compareFn = d1217;
                }
                push(b1217) {
                    this.array[this.length++] = b1217;
                }
                pop() {
                    return this.array[--this.length];
                }
                get(a1217) {
                    return this.array[a1217];
                }
                clear() {
                    this.length = 0;
                }
                destroy() {
                    this.length = 0, this.array.length = 0, super.destroy();
                }
                tryShrink() {
                    this.array.length >> 2 > this.length && (this.array.length = Math.max(this._initSize, this.array.length >> 1));
                }
                sort() {
                    this.array.length = this.length, this.array.sort(this._compareFn);
                }
                concat(y1216) {
                    for (let z1216 = 0; z1216 < y1216.length; ++z1216)
                        this.array[this.length++] = y1216[z1216];
                }
                fastRemove(w1216) {
                    if (w1216 >= this.length || w1216 < 0)
                        return;
                    const x1216 = --this.length;
                    this.array[w1216] = this.array[x1216];
                }
                indexOf(t1216) {
                    for (let u1216 = 0, v1216 = this.length; u1216 < v1216; ++u1216)
                        if (this.array[u1216] === t1216)
                            return u1216;
                    return -1;
                }
            }
            g125("CachedArray", z155), g125("memop", Object.freeze({
                __proto__: null,
                Pool: x155,
                RecyclePool: y155,
                CachedArray: z155
            }));
            class a156 {
                constructor() {
                    this._id = "", this._priority = 0, this._executeInEditMode = !1;
                }
                set priority(s1216) {
                    this._priority = s1216;
                }
                get priority() {
                    return this._priority;
                }
                set id(r1216) {
                    this._id = r1216;
                }
                get id() {
                    return this._id;
                }
                static sortByPriority(p1216, q1216) {
                    return p1216._priority < q1216._priority ? 1 : p1216._priority > q1216.priority ? -1 : 0;
                }
                init() { }
                update(o1216) { }
                postUpdate(n1216) { }
                destroy() { }
            }
            g125("System", a156), a156.Priority = p127({
                LOW: 0,
                MEDIUM: 100,
                HIGH: 200,
                SCHEDULER: 1 << 31 >>> 0
            });
            const b156 = new v144("Scheduler");
            class c156 {
                static get(i1216, j1216, k1216, l1216) {
                    let m1216 = c156._listEntries.pop();
                    return m1216 ? (m1216.target = i1216, m1216.priority = j1216, m1216.paused = k1216, m1216.markedForDeletion = l1216) : m1216 = new c156(i1216, j1216, k1216, l1216), m1216;
                }
                static put(h1216) {
                    c156._listEntries.length < 20 && (h1216.target = null, c156._listEntries.push(h1216));
                }
                constructor(d1216, e1216, f1216, g1216) {
                    this.target = void 0, this.priority = void 0, this.paused = void 0, this.markedForDeletion = void 0, this.target = d1216, this.priority = e1216, this.paused = f1216, this.markedForDeletion = g1216;
                }
            }
            c156._listEntries = [];
            class d156 {
                static get(y1215, z1215, a1216, b1216) {
                    let c1216 = d156._hashUpdateEntries.pop();
                    return c1216 ? (c1216.list = y1215, c1216.entry = z1215, c1216.target = a1216, c1216.callback = b1216) : c1216 = new d156(y1215, z1215, a1216, b1216), c1216;
                }
                static put(x1215) {
                    d156._hashUpdateEntries.length < 20 && (x1215.list = x1215.entry = x1215.target = x1215.callback = null, d156._hashUpdateEntries.push(x1215));
                }
                constructor(t1215, u1215, v1215, w1215) {
                    this.list = void 0, this.entry = void 0, this.target = void 0, this.callback = void 0, this.list = t1215, this.entry = u1215, this.target = v1215, this.callback = w1215;
                }
            }
            d156._hashUpdateEntries = [];
            class e156 {
                static get(m1215, n1215, o1215, p1215, q1215, r1215) {
                    let s1215 = e156._hashTimerEntries.pop();
                    return s1215 ? (s1215.timers = m1215, s1215.target = n1215, s1215.timerIndex = o1215, s1215.currentTimer = p1215, s1215.currentTimerSalvaged = q1215, s1215.paused = r1215) : s1215 = new e156(m1215, n1215, o1215, p1215, q1215, r1215), s1215;
                }
                static put(l1215) {
                    e156._hashTimerEntries.length < 20 && (l1215.timers = l1215.target = l1215.currentTimer = null, e156._hashTimerEntries.push(l1215));
                }
                constructor(f1215, g1215, h1215, i1215, j1215, k1215) {
                    this.timers = void 0, this.target = void 0, this.timerIndex = void 0, this.currentTimer = void 0, this.currentTimerSalvaged = void 0, this.paused = void 0, this.timers = f1215, this.target = g1215, this.timerIndex = h1215, this.currentTimer = i1215, this.currentTimerSalvaged = j1215, this.paused = k1215;
                }
            }
            e156._hashTimerEntries = [];
            class f156 {
                static get() {
                    return f156._timers.pop() || new f156();
                }
                static put(e1215) {
                    f156._timers.length < 20 && !e1215._lock && (e1215._scheduler = e1215._target = e1215._callback = null, f156._timers.push(e1215));
                }
                constructor() {
                    this._lock = void 0, this._scheduler = void 0, this._elapsed = void 0, this._runForever = void 0, this._useDelay = void 0, this._timesExecuted = void 0, this._repeat = void 0, this._delay = void 0, this._interval = void 0, this._target = void 0, this._callback = void 0, this._lock = !1, this._scheduler = null, this._elapsed = -1, this._runForever = !1, this._useDelay = !1, this._timesExecuted = 0, this._repeat = 0, this._delay = 0, this._interval = 0, this._target = null;
                }
                initWithCallback(y1214, z1214, a1215, b1215, c1215, d1215) {
                    return this._lock = !1, this._scheduler = y1214, this._target = a1215, this._callback = z1214, this._elapsed = -1, this._interval = b1215, this._delay = d1215, this._useDelay = this._delay > 0, this._repeat = c1215, this._runForever = this._repeat === s143.macro.REPEAT_FOREVER, !0;
                }
                getInterval() {
                    return this._interval;
                }
                setInterval(x1214) {
                    this._interval = x1214;
                }
                update(w1214) {
                    -1 === this._elapsed ? (this._elapsed = 0, this._timesExecuted = 0) : (this._elapsed += w1214, this._runForever && !this._useDelay ? this._elapsed >= this._interval && (this.trigger(), this._elapsed = 0) : (this._useDelay ? this._elapsed >= this._delay && (this.trigger(), this._elapsed -= this._delay, this._timesExecuted += 1, this._useDelay = !1) : this._elapsed >= this._interval && (this.trigger(), this._elapsed = 0, this._timesExecuted += 1), this._callback && !this._runForever && this._timesExecuted > this._repeat && this.cancel()));
                }
                getCallback() {
                    return this._callback;
                }
                trigger() {
                    this._target && this._callback && (this._lock = !0, this._callback.call(this._target, this._elapsed), this._lock = !1);
                }
                cancel() {
                    this._scheduler && this._callback && this._target && this._scheduler.unschedule(this._callback, this._target);
                }
            }
            f156._timers = [];
            class g156 extends a156 {
                static enableForTarget(u1214) {
                    let v1214 = !1;
                    (u1214.uuid || u1214.id) && (v1214 = !0), v1214 || (u1214.id = b156.getNewId());
                }
                constructor() {
                    super(), this._timeScale = void 0, this._updatesNegList = void 0, this._updates0List = void 0, this._updatesPosList = void 0, this._hashForUpdates = void 0, this._hashForTimers = void 0, this._currentTarget = void 0, this._currentTargetSalvaged = void 0, this._updateHashLocked = void 0, this._arrayForTimers = void 0, this._timeScale = 1, this._updatesNegList = [], this._updates0List = [], this._updatesPosList = [], this._hashForUpdates = j126(!0), this._hashForTimers = j126(!0), this._currentTarget = null, this._currentTargetSalvaged = !1, this._updateHashLocked = !1, this._arrayForTimers = [];
                }
                setTimeScale(t1214) {
                    this._timeScale = t1214;
                }
                getTimeScale() {
                    return this._timeScale;
                }
                update(f1214) {
                    let g1214, h1214, i1214, j1214, k1214;
                    for (this._updateHashLocked = !0, 1 !== this._timeScale && (f1214 *= this._timeScale), g1214 = 0, h1214 = this._updatesNegList, i1214 = h1214.length; g1214 < i1214; g1214++) {
                        var l1214, m1214;
                        j1214 = h1214[g1214], j1214.paused || j1214.markedForDeletion || !j1214.target || null === (l1214 = (m1214 = j1214.target).update) || void 0 === l1214 || l1214.call(m1214, f1214);
                    }
                    for (g1214 = 0, h1214 = this._updates0List, i1214 = h1214.length; g1214 < i1214; g1214++) {
                        var n1214, o1214;
                        j1214 = h1214[g1214], j1214.paused || j1214.markedForDeletion || !j1214.target || null === (n1214 = (o1214 = j1214.target).update) || void 0 === n1214 || n1214.call(o1214, f1214);
                    }
                    for (g1214 = 0, h1214 = this._updatesPosList, i1214 = h1214.length; g1214 < i1214; g1214++) {
                        var p1214, q1214;
                        j1214 = h1214[g1214], j1214.paused || j1214.markedForDeletion || !j1214.target || null === (p1214 = (q1214 = j1214.target).update) || void 0 === p1214 || p1214.call(q1214, f1214);
                    }
                    const r1214 = this._arrayForTimers;
                    for (g1214 = 0; g1214 < r1214.length; g1214++) {
                        var s1214;
                        if (k1214 = r1214[g1214], this._currentTarget = k1214, this._currentTargetSalvaged = !1, !k1214.paused && k1214.timers)
                            for (k1214.timerIndex = 0; k1214.timerIndex < k1214.timers.length; ++k1214.timerIndex)
                                k1214.currentTimer = k1214.timers[k1214.timerIndex], k1214.currentTimerSalvaged = !1, k1214.currentTimer.update(f1214), k1214.currentTimer = null;
                        this._currentTargetSalvaged && 0 === (null === (s1214 = this._currentTarget.timers) || void 0 === s1214 ? void 0 : s1214.length) && (this._removeHashElement(this._currentTarget), --g1214);
                    }
                    for (g1214 = 0, h1214 = this._updatesNegList; g1214 < h1214.length;)
                        j1214 = h1214[g1214], j1214.markedForDeletion ? this._removeUpdateFromHash(j1214) : g1214++;
                    for (g1214 = 0, h1214 = this._updates0List; g1214 < h1214.length;)
                        j1214 = h1214[g1214], j1214.markedForDeletion ? this._removeUpdateFromHash(j1214) : g1214++;
                    for (g1214 = 0, h1214 = this._updatesPosList; g1214 < h1214.length;)
                        j1214 = h1214[g1214], j1214.markedForDeletion ? this._removeUpdateFromHash(j1214) : g1214++;
                    this._updateHashLocked = !1, this._currentTarget = null;
                }
                schedule(r1213, s1213, t1213, u1213, v1213, w1213) {
                    var x1213, y1213;
                    let z1213, a1214;
                    "function" != typeof r1213 ? (y125(1514), z1213 = s1213, a1214 = r1213) : (z1213 = r1213, a1214 = s1213), 3 !== arguments.length && 4 !== arguments.length && 5 !== arguments.length || (w1213 = !!u1213, u1213 = s143.macro.REPEAT_FOREVER, v1213 = 0), a126(Boolean(a1214), 1502);
                    const b1214 = a1214.uuid || a1214.id;
                    if (!b1214)
                        return void z125(1510);
                    let c1214, d1214, e1214 = this._hashForTimers[b1214];
                    if (e1214 ? e1214.paused !== w1213 && y125(1511) : (e1214 = e156.get(null, a1214, 0, null, !1, Boolean(w1213)), this._arrayForTimers.push(e1214), this._hashForTimers[b1214] = e1214), null == e1214.timers)
                        e1214.timers = [];
                    else
                        for (d1214 = 0; d1214 < e1214.timers.length; ++d1214)
                            if (c1214 = e1214.timers[d1214], c1214 && z1213 === c1214.getCallback())
                                return x125(1507, c1214.getInterval(), t1213), void c1214.setInterval(t1213);
                    c1214 = f156.get(), c1214.initWithCallback(this, z1213, a1214, t1213, null !== (x1213 = u1213) && void 0 !== x1213 ? x1213 : 0, null !== (y1213 = v1213) && void 0 !== y1213 ? y1213 : 0), e1214.timers.push(c1214), this._currentTarget === e1214 && this._currentTargetSalvaged && (this._currentTargetSalvaged = !1);
                }
                scheduleUpdate(k1213, l1213, m1213) {
                    const n1213 = k1213.uuid || k1213.id;
                    if (!n1213)
                        return void z125(1510);
                    const o1213 = this._hashForUpdates[n1213];
                    if (o1213 && o1213.entry) {
                        if (o1213.entry.priority === l1213)
                            return o1213.entry.markedForDeletion = !1, void (o1213.entry.paused = m1213);
                        if (this._updateHashLocked)
                            return x125(1506), o1213.entry.markedForDeletion = !1, void (o1213.entry.paused = m1213);
                        this.unscheduleUpdate(k1213);
                    }
                    const p1213 = c156.get(k1213, l1213, m1213, !1);
                    let q1213;
                    0 === l1213 ? (q1213 = this._updates0List, this._appendIn(q1213, p1213)) : (q1213 = l1213 < 0 ? this._updatesNegList : this._updatesPosList, this._priorityIn(q1213, p1213, l1213)), this._hashForUpdates[n1213] = d156.get(q1213, p1213, k1213, null);
                }
                unschedule(c1213, d1213) {
                    if (!d1213 || !c1213)
                        return;
                    const e1213 = d1213.uuid || d1213.id;
                    if (!e1213)
                        return void z125(1510);
                    const f1213 = this._hashForTimers[e1213];
                    if (f1213) {
                        const g1213 = f1213.timers;
                        if (!g1213)
                            return;
                        for (let h1213 = 0, i1213 = g1213.length; h1213 < i1213; h1213++) {
                            const j1213 = g1213[h1213];
                            if (c1213 === j1213.getCallback())
                                return j1213 !== f1213.currentTimer || f1213.currentTimerSalvaged || (f1213.currentTimerSalvaged = !0), g1213.splice(h1213, 1), f156.put(j1213), f1213.timerIndex >= h1213 && f1213.timerIndex--, void (0 === g1213.length && (this._currentTarget === f1213 ? this._currentTargetSalvaged = !0 : this._removeHashElement(f1213)));
                        }
                    }
                }
                unscheduleUpdate(z1212) {
                    if (!z1212)
                        return;
                    const a1213 = z1212.uuid || z1212.id;
                    if (!a1213)
                        return void z125(1510);
                    const b1213 = this._hashForUpdates[a1213];
                    null != b1213 && b1213.entry && (this._updateHashLocked ? b1213.entry.markedForDeletion = !0 : this._removeUpdateFromHash(b1213.entry));
                }
                unscheduleAllForTarget(t1212) {
                    if (!t1212)
                        return;
                    const u1212 = t1212.uuid || t1212.id;
                    if (!u1212)
                        return void z125(1510);
                    const v1212 = this._hashForTimers[u1212];
                    if (null != v1212 && v1212.timers) {
                        const w1212 = v1212.timers;
                        v1212.currentTimer && w1212.indexOf(v1212.currentTimer) > -1 && !v1212.currentTimerSalvaged && (v1212.currentTimerSalvaged = !0);
                        for (let x1212 = 0, y1212 = w1212.length; x1212 < y1212; x1212++)
                            f156.put(w1212[x1212]);
                        w1212.length = 0, this._currentTarget === v1212 ? this._currentTargetSalvaged = !0 : this._removeHashElement(v1212);
                    }
                    this.unscheduleUpdate(t1212);
                }
                unscheduleAll() {
                    this.unscheduleAllWithMinPriority(a156.Priority.SCHEDULER);
                }
                unscheduleAllWithMinPriority(k1212) {
                    let l1212, m1212;
                    const n1212 = this._arrayForTimers;
                    for (l1212 = n1212.length - 1; l1212 >= 0; l1212--)
                        m1212 = n1212[l1212], m1212.target && this.unscheduleAllForTarget(m1212.target);
                    let o1212, p1212 = 0;
                    if (k1212 < 0)
                        for (l1212 = 0; l1212 < this._updatesNegList.length;) {
                            var q1212;
                            p1212 = this._updatesNegList.length, o1212 = this._updatesNegList[l1212], null !== (q1212 = o1212) && void 0 !== q1212 && q1212.target && o1212.priority >= k1212 && this.unscheduleUpdate(o1212.target), p1212 === this._updatesNegList.length && l1212++;
                        }
                    if (k1212 <= 0)
                        for (l1212 = 0; l1212 < this._updates0List.length;) {
                            var r1212;
                            p1212 = this._updates0List.length, o1212 = this._updates0List[l1212], null !== (r1212 = o1212) && void 0 !== r1212 && r1212.target && this.unscheduleUpdate(o1212.target), p1212 === this._updates0List.length && l1212++;
                        }
                    for (l1212 = 0; l1212 < this._updatesPosList.length;) {
                        var s1212;
                        p1212 = this._updatesPosList.length, o1212 = this._updatesPosList[l1212], null !== (s1212 = o1212) && void 0 !== s1212 && s1212.target && o1212.priority >= k1212 && this.unscheduleUpdate(o1212.target), p1212 === this._updatesPosList.length && l1212++;
                    }
                }
                isScheduled(e1212, f1212) {
                    a126(Boolean(e1212), 1508), a126(Boolean(f1212), 1509);
                    const g1212 = f1212.uuid || f1212.id;
                    if (!g1212)
                        return z125(1510), !1;
                    const h1212 = this._hashForTimers[g1212];
                    if (!h1212)
                        return !1;
                    if (null == h1212.timers)
                        return !1;
                    {
                        const i1212 = h1212.timers;
                        for (let j1212 = 0; j1212 < i1212.length; ++j1212)
                            if (e1212 === i1212[j1212].getCallback())
                                return !0;
                        return !1;
                    }
                }
                pauseAllTargets() {
                    return this.pauseAllTargetsWithMinPriority(a156.Priority.SCHEDULER);
                }
                pauseAllTargetsWithMinPriority(t1211) {
                    const u1211 = [];
                    let v1211;
                    const w1211 = this._arrayForTimers;
                    let x1211, y1211, z1211;
                    for (x1211 = 0, y1211 = w1211.length; x1211 < y1211; x1211++) {
                        var a1212;
                        v1211 = w1211[x1211], null !== (a1212 = v1211) && void 0 !== a1212 && a1212.target && (v1211.paused = !0, u1211.push(v1211.target));
                    }
                    if (t1211 < 0)
                        for (x1211 = 0; x1211 < this._updatesNegList.length; x1211++) {
                            var b1212;
                            z1211 = this._updatesNegList[x1211], null !== (b1212 = z1211) && void 0 !== b1212 && b1212.target && z1211.priority >= t1211 && (z1211.paused = !0, u1211.push(z1211.target));
                        }
                    if (t1211 <= 0)
                        for (x1211 = 0; x1211 < this._updates0List.length; x1211++) {
                            var c1212;
                            z1211 = this._updates0List[x1211], null !== (c1212 = z1211) && void 0 !== c1212 && c1212.target && (z1211.paused = !0, u1211.push(z1211.target));
                        }
                    for (x1211 = 0; x1211 < this._updatesPosList.length; x1211++) {
                        var d1212;
                        z1211 = this._updatesPosList[x1211], null !== (d1212 = z1211) && void 0 !== d1212 && d1212.target && z1211.priority >= t1211 && (z1211.paused = !0, u1211.push(z1211.target));
                    }
                    return u1211;
                }
                resumeTargets(r1211) {
                    if (r1211)
                        for (let s1211 = 0; s1211 < r1211.length; s1211++)
                            this.resumeTarget(r1211[s1211]);
                }
                pauseTarget(n1211) {
                    a126(Boolean(n1211), 1503);
                    const o1211 = n1211.uuid || n1211.id;
                    if (!o1211)
                        return void z125(1510);
                    const p1211 = this._hashForTimers[o1211];
                    p1211 && (p1211.paused = !0);
                    const q1211 = this._hashForUpdates[o1211];
                    null != q1211 && q1211.entry && (q1211.entry.paused = !0);
                }
                resumeTarget(j1211) {
                    a126(Boolean(j1211), 1504);
                    const k1211 = j1211.uuid || j1211.id;
                    if (!k1211)
                        return void z125(1510);
                    const l1211 = this._hashForTimers[k1211];
                    l1211 && (l1211.paused = !1);
                    const m1211 = this._hashForUpdates[k1211];
                    null != m1211 && m1211.entry && (m1211.entry.paused = !1);
                }
                isTargetPaused(f1211) {
                    a126(Boolean(f1211), 1505);
                    const g1211 = f1211.uuid || f1211.id;
                    if (!g1211)
                        return z125(1510), !1;
                    const h1211 = this._hashForTimers[g1211];
                    if (h1211)
                        return h1211.paused;
                    const i1211 = this._hashForUpdates[g1211];
                    return !(null == i1211 || !i1211.entry) && i1211.entry.paused;
                }
                _removeHashElement(a1211) {
                    if (!a1211.target)
                        return;
                    const b1211 = a1211.target.uuid || a1211.target.id;
                    if (void 0 === b1211)
                        return;
                    delete this._hashForTimers[b1211];
                    const c1211 = this._arrayForTimers;
                    for (let d1211 = 0, e1211 = c1211.length; d1211 < e1211; d1211++)
                        if (c1211[d1211] === a1211) {
                            c1211.splice(d1211, 1);
                            break;
                        }
                    e156.put(a1211);
                }
                _removeUpdateFromHash(t1210) {
                    if (!t1210.target)
                        return;
                    const u1210 = t1210.target.uuid || t1210.target.id;
                    if (void 0 === u1210)
                        return;
                    const v1210 = this._hashForUpdates[u1210];
                    if (v1210) {
                        const w1210 = v1210.list, x1210 = v1210.entry;
                        if (w1210)
                            for (let y1210 = 0, z1210 = w1210.length; y1210 < z1210; y1210++)
                                if (w1210[y1210] === x1210) {
                                    w1210.splice(y1210, 1);
                                    break;
                                }
                        delete this._hashForUpdates[u1210], x1210 && c156.put(x1210), d156.put(v1210);
                    }
                }
                _priorityIn(p1210, q1210, r1210) {
                    for (let s1210 = 0; s1210 < p1210.length; s1210++)
                        if (r1210 < p1210[s1210].priority)
                            return void p1210.splice(s1210, 0, q1210);
                    p1210.push(q1210);
                }
                _appendIn(n1210, o1210) {
                    n1210.push(o1210);
                }
            }
            g125("Scheduler", g156), g156.ID = "scheduler", s143.Scheduler = g156;
            const h156 = {};
            k144(h156, "vmath", [{
                    name: "vec2",
                    newName: "Vec2",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "vec3",
                    newName: "Vec3",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "vec4",
                    newName: "Vec4",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "quat",
                    newName: "Quat",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "mat3",
                    newName: "Mat3",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "mat4",
                    newName: "Mat4",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "color4",
                    newName: "Color",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "rect",
                    newName: "Rect",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "approx",
                    newName: "approx",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "EPSILON",
                    newName: "EPSILON",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "equals",
                    newName: "equals",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "clamp",
                    newName: "clamp",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "clamp01",
                    newName: "clamp01",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "lerp",
                    newName: "lerp",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "toRadian",
                    newName: "toRadian",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "toDegree",
                    newName: "toDegree",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "random",
                    newName: "random",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "randomRange",
                    newName: "randomRange",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "randomRangeInt",
                    newName: "randomRangeInt",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "pseudoRandom",
                    newName: "pseudoRandom",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "pseudoRandomRangeInt",
                    newName: "pseudoRandomRangeInt",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "nextPow2",
                    newName: "nextPow2",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "repeat",
                    newName: "repeat",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "pingPong",
                    newName: "pingPong",
                    target: b148,
                    targetName: "math"
                }, {
                    name: "inverseLerp",
                    newName: "inverseLerp",
                    target: b148,
                    targetName: "math"
                }]), s143.vmath = h156, k144(g156.prototype, "Scheduler.prototype", [{
                    name: "enableForTarget",
                    newName: "enableForTarget",
                    target: g156,
                    targetName: "Scheduler"
                }]), k144(g156, "Scheduler", [{
                    name: "PRIORITY_SYSTEM",
                    newName: "System.Priority.SCHEDULER",
                    customGetter: () => a156.Priority.SCHEDULER
                }]), l144(g156, "Scheduler", [{
                    name: "PRIORITY_NON_SYSTEM",
                    suggest: "Use enum` System.Priority` instead"
                }]), e126({
                replaceProperty: {
                    since: "3.6.0",
                    removed: !1
                },
                removeProperty: {
                    since: "3.6.0",
                    removed: !1
                },
                markAsWarning: {
                    since: "3.6.0",
                    removed: !1
                },
                setDefaultLogTimes: {
                    since: "3.6.0",
                    removed: !1
                }
            });
            const i156 = i127;
            function f133() { }
            class j156 {
                constructor() {
                    this.callback = f133, this.target = void 0, this.once = !1;
                }
                set(k1210, l1210, m1210) {
                    this.callback = k1210 || f133, this.target = l1210, this.once = !!m1210;
                }
                reset() {
                    this.target = void 0, this.callback = f133, this.once = !1;
                }
                check() {
                    return !(b131(this.target) && !c131(this.target, !0));
                }
            }
            const k156 = new x155(() => new j156(), 32);
            class l156 {
                constructor() {
                    this.callbackInfos = [], this.isInvoking = !1, this.containCanceled = !1;
                }
                removeByCallback(h1210) {
                    for (let i1210 = 0; i1210 < this.callbackInfos.length; ++i1210) {
                        const j1210 = this.callbackInfos[i1210];
                        j1210 && j1210.callback === h1210 && (j1210.reset(), k156.free(j1210), i156(this.callbackInfos, i1210), --i1210);
                    }
                }
                removeByTarget(e1210) {
                    for (let f1210 = 0; f1210 < this.callbackInfos.length; ++f1210) {
                        const g1210 = this.callbackInfos[f1210];
                        g1210 && g1210.target === e1210 && (g1210.reset(), k156.free(g1210), i156(this.callbackInfos, f1210), --f1210);
                    }
                }
                cancel(c1210) {
                    const d1210 = this.callbackInfos[c1210];
                    d1210 && (d1210.reset(), this.isInvoking ? this.callbackInfos[c1210] = null : i156(this.callbackInfos, c1210), k156.free(d1210)), this.containCanceled = !0;
                }
                cancelAll() {
                    for (let a1210 = 0; a1210 < this.callbackInfos.length; a1210++) {
                        const b1210 = this.callbackInfos[a1210];
                        b1210 && (b1210.reset(), k156.free(b1210), this.callbackInfos[a1210] = null);
                    }
                    this.containCanceled = !0;
                }
                purgeCanceled() {
                    for (let z1209 = this.callbackInfos.length - 1; z1209 >= 0; --z1209)
                        this.callbackInfos[z1209] || i156(this.callbackInfos, z1209);
                    this.containCanceled = !1;
                }
                clear() {
                    this.cancelAll(), this.callbackInfos.length = 0, this.isInvoking = !1, this.containCanceled = !1;
                }
            }
            const m156 = new x155(() => new l156(), 16);
            class n156 {
                constructor() {
                    this._callbackTable = j126(!0), this._offCallback = void 0;
                }
                on(t1209, u1209, v1209, w1209) {
                    if (!this.hasEventListener(t1209, u1209, v1209)) {
                        let x1209 = this._callbackTable[t1209];
                        x1209 || (x1209 = this._callbackTable[t1209] = m156.alloc());
                        const y1209 = k156.alloc();
                        y1209.set(u1209, v1209, w1209), x1209.callbackInfos.push(y1209);
                    }
                    return u1209;
                }
                hasEventListener(l1209, m1209, n1209) {
                    const o1209 = this._callbackTable && this._callbackTable[l1209];
                    if (!o1209)
                        return !1;
                    const p1209 = o1209.callbackInfos;
                    if (!m1209) {
                        if (o1209.isInvoking) {
                            for (let s1209 = 0; s1209 < p1209.length; ++s1209)
                                if (p1209[s1209])
                                    return !0;
                            return !1;
                        }
                        return p1209.length > 0;
                    }
                    for (let q1209 = 0; q1209 < p1209.length; ++q1209) {
                        const r1209 = p1209[q1209];
                        if (r1209 && r1209.check() && r1209.callback === m1209 && r1209.target === n1209)
                            return !0;
                    }
                    return !1;
                }
                removeAll(d1209) {
                    const e1209 = typeof d1209;
                    if ("string" === e1209 || "number" === e1209) {
                        const k1209 = this._callbackTable && this._callbackTable[d1209];
                        k1209 && (k1209.isInvoking ? k1209.cancelAll() : (k1209.clear(), m156.free(k1209), delete this._callbackTable[d1209]));
                    }
                    else if (d1209)
                        for (const f1209 in this._callbackTable) {
                            const g1209 = this._callbackTable[f1209];
                            if (g1209.isInvoking) {
                                const h1209 = g1209.callbackInfos;
                                for (let i1209 = 0; i1209 < h1209.length; ++i1209) {
                                    const j1209 = h1209[i1209];
                                    j1209 && j1209.target === d1209 && g1209.cancel(i1209);
                                }
                            }
                            else
                                g1209.removeByTarget(d1209);
                        }
                }
                off(v1208, w1208, x1208) {
                    var y1208;
                    const z1208 = this._callbackTable && this._callbackTable[v1208];
                    if (z1208) {
                        const a1209 = z1208.callbackInfos;
                        if (w1208)
                            for (let b1209 = 0; b1209 < a1209.length; ++b1209) {
                                const c1209 = a1209[b1209];
                                if (c1209 && c1209.callback === w1208 && c1209.target === x1208) {
                                    z1208.cancel(b1209);
                                    break;
                                }
                            }
                        else
                            this.removeAll(v1208);
                    }
                    null === (y1208 = this._offCallback) || void 0 === y1208 || y1208.call(this);
                }
                emit(h1208, i1208, j1208, k1208, l1208, m1208) {
                    const n1208 = this._callbackTable && this._callbackTable[h1208];
                    if (n1208) {
                        const o1208 = !n1208.isInvoking;
                        n1208.isInvoking = !0;
                        const p1208 = n1208.callbackInfos;
                        for (let q1208 = 0, r1208 = p1208.length; q1208 < r1208; ++q1208) {
                            const s1208 = p1208[q1208];
                            if (s1208) {
                                const t1208 = s1208.callback, u1208 = s1208.target;
                                s1208.once && this.off(h1208, t1208, u1208), s1208.check() ? u1208 ? t1208.call(u1208, i1208, j1208, k1208, l1208, m1208) : t1208(i1208, j1208, k1208, l1208, m1208) : this.off(h1208, t1208, u1208);
                            }
                        }
                        o1208 && (n1208.isInvoking = !1, n1208.containCanceled && n1208.purgeCanceled());
                    }
                }
                clear() {
                    for (const f1208 in this._callbackTable) {
                        const g1208 = this._callbackTable[f1208];
                        g1208 && (g1208.clear(), m156.free(g1208), delete this._callbackTable[f1208]);
                    }
                }
                _registerOffCallback(e1208) {
                    this._offCallback = e1208;
                }
            }
            function g133(s1207) {
                class t1207 extends s1207 {
                    constructor(...d1208) {
                        super(...d1208), this._callbackTable = j126(!0);
                    }
                    once(a1208, b1208, c1208) {
                        return this.on(a1208, b1208, c1208, !0);
                    }
                    targetOff(z1207) {
                        this.removeAll(z1207);
                    }
                }
                const u1207 = n156.prototype, v1207 = Object.getOwnPropertyNames(u1207).concat(Object.getOwnPropertySymbols(u1207));
                for (let w1207 = 0; w1207 < v1207.length; ++w1207) {
                    const x1207 = v1207[w1207];
                    if (!(x1207 in t1207.prototype)) {
                        const y1207 = Object.getOwnPropertyDescriptor(u1207, x1207);
                        y1207 && Object.defineProperty(t1207.prototype, x1207, y1207);
                    }
                }
                return t1207;
            }
            g125("CallbacksInvoker", n156);
            const o156 = g125("EventTarget", g133(class {
            }));
            s143.EventTarget = o156;
            class p156 {
                constructor() {
                    this._delegates = [];
                }
                add(r1207) {
                    this._delegates.includes(r1207) || this._delegates.push(r1207);
                }
                hasListener(q1207) {
                    return this._delegates.includes(q1207);
                }
                remove(p1207) {
                    k127(this._delegates, p1207);
                }
                dispatch(...m1207) {
                    return Promise.all(this._delegates.map(o1207 => o1207(...arguments)).filter(Boolean));
                }
            }
            let q156, r156, s156, t156, u156, v156;
            g125("AsyncDelegate", p156), function (l1207) {
                l1207.UNKNOWN = "unknown", l1207.WECHAT = "wechat", l1207.ANDROID = "androidbrowser", l1207.IE = "ie", l1207.EDGE = "edge", l1207.QQ = "qqbrowser", l1207.MOBILE_QQ = "mqqbrowser", l1207.UC = "ucbrowser", l1207.UCBS = "ucbs", l1207.BROWSER_360 = "360browser", l1207.BAIDU_APP = "baiduboxapp", l1207.BAIDU = "baidubrowser", l1207.MAXTHON = "maxthon", l1207.OPERA = "opera", l1207.OUPENG = "oupeng", l1207.MIUI = "miuibrowser", l1207.FIREFOX = "firefox", l1207.SAFARI = "safari", l1207.CHROME = "chrome", l1207.LIEBAO = "liebao", l1207.QZONE = "qzone", l1207.SOUGOU = "sogou", l1207.HUAWEI = "huawei";
            }(q156 || (q156 = {})), function (k1207) {
                k1207.UNKNOWN = "unknown", k1207.ENGLISH = "en", k1207.CHINESE = "zh", k1207.FRENCH = "fr", k1207.ITALIAN = "it", k1207.GERMAN = "de", k1207.SPANISH = "es", k1207.DUTCH = "du", k1207.RUSSIAN = "ru", k1207.KOREAN = "ko", k1207.JAPANESE = "ja", k1207.HUNGARIAN = "hu", k1207.PORTUGUESE = "pt", k1207.ARABIC = "ar", k1207.NORWEGIAN = "no", k1207.POLISH = "pl", k1207.TURKISH = "tr", k1207.UKRAINIAN = "uk", k1207.ROMANIAN = "ro", k1207.BULGARIAN = "bg", k1207.HINDI = "hi";
            }(r156 || (r156 = {})), function (j1207) {
                j1207[j1207.NONE = 0] = "NONE", j1207[j1207.LAN = 1] = "LAN", j1207[j1207.WWAN = 2] = "WWAN";
            }(s156 || (s156 = {})), function (i1207) {
                i1207.UNKNOWN = "Unknown", i1207.IOS = "iOS", i1207.ANDROID = "Android", i1207.WINDOWS = "Windows", i1207.LINUX = "Linux", i1207.OSX = "OS X", i1207.OHOS = "OHOS", i1207.OPENHARMONY = "OpenHarmony";
            }(t156 || (t156 = {})), function (h1207) {
                h1207.UNKNOWN = "UNKNOWN", h1207.EDITOR_PAGE = "EDITOR_PAGE", h1207.EDITOR_CORE = "EDITOR_CORE", h1207.MOBILE_BROWSER = "MOBILE_BROWSER", h1207.DESKTOP_BROWSER = "DESKTOP_BROWSER", h1207.WIN32 = "WIN32", h1207.ANDROID = "ANDROID", h1207.IOS = "IOS", h1207.MACOS = "MACOS", h1207.OHOS = "OHOS", h1207.OPENHARMONY = "OPENHARMONY", h1207.WECHAT_GAME = "WECHAT_GAME", h1207.WECHAT_MINI_PROGRAM = "WECHAT_MINI_PROGRAM", h1207.BAIDU_MINI_GAME = "BAIDU_MINI_GAME", h1207.XIAOMI_QUICK_GAME = "XIAOMI_QUICK_GAME", h1207.ALIPAY_MINI_GAME = "ALIPAY_MINI_GAME", h1207.TAOBAO_CREATIVE_APP = "TAOBAO_CREATIVE_APP", h1207.TAOBAO_MINI_GAME = "TAOBAO_MINI_GAME", h1207.BYTEDANCE_MINI_GAME = "BYTEDANCE_MINI_GAME", h1207.OPPO_MINI_GAME = "OPPO_MINI_GAME", h1207.VIVO_MINI_GAME = "VIVO_MINI_GAME", h1207.HUAWEI_QUICK_GAME = "HUAWEI_QUICK_GAME", h1207.COCOSPLAY = "COCOSPLAY", h1207.LINKSURE_MINI_GAME = "LINKSURE_MINI_GAME", h1207.QTT_MINI_GAME = "QTT_MINI_GAME";
            }(u156 || (u156 = {})), function (g1207) {
                g1207.WEBP = "WEBP", g1207.IMAGE_BITMAP = "IMAGE_BITMAP", g1207.WEB_VIEW = "WEB_VIEW", g1207.VIDEO_PLAYER = "VIDEO_PLAYER", g1207.SAFE_AREA = "SAFE_AREA", g1207.HPE = "HPE", g1207.INPUT_TOUCH = "INPUT_TOUCH", g1207.EVENT_KEYBOARD = "EVENT_KEYBOARD", g1207.EVENT_MOUSE = "EVENT_MOUSE", g1207.EVENT_TOUCH = "EVENT_TOUCH", g1207.EVENT_ACCELEROMETER = "EVENT_ACCELEROMETER", g1207.EVENT_GAMEPAD = "EVENT_GAMEPAD", g1207.EVENT_HANDLE = "EVENT_HANDLE", g1207.EVENT_HMD = "EVENT_HMD", g1207.EVENT_HANDHELD = "EVENT_HANDHELD", g1207.WASM = "WASM";
            }(v156 || (v156 = {}));
            const w156 = {
                0: s156.NONE,
                1: s156.LAN,
                2: s156.WWAN
            }, x156 = {
                0: u156.WIN32,
                2: u156.MACOS,
                3: u156.ANDROID,
                4: u156.IOS,
                5: u156.IOS,
                6: u156.OHOS,
                7: u156.OPENHARMONY
            }, y156 = new class extends o156 {
                get networkType() {
                    return w156[jsb.device.getNetworkType()];
                }
                constructor() {
                    super(), this.isNative = void 0, this.isBrowser = void 0, this.isMobile = void 0, this.isLittleEndian = void 0, this.platform = void 0, this.language = void 0, this.nativeLanguage = void 0, this.os = void 0, this.osVersion = void 0, this.osMainVersion = void 0, this.browserType = void 0, this.browserVersion = void 0, this.isXR = void 0, this._featureMap = void 0, this._initPromise = void 0, this.isNative = !0, this.isBrowser = !1, this.platform = x156[__getPlatform()], this.isMobile = this.platform === u156.ANDROID || this.platform === u156.IOS || this.platform === u156.OHOS || this.platform === u156.OPENHARMONY, this.isLittleEndian = (() => {
                        const f1207 = new ArrayBuffer(2);
                        return new DataView(f1207).setInt16(0, 256, !0), 256 === new Int16Array(f1207)[0];
                    })();
                    const c1207 = __getCurrentLanguageCode();
                    this.nativeLanguage = c1207 ? c1207.toLowerCase() : r156.UNKNOWN, this.language = __getCurrentLanguage(), this.os = __getOS(), this.osVersion = __getOSVersion(), this.osMainVersion = parseInt(this.osVersion), this.browserType = q156.UNKNOWN, this.browserVersion = "", this.isXR = "undefined" != typeof xr && void 0 !== xr.XrEntry;
                    const d1207 = "function" == typeof __supportHPE && __supportHPE();
                    this._featureMap = {
                        [v156.WEBP]: !0,
                        [v156.IMAGE_BITMAP]: !1,
                        [v156.WEB_VIEW]: this.isMobile,
                        [v156.VIDEO_PLAYER]: this.isMobile,
                        [v156.SAFE_AREA]: this.isMobile,
                        [v156.HPE]: d1207,
                        [v156.INPUT_TOUCH]: this.isMobile,
                        [v156.EVENT_KEYBOARD]: !0,
                        [v156.EVENT_MOUSE]: d1207 || !this.isMobile,
                        [v156.EVENT_TOUCH]: !0,
                        [v156.EVENT_ACCELEROMETER]: this.isMobile,
                        [v156.EVENT_GAMEPAD]: !0,
                        [v156.EVENT_HANDLE]: this.isXR,
                        [v156.EVENT_HMD]: this.isXR,
                        [v156.EVENT_HANDHELD]: "undefined" != typeof xr && void 0 !== xr.ARModule,
                        [v156.WASM]: !1
                    }, this._initPromise = [], this._registerEvent();
                }
                _registerEvent() {
                    jsb.onPause = () => {
                        this.emit("hide");
                    }, jsb.onResume = () => {
                        this.emit("show");
                    }, jsb.onClose = () => {
                        this.emit("close");
                    };
                }
                _setFeature(x1206, y1206) {
                    return this._featureMap[x1206] = y1206;
                }
                init() {
                    return Promise.all(this._initPromise);
                }
                hasFeature(w1206) {
                    return this._featureMap[w1206];
                }
                getBatteryLevel() {
                    return jsb.device.getBatteryLevel();
                }
                triggerGC() {
                    jsb.garbageCollect();
                }
                openURL(v1206) {
                    jsb.openURL(v1206);
                }
                now() {
                    return Date.now ? Date.now() : +new Date();
                }
                restartJSVM() {
                    __restartVM();
                }
                close() {
                    __close();
                }
                exit() {
                    __exit();
                }
            }(), z156 = /(\.[^\.\/\?\\]*)(\?.*)?$/, a157 = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/, b157 = /[^\.\/]+\/\.\.\//;
            function h133(...s1206) {
                let t1206 = "";
                for (const u1206 of s1206)
                    t1206 = (t1206 + ("" === t1206 ? "" : "/") + u1206).replace(/(\/|\\\\)$/, "");
                return t1206;
            }
            function i133(q1206) {
                const r1206 = z156.exec(q1206);
                return r1206 ? r1206[1] : "";
            }
            function j133(o1206) {
                if (o1206) {
                    const p1206 = o1206.lastIndexOf(".");
                    if (-1 !== p1206)
                        return o1206.substring(0, p1206);
                }
                return o1206;
            }
            function k133(j1206, k1206) {
                const l1206 = j1206.indexOf("?");
                l1206 > 0 && (j1206 = j1206.substring(0, l1206));
                const m1206 = /(\/|\\)([^\/\\]+)$/g.exec(j1206.replace(/(\/|\\)$/, ""));
                if (!m1206)
                    return j1206;
                const n1206 = m1206[2];
                return k1206 && j1206.substring(j1206.length - k1206.length).toLowerCase() === k1206.toLowerCase() ? n1206.substring(0, n1206.length - k1206.length) : n1206;
            }
            function l133(h1206) {
                const i1206 = a157.exec(h1206);
                return i1206 ? i1206[2] : "";
            }
            function m133(d1206, e1206) {
                e1206 = e1206 || "";
                let f1206 = d1206.indexOf("?"), g1206 = "";
                return f1206 > 0 && (g1206 = d1206.substring(f1206), d1206 = d1206.substring(0, f1206)), f1206 = d1206.lastIndexOf("."), f1206 < 0 ? d1206 + e1206 + g1206 : d1206.substring(0, f1206) + e1206 + g1206;
            }
            function n133(x1205, y1205, z1205) {
                if (0 === y1205.indexOf("."))
                    return m133(x1205, y1205);
                let a1206 = x1205.indexOf("?"), b1206 = "";
                const c1206 = z1205 ? i133(x1205) : "";
                return a1206 > 0 && (b1206 = x1205.substring(a1206), x1205 = x1205.substring(0, a1206)), a1206 = x1205.lastIndexOf("/"), a1206 = a1206 <= 0 ? 0 : a1206 + 1, x1205.substring(0, a1206) + y1205 + c1206 + b1206;
            }
            function o133(v1205) {
                let w1205 = v1205 = String(v1205);
                do {
                    w1205 = v1205, v1205 = v1205.replace(b157, "");
                } while (w1205.length !== v1205.length);
                return v1205;
            }
            function p133(u1205) {
                return u1205.replace(/[\/\\]$/, "");
            }
            function q133() {
                return y156.os === t156.WINDOWS ? "\\" : "/";
            }
            g125("path", Object.freeze({
                __proto__: null,
                join: h133,
                extname: i133,
                mainFileName: j133,
                basename: k133,
                dirname: l133,
                changeExtname: m133,
                changeBasename: n133,
                _normalize: o133,
                stripSep: p133,
                getSeperator: q133
            }));
            const c157 = new w146();
            function r133(p1205, q1205, r1205, s1205) {
                s1205 || (s1205 = new w146()), p1205.convertToUINode(q1205, r1205, s1205);
                const t1205 = r1205.position;
                return s1205.add(t1205), s1205;
            }
            function s133(m1205, n1205, o1205) {
                return o1205 || (o1205 = new w146()), m1205.worldToScreen(n1205, o1205), o1205.x /= s143.view.getScaleX(), o1205.y /= s143.view.getScaleY(), o1205;
            }
            const d157 = g125("convertUtils", {
                WorldNode3DToLocalNodeUI: r133,
                WorldNode3DToWorldNodeUI: s133
            });
            let e157;
            s143.pipelineUtils = d157, k144(s143.pipelineUtils, "cc.pipelineUtils", [{
                    name: "WorldNode3DToLocalNodeUI",
                    newName: "convertToUINode",
                    targetName: "cc.Camera.prototype",
                    customFunction(...j1205) {
                        const k1205 = j1205[0], l1205 = j1205[3] || c157;
                        return k1205.convertToUINode(j1205[1], j1205[2], l1205), l1205.add(j1205[2].position), j1205[3] || l1205.clone();
                    }
                }]), m144(o145, "js", [{
                    name: "js",
                    suggest: "'js.js' is deprecated since v3.7.0, please access 'js' directly instead."
                }]), function (i1205) {
                i1205[i1205.PORTRAIT = 1] = "PORTRAIT", i1205[i1205.PORTRAIT_UPSIDE_DOWN = 2] = "PORTRAIT_UPSIDE_DOWN", i1205[i1205.LANDSCAPE_LEFT = 4] = "LANDSCAPE_LEFT", i1205[i1205.LANDSCAPE_RIGHT = 8] = "LANDSCAPE_RIGHT", i1205[i1205.LANDSCAPE = 12] = "LANDSCAPE", i1205[i1205.AUTO = 13] = "AUTO";
            }(e157 || (e157 = {}));
            const f157 = {
                0: e157.PORTRAIT,
                "-90": e157.LANDSCAPE_LEFT,
                90: e157.LANDSCAPE_RIGHT,
                180: e157.PORTRAIT_UPSIDE_DOWN
            }, g157 = new class extends o156 {
                get supportFullScreen() {
                    return !1;
                }
                get isFullScreen() {
                    return !1;
                }
                get devicePixelRatio() {
                    return jsb.device.getDevicePixelRatio() || 1;
                }
                get windowSize() {
                    const c1205 = this.devicePixelRatio, d1205 = jsb.window.innerWidth, e1205 = jsb.window.innerHeight, f1205 = Math.round(d1205), g1205 = Math.round(e1205);
                    return new x147(f1205 * c1205, g1205 * c1205);
                }
                set windowSize(h1205) {
                    console.warn("Setting window size is not supported yet.");
                }
                get resolution() {
                    const a1205 = this.windowSize, b1205 = this.resolutionScale;
                    return new x147(a1205.width * b1205, a1205.height * b1205);
                }
                get resolutionScale() {
                    return this._resolutionScale;
                }
                set resolutionScale(y1204) {
                    var z1204;
                    y1204 !== this._resolutionScale && (this._resolutionScale = y1204, null === (z1204 = this._cbToUpdateFrameBuffer) || void 0 === z1204 || z1204.call(this));
                }
                get orientation() {
                    return f157[jsb.device.getDeviceOrientation()];
                }
                set orientation(x1204) {
                    console.warn("Setting orientation is not supported yet.");
                }
                get safeAreaEdge() {
                    const r1204 = jsb.device.getSafeAreaEdge(), s1204 = this.devicePixelRatio;
                    let t1204 = r1204.x * s1204, u1204 = r1204.z * s1204, v1204 = r1204.y * s1204, w1204 = r1204.w * s1204;
                    return this.orientation === e157.PORTRAIT ? t1204 < u1204 ? t1204 = u1204 : u1204 = t1204 : v1204 < w1204 ? v1204 = w1204 : w1204 = v1204, {
                        top: t1204,
                        bottom: u1204,
                        left: v1204,
                        right: w1204
                    };
                }
                get isProportionalToFrame() {
                    return this._isProportionalToFrame;
                }
                set isProportionalToFrame(q1204) { }
                constructor() {
                    super(), this.isFrameRotated = !1, this.handleResizeEvent = !0, this._cbToUpdateFrameBuffer = void 0, this._resolutionScale = 1, this._isProportionalToFrame = !1, this._registerEvent();
                }
                init(o1204, p1204) {
                    this._cbToUpdateFrameBuffer = p1204, this._cbToUpdateFrameBuffer();
                }
                requestFullScreen() {
                    return Promise.reject(new Error("request fullscreen has not been supported yet on this platform."));
                }
                exitFullScreen() {
                    return Promise.reject(new Error("exit fullscreen has not been supported yet on this platform."));
                }
                _registerEvent() {
                    jsb.onResize = n1204 => {
                        0 !== n1204.width && 0 !== n1204.height && (window.resize(n1204.width / this.devicePixelRatio, n1204.height / this.devicePixelRatio), this.emit("window-resize", n1204.width, n1204.height, n1204.windowId));
                    }, jsb.onOrientationChanged = () => {
                        this.emit("orientation-change");
                    };
                }
            }(), h157 = g125("screen", new class {
                init() {
                    var d1204, e1204;
                    const f1204 = null === (d1204 = r145.querySettings(q145.Category.SCREEN, "exactFitScreen")) || void 0 === d1204 || d1204, g1204 = null !== (e1204 = r145.querySettings(q145.Category.SCREEN, "orientation")) && void 0 !== e1204 ? e1204 : "auto", h1204 = 3 === r145.querySettings(q145.Category.RENDERING, "renderMode");
                    g157.init({
                        exactFitScreen: f1204,
                        configOrientation: g1204,
                        isHeadlessMode: h1204
                    }, () => {
                        var j1204;
                        const k1204 = s143.director;
                        null !== (j1204 = k1204.root) && void 0 !== j1204 && j1204.pipeline ? k1204.root.pipeline.shadingScale = g157.resolutionScale : y125(1220);
                    });
                }
                get devicePixelRatio() {
                    return g157.devicePixelRatio;
                }
                get windowSize() {
                    return g157.windowSize;
                }
                set windowSize(c1204) {
                    g157.windowSize = c1204;
                }
                get resolution() {
                    return g157.resolution;
                }
                get supportsFullScreen() {
                    return g157.supportFullScreen;
                }
                fullScreen() {
                    return g157.isFullScreen;
                }
                requestFullScreen(w1203, x1203, y1203) {
                    return arguments.length > 0 && y125(1400, "screen.requestFullScreen(element, onFullScreenChange?, onFullScreenError?)", "screen.requestFullScreen(): Promise"), g157.requestFullScreen().then(() => {
                        null == x1203 || x1203.call(document);
                    }).catch(b1204 => {
                        r125(b1204), null == y1203 || y1203.call(document);
                    });
                }
                exitFullScreen() {
                    return g157.exitFullScreen();
                }
                autoFullScreen(r1203, s1203) {
                    var t1203;
                    null === (t1203 = this.requestFullScreen(r1203, s1203)) || void 0 === t1203 || t1203.catch(v1203 => {
                        q125(v1203);
                    });
                }
                disableAutoFullScreen(q1203) { }
                on(n1203, o1203, p1203) {
                    g157.on(n1203, o1203, p1203);
                }
                once(k1203, l1203, m1203) {
                    g157.once(k1203, l1203, m1203);
                }
                off(h1203, i1203, j1203) {
                    g157.off(h1203, i1203, j1203);
                }
            }());
            s143.screen = h157;
            const i157 = g125("sys", {
                Feature: v156,
                hasFeature: g1203 => y156.hasFeature(g1203),
                NetworkType: s156,
                Language: r156,
                OS: t156,
                Platform: u156,
                BrowserType: q156,
                isNative: y156.isNative,
                isBrowser: y156.isBrowser,
                isMobile: y156.isMobile,
                isLittleEndian: y156.isLittleEndian,
                platform: y156.platform,
                language: y156.language,
                languageCode: y156.nativeLanguage,
                os: y156.os,
                osVersion: y156.osVersion,
                osMainVersion: y156.osMainVersion,
                browserType: y156.browserType,
                browserVersion: y156.browserVersion,
                isXR: y156.isXR,
                windowPixelResolution: h157.windowSize,
                capabilities: {
                    canvas: !0,
                    opengl: !0,
                    webp: y156.hasFeature(v156.WEBP),
                    imageBitmap: y156.hasFeature(v156.IMAGE_BITMAP),
                    touches: y156.hasFeature(v156.INPUT_TOUCH),
                    mouse: y156.hasFeature(v156.EVENT_MOUSE),
                    keyboard: y156.hasFeature(v156.EVENT_KEYBOARD),
                    accelerometer: y156.hasFeature(v156.EVENT_ACCELEROMETER)
                },
                localStorage: {},
                getNetworkType: () => y156.networkType,
                getBatteryLevel: () => y156.getBatteryLevel(),
                garbageCollect() {
                    y156.triggerGC();
                },
                isObjectValid: f1203 => null != f1203,
                __isWebIOS14OrIPadOS14Env: !1,
                dump() {
                    let e1203 = "";
                    e1203 += `isMobile : ${this.isMobile}\r\n`, e1203 += `language : ${this.language}\r\n`, e1203 += `browserType : ${this.browserType}\r\n`, e1203 += `browserVersion : ${this.browserVersion}\r\n`, e1203 += `supports webp: ${i157.hasFeature(v156.WEBP)}\r\n`, e1203 += `supports bitmap: ${i157.hasFeature(v156.IMAGE_BITMAP)}\r\n`, e1203 += `supports touches: ${i157.hasFeature(v156.INPUT_TOUCH)}\r\n`, e1203 += `supports mouse: ${i157.hasFeature(v156.EVENT_MOUSE)}\r\n`, e1203 += `supports keyboard: ${i157.hasFeature(v156.EVENT_KEYBOARD)}\r\n`, e1203 += `supports accelerometer: ${i157.hasFeature(v156.EVENT_ACCELEROMETER)}\r\n`, e1203 += `os : ${this.os}\r\n`, e1203 += `osVersion : ${this.osVersion}\r\n`, e1203 += `platform : ${this.platform}\r\n`, e1203 += `Using ${s143.game.renderType === s143.game.RENDER_TYPE_WEBGL ? "WEBGL" : "CANVAS"} renderer.\r\n`, p125(e1203);
                },
                openURL(d1203) {
                    y156.openURL(d1203);
                },
                init() {
                    return Promise.resolve().then(() => y156.init()).then(() => {
                        try {
                            let c1203 = i157.localStorage = window.localStorage;
                            c1203.setItem("storage", ""), c1203.removeItem("storage"), c1203 = null;
                        }
                        catch (z1202) {
                            const a1203 = function () {
                                y125(5200);
                            };
                            this.localStorage = {
                                getItem: a1203,
                                setItem: a1203,
                                clear: a1203,
                                removeItem: a1203,
                                key: a1203,
                                length: 0
                            };
                        }
                        this.__isWebIOS14OrIPadOS14Env = (i157.os === t156.IOS || i157.os === t156.OSX) && y156.isBrowser && /(OS 14)|(Version\/14)/.test(window.navigator.userAgent);
                    });
                },
                now: () => y156.now(),
                restartVM() {
                    y156.restartJSVM();
                },
                getSafeAreaRect() {
                    const o1202 = s143.view, p1202 = g157.safeAreaEdge, q1202 = g157.windowSize, r1202 = new s147(p1202.left, p1202.bottom), s1202 = new s147(q1202.width - p1202.right, q1202.height - p1202.top);
                    o1202._convertToUISpace(r1202), o1202._convertToUISpace(s1202);
                    const t1202 = r1202.x, u1202 = r1202.y, v1202 = s1202.x - r1202.x, w1202 = s1202.y - r1202.y;
                    return new y147(t1202, u1202, v1202, w1202);
                }
            });
            s143.sys = i157, m144(s143, "cc", [{
                    name: "winSize",
                    suggest: "please use view.getVisibleSize() instead."
                }]), m144(i157, "sys", [{
                    name: "capabilities",
                    suggest: "please use sys.hasFeature() method instead."
                }]), k144(i157, "sys", ["UNKNOWN", "ENGLISH", "CHINESE", "FRENCH", "ITALIAN", "GERMAN", "SPANISH", "DUTCH", "RUSSIAN", "KOREAN", "JAPANESE", "HUNGARIAN", "PORTUGUESE", "ARABIC", "NORWEGIAN", "POLISH", "TURKISH", "UKRAINIAN", "ROMANIAN", "BULGARIAN"].map(n1202 => ({
                name: `LANGUAGE_${n1202}`,
                newName: n1202,
                target: i157.Language,
                targetName: "sys.Language"
            }))), k144(i157, "sys", ["UNKNOWN", "IOS", "ANDROID", "WINDOWS", "LINUX", "OSX"].map(m1202 => ({
                name: `OS_${m1202}`,
                newName: m1202,
                target: i157.OS,
                targetName: "sys.OS"
            }))), k144(i157, "sys", ["UNKNOWN", "WECHAT", "ANDROID", "IE", "EDGE", "QQ", "MOBILE_QQ", "UC", "UCBS", "BAIDU_APP", "BAIDU", "MAXTHON", "OPERA", "OUPENG", "MIUI", "FIREFOX", "SAFARI", "CHROME", "LIEBAO", "QZONE", "SOUGOU", "HUAWEI"].map(l1202 => ({
                name: `BROWSER_TYPE_${l1202}`,
                newName: l1202,
                target: i157.BrowserType,
                targetName: "sys.BrowserType"
            }))), k144(i157, "sys", [{
                    name: "BROWSER_TYPE_360",
                    newName: "BROWSER_360",
                    target: i157.BrowserType,
                    targetName: "sys.BrowserType"
                }]), k144(i157, "sys", ["UNKNOWN", "EDITOR_PAGE", "EDITOR_CORE", "MOBILE_BROWSER", "DESKTOP_BROWSER", "WIN32", "MACOS", "IOS", "ANDROID", "OHOS", "WECHAT_GAME", "BAIDU_MINI_GAME", "XIAOMI_QUICK_GAME", "ALIPAY_MINI_GAME", "BYTEDANCE_MINI_GAME", "OPPO_MINI_GAME", "VIVO_MINI_GAME", "HUAWEI_QUICK_GAME", "COCOSPLAY", "LINKSURE_MINI_GAME", "QTT_MINI_GAME"].map(k1202 => ({
                name: k1202,
                target: i157.Platform,
                targetName: "sys.Platform"
            }))), k144(i157, "sys", [{
                    name: "IPHONE",
                    newName: "IOS",
                    target: i157.Platform,
                    targetName: "sys.Platform"
                }, {
                    name: "IPAD",
                    newName: "IOS",
                    target: i157.Platform,
                    targetName: "sys.Platform"
                }]), l144(i157, "sys", ["LINUX", "BLACKBERRY", "NACL", "EMSCRIPTEN", "TIZEN", "WINRT", "WP8", "QQ_PLAY", "FB_PLAYABLE_ADS"].map(j1202 => ({
                name: j1202
            }))), k144(i157, "sys", [{
                    name: "windowPixelResolution",
                    target: h157,
                    targetName: "screen",
                    newName: "windowSize"
                }]), m144(h157, "screen", [{
                    name: "autoFullScreen",
                    suggest: "please use screen.requestFullScreen() instead."
                }, {
                    name: "disableAutoFullScreen"
                }]);
            const j157 = g125("visibleRect", {
                topLeft: s143.v2(0, 0),
                topRight: s143.v2(0, 0),
                top: s143.v2(0, 0),
                bottomLeft: s143.v2(0, 0),
                bottomRight: s143.v2(0, 0),
                bottom: s143.v2(0, 0),
                center: s143.v2(0, 0),
                left: s143.v2(0, 0),
                right: s143.v2(0, 0),
                width: 0,
                height: 0,
                init(c1202) {
                    const d1202 = this.width = c1202.width, e1202 = this.height = c1202.height, f1202 = c1202.x, g1202 = c1202.y, h1202 = g1202 + e1202, i1202 = f1202 + d1202;
                    this.topLeft.x = f1202, this.topLeft.y = h1202, this.topRight.x = i1202, this.topRight.y = h1202, this.top.x = f1202 + d1202 / 2, this.top.y = h1202, this.bottomLeft.x = f1202, this.bottomLeft.y = g1202, this.bottomRight.x = i1202, this.bottomRight.y = g1202, this.bottom.x = f1202 + d1202 / 2, this.bottom.y = g1202, this.center.x = f1202 + d1202 / 2, this.center.y = g1202 + e1202 / 2, this.left.x = f1202, this.left.y = g1202 + e1202 / 2, this.right.x = i1202, this.right.y = g1202 + e1202 / 2;
                }
            });
            s143.visibleRect = j157;
            const k157 = String.prototype.charCodeAt;
            function t133(b1202) {
                return this[b1202];
            }
            function u133(u1201, v1201) {
                let w1201 = u1201.length, x1201 = v1201 ^ w1201, y1201 = 0;
                const z1201 = "string" == typeof u1201 ? k157 : t133;
                for (; w1201 >= 4;) {
                    let a1202 = 255 & z1201.call(u1201, y1201) | (255 & z1201.call(u1201, ++y1201)) << 8 | (255 & z1201.call(u1201, ++y1201)) << 16 | (255 & z1201.call(u1201, ++y1201)) << 24;
                    a1202 = 1540483477 * (65535 & a1202) + ((1540483477 * (a1202 >>> 16) & 65535) << 16), a1202 ^= a1202 >>> 24, a1202 = 1540483477 * (65535 & a1202) + ((1540483477 * (a1202 >>> 16) & 65535) << 16), x1201 = 1540483477 * (65535 & x1201) + ((1540483477 * (x1201 >>> 16) & 65535) << 16) ^ a1202, w1201 -= 4, ++y1201;
                }
                switch (w1201) {
                    case 3:
                        x1201 ^= (255 & z1201.call(u1201, y1201 + 2)) << 16;
                    case 2:
                        x1201 ^= (255 & z1201.call(u1201, y1201 + 1)) << 8;
                    case 1:
                        x1201 ^= 255 & z1201.call(u1201, y1201), x1201 = 1540483477 * (65535 & x1201) + ((1540483477 * (x1201 >>> 16) & 65535) << 16);
                }
                return x1201 ^= x1201 >>> 13, x1201 = 1540483477 * (65535 & x1201) + ((1540483477 * (x1201 >>> 16) & 65535) << 16), x1201 ^= x1201 >>> 15, x1201 >>> 0;
            }
            function v133(p1201) {
                const q1201 = p1201._lpos;
                p1201.setPositionForJS(q1201.x, q1201.y, q1201.z);
                const r1201 = p1201._lscale;
                p1201.setScaleForJS(r1201.x, r1201.y, r1201.z);
                const s1201 = p1201._lrot;
                p1201.setRotationForJS(s1201.x, s1201.y, s1201.z, s1201.w);
                const t1201 = p1201._euler;
                p1201.setRotationFromEulerForJS(t1201.x, t1201.y, t1201.z);
            }
            function w133(l1201) {
                if (!l1201)
                    return;
                const m1201 = l1201.children;
                if (!m1201)
                    return;
                const n1201 = m1201.length;
                if (n1201) {
                    l1201._setChildren(m1201);
                    for (let o1201 = 0; o1201 < n1201; ++o1201)
                        w133(m1201[o1201]);
                }
            }
            function x133() { }
            s143.easing = j153, x133.prototype.once = function (i1201, j1201, k1201) {
                return this.on(i1201, j1201, k1201, !0);
            }, x133.prototype.targetOff = function (h1201) {
                this.removeAll(h1201);
            }, g125("jsbUtils", Object.freeze({
                __proto__: null,
                syncNodeValues: v133,
                updateChildrenForDeserialize: w133,
                ExtraEventMethods: x133
            }));
            const l157 = g125("garbageCollectionManager", new class {
                constructor() {
                    this._finalizationRegistry = null, this._gcObjects = new WeakMap();
                }
                registerGCObject(g1201) {
                    return g1201;
                }
                init() { }
                finalizationRegistryCallback(e1201) {
                    const f1201 = this._gcObjects.get(e1201);
                    f1201 && (this._gcObjects.delete(e1201), f1201.destroy()), this._finalizationRegistry.unregister(e1201);
                }
                destroy() { }
            }());
            class m157 {
                constructor() {
                    return l157.registerGCObject(this);
                }
                destroy() { }
            }
            function y133(b1201, c1201) {
                for (const d1201 of c1201)
                    Array.isArray(d1201) ? y133(b1201, d1201) : b1201.push(d1201);
            }
            function z133(z1200) {
                const a1201 = [];
                return y133(a1201, z1200), a1201.join("");
            }
            function a134(t1200, u1200) {
                u1200.forEach(w1200 => {
                    Object.getOwnPropertyNames(w1200.prototype).forEach(y1200 => {
                        "constructor" !== y1200 && Object.defineProperty(t1200.prototype, y1200, Object.getOwnPropertyDescriptor(w1200.prototype, y1200));
                    });
                });
            }
            g125("GCObject", m157), s143.math = b148, s143.geometry = u155;
            const n157 = (p1200, q1200, r1200) => {
                for (let s1200 = 0; s1200 < q1200.length; ++s1200)
                    p1200.length <= s1200 && p1200.push(new r1200()), p1200[s1200].copy(q1200[s1200]);
                p1200.length = q1200.length;
            };
            let o157, p157, q157, r157, s157, t157, u157, v157, w157, x157, y157, z157, a158, b158, c158, d158, e158, f158, g158, h158, i158, j158, k158, l158, m158, n158, o158, p158, q158, r158, s158, t158, u158, v158, w158, x158, y158, z158, a159, b159, c159, d159, e159, f159, g159;
            !function (o1200) {
                o1200[o1200.UNKNOWN = 0] = "UNKNOWN", o1200[o1200.SWAPCHAIN = 1] = "SWAPCHAIN", o1200[o1200.BUFFER = 2] = "BUFFER", o1200[o1200.TEXTURE = 3] = "TEXTURE", o1200[o1200.RENDER_PASS = 4] = "RENDER_PASS", o1200[o1200.FRAMEBUFFER = 5] = "FRAMEBUFFER", o1200[o1200.SAMPLER = 6] = "SAMPLER", o1200[o1200.SHADER = 7] = "SHADER", o1200[o1200.DESCRIPTOR_SET_LAYOUT = 8] = "DESCRIPTOR_SET_LAYOUT", o1200[o1200.PIPELINE_LAYOUT = 9] = "PIPELINE_LAYOUT", o1200[o1200.PIPELINE_STATE = 10] = "PIPELINE_STATE", o1200[o1200.DESCRIPTOR_SET = 11] = "DESCRIPTOR_SET", o1200[o1200.INPUT_ASSEMBLER = 12] = "INPUT_ASSEMBLER", o1200[o1200.COMMAND_BUFFER = 13] = "COMMAND_BUFFER", o1200[o1200.QUEUE = 14] = "QUEUE", o1200[o1200.QUERY_POOL = 15] = "QUERY_POOL", o1200[o1200.GLOBAL_BARRIER = 16] = "GLOBAL_BARRIER", o1200[o1200.TEXTURE_BARRIER = 17] = "TEXTURE_BARRIER", o1200[o1200.BUFFER_BARRIER = 18] = "BUFFER_BARRIER", o1200[o1200.COUNT = 19] = "COUNT";
            }(o157 || (o157 = {})), function (n1200) {
                n1200[n1200.UNREADY = 0] = "UNREADY", n1200[n1200.FAILED = 1] = "FAILED", n1200[n1200.SUCCESS = 2] = "SUCCESS";
            }(p157 || (p157 = {})), function (m1200) {
                m1200[m1200.UNKNOWN = 0] = "UNKNOWN", m1200[m1200.GLES2 = 1] = "GLES2", m1200[m1200.GLES3 = 2] = "GLES3", m1200[m1200.METAL = 3] = "METAL", m1200[m1200.VULKAN = 4] = "VULKAN", m1200[m1200.NVN = 5] = "NVN", m1200[m1200.WEBGL = 6] = "WEBGL", m1200[m1200.WEBGL2 = 7] = "WEBGL2", m1200[m1200.WEBGPU = 8] = "WEBGPU";
            }(q157 || (q157 = {})), function (l1200) {
                l1200[l1200.IDENTITY = 0] = "IDENTITY", l1200[l1200.ROTATE_90 = 1] = "ROTATE_90", l1200[l1200.ROTATE_180 = 2] = "ROTATE_180", l1200[l1200.ROTATE_270 = 3] = "ROTATE_270";
            }(r157 || (r157 = {})), function (k1200) {
                k1200[k1200.ELEMENT_INDEX_UINT = 0] = "ELEMENT_INDEX_UINT", k1200[k1200.INSTANCED_ARRAYS = 1] = "INSTANCED_ARRAYS", k1200[k1200.MULTIPLE_RENDER_TARGETS = 2] = "MULTIPLE_RENDER_TARGETS", k1200[k1200.BLEND_MINMAX = 3] = "BLEND_MINMAX", k1200[k1200.COMPUTE_SHADER = 4] = "COMPUTE_SHADER", k1200[k1200.INPUT_ATTACHMENT_BENEFIT = 5] = "INPUT_ATTACHMENT_BENEFIT", k1200[k1200.SUBPASS_COLOR_INPUT = 6] = "SUBPASS_COLOR_INPUT", k1200[k1200.SUBPASS_DEPTH_STENCIL_INPUT = 7] = "SUBPASS_DEPTH_STENCIL_INPUT", k1200[k1200.RASTERIZATION_ORDER_COHERENT = 8] = "RASTERIZATION_ORDER_COHERENT", k1200[k1200.MULTI_SAMPLE_RESOLVE_DEPTH_STENCIL = 9] = "MULTI_SAMPLE_RESOLVE_DEPTH_STENCIL", k1200[k1200.COUNT = 10] = "COUNT";
            }(s157 || (s157 = {})), function (j1200) {
                j1200[j1200.UNKNOWN = 0] = "UNKNOWN", j1200[j1200.A8 = 1] = "A8", j1200[j1200.L8 = 2] = "L8", j1200[j1200.LA8 = 3] = "LA8", j1200[j1200.R8 = 4] = "R8", j1200[j1200.R8SN = 5] = "R8SN", j1200[j1200.R8UI = 6] = "R8UI", j1200[j1200.R8I = 7] = "R8I", j1200[j1200.R16F = 8] = "R16F", j1200[j1200.R16UI = 9] = "R16UI", j1200[j1200.R16I = 10] = "R16I", j1200[j1200.R32F = 11] = "R32F", j1200[j1200.R32UI = 12] = "R32UI", j1200[j1200.R32I = 13] = "R32I", j1200[j1200.RG8 = 14] = "RG8", j1200[j1200.RG8SN = 15] = "RG8SN", j1200[j1200.RG8UI = 16] = "RG8UI", j1200[j1200.RG8I = 17] = "RG8I", j1200[j1200.RG16F = 18] = "RG16F", j1200[j1200.RG16UI = 19] = "RG16UI", j1200[j1200.RG16I = 20] = "RG16I", j1200[j1200.RG32F = 21] = "RG32F", j1200[j1200.RG32UI = 22] = "RG32UI", j1200[j1200.RG32I = 23] = "RG32I", j1200[j1200.RGB8 = 24] = "RGB8", j1200[j1200.SRGB8 = 25] = "SRGB8", j1200[j1200.RGB8SN = 26] = "RGB8SN", j1200[j1200.RGB8UI = 27] = "RGB8UI", j1200[j1200.RGB8I = 28] = "RGB8I", j1200[j1200.RGB16F = 29] = "RGB16F", j1200[j1200.RGB16UI = 30] = "RGB16UI", j1200[j1200.RGB16I = 31] = "RGB16I", j1200[j1200.RGB32F = 32] = "RGB32F", j1200[j1200.RGB32UI = 33] = "RGB32UI", j1200[j1200.RGB32I = 34] = "RGB32I", j1200[j1200.RGBA8 = 35] = "RGBA8", j1200[j1200.BGRA8 = 36] = "BGRA8", j1200[j1200.SRGB8_A8 = 37] = "SRGB8_A8", j1200[j1200.RGBA8SN = 38] = "RGBA8SN", j1200[j1200.RGBA8UI = 39] = "RGBA8UI", j1200[j1200.RGBA8I = 40] = "RGBA8I", j1200[j1200.RGBA16F = 41] = "RGBA16F", j1200[j1200.RGBA16UI = 42] = "RGBA16UI", j1200[j1200.RGBA16I = 43] = "RGBA16I", j1200[j1200.RGBA32F = 44] = "RGBA32F", j1200[j1200.RGBA32UI = 45] = "RGBA32UI", j1200[j1200.RGBA32I = 46] = "RGBA32I", j1200[j1200.R5G6B5 = 47] = "R5G6B5", j1200[j1200.R11G11B10F = 48] = "R11G11B10F", j1200[j1200.RGB5A1 = 49] = "RGB5A1", j1200[j1200.RGBA4 = 50] = "RGBA4", j1200[j1200.RGB10A2 = 51] = "RGB10A2", j1200[j1200.RGB10A2UI = 52] = "RGB10A2UI", j1200[j1200.RGB9E5 = 53] = "RGB9E5", j1200[j1200.DEPTH = 54] = "DEPTH", j1200[j1200.DEPTH_STENCIL = 55] = "DEPTH_STENCIL", j1200[j1200.BC1 = 56] = "BC1", j1200[j1200.BC1_ALPHA = 57] = "BC1_ALPHA", j1200[j1200.BC1_SRGB = 58] = "BC1_SRGB", j1200[j1200.BC1_SRGB_ALPHA = 59] = "BC1_SRGB_ALPHA", j1200[j1200.BC2 = 60] = "BC2", j1200[j1200.BC2_SRGB = 61] = "BC2_SRGB", j1200[j1200.BC3 = 62] = "BC3", j1200[j1200.BC3_SRGB = 63] = "BC3_SRGB", j1200[j1200.BC4 = 64] = "BC4", j1200[j1200.BC4_SNORM = 65] = "BC4_SNORM", j1200[j1200.BC5 = 66] = "BC5", j1200[j1200.BC5_SNORM = 67] = "BC5_SNORM", j1200[j1200.BC6H_UF16 = 68] = "BC6H_UF16", j1200[j1200.BC6H_SF16 = 69] = "BC6H_SF16", j1200[j1200.BC7 = 70] = "BC7", j1200[j1200.BC7_SRGB = 71] = "BC7_SRGB", j1200[j1200.ETC_RGB8 = 72] = "ETC_RGB8", j1200[j1200.ETC2_RGB8 = 73] = "ETC2_RGB8", j1200[j1200.ETC2_SRGB8 = 74] = "ETC2_SRGB8", j1200[j1200.ETC2_RGB8_A1 = 75] = "ETC2_RGB8_A1", j1200[j1200.ETC2_SRGB8_A1 = 76] = "ETC2_SRGB8_A1", j1200[j1200.ETC2_RGBA8 = 77] = "ETC2_RGBA8", j1200[j1200.ETC2_SRGB8_A8 = 78] = "ETC2_SRGB8_A8", j1200[j1200.EAC_R11 = 79] = "EAC_R11", j1200[j1200.EAC_R11SN = 80] = "EAC_R11SN", j1200[j1200.EAC_RG11 = 81] = "EAC_RG11", j1200[j1200.EAC_RG11SN = 82] = "EAC_RG11SN", j1200[j1200.PVRTC_RGB2 = 83] = "PVRTC_RGB2", j1200[j1200.PVRTC_RGBA2 = 84] = "PVRTC_RGBA2", j1200[j1200.PVRTC_RGB4 = 85] = "PVRTC_RGB4", j1200[j1200.PVRTC_RGBA4 = 86] = "PVRTC_RGBA4", j1200[j1200.PVRTC2_2BPP = 87] = "PVRTC2_2BPP", j1200[j1200.PVRTC2_4BPP = 88] = "PVRTC2_4BPP", j1200[j1200.ASTC_RGBA_4X4 = 89] = "ASTC_RGBA_4X4", j1200[j1200.ASTC_RGBA_5X4 = 90] = "ASTC_RGBA_5X4", j1200[j1200.ASTC_RGBA_5X5 = 91] = "ASTC_RGBA_5X5", j1200[j1200.ASTC_RGBA_6X5 = 92] = "ASTC_RGBA_6X5", j1200[j1200.ASTC_RGBA_6X6 = 93] = "ASTC_RGBA_6X6", j1200[j1200.ASTC_RGBA_8X5 = 94] = "ASTC_RGBA_8X5", j1200[j1200.ASTC_RGBA_8X6 = 95] = "ASTC_RGBA_8X6", j1200[j1200.ASTC_RGBA_8X8 = 96] = "ASTC_RGBA_8X8", j1200[j1200.ASTC_RGBA_10X5 = 97] = "ASTC_RGBA_10X5", j1200[j1200.ASTC_RGBA_10X6 = 98] = "ASTC_RGBA_10X6", j1200[j1200.ASTC_RGBA_10X8 = 99] = "ASTC_RGBA_10X8", j1200[j1200.ASTC_RGBA_10X10 = 100] = "ASTC_RGBA_10X10", j1200[j1200.ASTC_RGBA_12X10 = 101] = "ASTC_RGBA_12X10", j1200[j1200.ASTC_RGBA_12X12 = 102] = "ASTC_RGBA_12X12", j1200[j1200.ASTC_SRGBA_4X4 = 103] = "ASTC_SRGBA_4X4", j1200[j1200.ASTC_SRGBA_5X4 = 104] = "ASTC_SRGBA_5X4", j1200[j1200.ASTC_SRGBA_5X5 = 105] = "ASTC_SRGBA_5X5", j1200[j1200.ASTC_SRGBA_6X5 = 106] = "ASTC_SRGBA_6X5", j1200[j1200.ASTC_SRGBA_6X6 = 107] = "ASTC_SRGBA_6X6", j1200[j1200.ASTC_SRGBA_8X5 = 108] = "ASTC_SRGBA_8X5", j1200[j1200.ASTC_SRGBA_8X6 = 109] = "ASTC_SRGBA_8X6", j1200[j1200.ASTC_SRGBA_8X8 = 110] = "ASTC_SRGBA_8X8", j1200[j1200.ASTC_SRGBA_10X5 = 111] = "ASTC_SRGBA_10X5", j1200[j1200.ASTC_SRGBA_10X6 = 112] = "ASTC_SRGBA_10X6", j1200[j1200.ASTC_SRGBA_10X8 = 113] = "ASTC_SRGBA_10X8", j1200[j1200.ASTC_SRGBA_10X10 = 114] = "ASTC_SRGBA_10X10", j1200[j1200.ASTC_SRGBA_12X10 = 115] = "ASTC_SRGBA_12X10", j1200[j1200.ASTC_SRGBA_12X12 = 116] = "ASTC_SRGBA_12X12", j1200[j1200.COUNT = 117] = "COUNT";
            }(t157 || (t157 = {})), function (i1200) {
                i1200[i1200.NONE = 0] = "NONE", i1200[i1200.UNORM = 1] = "UNORM", i1200[i1200.SNORM = 2] = "SNORM", i1200[i1200.UINT = 3] = "UINT", i1200[i1200.INT = 4] = "INT", i1200[i1200.UFLOAT = 5] = "UFLOAT", i1200[i1200.FLOAT = 6] = "FLOAT";
            }(u157 || (u157 = {})), function (h1200) {
                h1200[h1200.UNKNOWN = 0] = "UNKNOWN", h1200[h1200.BOOL = 1] = "BOOL", h1200[h1200.BOOL2 = 2] = "BOOL2", h1200[h1200.BOOL3 = 3] = "BOOL3", h1200[h1200.BOOL4 = 4] = "BOOL4", h1200[h1200.INT = 5] = "INT", h1200[h1200.INT2 = 6] = "INT2", h1200[h1200.INT3 = 7] = "INT3", h1200[h1200.INT4 = 8] = "INT4", h1200[h1200.UINT = 9] = "UINT", h1200[h1200.UINT2 = 10] = "UINT2", h1200[h1200.UINT3 = 11] = "UINT3", h1200[h1200.UINT4 = 12] = "UINT4", h1200[h1200.FLOAT = 13] = "FLOAT", h1200[h1200.FLOAT2 = 14] = "FLOAT2", h1200[h1200.FLOAT3 = 15] = "FLOAT3", h1200[h1200.FLOAT4 = 16] = "FLOAT4", h1200[h1200.MAT2 = 17] = "MAT2", h1200[h1200.MAT2X3 = 18] = "MAT2X3", h1200[h1200.MAT2X4 = 19] = "MAT2X4", h1200[h1200.MAT3X2 = 20] = "MAT3X2", h1200[h1200.MAT3 = 21] = "MAT3", h1200[h1200.MAT3X4 = 22] = "MAT3X4", h1200[h1200.MAT4X2 = 23] = "MAT4X2", h1200[h1200.MAT4X3 = 24] = "MAT4X3", h1200[h1200.MAT4 = 25] = "MAT4", h1200[h1200.SAMPLER1D = 26] = "SAMPLER1D", h1200[h1200.SAMPLER1D_ARRAY = 27] = "SAMPLER1D_ARRAY", h1200[h1200.SAMPLER2D = 28] = "SAMPLER2D", h1200[h1200.SAMPLER2D_ARRAY = 29] = "SAMPLER2D_ARRAY", h1200[h1200.SAMPLER3D = 30] = "SAMPLER3D", h1200[h1200.SAMPLER_CUBE = 31] = "SAMPLER_CUBE", h1200[h1200.SAMPLER = 32] = "SAMPLER", h1200[h1200.TEXTURE1D = 33] = "TEXTURE1D", h1200[h1200.TEXTURE1D_ARRAY = 34] = "TEXTURE1D_ARRAY", h1200[h1200.TEXTURE2D = 35] = "TEXTURE2D", h1200[h1200.TEXTURE2D_ARRAY = 36] = "TEXTURE2D_ARRAY", h1200[h1200.TEXTURE3D = 37] = "TEXTURE3D", h1200[h1200.TEXTURE_CUBE = 38] = "TEXTURE_CUBE", h1200[h1200.IMAGE1D = 39] = "IMAGE1D", h1200[h1200.IMAGE1D_ARRAY = 40] = "IMAGE1D_ARRAY", h1200[h1200.IMAGE2D = 41] = "IMAGE2D", h1200[h1200.IMAGE2D_ARRAY = 42] = "IMAGE2D_ARRAY", h1200[h1200.IMAGE3D = 43] = "IMAGE3D", h1200[h1200.IMAGE_CUBE = 44] = "IMAGE_CUBE", h1200[h1200.SUBPASS_INPUT = 45] = "SUBPASS_INPUT", h1200[h1200.COUNT = 46] = "COUNT";
            }(v157 || (v157 = {})), function (g1200) {
                g1200[g1200.NONE = 0] = "NONE", g1200[g1200.TRANSFER_SRC = 1] = "TRANSFER_SRC", g1200[g1200.TRANSFER_DST = 2] = "TRANSFER_DST", g1200[g1200.INDEX = 4] = "INDEX", g1200[g1200.VERTEX = 8] = "VERTEX", g1200[g1200.UNIFORM = 16] = "UNIFORM", g1200[g1200.STORAGE = 32] = "STORAGE", g1200[g1200.INDIRECT = 64] = "INDIRECT";
            }(w157 || (w157 = {})), function (f1200) {
                f1200[f1200.NONE = 0] = "NONE";
            }(x157 || (x157 = {})), function (e1200) {
                e1200[e1200.NONE = 0] = "NONE", e1200[e1200.READ_ONLY = 1] = "READ_ONLY", e1200[e1200.WRITE_ONLY = 2] = "WRITE_ONLY", e1200[e1200.READ_WRITE = 3] = "READ_WRITE";
            }(y157 || (y157 = {})), function (d1200) {
                d1200[d1200.NONE = 0] = "NONE", d1200[d1200.DEVICE = 1] = "DEVICE", d1200[d1200.HOST = 2] = "HOST";
            }(z157 || (z157 = {})), function (c1200) {
                c1200[c1200.TEX1D = 0] = "TEX1D", c1200[c1200.TEX2D = 1] = "TEX2D", c1200[c1200.TEX3D = 2] = "TEX3D", c1200[c1200.CUBE = 3] = "CUBE", c1200[c1200.TEX1D_ARRAY = 4] = "TEX1D_ARRAY", c1200[c1200.TEX2D_ARRAY = 5] = "TEX2D_ARRAY";
            }(a158 || (a158 = {})), function (b1200) {
                b1200[b1200.NONE = 0] = "NONE", b1200[b1200.TRANSFER_SRC = 1] = "TRANSFER_SRC", b1200[b1200.TRANSFER_DST = 2] = "TRANSFER_DST", b1200[b1200.SAMPLED = 4] = "SAMPLED", b1200[b1200.STORAGE = 8] = "STORAGE", b1200[b1200.COLOR_ATTACHMENT = 16] = "COLOR_ATTACHMENT", b1200[b1200.DEPTH_STENCIL_ATTACHMENT = 32] = "DEPTH_STENCIL_ATTACHMENT", b1200[b1200.INPUT_ATTACHMENT = 64] = "INPUT_ATTACHMENT";
            }(b158 || (b158 = {})), function (a1200) {
                a1200[a1200.NONE = 0] = "NONE", a1200[a1200.GEN_MIPMAP = 1] = "GEN_MIPMAP", a1200[a1200.GENERAL_LAYOUT = 2] = "GENERAL_LAYOUT", a1200[a1200.EXTERNAL_OES = 4] = "EXTERNAL_OES", a1200[a1200.EXTERNAL_NORMAL = 8] = "EXTERNAL_NORMAL", a1200[a1200.LAZILY_ALLOCATED = 16] = "LAZILY_ALLOCATED", a1200[a1200.MUTABLE_VIEW_FORMAT = 64] = "MUTABLE_VIEW_FORMAT", a1200[a1200.MUTABLE_STORAGE = 128] = "MUTABLE_STORAGE";
            }(c158 || (c158 = {})), function (z1199) {
                z1199[z1199.NONE = 0] = "NONE", z1199[z1199.RENDER_TARGET = 1] = "RENDER_TARGET", z1199[z1199.SAMPLED_TEXTURE = 2] = "SAMPLED_TEXTURE", z1199[z1199.LINEAR_FILTER = 4] = "LINEAR_FILTER", z1199[z1199.STORAGE_TEXTURE = 8] = "STORAGE_TEXTURE", z1199[z1199.VERTEX_ATTRIBUTE = 16] = "VERTEX_ATTRIBUTE";
            }(d158 || (d158 = {})), function (y1199) {
                y1199[y1199.X1 = 1] = "X1", y1199[y1199.X2 = 2] = "X2", y1199[y1199.X4 = 4] = "X4", y1199[y1199.X8 = 8] = "X8", y1199[y1199.X16 = 16] = "X16", y1199[y1199.X32 = 32] = "X32", y1199[y1199.X64 = 64] = "X64";
            }(e158 || (e158 = {})), function (x1199) {
                x1199[x1199.OFF = 0] = "OFF", x1199[x1199.ON = 1] = "ON", x1199[x1199.RELAXED = 2] = "RELAXED", x1199[x1199.MAILBOX = 3] = "MAILBOX", x1199[x1199.HALF = 4] = "HALF";
            }(f158 || (f158 = {})), function (w1199) {
                w1199[w1199.NONE = 0] = "NONE", w1199[w1199.POINT = 1] = "POINT", w1199[w1199.LINEAR = 2] = "LINEAR", w1199[w1199.ANISOTROPIC = 3] = "ANISOTROPIC";
            }(g158 || (g158 = {})), function (v1199) {
                v1199[v1199.WRAP = 0] = "WRAP", v1199[v1199.MIRROR = 1] = "MIRROR", v1199[v1199.CLAMP = 2] = "CLAMP", v1199[v1199.BORDER = 3] = "BORDER";
            }(h158 || (h158 = {})), function (u1199) {
                u1199[u1199.NEVER = 0] = "NEVER", u1199[u1199.LESS = 1] = "LESS", u1199[u1199.EQUAL = 2] = "EQUAL", u1199[u1199.LESS_EQUAL = 3] = "LESS_EQUAL", u1199[u1199.GREATER = 4] = "GREATER", u1199[u1199.NOT_EQUAL = 5] = "NOT_EQUAL", u1199[u1199.GREATER_EQUAL = 6] = "GREATER_EQUAL", u1199[u1199.ALWAYS = 7] = "ALWAYS";
            }(i158 || (i158 = {})), function (t1199) {
                t1199[t1199.ZERO = 0] = "ZERO", t1199[t1199.KEEP = 1] = "KEEP", t1199[t1199.REPLACE = 2] = "REPLACE", t1199[t1199.INCR = 3] = "INCR", t1199[t1199.DECR = 4] = "DECR", t1199[t1199.INVERT = 5] = "INVERT", t1199[t1199.INCR_WRAP = 6] = "INCR_WRAP", t1199[t1199.DECR_WRAP = 7] = "DECR_WRAP";
            }(j158 || (j158 = {})), function (s1199) {
                s1199[s1199.ZERO = 0] = "ZERO", s1199[s1199.ONE = 1] = "ONE", s1199[s1199.SRC_ALPHA = 2] = "SRC_ALPHA", s1199[s1199.DST_ALPHA = 3] = "DST_ALPHA", s1199[s1199.ONE_MINUS_SRC_ALPHA = 4] = "ONE_MINUS_SRC_ALPHA", s1199[s1199.ONE_MINUS_DST_ALPHA = 5] = "ONE_MINUS_DST_ALPHA", s1199[s1199.SRC_COLOR = 6] = "SRC_COLOR", s1199[s1199.DST_COLOR = 7] = "DST_COLOR", s1199[s1199.ONE_MINUS_SRC_COLOR = 8] = "ONE_MINUS_SRC_COLOR", s1199[s1199.ONE_MINUS_DST_COLOR = 9] = "ONE_MINUS_DST_COLOR", s1199[s1199.SRC_ALPHA_SATURATE = 10] = "SRC_ALPHA_SATURATE", s1199[s1199.CONSTANT_COLOR = 11] = "CONSTANT_COLOR", s1199[s1199.ONE_MINUS_CONSTANT_COLOR = 12] = "ONE_MINUS_CONSTANT_COLOR", s1199[s1199.CONSTANT_ALPHA = 13] = "CONSTANT_ALPHA", s1199[s1199.ONE_MINUS_CONSTANT_ALPHA = 14] = "ONE_MINUS_CONSTANT_ALPHA";
            }(k158 || (k158 = {})), function (r1199) {
                r1199[r1199.ADD = 0] = "ADD", r1199[r1199.SUB = 1] = "SUB", r1199[r1199.REV_SUB = 2] = "REV_SUB", r1199[r1199.MIN = 3] = "MIN", r1199[r1199.MAX = 4] = "MAX";
            }(l158 || (l158 = {})), function (q1199) {
                q1199[q1199.NONE = 0] = "NONE", q1199[q1199.R = 1] = "R", q1199[q1199.G = 2] = "G", q1199[q1199.B = 4] = "B", q1199[q1199.A = 8] = "A", q1199[q1199.ALL = 15] = "ALL";
            }(m158 || (m158 = {})), function (p1199) {
                p1199[p1199.NONE = 0] = "NONE", p1199[p1199.VERTEX = 1] = "VERTEX", p1199[p1199.CONTROL = 2] = "CONTROL", p1199[p1199.EVALUATION = 4] = "EVALUATION", p1199[p1199.GEOMETRY = 8] = "GEOMETRY", p1199[p1199.FRAGMENT = 16] = "FRAGMENT", p1199[p1199.COMPUTE = 32] = "COMPUTE", p1199[p1199.ALL = 63] = "ALL";
            }(n158 || (n158 = {})), function (o1199) {
                o1199[o1199.LOAD = 0] = "LOAD", o1199[o1199.CLEAR = 1] = "CLEAR", o1199[o1199.DISCARD = 2] = "DISCARD";
            }(o158 || (o158 = {})), function (n1199) {
                n1199[n1199.STORE = 0] = "STORE", n1199[n1199.DISCARD = 1] = "DISCARD";
            }(p158 || (p158 = {})), function (m1199) {
                m1199[m1199.NONE = 0] = "NONE", m1199[m1199.INDIRECT_BUFFER = 1] = "INDIRECT_BUFFER", m1199[m1199.INDEX_BUFFER = 2] = "INDEX_BUFFER", m1199[m1199.VERTEX_BUFFER = 4] = "VERTEX_BUFFER", m1199[m1199.VERTEX_SHADER_READ_UNIFORM_BUFFER = 8] = "VERTEX_SHADER_READ_UNIFORM_BUFFER", m1199[m1199.VERTEX_SHADER_READ_TEXTURE = 16] = "VERTEX_SHADER_READ_TEXTURE", m1199[m1199.VERTEX_SHADER_READ_OTHER = 32] = "VERTEX_SHADER_READ_OTHER", m1199[m1199.FRAGMENT_SHADER_READ_UNIFORM_BUFFER = 64] = "FRAGMENT_SHADER_READ_UNIFORM_BUFFER", m1199[m1199.FRAGMENT_SHADER_READ_TEXTURE = 128] = "FRAGMENT_SHADER_READ_TEXTURE", m1199[m1199.FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT = 256] = "FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT", m1199[m1199.FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT = 512] = "FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT", m1199[m1199.FRAGMENT_SHADER_READ_OTHER = 1024] = "FRAGMENT_SHADER_READ_OTHER", m1199[m1199.COLOR_ATTACHMENT_READ = 2048] = "COLOR_ATTACHMENT_READ", m1199[m1199.DEPTH_STENCIL_ATTACHMENT_READ = 4096] = "DEPTH_STENCIL_ATTACHMENT_READ", m1199[m1199.COMPUTE_SHADER_READ_UNIFORM_BUFFER = 8192] = "COMPUTE_SHADER_READ_UNIFORM_BUFFER", m1199[m1199.COMPUTE_SHADER_READ_TEXTURE = 16384] = "COMPUTE_SHADER_READ_TEXTURE", m1199[m1199.COMPUTE_SHADER_READ_OTHER = 32768] = "COMPUTE_SHADER_READ_OTHER", m1199[m1199.TRANSFER_READ = 65536] = "TRANSFER_READ", m1199[m1199.HOST_READ = 131072] = "HOST_READ", m1199[m1199.PRESENT = 262144] = "PRESENT", m1199[m1199.VERTEX_SHADER_WRITE = 524288] = "VERTEX_SHADER_WRITE", m1199[m1199.FRAGMENT_SHADER_WRITE = 1048576] = "FRAGMENT_SHADER_WRITE", m1199[m1199.COLOR_ATTACHMENT_WRITE = 2097152] = "COLOR_ATTACHMENT_WRITE", m1199[m1199.DEPTH_STENCIL_ATTACHMENT_WRITE = 4194304] = "DEPTH_STENCIL_ATTACHMENT_WRITE", m1199[m1199.COMPUTE_SHADER_WRITE = 8388608] = "COMPUTE_SHADER_WRITE", m1199[m1199.TRANSFER_WRITE = 16777216] = "TRANSFER_WRITE", m1199[m1199.HOST_PREINITIALIZED = 33554432] = "HOST_PREINITIALIZED", m1199[m1199.HOST_WRITE = 67108864] = "HOST_WRITE";
            }(q158 || (q158 = {})), function (l1199) {
                l1199[l1199.NONE = 0] = "NONE", l1199[l1199.SAMPLE_ZERO = 1] = "SAMPLE_ZERO", l1199[l1199.AVERAGE = 2] = "AVERAGE", l1199[l1199.MIN = 3] = "MIN", l1199[l1199.MAX = 4] = "MAX";
            }(r158 || (r158 = {})), function (k1199) {
                k1199[k1199.GRAPHICS = 0] = "GRAPHICS", k1199[k1199.COMPUTE = 1] = "COMPUTE", k1199[k1199.RAY_TRACING = 2] = "RAY_TRACING";
            }(s158 || (s158 = {})), function (j1199) {
                j1199[j1199.POINT_LIST = 0] = "POINT_LIST", j1199[j1199.LINE_LIST = 1] = "LINE_LIST", j1199[j1199.LINE_STRIP = 2] = "LINE_STRIP", j1199[j1199.LINE_LOOP = 3] = "LINE_LOOP", j1199[j1199.LINE_LIST_ADJACENCY = 4] = "LINE_LIST_ADJACENCY", j1199[j1199.LINE_STRIP_ADJACENCY = 5] = "LINE_STRIP_ADJACENCY", j1199[j1199.ISO_LINE_LIST = 6] = "ISO_LINE_LIST", j1199[j1199.TRIANGLE_LIST = 7] = "TRIANGLE_LIST", j1199[j1199.TRIANGLE_STRIP = 8] = "TRIANGLE_STRIP", j1199[j1199.TRIANGLE_FAN = 9] = "TRIANGLE_FAN", j1199[j1199.TRIANGLE_LIST_ADJACENCY = 10] = "TRIANGLE_LIST_ADJACENCY", j1199[j1199.TRIANGLE_STRIP_ADJACENCY = 11] = "TRIANGLE_STRIP_ADJACENCY", j1199[j1199.TRIANGLE_PATCH_ADJACENCY = 12] = "TRIANGLE_PATCH_ADJACENCY", j1199[j1199.QUAD_PATCH_LIST = 13] = "QUAD_PATCH_LIST";
            }(t158 || (t158 = {})), function (i1199) {
                i1199[i1199.FILL = 0] = "FILL", i1199[i1199.POINT = 1] = "POINT", i1199[i1199.LINE = 2] = "LINE";
            }(u158 || (u158 = {})), function (h1199) {
                h1199[h1199.GOURAND = 0] = "GOURAND", h1199[h1199.FLAT = 1] = "FLAT";
            }(v158 || (v158 = {})), function (g1199) {
                g1199[g1199.NONE = 0] = "NONE", g1199[g1199.FRONT = 1] = "FRONT", g1199[g1199.BACK = 2] = "BACK";
            }(w158 || (w158 = {})), function (f1199) {
                f1199[f1199.NONE = 0] = "NONE", f1199[f1199.LINE_WIDTH = 1] = "LINE_WIDTH", f1199[f1199.DEPTH_BIAS = 2] = "DEPTH_BIAS", f1199[f1199.BLEND_CONSTANTS = 4] = "BLEND_CONSTANTS", f1199[f1199.DEPTH_BOUNDS = 8] = "DEPTH_BOUNDS", f1199[f1199.STENCIL_WRITE_MASK = 16] = "STENCIL_WRITE_MASK", f1199[f1199.STENCIL_COMPARE_MASK = 32] = "STENCIL_COMPARE_MASK";
            }(x158 || (x158 = {})), function (e1199) {
                e1199[e1199.FRONT = 1] = "FRONT", e1199[e1199.BACK = 2] = "BACK", e1199[e1199.ALL = 3] = "ALL";
            }(y158 || (y158 = {})), function (d1199) {
                d1199[d1199.UNKNOWN = 0] = "UNKNOWN", d1199[d1199.UNIFORM_BUFFER = 1] = "UNIFORM_BUFFER", d1199[d1199.DYNAMIC_UNIFORM_BUFFER = 2] = "DYNAMIC_UNIFORM_BUFFER", d1199[d1199.STORAGE_BUFFER = 4] = "STORAGE_BUFFER", d1199[d1199.DYNAMIC_STORAGE_BUFFER = 8] = "DYNAMIC_STORAGE_BUFFER", d1199[d1199.SAMPLER_TEXTURE = 16] = "SAMPLER_TEXTURE", d1199[d1199.SAMPLER = 32] = "SAMPLER", d1199[d1199.TEXTURE = 64] = "TEXTURE", d1199[d1199.STORAGE_IMAGE = 128] = "STORAGE_IMAGE", d1199[d1199.INPUT_ATTACHMENT = 256] = "INPUT_ATTACHMENT";
            }(z158 || (z158 = {})), function (c1199) {
                c1199[c1199.GRAPHICS = 0] = "GRAPHICS", c1199[c1199.COMPUTE = 1] = "COMPUTE", c1199[c1199.TRANSFER = 2] = "TRANSFER";
            }(a159 || (a159 = {})), function (b1199) {
                b1199[b1199.OCCLUSION = 0] = "OCCLUSION", b1199[b1199.PIPELINE_STATISTICS = 1] = "PIPELINE_STATISTICS", b1199[b1199.TIMESTAMP = 2] = "TIMESTAMP";
            }(b159 || (b159 = {})), function (a1199) {
                a1199[a1199.PRIMARY = 0] = "PRIMARY", a1199[a1199.SECONDARY = 1] = "SECONDARY";
            }(c159 || (c159 = {})), function (z1198) {
                z1198[z1198.NONE = 0] = "NONE", z1198[z1198.COLOR = 1] = "COLOR", z1198[z1198.DEPTH = 2] = "DEPTH", z1198[z1198.STENCIL = 4] = "STENCIL", z1198[z1198.DEPTH_STENCIL = 6] = "DEPTH_STENCIL", z1198[z1198.ALL = 7] = "ALL";
            }(d159 || (d159 = {})), function (y1198) {
                y1198[y1198.FULL = 0] = "FULL", y1198[y1198.SPLIT_BEGIN = 1] = "SPLIT_BEGIN", y1198[y1198.SPLIT_END = 2] = "SPLIT_END";
            }(e159 || (e159 = {})), function (x1198) {
                x1198[x1198.RASTER = 0] = "RASTER", x1198[x1198.COMPUTE = 1] = "COMPUTE", x1198[x1198.COPY = 2] = "COPY", x1198[x1198.MOVE = 3] = "MOVE", x1198[x1198.RAYTRACE = 4] = "RAYTRACE", x1198[x1198.PRESENT = 5] = "PRESENT";
            }(f159 || (f159 = {}));
            class h159 {
                constructor(u1198 = 0, v1198 = 0, w1198 = 0) {
                    this.x = u1198, this.y = v1198, this.z = w1198;
                }
                copy(t1198) {
                    return this.x = t1198.x, this.y = t1198.y, this.z = t1198.z, this;
                }
            }
            class i159 {
                constructor(v1197 = 0, w1197 = 0, x1197 = 0, y1197 = 0, z1197 = 0, a1198 = 0, b1198 = 0, c1198 = 0, d1198 = 0, e1198 = 0, f1198 = 0, g1198 = 0, h1198 = 0, i1198 = 0, j1198 = 0, k1198 = 1, l1198 = 0, m1198 = 0, n1198 = new h159(), o1198 = new h159(), p1198 = !1, q1198 = -1, r1198 = 1, s1198 = 1) {
                    this.maxVertexAttributes = v1197, this.maxVertexUniformVectors = w1197, this.maxFragmentUniformVectors = x1197, this.maxTextureUnits = y1197, this.maxImageUnits = z1197, this.maxVertexTextureUnits = a1198, this.maxColorRenderTargets = b1198, this.maxShaderStorageBufferBindings = c1198, this.maxShaderStorageBlockSize = d1198, this.maxUniformBufferBindings = e1198, this.maxUniformBlockSize = f1198, this.maxTextureSize = g1198, this.maxCubeMapTextureSize = h1198, this.maxArrayTextureLayers = i1198, this.max3DTextureSize = j1198, this.uboOffsetAlignment = k1198, this.maxComputeSharedMemorySize = l1198, this.maxComputeWorkGroupInvocations = m1198, this.maxComputeWorkGroupSize = n1198, this.maxComputeWorkGroupCount = o1198, this.supportQuery = p1198, this.clipSpaceMinZ = q1198, this.screenSpaceSignY = r1198, this.clipSpaceSignY = s1198;
                }
                copy(u1197) {
                    return this.maxVertexAttributes = u1197.maxVertexAttributes, this.maxVertexUniformVectors = u1197.maxVertexUniformVectors, this.maxFragmentUniformVectors = u1197.maxFragmentUniformVectors, this.maxTextureUnits = u1197.maxTextureUnits, this.maxImageUnits = u1197.maxImageUnits, this.maxVertexTextureUnits = u1197.maxVertexTextureUnits, this.maxColorRenderTargets = u1197.maxColorRenderTargets, this.maxShaderStorageBufferBindings = u1197.maxShaderStorageBufferBindings, this.maxShaderStorageBlockSize = u1197.maxShaderStorageBlockSize, this.maxUniformBufferBindings = u1197.maxUniformBufferBindings, this.maxUniformBlockSize = u1197.maxUniformBlockSize, this.maxTextureSize = u1197.maxTextureSize, this.maxCubeMapTextureSize = u1197.maxCubeMapTextureSize, this.maxArrayTextureLayers = u1197.maxArrayTextureLayers, this.max3DTextureSize = u1197.max3DTextureSize, this.uboOffsetAlignment = u1197.uboOffsetAlignment, this.maxComputeSharedMemorySize = u1197.maxComputeSharedMemorySize, this.maxComputeWorkGroupInvocations = u1197.maxComputeWorkGroupInvocations, this.maxComputeWorkGroupSize.copy(u1197.maxComputeWorkGroupSize), this.maxComputeWorkGroupCount.copy(u1197.maxComputeWorkGroupCount), this.supportQuery = u1197.supportQuery, this.clipSpaceMinZ = u1197.clipSpaceMinZ, this.screenSpaceSignY = u1197.screenSpaceSignY, this.clipSpaceSignY = u1197.clipSpaceSignY, this;
                }
            }
            class j159 {
                constructor(t1197 = !0) {
                    this.enableBarrierDeduce = t1197;
                }
                copy(s1197) {
                    return this.enableBarrierDeduce = s1197.enableBarrierDeduce, this;
                }
            }
            class k159 {
                constructor(p1197 = 0, q1197 = 0, r1197 = 0) {
                    this.x = p1197, this.y = q1197, this.z = r1197;
                }
                copy(o1197) {
                    return this.x = o1197.x, this.y = o1197.y, this.z = o1197.z, this;
                }
            }
            class l159 {
                constructor(k1197 = 0, l1197 = 0, m1197 = 0, n1197 = 0) {
                    this.x = k1197, this.y = l1197, this.width = m1197, this.height = n1197;
                }
                copy(j1197) {
                    return this.x = j1197.x, this.y = j1197.y, this.width = j1197.width, this.height = j1197.height, this;
                }
            }
            class m159 {
                constructor(g1197 = 0, h1197 = 0, i1197 = 1) {
                    this.width = g1197, this.height = h1197, this.depth = i1197;
                }
                copy(f1197) {
                    return this.width = f1197.width, this.height = f1197.height, this.depth = f1197.depth, this;
                }
            }
            class n159 {
                constructor(c1197 = 0, d1197 = 0, e1197 = 1) {
                    this.mipLevel = c1197, this.baseArrayLayer = d1197, this.layerCount = e1197;
                }
                copy(b1197) {
                    return this.mipLevel = b1197.mipLevel, this.baseArrayLayer = b1197.baseArrayLayer, this.layerCount = b1197.layerCount, this;
                }
            }
            class o159 {
                constructor(x1196 = 0, y1196 = 1, z1196 = 0, a1197 = 1) {
                    this.baseMipLevel = x1196, this.levelCount = y1196, this.baseArrayLayer = z1196, this.layerCount = a1197;
                }
                copy(w1196) {
                    return this.baseMipLevel = w1196.baseMipLevel, this.levelCount = w1196.levelCount, this.baseArrayLayer = w1196.baseArrayLayer, this.layerCount = w1196.layerCount, this;
                }
            }
            class p159 {
                constructor(r1196 = new n159(), s1196 = new k159(), t1196 = new n159(), u1196 = new k159(), v1196 = new m159()) {
                    this.srcSubres = r1196, this.srcOffset = s1196, this.dstSubres = t1196, this.dstOffset = u1196, this.extent = v1196;
                }
                copy(q1196) {
                    return this.srcSubres.copy(q1196.srcSubres), this.srcOffset.copy(q1196.srcOffset), this.dstSubres.copy(q1196.dstSubres), this.dstOffset.copy(q1196.dstOffset), this.extent.copy(q1196.extent), this;
                }
            }
            class q159 {
                constructor(k1196 = new n159(), l1196 = new k159(), m1196 = new m159(), n1196 = new n159(), o1196 = new k159(), p1196 = new m159()) {
                    this.srcSubres = k1196, this.srcOffset = l1196, this.srcExtent = m1196, this.dstSubres = n1196, this.dstOffset = o1196, this.dstExtent = p1196;
                }
                copy(j1196) {
                    return this.srcSubres.copy(j1196.srcSubres), this.srcOffset.copy(j1196.srcOffset), this.srcExtent.copy(j1196.srcExtent), this.dstSubres.copy(j1196.dstSubres), this.dstOffset.copy(j1196.dstOffset), this.dstExtent.copy(j1196.dstExtent), this;
                }
            }
            class r159 {
                constructor(d1196 = 0, e1196 = 0, f1196 = 0, g1196 = new k159(), h1196 = new m159(), i1196 = new n159()) {
                    this.buffOffset = d1196, this.buffStride = e1196, this.buffTexHeight = f1196, this.texOffset = g1196, this.texExtent = h1196, this.texSubres = i1196;
                }
                copy(c1196) {
                    return this.buffOffset = c1196.buffOffset, this.buffStride = c1196.buffStride, this.buffTexHeight = c1196.buffTexHeight, this.texOffset.copy(c1196.texOffset), this.texExtent.copy(c1196.texExtent), this.texSubres.copy(c1196.texSubres), this;
                }
            }
            class s159 {
                constructor(w1195 = 0, x1195 = 0, y1195 = 0, z1195 = 0, a1196 = 0, b1196 = 1) {
                    this.left = w1195, this.top = x1195, this.width = y1195, this.height = z1195, this.minDepth = a1196, this.maxDepth = b1196;
                }
                copy(v1195) {
                    return this.left = v1195.left, this.top = v1195.top, this.width = v1195.width, this.height = v1195.height, this.minDepth = v1195.minDepth, this.maxDepth = v1195.maxDepth, this;
                }
                reset() {
                    this.left = 0, this.top = 0, this.width = 0, this.height = 0, this.minDepth = 0, this.maxDepth = 1;
                }
            }
            class t159 {
                constructor(r1195 = 0, s1195 = 0, t1195 = 0, u1195 = 0) {
                    this.x = r1195, this.y = s1195, this.z = t1195, this.w = u1195;
                }
                copy(q1195) {
                    return this.x = q1195.x, this.y = q1195.y, this.z = q1195.z, this.w = q1195.w, this;
                }
                set(m1195, n1195, o1195, p1195) {
                    return this.x = m1195, this.y = n1195, this.z = o1195, this.w = p1195, this;
                }
                reset() {
                    this.x = 0, this.y = 0, this.z = 0, this.w = 0;
                }
            }
            class u159 {
                constructor(e1195 = [0], f1195 = [0], g1195 = [0], h1195 = [0], i1195 = [0], j1195 = [0], k1195 = [0], l1195 = [0]) {
                    this.maxBlockCounts = e1195, this.maxSamplerTextureCounts = f1195, this.maxSamplerCounts = g1195, this.maxTextureCounts = h1195, this.maxBufferCounts = i1195, this.maxImageCounts = j1195, this.maxSubpassInputCounts = k1195, this.setIndices = l1195;
                }
                copy(d1195) {
                    return this.maxBlockCounts = d1195.maxBlockCounts.slice(), this.maxSamplerTextureCounts = d1195.maxSamplerTextureCounts.slice(), this.maxSamplerCounts = d1195.maxSamplerCounts.slice(), this.maxTextureCounts = d1195.maxTextureCounts.slice(), this.maxBufferCounts = d1195.maxBufferCounts.slice(), this.maxImageCounts = d1195.maxImageCounts.slice(), this.maxSubpassInputCounts = d1195.maxSubpassInputCounts.slice(), this.setIndices = d1195.setIndices.slice(), this;
                }
            }
            class v159 {
                constructor(y1194 = 0, z1194 = null, a1195 = f158.ON, b1195 = 0, c1195 = 0) {
                    this.windowId = y1194, this.windowHandle = z1194, this.vsyncMode = a1195, this.width = b1195, this.height = c1195;
                }
                copy(x1194) {
                    return this.windowId = x1194.windowId, this.windowHandle = x1194.windowHandle, this.vsyncMode = x1194.vsyncMode, this.width = x1194.width, this.height = x1194.height, this;
                }
            }
            class w159 {
                constructor(w1194 = new u159()) {
                    this.bindingMappingInfo = w1194;
                }
                copy(v1194) {
                    return this.bindingMappingInfo.copy(v1194.bindingMappingInfo), this;
                }
            }
            class x159 {
                constructor(q1194 = w157.NONE, r1194 = z157.NONE, s1194 = 0, t1194 = 1, u1194 = x157.NONE) {
                    this.usage = q1194, this.memUsage = r1194, this.size = s1194, this.stride = t1194, this.flags = u1194;
                }
                copy(p1194) {
                    return this.usage = p1194.usage, this.memUsage = p1194.memUsage, this.size = p1194.size, this.stride = p1194.stride, this.flags = p1194.flags, this;
                }
            }
            class y159 {
                constructor(m1194 = null, n1194 = 0, o1194 = 0) {
                    this.buffer = m1194, this.offset = n1194, this.range = o1194;
                }
                copy(l1194) {
                    return this.buffer = l1194.buffer, this.offset = l1194.offset, this.range = l1194.range, this;
                }
            }
            class z159 {
                constructor(e1194 = 0, f1194 = 0, g1194 = 0, h1194 = 0, i1194 = 0, j1194 = 0, k1194 = 0) {
                    this.vertexCount = e1194, this.firstVertex = f1194, this.indexCount = g1194, this.firstIndex = h1194, this.vertexOffset = i1194, this.instanceCount = j1194, this.firstInstance = k1194;
                }
                copy(d1194) {
                    return this.vertexCount = d1194.vertexCount, this.firstVertex = d1194.firstVertex, this.indexCount = d1194.indexCount, this.firstIndex = d1194.firstIndex, this.vertexOffset = d1194.vertexOffset, this.instanceCount = d1194.instanceCount, this.firstInstance = d1194.firstInstance, this;
                }
            }
            class a160 {
                constructor(y1193 = 0, z1193 = 0, a1194 = 0, b1194 = null, c1194 = 0) {
                    this.groupCountX = y1193, this.groupCountY = z1193, this.groupCountZ = a1194, this.indirectBuffer = b1194, this.indirectOffset = c1194;
                }
                copy(x1193) {
                    return this.groupCountX = x1193.groupCountX, this.groupCountY = x1193.groupCountY, this.groupCountZ = x1193.groupCountZ, this.indirectBuffer = x1193.indirectBuffer, this.indirectOffset = x1193.indirectOffset, this;
                }
            }
            class b160 {
                constructor(w1193 = []) {
                    this.drawInfos = w1193;
                }
                copy(v1193) {
                    return n157(this.drawInfos, v1193.drawInfos, z159), this;
                }
            }
            class c160 {
                constructor(k1193 = a158.TEX2D, l1193 = b158.NONE, m1193 = t157.UNKNOWN, n1193 = 0, o1193 = 0, p1193 = c158.NONE, q1193 = 1, r1193 = 1, s1193 = e158.X1, t1193 = 1, u1193 = 0) {
                    this.type = k1193, this.usage = l1193, this.format = m1193, this.width = n1193, this.height = o1193, this.flags = p1193, this.layerCount = q1193, this.levelCount = r1193, this.samples = s1193, this.depth = t1193, this.externalRes = u1193;
                }
                copy(j1193) {
                    return this.type = j1193.type, this.usage = j1193.usage, this.format = j1193.format, this.width = j1193.width, this.height = j1193.height, this.flags = j1193.flags, this.layerCount = j1193.layerCount, this.levelCount = j1193.levelCount, this.samples = j1193.samples, this.depth = j1193.depth, this.externalRes = j1193.externalRes, this;
                }
            }
            class d160 {
                constructor(c1193 = null, d1193 = a158.TEX2D, e1193 = t157.UNKNOWN, f1193 = 0, g1193 = 1, h1193 = 0, i1193 = 1) {
                    this.texture = c1193, this.type = d1193, this.format = e1193, this.baseLevel = f1193, this.levelCount = g1193, this.baseLayer = h1193, this.layerCount = i1193;
                }
                copy(b1193) {
                    return this.texture = b1193.texture, this.type = b1193.type, this.format = b1193.format, this.baseLevel = b1193.baseLevel, this.levelCount = b1193.levelCount, this.baseLayer = b1193.baseLayer, this.layerCount = b1193.layerCount, this;
                }
            }
            class e160 {
                constructor(t1192 = g158.LINEAR, u1192 = g158.LINEAR, v1192 = g158.NONE, w1192 = h158.WRAP, x1192 = h158.WRAP, y1192 = h158.WRAP, z1192 = 0, a1193 = i158.ALWAYS) {
                    this.minFilter = t1192, this.magFilter = u1192, this.mipFilter = v1192, this.addressU = w1192, this.addressV = x1192, this.addressW = y1192, this.maxAnisotropy = z1192, this.cmpFunc = a1193;
                }
                copy(s1192) {
                    return this.minFilter = s1192.minFilter, this.magFilter = s1192.magFilter, this.mipFilter = s1192.mipFilter, this.addressU = s1192.addressU, this.addressV = s1192.addressV, this.addressW = s1192.addressW, this.maxAnisotropy = s1192.maxAnisotropy, this.cmpFunc = s1192.cmpFunc, this;
                }
            }
            class f160 {
                constructor(p1192 = "", q1192 = v157.UNKNOWN, r1192 = 0) {
                    this.name = p1192, this.type = q1192, this.count = r1192;
                }
                copy(o1192) {
                    return this.name = o1192.name, this.type = o1192.type, this.count = o1192.count, this;
                }
            }
            class g160 {
                constructor(i1192 = 0, j1192 = 0, k1192 = "", l1192 = [], m1192 = 0, n1192 = 0) {
                    this.set = i1192, this.binding = j1192, this.name = k1192, this.members = l1192, this.count = m1192, this.flattened = n1192;
                }
                copy(h1192) {
                    return this.set = h1192.set, this.binding = h1192.binding, this.name = h1192.name, n157(this.members, h1192.members, f160), this.count = h1192.count, this.flattened = h1192.flattened, this;
                }
            }
            class h160 {
                constructor(b1192 = 0, c1192 = 0, d1192 = "", e1192 = v157.UNKNOWN, f1192 = 0, g1192 = 0) {
                    this.set = b1192, this.binding = c1192, this.name = d1192, this.type = e1192, this.count = f1192, this.flattened = g1192;
                }
                copy(a1192) {
                    return this.set = a1192.set, this.binding = a1192.binding, this.name = a1192.name, this.type = a1192.type, this.count = a1192.count, this.flattened = a1192.flattened, this;
                }
            }
            class i160 {
                constructor(v1191 = 0, w1191 = 0, x1191 = "", y1191 = 0, z1191 = 0) {
                    this.set = v1191, this.binding = w1191, this.name = x1191, this.count = y1191, this.flattened = z1191;
                }
                copy(u1191) {
                    return this.set = u1191.set, this.binding = u1191.binding, this.name = u1191.name, this.count = u1191.count, this.flattened = u1191.flattened, this;
                }
            }
            class j160 {
                constructor(o1191 = 0, p1191 = 0, q1191 = "", r1191 = v157.UNKNOWN, s1191 = 0, t1191 = 0) {
                    this.set = o1191, this.binding = p1191, this.name = q1191, this.type = r1191, this.count = s1191, this.flattened = t1191;
                }
                copy(n1191) {
                    return this.set = n1191.set, this.binding = n1191.binding, this.name = n1191.name, this.type = n1191.type, this.count = n1191.count, this.flattened = n1191.flattened, this;
                }
            }
            class k160 {
                constructor(g1191 = 0, h1191 = 0, i1191 = "", j1191 = v157.UNKNOWN, k1191 = 0, l1191 = y157.READ_WRITE, m1191 = 0) {
                    this.set = g1191, this.binding = h1191, this.name = i1191, this.type = j1191, this.count = k1191, this.memoryAccess = l1191, this.flattened = m1191;
                }
                copy(f1191) {
                    return this.set = f1191.set, this.binding = f1191.binding, this.name = f1191.name, this.type = f1191.type, this.count = f1191.count, this.memoryAccess = f1191.memoryAccess, this.flattened = f1191.flattened, this;
                }
            }
            class l160 {
                constructor(z1190 = 0, a1191 = 0, b1191 = "", c1191 = 0, d1191 = y157.READ_WRITE, e1191 = 0) {
                    this.set = z1190, this.binding = a1191, this.name = b1191, this.count = c1191, this.memoryAccess = d1191, this.flattened = e1191;
                }
                copy(y1190) {
                    return this.set = y1190.set, this.binding = y1190.binding, this.name = y1190.name, this.count = y1190.count, this.memoryAccess = y1190.memoryAccess, this.flattened = y1190.flattened, this;
                }
            }
            class m160 {
                constructor(t1190 = 0, u1190 = 0, v1190 = "", w1190 = 0, x1190 = 0) {
                    this.set = t1190, this.binding = u1190, this.name = v1190, this.count = w1190, this.flattened = x1190;
                }
                copy(s1190) {
                    return this.set = s1190.set, this.binding = s1190.binding, this.name = s1190.name, this.count = s1190.count, this.flattened = s1190.flattened, this;
                }
            }
            class n160 {
                constructor(q1190 = n158.NONE, r1190 = "") {
                    this.stage = q1190, this.source = r1190;
                }
                copy(p1190) {
                    return this.stage = p1190.stage, this.source = p1190.source, this;
                }
            }
            class o160 {
                constructor(j1190 = "", k1190 = t157.UNKNOWN, l1190 = !1, m1190 = 0, n1190 = !1, o1190 = 0) {
                    this.name = j1190, this.format = k1190, this.isNormalized = l1190, this.stream = m1190, this.isInstanced = n1190, this.location = o1190;
                }
                copy(i1190) {
                    return this.name = i1190.name, this.format = i1190.format, this.isNormalized = i1190.isNormalized, this.stream = i1190.stream, this.isInstanced = i1190.isInstanced, this.location = i1190.location, this;
                }
            }
            class p160 {
                constructor(y1189 = "", z1189 = [], a1190 = [], b1190 = [], c1190 = [], d1190 = [], e1190 = [], f1190 = [], g1190 = [], h1190 = []) {
                    this.name = y1189, this.stages = z1189, this.attributes = a1190, this.blocks = b1190, this.buffers = c1190, this.samplerTextures = d1190, this.samplers = e1190, this.textures = f1190, this.images = g1190, this.subpassInputs = h1190;
                }
                copy(x1189) {
                    return this.name = x1189.name, n157(this.stages, x1189.stages, n160), n157(this.attributes, x1189.attributes, o160), n157(this.blocks, x1189.blocks, g160), n157(this.buffers, x1189.buffers, l160), n157(this.samplerTextures, x1189.samplerTextures, h160), n157(this.samplers, x1189.samplers, i160), n157(this.textures, x1189.textures, j160), n157(this.images, x1189.images, k160), n157(this.subpassInputs, x1189.subpassInputs, m160), this;
                }
            }
            class q160 {
                constructor(t1189 = [], u1189 = [], v1189 = null, w1189 = null) {
                    this.attributes = t1189, this.vertexBuffers = u1189, this.indexBuffer = v1189, this.indirectBuffer = w1189;
                }
                copy(s1189) {
                    return n157(this.attributes, s1189.attributes, o160), this.vertexBuffers = s1189.vertexBuffers.slice(), this.indexBuffer = s1189.indexBuffer, this.indirectBuffer = s1189.indirectBuffer, this;
                }
            }
            class r160 {
                constructor(n1189 = t157.UNKNOWN, o1189 = e158.X1, p1189 = o158.CLEAR, q1189 = p158.STORE, r1189 = null) {
                    this.format = n1189, this.sampleCount = o1189, this.loadOp = p1189, this.storeOp = q1189, this.barrier = r1189;
                }
                copy(m1189) {
                    return this.format = m1189.format, this.sampleCount = m1189.sampleCount, this.loadOp = m1189.loadOp, this.storeOp = m1189.storeOp, this.barrier = m1189.barrier, this;
                }
            }
            class s160 {
                constructor(f1189 = t157.UNKNOWN, g1189 = e158.X1, h1189 = o158.CLEAR, i1189 = p158.STORE, j1189 = o158.CLEAR, k1189 = p158.STORE, l1189 = null) {
                    this.format = f1189, this.sampleCount = g1189, this.depthLoadOp = h1189, this.depthStoreOp = i1189, this.stencilLoadOp = j1189, this.stencilStoreOp = k1189, this.barrier = l1189;
                }
                copy(e1189) {
                    return this.format = e1189.format, this.sampleCount = e1189.sampleCount, this.depthLoadOp = e1189.depthLoadOp, this.depthStoreOp = e1189.depthStoreOp, this.stencilLoadOp = e1189.stencilLoadOp, this.stencilStoreOp = e1189.stencilStoreOp, this.barrier = e1189.barrier, this;
                }
            }
            class t160 {
                constructor(w1188 = [], x1188 = [], y1188 = [], z1188 = [], a1189 = -1, b1189 = -1, c1189 = r158.NONE, d1189 = r158.NONE) {
                    this.inputs = w1188, this.colors = x1188, this.resolves = y1188, this.preserves = z1188, this.depthStencil = a1189, this.depthStencilResolve = b1189, this.depthResolveMode = c1189, this.stencilResolveMode = d1189;
                }
                copy(v1188) {
                    return this.inputs = v1188.inputs.slice(), this.colors = v1188.colors.slice(), this.resolves = v1188.resolves.slice(), this.preserves = v1188.preserves.slice(), this.depthStencil = v1188.depthStencil, this.depthStencilResolve = v1188.depthStencilResolve, this.depthResolveMode = v1188.depthResolveMode, this.stencilResolveMode = v1188.stencilResolveMode, this;
                }
            }
            class u160 {
                constructor(q1188 = 0, r1188 = 0, s1188 = null, t1188 = [q158.NONE], u1188 = [q158.NONE]) {
                    this.srcSubpass = q1188, this.dstSubpass = r1188, this.generalBarrier = s1188, this.prevAccesses = t1188, this.nextAccesses = u1188;
                }
                copy(p1188) {
                    return this.srcSubpass = p1188.srcSubpass, this.dstSubpass = p1188.dstSubpass, this.generalBarrier = p1188.generalBarrier, this.prevAccesses = p1188.prevAccesses.slice(), this.nextAccesses = p1188.nextAccesses.slice(), this;
                }
            }
            class v160 {
                constructor(k1188 = [], l1188 = new s160(), m1188 = new s160(), n1188 = [], o1188 = []) {
                    this.colorAttachments = k1188, this.depthStencilAttachment = l1188, this.depthStencilResolveAttachment = m1188, this.subpasses = n1188, this.dependencies = o1188;
                }
                copy(j1188) {
                    return n157(this.colorAttachments, j1188.colorAttachments, r160), this.depthStencilAttachment.copy(j1188.depthStencilAttachment), this.depthStencilResolveAttachment.copy(j1188.depthStencilResolveAttachment), n157(this.subpasses, j1188.subpasses, t160), n157(this.dependencies, j1188.dependencies, u160), this;
                }
            }
            class w160 {
                constructor(g1188 = q158.NONE, h1188 = q158.NONE, i1188 = e159.FULL) {
                    this.prevAccesses = g1188, this.nextAccesses = h1188, this.type = i1188;
                }
                copy(f1188) {
                    return this.prevAccesses = f1188.prevAccesses, this.nextAccesses = f1188.nextAccesses, this.type = f1188.type, this;
                }
            }
            class x160 {
                constructor(v1187 = q158.NONE, w1187 = q158.NONE, x1187 = e159.FULL, y1187 = 0, z1187 = 1, a1188 = 0, b1188 = 1, c1188 = !1, d1188 = null, e1188 = null) {
                    this.prevAccesses = v1187, this.nextAccesses = w1187, this.type = x1187, this.baseMipLevel = y1187, this.levelCount = z1187, this.baseSlice = a1188, this.sliceCount = b1188, this.discardContents = c1188, this.srcQueue = d1188, this.dstQueue = e1188;
                }
                copy(u1187) {
                    return this.prevAccesses = u1187.prevAccesses, this.nextAccesses = u1187.nextAccesses, this.type = u1187.type, this.baseMipLevel = u1187.baseMipLevel, this.levelCount = u1187.levelCount, this.baseSlice = u1187.baseSlice, this.sliceCount = u1187.sliceCount, this.discardContents = u1187.discardContents, this.srcQueue = u1187.srcQueue, this.dstQueue = u1187.dstQueue, this;
                }
            }
            class y160 {
                constructor(m1187 = q158.NONE, n1187 = q158.NONE, o1187 = e159.FULL, p1187 = 0, q1187 = 0, r1187 = !1, s1187 = null, t1187 = null) {
                    this.prevAccesses = m1187, this.nextAccesses = n1187, this.type = o1187, this.offset = p1187, this.size = q1187, this.discardContents = r1187, this.srcQueue = s1187, this.dstQueue = t1187;
                }
                copy(l1187) {
                    return this.prevAccesses = l1187.prevAccesses, this.nextAccesses = l1187.nextAccesses, this.type = l1187.type, this.offset = l1187.offset, this.size = l1187.size, this.discardContents = l1187.discardContents, this.srcQueue = l1187.srcQueue, this.dstQueue = l1187.dstQueue, this;
                }
            }
            class z160 {
                constructor(h1187 = null, i1187 = [], j1187 = null, k1187 = null) {
                    this.renderPass = h1187, this.colorTextures = i1187, this.depthStencilTexture = j1187, this.depthStencilResolveTexture = k1187;
                }
                copy(g1187) {
                    return this.renderPass = g1187.renderPass, this.colorTextures = g1187.colorTextures.slice(), this.depthStencilTexture = g1187.depthStencilTexture, this.depthStencilResolveTexture = g1187.depthStencilResolveTexture, this;
                }
            }
            class a161 {
                constructor(b1187 = -1, c1187 = z158.UNKNOWN, d1187 = 0, e1187 = n158.NONE, f1187 = []) {
                    this.binding = b1187, this.descriptorType = c1187, this.count = d1187, this.stageFlags = e1187, this.immutableSamplers = f1187;
                }
                copy(a1187) {
                    return this.binding = a1187.binding, this.descriptorType = a1187.descriptorType, this.count = a1187.count, this.stageFlags = a1187.stageFlags, this.immutableSamplers = a1187.immutableSamplers.slice(), this;
                }
            }
            class b161 {
                constructor(z1186 = []) {
                    this.bindings = z1186;
                }
                copy(y1186) {
                    return n157(this.bindings, y1186.bindings, a161), this;
                }
                reset() {
                    this.bindings.length = 0;
                }
            }
            class c161 {
                constructor(x1186 = null) {
                    this.layout = x1186;
                }
                copy(w1186) {
                    return this.layout = w1186.layout, this;
                }
            }
            class d161 {
                constructor(v1186 = []) {
                    this.setLayouts = v1186;
                }
                copy(u1186) {
                    return this.setLayouts = u1186.setLayouts.slice(), this;
                }
            }
            class e161 {
                constructor(t1186 = []) {
                    this.attributes = t1186;
                }
                copy(s1186) {
                    return n157(this.attributes, s1186.attributes, o160), this;
                }
            }
            class f161 {
                constructor(q1186 = null, r1186 = c159.PRIMARY) {
                    this.queue = q1186, this.type = r1186;
                }
                copy(p1186) {
                    return this.queue = p1186.queue, this.type = p1186.type, this;
                }
            }
            class g161 {
                constructor(o1186 = a159.GRAPHICS) {
                    this.type = o1186;
                }
                copy(n1186) {
                    return this.type = n1186.type, this;
                }
            }
            class h161 {
                constructor(k1186 = b159.OCCLUSION, l1186 = 32767, m1186 = !0) {
                    this.type = k1186, this.maxQueryObjects = l1186, this.forceWait = m1186;
                }
                copy(j1186) {
                    return this.type = j1186.type, this.maxQueryObjects = j1186.maxQueryObjects, this.forceWait = j1186.forceWait, this;
                }
            }
            class i161 {
                constructor(b1186 = "", c1186 = 0, d1186 = 0, e1186 = u157.NONE, f1186 = !1, g1186 = !1, h1186 = !1, i1186 = !1) {
                    this.name = b1186, this.size = c1186, this.count = d1186, this.type = e1186, this.hasAlpha = f1186, this.hasDepth = g1186, this.hasStencil = h1186, this.isCompressed = i1186;
                }
            }
            class j161 {
                constructor(z1185 = 0, a1186 = 0) {
                    this.bufferSize = z1185, this.textureSize = a1186;
                }
                copy(y1185) {
                    return this.bufferSize = y1185.bufferSize, this.textureSize = y1185.textureSize, this;
                }
            }
            class k161 {
                constructor(v1185 = 0, w1185 = 0, x1185 = 0) {
                    this.writeMask = v1185, this.compareMask = w1185, this.reference = x1185;
                }
                copy(u1185) {
                    return this.writeMask = u1185.writeMask, this.compareMask = u1185.compareMask, this.reference = u1185.reference, this;
                }
            }
            class l161 {
                constructor(j1185 = new s159(), k1185 = new l159(), l1185 = new t159(), m1185 = 1, n1185 = 0, o1185 = 0, p1185 = 0, q1185 = 0, r1185 = 0, s1185 = new k161(), t1185 = new k161()) {
                    this.viewport = j1185, this.scissor = k1185, this.blendConstant = l1185, this.lineWidth = m1185, this.depthBiasConstant = n1185, this.depthBiasClamp = o1185, this.depthBiasSlope = p1185, this.depthMinBounds = q1185, this.depthMaxBounds = r1185, this.stencilStatesFront = s1185, this.stencilStatesBack = t1185;
                }
                copy(i1185) {
                    return this.viewport.copy(i1185.viewport), this.scissor.copy(i1185.scissor), this.blendConstant.copy(i1185.blendConstant), this.lineWidth = i1185.lineWidth, this.depthBiasConstant = i1185.depthBiasConstant, this.depthBiasClamp = i1185.depthBiasClamp, this.depthBiasSlope = i1185.depthBiasSlope, this.depthMinBounds = i1185.depthMinBounds, this.depthMaxBounds = i1185.depthMaxBounds, this.stencilStatesFront.copy(i1185.stencilStatesFront), this.stencilStatesBack.copy(i1185.stencilStatesBack), this;
                }
            }
            class m161 extends m157 {
                get objectType() {
                    return this._objectType;
                }
                get objectID() {
                    return this._objectID;
                }
                get typedID() {
                    return this._typedID;
                }
                constructor(h1185) {
                    super(), this._objectType = o157.UNKNOWN, this._objectID = 0, this._typedID = 0, this._objectType = h1185, this._objectID = m161._idTable[o157.UNKNOWN]++, this._typedID = m161._idTable[h1185]++;
                }
            }
            m161._idTable = Array(o157.COUNT).fill(65536), function (g1185) {
                g1185.ATTR_POSITION = "a_position", g1185.ATTR_NORMAL = "a_normal", g1185.ATTR_TANGENT = "a_tangent", g1185.ATTR_BITANGENT = "a_bitangent", g1185.ATTR_WEIGHTS = "a_weights", g1185.ATTR_JOINTS = "a_joints", g1185.ATTR_COLOR = "a_color", g1185.ATTR_COLOR1 = "a_color1", g1185.ATTR_COLOR2 = "a_color2", g1185.ATTR_TEX_COORD = "a_texCoord", g1185.ATTR_TEX_COORD1 = "a_texCoord1", g1185.ATTR_TEX_COORD2 = "a_texCoord2", g1185.ATTR_TEX_COORD3 = "a_texCoord3", g1185.ATTR_TEX_COORD4 = "a_texCoord4", g1185.ATTR_TEX_COORD5 = "a_texCoord5", g1185.ATTR_TEX_COORD6 = "a_texCoord6", g1185.ATTR_TEX_COORD7 = "a_texCoord7", g1185.ATTR_TEX_COORD8 = "a_texCoord8", g1185.ATTR_BATCH_ID = "a_batch_id", g1185.ATTR_BATCH_UV = "a_batch_uv";
            }(g159 || (g159 = {}));
            const n161 = Object.freeze([new i161("UNKNOWN", 0, 0, u157.NONE, !1, !1, !1, !1), new i161("A8", 1, 1, u157.UNORM, !0, !1, !1, !1), new i161("L8", 1, 1, u157.UNORM, !1, !1, !1, !1), new i161("LA8", 1, 2, u157.UNORM, !0, !1, !1, !1), new i161("R8", 1, 1, u157.UNORM, !1, !1, !1, !1), new i161("R8SN", 1, 1, u157.SNORM, !1, !1, !1, !1), new i161("R8UI", 1, 1, u157.UINT, !1, !1, !1, !1), new i161("R8I", 1, 1, u157.INT, !1, !1, !1, !1), new i161("R16F", 2, 1, u157.FLOAT, !1, !1, !1, !1), new i161("R16UI", 2, 1, u157.UINT, !1, !1, !1, !1), new i161("R16I", 2, 1, u157.INT, !1, !1, !1, !1), new i161("R32F", 4, 1, u157.FLOAT, !1, !1, !1, !1), new i161("R32UI", 4, 1, u157.UINT, !1, !1, !1, !1), new i161("R32I", 4, 1, u157.INT, !1, !1, !1, !1), new i161("RG8", 2, 2, u157.UNORM, !1, !1, !1, !1), new i161("RG8SN", 2, 2, u157.SNORM, !1, !1, !1, !1), new i161("RG8UI", 2, 2, u157.UINT, !1, !1, !1, !1), new i161("RG8I", 2, 2, u157.INT, !1, !1, !1, !1), new i161("RG16F", 4, 2, u157.FLOAT, !1, !1, !1, !1), new i161("RG16UI", 4, 2, u157.UINT, !1, !1, !1, !1), new i161("RG16I", 4, 2, u157.INT, !1, !1, !1, !1), new i161("RG32F", 8, 2, u157.FLOAT, !1, !1, !1, !1), new i161("RG32UI", 8, 2, u157.UINT, !1, !1, !1, !1), new i161("RG32I", 8, 2, u157.INT, !1, !1, !1, !1), new i161("RGB8", 3, 3, u157.UNORM, !1, !1, !1, !1), new i161("SRGB8", 3, 3, u157.UNORM, !1, !1, !1, !1), new i161("RGB8SN", 3, 3, u157.SNORM, !1, !1, !1, !1), new i161("RGB8UI", 3, 3, u157.UINT, !1, !1, !1, !1), new i161("RGB8I", 3, 3, u157.INT, !1, !1, !1, !1), new i161("RGB16F", 6, 3, u157.FLOAT, !1, !1, !1, !1), new i161("RGB16UI", 6, 3, u157.UINT, !1, !1, !1, !1), new i161("RGB16I", 6, 3, u157.INT, !1, !1, !1, !1), new i161("RGB32F", 12, 3, u157.FLOAT, !1, !1, !1, !1), new i161("RGB32UI", 12, 3, u157.UINT, !1, !1, !1, !1), new i161("RGB32I", 12, 3, u157.INT, !1, !1, !1, !1), new i161("RGBA8", 4, 4, u157.UNORM, !0, !1, !1, !1), new i161("BGRA8", 4, 4, u157.UNORM, !0, !1, !1, !1), new i161("SRGB8_A8", 4, 4, u157.UNORM, !0, !1, !1, !1), new i161("RGBA8SN", 4, 4, u157.SNORM, !0, !1, !1, !1), new i161("RGBA8UI", 4, 4, u157.UINT, !0, !1, !1, !1), new i161("RGBA8I", 4, 4, u157.INT, !0, !1, !1, !1), new i161("RGBA16F", 8, 4, u157.FLOAT, !0, !1, !1, !1), new i161("RGBA16UI", 8, 4, u157.UINT, !0, !1, !1, !1), new i161("RGBA16I", 8, 4, u157.INT, !0, !1, !1, !1), new i161("RGBA32F", 16, 4, u157.FLOAT, !0, !1, !1, !1), new i161("RGBA32UI", 16, 4, u157.UINT, !0, !1, !1, !1), new i161("RGBA32I", 16, 4, u157.INT, !0, !1, !1, !1), new i161("R5G6B5", 2, 3, u157.UNORM, !1, !1, !1, !1), new i161("R11G11B10F", 4, 3, u157.FLOAT, !1, !1, !1, !1), new i161("RGB5A1", 2, 4, u157.UNORM, !0, !1, !1, !1), new i161("RGBA4", 2, 4, u157.UNORM, !0, !1, !1, !1), new i161("RGB10A2", 2, 4, u157.UNORM, !0, !1, !1, !1), new i161("RGB10A2UI", 2, 4, u157.UINT, !0, !1, !1, !1), new i161("RGB9E5", 2, 4, u157.FLOAT, !0, !1, !1, !1), new i161("DEPTH", 4, 1, u157.FLOAT, !1, !0, !1, !1), new i161("DEPTH_STENCIL", 5, 2, u157.FLOAT, !1, !0, !0, !1), new i161("BC1", 1, 3, u157.UNORM, !1, !1, !1, !0), new i161("BC1_ALPHA", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("BC1_SRGB", 1, 3, u157.UNORM, !1, !1, !1, !0), new i161("BC1_SRGB_ALPHA", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("BC2", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("BC2_SRGB", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("BC3", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("BC3_SRGB", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("BC4", 1, 1, u157.UNORM, !1, !1, !1, !0), new i161("BC4_SNORM", 1, 1, u157.SNORM, !1, !1, !1, !0), new i161("BC5", 1, 2, u157.UNORM, !1, !1, !1, !0), new i161("BC5_SNORM", 1, 2, u157.SNORM, !1, !1, !1, !0), new i161("BC6H_UF16", 1, 3, u157.UFLOAT, !1, !1, !1, !0), new i161("BC6H_SF16", 1, 3, u157.FLOAT, !1, !1, !1, !0), new i161("BC7", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("BC7_SRGB", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ETC_RGB8", 1, 3, u157.UNORM, !1, !1, !1, !0), new i161("ETC2_RGB8", 1, 3, u157.UNORM, !1, !1, !1, !0), new i161("ETC2_SRGB8", 1, 3, u157.UNORM, !1, !1, !1, !0), new i161("ETC2_RGB8_A1", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ETC2_SRGB8_A1", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ETC2_RGBA8", 2, 4, u157.UNORM, !0, !1, !1, !0), new i161("ETC2_SRGB8_A8", 2, 4, u157.UNORM, !0, !1, !1, !0), new i161("EAC_R11", 1, 1, u157.UNORM, !1, !1, !1, !0), new i161("EAC_R11SN", 1, 1, u157.SNORM, !1, !1, !1, !0), new i161("EAC_RG11", 2, 2, u157.UNORM, !1, !1, !1, !0), new i161("EAC_RG11SN", 2, 2, u157.SNORM, !1, !1, !1, !0), new i161("PVRTC_RGB2", 2, 3, u157.UNORM, !1, !1, !1, !0), new i161("PVRTC_RGBA2", 2, 4, u157.UNORM, !0, !1, !1, !0), new i161("PVRTC_RGB4", 2, 3, u157.UNORM, !1, !1, !1, !0), new i161("PVRTC_RGBA4", 2, 4, u157.UNORM, !0, !1, !1, !0), new i161("PVRTC2_2BPP", 2, 4, u157.UNORM, !0, !1, !1, !0), new i161("PVRTC2_4BPP", 2, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_4x4", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_5x4", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_5x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_6x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_6x6", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_8x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_8x6", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_8x8", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_10x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_10x6", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_10x8", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_10x10", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_12x10", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_RGBA_12x12", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_4x4", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_5x4", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_5x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_6x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_6x6", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_8x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_8x6", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_8x8", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_10x5", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_10x6", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_10x8", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_10x10", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_12x10", 1, 4, u157.UNORM, !0, !1, !1, !0), new i161("ASTC_SRGBA_12x12", 1, 4, u157.UNORM, !0, !1, !1, !0)]), o161 = z158.UNIFORM_BUFFER | z158.DYNAMIC_UNIFORM_BUFFER | z158.STORAGE_BUFFER | z158.DYNAMIC_STORAGE_BUFFER, p161 = z158.SAMPLER_TEXTURE | z158.SAMPLER | z158.TEXTURE | z158.STORAGE_IMAGE | z158.INPUT_ATTACHMENT, q161 = z158.DYNAMIC_STORAGE_BUFFER | z158.DYNAMIC_UNIFORM_BUFFER;
            function b134(f1185) {
                return f1185 > 0 && 0 == (f1185 & f1185 - 1);
            }
            function c134(b1185, c1185, d1185, e1185) {
                if (!n161[b1185].isCompressed)
                    return c1185 * d1185 * e1185 * n161[b1185].size;
                switch (b1185) {
                    case t157.BC1:
                    case t157.BC1_ALPHA:
                    case t157.BC1_SRGB:
                    case t157.BC1_SRGB_ALPHA:
                        return Math.ceil(c1185 / 4) * Math.ceil(d1185 / 4) * 8 * e1185;
                    case t157.BC2:
                    case t157.BC2_SRGB:
                    case t157.BC3:
                    case t157.BC3_SRGB:
                    case t157.BC4:
                    case t157.BC4_SNORM:
                    case t157.BC6H_SF16:
                    case t157.BC6H_UF16:
                    case t157.BC7:
                    case t157.BC7_SRGB:
                        return Math.ceil(c1185 / 4) * Math.ceil(d1185 / 4) * 16 * e1185;
                    case t157.BC5:
                    case t157.BC5_SNORM:
                        return Math.ceil(c1185 / 4) * Math.ceil(d1185 / 4) * 32 * e1185;
                    case t157.ETC_RGB8:
                    case t157.ETC2_RGB8:
                    case t157.ETC2_SRGB8:
                    case t157.ETC2_RGB8_A1:
                    case t157.EAC_R11:
                    case t157.EAC_R11SN:
                        return Math.ceil(c1185 / 4) * Math.ceil(d1185 / 4) * 8 * e1185;
                    case t157.ETC2_RGBA8:
                    case t157.ETC2_SRGB8_A1:
                    case t157.EAC_RG11:
                    case t157.EAC_RG11SN:
                        return Math.ceil(c1185 / 4) * Math.ceil(d1185 / 4) * 16 * e1185;
                    case t157.PVRTC_RGB2:
                    case t157.PVRTC_RGBA2:
                    case t157.PVRTC2_2BPP:
                        return Math.ceil(c1185 / 8) * Math.ceil(d1185 / 4) * 8 * e1185;
                    case t157.PVRTC_RGB4:
                    case t157.PVRTC_RGBA4:
                    case t157.PVRTC2_4BPP:
                        return Math.ceil(c1185 / 4) * Math.ceil(d1185 / 4) * 8 * e1185;
                    case t157.ASTC_RGBA_4X4:
                    case t157.ASTC_SRGBA_4X4:
                        return Math.ceil(c1185 / 4) * Math.ceil(d1185 / 4) * 16 * e1185;
                    case t157.ASTC_RGBA_5X4:
                    case t157.ASTC_SRGBA_5X4:
                        return Math.ceil(c1185 / 5) * Math.ceil(d1185 / 4) * 16 * e1185;
                    case t157.ASTC_RGBA_5X5:
                    case t157.ASTC_SRGBA_5X5:
                        return Math.ceil(c1185 / 5) * Math.ceil(d1185 / 5) * 16 * e1185;
                    case t157.ASTC_RGBA_6X5:
                    case t157.ASTC_SRGBA_6X5:
                        return Math.ceil(c1185 / 6) * Math.ceil(d1185 / 5) * 16 * e1185;
                    case t157.ASTC_RGBA_6X6:
                    case t157.ASTC_SRGBA_6X6:
                        return Math.ceil(c1185 / 6) * Math.ceil(d1185 / 6) * 16 * e1185;
                    case t157.ASTC_RGBA_8X5:
                    case t157.ASTC_SRGBA_8X5:
                        return Math.ceil(c1185 / 8) * Math.ceil(d1185 / 5) * 16 * e1185;
                    case t157.ASTC_RGBA_8X6:
                    case t157.ASTC_SRGBA_8X6:
                        return Math.ceil(c1185 / 8) * Math.ceil(d1185 / 6) * 16 * e1185;
                    case t157.ASTC_RGBA_8X8:
                    case t157.ASTC_SRGBA_8X8:
                        return Math.ceil(c1185 / 8) * Math.ceil(d1185 / 8) * 16 * e1185;
                    case t157.ASTC_RGBA_10X5:
                    case t157.ASTC_SRGBA_10X5:
                        return Math.ceil(c1185 / 10) * Math.ceil(d1185 / 5) * 16 * e1185;
                    case t157.ASTC_RGBA_10X6:
                    case t157.ASTC_SRGBA_10X6:
                        return Math.ceil(c1185 / 10) * Math.ceil(d1185 / 6) * 16 * e1185;
                    case t157.ASTC_RGBA_10X8:
                    case t157.ASTC_SRGBA_10X8:
                        return Math.ceil(c1185 / 10) * Math.ceil(d1185 / 8) * 16 * e1185;
                    case t157.ASTC_RGBA_10X10:
                    case t157.ASTC_SRGBA_10X10:
                        return Math.ceil(c1185 / 10) * Math.ceil(d1185 / 10) * 16 * e1185;
                    case t157.ASTC_RGBA_12X10:
                    case t157.ASTC_SRGBA_12X10:
                        return Math.ceil(c1185 / 12) * Math.ceil(d1185 / 10) * 16 * e1185;
                    case t157.ASTC_RGBA_12X12:
                    case t157.ASTC_SRGBA_12X12:
                        return Math.ceil(c1185 / 12) * Math.ceil(d1185 / 12) * 16 * e1185;
                    default:
                        return 0;
                }
            }
            function d134(u1184, v1184, w1184, x1184, y1184) {
                let z1184 = 0;
                for (let a1185 = 0; a1185 < y1184; ++a1185)
                    z1184 += c134(u1184, v1184, w1184, x1184), v1184 = Math.max(v1184 >> 1, 1), w1184 = Math.max(w1184 >> 1, 1);
                return z1184;
            }
            const r161 = [0, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 16, 24, 32, 24, 36, 48, 32, 48, 64, 4, 4, 4, 4, 4, 4];
            function e134(t1184) {
                return r161[t1184] || 0;
            }
            function f134(r1184) {
                if (r1184.isCompressed)
                    return Uint8Array;
                const s1184 = r1184.size / r1184.count;
                switch (r1184.type) {
                    case u157.UNORM:
                    case u157.UINT:
                        switch (s1184) {
                            case 1:
                                return Uint8Array;
                            case 2:
                                return Uint16Array;
                            case 4:
                                return Uint32Array;
                            default:
                                return Uint8Array;
                        }
                    case u157.SNORM:
                    case u157.INT:
                        switch (s1184) {
                            case 1:
                                return Int8Array;
                            case 2:
                                return Int16Array;
                            case 4:
                                return Int32Array;
                            default:
                                return Int8Array;
                        }
                    case u157.FLOAT:
                        switch (s1184) {
                            case 2:
                                return Uint16Array;
                            case 4:
                            default:
                                return Float32Array;
                        }
                }
                return Float32Array;
            }
            function g134(q1184) {
                switch (q1184) {
                    case t157.BC1:
                    case t157.BC1_ALPHA:
                    case t157.BC1_SRGB:
                    case t157.BC1_SRGB_ALPHA:
                    case t157.BC2:
                    case t157.BC2_SRGB:
                    case t157.BC3:
                    case t157.BC3_SRGB:
                    case t157.BC4:
                    case t157.BC4_SNORM:
                    case t157.BC6H_SF16:
                    case t157.BC6H_UF16:
                    case t157.BC7:
                    case t157.BC7_SRGB:
                    case t157.BC5:
                    case t157.BC5_SNORM:
                    case t157.ETC_RGB8:
                    case t157.ETC2_RGB8:
                    case t157.ETC2_SRGB8:
                    case t157.ETC2_RGB8_A1:
                    case t157.EAC_R11:
                    case t157.EAC_R11SN:
                    case t157.ETC2_RGBA8:
                    case t157.ETC2_SRGB8_A1:
                    case t157.EAC_RG11:
                    case t157.EAC_RG11SN:
                        return {
                            width: 4,
                            height: 4
                        };
                    case t157.PVRTC_RGB2:
                    case t157.PVRTC_RGBA2:
                    case t157.PVRTC2_2BPP:
                        return {
                            width: 8,
                            height: 4
                        };
                    case t157.PVRTC_RGB4:
                    case t157.PVRTC_RGBA4:
                    case t157.PVRTC2_4BPP:
                        return {
                            width: 4,
                            height: 4
                        };
                    case t157.ASTC_RGBA_4X4:
                    case t157.ASTC_SRGBA_4X4:
                        return {
                            width: 4,
                            height: 4
                        };
                    case t157.ASTC_RGBA_5X4:
                    case t157.ASTC_SRGBA_5X4:
                        return {
                            width: 5,
                            height: 4
                        };
                    case t157.ASTC_RGBA_5X5:
                    case t157.ASTC_SRGBA_5X5:
                        return {
                            width: 5,
                            height: 5
                        };
                    case t157.ASTC_RGBA_6X5:
                    case t157.ASTC_SRGBA_6X5:
                        return {
                            width: 6,
                            height: 5
                        };
                    case t157.ASTC_RGBA_6X6:
                    case t157.ASTC_SRGBA_6X6:
                        return {
                            width: 6,
                            height: 6
                        };
                    case t157.ASTC_RGBA_8X5:
                    case t157.ASTC_SRGBA_8X5:
                        return {
                            width: 8,
                            height: 5
                        };
                    case t157.ASTC_RGBA_8X6:
                    case t157.ASTC_SRGBA_8X6:
                        return {
                            width: 8,
                            height: 6
                        };
                    case t157.ASTC_RGBA_8X8:
                    case t157.ASTC_SRGBA_8X8:
                        return {
                            width: 8,
                            height: 8
                        };
                    case t157.ASTC_RGBA_10X5:
                    case t157.ASTC_SRGBA_10X5:
                        return {
                            width: 10,
                            height: 5
                        };
                    case t157.ASTC_RGBA_10X6:
                    case t157.ASTC_SRGBA_10X6:
                        return {
                            width: 10,
                            height: 6
                        };
                    case t157.ASTC_RGBA_10X8:
                    case t157.ASTC_SRGBA_10X8:
                        return {
                            width: 10,
                            height: 8
                        };
                    case t157.ASTC_RGBA_10X10:
                    case t157.ASTC_SRGBA_10X10:
                        return {
                            width: 10,
                            height: 10
                        };
                    case t157.ASTC_RGBA_12X10:
                    case t157.ASTC_SRGBA_12X10:
                        return {
                            width: 12,
                            height: 10
                        };
                    case t157.ASTC_RGBA_12X12:
                    case t157.ASTC_SRGBA_12X12:
                        return {
                            width: 12,
                            height: 12
                        };
                    default:
                        return {
                            width: 1,
                            height: 1
                        };
                }
            }
            function h134(o1184, p1184) {
                return Math.ceil(o1184 / p1184) * p1184;
            }
            var s161 = Object.freeze({
                __proto__: null,
                get ObjectType() {
                    return o157;
                },
                get Status() {
                    return p157;
                },
                get API() {
                    return q157;
                },
                get SurfaceTransform() {
                    return r157;
                },
                get Feature() {
                    return s157;
                },
                get Format() {
                    return t157;
                },
                get FormatType() {
                    return u157;
                },
                get Type() {
                    return v157;
                },
                get BufferUsageBit() {
                    return w157;
                },
                get BufferFlagBit() {
                    return x157;
                },
                get MemoryAccessBit() {
                    return y157;
                },
                get MemoryUsageBit() {
                    return z157;
                },
                get TextureType() {
                    return a158;
                },
                get TextureUsageBit() {
                    return b158;
                },
                get TextureFlagBit() {
                    return c158;
                },
                get FormatFeatureBit() {
                    return d158;
                },
                get SampleCount() {
                    return e158;
                },
                get VsyncMode() {
                    return f158;
                },
                get Filter() {
                    return g158;
                },
                get Address() {
                    return h158;
                },
                get ComparisonFunc() {
                    return i158;
                },
                get StencilOp() {
                    return j158;
                },
                get BlendFactor() {
                    return k158;
                },
                get BlendOp() {
                    return l158;
                },
                get ColorMask() {
                    return m158;
                },
                get ShaderStageFlagBit() {
                    return n158;
                },
                get LoadOp() {
                    return o158;
                },
                get StoreOp() {
                    return p158;
                },
                get AccessFlagBit() {
                    return q158;
                },
                get ResolveMode() {
                    return r158;
                },
                get PipelineBindPoint() {
                    return s158;
                },
                get PrimitiveMode() {
                    return t158;
                },
                get PolygonMode() {
                    return u158;
                },
                get ShadeModel() {
                    return v158;
                },
                get CullMode() {
                    return w158;
                },
                get DynamicStateFlagBit() {
                    return x158;
                },
                get StencilFace() {
                    return y158;
                },
                get DescriptorType() {
                    return z158;
                },
                get QueueType() {
                    return a159;
                },
                get QueryType() {
                    return b159;
                },
                get CommandBufferType() {
                    return c159;
                },
                get ClearFlagBit() {
                    return d159;
                },
                get BarrierType() {
                    return e159;
                },
                get PassType() {
                    return f159;
                },
                Size: h159,
                DeviceCaps: i159,
                DeviceOptions: j159,
                Offset: k159,
                Rect: l159,
                Extent: m159,
                TextureSubresLayers: n159,
                TextureSubresRange: o159,
                TextureCopy: p159,
                TextureBlit: q159,
                BufferTextureCopy: r159,
                Viewport: s159,
                Color: t159,
                BindingMappingInfo: u159,
                SwapchainInfo: v159,
                DeviceInfo: w159,
                BufferInfo: x159,
                BufferViewInfo: y159,
                DrawInfo: z159,
                DispatchInfo: a160,
                IndirectBuffer: b160,
                TextureInfo: c160,
                TextureViewInfo: d160,
                SamplerInfo: e160,
                Uniform: f160,
                UniformBlock: g160,
                UniformSamplerTexture: h160,
                UniformSampler: i160,
                UniformTexture: j160,
                UniformStorageImage: k160,
                UniformStorageBuffer: l160,
                UniformInputAttachment: m160,
                ShaderStage: n160,
                Attribute: o160,
                ShaderInfo: p160,
                InputAssemblerInfo: q160,
                ColorAttachment: r160,
                DepthStencilAttachment: s160,
                SubpassInfo: t160,
                SubpassDependency: u160,
                RenderPassInfo: v160,
                GeneralBarrierInfo: w160,
                TextureBarrierInfo: x160,
                BufferBarrierInfo: y160,
                FramebufferInfo: z160,
                DescriptorSetLayoutBinding: a161,
                DescriptorSetLayoutInfo: b161,
                DescriptorSetInfo: c161,
                PipelineLayoutInfo: d161,
                InputState: e161,
                CommandBufferInfo: f161,
                QueueInfo: g161,
                QueryPoolInfo: h161,
                FormatInfo: i161,
                MemoryStatus: j161,
                DynamicStencilStates: k161,
                DynamicStates: l161,
                GFXObject: m161,
                get AttributeName() {
                    return g159;
                },
                FormatInfos: n161,
                DESCRIPTOR_BUFFER_TYPE: o161,
                DESCRIPTOR_SAMPLER_TYPE: p161,
                DESCRIPTOR_DYNAMIC_TYPE: q161,
                DRAW_INFO_SIZE: 28,
                IsPowerOf2: b134,
                FormatSize: c134,
                FormatSurfaceSize: d134,
                GetTypeSize: e134,
                getTypedArrayConstructor: f134,
                formatAlignment: g134,
                alignTo: h134
            });
            class t161 {
                constructor(c1184 = !1, d1184 = u158.FILL, e1184 = v158.GOURAND, f1184 = w158.BACK, g1184 = !0, h1184 = !1, i1184 = 0, j1184 = 0, k1184 = 0, l1184 = !0, m1184 = !1, n1184 = 1) {
                    this._nativeObj = void 0, this._isDiscard = !1, this._polygonMode = u158.FILL, this._shadeModel = v158.GOURAND, this._cullMode = w158.BACK, this._isFrontFaceCCW = !0, this._depthBiasEnabled = !1, this._depthBias = 0, this._depthBiasClamp = 0, this._depthBiasSlop = 0, this._isDepthClip = !0, this._isMultisample = !1, this._lineWidth = 1, this._nativeObj = new gfx.RasterizerState(), this.assignProperties(c1184, d1184, e1184, f1184, g1184, h1184, i1184, j1184, k1184, l1184, m1184, n1184);
                }
                get native() {
                    return this._nativeObj;
                }
                get isDiscard() {
                    return this._isDiscard;
                }
                set isDiscard(b1184) {
                    this._isDiscard = b1184, this._nativeObj.isDiscard = b1184;
                }
                get polygonMode() {
                    return this._polygonMode;
                }
                set polygonMode(a1184) {
                    this._polygonMode = a1184, this._nativeObj.polygonMode = a1184;
                }
                get shadeModel() {
                    return this._shadeModel;
                }
                set shadeModel(z1183) {
                    this._shadeModel = z1183, this._nativeObj.shadeModel = z1183;
                }
                get cullMode() {
                    return this._cullMode;
                }
                set cullMode(y1183) {
                    this._cullMode = y1183, this._nativeObj.cullMode = y1183;
                }
                get isFrontFaceCCW() {
                    return this._isFrontFaceCCW;
                }
                set isFrontFaceCCW(x1183) {
                    this._isFrontFaceCCW = x1183, this._nativeObj.isFrontFaceCCW = x1183;
                }
                get depthBiasEnabled() {
                    return this._depthBiasEnabled;
                }
                set depthBiasEnabled(w1183) {
                    this._depthBiasEnabled = w1183, this._nativeObj.depthBiasEnabled = w1183;
                }
                get depthBias() {
                    return this._depthBias;
                }
                set depthBias(v1183) {
                    this._depthBias = v1183, this._nativeObj.depthBias = v1183;
                }
                get depthBiasClamp() {
                    return this._depthBiasClamp;
                }
                set depthBiasClamp(u1183) {
                    this._depthBiasClamp = u1183, this._nativeObj.depthBiasClamp = u1183;
                }
                get depthBiasSlop() {
                    return this._depthBiasSlop;
                }
                set depthBiasSlop(t1183) {
                    this._depthBiasSlop = t1183, this._nativeObj.depthBiasSlop = t1183;
                }
                get isDepthClip() {
                    return this._isDepthClip;
                }
                set isDepthClip(s1183) {
                    this._isDepthClip = s1183, this._nativeObj.isDepthClip = s1183;
                }
                get isMultisample() {
                    return this._isMultisample;
                }
                set isMultisample(r1183) {
                    this._isMultisample = r1183, this._nativeObj.isMultisample = r1183;
                }
                get lineWidth() {
                    return this._lineWidth;
                }
                set lineWidth(q1183) {
                    this._lineWidth = q1183, this._nativeObj.lineWidth = q1183;
                }
                reset() {
                    this.assignProperties(!1, u158.FILL, v158.GOURAND, w158.BACK, !0, !1, 0, 0, 0, !0, !1, 1);
                }
                assign(p1183) {
                    p1183 && this.assignProperties(p1183.isDiscard, p1183.polygonMode, p1183.shadeModel, p1183.cullMode, p1183.isFrontFaceCCW, p1183.depthBiasEnabled, p1183.depthBias, p1183.depthBiasClamp, p1183.depthBiasSlop, p1183.isDepthClip, p1183.isMultisample, p1183.lineWidth);
                }
                destroy() {
                    this._nativeObj = null;
                }
                assignProperties(d1183, e1183, f1183, g1183, h1183, i1183, j1183, k1183, l1183, m1183, n1183, o1183) {
                    void 0 !== d1183 && (this.isDiscard = d1183), void 0 !== e1183 && (this.polygonMode = e1183), void 0 !== f1183 && (this.shadeModel = f1183), void 0 !== g1183 && (this.cullMode = g1183), void 0 !== h1183 && (this.isFrontFaceCCW = h1183), void 0 !== i1183 && (this.depthBiasEnabled = i1183), void 0 !== j1183 && (this.depthBias = j1183), void 0 !== k1183 && (this.depthBiasClamp = k1183), void 0 !== l1183 && (this.depthBiasSlop = l1183), void 0 !== m1183 && (this.isDepthClip = m1183), void 0 !== n1183 && (this.isMultisample = n1183), void 0 !== o1183 && (this.lineWidth = o1183);
                }
            }
            class u161 {
                constructor(k1182 = !0, l1182 = !0, m1182 = i158.LESS, n1182 = !1, o1182 = i158.ALWAYS, p1182 = 65535, q1182 = 65535, r1182 = j158.KEEP, s1182 = j158.KEEP, t1182 = j158.KEEP, u1182 = 1, v1182 = !1, w1182 = i158.ALWAYS, x1182 = 65535, y1182 = 65535, z1182 = j158.KEEP, a1183 = j158.KEEP, b1183 = j158.KEEP, c1183 = 1) {
                    this._nativeObj = void 0, this._depthTest = !0, this._depthWrite = !0, this._depthFunc = i158.LESS, this._stencilTestFront = !1, this._stencilFuncFront = i158.ALWAYS, this._stencilReadMaskFront = 65535, this._stencilWriteMaskFront = 65535, this._stencilFailOpFront = j158.KEEP, this._stencilZFailOpFront = j158.KEEP, this._stencilPassOpFront = j158.KEEP, this._stencilRefFront = 1, this._stencilTestBack = !1, this._stencilFuncBack = i158.ALWAYS, this._stencilReadMaskBack = 65535, this._stencilWriteMaskBack = 65535, this._stencilFailOpBack = j158.KEEP, this._stencilZFailOpBack = j158.KEEP, this._stencilPassOpBack = j158.KEEP, this._stencilRefBack = 1, this._nativeObj = new gfx.DepthStencilState(), this.assignProperties(k1182, l1182, m1182, n1182, o1182, p1182, q1182, r1182, s1182, t1182, u1182, v1182, w1182, x1182, y1182, z1182, a1183, b1183, c1183);
                }
                get native() {
                    return this._nativeObj;
                }
                get depthTest() {
                    return this._depthTest;
                }
                set depthTest(j1182) {
                    this._depthTest = j1182, this._nativeObj.depthTest = j1182;
                }
                get depthWrite() {
                    return this._depthWrite;
                }
                set depthWrite(i1182) {
                    this._depthWrite = i1182, this._nativeObj.depthWrite = i1182;
                }
                get depthFunc() {
                    return this._depthFunc;
                }
                set depthFunc(h1182) {
                    this._depthFunc = h1182, this._nativeObj.depthFunc = h1182;
                }
                get stencilTestFront() {
                    return this._stencilTestFront;
                }
                set stencilTestFront(g1182) {
                    this._stencilTestFront = g1182, this._nativeObj.stencilTestFront = g1182;
                }
                get stencilFuncFront() {
                    return this._stencilFuncFront;
                }
                set stencilFuncFront(f1182) {
                    this._stencilFuncFront = f1182, this._nativeObj.stencilFuncFront = f1182;
                }
                get stencilReadMaskFront() {
                    return this._stencilReadMaskFront;
                }
                set stencilReadMaskFront(e1182) {
                    this._stencilReadMaskFront = e1182, this._nativeObj.stencilReadMaskFront = e1182;
                }
                get stencilWriteMaskFront() {
                    return this._stencilWriteMaskFront;
                }
                set stencilWriteMaskFront(d1182) {
                    this._stencilWriteMaskFront = d1182, this._nativeObj.stencilWriteMaskFront = d1182;
                }
                get stencilFailOpFront() {
                    return this._stencilFailOpFront;
                }
                set stencilFailOpFront(c1182) {
                    this._stencilFailOpFront = c1182, this._nativeObj.stencilFailOpFront = c1182;
                }
                get stencilZFailOpFront() {
                    return this._stencilZFailOpFront;
                }
                set stencilZFailOpFront(b1182) {
                    this._stencilZFailOpFront = b1182, this._nativeObj.stencilZFailOpFront = b1182;
                }
                get stencilPassOpFront() {
                    return this._stencilPassOpFront;
                }
                set stencilPassOpFront(a1182) {
                    this._stencilPassOpFront = a1182, this._nativeObj.stencilPassOpFront = a1182;
                }
                get stencilRefFront() {
                    return this._stencilRefFront;
                }
                set stencilRefFront(z1181) {
                    this._stencilRefFront = z1181, this._nativeObj.stencilRefFront = z1181;
                }
                get stencilTestBack() {
                    return this._stencilTestBack;
                }
                set stencilTestBack(y1181) {
                    this._stencilTestBack = y1181, this._nativeObj.stencilTestBack = y1181;
                }
                get stencilFuncBack() {
                    return this._stencilFuncBack;
                }
                set stencilFuncBack(x1181) {
                    this._stencilFuncBack = x1181, this._nativeObj.stencilFuncBack = x1181;
                }
                get stencilReadMaskBack() {
                    return this._stencilReadMaskBack;
                }
                set stencilReadMaskBack(w1181) {
                    this._stencilReadMaskBack = w1181, this._nativeObj.stencilReadMaskBack = w1181;
                }
                get stencilWriteMaskBack() {
                    return this._stencilWriteMaskBack;
                }
                set stencilWriteMaskBack(v1181) {
                    this._stencilWriteMaskBack = v1181, this._nativeObj.stencilWriteMaskBack = v1181;
                }
                get stencilFailOpBack() {
                    return this._stencilFailOpBack;
                }
                set stencilFailOpBack(u1181) {
                    this._stencilFailOpBack = u1181, this._nativeObj.stencilFailOpBack = u1181;
                }
                get stencilZFailOpBack() {
                    return this._stencilZFailOpBack;
                }
                set stencilZFailOpBack(t1181) {
                    this._stencilZFailOpBack = t1181, this._nativeObj.stencilZFailOpBack = t1181;
                }
                get stencilPassOpBack() {
                    return this._stencilPassOpBack;
                }
                set stencilPassOpBack(s1181) {
                    this._stencilPassOpBack = s1181, this._nativeObj.stencilPassOpBack = s1181;
                }
                get stencilRefBack() {
                    return this._stencilRefBack;
                }
                set stencilRefBack(r1181) {
                    this._stencilRefBack = r1181, this._nativeObj.stencilRefBack = r1181;
                }
                reset() {
                    this.assignProperties(!0, !0, i158.LESS, !1, i158.ALWAYS, 65535, 65535, j158.KEEP, j158.KEEP, j158.KEEP, 1, !1, i158.ALWAYS, 65535, 65535, j158.KEEP, j158.KEEP, j158.KEEP, 1);
                }
                assign(q1181) {
                    q1181 && this.assignProperties(q1181.depthTest, q1181.depthWrite, q1181.depthFunc, q1181.stencilTestFront, q1181.stencilFuncFront, q1181.stencilReadMaskFront, q1181.stencilWriteMaskFront, q1181.stencilFailOpFront, q1181.stencilZFailOpFront, q1181.stencilPassOpFront, q1181.stencilRefFront, q1181.stencilTestBack, q1181.stencilFuncBack, q1181.stencilReadMaskBack, q1181.stencilWriteMaskBack, q1181.stencilFailOpBack, q1181.stencilZFailOpBack, q1181.stencilPassOpBack, q1181.stencilRefBack);
                }
                destroy() {
                    this._nativeObj = null;
                }
                assignProperties(x1180, y1180, z1180, a1181, b1181, c1181, d1181, e1181, f1181, g1181, h1181, i1181, j1181, k1181, l1181, m1181, n1181, o1181, p1181) {
                    void 0 !== x1180 && (this.depthTest = x1180), void 0 !== y1180 && (this.depthWrite = y1180), void 0 !== z1180 && (this.depthFunc = z1180), void 0 !== a1181 && (this.stencilTestFront = a1181), void 0 !== b1181 && (this.stencilFuncFront = b1181), void 0 !== c1181 && (this.stencilReadMaskFront = c1181), void 0 !== d1181 && (this.stencilWriteMaskFront = d1181), void 0 !== e1181 && (this.stencilFailOpFront = e1181), void 0 !== f1181 && (this.stencilZFailOpFront = f1181), void 0 !== g1181 && (this.stencilPassOpFront = g1181), void 0 !== h1181 && (this.stencilRefFront = h1181), void 0 !== i1181 && (this.stencilTestBack = i1181), void 0 !== j1181 && (this.stencilFuncBack = j1181), void 0 !== k1181 && (this.stencilReadMaskBack = k1181), void 0 !== l1181 && (this.stencilWriteMaskBack = l1181), void 0 !== m1181 && (this.stencilFailOpBack = m1181), void 0 !== n1181 && (this.stencilZFailOpBack = n1181), void 0 !== o1181 && (this.stencilPassOpBack = o1181), void 0 !== p1181 && (this.stencilRefBack = p1181);
                }
            }
            class v161 {
                get native() {
                    return this._nativeObj;
                }
                constructor(p1180 = !1, q1180 = k158.ONE, r1180 = k158.ZERO, s1180 = l158.ADD, t1180 = k158.ONE, u1180 = k158.ZERO, v1180 = l158.ADD, w1180 = m158.ALL) {
                    this._nativeObj = void 0, this._blend = !1, this._blendSrc = k158.ONE, this._blendDst = k158.ZERO, this._blendEq = l158.ADD, this._blendSrcAlpha = k158.ONE, this._blendDstAlpha = k158.ZERO, this._blendAlphaEq = l158.ADD, this._blendColorMask = m158.ALL, this._nativeObj = new gfx.BlendTarget(), this.assignProperties(p1180, q1180, r1180, s1180, t1180, u1180, v1180, w1180);
                }
                get blend() {
                    return this._blend;
                }
                set blend(o1180) {
                    this._blend = o1180, this._nativeObj.blend = o1180;
                }
                get blendSrc() {
                    return this._blendSrc;
                }
                set blendSrc(n1180) {
                    this._blendSrc = n1180, this._nativeObj.blendSrc = n1180;
                }
                get blendDst() {
                    return this._blendDst;
                }
                set blendDst(m1180) {
                    this._blendDst = m1180, this._nativeObj.blendDst = m1180;
                }
                get blendEq() {
                    return this._blendEq;
                }
                set blendEq(l1180) {
                    this._blendEq = l1180, this._nativeObj.blendEq = l1180;
                }
                get blendSrcAlpha() {
                    return this._blendSrcAlpha;
                }
                set blendSrcAlpha(k1180) {
                    this._blendSrcAlpha = k1180, this._nativeObj.blendSrcAlpha = k1180;
                }
                get blendDstAlpha() {
                    return this._blendDstAlpha;
                }
                set blendDstAlpha(j1180) {
                    this._blendDstAlpha = j1180, this._nativeObj.blendDstAlpha = j1180;
                }
                get blendAlphaEq() {
                    return this._blendAlphaEq;
                }
                set blendAlphaEq(i1180) {
                    this._blendAlphaEq = i1180, this._nativeObj.blendAlphaEq = i1180;
                }
                get blendColorMask() {
                    return this._blendColorMask;
                }
                set blendColorMask(h1180) {
                    this._blendColorMask = h1180, this._nativeObj.blendColorMask = h1180;
                }
                reset() {
                    this.assignProperties(!1, k158.ONE, k158.ZERO, l158.ADD, k158.ONE, k158.ZERO, l158.ADD, m158.ALL);
                }
                destroy() {
                    this._nativeObj = null;
                }
                assign(g1180) {
                    g1180 && this.assignProperties(g1180.blend, g1180.blendSrc, g1180.blendDst, g1180.blendEq, g1180.blendSrcAlpha, g1180.blendDstAlpha, g1180.blendAlphaEq, g1180.blendColorMask);
                }
                assignProperties(y1179, z1179, a1180, b1180, c1180, d1180, e1180, f1180) {
                    void 0 !== y1179 && (this.blend = y1179), void 0 !== z1179 && (this.blendSrc = z1179), void 0 !== a1180 && (this.blendDst = a1180), void 0 !== b1180 && (this.blendEq = b1180), void 0 !== c1180 && (this.blendSrcAlpha = c1180), void 0 !== d1180 && (this.blendDstAlpha = d1180), void 0 !== e1180 && (this.blendAlphaEq = e1180), void 0 !== f1180 && (this.blendColorMask = f1180);
                }
            }
            class w161 {
                _setTargets(f1179) {
                    this.targets = f1179;
                    const g1179 = "$__nativeObj";
                    this._syncTargetsToNativeObj(g1179), function (k1179, l1179, m1179, n1179, o1179) {
                        for (let p1179 = 0, q1179 = l1179.length; p1179 < q1179; p1179++) {
                            let r1179 = l1179[p1179], s1179 = r1179[m1179].$__nativeObj || r1179[m1179];
                            r1179[m1179] = new Proxy(s1179, {
                                get: (w1179, x1179) => x1179 === n1179 ? w1179 : Reflect.get(w1179, x1179),
                                set: (t1179, u1179, v1179) => (Reflect.set(t1179, u1179, v1179), o1179(k1179), !0)
                            });
                        }
                    }(this, this.targets, "_nativeObj", g1179, j1179 => {
                        j1179._syncTargetsToNativeObj(g1179);
                    });
                }
                _syncTargetsToNativeObj(b1179) {
                    const c1179 = this.targets.map(e1179 => e1179.native[b1179] || e1179.native);
                    this._nativeObj.targets = c1179;
                }
                get native() {
                    return this._nativeObj;
                }
                constructor(x1178 = !1, y1178 = !1, z1178 = new t159(), a1179 = [new v161()]) {
                    this.targets = void 0, this._blendColor = void 0, this._nativeObj = void 0, this._isA2C = !1, this._isIndepend = !1, this._nativeObj = new gfx.BlendState(), this._setTargets(a1179), this.blendColor = z1178, this.isA2C = x1178, this.isIndepend = y1178;
                }
                get isA2C() {
                    return this._isA2C;
                }
                set isA2C(w1178) {
                    this._isA2C = w1178, this._nativeObj.isA2C = w1178;
                }
                get isIndepend() {
                    return this._isIndepend;
                }
                set isIndepend(v1178) {
                    this._isIndepend = v1178, this._nativeObj.isIndepend = v1178;
                }
                get blendColor() {
                    return this._blendColor;
                }
                set blendColor(u1178) {
                    this._blendColor = u1178, this._nativeObj.blendColor = u1178;
                }
                setTarget(r1178, s1178) {
                    let t1178 = this.targets[r1178];
                    t1178 || (t1178 = this.targets[r1178] = new v161()), t1178.assign(s1178), this._setTargets(this.targets);
                }
                reset() {
                    this.isA2C = !1, this.isIndepend = !1, this.blendColor = new t159(0, 0, 0, 0);
                    const o1178 = this.targets;
                    for (let p1178 = 1, q1178 = o1178.length; p1178 < q1178; ++p1178)
                        o1178[p1178].destroy();
                    o1178.length = 1, o1178[0].reset(), this._setTargets(o1178);
                }
                destroy() {
                    for (let m1178 = 0, n1178 = this.targets.length; m1178 < n1178; ++m1178)
                        this.targets[m1178].destroy();
                    this.targets = null, this._nativeObj = null;
                }
            }
            gfx.PipelineState;
            const x161 = gfx.PipelineStateInfo;
            let y161, z161;
            !function (l1178) {
                l1178[l1178.AUTO = 0] = "AUTO", l1178[l1178.CANVAS = 1] = "CANVAS", l1178[l1178.WEBGL = 2] = "WEBGL", l1178[l1178.HEADLESS = 3] = "HEADLESS";
            }(y161 || (y161 = {})), function (k1178) {
                k1178[k1178.UNKNOWN = -1] = "UNKNOWN", k1178[k1178.CANVAS = 0] = "CANVAS", k1178[k1178.WEBGL = 1] = "WEBGL", k1178[k1178.OPENGL = 2] = "OPENGL", k1178[k1178.HEADLESS = 3] = "HEADLESS";
            }(z161 || (z161 = {}));
            class a162 {
                constructor() {
                    this.initialized = !1, this._gfxDevice = void 0, this._canvas = null, this._swapchain = void 0, this._renderType = z161.UNKNOWN;
                }
                get gfxDevice() {
                    return this._gfxDevice;
                }
                get swapchain() {
                    return this._swapchain;
                }
                init(c1178, d1178) {
                    if (this.initialized)
                        return;
                    const e1178 = r145.querySettings(q145.Category.RENDERING, "renderMode");
                    if (this._canvas = c1178, this._renderType = this._determineRenderType(e1178), this._renderType === z161.WEBGL) {
                        const g1178 = new w159(d1178);
                        if (globalThis.gfx)
                            this._gfxDevice = gfx.DeviceManager.create(g1178);
                        else {
                            let h1178 = !!globalThis.WebGL2RenderingContext;
                            globalThis.navigator.userAgent.toLowerCase(), i157.browserType === q156.UC && (h1178 = !1);
                            const i1178 = [];
                            h1178 && s143.WebGL2Device && i1178.push(s143.WebGL2Device), s143.WebGLDevice && i1178.push(s143.WebGLDevice), s143.EmptyDevice && i1178.push(s143.EmptyDevice);
                            for (let j1178 = 0; j1178 < i1178.length && (this._gfxDevice = new i1178[j1178](), !this._gfxDevice.initialize(g1178)); j1178++)
                                ;
                            this._initSwapchain();
                        }
                    }
                    else
                        this._renderType === z161.HEADLESS && s143.EmptyDevice && (this._gfxDevice = new s143.EmptyDevice(), this._gfxDevice.initialize(new w159(d1178)), this._initSwapchain());
                    if (!this._gfxDevice)
                        return r125("can not support canvas rendering in 3D"), void (this._renderType = z161.UNKNOWN);
                    this._canvas && (this._canvas.oncontextmenu = () => !1);
                }
                _initSwapchain() {
                    const a1178 = new v159(1, this._canvas), b1178 = h157.windowSize;
                    a1178.width = b1178.width, a1178.height = b1178.height, this._swapchain = this._gfxDevice.createSwapchain(a1178);
                }
                _determineRenderType(x1177) {
                    ("number" != typeof x1177 || x1177 > z161.HEADLESS || x1177 < y161.AUTO) && (x1177 = y161.AUTO);
                    let y1177 = z161.CANVAS, z1177 = !1;
                    if (x1177 === y161.CANVAS ? (y1177 = z161.CANVAS, z1177 = !0) : x1177 === y161.AUTO || x1177 === y161.WEBGL ? (y1177 = z161.WEBGL, z1177 = !0) : x1177 === y161.HEADLESS && (y1177 = z161.HEADLESS, z1177 = !0), !z1177)
                        throw new Error(b126(3820, x1177));
                    return y1177;
                }
            }
            const b162 = new a162(), c162 = {
                GFXDevice: !0,
                GFXBuffer: !0,
                GFXTexture: !0,
                GFXSampler: !0,
                GFXShader: !0,
                GFXInputAssembler: !0,
                GFXRenderPass: !0,
                GFXFramebuffer: !0,
                GFXPipelineState: !0,
                GFXCommandBuffer: !0,
                GFXQueue: !0,
                GFXObjectType: !0,
                GFXObject: !1,
                GFXAttributeName: !0,
                GFXType: !0,
                GFXFormat: !0,
                GFXBufferUsageBit: !0,
                GFXMemoryUsageBit: !0,
                GFXBufferFlagBit: !0,
                GFXBufferAccessBit: "MemoryAccessBit",
                GFXPrimitiveMode: !0,
                GFXPolygonMode: !0,
                GFXShadeModel: !0,
                GFXCullMode: !0,
                GFXComparisonFunc: !0,
                GFXStencilOp: !0,
                GFXBlendOp: !0,
                GFXBlendFactor: !0,
                GFXColorMask: !0,
                GFXFilter: !0,
                GFXAddress: !0,
                GFXTextureType: !0,
                GFXTextureUsageBit: !0,
                GFXSampleCount: !0,
                GFXTextureFlagBit: !0,
                GFXShaderStageFlagBit: !0,
                GFXDescriptorType: !0,
                GFXCommandBufferType: !0,
                GFXLoadOp: !0,
                GFXStoreOp: !0,
                GFXPipelineBindPoint: !0,
                GFXDynamicStateFlagBit: !0,
                GFXStencilFace: !0,
                GFXQueueType: !0,
                GFXRect: !0,
                GFXViewport: !0,
                GFXColor: !0,
                GFXClearFlag: !0,
                GFXOffset: !0,
                GFXExtent: !0,
                GFXTextureSubres: "TextureSubresLayers",
                GFXTextureCopy: !0,
                GFXBufferTextureCopy: !0,
                GFXFormatType: !0,
                GFXFormatInfo: !0,
                GFXMemoryStatus: !0,
                GFXFormatInfos: !0,
                GFXFormatSize: !0,
                GFXFormatSurfaceSize: !0,
                GFXGetTypeSize: !0,
                getTypedArrayConstructor: !1
            };
            for (const v1177 in c162) {
                let w1177 = c162[v1177];
                !0 === w1177 ? w1177 = v1177.slice(3) : !1 === w1177 && (w1177 = v1177), k144(s143, "cc", [{
                        name: v1177,
                        newName: w1177,
                        target: s143.gfx,
                        targetName: "cc.gfx"
                    }]);
            }
            l144(s143, "cc", [{
                    name: "GFX_MAX_VERTEX_ATTRIBUTES"
                }, {
                    name: "GFX_MAX_TEXTURE_UNITS"
                }, {
                    name: "GFX_MAX_ATTACHMENTS"
                }, {
                    name: "GFX_MAX_BUFFER_BINDINGS"
                }, {
                    name: "GFXTextureLayout"
                }]);
            const d162 = gfx.DescriptorSet, e162 = gfx.Buffer, f162 = gfx.CommandBuffer, g162 = gfx.Device, h162 = gfx.Swapchain, i162 = gfx.Framebuffer, j162 = gfx.InputAssembler, k162 = gfx.DescriptorSetLayout, l162 = gfx.PipelineLayout, m162 = gfx.PipelineState, n162 = gfx.Queue, o162 = gfx.RenderPass, p162 = gfx.Shader, q162 = gfx.Texture, r162 = gfx.Sampler, s162 = gfx.GeneralBarrier, t162 = gfx.TextureBarrier, u162 = Object.assign({}, s161);
            u162.GFXObject = gfx.GFXObject, u162.Device = gfx.Device, u162.Swapchain = gfx.Swapchain, u162.Buffer = gfx.Buffer, u162.Texture = gfx.Texture, u162.Sampler = gfx.Sampler, u162.Shader = gfx.Shader, u162.InputAssembler = gfx.InputAssembler, u162.RenderPass = gfx.RenderPass, u162.Framebuffer = gfx.Framebuffer, u162.DescriptorSet = gfx.DescriptorSet, u162.DescriptorSetLayout = gfx.DescriptorSetLayout, u162.PipelineLayout = gfx.PipelineLayout, u162.PipelineState = gfx.PipelineState, u162.CommandBuffer = gfx.CommandBuffer, u162.Queue = gfx.Queue, u162.GeneralBarrier = gfx.GeneralBarrier, u162.TextureBarrier = gfx.TextureBarrier, s143.gfx = u162, u162.BlendTarget = v161, u162.BlendState = w161, u162.RasterizerState = t161, u162.DepthStencilState = u161, u162.PipelineStateInfo = x161, g125("gfx", Object.freeze({
                __proto__: null,
                BlendState: w161,
                BlendTarget: v161,
                RasterizerState: t161,
                DepthStencilState: u161,
                PipelineState: m162,
                PipelineStateInfo: x161,
                get ObjectType() {
                    return o157;
                },
                get Status() {
                    return p157;
                },
                get API() {
                    return q157;
                },
                get SurfaceTransform() {
                    return r157;
                },
                get Feature() {
                    return s157;
                },
                get Format() {
                    return t157;
                },
                get FormatType() {
                    return u157;
                },
                get Type() {
                    return v157;
                },
                get BufferUsageBit() {
                    return w157;
                },
                get BufferFlagBit() {
                    return x157;
                },
                get MemoryAccessBit() {
                    return y157;
                },
                get MemoryUsageBit() {
                    return z157;
                },
                get TextureType() {
                    return a158;
                },
                get TextureUsageBit() {
                    return b158;
                },
                get TextureFlagBit() {
                    return c158;
                },
                get FormatFeatureBit() {
                    return d158;
                },
                get SampleCount() {
                    return e158;
                },
                get VsyncMode() {
                    return f158;
                },
                get Filter() {
                    return g158;
                },
                get Address() {
                    return h158;
                },
                get ComparisonFunc() {
                    return i158;
                },
                get StencilOp() {
                    return j158;
                },
                get BlendFactor() {
                    return k158;
                },
                get BlendOp() {
                    return l158;
                },
                get ColorMask() {
                    return m158;
                },
                get ShaderStageFlagBit() {
                    return n158;
                },
                get LoadOp() {
                    return o158;
                },
                get StoreOp() {
                    return p158;
                },
                get AccessFlagBit() {
                    return q158;
                },
                get ResolveMode() {
                    return r158;
                },
                get PipelineBindPoint() {
                    return s158;
                },
                get PrimitiveMode() {
                    return t158;
                },
                get PolygonMode() {
                    return u158;
                },
                get ShadeModel() {
                    return v158;
                },
                get CullMode() {
                    return w158;
                },
                get DynamicStateFlagBit() {
                    return x158;
                },
                get StencilFace() {
                    return y158;
                },
                get DescriptorType() {
                    return z158;
                },
                get QueueType() {
                    return a159;
                },
                get QueryType() {
                    return b159;
                },
                get CommandBufferType() {
                    return c159;
                },
                get ClearFlagBit() {
                    return d159;
                },
                get BarrierType() {
                    return e159;
                },
                get PassType() {
                    return f159;
                },
                Size: h159,
                DeviceCaps: i159,
                DeviceOptions: j159,
                Offset: k159,
                Rect: l159,
                Extent: m159,
                TextureSubresLayers: n159,
                TextureSubresRange: o159,
                TextureCopy: p159,
                TextureBlit: q159,
                BufferTextureCopy: r159,
                Viewport: s159,
                Color: t159,
                BindingMappingInfo: u159,
                SwapchainInfo: v159,
                DeviceInfo: w159,
                BufferInfo: x159,
                BufferViewInfo: y159,
                DrawInfo: z159,
                DispatchInfo: a160,
                IndirectBuffer: b160,
                TextureInfo: c160,
                TextureViewInfo: d160,
                SamplerInfo: e160,
                Uniform: f160,
                UniformBlock: g160,
                UniformSamplerTexture: h160,
                UniformSampler: i160,
                UniformTexture: j160,
                UniformStorageImage: k160,
                UniformStorageBuffer: l160,
                UniformInputAttachment: m160,
                ShaderStage: n160,
                Attribute: o160,
                ShaderInfo: p160,
                InputAssemblerInfo: q160,
                ColorAttachment: r160,
                DepthStencilAttachment: s160,
                SubpassInfo: t160,
                SubpassDependency: u160,
                RenderPassInfo: v160,
                GeneralBarrierInfo: w160,
                TextureBarrierInfo: x160,
                BufferBarrierInfo: y160,
                FramebufferInfo: z160,
                DescriptorSetLayoutBinding: a161,
                DescriptorSetLayoutInfo: b161,
                DescriptorSetInfo: c161,
                PipelineLayoutInfo: d161,
                InputState: e161,
                CommandBufferInfo: f161,
                QueueInfo: g161,
                QueryPoolInfo: h161,
                FormatInfo: i161,
                MemoryStatus: j161,
                DynamicStencilStates: k161,
                DynamicStates: l161,
                GFXObject: m161,
                get AttributeName() {
                    return g159;
                },
                FormatInfos: n161,
                DESCRIPTOR_BUFFER_TYPE: o161,
                DESCRIPTOR_SAMPLER_TYPE: p161,
                DESCRIPTOR_DYNAMIC_TYPE: q161,
                DRAW_INFO_SIZE: 28,
                IsPowerOf2: b134,
                FormatSize: c134,
                FormatSurfaceSize: d134,
                GetTypeSize: e134,
                getTypedArrayConstructor: f134,
                formatAlignment: g134,
                alignTo: h134,
                get LegacyRenderMode() {
                    return y161;
                },
                get RenderType() {
                    return z161;
                },
                DeviceManager: a162,
                deviceManager: b162,
                DescriptorSet: d162,
                Buffer: e162,
                CommandBuffer: f162,
                Device: g162,
                Swapchain: h162,
                Framebuffer: i162,
                InputAssembler: j162,
                DescriptorSetLayout: k162,
                PipelineLayout: l162,
                Queue: n162,
                RenderPass: o162,
                Shader: p162,
                Texture: q162,
                Sampler: r162,
                GeneralBarrier: s162,
                TextureBarrier: t162
            }));
            const v162 = new o147();
            function i134(a1177, b1177, c1177, d1177) {
                const e1177 = c1177.chunk, f1177 = c1177.data, g1177 = e1177.vb, h1177 = c1177.vertexCount;
                a1177.getWorldMatrix(v162);
                let i1177 = 0;
                for (let q1177 = 0; q1177 < h1177; q1177++) {
                    const r1177 = f1177[q1177], s1177 = r1177.x, t1177 = r1177.y;
                    let u1177 = v162.m03 * s1177 + v162.m07 * t1177 + v162.m15;
                    u1177 = u1177 ? 1 / u1177 : 1, g1177[i1177 + 0] = (v162.m00 * s1177 + v162.m04 * t1177 + v162.m12) * u1177, g1177[i1177 + 1] = (v162.m01 * s1177 + v162.m05 * t1177 + v162.m13) * u1177, g1177[i1177 + 2] = (v162.m02 * s1177 + v162.m06 * t1177 + v162.m14) * u1177, a147.toArray(g1177, d1177, i1177 + 5), i1177 += 9;
                }
                e1177.bufferId;
                const j1177 = e1177.vertexOffset, k1177 = e1177.meshBuffer, l1177 = e1177.meshBuffer.iData;
                let m1177 = k1177.indexOffset;
                for (let n1177 = 0, o1177 = h1177 / 4; n1177 < o1177; n1177++) {
                    const p1177 = j1177 + 4 * n1177;
                    l1177[m1177++] = p1177, l1177[m1177++] = p1177 + 1, l1177[m1177++] = p1177 + 2, l1177[m1177++] = p1177 + 1, l1177[m1177++] = p1177 + 3, l1177[m1177++] = p1177 + 2;
                }
                k1177.indexOffset += c1177.indexCount, k1177.setDirty();
            }
            const w162 = {};
            class x162 {
                get map() {
                    return this._map;
                }
                constructor(z1176) {
                    this._map = null, this._count = 0, z1176 ? (this._map = z1176, this._count = Object.keys(z1176).length) : (this._map = j126(!0), this._count = 0);
                }
                add(x1176, y1176) {
                    return x1176 in this._map || this._count++, this._map[x1176] = y1176;
                }
                get(w1176) {
                    return this._map[w1176];
                }
                has(v1176) {
                    return v1176 in this._map;
                }
                remove(t1176) {
                    const u1176 = this._map[t1176];
                    return t1176 in this._map && (delete this._map[t1176], this._count--), u1176;
                }
                clear() {
                    0 !== this._count && (this._map = j126(!0), this._count = 0);
                }
                forEach(r1176) {
                    for (const s1176 in this._map)
                        r1176(this._map[s1176], s1176);
                }
                find(p1176) {
                    for (const q1176 in this._map)
                        if (p1176(this._map[q1176], q1176))
                            return this._map[q1176];
                    return null;
                }
                get count() {
                    return this._count;
                }
                destroy() {
                    this._map = null;
                }
            }
            class y162 {
                constructor(l1176, m1176) {
                    this.id = y162._pipelineId++, this.name = "", this.pipes = [], this.name = l1176;
                    for (let n1176 = 0, o1176 = m1176.length; n1176 < o1176; n1176++)
                        this.pipes.push(m1176[n1176]);
                }
                insert(j1176, k1176) {
                    return k1176 > this.pipes.length ? (y125(4921), this) : (this.pipes.splice(k1176, 0, j1176), this);
                }
                append(i1176) {
                    return this.pipes.push(i1176), this;
                }
                remove(h1176) {
                    return this.pipes.splice(h1176, 1), this;
                }
                sync(c1176) {
                    const d1176 = this.pipes;
                    if (0 === d1176.length)
                        return null;
                    c1176.isFinished = !1;
                    for (let e1176 = 0, f1176 = d1176.length; e1176 < f1176;) {
                        const g1176 = (0, d1176[e1176])(c1176);
                        if (g1176)
                            return c1176.isFinished = !0, g1176;
                        e1176++, e1176 !== f1176 && (c1176.input = c1176.output, c1176.output = null);
                    }
                    return c1176.isFinished = !0, c1176.output;
                }
                async(b1176) {
                    0 !== this.pipes.length && (b1176.isFinished = !1, this._flow(0, b1176));
                }
                _flow(x1175, y1175) {
                    (0, this.pipes[x1175])(y1175, a1176 => {
                        a1176 ? (y1175.isFinished = !0, y1175.dispatch("complete", a1176)) : ++x1175 < this.pipes.length ? (y1175.input = y1175.output, y1175.output = null, this._flow(x1175, y1175)) : (y1175.isFinished = !0, y1175.dispatch("complete", a1176, y1175.output));
                    });
                }
            }
            y162._pipelineId = 0;
            const z162 = new x162(), a163 = new x162(), b163 = new x162(), c163 = new x162(), d163 = new y162("normal load", []), e163 = new y162("fetch", []), f163 = new y162("transform url", []), g163 = new Map();
            let h163;
            !function (w1175) {
                w1175.UUID = "uuid", w1175.PATH = "path", w1175.DIR = "dir", w1175.URL = "url", w1175.SCENE = "scene";
            }(h163 || (h163 = {}));
            const i163 = {
                default: {
                    priority: 0
                },
                preload: {
                    maxConcurrency: 6,
                    maxRequestsPerFrame: 2,
                    priority: -1
                },
                scene: {
                    maxConcurrency: 20,
                    maxRequestsPerFrame: 20,
                    priority: 1
                },
                bundle: {
                    maxConcurrency: 20,
                    maxRequestsPerFrame: 20,
                    priority: 2
                },
                remote: {
                    maxRetryCount: 4
                }
            };
            let j163;
            !function (v1175) {
                v1175.INTERNAL = "internal", v1175.RESOURCES = "resources", v1175.MAIN = "main", v1175.START_SCENE = "start-scene";
            }(j163 || (j163 = {}));
            class k163 {
                static create(t1175) {
                    let u1175;
                    return 0 !== k163._deadPool.length ? (u1175 = k163._deadPool.pop(), u1175.set(t1175)) : u1175 = new k163(t1175), u1175;
                }
                get isFinish() {
                    return this.isFinished;
                }
                set isFinish(s1175) {
                    this.isFinished = s1175;
                }
                constructor(r1175) {
                    this.id = k163._taskId++, this.onComplete = null, this.onProgress = null, this.onError = null, this.source = null, this.output = null, this.input = null, this.progress = null, this.options = null, this.isFinished = !0, this.set(r1175);
                }
                set(q1175 = Object.create(null)) {
                    this.onComplete = q1175.onComplete || null, this.onProgress = q1175.onProgress || null, this.onError = q1175.onError || null, this.source = this.input = q1175.input, this.output = null, this.progress = q1175.progress, this.options = q1175.options || Object.create(null);
                }
                dispatch(k1175, l1175, m1175, n1175, o1175) {
                    switch (k1175) {
                        case "complete":
                            this.onComplete && this.onComplete(l1175, m1175);
                            break;
                        case "progress":
                            this.onProgress && this.onProgress(l1175, m1175, n1175, o1175);
                            break;
                        case "error":
                            this.onError && this.onError(l1175, m1175, n1175, o1175);
                            break;
                        default:
                            {
                                const p1175 = `on${k1175[0].toUpperCase()}${k1175.substr(1)}`;
                                "function" == typeof this[p1175] && this[p1175](l1175, m1175, n1175, o1175);
                                break;
                            }
                    }
                }
                recycle() {
                    k163._deadPool.length !== k163.MAX_DEAD_NUM && (this.onComplete = null, this.onProgress = null, this.onError = null, this.source = this.output = this.input = null, this.progress = null, this.options = null, k163._deadPool.push(this));
                }
            }
            k163.MAX_DEAD_NUM = 500, k163._taskId = 0, k163._deadPool = [];
            const l163 = "0123456789abcdef".split(""), m163 = ["", "", "", ""], n163 = m163.concat(m163, "-", m163, "-", m163, "-", m163, "-", m163, m163, m163), o163 = n163.map((i1175, j1175) => "-" === i1175 ? NaN : j1175).filter(Number.isFinite);
            function j134(c1175) {
                const d1175 = c1175.split("@")[0];
                if (22 !== d1175.length)
                    return c1175;
                n163[0] = c1175[0], n163[1] = c1175[1];
                for (let e1175 = 2, f1175 = 2; e1175 < 22; e1175 += 2) {
                    const g1175 = v145[c1175.charCodeAt(e1175)], h1175 = v145[c1175.charCodeAt(e1175 + 1)];
                    n163[o163[f1175++]] = l163[g1175 >> 2], n163[o163[f1175++]] = l163[(3 & g1175) << 2 | h1175 >> 4], n163[o163[f1175++]] = l163[15 & h1175];
                }
                return c1175.replace(d1175, n163.join(""));
            }
            const p163 = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,}).*/;
            function k134(a1175) {
                const b1175 = p163.exec(a1175);
                return b1175 ? b1175[1] : "";
            }
            function l134(v1174, w1174) {
                (w1174 = w1174 || Object.create(null)).__isNative__ = w1174.isNative, w1174.nativeExt && (w1174.ext = w1174.nativeExt);
                const x1174 = c163.find(z1174 => !!z1174.getAssetInfo(v1174));
                return x1174 && (w1174.bundle = x1174.name), o134(v1174, w1174);
            }
            function m134(u1174) {
                return !!u1174 && (u1174 instanceof s143.SceneAsset || u1174 instanceof s143.Scene);
            }
            function n134(t1174) {
                return t1174 && (46 === t1174.charCodeAt(0) && 47 === t1174.charCodeAt(1) ? t1174 = t1174.slice(2) : 47 === t1174.charCodeAt(0) && (t1174 = t1174.slice(1))), t1174;
            }
            function o134(k1174, l1174) {
                const m1174 = k163.create({
                    input: k1174,
                    options: l1174
                }), n1174 = [];
                try {
                    const q1174 = f163.sync(m1174);
                    for (const r1174 of q1174) {
                        const s1174 = r1174.url;
                        r1174.recycle(), n1174.push(s1174);
                    }
                }
                catch (o1174) {
                    for (const p1174 of m1174.output)
                        p1174.recycle();
                    r125(o1174.message, o1174.stack);
                }
                return m1174.recycle(), n1174.length > 1 ? n1174 : n1174[0];
            }
            var q163 = Object.freeze({
                __proto__: null,
                getUuidFromURL: k134,
                getUrlWithUuid: l134,
                isScene: m134,
                normalize: n134,
                transform: o134,
                decodeUuid: j134
            });
            const r163 = j1174 => {
                j1174();
            };
            a134(jsb.Asset, [n156, x133]);
            const s163 = jsb.Asset.prototype;
            s163._ctor = function () {
                this.loaded = !0, this._ref = 0, this.__nativeRefs = {}, this.__jsb_ref_id = void 0, this._iN$t = null, this.__editorExtras__ = {
                    editorOnly: !0
                }, this._callbackTable = j126(!0), this._file = null;
            }, Object.defineProperty(s163, "_nativeAsset", {
                get() {
                    return this._file;
                },
                set(i1174) {
                    this._file = i1174;
                }
            }), Object.defineProperty(s163, "nativeUrl", {
                get() {
                    if (!this._nativeUrl) {
                        if (!this._native)
                            return "";
                        const h1174 = this._native;
                        if (47 === h1174.charCodeAt(0))
                            return h1174.slice(1);
                        46 === h1174.charCodeAt(0) ? this._nativeUrl = l134(this._uuid, {
                            nativeExt: h1174,
                            isNative: !0
                        }) : this._nativeUrl = l134(this._uuid, {
                            __nativeName__: h1174,
                            nativeExt: i133(h1174),
                            isNative: !0
                        });
                    }
                    return this._nativeUrl;
                }
            }), Object.defineProperty(s163, "refCount", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._ref;
                }
            }), s163.addRef = function () {
                return this._ref++, this.addAssetRef(), this;
            }, s163.decRef = function (g1174 = !0) {
                return this.decAssetRef(), this._ref > 0 && this._ref--, g1174 && s143.assetManager._releaseManager.tryRelease(this), this;
            }, s163.toString = function () {
                return this.nativeUrl;
            }, s163.createNode = null;
            const t163 = g125("Asset", jsb.Asset);
            s143.Asset = jsb.Asset, function (y1173, z1173 = r163) {
                const { Asset: a1174 } = {
                    ...y1173
                }, b1174 = Object.getOwnPropertyDescriptor(a1174.prototype, "_nativeAsset");
                z1173(() => {
                    j151(a1174.prototype, "_native", () => "");
                }, "serializable", "_native"), z1173(() => {
                    u130(a1174.prototype, "_nativeAsset", b1174);
                }, "property", "_nativeAsset"), z1173(() => {
                    e151("cc.Asset")(a1174);
                }, "ccclass", null);
            }({
                Asset: t163
            });
            let u163, v163, w163;
            !function (x1173) {
                x1173[x1173.RGB565 = t157.R5G6B5] = "RGB565", x1173[x1173.RGB5A1 = t157.RGB5A1] = "RGB5A1", x1173[x1173.RGBA4444 = t157.RGBA4] = "RGBA4444", x1173[x1173.RGB888 = t157.RGB8] = "RGB888", x1173[x1173.RGB32F = t157.RGB32F] = "RGB32F", x1173[x1173.RGBA8888 = t157.RGBA8] = "RGBA8888", x1173[x1173.RGBA32F = t157.RGBA32F] = "RGBA32F", x1173[x1173.A8 = t157.A8] = "A8", x1173[x1173.I8 = t157.L8] = "I8", x1173[x1173.AI8 = t157.LA8] = "AI8", x1173[x1173.RGB_PVRTC_2BPPV1 = t157.PVRTC_RGB2] = "RGB_PVRTC_2BPPV1", x1173[x1173.RGBA_PVRTC_2BPPV1 = t157.PVRTC_RGBA2] = "RGBA_PVRTC_2BPPV1", x1173[x1173.RGB_A_PVRTC_2BPPV1 = 1024] = "RGB_A_PVRTC_2BPPV1", x1173[x1173.RGB_PVRTC_4BPPV1 = t157.PVRTC_RGB4] = "RGB_PVRTC_4BPPV1", x1173[x1173.RGBA_PVRTC_4BPPV1 = t157.PVRTC_RGBA4] = "RGBA_PVRTC_4BPPV1", x1173[x1173.RGB_A_PVRTC_4BPPV1 = 1025] = "RGB_A_PVRTC_4BPPV1", x1173[x1173.RGB_ETC1 = t157.ETC_RGB8] = "RGB_ETC1", x1173[x1173.RGBA_ETC1 = 1026] = "RGBA_ETC1", x1173[x1173.RGB_ETC2 = t157.ETC2_RGB8] = "RGB_ETC2", x1173[x1173.RGBA_ETC2 = t157.ETC2_RGBA8] = "RGBA_ETC2", x1173[x1173.RGBA_ASTC_4x4 = t157.ASTC_RGBA_4X4] = "RGBA_ASTC_4x4", x1173[x1173.RGBA_ASTC_5x4 = t157.ASTC_RGBA_5X4] = "RGBA_ASTC_5x4", x1173[x1173.RGBA_ASTC_5x5 = t157.ASTC_RGBA_5X5] = "RGBA_ASTC_5x5", x1173[x1173.RGBA_ASTC_6x5 = t157.ASTC_RGBA_6X5] = "RGBA_ASTC_6x5", x1173[x1173.RGBA_ASTC_6x6 = t157.ASTC_RGBA_6X6] = "RGBA_ASTC_6x6", x1173[x1173.RGBA_ASTC_8x5 = t157.ASTC_RGBA_8X5] = "RGBA_ASTC_8x5", x1173[x1173.RGBA_ASTC_8x6 = t157.ASTC_RGBA_8X6] = "RGBA_ASTC_8x6", x1173[x1173.RGBA_ASTC_8x8 = t157.ASTC_RGBA_8X8] = "RGBA_ASTC_8x8", x1173[x1173.RGBA_ASTC_10x5 = t157.ASTC_RGBA_10X5] = "RGBA_ASTC_10x5", x1173[x1173.RGBA_ASTC_10x6 = t157.ASTC_RGBA_10X6] = "RGBA_ASTC_10x6", x1173[x1173.RGBA_ASTC_10x8 = t157.ASTC_RGBA_10X8] = "RGBA_ASTC_10x8", x1173[x1173.RGBA_ASTC_10x10 = t157.ASTC_RGBA_10X10] = "RGBA_ASTC_10x10", x1173[x1173.RGBA_ASTC_12x10 = t157.ASTC_RGBA_12X10] = "RGBA_ASTC_12x10", x1173[x1173.RGBA_ASTC_12x12 = t157.ASTC_RGBA_12X12] = "RGBA_ASTC_12x12";
            }(u163 || (u163 = {})), function (w1173) {
                w1173[w1173.REPEAT = h158.WRAP] = "REPEAT", w1173[w1173.CLAMP_TO_EDGE = h158.CLAMP] = "CLAMP_TO_EDGE", w1173[w1173.MIRRORED_REPEAT = h158.MIRROR] = "MIRRORED_REPEAT", w1173[w1173.CLAMP_TO_BORDER = h158.BORDER] = "CLAMP_TO_BORDER";
            }(v163 || (v163 = {})), function (v1173) {
                v1173[v1173.NONE = g158.NONE] = "NONE", v1173[v1173.LINEAR = g158.LINEAR] = "LINEAR", v1173[v1173.NEAREST = g158.POINT] = "NEAREST";
            }(w163 || (w163 = {}));
            const x163 = g125("ImageAsset", jsb.ImageAsset), y163 = jsb.window, z163 = [".png", ".jpg", ".jpeg", ".bmp", ".webp", ".pvr", ".pkm", ".astc"];
            function p134(u1173) {
                return !!(i157.hasFeature(i157.Feature.IMAGE_BITMAP) && u1173 instanceof ImageBitmap);
            }
            const a164 = x163.prototype;
            a164._ctor = function (t1173) {
                jsb.Asset.prototype._ctor.apply(this, arguments), this._width = 0, this._height = 0, this._nativeData = {
                    _data: null,
                    width: 0,
                    height: 0,
                    format: 0,
                    _compressed: !1,
                    mipmapLevelDataSize: []
                }, void 0 !== t1173 && this.reset(t1173);
            }, Object.defineProperty(a164, "_nativeAsset", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._nativeData;
                },
                set(s1173) {
                    s1173 instanceof y163.HTMLElement || p134(s1173) || (s1173.format = s1173.format || this.format), this.reset(s1173);
                }
            }), Object.defineProperty(a164, "data", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._nativeData && !0 !== (r1173 = this._nativeData)._compressed && (r1173 instanceof y163.HTMLImageElement || r1173 instanceof y163.HTMLCanvasElement || p134(r1173)) ? this._nativeData : this._nativeData && this._nativeData._data;
                    var r1173;
                }
            }), a164._setRawAsset = function (p1173, q1173 = !0) {
                this._native = !1 !== q1173 ? p1173 || "" : `/${p1173}`;
            }, a164.reset = function (o1173) {
                this._nativeData = o1173, o1173 instanceof y163.HTMLElement || void 0 !== o1173.format && (this.format = o1173.format), this._syncDataToNative();
            };
            const b164 = jsb.Asset.prototype.destroy;
            var c164, d164, e164;
            a164.destroy = function () {
                return this.data && this.data instanceof y163.HTMLImageElement ? (this.data.src = "", this._setRawAsset(""), this.data.destroy()) : p134(this.data) && this.data.close && this.data.close(), b164.call(this);
            }, Object.defineProperty(a164, "width", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._nativeData.width || this._width;
                }
            }), Object.defineProperty(a164, "height", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._nativeData.height || this._height;
                }
            }), a164._syncDataToNative = function () {
                const n1173 = this._nativeData;
                if (this._width = n1173.width, this._height = n1173.height, this.setWidth(this._width), this.setHeight(this._height), this.url = this.nativeUrl, n1173 instanceof y163.HTMLCanvasElement)
                    this.setData(n1173._data.data);
                else if (n1173 instanceof y163.HTMLImageElement)
                    this.setData(n1173._data), n1173._mipmapLevelDataSize && this.setMipmapLevelDataSize(n1173._mipmapLevelDataSize);
                else {
                    if (!this._nativeData._data)
                        return void console.error(`[ImageAsset] setData bad argument ${this._nativeData}`);
                    this.setData(this._nativeData._data), this._nativeData.mipmapLevelDataSize && this.setMipmapLevelDataSize(this._nativeData.mipmapLevelDataSize);
                }
            }, a164._serialize = function () { }, a164._deserialize = function (z1172) {
                let a1173 = "";
                "string" == typeof z1172 ? a1173 = z1172 : (this._width = z1172.w, this._height = z1172.h, a1173 = z1172.fmt);
                const b1173 = b162.gfxDevice, c1173 = a1173.split("_");
                let d1173 = Number.MAX_VALUE, e1173 = this.format, f1173 = "";
                const g1173 = s145.SUPPORT_TEXTURE_FORMATS;
                for (const h1173 of c1173) {
                    const i1173 = h1173.split("@"), j1173 = parseInt(i1173[0], void 0), k1173 = z163[j1173] || i1173[0], l1173 = g1173.indexOf(k1173);
                    if (-1 !== l1173 && l1173 < d1173) {
                        const m1173 = i1173[1] ? parseInt(i1173[1]) : this.format;
                        if (!(".astc" !== k1173 || b1173 && b1173.getFormatFeatures(t157.ASTC_RGBA_4X4) & d158.SAMPLED_TEXTURE))
                            continue;
                        if (!(".pvr" !== k1173 || b1173 && b1173.getFormatFeatures(t157.PVRTC_RGBA4) & d158.SAMPLED_TEXTURE))
                            continue;
                        if (!(m1173 !== u163.RGB_ETC1 && m1173 !== u163.RGBA_ETC1 || b1173 && b1173.getFormatFeatures(t157.ETC_RGB8) & d158.SAMPLED_TEXTURE))
                            continue;
                        if (!(m1173 !== u163.RGB_ETC2 && m1173 !== u163.RGBA_ETC2 || b1173 && b1173.getFormatFeatures(t157.ETC2_RGB8) & d158.SAMPLED_TEXTURE))
                            continue;
                        if (".webp" === k1173 && !i157.hasFeature(i157.Feature.WEBP))
                            continue;
                        d1173 = l1173, f1173 = k1173, e1173 = m1173;
                    }
                }
                f1173 ? (this._setRawAsset(f1173), this.format = e1173) : y125(3121);
            }, s143.ImageAsset = jsb.ImageAsset, function (t1172, u1172 = r163) {
                const { ImageAsset: v1172 } = {
                    ...t1172
                }, w1172 = Object.getOwnPropertyDescriptor(v1172.prototype, "_nativeAsset");
                u1172(() => {
                    h152(v1172.prototype, "_nativeAsset", w1172);
                }, "override", "_nativeAsset"), u1172(() => {
                    e151("cc.ImageAsset")(v1172);
                }, "ccclass", null);
            }({
                ImageAsset: x163
            });
            let f164 = g125("Script", e151("cc.Script")(c164 = class extends t163 {
            }) || c164);
            s143._Script = f164;
            let g164 = g125("JavaScript", e151("cc.JavaScript")(d164 = class extends f164 {
            }) || d164);
            s143._JavaScript = g164;
            let h164 = g125("TypeScript", e151("cc.TypeScript")(e164 = class extends f164 {
            }) || e164);
            var i164, j164, k164, l164, m164, n164, o164;
            s143._TypeScript = h164;
            let p164 = g125("EventHandler", e151("cc.ClickEvent")((j164 = class t {
                constructor() {
                    this.target = k164 && k164(), this.component = l164 && l164(), this._componentId = m164 && m164(), this.handler = n164 && n164(), this.customEventData = o164 && o164();
                }
                get _componentName() {
                    return this._genCompIdIfNeeded(), this._compId2Name(this._componentId);
                }
                set _componentName(s1172) {
                    this._componentId = this._compName2Id(s1172);
                }
                static emitEvents(n1172, ...o1172) {
                    for (let p1172 = 0, q1172 = n1172.length; p1172 < q1172; p1172++) {
                        const r1172 = n1172[p1172];
                        r1172 instanceof t && r1172.emit(o1172);
                    }
                }
                emit(i1172) {
                    const j1172 = this.target;
                    if (!s143.isValid(j1172))
                        return;
                    this._genCompIdIfNeeded();
                    const k1172 = s143.js.getClassById(this._componentId), l1172 = j1172.getComponent(k1172);
                    if (!s143.isValid(l1172))
                        return;
                    const m1172 = l1172[this.handler];
                    "function" == typeof m1172 && (null != this.customEventData && "" !== this.customEventData && (i1172 = i1172.slice()).push(this.customEventData), m1172.apply(l1172, i1172));
                }
                _compName2Id(g1172) {
                    const h1172 = s143.js.getClassByName(g1172);
                    return s143.js.getClassId(h1172);
                }
                _compId2Name(e1172) {
                    const f1172 = s143.js.getClassById(e1172);
                    return s143.js.getClassName(f1172);
                }
                _genCompIdIfNeeded() {
                    this._componentId || (this._componentName = this.component, this.component = "");
                }
            }, k164 = p130(j164.prototype, "target", [j151], function () {
                return null;
            }), l164 = p130(j164.prototype, "component", [j151], function () {
                return "";
            }), m164 = p130(j164.prototype, "_componentId", [j151], function () {
                return "";
            }), n164 = p130(j164.prototype, "handler", [j151], function () {
                return "";
            }), o164 = p130(j164.prototype, "customEventData", [j151], function () {
                return "";
            }), i164 = j164)) || i164);
            var q164, r164, s164, t164, u164, v164, w164, x164;
            const y164 = new v144("Comp"), z164 = m152.Flags.IsOnLoadCalled;
            let a165 = g125("Component", (q164 = e151("cc.Component"), r164 = a131(f164), q164(((x164 = class extends m152 {
                constructor(...d1172) {
                    super(...d1172), this.node = u164 && u164(), this._enabled = v164 && v164(), this.__prefab = w164 && w164(), this._sceneGetter = null, this._id = y164.getNewId();
                }
                get name() {
                    if (this._name)
                        return this._name;
                    let a1172 = k126(this);
                    const b1172 = a1172.lastIndexOf(".");
                    return b1172 >= 0 && (a1172 = a1172.slice(b1172 + 1)), this.node ? `${this.node.name}<${a1172}>` : a1172;
                }
                set name(c1172) {
                    this._name = c1172;
                }
                get uuid() {
                    return this._id;
                }
                get __scriptAsset() {
                    return null;
                }
                get enabled() {
                    return this._enabled;
                }
                set enabled(y1171) {
                    if (this._enabled !== y1171 && (this._enabled = y1171, this.node.activeInHierarchy)) {
                        const z1171 = s143.director._compScheduler;
                        y1171 ? z1171.enableComp(this) : z1171.disableComp(this);
                    }
                }
                get enabledInHierarchy() {
                    return this._enabled && this.node && this.node.activeInHierarchy;
                }
                get _isOnLoadCalled() {
                    return this._objFlags & z164;
                }
                _getRenderScene() {
                    return this._sceneGetter ? this._sceneGetter() : this.node.scene.renderScene;
                }
                addComponent(x1171) {
                    return this.node.addComponent(x1171);
                }
                getComponent(w1171) {
                    return this.node.getComponent(w1171);
                }
                getComponents(v1171) {
                    return this.node.getComponents(v1171);
                }
                getComponentInChildren(u1171) {
                    return this.node.getComponentInChildren(u1171);
                }
                getComponentsInChildren(t1171) {
                    return this.node.getComponentsInChildren(t1171);
                }
                destroy() {
                    return !!super.destroy() && (this._enabled && this.node.activeInHierarchy && s143.director._compScheduler.disableComp(this), !0);
                }
                _onPreDestroy() {
                    this.unscheduleAllCallbacks(), s143.director._nodeActivator.destroyComp(this), this.node._removeComponent(this);
                }
                _instantiate(s1171) {
                    return s1171 || (s1171 = s143.instantiate._clone(this, this)), s1171 && (s1171.node = null), s1171;
                }
                schedule(m1171, n1171 = 0, o1171 = s143.macro.REPEAT_FOREVER, p1171 = 0) {
                    a126(Boolean(m1171), 1619), a126((n1171 = n1171 || 0) >= 0, 1620), o1171 = Number.isNaN(o1171) ? s143.macro.REPEAT_FOREVER : o1171, p1171 = p1171 || 0;
                    const q1171 = s143.director.getScheduler(), r1171 = q1171.isTargetPaused(this);
                    q1171.schedule(m1171, this, n1171, o1171, p1171, r1171);
                }
                scheduleOnce(k1171, l1171 = 0) {
                    this.schedule(k1171, 0, 0, l1171);
                }
                unschedule(j1171) {
                    j1171 && s143.director.getScheduler().unschedule(j1171, this);
                }
                unscheduleAllCallbacks() {
                    s143.director.getScheduler().unscheduleAllForTarget(this);
                }
                get internalUpdate() {
                    return this.update;
                }
                get internalLateUpdate() {
                    return this.lateUpdate;
                }
                get internalPreload() {
                    return this.__preload;
                }
                get internalOnLoad() {
                    return this.onLoad;
                }
                get internalStart() {
                    return this.start;
                }
                get internalOnEnable() {
                    return this.onEnable;
                }
                get internalOnDisable() {
                    return this.onDisable;
                }
                get internalOnDestroy() {
                    return this.onDestroy;
                }
            }).EventHandler = p164, x164._executionOrder = 0, x164._requireComponent = null, x164.system = null, i125((t164 = x164).prototype, "__scriptAsset", [r164], Object.getOwnPropertyDescriptor(t164.prototype, "__scriptAsset"), t164.prototype), u164 = p130(t164.prototype, "node", [j151], function () {
                return null;
            }), v164 = p130(t164.prototype, "_enabled", [j151], function () {
                return !0;
            }), w164 = p130(t164.prototype, "__prefab", [j151], function () {
                return null;
            }), s164 = t164)) || s164));
            var b165, c165, d165;
            z144(a165, "_registerEditorProps", (f1171, g1171) => {
                let h1171 = g1171.requireComponent;
                h1171 && (Array.isArray(h1171) && (h1171 = h1171.filter(Boolean)), f1171._requireComponent = h1171);
                const i1171 = g1171.executionOrder;
                i1171 && "number" == typeof i1171 && (f1171._executionOrder = i1171);
            }), s143.Component = a165;
            let e165 = g125("MissingScript", e151("cc.MissingScript")((c165 = class extends a165 {
                static safeFindClass(d1171) {
                    const e1171 = d127(d1171);
                    if (e1171)
                        return e1171;
                    s143.deserialize.reportMissingClass(d1171);
                }
                constructor() {
                    super(), this._$erialized = d165 && d165();
                }
                onLoad() {
                    y125(4600, this.node.name);
                }
            }, d165 = p130(c165.prototype, "_$erialized", [j151, k151], function () {
                return null;
            }), b165 = c165)) || b165);
            s143._MissingScript = e165;
            try {
                const c1171 = e165.__values__;
                0 !== c1171.length && "_$erialized" === c1171[c1171.length - 1] || (r125("The '_$erialized' prop in MissingScript is missing. Please contact jare."), r125(`    Error props: ['${c1171}']`));
            }
            catch (b1171) {
                r125(`Error when checking MissingScript 5, ${b1171}`);
            }
            class f165 {
                constructor(z1170, a1171) {
                    this._document = void 0, this._chunks = void 0, this._document = z1170, this._chunks = a1171;
                }
                get document() {
                    return this._document;
                }
                get chunks() {
                    return this._chunks;
                }
            }
            function q134(x1170) {
                const y1170 = x1170;
                return {
                    chunks: y1170.chunks,
                    document: y1170.document
                };
            }
            function r134(j1170) {
                if (j1170.length < 16)
                    throw new g165(b126(13102));
                const k1170 = new DataView(j1170.buffer, j1170.byteOffset, j1170.byteLength);
                if (1313817411 !== k1170.getUint32(0, !0))
                    throw new g165(b126(13100));
                const l1170 = k1170.getUint32(4, !0);
                if (1 !== l1170)
                    throw new g165(b126(13101, l1170));
                if (k1170.getUint32(8, !0) !== k1170.byteLength)
                    throw new g165(b126(13102));
                let m1170 = 12;
                const n1170 = k1170.getUint32(m1170, !0);
                m1170 += 4;
                const o1170 = new Uint8Array(k1170.buffer, m1170 + k1170.byteOffset, n1170);
                m1170 += n1170;
                const p1170 = function (v1170) {
                    if ("undefined" != typeof TextDecoder)
                        return new TextDecoder().decode(v1170);
                    if ("Buffer" in globalThis) {
                        const { Buffer: w1170 } = globalThis;
                        return w1170.from(v1170.buffer, v1170.byteOffset, v1170.byteLength).toString();
                    }
                    throw new Error(b126(13104));
                }(o1170);
                let q1170;
                try {
                    q1170 = JSON.parse(p1170);
                }
                catch (u1170) {
                    throw new g165(u1170);
                }
                const r1170 = [];
                for (; m1170 < k1170.byteLength;) {
                    m1170 % 8 != 0 && (m1170 += 8 - m1170 % 8);
                    const t1170 = k1170.getUint32(m1170, !0);
                    m1170 += 4, r1170.push(new Uint8Array(k1170.buffer, m1170 + k1170.byteOffset, t1170)), m1170 += t1170;
                }
                if (m1170 !== k1170.byteLength)
                    throw new g165(b126(13102));
                return new f165(q1170, r1170);
            }
            class g165 extends Error {
            }
            s143.internal.parseCCONJson = q134, s143.internal.decodeCCONBinary = r134, s143.internal.CCON = f165;
            const h165 = s128.Attr.DELIMETER, i165 = `${h165}type`, j165 = `${h165}default`, k165 = `${h165}formerlySerializedAs`;
            function s134(g1170, h1170) {
                if (void 0 === g1170)
                    return h1170 instanceof s128.Attr.PrimitiveType || h1170 === i146 || h1170 === j146;
                {
                    const i1170 = typeof g1170;
                    return "string" === i1170 || "number" === i1170 || "boolean" === i1170;
                }
            }
            class l165 extends j145 {
                constructor() {
                    super(f1170 => {
                        f1170.clear();
                    }, 1);
                }
            }
            l165.prototype.get = function (y1169, z1169, a1170, b1170, c1170) {
                const d1170 = this._get();
                return d1170 ? (d1170.reset(y1169, z1169, a1170, b1170, c1170), d1170) : new m165(y1169, z1169, a1170, b1170, c1170);
            };
            class m165 {
                get ignoreEditorOnly() {
                    return this._ignoreEditorOnly;
                }
                constructor(t1169, u1169, v1169, w1169, x1169) {
                    this.deserializedList = void 0, this.deserializedData = void 0, this._ignoreEditorOnly = void 0, this.result = t1169, this.customEnv = w1169, this.deserializedList = [], this.deserializedData = null, this._classFinder = u1169, this._reportMissingClass = v1169, this._onDereferenced = null == u1169 ? void 0 : u1169.onDereferenced;
                }
                reset(o1169, p1169, q1169, r1169, s1169) {
                    this.result = o1169, this.customEnv = r1169, this._classFinder = p1169, this._reportMissingClass = q1169, this._onDereferenced = null == p1169 ? void 0 : p1169.onDereferenced;
                }
                clear() {
                    this.result = null, this.customEnv = null, this.deserializedList.length = 0, this.deserializedData = null, this._classFinder = null, this._reportMissingClass = null, this._onDereferenced = null;
                }
                deserialize(k1169) {
                    let l1169, m1169 = !1;
                    k1169 instanceof f165 ? (m1169 = !0, l1169 = k1169.document, k1169.chunks.length > 0 && (k1169.chunks.length, this._mainBinChunk = k1169.chunks[0])) : l1169 = k1169, this._serializedData = l1169, this._context = {
                        fromCCON: m1169
                    };
                    const n1169 = Array.isArray(l1169) ? l1169[0] : l1169;
                    return this.deserializedData = this._deserializeObject(n1169, 0), this._serializedData = void 0, this._mainBinChunk = void 0, this._context = void 0, this.deserializedData;
                }
                _deserializeObject(g1169, h1169, i1169, j1169) {
                    switch (g1169.__type__) {
                        case "TypedArray":
                            return this._deserializeTypedArrayView(g1169);
                        case "TypedArrayRef":
                            return this._deserializeTypedArrayViewRef(g1169);
                        default:
                            return g1169.__type__ ? this._deserializeTypeTaggedObject(g1169, h1169, i1169, j1169) : Array.isArray(g1169) ? this._deserializeArray(g1169) : this._deserializePlainObject(g1169);
                    }
                }
                _deserializeTypedArrayView(f1169) {
                    return globalThis[f1169.ctor].from(f1169.array);
                }
                _deserializeTypedArrayViewRef(b1169) {
                    const { offset: c1169, length: d1169, ctor: e1169 } = b1169;
                    return new globalThis[e1169](this._mainBinChunk.buffer, this._mainBinChunk.byteOffset + c1169, d1169);
                }
                _deserializeArray(x1168) {
                    const y1168 = new Array(x1168.length);
                    let z1168;
                    for (let a1169 = 0; a1169 < x1168.length; a1169++)
                        z1168 = x1168[a1169], "object" == typeof z1168 && z1168 ? this._deserializeAndAssignField(y1168, z1168, `${a1169}`) && (y1168[a1169] = null) : y1168[a1169] = z1168;
                    return y1168;
                }
                _deserializePlainObject(v1168) {
                    const w1168 = {};
                    return this._fillPlainObject(w1168, v1168), w1168;
                }
                _deserializeTypeTaggedObject(l1168, m1168, n1168, o1168) {
                    const p1168 = l1168.__type__, q1168 = this._classFinder(p1168, l1168, n1168, o1168);
                    if (!q1168)
                        return this._classFinder === d127 && this._reportMissingClass(p1168), null;
                    {
                        const r1168 = (t1168 => {
                            const u1168 = new t1168();
                            return m1168 >= 0 && (this.deserializedList[m1168] = u1168), u1168;
                        })(q1168);
                        return this._deserializeInto(l1168, r1168, q1168), r1168;
                    }
                }
                _deserializeInto(h1168, i1168, j1168, k1168 = !1) {
                    k1168 || !i1168[y152] ? i1168._deserialize ? i1168._deserialize(h1168.content, this) : s143.Class._isCCClass(j1168) ? this._deserializeFireClass(i1168, h1168, j1168) : this._deserializeFastDefinedObject(i1168, h1168, j1168) : this._runCustomizedDeserialize(h1168, i1168, j1168);
                }
                _runCustomizedDeserialize(a1168, b1168, c1168) {
                    const d1168 = {
                        readProperty: f1168 => {
                            const g1168 = a1168[f1168];
                            return "object" == typeof g1168 && g1168 ? this._deserializeObjectField(g1168) : g1168;
                        },
                        readThis: () => {
                            this._deserializeInto(a1168, b1168, c1168, !0);
                        },
                        readSuper: () => {
                            const e1168 = v126(c1168);
                            e1168 && this._deserializeInto(a1168, b1168, e1168);
                        }
                    };
                    b1168[y152](d1168, this._context);
                }
                _deserializeFireClass(i1166, j1166, k1166) {
                    let l1166;
                    if (k1166.hasOwnProperty("__deserialize__"))
                        l1166 = k1166.__deserialize__;
                    else {
                        l1166 = function (v1166, w1166) {
                            const x1166 = function (z1167) {
                                return t145.test(g127(z1167));
                            }(w1166), y1166 = w126(w1166, s143.Node) || w126(w1166, s143.Component);
                            let z1166 = !1;
                            const a1167 = [];
                            let b1167 = a1167;
                            const c1167 = [];
                            let d1167 = c1167;
                            const e1167 = [];
                            return (() => {
                                const r1167 = w1166.__values__;
                                z1166 = "_$erialized" === r1167[r1167.length - 1];
                                const s1167 = s128.Attr.getClassAttrs(w1166);
                                for (let t1167 = 0; t1167 < r1167.length; t1167++) {
                                    const u1167 = r1167[t1167];
                                    let v1167 = u1167;
                                    s1167[u1167 + k165] && (v1167 = s1167[u1167 + k165]);
                                    const w1167 = s128.getDefault(s1167[u1167 + j165]), x1167 = s1167[u1167 + i165];
                                    let y1167 = !1;
                                    x1166 && (void 0 !== w1167 || x1167) && (y1167 = s134(w1167, x1167)), y1167 ? (v1167 !== u1167 && b1167 === a1167 && (b1167 = a1167.slice()), a1167.push(u1167), b1167 !== a1167 && b1167.push(v1167)) : (v1167 !== u1167 && d1167 === c1167 && (d1167 = c1167.slice()), c1167.push(u1167), d1167 !== c1167 && d1167.push(v1167), e1167.push(w1167 instanceof s143.ValueType && w1167.constructor));
                                }
                            })(), (i1167, j1167, k1167) => {
                                for (let p1167 = 0; p1167 < a1167.length; ++p1167) {
                                    const q1167 = k1167[b1167[p1167]];
                                    void 0 !== q1167 && (j1167[a1167[p1167]] = q1167);
                                }
                                for (let l1167 = 0; l1167 < c1167.length; ++l1167) {
                                    const m1167 = c1167[l1167], n1167 = k1167[d1167[l1167]];
                                    if (void 0 !== n1167)
                                        if (x1166 || "object" == typeof n1167) {
                                            const o1167 = e1167[l1167];
                                            o1167 ? x1166 || n1167 ? i1167._deserializeFastDefinedObject(j1167[m1167], n1167, o1167) : j1167[m1167] = null : n1167 ? i1167._deserializeAndAssignField(j1167, n1167, m1167) : j1167[m1167] = null;
                                        }
                                        else
                                            j1167[m1167] = n1167;
                                }
                                y1166 && k1167._id && (j1167._id = k1167._id), z1166 && (j1167._$erialized = JSON.parse(JSON.stringify(k1167)), i1167._fillPlainObject(j1167._$erialized, k1167));
                            };
                        }(0, k1166);
                        try {
                            if (k1166 === e165) {
                                const o1166 = k1166.__values__;
                                0 !== o1166.length && "_$erialized" === o1166[o1166.length - 1] || (r125("The '_$erialized' prop of MissingScript is missing. Will force the raw data to be save."), r125(`    Error props: ['${o1166}']. Please contact jare.`));
                                const p1166 = l1166;
                                l1166 = function (r1166, s1166, t1166, u1166) {
                                    p1166(r1166, s1166, t1166, u1166), s1166._$erialized || r125(`Unable to stash previously serialized data. ${JSON.stringify(t1166)}`);
                                };
                            }
                        }
                        catch (n1166) {
                            r125(`Error when checking MissingScript 6, ${n1166}`);
                        }
                        z144(k1166, "__deserialize__", l1166, !0);
                    }
                    l1166(this, i1166, j1166, k1166);
                }
                _deserializeAndAssignField(z1165, a1166, b1166) {
                    const c1166 = a1166.__id__;
                    if ("number" == typeof c1166) {
                        const g1166 = this.deserializedList[c1166];
                        if (g1166)
                            z1165[b1166] = g1166;
                        else {
                            var d1166;
                            const h1166 = this._serializedData[c1166];
                            z1165[b1166] = this._deserializeObject(h1166, c1166, void 0, b1166), null === (d1166 = this._onDereferenced) || void 0 === d1166 || d1166.call(this, this.deserializedList, c1166, z1165, b1166);
                        }
                    }
                    else {
                        const e1166 = a1166.__uuid__;
                        if (e1166) {
                            const f1166 = a1166.__expectedType__;
                            this.result.push(z1165, b1166, e1166, f1166);
                        }
                        else
                            z1165[b1166] = this._deserializeObject(a1166, -1);
                    }
                    return !1;
                }
                _deserializeObjectField(v1165) {
                    const w1165 = v1165.__id__;
                    if ("number" == typeof w1165) {
                        const x1165 = this.deserializedList[w1165];
                        if (x1165)
                            return x1165;
                        {
                            const y1165 = this._serializedData[w1165];
                            return this._deserializeObject(y1165, w1165, void 0, void 0);
                        }
                    }
                    if (v1165.__uuid__)
                        throw v1165.__expectedType__, new Error("Asset reference field serialization is currently not supported in custom serialization.");
                    return this._deserializeObject(v1165, -1);
                }
                _fillPlainObject(r1165, s1165) {
                    for (const t1165 in s1165) {
                        if (!s1165.hasOwnProperty(t1165))
                            continue;
                        const u1165 = s1165[t1165];
                        "object" != typeof u1165 ? "__type__" !== t1165 && (r1165[t1165] = u1165) : u1165 ? this._deserializeAndAssignField(r1165, u1165, t1165) && (r1165[t1165] = null) : r1165[t1165] = null;
                    }
                }
                _deserializeFastDefinedObject(i1165, j1165, k1165) {
                    if (k1165 === s143.Vec2)
                        return i1165.x = j1165.x || 0, void (i1165.y = j1165.y || 0);
                    if (k1165 === s143.Vec3)
                        return i1165.x = j1165.x || 0, i1165.y = j1165.y || 0, void (i1165.z = j1165.z || 0);
                    if (k1165 === s143.Color) {
                        i1165.r = j1165.r || 0, i1165.g = j1165.g || 0, i1165.b = j1165.b || 0;
                        const q1165 = j1165.a;
                        return void (i1165.a = void 0 === q1165 ? 255 : q1165);
                    }
                    if (k1165 === s143.Size)
                        return i1165.width = j1165.width || 0, void (i1165.height = j1165.height || 0);
                    const l1165 = s128.Attr.getClassAttrs(k1165), m1165 = k1165.__values__;
                    for (let n1165 = 0; n1165 < m1165.length; n1165++) {
                        const o1165 = m1165[n1165];
                        let p1165 = j1165[o1165];
                        void 0 !== p1165 || j1165.hasOwnProperty(o1165) || (p1165 = s128.getDefault(l1165[o1165 + j165])), "object" != typeof p1165 ? i1165[o1165] = p1165 : p1165 ? this._deserializeAndAssignField(i1165, p1165, o1165) : i1165[o1165] = null;
                    }
                }
            }
            m165.pool = new l165();
            const n165 = [s147, w146, v146, g147, a147, x147, y147, o147];
            function t134(g1165, h1165) {
                g1165.x = h1165[1], g1165.y = h1165[2], g1165.z = h1165[3], g1165.w = h1165[4];
            }
            const o165 = [(e1165, f1165) => {
                    e1165.x = f1165[1], e1165.y = f1165[2];
                }, (c1165, d1165) => {
                    c1165.x = d1165[1], c1165.y = d1165[2], c1165.z = d1165[3];
                }, t134, t134, (a1165, b1165) => {
                    a1165._val = b1165[1];
                }, (y1164, z1164) => {
                    y1164.width = z1164[1], y1164.height = z1164[2];
                }, (w1164, x1164) => {
                    w1164.x = x1164[1], w1164.y = x1164[2], w1164.width = x1164[3], w1164.height = x1164[4];
                }, (u1164, v1164) => {
                    o147.fromArray(u1164, v1164, 1);
                }];
            class p165 {
                constructor() {
                    this.uuidObjList = null, this.uuidPropList = null, this.uuidList = null, this.uuidTypeList = [];
                }
                init(t1164) {
                    t1164 ? (this.uuidObjList = t1164[8], this.uuidPropList = t1164[9], this.uuidList = t1164[10]) : this.uuidList || (this.uuidList = [], this.uuidObjList = [], this.uuidPropList = [], this.uuidTypeList = []);
                }
                reset() {
                    this.uuidList && (this.uuidList.length = 0, this.uuidObjList.length = 0, this.uuidPropList.length = 0, this.uuidTypeList.length = 0);
                }
                push(p1164, q1164, r1164, s1164) {
                    this.uuidObjList.push(p1164), this.uuidPropList.push(q1164), this.uuidList.push(r1164), this.uuidTypeList.push(s1164 || "");
                }
            }
            function u134(e1164, f1164) {
                const g1164 = e1164[4][f1164[0]], h1164 = g1164[0], i1164 = new (0, h1164[0])(), j1164 = h1164[1], k1164 = h1164[2], l1164 = g1164[g1164.length - 1];
                let m1164 = 1;
                for (; m1164 < l1164; ++m1164)
                    i1164[j1164[g1164[m1164]]] = f1164[m1164];
                for (; m1164 < f1164.length; ++m1164) {
                    const n1164 = j1164[g1164[m1164]], o1164 = h1164[g1164[m1164] + k1164];
                    (0, q165[o1164])(e1164, i1164, n1164, f1164[m1164]);
                }
                return i1164;
            }
            function v134(a1164, b1164, c1164) {
                const d1164 = new b1164();
                return d1164._deserialize ? d1164._deserialize(c1164, a1164[0]) : z125(5303, k126(b1164)), d1164;
            }
            function w134(w1163, x1163, y1163, z1163) {
                z1163 >= 0 ? x1163[y1163] = w1163[5][z1163] : w1163[7][3 * ~z1163] = x1163;
            }
            function x134(p1163) {
                return (r1163, s1163, t1163, u1163) => {
                    for (let v1163 = 0; v1163 < u1163.length; ++v1163)
                        p1163(r1163, u1163, v1163, u1163[v1163]);
                    s1163[t1163] = u1163;
                };
            }
            function y134(l1163, m1163, n1163, o1163) {
                m1163[n1163] = null, l1163[8][o1163] = m1163;
            }
            function z134(h1163, i1163, j1163, k1163) {
                i1163[j1163] = u134(h1163, k1163);
            }
            g125("Details", p165), p165.pool = new j145(g1163 => {
                g1163.reset();
            }, 5), p165.pool.get = function () {
                return this._get() || new p165();
            };
            const q165 = new Array(13);
            function a135(d1163, e1163, f1163) {
                return d1163 || f1163(e1163), Object;
            }
            function b135(q1162, r1162, s1162, t1162, u1162, v1162, w1162) {
                let x1162 = q1162(r1162);
                if (!x1162) {
                    if (u1162)
                        return void (s1162[t1162] = (y1162 = s1162, z1162 = t1162, a1163 = r1162, function () {
                            const c1163 = q1162(a1163) || a135(v1162, a1163, w1162);
                            return y1162[z1162] = c1163, new c1163();
                        }));
                    x1162 = a135(v1162, r1162, w1162);
                }
                var y1162, z1162, a1163;
                s1162[t1162] = x1162;
            }
            function c135(i1162, j1162, k1162, l1162) {
                const m1162 = k1162 || d127, n1162 = i1162[3];
                for (let o1162 = 0; o1162 < n1162.length; ++o1162) {
                    const p1162 = n1162[o1162];
                    "string" != typeof p1162 ? b135(m1162, p1162[0], p1162, 0, j1162, k1162, l1162) : b135(m1162, p1162, n1162, o1162, j1162, k1162, l1162);
                }
            }
            function d135(d1162) {
                const e1162 = d1162[4];
                if (e1162) {
                    const f1162 = d1162[3];
                    for (let g1162 = 0; g1162 < e1162.length; ++g1162) {
                        const h1162 = e1162[g1162];
                        h1162[0] = f1162[h1162[0]];
                    }
                }
            }
            function e135(i1159, j1159, k1159) {
                "string" == typeof i1159 && (i1159 = JSON.parse(i1159));
                let l1159, m1159 = !1;
                if (j1159 || (j1159 = p165.pool.get(), m1159 = !0), function (b1162) {
                    if (Array.isArray(b1162)) {
                        const c1162 = b1162[0];
                        return "number" == typeof c1162 || c1162 instanceof r165;
                    }
                    return !1;
                }(i1159)) {
                    !function (t1161, u1161, v1161) {
                        var w1161;
                        u1161.init(t1161), null !== (w1161 = v1161) && void 0 !== w1161 || (v1161 = {});
                        let x1161 = t1161[0], y1161 = !1;
                        if ("object" == typeof x1161 && (y1161 = x1161.preprocessed, x1161 = x1161.version), x1161 < 1)
                            throw new Error(b126(5304, x1161));
                        const z1161 = v1161;
                        var a1162;
                        z1161._version = x1161, z1161.result = u1161, t1161[0] = z1161, y1161 || (c135(t1161, !1, v1161.classFinder, null !== (a1162 = v1161.reportMissingClass) && void 0 !== a1162 ? a1162 : e135.reportMissingClass), d135(t1161));
                    }(i1159, j1159, k1159);
                    const d1160 = i1159;
                    s143.game._isCloning = !0;
                    const e1160 = d1160[5], f1160 = function (h1161) {
                        const i1161 = h1161[5], j1161 = h1161[6], k1161 = 0 === j1161 ? 0 : j1161.length;
                        let l1161 = i1161[i1161.length - 1], m1161 = i1161.length - k1161;
                        "number" != typeof l1161 ? l1161 = 0 : (l1161 < 0 && (l1161 = ~l1161), --m1161);
                        let n1161 = 0;
                        for (; n1161 < m1161; ++n1161)
                            i1161[n1161] = u134(h1161, i1161[n1161]);
                        const o1161 = h1161[3];
                        for (let p1161 = 0; p1161 < k1161; ++p1161, ++n1161) {
                            let q1161 = j1161[p1161];
                            const r1161 = i1161[n1161];
                            if (q1161 >= 0) {
                                const s1161 = o1161[q1161];
                                i1161[n1161] = v134(h1161, s1161, r1161);
                            }
                            else
                                q1161 = ~q1161, (0, q165[q1161])(h1161, i1161, n1161, r1161);
                        }
                        return l1161;
                    }(d1160);
                    s143.game._isCloning = !1, d1160[7] && function (v1160, w1160, x1160) {
                        const y1160 = v1160.length - 1;
                        let z1160 = 0;
                        const a1161 = 3 * v1160[y1160];
                        for (; z1160 < a1161; z1160 += 3) {
                            const e1161 = v1160[z1160], f1161 = w1160[v1160[z1160 + 2]], g1161 = v1160[z1160 + 1];
                            g1161 >= 0 ? e1161[x1160[g1161]] = f1161 : e1161[~g1161] = f1161;
                        }
                        for (; z1160 < y1160; z1160 += 3) {
                            const b1161 = w1160[v1160[z1160]], c1161 = w1160[v1160[z1160 + 2]], d1161 = v1160[z1160 + 1];
                            d1161 >= 0 ? b1161[x1160[d1161]] = c1161 : b1161[~d1161] = c1161;
                        }
                    }(d1160[7], e1160, d1160[2]), function (k1160) {
                        const l1160 = k1160[5], m1160 = k1160[2], n1160 = k1160[1], o1160 = k1160[8], p1160 = k1160[9], q1160 = k1160[10];
                        for (let r1160 = 0; r1160 < o1160.length; ++r1160) {
                            const s1160 = o1160[r1160];
                            "number" == typeof s1160 && (o1160[r1160] = l1160[s1160]);
                            let t1160 = p1160[r1160];
                            "number" == typeof t1160 && (t1160 = t1160 >= 0 ? m1160[t1160] : ~t1160, p1160[r1160] = t1160);
                            const u1160 = q1160[r1160];
                            "number" == typeof u1160 && (q1160[r1160] = n1160[u1160]);
                        }
                    }(d1160), l1159 = e1160[f1160];
                }
                else
                    l1159 = function (p1159, q1159, r1159) {
                        var s1159;
                        const t1159 = (r1159 = r1159 || {}).classFinder || d127, u1159 = r1159.createAssetRefs || i157.platform === u156.EDITOR_CORE, v1159 = r1159.customEnv, w1159 = r1159.ignoreEditorOnly, x1159 = null !== (s1159 = r1159.reportMissingClass) && void 0 !== s1159 ? s1159 : s143.deserialize.reportMissingClass;
                        q1159.init();
                        const y1159 = m165.pool.get(q1159, t1159, x1159, v1159, w1159);
                        s143.game._isCloning = !0;
                        const z1159 = y1159.deserialize(p1159);
                        return s143.game._isCloning = !1, m165.pool.put(y1159), u1159 && q1159.assignAssetsBy((b1160, c1160) => EditorExtends.serialize.asAsset(b1160, c1160.type)), z1159;
                    }(i1159, j1159, k1159);
                return m1159 && p165.pool.put(j1159), l1159;
            }
            q165[0] = function (e1159, f1159, g1159, h1159) {
                f1159[g1159] = h1159;
            }, q165[1] = w134, q165[2] = x134(w134), q165[3] = x134(y134), q165[4] = z134, q165[5] = function (y1158, z1158, a1159, b1159) {
                const c1159 = b1159[0];
                {
                    const d1159 = z1158[a1159];
                    (0, o165[c1159])(d1159, b1159), z1158[a1159] = d1159;
                }
            }, q165[6] = y134, q165[7] = function (u1158, v1158, w1158, x1158) {
                v1158[w1158].set(x1158);
            }, q165[8] = function (o1158, p1158, q1158, r1158) {
                const s1158 = r1158[0], t1158 = new n165[s1158]();
                (0, o165[s1158])(t1158, r1158), p1158[q1158] = t1158;
            }, q165[9] = x134(z134), q165[10] = function (j1158, k1158, l1158, m1158) {
                const n1158 = j1158[3][m1158[0]];
                k1158[l1158] = v134(j1158, n1158, m1158[1]);
            }, q165[11] = function (a1158, b1158, c1158, d1158) {
                const e1158 = d1158[0];
                b1158[c1158] = e1158;
                for (let f1158 = 1; f1158 < d1158.length; f1158 += 3) {
                    const g1158 = d1158[f1158], h1158 = d1158[f1158 + 1], i1158 = d1158[f1158 + 2];
                    (0, q165[h1158])(a1158, e1158, g1158, i1158);
                }
            }, q165[12] = function (s1157, t1157, u1157, v1157) {
                const w1157 = v1157[0];
                for (let x1157 = 0; x1157 < w1157.length; ++x1157) {
                    const y1157 = w1157[x1157], z1157 = v1157[x1157 + 1];
                    0 !== z1157 && (0, q165[z1157])(s1157, w1157, x1157, y1157);
                }
                t1157[u1157] = w1157;
            }, e135.Details = p165, e135.reportMissingClass = function (r1157) {
                z125(5302, r1157);
            };
            class r165 {
                constructor(q1157) {
                    this.preprocessed = !0, this.version = q1157;
                }
            }
            function f135(n1157, o1157, p1157) {
                return [1, 0, 0, [n1157], 0, p1157 ? [o1157, -1] : [o1157], [0], 0, [], [], []];
            }
            s143.deserialize = e135;
            const s165 = new WeakMap(), t165 = new WeakSet(), u165 = new WeakSet();
            function g135(a1157, b1157) {
                let c1157;
                c1157 = e165.safeFindClass;
                const d1157 = p165.pool.get();
                let e1157;
                try {
                    e1157 = e135(a1157, d1157, {
                        classFinder: c1157,
                        customEnv: b1157
                    });
                }
                catch (m1157) {
                    throw r125(m1157), p165.pool.put(d1157), m1157;
                }
                e1157._uuid = b1157.__uuid__ || "";
                const f1157 = d1157.uuidList, g1157 = d1157.uuidObjList, h1157 = d1157.uuidPropList, i1157 = d1157.uuidTypeList || [], j1157 = [];
                for (let k1157 = 0; k1157 < f1157.length; k1157++) {
                    const l1157 = f1157[k1157];
                    j1157[k1157] = {
                        uuid: j134(l1157),
                        owner: g1157[k1157],
                        prop: h1157[k1157],
                        type: d127(i1157[k1157])
                    };
                }
                return s165.set(e1157, j1157), e1157._native && t165.add(e1157), p165.pool.put(d1157), e1157;
            }
            class v165 {
                static get instance() {
                    return this._instance || (this._instance = new v165()), this._instance;
                }
                constructor() {
                    this._depends = new x162();
                }
                init() {
                    this._depends.clear();
                }
                getNativeDep(y1156) {
                    const z1156 = this._depends.get(y1156);
                    return z1156 && z1156.nativeDep ? {
                        ...z1156.nativeDep
                    } : null;
                }
                getDeps(x1156) {
                    return this._depends.has(x1156) ? this._depends.get(x1156).deps : [];
                }
                getDepsRecursively(u1156) {
                    const v1156 = Object.create(null), w1156 = [];
                    return this._descend(u1156, v1156, w1156), w1156;
                }
                remove(t1156) {
                    this._depends.remove(t1156);
                }
                parse(k1156, l1156) {
                    let m1156 = null;
                    if (Array.isArray(l1156) || l1156.__type__ || l1156 instanceof f165) {
                        if (this._depends.has(k1156))
                            return this._depends.get(k1156);
                        if (Array.isArray(l1156) && !function (q1156) {
                            const r1156 = q1156[5], s1156 = r1156[r1156.length - 1];
                            return "number" == typeof s1156 && s1156 < 0;
                        }(l1156))
                            m1156 = {
                                deps: this._parseDepsFromJson(l1156)
                            };
                        else
                            try {
                                const p1156 = g135(l1156, {
                                    __uuid__: k1156
                                });
                                m1156 = this._parseDepsFromAsset(p1156), m1156.nativeDep && (m1156.nativeDep.uuid = k1156), b163.add(`${k1156}@import`, p1156);
                            }
                            catch (o1156) {
                                a163.remove(`${k1156}@import`), m1156 = {
                                    deps: []
                                };
                            }
                    }
                    else {
                        if (this._depends.has(k1156) && (m1156 = this._depends.get(k1156), m1156.parsedFromExistAsset))
                            return m1156;
                        m1156 = this._parseDepsFromAsset(l1156);
                    }
                    return this._depends.add(k1156, m1156), m1156;
                }
                _parseDepsFromAsset(f1156) {
                    const g1156 = {
                        deps: [],
                        parsedFromExistAsset: !0
                    }, h1156 = s165.get(f1156);
                    for (let i1156 = 0, j1156 = h1156.length; i1156 < j1156; i1156++)
                        g1156.deps.push(h1156[i1156].uuid);
                    return t165.has(f1156) && (g1156.nativeDep = f1156._nativeDep), g1156;
                }
                _parseDepsFromJson(v1155) {
                    const w1155 = function (b1156) {
                        const c1156 = b1156[1];
                        return b1156[10].map(e1156 => c1156[e1156]);
                    }(v1155);
                    return w1155.forEach((z1155, a1156) => w1155[a1156] = j134(z1155)), w1155;
                }
                _descend(p1155, q1155, r1155) {
                    const s1155 = this.getDeps(p1155);
                    for (let t1155 = 0; t1155 < s1155.length; t1155++) {
                        const u1155 = s1155[t1155];
                        q1155[u1155] || (q1155[u1155] = !0, r1155.push(u1155), this._descend(u1155, q1155, r1155));
                    }
                }
            }
            v165._instance = void 0;
            var w165 = v165.instance;
            const x165 = jsb.TextureBase.prototype;
            x165._serialize = function () {
                return "";
            }, x165._deserialize = function (n1155) {
                const o1155 = n1155.split(",");
                o1155.unshift(""), o1155.length >= 5 && (this.setFilters(parseInt(o1155[1]), parseInt(o1155[2])), this.setWrapMode(parseInt(o1155[3]), parseInt(o1155[4]))), o1155.length >= 7 && (this.setMipFilter(parseInt(o1155[5])), this.setAnisotropy(parseInt(o1155[6])));
            }, x165._getGFXDevice = function () {
                return b162.gfxDevice;
            }, x165._getGFXFormat = function () {
                return this._getGFXPixelFormat(this.format);
            }, x165._setGFXFormat = function (m1155) {
                this.format = void 0 === m1155 ? u163.RGBA8888 : m1155;
            }, x165._getGFXPixelFormat = function (l1155) {
                return l1155 === u163.RGBA_ETC1 ? l1155 = u163.RGB_ETC1 : l1155 === u163.RGB_A_PVRTC_4BPPV1 ? l1155 = u163.RGB_PVRTC_4BPPV1 : l1155 === u163.RGB_A_PVRTC_2BPPV1 && (l1155 = u163.RGB_PVRTC_2BPPV1), l1155;
            }, x165.createNode = null;
            const y165 = jsb.TextureBase;
            y165.Filter = w163, y165.PixelFormat = u163, y165.WrapMode = v163, x165._ctor = function () {
                jsb.Asset.prototype._ctor.apply(this, arguments), this._gfxSampler = null, this._samplerInfo = null, this._textureHash = 0, this._registerGFXSamplerUpdatedListener();
            };
            const z165 = x165.getGFXSampler;
            x165.getGFXSampler = function () {
                return this._gfxSampler || (this._gfxSampler = z165.call(this)), this._gfxSampler;
            };
            const a166 = x165.getHash;
            x165.getHash = function () {
                return 0 === this._textureHash && (this._textureHash = a166.call(this)), this._textureHash;
            };
            const b166 = x165.getSamplerInfo;
            x165.getSamplerInfo = function () {
                return this._samplerInfo || (this._samplerInfo = b166.call(this)), this._samplerInfo;
            };
            const c166 = x165.destroy;
            x165.destroy = function () {
                var k1155;
                return null !== (k1155 = s143.director.root) && void 0 !== k1155 && k1155.batcher2D && s143.director.root.batcher2D._releaseDescriptorSetCache(this.getGFXTexture(), this.getGFXSampler()), c166.call(this);
            }, x165._onGFXSamplerUpdated = function (i1155, j1155) {
                this._gfxSampler = i1155, this._samplerInfo = j1155;
            }, s143.TextureBase = jsb.TextureBase, function (l1154, m1154 = r163) {
                const { TextureBase: n1154, PixelFormat: o1154, Filter: p1154, WrapMode: q1154 } = {
                    ...l1154
                };
                m1154(() => {
                    j151(n1154.prototype, "_format", () => o1154.RGBA8888);
                }, "serializable", "_format"), m1154(() => {
                    j151(n1154.prototype, "_minFilter", () => p1154.LINEAR);
                }, "serializable", "_minFilter"), m1154(() => {
                    j151(n1154.prototype, "_magFilter", () => p1154.LINEAR);
                }, "serializable", "_magFilter"), m1154(() => {
                    j151(n1154.prototype, "_mipFilter", () => p1154.NONE);
                }, "serializable", "_mipFilter"), m1154(() => {
                    j151(n1154.prototype, "_wrapS", () => q1154.REPEAT);
                }, "serializable", "_wrapS"), m1154(() => {
                    j151(n1154.prototype, "_wrapT", () => q1154.REPEAT);
                }, "serializable", "_wrapT"), m1154(() => {
                    j151(n1154.prototype, "_wrapR", () => q1154.REPEAT);
                }, "serializable", "_wrapR"), m1154(() => {
                    j151(n1154.prototype, "_anisotropy", () => 0);
                }, "serializable", "_anisotropy"), m1154(() => {
                    e151("cc.TextureBase")(n1154);
                }, "ccclass", null);
            }({
                TextureBase: y165,
                Filter: w163,
                WrapMode: v163,
                PixelFormat: u163
            });
            const d166 = jsb.SimpleTexture, e166 = jsb.window;
            d166.Filter = w163, d166.PixelFormat = u163, d166.WrapMode = v163;
            const f166 = jsb.SimpleTexture.prototype, g166 = f166.uploadData;
            f166.uploadData = function (h1154, i1154 = 0, j1154 = 0) {
                let k1154;
                h1154 instanceof e166.HTMLCanvasElement ? k1154 = h1154.data : h1154 instanceof e166.HTMLImageElement ? k1154 = h1154._data : ArrayBuffer.isView(h1154) && (k1154 = h1154.buffer), g166.call(this, k1154, i1154, j1154);
            }, f166._ctor = function () {
                jsb.TextureBase.prototype._ctor.apply(this, arguments), this._gfxTexture = null, this._registerListeners();
            };
            const h166 = f166.getGFXTexture;
            f166.getGFXTexture = function () {
                return this._gfxTexture || (this._gfxTexture = h166.call(this)), this._gfxTexture;
            }, f166._onGFXTextureUpdated = function (g1154) {
                this._gfxTexture = g1154;
            }, f166._onAfterAssignImage = function (d1154) {
                if (s145.CLEANUP_IMAGE_CACHE) {
                    const e1154 = w165.getDeps(this._uuid), f1154 = e1154.indexOf(d1154._uuid);
                    -1 !== f1154 && (i127(e1154, f1154), d1154.decRef());
                }
            }, function (z1153, a1154 = r163) {
                const { SimpleTexture: b1154 } = {
                    ...z1153
                };
                a1154(() => {
                    e151("cc.SimpleTexture")(b1154);
                }, "ccclass", null);
            }({
                SimpleTexture: d166
            }), s143.SimpleTexture = jsb.SimpleTexture;
            const i166 = jsb.Texture2D.prototype;
            i166.createNode = null;
            const j166 = g125("Texture2D", jsb.Texture2D);
            j166.Filter = w163, j166.PixelFormat = u163, j166.WrapMode = v163, i166._ctor = function () {
                d166.prototype._ctor.apply(this, arguments), this._mipmaps = [];
            }, i166._serialize = function () {
                return null;
            }, i166._deserialize = function (u1153, v1153) {
                const w1153 = u1153;
                y165.prototype._deserialize.call(this, w1153.base, void 0), this._mipmaps = new Array(w1153.mipmaps.length);
                for (let x1153 = 0; x1153 < w1153.mipmaps.length; ++x1153) {
                    if (this._mipmaps[x1153] = new x163(), !w1153.mipmaps[x1153])
                        continue;
                    const y1153 = w1153.mipmaps[x1153];
                    v1153.result.push(this._mipmaps, `${x1153}`, y1153, g127(x163));
                }
            };
            const k166 = i166.onLoaded;
            i166.onLoaded = function () {
                this.syncMipmapsForJS(this._mipmaps), k166.call(this);
            }, Object.defineProperty(i166, "image", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return 0 === this._mipmaps.length ? null : this._mipmaps[0];
                },
                set(t1153) {
                    this.mipmaps = t1153 ? [t1153] : [];
                }
            }), Object.defineProperty(i166, "mipmaps", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._mipmaps;
                },
                set(q1153) {
                    for (let r1153 = 0, s1153 = q1153.length; r1153 < s1153; ++r1153)
                        q1153[r1153]._syncDataToNative();
                    this._mipmaps = q1153, this.setMipmaps(q1153);
                }
            }), s143.Texture2D = jsb.Texture2D, function (j1153, k1153 = r163) {
                const { Texture2D: l1153, ImageAsset: m1153 } = {
                    ...j1153
                };
                k1153(() => {
                    a131([m1153])(l1153.prototype, "_mipmaps", () => []);
                }, "type", "_mipmaps"), k1153(() => {
                    e151("cc.Texture2D")(l1153);
                }, "ccclass", null);
            }({
                Texture2D: j166,
                ImageAsset: x163
            });
            class l166 {
                constructor(g1153, h1153) {
                    this._texture = void 0, this._width = void 0, this._height = void 0, this._x = void 0, this._y = void 0, this._nexty = void 0, this._innerTextureInfos = {}, this._innerSpriteFrames = void 0, this._count = void 0;
                    const i1153 = new m166();
                    i1153.initWithSize(g1153, h1153), this._texture = i1153, this._width = g1153, this._height = h1153, this._x = 2, this._y = 2, this._nexty = 2, this._innerTextureInfos = {}, this._innerSpriteFrames = [], this._count = 0;
                }
                insertSpriteFrame(x1152) {
                    const y1152 = x1152.rect, z1152 = x1152.texture, a1153 = this._innerTextureInfos[z1152.getId()];
                    let b1153 = y1152.x, c1153 = y1152.y;
                    if (a1153)
                        b1153 += a1153.x, c1153 += a1153.y;
                    else {
                        const e1153 = z1152.width, f1153 = z1152.height;
                        if (this._x + e1153 + 2 > this._width && (this._x = 2, this._y = this._nexty), this._y + f1153 + 2 > this._nexty && (this._nexty = this._y + f1153 + 2), this._nexty > this._height)
                            return null;
                        s143.internal.dynamicAtlasManager.textureBleeding && ((e1153 <= 8 || f1153 <= 8) && (this._texture.drawTextureAt(z1152.image, this._x - 1, this._y - 1), this._texture.drawTextureAt(z1152.image, this._x - 1, this._y + 1), this._texture.drawTextureAt(z1152.image, this._x + 1, this._y - 1), this._texture.drawTextureAt(z1152.image, this._x + 1, this._y + 1)), this._texture.drawTextureAt(z1152.image, this._x - 1, this._y), this._texture.drawTextureAt(z1152.image, this._x + 1, this._y), this._texture.drawTextureAt(z1152.image, this._x, this._y - 1), this._texture.drawTextureAt(z1152.image, this._x, this._y + 1)), this._texture.drawTextureAt(z1152.image, this._x, this._y), this._innerTextureInfos[z1152.getId()] = {
                            x: this._x,
                            y: this._y,
                            texture: z1152
                        }, this._count++, b1153 += this._x, c1153 += this._y, this._x += e1153 + 2;
                    }
                    const d1153 = {
                        x: b1153,
                        y: c1153,
                        texture: this._texture
                    };
                    return this._innerSpriteFrames.push(x1152), d1153;
                }
                deleteInnerTexture(w1152) {
                    w1152 && this._innerTextureInfos[w1152.getId()] && (delete this._innerTextureInfos[w1152.getId()], this._count--);
                }
                isEmpty() {
                    return this._count <= 0;
                }
                reset() {
                    this._x = 2, this._y = 2, this._nexty = 2;
                    const s1152 = this._innerSpriteFrames;
                    for (let t1152 = 0, u1152 = s1152.length; t1152 < u1152; t1152++) {
                        const v1152 = s1152[t1152];
                        v1152.isValid && v1152._resetDynamicAtlasFrame();
                    }
                    this._innerSpriteFrames.length = 0, this._innerTextureInfos = {};
                }
                destroy() {
                    this.reset(), this._texture.destroy();
                }
            }
            class m166 extends j166 {
                initWithSize(p1152, q1152, r1152 = u163.RGBA8888) {
                    this.reset({
                        width: p1152,
                        height: q1152,
                        format: r1152
                    });
                }
                drawTextureAt(j1152, k1152, l1152) {
                    const m1152 = this.getGFXTexture();
                    if (!j1152 || !m1152)
                        return;
                    const n1152 = this._getGFXDevice();
                    if (!n1152)
                        return void console.warn("Unable to get device");
                    const o1152 = new r159();
                    o1152.texOffset.x = k1152, o1152.texOffset.y = l1152, o1152.texExtent.width = j1152.width, o1152.texExtent.height = j1152.height, n1152.copyTexImagesToTexture([j1152.data], m1152, [o1152]);
                }
            }
            const n166 = g125("SceneAsset", jsb.SceneAsset);
            s143.SceneAsset = n166;
            const o166 = n166.prototype;
            Object.defineProperty(o166, "scene", {
                enumerable: !0,
                configurable: !0,
                get() {
                    return this._scene || (this._scene = this.getScene()), this._scene;
                },
                set(i1152) {
                    this._scene = i1152, this.setScene(i1152);
                }
            }), o166._ctor = function () {
                jsb.Asset.prototype._ctor.apply(this, arguments), this._scene = null;
            }, function (b1152, c1152 = r163) {
                const { SceneAsset: d1152 } = {
                    ...b1152
                };
                c1152(() => {
                    j151(d1152.prototype, "scene", () => null);
                }, "serializable", "scene"), c1152(() => {
                    s151(d1152.prototype);
                }, "editable", "scene"), c1152(() => {
                    e151("cc.SceneAsset")(d1152);
                }, "ccclass", null);
            }({
                SceneAsset: n166
            }), e126({
                SystemEventType: {
                    newName: "Input.EventType",
                    since: "3.3.0",
                    removed: !1
                }
            }), e126({
                SystemEvent: {
                    newName: "Input",
                    since: "3.4.0",
                    removed: !1
                },
                systemEvent: {
                    newName: "input",
                    since: "3.4.0",
                    removed: !1
                }
            });
            class p166 {
                constructor(z1151, a1152) {
                    this.type = void 0, this.bubbles = void 0, this.target = null, this.currentTarget = null, this.eventPhase = 0, this.propagationStopped = !1, this.propagationImmediateStopped = !1, this.type = z1151, this.bubbles = !!a1152;
                }
                unuse() {
                    this.type = p166.NO_TYPE, this.target = null, this.currentTarget = null, this.eventPhase = p166.NONE, this.propagationStopped = !1, this.propagationImmediateStopped = !1;
                }
                reuse(x1151, y1151) {
                    this.type = x1151, this.bubbles = y1151 || !1;
                }
                isStopped() {
                    return this.propagationStopped || this.propagationImmediateStopped;
                }
                getCurrentTarget() {
                    return this.currentTarget;
                }
                getType() {
                    return this.type;
                }
            }
            let q166, r166;
            g125("Event", p166), p166.NO_TYPE = "no_type", p166.TOUCH = "touch", p166.MOUSE = "mouse", p166.KEYBOARD = "keyboard", p166.ACCELERATION = "acceleration", p166.NONE = 0, p166.CAPTURING_PHASE = 1, p166.AT_TARGET = 2, p166.BUBBLING_PHASE = 3, s143.Event = p166, g125("SystemEventType", q166), function (w1151) {
                w1151.TOUCH_START = "touch-start", w1151.TOUCH_MOVE = "touch-move", w1151.TOUCH_END = "touch-end", w1151.TOUCH_CANCEL = "touch-cancel", w1151.MOUSE_DOWN = "mouse-down", w1151.MOUSE_MOVE = "mouse-move", w1151.MOUSE_UP = "mouse-up", w1151.MOUSE_WHEEL = "mouse-wheel", w1151.MOUSE_ENTER = "mouse-enter", w1151.MOUSE_LEAVE = "mouse-leave", w1151.KEY_DOWN = "keydown", w1151.KEY_UP = "keyup", w1151.DEVICEMOTION = "devicemotion", w1151.TRANSFORM_CHANGED = "transform-changed", w1151.SCENE_CHANGED_FOR_PERSISTS = "scene-changed-for-persists", w1151.SIZE_CHANGED = "size-changed", w1151.ANCHOR_CHANGED = "anchor-changed", w1151.COLOR_CHANGED = "color-changed", w1151.CHILD_ADDED = "child-added", w1151.CHILD_REMOVED = "child-removed", w1151.PARENT_CHANGED = "parent-changed", w1151.NODE_DESTROYED = "node-destroyed", w1151.LAYER_CHANGED = "layer-changed", w1151.SIBLING_ORDER_CHANGED = "sibling-order-changed";
            }(q166 || g125("SystemEventType", q166 = {})), function (v1151) {
                v1151.TOUCH_START = "touch-start", v1151.TOUCH_MOVE = "touch-move", v1151.TOUCH_END = "touch-end", v1151.TOUCH_CANCEL = "touch-cancel", v1151.MOUSE_DOWN = "mouse-down", v1151.MOUSE_MOVE = "mouse-move", v1151.MOUSE_UP = "mouse-up", v1151.MOUSE_WHEEL = "mouse-wheel", v1151.KEY_DOWN = "keydown", v1151.KEY_PRESSING = "key-pressing", v1151.KEY_UP = "keyup", v1151.DEVICEMOTION = "devicemotion", v1151.GAMEPAD_INPUT = "gamepad-input", v1151.GAMEPAD_CHANGE = "gamepad-change", v1151.HANDLE_INPUT = "handle-input", v1151.HANDLE_POSE_INPUT = "handle-pose-input", v1151.HMD_POSE_INPUT = "hmd-pose-input", v1151.HANDHELD_POSE_INPUT = "handheld-pose-input";
            }(r166 || (r166 = {})), s143.SystemEventType = q166;
            class s166 extends p166 {
                constructor(t1151, u1151) {
                    super(q166.DEVICEMOTION, u1151), this.acc = void 0, this.acc = t1151;
                }
            }
            g125("EventAcceleration", s166), p166.EventAcceleration = s166;
            class t166 extends p166 {
                get isPressed() {
                    return this._isPressed;
                }
                constructor(q1151, r1151, s1151) {
                    "boolean" == typeof r1151 && (r1151 = r1151 ? q166.KEY_DOWN : q166.KEY_UP), super(r1151, s1151), this.windowId = void 0, this.keyCode = void 0, this.rawEvent = void 0, this._isPressed = void 0, this._isPressed = r1151 !== q166.KEY_UP, "number" == typeof q1151 ? this.keyCode = q1151 : (this.keyCode = q1151.keyCode, this.rawEvent = q1151), this.windowId = 0;
                }
            }
            g125("EventKeyboard", t166), p166.EventKeyboard = t166;
            class u166 extends p166 {
                get eventType() {
                    return this._eventType;
                }
                constructor(m1151, n1151, o1151, p1151) {
                    super(m1151, n1151), this.movementX = 0, this.movementY = 0, this.windowId = 0, this.preventSwallow = !1, this._eventType = void 0, this._button = u166.BUTTON_MISSING, this._x = 0, this._y = 0, this._prevX = 0, this._prevY = 0, this._scrollX = 0, this._scrollY = 0, this._eventType = m1151, o1151 && (this._prevX = o1151.x, this._prevY = o1151.y), this.windowId = null != p1151 ? p1151 : this.windowId;
                }
                setScrollData(k1151, l1151) {
                    this._scrollX = k1151, this._scrollY = l1151;
                }
                getScrollX() {
                    return this._scrollX;
                }
                getScrollY() {
                    return this._scrollY;
                }
                setLocation(i1151, j1151) {
                    this._x = i1151, this._y = j1151;
                }
                getLocation(h1151) {
                    return h1151 || (h1151 = new s147()), s147.set(h1151, this._x, this._y), h1151;
                }
                getLocationInView(g1151) {
                    return g1151 || (g1151 = new s147()), s147.set(g1151, this._x, s143.view._designResolutionSize.height - this._y), g1151;
                }
                getUILocation(f1151) {
                    return f1151 || (f1151 = new s147()), s147.set(f1151, this._x, this._y), s143.view._convertToUISpace(f1151), f1151;
                }
                getPreviousLocation(e1151) {
                    return e1151 || (e1151 = new s147()), s147.set(e1151, this._prevX, this._prevY), e1151;
                }
                getUIPreviousLocation(d1151) {
                    return d1151 || (d1151 = new s147()), s147.set(d1151, this._prevX, this._prevY), s143.view._convertToUISpace(d1151), d1151;
                }
                getDelta(c1151) {
                    return c1151 || (c1151 = new s147()), s147.set(c1151, this._x - this._prevX, this._y - this._prevY), c1151;
                }
                getDeltaX() {
                    return this._x - this._prevX;
                }
                getDeltaY() {
                    return this._y - this._prevY;
                }
                getUIDelta(b1151) {
                    return b1151 || (b1151 = new s147()), s147.set(b1151, (this._x - this._prevX) / s143.view.getScaleX(), (this._y - this._prevY) / s143.view.getScaleY()), b1151;
                }
                getUIDeltaX() {
                    return (this._x - this._prevX) / s143.view.getScaleX();
                }
                getUIDeltaY() {
                    return (this._y - this._prevY) / s143.view.getScaleY();
                }
                setButton(a1151) {
                    this._button = a1151;
                }
                getButton() {
                    return this._button;
                }
                getLocationX() {
                    return this._x;
                }
                getLocationY() {
                    return this._y;
                }
                getUILocationX() {
                    const z1150 = s143.view.getViewportRect();
                    return (this._x - z1150.x) / s143.view.getScaleX();
                }
                getUILocationY() {
                    const y1150 = s143.view.getViewportRect();
                    return (this._y - y1150.y) / s143.view.getScaleY();
                }
            }
            g125("EventMouse", u166), u166.BUTTON_MISSING = -1, u166.BUTTON_LEFT = 0, u166.BUTTON_RIGHT = 2, u166.BUTTON_MIDDLE = 1, u166.BUTTON_4 = 3, u166.BUTTON_5 = 4, u166.BUTTON_6 = 5, u166.BUTTON_7 = 6, u166.BUTTON_8 = 7, p166.EventMouse = u166;
            const v166 = new s147();
            class w166 extends p166 {
                constructor(u1150, v1150, w1150, x1150 = []) {
                    super(w1150, v1150), this.touch = null, this.simulate = !1, this.windowId = 0, this.preventSwallow = !1, this._eventCode = void 0, this._touches = void 0, this._allTouches = void 0, this._eventCode = w1150, this._touches = u1150 || [], this._allTouches = x1150;
                }
                getEventCode() {
                    return this._eventCode;
                }
                getTouches() {
                    return this._touches;
                }
                getAllTouches() {
                    return this._allTouches;
                }
                setLocation(s1150, t1150) {
                    this.touch && this.touch.setTouchInfo(this.touch.getID(), s1150, t1150);
                }
                getLocation(r1150) {
                    return this.touch ? this.touch.getLocation(r1150) : new s147();
                }
                getUILocation(q1150) {
                    return this.touch ? this.touch.getUILocation(q1150) : new s147();
                }
                getLocationInView(p1150) {
                    return this.touch ? this.touch.getLocationInView(p1150) : new s147();
                }
                getPreviousLocation(o1150) {
                    return this.touch ? this.touch.getPreviousLocation(o1150) : new s147();
                }
                getStartLocation(n1150) {
                    return this.touch ? this.touch.getStartLocation(n1150) : new s147();
                }
                getUIStartLocation(m1150) {
                    return this.touch ? this.touch.getUIStartLocation(m1150) : new s147();
                }
                getID() {
                    return this.touch ? this.touch.getID() : null;
                }
                getDelta(l1150) {
                    return this.touch ? this.touch.getDelta(l1150) : new s147();
                }
                getUIDelta(k1150) {
                    return this.touch ? this.touch.getUIDelta(k1150) : new s147();
                }
                getDeltaX() {
                    return this.touch ? this.touch.getDelta(v166).x : 0;
                }
                getDeltaY() {
                    return this.touch ? this.touch.getDelta(v166).y : 0;
                }
                getLocationX() {
                    return this.touch ? this.touch.getLocationX() : 0;
                }
                getLocationY() {
                    return this.touch ? this.touch.getLocationY() : 0;
                }
            }
            g125("EventTouch", w166), w166.MAX_TOUCHES = 5, p166.EventTouch = w166;
            class x166 extends p166 {
                constructor(i1150, j1150) {
                    super(i1150, !1), this.gamepad = void 0, this.gamepad = j1150;
                }
            }
            g125("EventGamepad", x166);
            class y166 extends p166 {
                constructor(g1150, h1150) {
                    super(g1150, !1), this.handleInputDevice = void 0, this.handleInputDevice = h1150;
                }
            }
            g125("EventHandle", y166);
            class z166 extends p166 {
                constructor(e1150, f1150) {
                    super(e1150, !1), this.hmdInputDevice = void 0, this.hmdInputDevice = f1150;
                }
            }
            g125("EventHMD", z166);
            class a167 extends p166 {
                constructor(c1150, d1150) {
                    super(c1150, !1), this.handheldInputDevice = void 0, this.handheldInputDevice = d1150;
                }
            }
            g125("EventHandheld", a167);
            class b167 {
                constructor(y1149 = 0, z1149 = 0, a1150 = 0, b1150 = 0) {
                    this.x = void 0, this.y = void 0, this.z = void 0, this.timestamp = void 0, this.x = y1149, this.y = z1149, this.z = a1150, this.timestamp = b1150;
                }
            }
            let c167;
            g125("Acceleration", b167), g125("KeyCode", c167), function (x1149) {
                x1149[x1149.NONE = 0] = "NONE", x1149[x1149.MOBILE_BACK = 6] = "MOBILE_BACK", x1149[x1149.BACKSPACE = 8] = "BACKSPACE", x1149[x1149.TAB = 9] = "TAB", x1149[x1149.ENTER = 13] = "ENTER", x1149[x1149.SHIFT_LEFT = 16] = "SHIFT_LEFT", x1149[x1149.CTRL_LEFT = 17] = "CTRL_LEFT", x1149[x1149.ALT_LEFT = 18] = "ALT_LEFT", x1149[x1149.PAUSE = 19] = "PAUSE", x1149[x1149.CAPS_LOCK = 20] = "CAPS_LOCK", x1149[x1149.ESCAPE = 27] = "ESCAPE", x1149[x1149.SPACE = 32] = "SPACE", x1149[x1149.PAGE_UP = 33] = "PAGE_UP", x1149[x1149.PAGE_DOWN = 34] = "PAGE_DOWN", x1149[x1149.END = 35] = "END", x1149[x1149.HOME = 36] = "HOME", x1149[x1149.ARROW_LEFT = 37] = "ARROW_LEFT", x1149[x1149.ARROW_UP = 38] = "ARROW_UP", x1149[x1149.ARROW_RIGHT = 39] = "ARROW_RIGHT", x1149[x1149.ARROW_DOWN = 40] = "ARROW_DOWN", x1149[x1149.INSERT = 45] = "INSERT", x1149[x1149.DELETE = 46] = "DELETE", x1149[x1149.DIGIT_0 = 48] = "DIGIT_0", x1149[x1149.DIGIT_1 = 49] = "DIGIT_1", x1149[x1149.DIGIT_2 = 50] = "DIGIT_2", x1149[x1149.DIGIT_3 = 51] = "DIGIT_3", x1149[x1149.DIGIT_4 = 52] = "DIGIT_4", x1149[x1149.DIGIT_5 = 53] = "DIGIT_5", x1149[x1149.DIGIT_6 = 54] = "DIGIT_6", x1149[x1149.DIGIT_7 = 55] = "DIGIT_7", x1149[x1149.DIGIT_8 = 56] = "DIGIT_8", x1149[x1149.DIGIT_9 = 57] = "DIGIT_9", x1149[x1149.KEY_A = 65] = "KEY_A", x1149[x1149.KEY_B = 66] = "KEY_B", x1149[x1149.KEY_C = 67] = "KEY_C", x1149[x1149.KEY_D = 68] = "KEY_D", x1149[x1149.KEY_E = 69] = "KEY_E", x1149[x1149.KEY_F = 70] = "KEY_F", x1149[x1149.KEY_G = 71] = "KEY_G", x1149[x1149.KEY_H = 72] = "KEY_H", x1149[x1149.KEY_I = 73] = "KEY_I", x1149[x1149.KEY_J = 74] = "KEY_J", x1149[x1149.KEY_K = 75] = "KEY_K", x1149[x1149.KEY_L = 76] = "KEY_L", x1149[x1149.KEY_M = 77] = "KEY_M", x1149[x1149.KEY_N = 78] = "KEY_N", x1149[x1149.KEY_O = 79] = "KEY_O", x1149[x1149.KEY_P = 80] = "KEY_P", x1149[x1149.KEY_Q = 81] = "KEY_Q", x1149[x1149.KEY_R = 82] = "KEY_R", x1149[x1149.KEY_S = 83] = "KEY_S", x1149[x1149.KEY_T = 84] = "KEY_T", x1149[x1149.KEY_U = 85] = "KEY_U", x1149[x1149.KEY_V = 86] = "KEY_V", x1149[x1149.KEY_W = 87] = "KEY_W", x1149[x1149.KEY_X = 88] = "KEY_X", x1149[x1149.KEY_Y = 89] = "KEY_Y", x1149[x1149.KEY_Z = 90] = "KEY_Z", x1149[x1149.NUM_0 = 96] = "NUM_0", x1149[x1149.NUM_1 = 97] = "NUM_1", x1149[x1149.NUM_2 = 98] = "NUM_2", x1149[x1149.NUM_3 = 99] = "NUM_3", x1149[x1149.NUM_4 = 100] = "NUM_4", x1149[x1149.NUM_5 = 101] = "NUM_5", x1149[x1149.NUM_6 = 102] = "NUM_6", x1149[x1149.NUM_7 = 103] = "NUM_7", x1149[x1149.NUM_8 = 104] = "NUM_8", x1149[x1149.NUM_9 = 105] = "NUM_9", x1149[x1149.NUM_MULTIPLY = 106] = "NUM_MULTIPLY", x1149[x1149.NUM_PLUS = 107] = "NUM_PLUS", x1149[x1149.NUM_SUBTRACT = 109] = "NUM_SUBTRACT", x1149[x1149.NUM_DECIMAL = 110] = "NUM_DECIMAL", x1149[x1149.NUM_DIVIDE = 111] = "NUM_DIVIDE", x1149[x1149.F1 = 112] = "F1", x1149[x1149.F2 = 113] = "F2", x1149[x1149.F3 = 114] = "F3", x1149[x1149.F4 = 115] = "F4", x1149[x1149.F5 = 116] = "F5", x1149[x1149.F6 = 117] = "F6", x1149[x1149.F7 = 118] = "F7", x1149[x1149.F8 = 119] = "F8", x1149[x1149.F9 = 120] = "F9", x1149[x1149.F10 = 121] = "F10", x1149[x1149.F11 = 122] = "F11", x1149[x1149.F12 = 123] = "F12", x1149[x1149.NUM_LOCK = 144] = "NUM_LOCK", x1149[x1149.SCROLL_LOCK = 145] = "SCROLL_LOCK", x1149[x1149.SEMICOLON = 186] = "SEMICOLON", x1149[x1149.EQUAL = 187] = "EQUAL", x1149[x1149.COMMA = 188] = "COMMA", x1149[x1149.DASH = 189] = "DASH", x1149[x1149.PERIOD = 190] = "PERIOD", x1149[x1149.SLASH = 191] = "SLASH", x1149[x1149.BACK_QUOTE = 192] = "BACK_QUOTE", x1149[x1149.BRACKET_LEFT = 219] = "BRACKET_LEFT", x1149[x1149.BACKSLASH = 220] = "BACKSLASH", x1149[x1149.BRACKET_RIGHT = 221] = "BRACKET_RIGHT", x1149[x1149.QUOTE = 222] = "QUOTE", x1149[x1149.SHIFT_RIGHT = 2e3] = "SHIFT_RIGHT", x1149[x1149.CTRL_RIGHT = 2001] = "CTRL_RIGHT", x1149[x1149.ALT_RIGHT = 2002] = "ALT_RIGHT", x1149[x1149.NUM_ENTER = 2003] = "NUM_ENTER";
            }(c167 || g125("KeyCode", c167 = {}));
            const d167 = new s147();
            class e167 {
                get lastModified() {
                    return this._lastModified;
                }
                constructor(u1149, v1149, w1149 = 0) {
                    this._point = new s147(), this._prevPoint = new s147(), this._lastModified = 0, this._id = 0, this._startPoint = new s147(), this._startPointCaptured = !1, this.setTouchInfo(w1149, u1149, v1149);
                }
                getLocation(t1149) {
                    return t1149 || (t1149 = new s147()), t1149.set(this._point.x, this._point.y), t1149;
                }
                getLocationX() {
                    return this._point.x;
                }
                getLocationY() {
                    return this._point.y;
                }
                getUILocation(s1149) {
                    return s1149 || (s1149 = new s147()), s1149.set(this._point.x, this._point.y), s143.view._convertToUISpace(s1149), s1149;
                }
                getUILocationX() {
                    const r1149 = s143.view.getViewportRect();
                    return (this._point.x - r1149.x) / s143.view.getScaleX();
                }
                getUILocationY() {
                    const q1149 = s143.view.getViewportRect();
                    return (this._point.y - q1149.y) / s143.view.getScaleY();
                }
                getPreviousLocation(p1149) {
                    return p1149 || (p1149 = new s147()), p1149.set(this._prevPoint.x, this._prevPoint.y), p1149;
                }
                getUIPreviousLocation(o1149) {
                    return o1149 || (o1149 = new s147()), o1149.set(this._prevPoint.x, this._prevPoint.y), s143.view._convertToUISpace(o1149), o1149;
                }
                getStartLocation(n1149) {
                    return n1149 || (n1149 = new s147()), n1149.set(this._startPoint.x, this._startPoint.y), n1149;
                }
                getUIStartLocation(m1149) {
                    return m1149 || (m1149 = new s147()), m1149.set(this._startPoint.x, this._startPoint.y), s143.view._convertToUISpace(m1149), m1149;
                }
                getDelta(l1149) {
                    return l1149 || (l1149 = new s147()), l1149.set(this._point), l1149.subtract(this._prevPoint), l1149;
                }
                getUIDelta(k1149) {
                    return k1149 || (k1149 = new s147()), d167.set(this._point), d167.subtract(this._prevPoint), k1149.set(s143.view.getScaleX(), s143.view.getScaleY()), s147.divide(k1149, d167, k1149), k1149;
                }
                getLocationInView(j1149) {
                    return j1149 || (j1149 = new s147()), j1149.set(this._point.x, s143.view._designResolutionSize.height - this._point.y), j1149;
                }
                getPreviousLocationInView(i1149) {
                    return i1149 || (i1149 = new s147()), i1149.set(this._prevPoint.x, s143.view._designResolutionSize.height - this._prevPoint.y), i1149;
                }
                getStartLocationInView(h1149) {
                    return h1149 || (h1149 = new s147()), h1149.set(this._startPoint.x, s143.view._designResolutionSize.height - this._startPoint.y), h1149;
                }
                getID() {
                    return this._id;
                }
                setTouchInfo(e1149 = 0, f1149 = 0, g1149 = 0) {
                    this._prevPoint = this._point, this._point = new s147(f1149 || 0, g1149 || 0), this._id = e1149, this._startPointCaptured || (this._startPoint = new s147(this._point), this._startPointCaptured = !0);
                }
                setPoint(c1149, d1149) {
                    "object" == typeof c1149 ? (this._point.x = c1149.x, this._point.y = c1149.y) : (this._point.x = c1149 || 0, this._point.y = d1149 || 0), this._lastModified = s143.game.frameStartTime;
                }
                setPrevPoint(a1149, b1149) {
                    this._prevPoint = "object" == typeof a1149 ? new s147(a1149.x, a1149.y) : new s147(a1149 || 0, b1149 || 0), this._lastModified = s143.game.frameStartTime;
                }
                clone() {
                    const y1148 = this.getID();
                    this.getStartLocation(d167);
                    const z1148 = new e167(d167.x, d167.y, y1148);
                    return this.getLocation(d167), z1148.setPoint(d167.x, d167.y), this.getPreviousLocation(d167), z1148.setPrevPoint(d167), z1148;
                }
            }
            g125("Touch", e167), s143.Touch = e167;
            class f167 {
                constructor() {
                    this._intervalInSeconds = .2, this._intervalId = void 0, this._isEnabled = !1, this._eventTarget = new o156(), this._didAccelerateFunc = void 0, this._didAccelerateFunc = this._didAccelerate.bind(this);
                }
                _didAccelerate() {
                    const p1148 = jsb.device.getDeviceMotionValue();
                    let q1148 = .1 * p1148[3], r1148 = .1 * p1148[4];
                    const s1148 = .1 * p1148[5], t1148 = g157.orientation, u1148 = q1148;
                    t1148 === e157.LANDSCAPE_RIGHT ? (q1148 = -r1148, r1148 = u1148) : t1148 === e157.LANDSCAPE_LEFT ? (q1148 = r1148, r1148 = -u1148) : t1148 === e157.PORTRAIT_UPSIDE_DOWN && (q1148 = -q1148, r1148 = -r1148), y156.os !== t156.ANDROID && y156.os !== t156.OHOS && y156.os !== t156.OPENHARMONY || (q1148 = -q1148, r1148 = -r1148);
                    const v1148 = performance.now(), w1148 = new b167(q1148, r1148, s1148, v1148), x1148 = new s166(w1148);
                    this._eventTarget.emit(r166.DEVICEMOTION, x1148);
                }
                start() {
                    this._intervalId && clearInterval(this._intervalId), this._intervalId = setInterval(this._didAccelerateFunc, 1e3 * this._intervalInSeconds), jsb.device.setAccelerometerInterval(this._intervalInSeconds), jsb.device.setAccelerometerEnabled(!0), this._isEnabled = !0;
                }
                stop() {
                    this._intervalId && (clearInterval(this._intervalId), this._intervalId = void 0), jsb.device.setAccelerometerEnabled(!1), this._isEnabled = !1;
                }
                setInterval(o1148) {
                    this._intervalInSeconds = o1148 / 1e3, jsb.device.setAccelerometerInterval(this._intervalInSeconds), this._isEnabled && (jsb.device.setAccelerometerEnabled(!1), jsb.device.setAccelerometerEnabled(!0));
                }
                on(l1148, m1148, n1148) {
                    this._eventTarget.on(l1148, m1148, n1148);
                }
            }
            class g167 {
            }
            class h167 extends g167 {
                getValue() {
                    throw new Error("Method not implemented.");
                }
            }
            class i167 extends g167 {
                getValue() {
                    throw new Error("Method not implemented.");
                }
            }
            class j167 extends g167 {
                getValue() {
                    throw new Error("Method not implemented.");
                }
            }
            class k167 extends g167 {
                getValue() {
                    throw new Error("Method not implemented.");
                }
            }
            class l167 extends h167 {
                constructor(k1148) {
                    super(), this.positive = void 0, this.negative = void 0, this.positive = k1148.positive, this.negative = k1148.negative;
                }
                getValue() {
                    const i1148 = this.positive.getValue(), j1148 = this.negative.getValue();
                    return Math.abs(i1148) > Math.abs(j1148) ? i1148 : -j1148;
                }
            }
            class m167 extends i167 {
                constructor(h1148) {
                    super(), this.up = void 0, this.down = void 0, this.left = void 0, this.right = void 0, this.xAxis = void 0, this.yAxis = void 0, this.up = h1148.up, this.down = h1148.down, this.left = h1148.left, this.right = h1148.right, this.xAxis = new l167({
                        positive: this.right,
                        negative: this.left
                    }), this.yAxis = new l167({
                        positive: this.up,
                        negative: this.down
                    });
                }
                getValue() {
                    return new s147(this.xAxis.getValue(), this.yAxis.getValue());
                }
            }
            class n167 extends h167 {
                getValue() {
                    return super.getValue();
                }
            }
            class o167 extends m167 {
            }
            class p167 extends m167 {
            }
            class q167 extends k167 {
                getValue() {
                    return super.getValue();
                }
            }
            class r167 extends j167 {
                getValue() {
                    return super.getValue();
                }
            }
            class s167 extends h167 {
                getValue() {
                    return super.getValue();
                }
            }
            var t167;
            !function (g1148) {
                g1148[g1148.BUTTON_SOUTH = 0] = "BUTTON_SOUTH", g1148[g1148.BUTTON_EAST = 1] = "BUTTON_EAST", g1148[g1148.BUTTON_WEST = 2] = "BUTTON_WEST", g1148[g1148.BUTTON_NORTH = 3] = "BUTTON_NORTH", g1148[g1148.NS_MINUS = 4] = "NS_MINUS", g1148[g1148.NS_PLUS = 5] = "NS_PLUS", g1148[g1148.BUTTON_L1 = 6] = "BUTTON_L1", g1148[g1148.BUTTON_L2 = 7] = "BUTTON_L2", g1148[g1148.BUTTON_L3 = 8] = "BUTTON_L3", g1148[g1148.BUTTON_R1 = 9] = "BUTTON_R1", g1148[g1148.BUTTON_R2 = 10] = "BUTTON_R2", g1148[g1148.BUTTON_R3 = 11] = "BUTTON_R3", g1148[g1148.DPAD_UP = 12] = "DPAD_UP", g1148[g1148.DPAD_DOWN = 13] = "DPAD_DOWN", g1148[g1148.DPAD_LEFT = 14] = "DPAD_LEFT", g1148[g1148.DPAD_RIGHT = 15] = "DPAD_RIGHT", g1148[g1148.LEFT_STICK_UP = 16] = "LEFT_STICK_UP", g1148[g1148.LEFT_STICK_DOWN = 17] = "LEFT_STICK_DOWN", g1148[g1148.LEFT_STICK_LEFT = 18] = "LEFT_STICK_LEFT", g1148[g1148.LEFT_STICK_RIGHT = 19] = "LEFT_STICK_RIGHT", g1148[g1148.RIGHT_STICK_UP = 20] = "RIGHT_STICK_UP", g1148[g1148.RIGHT_STICK_DOWN = 21] = "RIGHT_STICK_DOWN", g1148[g1148.RIGHT_STICK_LEFT = 22] = "RIGHT_STICK_LEFT", g1148[g1148.RIGHT_STICK_RIGHT = 23] = "RIGHT_STICK_RIGHT", g1148[g1148.ROKID_MENU = 24] = "ROKID_MENU", g1148[g1148.ROKID_START = 25] = "ROKID_START";
            }(t167 || (t167 = {}));
            const u167 = {
                1: t167.BUTTON_EAST,
                2: t167.BUTTON_SOUTH,
                3: t167.BUTTON_NORTH,
                4: t167.BUTTON_WEST,
                5: t167.BUTTON_L1,
                6: t167.BUTTON_R1,
                7: t167.NS_MINUS,
                8: t167.NS_PLUS,
                9: t167.BUTTON_L3,
                10: t167.BUTTON_R3,
                11: t167.ROKID_MENU,
                12: t167.ROKID_START
            };
            class v167 {
                get buttonNorth() {
                    return this._buttonNorth;
                }
                get buttonEast() {
                    return this._buttonEast;
                }
                get buttonWest() {
                    return this._buttonWest;
                }
                get buttonSouth() {
                    return this._buttonSouth;
                }
                get buttonL1() {
                    return this._buttonL1;
                }
                get buttonL2() {
                    return this._buttonL2;
                }
                get buttonL3() {
                    return this._buttonL3;
                }
                get buttonR1() {
                    return this._buttonR1;
                }
                get buttonR2() {
                    return this._buttonR2;
                }
                get buttonR3() {
                    return this._buttonR3;
                }
                get buttonShare() {
                    return this._buttonShare;
                }
                get buttonOptions() {
                    return this._buttonOptions;
                }
                get dpad() {
                    return this._dpad;
                }
                get leftStick() {
                    return this._leftStick;
                }
                get rightStick() {
                    return this._rightStick;
                }
                get buttonStart() {
                    return this._buttonStart;
                }
                get gripLeft() {
                    return this._gripLeft;
                }
                get gripRight() {
                    return this._gripRight;
                }
                get handLeftPosition() {
                    return this._handLeftPosition;
                }
                get handLeftOrientation() {
                    return this._handLeftOrientation;
                }
                get handRightPosition() {
                    return this._handRightPosition;
                }
                get handRightOrientation() {
                    return this._handRightOrientation;
                }
                get aimLeftPosition() {
                    return this._aimLeftPosition;
                }
                get aimLeftOrientation() {
                    return this._aimLeftOrientation;
                }
                get aimRightPosition() {
                    return this._aimRightPosition;
                }
                get aimRightOrientation() {
                    return this._aimRightOrientation;
                }
                get deviceId() {
                    return this._deviceId;
                }
                get connected() {
                    return this._connected;
                }
                constructor(f1148) {
                    this._buttonNorth = void 0, this._buttonEast = void 0, this._buttonWest = void 0, this._buttonSouth = void 0, this._buttonL1 = void 0, this._buttonL2 = void 0, this._buttonL3 = void 0, this._buttonR1 = void 0, this._buttonR2 = void 0, this._buttonR3 = void 0, this._buttonShare = void 0, this._buttonOptions = void 0, this._dpad = void 0, this._leftStick = void 0, this._rightStick = void 0, this._buttonStart = void 0, this._gripLeft = void 0, this._gripRight = void 0, this._handLeftPosition = void 0, this._handLeftOrientation = void 0, this._handRightPosition = void 0, this._handRightOrientation = void 0, this._aimLeftPosition = void 0, this._aimLeftOrientation = void 0, this._aimRightPosition = void 0, this._aimRightOrientation = void 0, this._deviceId = -1, this._connected = !1, this._nativeButtonState = {
                        [t167.BUTTON_SOUTH]: 0,
                        [t167.BUTTON_EAST]: 0,
                        [t167.BUTTON_WEST]: 0,
                        [t167.BUTTON_NORTH]: 0,
                        [t167.NS_MINUS]: 0,
                        [t167.NS_PLUS]: 0,
                        [t167.BUTTON_L1]: 0,
                        [t167.BUTTON_L2]: 0,
                        [t167.BUTTON_L3]: 0,
                        [t167.BUTTON_R1]: 0,
                        [t167.BUTTON_R2]: 0,
                        [t167.BUTTON_R3]: 0,
                        [t167.DPAD_UP]: 0,
                        [t167.DPAD_DOWN]: 0,
                        [t167.DPAD_LEFT]: 0,
                        [t167.DPAD_RIGHT]: 0,
                        [t167.LEFT_STICK_UP]: 0,
                        [t167.LEFT_STICK_DOWN]: 0,
                        [t167.LEFT_STICK_LEFT]: 0,
                        [t167.LEFT_STICK_RIGHT]: 0,
                        [t167.RIGHT_STICK_UP]: 0,
                        [t167.RIGHT_STICK_DOWN]: 0,
                        [t167.RIGHT_STICK_LEFT]: 0,
                        [t167.RIGHT_STICK_RIGHT]: 0,
                        [t167.ROKID_MENU]: 0,
                        [t167.ROKID_START]: 0
                    }, this._deviceId = f1148, this._initInputSource();
                }
                static _init() {
                    y156.hasFeature(v156.EVENT_GAMEPAD) && v167._registerEvent();
                }
                static _on(c1148, d1148, e1148) {
                    v167._eventTarget.on(c1148, d1148, e1148);
                }
                static _removeInputDevice(y1147) {
                    const z1147 = v167.all.findIndex(b1148 => b1148.deviceId === y1147);
                    -1 !== z1147 && i127(v167.all, z1147);
                }
                static _getInputDevice(v1147) {
                    return v167.all.find(x1147 => x1147.deviceId === v1147);
                }
                static _createInputDevice(s1147, t1147) {
                    const u1147 = new v167(s1147);
                    return u1147._connected = t1147, v167.all.push(u1147), u1147;
                }
                static _getOrCreateInputDevice(p1147, q1147) {
                    let r1147 = v167._getInputDevice(p1147);
                    return r1147 || (r1147 = v167._createInputDevice(p1147, q1147)), r1147._connected = q1147, r1147;
                }
                static _registerEvent() {
                    jsb.onControllerInput = l1147 => {
                        for (let m1147 = 0; m1147 < l1147.length; ++m1147) {
                            const n1147 = l1147[m1147], o1147 = v167._getOrCreateInputDevice(n1147.id, !0);
                            o1147._updateNativeButtonState(n1147), v167._eventTarget.emit(r166.GAMEPAD_INPUT, new x166(r166.GAMEPAD_INPUT, o1147));
                        }
                    }, jsb.onControllerChange = e1147 => {
                        for (let i1147 = 0; i1147 < e1147.length; ++i1147) {
                            const j1147 = e1147[i1147];
                            let k1147 = v167._getInputDevice(j1147);
                            k1147 || (k1147 = v167._createInputDevice(j1147, !0), v167._eventTarget.emit(r166.GAMEPAD_CHANGE, new x166(r166.GAMEPAD_CHANGE, k1147)));
                        }
                        const f1147 = v167.all;
                        for (let g1147 = 0; g1147 < f1147.length; ++g1147) {
                            const h1147 = f1147[g1147];
                            e1147.includes(h1147.deviceId) || (v167._removeInputDevice(h1147.deviceId), h1147._connected = !1, v167._eventTarget.emit(r166.GAMEPAD_CHANGE, new x166(r166.GAMEPAD_CHANGE, h1147)));
                        }
                    };
                }
                _axisToButtons(a1147) {
                    const b1147 = Math.abs(a1147);
                    return a1147 > 0 ? {
                        negative: 0,
                        positive: b1147
                    } : a1147 < 0 ? {
                        negative: b1147,
                        positive: 0
                    } : {
                        negative: 0,
                        positive: 0
                    };
                }
                _updateNativeButtonState(n1146) {
                    const { buttonInfoList: o1146, axisInfoList: p1146 } = n1146;
                    for (let x1146 = 0; x1146 < o1146.length; ++x1146) {
                        const y1146 = o1146[x1146], z1146 = u167[y1146.code];
                        this._nativeButtonState[z1146] = y1146.isPressed ? 1 : 0;
                    }
                    for (let q1146 = 0; q1146 < p1146.length; ++q1146) {
                        const r1146 = p1146[q1146], { code: s1146, value: t1146 } = r1146;
                        let u1146, v1146, w1146;
                        switch (s1146) {
                            case 1:
                                u1146 = t167.DPAD_LEFT, v1146 = t167.DPAD_RIGHT, w1146 = this._axisToButtons(t1146);
                                break;
                            case 2:
                                u1146 = t167.DPAD_DOWN, v1146 = t167.DPAD_UP, w1146 = this._axisToButtons(t1146);
                                break;
                            case 3:
                                u1146 = t167.LEFT_STICK_LEFT, v1146 = t167.LEFT_STICK_RIGHT, w1146 = this._axisToButtons(t1146);
                                break;
                            case 4:
                                u1146 = t167.LEFT_STICK_DOWN, v1146 = t167.LEFT_STICK_UP, w1146 = this._axisToButtons(t1146);
                                break;
                            case 5:
                                u1146 = t167.RIGHT_STICK_LEFT, v1146 = t167.RIGHT_STICK_RIGHT, w1146 = this._axisToButtons(t1146);
                                break;
                            case 6:
                                u1146 = t167.RIGHT_STICK_DOWN, v1146 = t167.RIGHT_STICK_UP, w1146 = this._axisToButtons(t1146);
                                break;
                            default:
                                7 === s1146 ? this._nativeButtonState[t167.BUTTON_L2] = t1146 : 8 === s1146 && (this._nativeButtonState[t167.BUTTON_R2] = t1146);
                        }
                        u1146 && v1146 && w1146 && (this._nativeButtonState[u1146] = w1146.negative, this._nativeButtonState[v1146] = w1146.positive);
                    }
                }
                _initInputSource() {
                    this._buttonNorth = new n167(), this._buttonNorth.getValue = () => this._nativeButtonState[t167.BUTTON_NORTH], this._buttonEast = new n167(), this._buttonEast.getValue = () => this._nativeButtonState[t167.BUTTON_EAST], this._buttonWest = new n167(), this._buttonWest.getValue = () => this._nativeButtonState[t167.BUTTON_WEST], this._buttonSouth = new n167(), this._buttonSouth.getValue = () => this._nativeButtonState[t167.BUTTON_SOUTH], this._buttonL1 = new n167(), this._buttonL1.getValue = () => this._nativeButtonState[t167.BUTTON_L1], this._buttonL2 = new n167(), this._buttonL2.getValue = () => this._nativeButtonState[t167.BUTTON_L2], this._buttonL3 = new n167(), this._buttonL3.getValue = () => this._nativeButtonState[t167.BUTTON_L3], this._buttonR1 = new n167(), this._buttonR1.getValue = () => this._nativeButtonState[t167.BUTTON_R1], this._buttonR2 = new n167(), this._buttonR2.getValue = () => this._nativeButtonState[t167.BUTTON_R2], this._buttonR3 = new n167(), this._buttonR3.getValue = () => this._nativeButtonState[t167.BUTTON_R3], this._buttonShare = new n167(), this._buttonShare.getValue = () => this._nativeButtonState[t167.NS_MINUS], this._buttonOptions = new n167(), this._buttonOptions.getValue = () => this._nativeButtonState[t167.NS_PLUS] || this._nativeButtonState[t167.ROKID_MENU];
                    const s1144 = new n167();
                    s1144.getValue = () => this._nativeButtonState[t167.DPAD_UP];
                    const t1144 = new n167();
                    t1144.getValue = () => this._nativeButtonState[t167.DPAD_DOWN];
                    const u1144 = new n167();
                    u1144.getValue = () => this._nativeButtonState[t167.DPAD_LEFT];
                    const v1144 = new n167();
                    v1144.getValue = () => this._nativeButtonState[t167.DPAD_RIGHT], this._dpad = new o167({
                        up: s1144,
                        down: t1144,
                        left: u1144,
                        right: v1144
                    });
                    const w1144 = new n167();
                    w1144.getValue = () => this._nativeButtonState[t167.LEFT_STICK_UP];
                    const x1144 = new n167();
                    x1144.getValue = () => this._nativeButtonState[t167.LEFT_STICK_DOWN];
                    const y1144 = new n167();
                    y1144.getValue = () => this._nativeButtonState[t167.LEFT_STICK_LEFT];
                    const z1144 = new n167();
                    z1144.getValue = () => this._nativeButtonState[t167.LEFT_STICK_RIGHT], this._leftStick = new p167({
                        up: w1144,
                        down: x1144,
                        left: y1144,
                        right: z1144
                    });
                    const a1145 = new n167();
                    a1145.getValue = () => this._nativeButtonState[t167.RIGHT_STICK_UP];
                    const b1145 = new n167();
                    b1145.getValue = () => this._nativeButtonState[t167.RIGHT_STICK_DOWN];
                    const c1145 = new n167();
                    c1145.getValue = () => this._nativeButtonState[t167.RIGHT_STICK_LEFT];
                    const d1145 = new n167();
                    d1145.getValue = () => this._nativeButtonState[t167.RIGHT_STICK_RIGHT], this._rightStick = new p167({
                        up: a1145,
                        down: b1145,
                        left: c1145,
                        right: d1145
                    }), this._buttonStart = new n167(), this._buttonStart.getValue = () => this._nativeButtonState[t167.ROKID_START], this._gripLeft = new n167(), this._gripLeft.getValue = () => 0, this._gripRight = new n167(), this._gripRight.getValue = () => 0, this._handLeftPosition = new r167(), this._handLeftPosition.getValue = () => w146.ZERO, this._handLeftOrientation = new q167(), this._handLeftOrientation.getValue = () => g147.IDENTITY, this._handRightPosition = new r167(), this._handRightPosition.getValue = () => w146.ZERO, this._handRightOrientation = new q167(), this._handRightOrientation.getValue = () => g147.IDENTITY, this._aimLeftPosition = new r167(), this._aimLeftPosition.getValue = () => w146.ZERO, this._aimLeftOrientation = new q167(), this._aimLeftOrientation.getValue = () => g147.IDENTITY, this._aimRightPosition = new r167(), this._aimRightPosition.getValue = () => w146.ZERO, this._aimRightOrientation = new q167(), this._aimRightOrientation.getValue = () => g147.IDENTITY;
                }
            }
            var w167, x167, y167, z167, a168;
            v167.all = [], v167.xr = null, v167._eventTarget = new o156(), function (r1144) {
                r1144[r1144.BUTTON_EAST = 0] = "BUTTON_EAST", r1144[r1144.BUTTON_SOUTH = 1] = "BUTTON_SOUTH", r1144[r1144.BUTTON_WEST = 2] = "BUTTON_WEST", r1144[r1144.BUTTON_NORTH = 3] = "BUTTON_NORTH", r1144[r1144.BUTTON_TRIGGER_LEFT = 4] = "BUTTON_TRIGGER_LEFT", r1144[r1144.BUTTON_TRIGGER_RIGHT = 5] = "BUTTON_TRIGGER_RIGHT", r1144[r1144.TRIGGER_LEFT = 6] = "TRIGGER_LEFT", r1144[r1144.TRIGGER_RIGHT = 7] = "TRIGGER_RIGHT", r1144[r1144.GRIP_LEFT = 8] = "GRIP_LEFT", r1144[r1144.GRIP_RIGHT = 9] = "GRIP_RIGHT", r1144[r1144.BUTTON_LEFT_STICK = 10] = "BUTTON_LEFT_STICK", r1144[r1144.LEFT_STICK_UP = 11] = "LEFT_STICK_UP", r1144[r1144.LEFT_STICK_DOWN = 12] = "LEFT_STICK_DOWN", r1144[r1144.LEFT_STICK_LEFT = 13] = "LEFT_STICK_LEFT", r1144[r1144.LEFT_STICK_RIGHT = 14] = "LEFT_STICK_RIGHT", r1144[r1144.BUTTON_RIGHT_STICK = 15] = "BUTTON_RIGHT_STICK", r1144[r1144.RIGHT_STICK_UP = 16] = "RIGHT_STICK_UP", r1144[r1144.RIGHT_STICK_DOWN = 17] = "RIGHT_STICK_DOWN", r1144[r1144.RIGHT_STICK_LEFT = 18] = "RIGHT_STICK_LEFT", r1144[r1144.RIGHT_STICK_RIGHT = 19] = "RIGHT_STICK_RIGHT", r1144[r1144.ROKID_MENU = 20] = "ROKID_MENU", r1144[r1144.ROKID_START = 21] = "ROKID_START";
            }(w167 || (w167 = {})), function (q1144) {
                q1144[q1144.HAND_LEFT = 0] = "HAND_LEFT", q1144[q1144.HAND_RIGHT = 1] = "HAND_RIGHT", q1144[q1144.AIM_LEFT = 2] = "AIM_LEFT", q1144[q1144.AIM_RIGHT = 3] = "AIM_RIGHT";
            }(x167 || (x167 = {})), function (p1144) {
                p1144[p1144.UNDEFINE = 0] = "UNDEFINE", p1144[p1144.A = 1] = "A", p1144[p1144.B = 2] = "B", p1144[p1144.X = 3] = "X", p1144[p1144.Y = 4] = "Y", p1144[p1144.L1 = 5] = "L1", p1144[p1144.R1 = 6] = "R1", p1144[p1144.MINUS = 7] = "MINUS", p1144[p1144.PLUS = 8] = "PLUS", p1144[p1144.L3 = 9] = "L3", p1144[p1144.R3 = 10] = "R3", p1144[p1144.MENU = 11] = "MENU", p1144[p1144.START = 12] = "START", p1144[p1144.TRIGGER_LEFT = 13] = "TRIGGER_LEFT", p1144[p1144.TRIGGER_RIGHT = 14] = "TRIGGER_RIGHT";
            }(y167 || (y167 = {})), function (o1144) {
                o1144[o1144.UNDEFINE = 0] = "UNDEFINE", o1144[o1144.X = 1] = "X", o1144[o1144.Y = 2] = "Y", o1144[o1144.LEFT_STICK_X = 3] = "LEFT_STICK_X", o1144[o1144.LEFT_STICK_Y = 4] = "LEFT_STICK_Y", o1144[o1144.RIGHT_STICK_X = 5] = "RIGHT_STICK_X", o1144[o1144.RIGHT_STICK_Y = 6] = "RIGHT_STICK_Y", o1144[o1144.L2 = 7] = "L2", o1144[o1144.R2 = 8] = "R2", o1144[o1144.LEFT_GRIP = 9] = "LEFT_GRIP", o1144[o1144.RIGHT_GRIP = 10] = "RIGHT_GRIP";
            }(z167 || (z167 = {})), function (n1144) {
                n1144[n1144.UNDEFINE = 0] = "UNDEFINE", n1144[n1144.A = 1] = "A", n1144[n1144.B = 2] = "B", n1144[n1144.X = 3] = "X", n1144[n1144.Y = 4] = "Y", n1144[n1144.LEFT_TRIGGER = 5] = "LEFT_TRIGGER", n1144[n1144.RIGHT_TRIGGER = 6] = "RIGHT_TRIGGER", n1144[n1144.LEFT_THUMBSTICK = 7] = "LEFT_THUMBSTICK", n1144[n1144.RIGHT_THUMBSTICK = 8] = "RIGHT_THUMBSTICK";
            }(a168 || (a168 = {}));
            const b168 = {
                1: w167.BUTTON_EAST,
                2: w167.BUTTON_SOUTH,
                3: w167.BUTTON_NORTH,
                4: w167.BUTTON_WEST,
                9: w167.BUTTON_LEFT_STICK,
                10: w167.BUTTON_RIGHT_STICK,
                11: w167.ROKID_MENU,
                12: w167.ROKID_START,
                13: w167.BUTTON_TRIGGER_LEFT,
                14: w167.BUTTON_TRIGGER_RIGHT
            };
            class c168 {
                get buttonNorth() {
                    return this._buttonNorth;
                }
                get buttonEast() {
                    return this._buttonEast;
                }
                get buttonWest() {
                    return this._buttonWest;
                }
                get buttonSouth() {
                    return this._buttonSouth;
                }
                get buttonTriggerLeft() {
                    return this._buttonTriggerLeft;
                }
                get buttonTriggerRight() {
                    return this._buttonTriggerRight;
                }
                get triggerLeft() {
                    return this._triggerLeft;
                }
                get triggerRight() {
                    return this._triggerRight;
                }
                get gripLeft() {
                    return this._gripLeft;
                }
                get gripRight() {
                    return this._gripRight;
                }
                get leftStick() {
                    return this._leftStick;
                }
                get rightStick() {
                    return this._rightStick;
                }
                get buttonLeftStick() {
                    return this._buttonLeftStick;
                }
                get buttonRightStick() {
                    return this._buttonRightStick;
                }
                get buttonOptions() {
                    return this._buttonOptions;
                }
                get buttonStart() {
                    return this._buttonStart;
                }
                get handLeftPosition() {
                    return this._handLeftPosition;
                }
                get handLeftOrientation() {
                    return this._handLeftOrientation;
                }
                get handRightPosition() {
                    return this._handRightPosition;
                }
                get handRightOrientation() {
                    return this._handRightOrientation;
                }
                get aimLeftPosition() {
                    return this._aimLeftPosition;
                }
                get aimLeftOrientation() {
                    return this._aimLeftOrientation;
                }
                get aimRightPosition() {
                    return this._aimRightPosition;
                }
                get aimRightOrientation() {
                    return this._aimRightOrientation;
                }
                get touchButtonA() {
                    return this._touchButtonA;
                }
                get touchButtonB() {
                    return this._touchButtonB;
                }
                get touchButtonX() {
                    return this._touchButtonX;
                }
                get touchButtonY() {
                    return this._touchButtonY;
                }
                get touchButtonTriggerLeft() {
                    return this._touchButtonTriggerLeft;
                }
                get touchButtonTriggerRight() {
                    return this._touchButtonTriggerRight;
                }
                get touchButtonThumbStickLeft() {
                    return this._touchButtonThumbStickLeft;
                }
                get touchButtonThumbStickRight() {
                    return this._touchButtonThumbStickRight;
                }
                constructor() {
                    this._eventTarget = new o156(), this._buttonNorth = void 0, this._buttonEast = void 0, this._buttonWest = void 0, this._buttonSouth = void 0, this._buttonTriggerLeft = void 0, this._buttonTriggerRight = void 0, this._triggerLeft = void 0, this._triggerRight = void 0, this._gripLeft = void 0, this._gripRight = void 0, this._leftStick = void 0, this._rightStick = void 0, this._buttonLeftStick = void 0, this._buttonRightStick = void 0, this._buttonOptions = void 0, this._buttonStart = void 0, this._handLeftPosition = void 0, this._handLeftOrientation = void 0, this._handRightPosition = void 0, this._handRightOrientation = void 0, this._aimLeftPosition = void 0, this._aimLeftOrientation = void 0, this._aimRightPosition = void 0, this._aimRightOrientation = void 0, this._touchButtonA = void 0, this._touchButtonB = void 0, this._touchButtonX = void 0, this._touchButtonY = void 0, this._touchButtonTriggerLeft = void 0, this._touchButtonTriggerRight = void 0, this._touchButtonThumbStickLeft = void 0, this._touchButtonThumbStickRight = void 0, this._nativeButtonState = {
                        [w167.BUTTON_SOUTH]: 0,
                        [w167.BUTTON_EAST]: 0,
                        [w167.BUTTON_WEST]: 0,
                        [w167.BUTTON_NORTH]: 0,
                        [w167.BUTTON_TRIGGER_LEFT]: 0,
                        [w167.BUTTON_TRIGGER_RIGHT]: 0,
                        [w167.TRIGGER_LEFT]: 0,
                        [w167.TRIGGER_RIGHT]: 0,
                        [w167.GRIP_LEFT]: 0,
                        [w167.GRIP_RIGHT]: 0,
                        [w167.LEFT_STICK_UP]: 0,
                        [w167.LEFT_STICK_DOWN]: 0,
                        [w167.LEFT_STICK_LEFT]: 0,
                        [w167.LEFT_STICK_RIGHT]: 0,
                        [w167.RIGHT_STICK_UP]: 0,
                        [w167.RIGHT_STICK_DOWN]: 0,
                        [w167.RIGHT_STICK_LEFT]: 0,
                        [w167.RIGHT_STICK_RIGHT]: 0,
                        [w167.BUTTON_LEFT_STICK]: 0,
                        [w167.BUTTON_RIGHT_STICK]: 0,
                        [w167.ROKID_MENU]: 0,
                        [w167.ROKID_START]: 0
                    }, this._nativeTouchState = {
                        [a168.UNDEFINE]: 0,
                        [a168.A]: 0,
                        [a168.B]: 0,
                        [a168.X]: 0,
                        [a168.Y]: 0,
                        [a168.LEFT_TRIGGER]: 0,
                        [a168.RIGHT_TRIGGER]: 0,
                        [a168.LEFT_THUMBSTICK]: 0,
                        [a168.RIGHT_THUMBSTICK]: 0
                    }, this._nativePoseState = {
                        [x167.HAND_LEFT]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        },
                        [x167.HAND_RIGHT]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        },
                        [x167.AIM_LEFT]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        },
                        [x167.AIM_RIGHT]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        }
                    }, this._initInputSource(), this._registerEvent();
                }
                _registerEvent() {
                    jsb.onHandleInput = k1144 => {
                        for (let l1144 = 0; l1144 < k1144.length; ++l1144) {
                            const m1144 = k1144[l1144];
                            this._updateNativeButtonState(m1144), this._eventTarget.emit(r166.HANDLE_INPUT, new y166(r166.HANDLE_INPUT, this));
                        }
                    }, jsb.onHandlePoseInput = h1144 => {
                        for (let i1144 = 0; i1144 < h1144.length; ++i1144) {
                            const j1144 = h1144[i1144];
                            this._updateNativePoseState(j1144);
                        }
                        this._eventTarget.emit(r166.HANDLE_POSE_INPUT, new y166(r166.HANDLE_POSE_INPUT, this));
                    };
                }
                _on(c1144, d1144, e1144) {
                    this._eventTarget.on(c1144, d1144, e1144);
                }
                _axisToButtons(a1144) {
                    const b1144 = Math.abs(a1144);
                    return a1144 > 0 ? {
                        negative: 0,
                        positive: b1144
                    } : a1144 < 0 ? {
                        negative: b1144,
                        positive: 0
                    } : {
                        negative: 0,
                        positive: 0
                    };
                }
                _updateNativeButtonState(i1143) {
                    const { buttonInfoList: j1143, axisInfoList: k1143, touchInfoList: l1143 } = i1143;
                    for (let x1143 = 0; x1143 < j1143.length; ++x1143) {
                        const y1143 = j1143[x1143], z1143 = b168[y1143.code];
                        this._nativeButtonState[z1143] = y1143.isPressed ? 1 : 0;
                    }
                    for (let q1143 = 0; q1143 < k1143.length; ++q1143) {
                        const r1143 = k1143[q1143], { code: s1143, value: t1143 } = r1143;
                        let u1143, v1143, w1143;
                        switch (s1143) {
                            case z167.LEFT_STICK_X:
                                u1143 = w167.LEFT_STICK_LEFT, v1143 = w167.LEFT_STICK_RIGHT, w1143 = this._axisToButtons(t1143);
                                break;
                            case z167.LEFT_STICK_Y:
                                u1143 = w167.LEFT_STICK_DOWN, v1143 = w167.LEFT_STICK_UP, w1143 = this._axisToButtons(t1143);
                                break;
                            case z167.RIGHT_STICK_X:
                                u1143 = w167.RIGHT_STICK_LEFT, v1143 = w167.RIGHT_STICK_RIGHT, w1143 = this._axisToButtons(t1143);
                                break;
                            case z167.RIGHT_STICK_Y:
                                u1143 = w167.RIGHT_STICK_DOWN, v1143 = w167.RIGHT_STICK_UP, w1143 = this._axisToButtons(t1143);
                                break;
                            case z167.L2:
                                this._nativeButtonState[w167.TRIGGER_LEFT] = t1143;
                                break;
                            case z167.R2:
                                this._nativeButtonState[w167.TRIGGER_RIGHT] = t1143;
                                break;
                            case z167.LEFT_GRIP:
                                this._nativeButtonState[w167.GRIP_LEFT] = t1143;
                                break;
                            case z167.RIGHT_GRIP:
                                this._nativeButtonState[w167.GRIP_RIGHT] = t1143;
                        }
                        u1143 && v1143 && w1143 && (this._nativeButtonState[u1143] = w1143.negative, this._nativeButtonState[v1143] = w1143.positive);
                    }
                    if (l1143)
                        for (let m1143 = 0; m1143 < l1143.length; ++m1143) {
                            const n1143 = l1143[m1143], { code: o1143, value: p1143 } = n1143;
                            switch (o1143) {
                                case a168.A:
                                case a168.B:
                                case a168.X:
                                case a168.Y:
                                case a168.LEFT_TRIGGER:
                                case a168.RIGHT_TRIGGER:
                                case a168.LEFT_THUMBSTICK:
                                case a168.RIGHT_THUMBSTICK:
                                    this._nativeTouchState[o1143] = p1143;
                            }
                        }
                }
                _updateNativePoseState(h1143) {
                    switch (h1143.code) {
                        case 1:
                            this._nativePoseState[x167.HAND_LEFT] = {
                                position: new w146(h1143.x, h1143.y, h1143.z),
                                orientation: new g147(h1143.quaternionX, h1143.quaternionY, h1143.quaternionZ, h1143.quaternionW)
                            };
                            break;
                        case 2:
                            this._nativePoseState[x167.AIM_LEFT] = {
                                position: new w146(h1143.x, h1143.y, h1143.z),
                                orientation: new g147(h1143.quaternionX, h1143.quaternionY, h1143.quaternionZ, h1143.quaternionW)
                            };
                            break;
                        case 4:
                            this._nativePoseState[x167.HAND_RIGHT] = {
                                position: new w146(h1143.x, h1143.y, h1143.z),
                                orientation: new g147(h1143.quaternionX, h1143.quaternionY, h1143.quaternionZ, h1143.quaternionW)
                            };
                            break;
                        case 5:
                            this._nativePoseState[x167.AIM_RIGHT] = {
                                position: new w146(h1143.x, h1143.y, h1143.z),
                                orientation: new g147(h1143.quaternionX, h1143.quaternionY, h1143.quaternionZ, h1143.quaternionW)
                            };
                    }
                }
                _initInputSource() {
                    this._buttonNorth = new n167(), this._buttonNorth.getValue = () => this._nativeButtonState[w167.BUTTON_NORTH], this._buttonEast = new n167(), this._buttonEast.getValue = () => this._nativeButtonState[w167.BUTTON_EAST], this._buttonWest = new n167(), this._buttonWest.getValue = () => this._nativeButtonState[w167.BUTTON_WEST], this._buttonSouth = new n167(), this._buttonSouth.getValue = () => this._nativeButtonState[w167.BUTTON_SOUTH], this._buttonTriggerLeft = new n167(), this._buttonTriggerLeft.getValue = () => this._nativeButtonState[w167.BUTTON_TRIGGER_LEFT], this._buttonTriggerRight = new n167(), this._buttonTriggerRight.getValue = () => this._nativeButtonState[w167.BUTTON_TRIGGER_RIGHT], this._triggerLeft = new n167(), this._triggerLeft.getValue = () => this._nativeButtonState[w167.TRIGGER_LEFT], this._triggerRight = new n167(), this._triggerRight.getValue = () => this._nativeButtonState[w167.TRIGGER_RIGHT], this._gripLeft = new n167(), this._gripLeft.getValue = () => this._nativeButtonState[w167.GRIP_LEFT], this._gripRight = new n167(), this._gripRight.getValue = () => this._nativeButtonState[w167.GRIP_RIGHT], this._buttonLeftStick = new n167(), this._buttonLeftStick.getValue = () => this._nativeButtonState[w167.BUTTON_LEFT_STICK];
                    const n1141 = new n167();
                    n1141.getValue = () => this._nativeButtonState[w167.LEFT_STICK_UP];
                    const o1141 = new n167();
                    o1141.getValue = () => this._nativeButtonState[w167.LEFT_STICK_DOWN];
                    const p1141 = new n167();
                    p1141.getValue = () => this._nativeButtonState[w167.LEFT_STICK_LEFT];
                    const q1141 = new n167();
                    q1141.getValue = () => this._nativeButtonState[w167.LEFT_STICK_RIGHT], this._leftStick = new p167({
                        up: n1141,
                        down: o1141,
                        left: p1141,
                        right: q1141
                    }), this._buttonRightStick = new n167(), this._buttonRightStick.getValue = () => this._nativeButtonState[w167.BUTTON_RIGHT_STICK];
                    const r1141 = new n167();
                    r1141.getValue = () => this._nativeButtonState[w167.RIGHT_STICK_UP];
                    const s1141 = new n167();
                    s1141.getValue = () => this._nativeButtonState[w167.RIGHT_STICK_DOWN];
                    const t1141 = new n167();
                    t1141.getValue = () => this._nativeButtonState[w167.RIGHT_STICK_LEFT];
                    const u1141 = new n167();
                    u1141.getValue = () => this._nativeButtonState[w167.RIGHT_STICK_RIGHT], this._rightStick = new p167({
                        up: r1141,
                        down: s1141,
                        left: t1141,
                        right: u1141
                    }), this._buttonOptions = new n167(), this._buttonOptions.getValue = () => this._nativeButtonState[w167.ROKID_MENU], this._buttonStart = new n167(), this._buttonStart.getValue = () => this._nativeButtonState[w167.ROKID_START], this._handLeftPosition = new r167(), this._handLeftPosition.getValue = () => this._nativePoseState[x167.HAND_LEFT].position, this._handLeftOrientation = new q167(), this._handLeftOrientation.getValue = () => this._nativePoseState[x167.HAND_LEFT].orientation, this._handRightPosition = new r167(), this._handRightPosition.getValue = () => this._nativePoseState[x167.HAND_RIGHT].position, this._handRightOrientation = new q167(), this._handRightOrientation.getValue = () => this._nativePoseState[x167.HAND_RIGHT].orientation, this._aimLeftPosition = new r167(), this._aimLeftPosition.getValue = () => this._nativePoseState[x167.AIM_LEFT].position, this._aimLeftOrientation = new q167(), this._aimLeftOrientation.getValue = () => this._nativePoseState[x167.AIM_LEFT].orientation, this._aimRightPosition = new r167(), this._aimRightPosition.getValue = () => this._nativePoseState[x167.AIM_RIGHT].position, this._aimRightOrientation = new q167(), this._aimRightOrientation.getValue = () => this._nativePoseState[x167.AIM_RIGHT].orientation, this._touchButtonA = new s167(), this._touchButtonA.getValue = () => this._nativeTouchState[a168.A], this._touchButtonB = new s167(), this._touchButtonB.getValue = () => this._nativeTouchState[a168.B], this._touchButtonX = new s167(), this._touchButtonX.getValue = () => this._nativeTouchState[a168.X], this._touchButtonY = new s167(), this._touchButtonY.getValue = () => this._nativeTouchState[a168.Y], this._touchButtonTriggerLeft = new s167(), this._touchButtonTriggerLeft.getValue = () => this._nativeTouchState[a168.LEFT_TRIGGER], this._touchButtonTriggerRight = new s167(), this._touchButtonTriggerRight.getValue = () => this._nativeTouchState[a168.RIGHT_TRIGGER], this._touchButtonThumbStickLeft = new s167(), this._touchButtonThumbStickLeft.getValue = () => this._nativeTouchState[a168.LEFT_THUMBSTICK], this._touchButtonThumbStickRight = new s167(), this._touchButtonThumbStickRight.getValue = () => this._nativeTouchState[a168.RIGHT_THUMBSTICK];
                }
            }
            var d168, e168;
            !function (m1141) {
                m1141[m1141.VIEW_LEFT = 0] = "VIEW_LEFT", m1141[m1141.VIEW_RIGHT = 1] = "VIEW_RIGHT", m1141[m1141.HEAD_MIDDLE = 2] = "HEAD_MIDDLE";
            }(d168 || (d168 = {}));
            class f168 {
                get viewLeftPosition() {
                    return this._viewLeftPosition;
                }
                get viewLeftOrientation() {
                    return this._viewLeftOrientation;
                }
                get viewRightPosition() {
                    return this._viewRightPosition;
                }
                get viewRightOrientation() {
                    return this._viewRightOrientation;
                }
                get headMiddlePosition() {
                    return this._headMiddlePosition;
                }
                get headMiddleOrientation() {
                    return this._headMiddleOrientation;
                }
                constructor() {
                    this._eventTarget = new o156(), this._viewLeftPosition = void 0, this._viewLeftOrientation = void 0, this._viewRightPosition = void 0, this._viewRightOrientation = void 0, this._headMiddlePosition = void 0, this._headMiddleOrientation = void 0, this._nativePoseState = {
                        [d168.VIEW_LEFT]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        },
                        [d168.VIEW_RIGHT]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        },
                        [d168.HEAD_MIDDLE]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        }
                    }, this._initInputSource(), this._registerEvent();
                }
                _registerEvent() {
                    jsb.onHMDPoseInput = j1141 => {
                        for (let k1141 = 0; k1141 < j1141.length; ++k1141) {
                            const l1141 = j1141[k1141];
                            this._updateNativePoseState(l1141);
                        }
                        this._eventTarget.emit(r166.HMD_POSE_INPUT, new z166(r166.HMD_POSE_INPUT, this));
                    };
                }
                _on(f1141, g1141, h1141) {
                    this._eventTarget.on(f1141, g1141, h1141);
                }
                _updateNativePoseState(e1141) {
                    switch (e1141.code) {
                        case 0:
                            this._nativePoseState[d168.VIEW_LEFT] = {
                                position: new w146(e1141.x, e1141.y, e1141.z),
                                orientation: new g147(e1141.quaternionX, e1141.quaternionY, e1141.quaternionZ, e1141.quaternionW)
                            };
                            break;
                        case 3:
                            this._nativePoseState[d168.VIEW_RIGHT] = {
                                position: new w146(e1141.x, e1141.y, e1141.z),
                                orientation: new g147(e1141.quaternionX, e1141.quaternionY, e1141.quaternionZ, e1141.quaternionW)
                            };
                            break;
                        case 6:
                            this._nativePoseState[d168.HEAD_MIDDLE] = {
                                position: new w146(e1141.x, e1141.y, e1141.z),
                                orientation: new g147(e1141.quaternionX, e1141.quaternionY, e1141.quaternionZ, e1141.quaternionW)
                            };
                    }
                }
                _initInputSource() {
                    this._viewLeftPosition = new r167(), this._viewLeftPosition.getValue = () => this._nativePoseState[d168.VIEW_LEFT].position, this._viewLeftOrientation = new q167(), this._viewLeftOrientation.getValue = () => this._nativePoseState[d168.VIEW_LEFT].orientation, this._viewRightPosition = new r167(), this._viewRightPosition.getValue = () => this._nativePoseState[d168.VIEW_RIGHT].position, this._viewRightOrientation = new q167(), this._viewRightOrientation.getValue = () => this._nativePoseState[d168.VIEW_RIGHT].orientation, this._headMiddlePosition = new r167(), this._headMiddlePosition.getValue = () => this._nativePoseState[d168.HEAD_MIDDLE].position, this._headMiddleOrientation = new q167(), this._headMiddleOrientation.getValue = () => this._nativePoseState[d168.HEAD_MIDDLE].orientation;
                }
            }
            !function (x1140) {
                x1140[x1140.AR_MOBILE = 0] = "AR_MOBILE";
            }(e168 || (e168 = {}));
            class g168 {
                get handheldPosition() {
                    return this._handheldPosition;
                }
                get handheldOrientation() {
                    return this._handheldOrientation;
                }
                constructor() {
                    this._eventTarget = new o156(), this._handheldPosition = void 0, this._handheldOrientation = void 0, this._nativePoseState = {
                        [e168.AR_MOBILE]: {
                            position: w146.ZERO,
                            orientation: g147.IDENTITY
                        }
                    }, this._initInputSource(), this._registerEvent();
                }
                _registerEvent() {
                    jsb.onHandheldPoseInput = u1140 => {
                        for (let v1140 = 0; v1140 < u1140.length; ++v1140) {
                            const w1140 = u1140[v1140];
                            this._updateNativePoseState(w1140);
                        }
                        this._eventTarget.emit(r166.HANDHELD_POSE_INPUT, new a167(r166.HANDHELD_POSE_INPUT, this));
                    };
                }
                _on(q1140, r1140, s1140) {
                    this._eventTarget.on(q1140, r1140, s1140);
                }
                _updateNativePoseState(p1140) {
                    switch (p1140.code) {
                        case 7:
                            this._nativePoseState[e168.AR_MOBILE] = {
                                position: new w146(p1140.x, p1140.y, p1140.z),
                                orientation: new g147(p1140.quaternionX, p1140.quaternionY, p1140.quaternionZ, p1140.quaternionW)
                            };
                    }
                }
                _initInputSource() {
                    this._handheldPosition = new r167(), this._handheldPosition.getValue = () => this._nativePoseState[e168.AR_MOBILE].position, this._handheldOrientation = new q167(), this._handheldOrientation.getValue = () => this._nativePoseState[e168.AR_MOBILE].orientation;
                }
            }
            const h168 = {
                Backspace: c167.BACKSPACE,
                Tab: c167.TAB,
                Enter: c167.ENTER,
                ShiftLeft: c167.SHIFT_LEFT,
                ControlLeft: c167.CTRL_LEFT,
                AltLeft: c167.ALT_LEFT,
                ShiftRight: c167.SHIFT_RIGHT,
                ControlRight: c167.CTRL_RIGHT,
                AltRight: c167.ALT_RIGHT,
                Pause: c167.PAUSE,
                CapsLock: c167.CAPS_LOCK,
                Escape: c167.ESCAPE,
                Space: c167.SPACE,
                PageUp: c167.PAGE_UP,
                PageDown: c167.PAGE_DOWN,
                End: c167.END,
                Home: c167.HOME,
                ArrowLeft: c167.ARROW_LEFT,
                ArrowUp: c167.ARROW_UP,
                ArrowRight: c167.ARROW_RIGHT,
                ArrowDown: c167.ARROW_DOWN,
                Insert: c167.INSERT,
                Delete: c167.DELETE,
                Digit0: c167.DIGIT_0,
                Digit1: c167.DIGIT_1,
                Digit2: c167.DIGIT_2,
                Digit3: c167.DIGIT_3,
                Digit4: c167.DIGIT_4,
                Digit5: c167.DIGIT_5,
                Digit6: c167.DIGIT_6,
                Digit7: c167.DIGIT_7,
                Digit8: c167.DIGIT_8,
                Digit9: c167.DIGIT_9,
                KeyA: c167.KEY_A,
                KeyB: c167.KEY_B,
                KeyC: c167.KEY_C,
                KeyD: c167.KEY_D,
                KeyE: c167.KEY_E,
                KeyF: c167.KEY_F,
                KeyG: c167.KEY_G,
                KeyH: c167.KEY_H,
                KeyI: c167.KEY_I,
                KeyJ: c167.KEY_J,
                KeyK: c167.KEY_K,
                KeyL: c167.KEY_L,
                KeyM: c167.KEY_M,
                KeyN: c167.KEY_N,
                KeyO: c167.KEY_O,
                KeyP: c167.KEY_P,
                KeyQ: c167.KEY_Q,
                KeyR: c167.KEY_R,
                KeyS: c167.KEY_S,
                KeyT: c167.KEY_T,
                KeyU: c167.KEY_U,
                KeyV: c167.KEY_V,
                KeyW: c167.KEY_W,
                KeyX: c167.KEY_X,
                KeyY: c167.KEY_Y,
                KeyZ: c167.KEY_Z,
                Numpad0: c167.NUM_0,
                Numpad1: c167.NUM_1,
                Numpad2: c167.NUM_2,
                Numpad3: c167.NUM_3,
                Numpad4: c167.NUM_4,
                Numpad5: c167.NUM_5,
                Numpad6: c167.NUM_6,
                Numpad7: c167.NUM_7,
                Numpad8: c167.NUM_8,
                Numpad9: c167.NUM_9,
                NumpadMultiply: c167.NUM_MULTIPLY,
                NumpadAdd: c167.NUM_PLUS,
                NumpadSubtract: c167.NUM_SUBTRACT,
                NumpadDecimal: c167.NUM_DECIMAL,
                NumpadDivide: c167.NUM_DIVIDE,
                NumpadEnter: c167.NUM_ENTER,
                F1: c167.F1,
                F2: c167.F2,
                F3: c167.F3,
                F4: c167.F4,
                F5: c167.F5,
                F6: c167.F6,
                F7: c167.F7,
                F8: c167.F8,
                F9: c167.F9,
                F10: c167.F10,
                F11: c167.F11,
                F12: c167.F12,
                NumLock: c167.NUM_LOCK,
                ScrollLock: c167.SCROLL_LOCK,
                Semicolon: c167.SEMICOLON,
                Equal: c167.EQUAL,
                Comma: c167.COMMA,
                Minus: c167.DASH,
                Period: c167.PERIOD,
                Slash: c167.SLASH,
                Backquote: c167.BACK_QUOTE,
                BracketLeft: c167.BRACKET_LEFT,
                Backslash: c167.BACKSLASH,
                BracketRight: c167.BRACKET_RIGHT,
                Quote: c167.QUOTE
            }, i168 = {
                12: c167.NUM_LOCK,
                10048: c167.NUM_0,
                10049: c167.NUM_1,
                10050: c167.NUM_2,
                10051: c167.NUM_3,
                10052: c167.NUM_4,
                10053: c167.NUM_5,
                10054: c167.NUM_6,
                10055: c167.NUM_7,
                10056: c167.NUM_8,
                10057: c167.NUM_9,
                20013: c167.NUM_ENTER,
                20016: c167.SHIFT_RIGHT,
                20017: c167.CTRL_RIGHT,
                20018: c167.ALT_RIGHT
            };
            function h135(m1140) {
                if (m1140.code) {
                    if (m1140.code in h168)
                        return h168[m1140.code];
                    console.error(`Can not find keyCode for code: ${m1140.code}`);
                }
                return i168[m1140.keyCode] || m1140.keyCode;
            }
            class j168 {
                constructor() {
                    this._eventTarget = new o156(), this._keyStateMap = {}, this._handleKeyboardDown = void 0, this._handleKeyboardUp = void 0, this._handleKeyboardDown = i1140 => {
                        const j1140 = h135(i1140);
                        if (this._keyStateMap[j1140]) {
                            const l1140 = this._getInputEvent(i1140, r166.KEY_PRESSING);
                            this._eventTarget.emit(r166.KEY_PRESSING, l1140);
                        }
                        else {
                            const k1140 = this._getInputEvent(i1140, r166.KEY_DOWN);
                            this._eventTarget.emit(r166.KEY_DOWN, k1140);
                        }
                        this._keyStateMap[j1140] = !0;
                    }, this._handleKeyboardUp = f1140 => {
                        const g1140 = h135(f1140), h1140 = this._getInputEvent(f1140, r166.KEY_UP);
                        this._keyStateMap[g1140] = !1, this._eventTarget.emit(r166.KEY_UP, h1140);
                    }, this._registerEvent();
                }
                dispatchKeyboardDownEvent(c1140) {
                    this._handleKeyboardDown(c1140);
                }
                dispatchKeyboardUpEvent(b1140) {
                    this._handleKeyboardUp(b1140);
                }
                _registerEvent() {
                    jsb.onKeyDown = this._handleKeyboardDown, jsb.onKeyUp = this._handleKeyboardUp;
                }
                _getInputEvent(x1139, y1139) {
                    const z1139 = h135(x1139), a1140 = new t166(z1139, y1139);
                    return a1140.windowId = x1139.windowId, a1140;
                }
                on(u1139, v1139, w1139) {
                    this._eventTarget.on(u1139, v1139, w1139);
                }
            }
            class k168 {
                constructor() {
                    this._eventTarget = new o156(), this._preMousePos = new s147(), this._isPressed = !1, this._windowManager = void 0, this._pointLocked = !1, this._handleMouseDown = void 0, this._handleMouseMove = void 0, this._handleMouseUp = void 0, this._boundedHandleMouseWheel = void 0, this._handleMouseDown = this._createCallback(r166.MOUSE_DOWN), this._handleMouseMove = this._createCallback(r166.MOUSE_MOVE), this._handleMouseUp = this._createCallback(r166.MOUSE_UP), this._boundedHandleMouseWheel = this._handleMouseWheel.bind(this), this._registerEvent(), this._windowManager = jsb.ISystemWindowManager.getInstance();
                }
                dispatchMouseDownEvent(t1139) {
                    this._handleMouseDown(t1139);
                }
                dispatchMouseMoveEvent(s1139) {
                    this._handleMouseMove(s1139);
                }
                dispatchMouseUpEvent(r1139) {
                    this._handleMouseUp(r1139);
                }
                dispatchScrollEvent(q1139) {
                    this._boundedHandleMouseWheel(q1139);
                }
                _getLocation(l1139) {
                    const m1139 = this._windowManager.getWindow(l1139.windowId).getViewSize(), n1139 = g157.devicePixelRatio, o1139 = l1139.x * n1139, p1139 = m1139.height - l1139.y * n1139;
                    return new s147(o1139, p1139);
                }
                _registerEvent() {
                    jsb.onMouseDown = this._handleMouseDown, jsb.onMouseMove = this._handleMouseMove, jsb.onMouseUp = this._handleMouseUp, jsb.onMouseWheel = this._boundedHandleMouseWheel, jsb.onPointerlockChange = k1139 => {
                        this._pointLocked = k1139;
                    };
                }
                _createCallback(c1139) {
                    return e1139 => {
                        const f1139 = this._getLocation(e1139);
                        let g1139 = e1139.button;
                        switch (c1139) {
                            case r166.MOUSE_DOWN:
                                this._isPressed = !0;
                                break;
                            case r166.MOUSE_UP:
                                this._isPressed = !1;
                                break;
                            case r166.MOUSE_MOVE:
                                this._isPressed || (g1139 = u166.BUTTON_MISSING);
                        }
                        const h1139 = new u166(c1139, !1, this._preMousePos, e1139.windowId);
                        h1139.setLocation(f1139.x, f1139.y), h1139.setButton(g1139);
                        const i1139 = g157.devicePixelRatio;
                        h1139.movementX = void 0 === e1139.xDelta ? 0 : e1139.xDelta * i1139, h1139.movementY = void 0 === e1139.yDelta ? 0 : e1139.yDelta * i1139, this._preMousePos.set(f1139.x, f1139.y), this._eventTarget.emit(c1139, h1139);
                    };
                }
                _handleMouseWheel(x1138) {
                    const y1138 = r166.MOUSE_WHEEL, z1138 = this._getLocation(x1138), a1139 = x1138.button, b1139 = new u166(y1138, !1, this._preMousePos, x1138.windowId);
                    b1139.setLocation(z1138.x, z1138.y), b1139.setButton(a1139), b1139.movementX = z1138.x - this._preMousePos.x, b1139.movementY = this._preMousePos.y - z1138.y, b1139.setScrollData(120 * x1138.wheelDeltaX, 120 * x1138.wheelDeltaY), this._preMousePos.set(z1138.x, z1138.y), this._eventTarget.emit(y1138, b1139);
                }
                on(u1138, v1138, w1138) {
                    this._eventTarget.on(u1138, v1138, w1138);
                }
            }
            const l168 = new s147(), m168 = new class {
                constructor() {
                    this._touchMap = void 0, this._maxTouches = 8, this._touchMap = new Map();
                }
                _createTouch(q1138, r1138, s1138) {
                    if (this._touchMap.has(q1138))
                        return void p125("Cannot create the same touch object.");
                    if (this._checkTouchMapSizeMoreThanMax(q1138))
                        return void p125("The touches is more than MAX_TOUCHES.");
                    const t1138 = new e167(r1138, s1138, q1138);
                    return this._touchMap.set(q1138, t1138), this._updateTouch(t1138, r1138, s1138), t1138;
                }
                releaseTouch(p1138) {
                    this._touchMap.has(p1138) && this._touchMap.delete(p1138);
                }
                getTouch(o1138) {
                    return this._touchMap.get(o1138);
                }
                getOrCreateTouch(k1138, l1138, m1138) {
                    let n1138 = this.getTouch(k1138);
                    return n1138 ? this._updateTouch(n1138, l1138, m1138) : n1138 = this._createTouch(k1138, l1138, m1138), n1138;
                }
                getAllTouches() {
                    const h1138 = [];
                    return this._touchMap.forEach(j1138 => {
                        j1138 && h1138.push(j1138);
                    }), h1138;
                }
                getTouchCount() {
                    return m168._touchMap.size;
                }
                _updateTouch(e1138, f1138, g1138) {
                    e1138.getLocation(l168), e1138.setPrevPoint(l168), e1138.setPoint(f1138, g1138);
                }
                _checkTouchMapSizeMoreThanMax(z1137) {
                    if (this._touchMap.has(z1137))
                        return !1;
                    const a1138 = s145.ENABLE_MULTI_TOUCH ? this._maxTouches : 1;
                    if (this._touchMap.size < a1138)
                        return !1;
                    const b1138 = performance.now();
                    return this._touchMap.forEach(d1138 => {
                        b1138 - d1138.lastModified > s145.TOUCH_TIMEOUT && (p125(`The touches is more than MAX_TOUCHES, release touch id ${d1138.getID()}.`), this.releaseTouch(d1138.getID()));
                    }), a1138 >= this._touchMap.size;
                }
            }();
            class n168 {
                constructor() {
                    this._eventTarget = new o156(), this._windowManager = void 0, this._registerEvent(), this._windowManager = jsb.ISystemWindowManager.getInstance();
                }
                _registerEvent() {
                    jsb.onTouchStart = this._createCallback(r166.TOUCH_START), jsb.onTouchMove = this._createCallback(r166.TOUCH_MOVE), jsb.onTouchEnd = this._createCallback(r166.TOUCH_END), jsb.onTouchCancel = this._createCallback(r166.TOUCH_CANCEL);
                }
                _createCallback(m1137) {
                    return (o1137, p1137) => {
                        const q1137 = [], r1137 = o1137.length, s1137 = this._windowManager.getWindow(p1137).getViewSize();
                        for (let u1137 = 0; u1137 < r1137; ++u1137) {
                            const v1137 = o1137[u1137], w1137 = v1137.identifier;
                            if (null === w1137)
                                continue;
                            const x1137 = this._getLocation(v1137, s1137), y1137 = m168.getOrCreateTouch(w1137, x1137.x, x1137.y);
                            y1137 && (m1137 !== r166.TOUCH_END && m1137 !== r166.TOUCH_CANCEL || m168.releaseTouch(w1137), q1137.push(y1137));
                        }
                        if (q1137.length > 0) {
                            const t1137 = new w166(q1137, !1, m1137, s145.ENABLE_MULTI_TOUCH ? m168.getAllTouches() : q1137);
                            t1137.windowId = p1137, this._eventTarget.emit(m1137, t1137);
                        }
                    };
                }
                _getLocation(h1137, i1137) {
                    const j1137 = g157.devicePixelRatio, k1137 = h1137.clientX * j1137, l1137 = i1137.height - h1137.clientY * j1137;
                    return new s147(k1137, l1137);
                }
                on(e1137, f1137, g1137) {
                    this._eventTarget.on(e1137, f1137, g1137);
                }
            }
            let o168;
            !function (d1137) {
                d1137[d1137.GLOBAL = 0] = "GLOBAL", d1137[d1137.UI = 1] = "UI";
            }(o168 || (o168 = {}));
            class p168 {
                constructor(c1137) {
                    this.priority = o168.GLOBAL, this._inputEventTarget = void 0, this._inputEventTarget = c1137;
                }
                dispatchEvent(b1137) {
                    return this._inputEventTarget.emit(b1137.type, b1137), !0;
                }
            }
            const q168 = {
                [r166.MOUSE_DOWN]: r166.TOUCH_START,
                [r166.MOUSE_MOVE]: r166.TOUCH_MOVE,
                [r166.MOUSE_UP]: r166.TOUCH_END
            };
            class r168 {
                constructor() {
                    this._dispatchImmediately = !1, this._eventTarget = new o156(), this._touchInput = new n168(), this._mouseInput = new k168(), this._keyboardInput = new j168(), this._accelerometerInput = new f167(), this._handleInput = new c168(), this._hmdInput = new f168(), this._handheldInput = new g168(), this._eventTouchList = [], this._eventMouseList = [], this._eventKeyboardList = [], this._eventAccelerationList = [], this._eventGamepadList = [], this._eventHandleList = [], this._eventHMDList = [], this._eventHandheldList = [], this._needSimulateTouchMoveEvent = !1, this._inputEventDispatcher = void 0, this._eventDispatcherList = [], this._registerEvent(), this._inputEventDispatcher = new p168(this._eventTarget), this._registerEventDispatcher(this._inputEventDispatcher), v167._init();
                }
                _dispatchMouseDownEvent(y1136) {
                    var z1136, a1137;
                    null === (z1136 = (a1137 = this._mouseInput).dispatchMouseDownEvent) || void 0 === z1136 || z1136.call(a1137, y1136);
                }
                _dispatchMouseMoveEvent(v1136) {
                    var w1136, x1136;
                    null === (w1136 = (x1136 = this._mouseInput).dispatchMouseMoveEvent) || void 0 === w1136 || w1136.call(x1136, v1136);
                }
                _dispatchMouseUpEvent(s1136) {
                    var t1136, u1136;
                    null === (t1136 = (u1136 = this._mouseInput).dispatchMouseUpEvent) || void 0 === t1136 || t1136.call(u1136, s1136);
                }
                _dispatchMouseScrollEvent(p1136) {
                    var q1136, r1136;
                    null === (q1136 = (r1136 = this._mouseInput).dispatchScrollEvent) || void 0 === q1136 || q1136.call(r1136, p1136);
                }
                _dispatchKeyboardDownEvent(m1136) {
                    var n1136, o1136;
                    null === (n1136 = (o1136 = this._keyboardInput).dispatchKeyboardDownEvent) || void 0 === n1136 || n1136.call(o1136, m1136);
                }
                _dispatchKeyboardUpEvent(j1136) {
                    var k1136, l1136;
                    null === (k1136 = (l1136 = this._keyboardInput).dispatchKeyboardUpEvent) || void 0 === k1136 || k1136.call(l1136, j1136);
                }
                on(g1136, h1136, i1136) {
                    return this._eventTarget.on(g1136, h1136, i1136), h1136;
                }
                once(d1136, e1136, f1136) {
                    return this._eventTarget.once(d1136, e1136, f1136), e1136;
                }
                off(a1136, b1136, c1136) {
                    this._eventTarget.off(a1136, b1136, c1136);
                }
                getTouch(z1135) {
                    return m168.getTouch(z1135);
                }
                getAllTouches() {
                    return m168.getAllTouches();
                }
                getTouchCount() {
                    return m168.getTouchCount();
                }
                setAccelerometerEnabled(y1135) {
                    y1135 ? this._accelerometerInput.start() : this._accelerometerInput.stop();
                }
                setAccelerometerInterval(x1135) {
                    this._accelerometerInput.setInterval(x1135);
                }
                _simulateEventTouch(s1135) {
                    const t1135 = q168[s1135.type], u1135 = m168.getOrCreateTouch(0, s1135.getLocationX(), s1135.getLocationY());
                    if (!u1135)
                        return;
                    const v1135 = [u1135], w1135 = new w166(v1135, !1, t1135, t1135 === r166.TOUCH_END ? [] : v1135);
                    w1135.windowId = s1135.windowId, t1135 === r166.TOUCH_END && m168.releaseTouch(0), this._dispatchOrPushEventTouch(w1135, this._eventTouchList);
                }
                _registerEventDispatcher(o1135) {
                    this._eventDispatcherList.push(o1135), this._eventDispatcherList.sort((q1135, r1135) => r1135.priority - q1135.priority);
                }
                _emitEvent(j1135) {
                    const k1135 = this._eventDispatcherList.length;
                    for (let l1135 = 0; l1135 < k1135; ++l1135) {
                        const m1135 = this._eventDispatcherList[l1135];
                        try {
                            if (!m1135.dispatchEvent(j1135))
                                break;
                        }
                        catch (n1135) {
                            r125(`Error occurs in an event listener: ${j1135.type}`), r125(n1135);
                        }
                    }
                }
                _registerEvent() {
                    if (i157.hasFeature(i157.Feature.INPUT_TOUCH)) {
                        const a1135 = this._eventTouchList;
                        this._touchInput.on(r166.TOUCH_START, i1135 => {
                            this._dispatchOrPushEventTouch(i1135, a1135);
                        }), this._touchInput.on(r166.TOUCH_MOVE, h1135 => {
                            this._dispatchOrPushEventTouch(h1135, a1135);
                        }), this._touchInput.on(r166.TOUCH_END, g1135 => {
                            this._dispatchOrPushEventTouch(g1135, a1135);
                        }), this._touchInput.on(r166.TOUCH_CANCEL, f1135 => {
                            this._dispatchOrPushEventTouch(f1135, a1135);
                        });
                    }
                    if (i157.hasFeature(i157.Feature.EVENT_MOUSE)) {
                        const r1134 = this._eventMouseList;
                        this._mouseInput.on(r166.MOUSE_DOWN, z1134 => {
                            this._needSimulateTouchMoveEvent = !0, this._simulateEventTouch(z1134), this._dispatchOrPushEvent(z1134, r1134);
                        }), this._mouseInput.on(r166.MOUSE_MOVE, y1134 => {
                            this._needSimulateTouchMoveEvent && this._simulateEventTouch(y1134), this._dispatchOrPushEvent(y1134, r1134);
                        }), this._mouseInput.on(r166.MOUSE_UP, x1134 => {
                            this._needSimulateTouchMoveEvent = !1, this._simulateEventTouch(x1134), this._dispatchOrPushEvent(x1134, r1134);
                        }), this._mouseInput.on(r166.MOUSE_WHEEL, w1134 => {
                            this._dispatchOrPushEvent(w1134, r1134);
                        });
                    }
                    if (i157.hasFeature(i157.Feature.EVENT_KEYBOARD)) {
                        const k1134 = this._eventKeyboardList;
                        this._keyboardInput.on(r166.KEY_DOWN, q1134 => {
                            this._dispatchOrPushEvent(q1134, k1134);
                        }), this._keyboardInput.on(r166.KEY_PRESSING, p1134 => {
                            this._dispatchOrPushEvent(p1134, k1134);
                        }), this._keyboardInput.on(r166.KEY_UP, o1134 => {
                            this._dispatchOrPushEvent(o1134, k1134);
                        });
                    }
                    if (i157.hasFeature(i157.Feature.EVENT_ACCELEROMETER)) {
                        const h1134 = this._eventAccelerationList;
                        this._accelerometerInput.on(r166.DEVICEMOTION, j1134 => {
                            this._dispatchOrPushEvent(j1134, h1134);
                        });
                    }
                    if (i157.hasFeature(i157.Feature.EVENT_GAMEPAD)) {
                        const a1134 = this._eventGamepadList;
                        v167._on(r166.GAMEPAD_CHANGE, g1134 => {
                            this._dispatchOrPushEvent(g1134, a1134);
                        }), v167._on(r166.GAMEPAD_INPUT, f1134 => {
                            this._dispatchOrPushEvent(f1134, a1134);
                        }), v167._on(r166.HANDLE_POSE_INPUT, e1134 => {
                            this._dispatchOrPushEvent(e1134, a1134);
                        });
                    }
                    if (i157.hasFeature(i157.Feature.EVENT_HANDLE)) {
                        const v1133 = this._eventHandleList;
                        this._handleInput._on(r166.HANDLE_INPUT, z1133 => {
                            this._dispatchOrPushEvent(z1133, v1133);
                        }), this._handleInput._on(r166.HANDLE_POSE_INPUT, y1133 => {
                            this._dispatchOrPushEvent(y1133, v1133);
                        });
                    }
                    if (i157.hasFeature(i157.Feature.EVENT_HMD)) {
                        const s1133 = this._eventHMDList;
                        this._hmdInput._on(r166.HMD_POSE_INPUT, u1133 => {
                            this._dispatchOrPushEvent(u1133, s1133);
                        });
                    }
                    if (i157.hasFeature(i157.Feature.EVENT_HANDHELD)) {
                        const p1133 = this._eventHandheldList;
                        this._handheldInput._on(r166.HANDHELD_POSE_INPUT, r1133 => {
                            this._dispatchOrPushEvent(r1133, p1133);
                        });
                    }
                }
                _clearEvents() {
                    this._eventMouseList.length = 0, this._eventTouchList.length = 0, this._eventKeyboardList.length = 0, this._eventAccelerationList.length = 0, this._eventGamepadList.length = 0, this._eventHandleList.length = 0, this._eventHMDList.length = 0;
                }
                _dispatchOrPushEvent(n1133, o1133) {
                    this._dispatchImmediately ? this._emitEvent(n1133) : o1133.push(n1133);
                }
                _dispatchOrPushEventTouch(i1133, j1133) {
                    if (this._dispatchImmediately) {
                        const k1133 = i1133.getTouches(), l1133 = k1133.length;
                        for (let m1133 = 0; m1133 < l1133; ++m1133)
                            i1133.touch = k1133[m1133], i1133.propagationStopped = i1133.propagationImmediateStopped = !1, this._emitEvent(i1133);
                    }
                    else
                        j1133.push(i1133);
                }
                _frameDispatchEvents() {
                    const z1131 = this._eventHMDList;
                    for (let f1133 = 0, g1133 = z1131.length; f1133 < g1133; ++f1133) {
                        const h1133 = z1131[f1133];
                        this._emitEvent(h1133);
                    }
                    const a1132 = this._eventHandheldList;
                    for (let c1133 = 0, d1133 = a1132.length; c1133 < d1133; ++c1133) {
                        const e1133 = a1132[c1133];
                        this._emitEvent(e1133);
                    }
                    const b1132 = this._eventMouseList;
                    for (let z1132 = 0, a1133 = b1132.length; z1132 < a1133; ++z1132) {
                        const b1133 = b1132[z1132];
                        this._emitEvent(b1133);
                    }
                    const c1132 = this._eventTouchList;
                    for (let t1132 = 0, u1132 = c1132.length; t1132 < u1132; ++t1132) {
                        const v1132 = c1132[t1132], w1132 = v1132.getTouches(), x1132 = w1132.length;
                        for (let y1132 = 0; y1132 < x1132; ++y1132)
                            v1132.touch = w1132[y1132], v1132.propagationStopped = v1132.propagationImmediateStopped = !1, this._emitEvent(v1132);
                    }
                    const d1132 = this._eventKeyboardList;
                    for (let q1132 = 0, r1132 = d1132.length; q1132 < r1132; ++q1132) {
                        const s1132 = d1132[q1132];
                        this._emitEvent(s1132);
                    }
                    const e1132 = this._eventAccelerationList;
                    for (let n1132 = 0, o1132 = e1132.length; n1132 < o1132; ++n1132) {
                        const p1132 = e1132[n1132];
                        this._emitEvent(p1132);
                    }
                    const f1132 = this._eventGamepadList;
                    for (let k1132 = 0, l1132 = f1132.length; k1132 < l1132; ++k1132) {
                        const m1132 = f1132[k1132];
                        this._emitEvent(m1132);
                    }
                    const g1132 = this._eventHandleList;
                    for (let h1132 = 0, i1132 = g1132.length; h1132 < i1132; ++h1132) {
                        const j1132 = g1132[h1132];
                        this._emitEvent(j1132);
                    }
                    this._clearEvents();
                }
            }
            g125("Input", r168), r168.EventType = r166;
            const s168 = g125("input", new r168());
            class t168 extends o156 {
                constructor() {
                    super(), s168.on(r166.MOUSE_DOWN, y1131 => {
                        this.emit(q166.MOUSE_DOWN, y1131);
                    }), s168.on(r166.MOUSE_MOVE, x1131 => {
                        this.emit(q166.MOUSE_MOVE, x1131);
                    }), s168.on(r166.MOUSE_UP, w1131 => {
                        this.emit(q166.MOUSE_UP, w1131);
                    }), s168.on(r166.MOUSE_WHEEL, v1131 => {
                        this.emit(q166.MOUSE_WHEEL, v1131);
                    }), s168.on(r166.TOUCH_START, u1131 => {
                        this.emit(q166.TOUCH_START, u1131.touch, u1131);
                    }), s168.on(r166.TOUCH_MOVE, t1131 => {
                        this.emit(q166.TOUCH_MOVE, t1131.touch, t1131);
                    }), s168.on(r166.TOUCH_END, s1131 => {
                        this.emit(q166.TOUCH_END, s1131.touch, s1131);
                    }), s168.on(r166.TOUCH_CANCEL, r1131 => {
                        this.emit(q166.TOUCH_CANCEL, r1131.touch, r1131);
                    }), s168.on(r166.KEY_DOWN, q1131 => {
                        this.emit(q166.KEY_DOWN, q1131);
                    }), s168.on(r166.KEY_PRESSING, p1131 => {
                        this.emit(q166.KEY_DOWN, p1131);
                    }), s168.on(r166.KEY_UP, o1131 => {
                        this.emit(q166.KEY_UP, o1131);
                    }), s168.on(r166.DEVICEMOTION, n1131 => {
                        this.emit(q166.DEVICEMOTION, n1131);
                    });
                }
                setAccelerometerEnabled(a1131) {
                    s168.setAccelerometerEnabled(a1131);
                }
                setAccelerometerInterval(z1130) {
                    s168.setAccelerometerInterval(z1130);
                }
                on(v1130, w1130, x1130, y1130) {
                    return super.on(v1130, w1130, x1130, y1130), w1130;
                }
                off(s1130, t1130, u1130) {
                    super.off(s1130, t1130, u1130);
                }
            }
            g125("SystemEvent", t168), t168.EventType = q166, s143.SystemEvent = t168;
            const u168 = g125("systemEvent", new t168());
            s143.systemEvent = u168, k144(q166, "Node.EventType", [{
                    name: "POSITION_PART",
                    newName: "TRANSFORM_CHANGED"
                }, {
                    name: "ROTATION_PART",
                    newName: "TRANSFORM_CHANGED"
                }, {
                    name: "SCALE_PART",
                    newName: "TRANSFORM_CHANGED"
                }]), k144(p166, "Event", [{
                    name: "ACCELERATION",
                    newName: "DEVICEMOTION",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }]), m144(p166, "Event", [{
                    name: "TOUCH",
                    suggest: "please use SystemEvent.EventType.TOUCH_START, SystemEvent.EventType.TOUCH_MOVE, SystemEvent.EventType.TOUCH_END and SystemEvent.EventType.TOUCH_CANCEL instead"
                }, {
                    name: "MOUSE",
                    suggest: "please use SystemEvent.EventType.MOUSE_DOWN, SystemEvent.EventType.MOUSE_MOVE, SystemEvent.EventType.MOUSE_UP, SystemEvent.EventType.MOUSE_WHEEL, Node.EventType.MOUSE_ENTER and Node.EventType.MOUSE_LEAVE instead"
                }, {
                    name: "KEYBOARD",
                    suggest: "please use SystemEvent.EventType.KEY_DOWN and SystemEvent.EventType.KEY_UP instead"
                }]), k144(u166, "EventMouse", ["DOWN", "UP", "MOVE"].map(r1130 => ({
                name: r1130,
                newName: `MOUSE_${r1130}`,
                target: t168.EventType,
                targetName: "SystemEvent.EventType"
            }))), k144(u166, "EventMouse", [{
                    name: "SCROLL",
                    newName: "MOUSE_WHEEL",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }]), m144(u166.prototype, "EventMouse.prototype", [{
                    name: "eventType",
                    suggest: "please use EventMouse.prototype.type instead"
                }]), k144(w166, "EventTouch", [{
                    name: "BEGAN",
                    newName: "TOUCH_START",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }]), k144(w166, "EventTouch", [{
                    name: "MOVED",
                    newName: "TOUCH_MOVE",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }]), k144(w166, "EventTouch", [{
                    name: "ENDED",
                    newName: "TOUCH_END",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }]), k144(w166, "EventTouch", [{
                    name: "CANCELLED",
                    newName: "TOUCH_CANCEL",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }]), m144(w166.prototype, "EventTouch.prototype", [{
                    name: "getEventCode",
                    suggest: "please use EventTouch.prototype.type instead"
                }]), k144(w166.prototype, "EventTouch.prototype", [{
                    name: "getUILocationInView",
                    newName: "getLocationInView",
                    target: w166,
                    targetName: "EventTouch"
                }]), m144(s145.KEY, "macro.KEY", ["back", "menu", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "*", "+", "-", "/", ";", "=", ",", ".", "[", "]", "dpadLeft", "dpadRight", "dpadUp", "dpadDown", "dpadCenter"].map(q1130 => ({
                name: q1130
            }))), m144(s145.KEY, "macro.KEY", [{
                    name: "shift",
                    suggest: "please use KeyCode.SHIFT_LEFT instead"
                }]), m144(s145.KEY, "macro.KEY", [{
                    name: "ctrl",
                    suggest: "please use KeyCode.CTRL_LEFT instead"
                }]), m144(s145.KEY, "macro.KEY", [{
                    name: "alt",
                    suggest: "please use KeyCode.ALT_LEFT instead"
                }]), m144(s145, "macro", [{
                    name: "KEY",
                    suggest: "please use KeyCode instead"
                }]);
            const v168 = {
                NONE: 0,
                IGNORE_RAYCAST: 1 << 20,
                GIZMOS: 1 << 21,
                EDITOR: 1 << 22,
                UI_3D: 1 << 23,
                SCENE_GIZMO: 1 << 24,
                UI_2D: 1 << 25,
                PROFILER: 1 << 28,
                DEFAULT: 1 << 30,
                ALL: 4294967295
            };
            class w168 {
                static init() {
                    const n1130 = r145.querySettings(q145.Category.ENGINE, "customLayers");
                    if (n1130)
                        for (let o1130 = 0; o1130 < n1130.length; o1130++) {
                            const p1130 = n1130[o1130];
                            w168.addLayer(p1130.name, p1130.bit);
                        }
                }
                static makeMaskInclude(k1130) {
                    let l1130 = 0;
                    for (const m1130 of k1130)
                        l1130 |= m1130;
                    return l1130;
                }
                static makeMaskExclude(j1130) {
                    return ~w168.makeMaskInclude(j1130);
                }
                static addLayer(g1130, h1130) {
                    if (void 0 === h1130)
                        return void console.warn("bitNum can't be undefined");
                    if (h1130 > 19 || h1130 < 0)
                        return void console.warn("maximum layers reached.");
                    const i1130 = 1 << h1130;
                    w168.Enum[g1130], b126(2104, g1130), w168.Enum[g1130] = i1130, z144(w168.Enum, String(i1130), g1130), w168.BitMask[g1130] = i1130, z144(w168.BitMask, String(i1130), g1130), n127.update(w168.BitMask), p127.update(w168.Enum);
                }
                static deleteLayer(e1130) {
                    if (e1130 > 19 || e1130 < 0)
                        return void console.warn("do not change buildin layers.");
                    const f1130 = 1 << e1130;
                    delete w168.Enum[w168.Enum[f1130]], delete w168.Enum[f1130], delete w168.BitMask[w168.BitMask[f1130]], delete w168.BitMask[f1130], n127.update(w168.BitMask), p127.update(w168.Enum);
                }
                static nameToLayer(d1130) {
                    return void 0 === d1130 ? (console.warn("name can't be undefined"), -1) : k125(w168.Enum[d1130]);
                }
                static layerToName(c1130) {
                    return c1130 > 31 || c1130 < 0 ? (console.warn("Unable to access unknown layer."), "") : w168.Enum[1 << c1130];
                }
            }
            var x168, y168, z168, a169, b169, c169, d169, e169, f169, g169, h169, i169, j169, k169;
            let l169, m169;
            g125("Layers", w168), w168.Enum = p127(v168), w168.BitMask = n127({
                ...v168
            }), s143.Layers = w168, function (b1130) {
                b1130[b1130.DEFAULT = 100] = "DEFAULT", b1130[b1130.UI = 200] = "UI";
            }(l169 || (l169 = {})), s143.RenderPassStage = l169, function (a1130) {
                a1130[a1130.MIN = 0] = "MIN", a1130[a1130.MAX = 255] = "MAX", a1130[a1130.DEFAULT = 128] = "DEFAULT";
            }(m169 || (m169 = {}));
            const n169 = {
                bindings: [],
                layouts: {}
            }, o169 = {
                bindings: [],
                layouts: {}
            };
            let p169;
            !function (z1129) {
                z1129[z1129.UBO_GLOBAL = 0] = "UBO_GLOBAL", z1129[z1129.UBO_CAMERA = 1] = "UBO_CAMERA", z1129[z1129.UBO_SHADOW = 2] = "UBO_SHADOW", z1129[z1129.UBO_CSM = 3] = "UBO_CSM", z1129[z1129.SAMPLER_SHADOWMAP = 4] = "SAMPLER_SHADOWMAP", z1129[z1129.SAMPLER_ENVIRONMENT = 5] = "SAMPLER_ENVIRONMENT", z1129[z1129.SAMPLER_SPOT_SHADOW_MAP = 6] = "SAMPLER_SPOT_SHADOW_MAP", z1129[z1129.SAMPLER_DIFFUSEMAP = 7] = "SAMPLER_DIFFUSEMAP", z1129[z1129.COUNT = 8] = "COUNT";
            }(p169 || (p169 = {}));
            const q169 = p169.SAMPLER_SHADOWMAP, r169 = p169.COUNT - q169;
            let s169;
            !function (y1129) {
                y1129[y1129.UBO_LOCAL = 0] = "UBO_LOCAL", y1129[y1129.UBO_FORWARD_LIGHTS = 1] = "UBO_FORWARD_LIGHTS", y1129[y1129.UBO_SKINNING_ANIMATION = 2] = "UBO_SKINNING_ANIMATION", y1129[y1129.UBO_SKINNING_TEXTURE = 3] = "UBO_SKINNING_TEXTURE", y1129[y1129.UBO_MORPH = 4] = "UBO_MORPH", y1129[y1129.UBO_UI_LOCAL = 5] = "UBO_UI_LOCAL", y1129[y1129.UBO_SH = 6] = "UBO_SH", y1129[y1129.SAMPLER_JOINTS = 7] = "SAMPLER_JOINTS", y1129[y1129.SAMPLER_MORPH_POSITION = 8] = "SAMPLER_MORPH_POSITION", y1129[y1129.SAMPLER_MORPH_NORMAL = 9] = "SAMPLER_MORPH_NORMAL", y1129[y1129.SAMPLER_MORPH_TANGENT = 10] = "SAMPLER_MORPH_TANGENT", y1129[y1129.SAMPLER_LIGHTMAP = 11] = "SAMPLER_LIGHTMAP", y1129[y1129.SAMPLER_SPRITE = 12] = "SAMPLER_SPRITE", y1129[y1129.SAMPLER_REFLECTION = 13] = "SAMPLER_REFLECTION", y1129[y1129.STORAGE_REFLECTION = 14] = "STORAGE_REFLECTION", y1129[y1129.SAMPLER_REFLECTION_PROBE_CUBE = 15] = "SAMPLER_REFLECTION_PROBE_CUBE", y1129[y1129.SAMPLER_REFLECTION_PROBE_PLANAR = 16] = "SAMPLER_REFLECTION_PROBE_PLANAR", y1129[y1129.SAMPLER_REFLECTION_PROBE_DATA_MAP = 17] = "SAMPLER_REFLECTION_PROBE_DATA_MAP", y1129[y1129.SAMPLER_REFLECTION_PROBE_BLEND_CUBE = 18] = "SAMPLER_REFLECTION_PROBE_BLEND_CUBE", y1129[y1129.COUNT = 19] = "COUNT";
            }(s169 || (s169 = {}));
            const t169 = s169.SAMPLER_JOINTS, u169 = s169.STORAGE_REFLECTION - t169, v169 = s169.COUNT - t169 - u169;
            let w169;
            !function (x1129) {
                x1129[x1129.GLOBAL = 0] = "GLOBAL", x1129[x1129.MATERIAL = 1] = "MATERIAL", x1129[x1129.LOCAL = 2] = "LOCAL", x1129[x1129.COUNT = 3] = "COUNT";
            }(w169 || (w169 = {}));
            const x169 = new u159([q169, 0, t169, 0], [r169, 0, u169, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, v169, 0], [0, 0, 0, 0], [0, 2, 1, 3]);
            class y169 {
            }
            x168 = y169, y169.TIME_OFFSET = 0, y169.SCREEN_SIZE_OFFSET = x168.TIME_OFFSET + 4, y169.NATIVE_SIZE_OFFSET = x168.SCREEN_SIZE_OFFSET + 4, y169.PROBE_INFO_OFFSET = x168.NATIVE_SIZE_OFFSET + 4, y169.DEBUG_VIEW_MODE_OFFSET = x168.PROBE_INFO_OFFSET + 4, y169.COUNT = x168.DEBUG_VIEW_MODE_OFFSET + 4, y169.SIZE = 4 * x168.COUNT, y169.NAME = "CCGlobal", y169.BINDING = p169.UBO_GLOBAL, y169.DESCRIPTOR = new a161(x168.BINDING, z158.UNIFORM_BUFFER, 1, n158.ALL), y169.LAYOUT = new g160(w169.GLOBAL, x168.BINDING, x168.NAME, [new f160("cc_time", v157.FLOAT4, 1), new f160("cc_screenSize", v157.FLOAT4, 1), new f160("cc_nativeSize", v157.FLOAT4, 1), new f160("cc_probeInfo", v157.FLOAT4, 1), new f160("cc_debug_view_mode", v157.FLOAT4, 1)], 1), n169.layouts[y169.NAME] = y169.LAYOUT, n169.bindings[y169.BINDING] = y169.DESCRIPTOR;
            class z169 {
            }
            y168 = z169, z169.MAT_VIEW_OFFSET = 0, z169.MAT_VIEW_INV_OFFSET = y168.MAT_VIEW_OFFSET + 16, z169.MAT_PROJ_OFFSET = y168.MAT_VIEW_INV_OFFSET + 16, z169.MAT_PROJ_INV_OFFSET = y168.MAT_PROJ_OFFSET + 16, z169.MAT_VIEW_PROJ_OFFSET = y168.MAT_PROJ_INV_OFFSET + 16, z169.MAT_VIEW_PROJ_INV_OFFSET = y168.MAT_VIEW_PROJ_OFFSET + 16, z169.CAMERA_POS_OFFSET = y168.MAT_VIEW_PROJ_INV_OFFSET + 16, z169.SURFACE_TRANSFORM_OFFSET = y168.CAMERA_POS_OFFSET + 4, z169.SCREEN_SCALE_OFFSET = y168.SURFACE_TRANSFORM_OFFSET + 4, z169.EXPOSURE_OFFSET = y168.SCREEN_SCALE_OFFSET + 4, z169.MAIN_LIT_DIR_OFFSET = y168.EXPOSURE_OFFSET + 4, z169.MAIN_LIT_COLOR_OFFSET = y168.MAIN_LIT_DIR_OFFSET + 4, z169.AMBIENT_SKY_OFFSET = y168.MAIN_LIT_COLOR_OFFSET + 4, z169.AMBIENT_GROUND_OFFSET = y168.AMBIENT_SKY_OFFSET + 4, z169.GLOBAL_FOG_COLOR_OFFSET = y168.AMBIENT_GROUND_OFFSET + 4, z169.GLOBAL_FOG_BASE_OFFSET = y168.GLOBAL_FOG_COLOR_OFFSET + 4, z169.GLOBAL_FOG_ADD_OFFSET = y168.GLOBAL_FOG_BASE_OFFSET + 4, z169.NEAR_FAR_OFFSET = y168.GLOBAL_FOG_ADD_OFFSET + 4, z169.VIEW_PORT_OFFSET = y168.NEAR_FAR_OFFSET + 4, z169.COUNT = y168.VIEW_PORT_OFFSET + 4, z169.SIZE = 4 * y168.COUNT, z169.NAME = "CCCamera", z169.BINDING = p169.UBO_CAMERA, z169.DESCRIPTOR = new a161(y168.BINDING, z158.UNIFORM_BUFFER, 1, n158.ALL), z169.LAYOUT = new g160(w169.GLOBAL, y168.BINDING, y168.NAME, [new f160("cc_matView", v157.MAT4, 1), new f160("cc_matViewInv", v157.MAT4, 1), new f160("cc_matProj", v157.MAT4, 1), new f160("cc_matProjInv", v157.MAT4, 1), new f160("cc_matViewProj", v157.MAT4, 1), new f160("cc_matViewProjInv", v157.MAT4, 1), new f160("cc_cameraPos", v157.FLOAT4, 1), new f160("cc_surfaceTransform", v157.FLOAT4, 1), new f160("cc_screenScale", v157.FLOAT4, 1), new f160("cc_exposure", v157.FLOAT4, 1), new f160("cc_mainLitDir", v157.FLOAT4, 1), new f160("cc_mainLitColor", v157.FLOAT4, 1), new f160("cc_ambientSky", v157.FLOAT4, 1), new f160("cc_ambientGround", v157.FLOAT4, 1), new f160("cc_fogColor", v157.FLOAT4, 1), new f160("cc_fogBase", v157.FLOAT4, 1), new f160("cc_fogAdd", v157.FLOAT4, 1), new f160("cc_nearFar", v157.FLOAT4, 1), new f160("cc_viewPort", v157.FLOAT4, 1)], 1), n169.layouts[z169.NAME] = z169.LAYOUT, n169.bindings[z169.BINDING] = z169.DESCRIPTOR;
            class a170 {
            }
            z168 = a170, a170.MAT_LIGHT_VIEW_OFFSET = 0, a170.MAT_LIGHT_VIEW_PROJ_OFFSET = z168.MAT_LIGHT_VIEW_OFFSET + 16, a170.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET = z168.MAT_LIGHT_VIEW_PROJ_OFFSET + 16, a170.SHADOW_PROJ_DEPTH_INFO_OFFSET = z168.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 4, a170.SHADOW_PROJ_INFO_OFFSET = z168.SHADOW_PROJ_DEPTH_INFO_OFFSET + 4, a170.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET = z168.SHADOW_PROJ_INFO_OFFSET + 4, a170.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET = z168.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 4, a170.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET = z168.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 4, a170.SHADOW_COLOR_OFFSET = z168.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 4, a170.PLANAR_NORMAL_DISTANCE_INFO_OFFSET = z168.SHADOW_COLOR_OFFSET + 4, a170.COUNT = z168.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 4, a170.SIZE = 4 * z168.COUNT, a170.NAME = "CCShadow", a170.BINDING = p169.UBO_SHADOW, a170.DESCRIPTOR = new a161(z168.BINDING, z158.UNIFORM_BUFFER, 1, n158.ALL), a170.LAYOUT = new g160(w169.GLOBAL, z168.BINDING, z168.NAME, [new f160("cc_matLightView", v157.MAT4, 1), new f160("cc_matLightViewProj", v157.MAT4, 1), new f160("cc_shadowInvProjDepthInfo", v157.FLOAT4, 1), new f160("cc_shadowProjDepthInfo", v157.FLOAT4, 1), new f160("cc_shadowProjInfo", v157.FLOAT4, 1), new f160("cc_shadowNFLSInfo", v157.FLOAT4, 1), new f160("cc_shadowWHPBInfo", v157.FLOAT4, 1), new f160("cc_shadowLPNNInfo", v157.FLOAT4, 1), new f160("cc_shadowColor", v157.FLOAT4, 1), new f160("cc_planarNDInfo", v157.FLOAT4, 1)], 1), n169.layouts[a170.NAME] = a170.LAYOUT, n169.bindings[a170.BINDING] = a170.DESCRIPTOR;
            class b170 {
            }
            a169 = b170, b170.CSM_LEVEL_COUNT = 4, b170.CSM_VIEW_DIR_0_OFFSET = 0, b170.CSM_VIEW_DIR_1_OFFSET = a169.CSM_VIEW_DIR_0_OFFSET + 4 * a169.CSM_LEVEL_COUNT, b170.CSM_VIEW_DIR_2_OFFSET = a169.CSM_VIEW_DIR_1_OFFSET + 4 * a169.CSM_LEVEL_COUNT, b170.CSM_ATLAS_OFFSET = a169.CSM_VIEW_DIR_2_OFFSET + 4 * a169.CSM_LEVEL_COUNT, b170.MAT_CSM_VIEW_PROJ_OFFSET = a169.CSM_ATLAS_OFFSET + 4 * a169.CSM_LEVEL_COUNT, b170.CSM_PROJ_DEPTH_INFO_OFFSET = a169.MAT_CSM_VIEW_PROJ_OFFSET + 16 * a169.CSM_LEVEL_COUNT, b170.CSM_PROJ_INFO_OFFSET = a169.CSM_PROJ_DEPTH_INFO_OFFSET + 4 * a169.CSM_LEVEL_COUNT, b170.CSM_SPLITS_INFO_OFFSET = a169.CSM_PROJ_INFO_OFFSET + 4 * a169.CSM_LEVEL_COUNT, b170.COUNT = a169.CSM_SPLITS_INFO_OFFSET + 4, b170.SIZE = 4 * a169.COUNT, b170.NAME = "CCCSM", b170.BINDING = p169.UBO_CSM, b170.DESCRIPTOR = new a161(a169.BINDING, z158.UNIFORM_BUFFER, 1, n158.FRAGMENT), b170.LAYOUT = new g160(w169.GLOBAL, a169.BINDING, a169.NAME, [new f160("cc_csmViewDir0", v157.FLOAT4, a169.CSM_LEVEL_COUNT), new f160("cc_csmViewDir1", v157.FLOAT4, a169.CSM_LEVEL_COUNT), new f160("cc_csmViewDir2", v157.FLOAT4, a169.CSM_LEVEL_COUNT), new f160("cc_csmAtlas", v157.FLOAT4, a169.CSM_LEVEL_COUNT), new f160("cc_matCSMViewProj", v157.MAT4, a169.CSM_LEVEL_COUNT), new f160("cc_csmProjDepthInfo", v157.FLOAT4, a169.CSM_LEVEL_COUNT), new f160("cc_csmProjInfo", v157.FLOAT4, a169.CSM_LEVEL_COUNT), new f160("cc_csmSplitsInfo", v157.FLOAT4, 1)], 1), n169.layouts[b170.NAME] = b170.LAYOUT, n169.bindings[b170.BINDING] = b170.DESCRIPTOR;
            const c170 = p169.SAMPLER_SHADOWMAP, d170 = new a161(c170, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), e170 = new h160(w169.GLOBAL, c170, "cc_shadowMap", v157.SAMPLER2D, 1);
            n169.layouts.cc_shadowMap = e170, n169.bindings[c170] = d170;
            const f170 = p169.SAMPLER_ENVIRONMENT, g170 = new a161(f170, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), h170 = new h160(w169.GLOBAL, f170, "cc_environment", v157.SAMPLER_CUBE, 1);
            n169.layouts.cc_environment = h170, n169.bindings[f170] = g170;
            const i170 = p169.SAMPLER_DIFFUSEMAP, j170 = new a161(i170, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), k170 = new h160(w169.GLOBAL, i170, "cc_diffuseMap", v157.SAMPLER_CUBE, 1);
            n169.layouts.cc_diffuseMap = k170, n169.bindings[i170] = j170;
            const l170 = p169.SAMPLER_SPOT_SHADOW_MAP, m170 = new a161(l170, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), n170 = new h160(w169.GLOBAL, l170, "cc_spotShadowMap", v157.SAMPLER2D, 1);
            n169.layouts.cc_spotShadowMap = n170, n169.bindings[l170] = m170;
            class o170 {
            }
            b169 = o170, o170.MAT_WORLD_OFFSET = 0, o170.MAT_WORLD_IT_OFFSET = b169.MAT_WORLD_OFFSET + 16, o170.LIGHTINGMAP_UVPARAM = b169.MAT_WORLD_IT_OFFSET + 16, o170.LOCAL_SHADOW_BIAS = b169.LIGHTINGMAP_UVPARAM + 4, o170.REFLECTION_PROBE_DATA1 = b169.LOCAL_SHADOW_BIAS + 4, o170.REFLECTION_PROBE_DATA2 = b169.REFLECTION_PROBE_DATA1 + 4, o170.REFLECTION_PROBE_BLEND_DATA1 = b169.REFLECTION_PROBE_DATA2 + 4, o170.REFLECTION_PROBE_BLEND_DATA2 = b169.REFLECTION_PROBE_BLEND_DATA1 + 4, o170.COUNT = b169.REFLECTION_PROBE_BLEND_DATA2 + 4, o170.SIZE = 4 * b169.COUNT, o170.NAME = "CCLocal", o170.BINDING = s169.UBO_LOCAL, o170.DESCRIPTOR = new a161(b169.BINDING, z158.UNIFORM_BUFFER, 1, n158.VERTEX | n158.FRAGMENT | n158.COMPUTE), o170.LAYOUT = new g160(w169.LOCAL, b169.BINDING, b169.NAME, [new f160("cc_matWorld", v157.MAT4, 1), new f160("cc_matWorldIT", v157.MAT4, 1), new f160("cc_lightingMapUVParam", v157.FLOAT4, 1), new f160("cc_localShadowBias", v157.FLOAT4, 1), new f160("cc_reflectionProbeData1", v157.FLOAT4, 1), new f160("cc_reflectionProbeData2", v157.FLOAT4, 1), new f160("cc_reflectionProbeBlendData1", v157.FLOAT4, 1), new f160("cc_reflectionProbeBlendData2", v157.FLOAT4, 1)], 1), o169.layouts[o170.NAME] = o170.LAYOUT, o169.bindings[o170.BINDING] = o170.DESCRIPTOR;
            class p170 {
            }
            c169 = p170, p170.WORLD_BOUND_CENTER = 0, p170.WORLD_BOUND_HALF_EXTENTS = c169.WORLD_BOUND_CENTER + 4, p170.COUNT = c169.WORLD_BOUND_HALF_EXTENTS + 4, p170.SIZE = 4 * c169.COUNT, p170.NAME = "CCWorldBound", p170.BINDING = s169.UBO_LOCAL, p170.DESCRIPTOR = new a161(c169.BINDING, z158.UNIFORM_BUFFER, 1, n158.VERTEX | n158.COMPUTE), p170.LAYOUT = new g160(w169.LOCAL, c169.BINDING, c169.NAME, [new f160("cc_worldBoundCenter", v157.FLOAT4, 1), new f160("cc_worldBoundHalfExtents", v157.FLOAT4, 1)], 1), o169.layouts[p170.NAME] = p170.LAYOUT, o169.bindings[p170.BINDING] = p170.DESCRIPTOR;
            class q170 {
            }
            d169 = q170, q170.BATCHING_COUNT = 10, q170.MAT_WORLDS_OFFSET = 0, q170.COUNT = 16 * d169.BATCHING_COUNT, q170.SIZE = 4 * d169.COUNT, q170.NAME = "CCLocalBatched", q170.BINDING = s169.UBO_LOCAL, q170.DESCRIPTOR = new a161(d169.BINDING, z158.UNIFORM_BUFFER, 1, n158.VERTEX | n158.COMPUTE), q170.LAYOUT = new g160(w169.LOCAL, d169.BINDING, d169.NAME, [new f160("cc_matWorlds", v157.MAT4, d169.BATCHING_COUNT)], 1), o169.layouts[q170.NAME] = q170.LAYOUT, o169.bindings[q170.BINDING] = q170.DESCRIPTOR;
            class r170 {
            }
            e169 = r170, r170.LIGHTS_PER_PASS = 1, r170.LIGHT_POS_OFFSET = 0, r170.LIGHT_COLOR_OFFSET = e169.LIGHT_POS_OFFSET + 4 * e169.LIGHTS_PER_PASS, r170.LIGHT_SIZE_RANGE_ANGLE_OFFSET = e169.LIGHT_COLOR_OFFSET + 4 * e169.LIGHTS_PER_PASS, r170.LIGHT_DIR_OFFSET = e169.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 4 * e169.LIGHTS_PER_PASS, r170.LIGHT_BOUNDING_SIZE_VS_OFFSET = e169.LIGHT_DIR_OFFSET + 4 * e169.LIGHTS_PER_PASS, r170.COUNT = e169.LIGHT_BOUNDING_SIZE_VS_OFFSET + 4 * e169.LIGHTS_PER_PASS, r170.SIZE = 4 * e169.COUNT, r170.NAME = "CCForwardLight", r170.BINDING = s169.UBO_FORWARD_LIGHTS, r170.DESCRIPTOR = new a161(e169.BINDING, z158.DYNAMIC_UNIFORM_BUFFER, 1, n158.FRAGMENT), r170.LAYOUT = new g160(w169.LOCAL, e169.BINDING, e169.NAME, [new f160("cc_lightPos", v157.FLOAT4, e169.LIGHTS_PER_PASS), new f160("cc_lightColor", v157.FLOAT4, e169.LIGHTS_PER_PASS), new f160("cc_lightSizeRangeAngle", v157.FLOAT4, e169.LIGHTS_PER_PASS), new f160("cc_lightDir", v157.FLOAT4, e169.LIGHTS_PER_PASS), new f160("cc_lightBoundingSizeVS", v157.FLOAT4, e169.LIGHTS_PER_PASS)], 1), o169.layouts[r170.NAME] = r170.LAYOUT, o169.bindings[r170.BINDING] = r170.DESCRIPTOR;
            class s170 {
            }
            s170.LIGHTS_PER_PASS = 10;
            class t170 {
            }
            f169 = t170, t170.JOINTS_TEXTURE_INFO_OFFSET = 0, t170.COUNT = f169.JOINTS_TEXTURE_INFO_OFFSET + 4, t170.SIZE = 4 * f169.COUNT, t170.NAME = "CCSkinningTexture", t170.BINDING = s169.UBO_SKINNING_TEXTURE, t170.DESCRIPTOR = new a161(f169.BINDING, z158.UNIFORM_BUFFER, 1, n158.VERTEX), t170.LAYOUT = new g160(w169.LOCAL, f169.BINDING, f169.NAME, [new f160("cc_jointTextureInfo", v157.FLOAT4, 1)], 1), o169.layouts[t170.NAME] = t170.LAYOUT, o169.bindings[t170.BINDING] = t170.DESCRIPTOR;
            class u170 {
            }
            g169 = u170, u170.JOINTS_ANIM_INFO_OFFSET = 0, u170.COUNT = g169.JOINTS_ANIM_INFO_OFFSET + 4, u170.SIZE = 4 * g169.COUNT, u170.NAME = "CCSkinningAnimation", u170.BINDING = s169.UBO_SKINNING_ANIMATION, u170.DESCRIPTOR = new a161(g169.BINDING, z158.UNIFORM_BUFFER, 1, n158.VERTEX), u170.LAYOUT = new g160(w169.LOCAL, g169.BINDING, g169.NAME, [new f160("cc_jointAnimInfo", v157.FLOAT4, 1)], 1), o169.layouts[u170.NAME] = u170.LAYOUT, o169.bindings[u170.BINDING] = u170.DESCRIPTOR;
            class v170 {
                static get JOINT_UNIFORM_CAPACITY() {
                    return v170._jointUniformCapacity;
                }
                static get COUNT() {
                    return v170._count;
                }
                static get SIZE() {
                    return v170._size;
                }
                static initLayout(w1129) {
                    v170._jointUniformCapacity = w1129, v170._count = 12 * w1129, v170._size = 4 * v170._count, v170.LAYOUT.members[0].count = 3 * w1129;
                }
            }
            h169 = v170, v170._jointUniformCapacity = 0, v170._count = 0, v170._size = 0, v170.NAME = "CCSkinning", v170.BINDING = s169.UBO_SKINNING_TEXTURE, v170.DESCRIPTOR = new a161(h169.BINDING, z158.UNIFORM_BUFFER, 1, n158.VERTEX), v170.LAYOUT = new g160(w169.LOCAL, h169.BINDING, h169.NAME, [new f160("cc_joints", v157.FLOAT4, 1)], 1);
            class w170 {
            }
            i169 = w170, w170.MAX_MORPH_TARGET_COUNT = 60, w170.OFFSET_OF_WEIGHTS = 0, w170.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * i169.MAX_MORPH_TARGET_COUNT, w170.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = i169.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4, w170.OFFSET_OF_VERTICES_COUNT = i169.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT + 4, w170.COUNT_BASE_4_BYTES = 4 * Math.ceil(i169.MAX_MORPH_TARGET_COUNT / 4) + 4, w170.SIZE = 4 * i169.COUNT_BASE_4_BYTES, w170.NAME = "CCMorph", w170.BINDING = s169.UBO_MORPH, w170.DESCRIPTOR = new a161(i169.BINDING, z158.UNIFORM_BUFFER, 1, n158.VERTEX), w170.LAYOUT = new g160(w169.LOCAL, i169.BINDING, i169.NAME, [new f160("cc_displacementWeights", v157.FLOAT4, i169.MAX_MORPH_TARGET_COUNT / 4), new f160("cc_displacementTextureInfo", v157.FLOAT4, 1)], 1), o169.layouts[w170.NAME] = w170.LAYOUT, o169.bindings[w170.BINDING] = w170.DESCRIPTOR;
            class x170 {
            }
            j169 = x170, x170.NAME = "CCUILocal", x170.BINDING = s169.UBO_UI_LOCAL, x170.DESCRIPTOR = new a161(j169.BINDING, z158.DYNAMIC_UNIFORM_BUFFER, 1, n158.VERTEX), x170.LAYOUT = new g160(w169.LOCAL, j169.BINDING, j169.NAME, [new f160("cc_local_data", v157.FLOAT4, 1)], 1), o169.layouts[x170.NAME] = x170.LAYOUT, o169.bindings[x170.BINDING] = x170.DESCRIPTOR;
            class y170 {
            }
            k169 = y170, y170.SH_LINEAR_CONST_R_OFFSET = 0, y170.SH_LINEAR_CONST_G_OFFSET = k169.SH_LINEAR_CONST_R_OFFSET + 4, y170.SH_LINEAR_CONST_B_OFFSET = k169.SH_LINEAR_CONST_G_OFFSET + 4, y170.SH_QUADRATIC_R_OFFSET = k169.SH_LINEAR_CONST_B_OFFSET + 4, y170.SH_QUADRATIC_G_OFFSET = k169.SH_QUADRATIC_R_OFFSET + 4, y170.SH_QUADRATIC_B_OFFSET = k169.SH_QUADRATIC_G_OFFSET + 4, y170.SH_QUADRATIC_A_OFFSET = k169.SH_QUADRATIC_B_OFFSET + 4, y170.COUNT = k169.SH_QUADRATIC_A_OFFSET + 4, y170.SIZE = 4 * k169.COUNT, y170.NAME = "CCSH", y170.BINDING = s169.UBO_SH, y170.DESCRIPTOR = new a161(k169.BINDING, z158.UNIFORM_BUFFER, 1, n158.FRAGMENT), y170.LAYOUT = new g160(w169.LOCAL, k169.BINDING, k169.NAME, [new f160("cc_sh_linear_const_r", v157.FLOAT4, 1), new f160("cc_sh_linear_const_g", v157.FLOAT4, 1), new f160("cc_sh_linear_const_b", v157.FLOAT4, 1), new f160("cc_sh_quadratic_r", v157.FLOAT4, 1), new f160("cc_sh_quadratic_g", v157.FLOAT4, 1), new f160("cc_sh_quadratic_b", v157.FLOAT4, 1), new f160("cc_sh_quadratic_a", v157.FLOAT4, 1)], 1), o169.layouts[y170.NAME] = y170.LAYOUT, o169.bindings[y170.BINDING] = y170.DESCRIPTOR;
            const z170 = s169.SAMPLER_JOINTS, a171 = new a161(z170, z158.SAMPLER_TEXTURE, 1, n158.VERTEX), b171 = new h160(w169.LOCAL, z170, "cc_jointTexture", v157.SAMPLER2D, 1);
            o169.layouts.cc_jointTexture = b171, o169.bindings[z170] = a171;
            const c171 = s169.SAMPLER_JOINTS, d171 = new a161(c171, z158.SAMPLER_TEXTURE, 1, n158.VERTEX), e171 = new h160(w169.LOCAL, c171, "cc_realtimeJoint", v157.SAMPLER2D, 1);
            o169.layouts.cc_realtimeJoint = e171, o169.bindings[c171] = d171;
            const f171 = s169.SAMPLER_MORPH_POSITION, g171 = new a161(f171, z158.SAMPLER_TEXTURE, 1, n158.VERTEX), h171 = new h160(w169.LOCAL, f171, "cc_PositionDisplacements", v157.SAMPLER2D, 1);
            o169.layouts.cc_PositionDisplacements = h171, o169.bindings[f171] = g171;
            const i171 = s169.SAMPLER_MORPH_NORMAL, j171 = new a161(i171, z158.SAMPLER_TEXTURE, 1, n158.VERTEX), k171 = new h160(w169.LOCAL, i171, "cc_NormalDisplacements", v157.SAMPLER2D, 1);
            o169.layouts.cc_NormalDisplacements = k171, o169.bindings[i171] = j171;
            const l171 = s169.SAMPLER_MORPH_TANGENT, m171 = new a161(l171, z158.SAMPLER_TEXTURE, 1, n158.VERTEX), n171 = new h160(w169.LOCAL, l171, "cc_TangentDisplacements", v157.SAMPLER2D, 1);
            o169.layouts.cc_TangentDisplacements = n171, o169.bindings[l171] = m171;
            const o171 = s169.SAMPLER_LIGHTMAP, p171 = new a161(o171, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), q171 = new h160(w169.LOCAL, o171, "cc_lightingMap", v157.SAMPLER2D, 1);
            o169.layouts.cc_lightingMap = q171, o169.bindings[o171] = p171;
            const r171 = s169.SAMPLER_SPRITE, s171 = new a161(r171, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), t171 = new h160(w169.LOCAL, r171, "cc_spriteTexture", v157.SAMPLER2D, 1);
            o169.layouts.cc_spriteTexture = t171, o169.bindings[r171] = s171;
            const u171 = s169.SAMPLER_REFLECTION, v171 = new a161(u171, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), w171 = new h160(w169.LOCAL, u171, "cc_reflectionTexture", v157.SAMPLER2D, 1);
            o169.layouts.cc_reflectionTexture = w171, o169.bindings[u171] = v171;
            const x171 = s169.STORAGE_REFLECTION, y171 = new a161(x171, z158.STORAGE_IMAGE, 1, n158.COMPUTE), z171 = new k160(w169.LOCAL, x171, "cc_reflectionStorage", v157.IMAGE2D, 1);
            o169.layouts.cc_reflectionStorage = z171, o169.bindings[x171] = y171;
            const a172 = s169.SAMPLER_REFLECTION_PROBE_CUBE, b172 = new a161(a172, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), c172 = new h160(w169.LOCAL, a172, "cc_reflectionProbeCubemap", v157.SAMPLER_CUBE, 1);
            o169.layouts.cc_reflectionProbeCubemap = c172, o169.bindings[a172] = b172;
            const d172 = s169.SAMPLER_REFLECTION_PROBE_PLANAR, e172 = new a161(d172, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), f172 = new h160(w169.LOCAL, d172, "cc_reflectionProbePlanarMap", v157.SAMPLER2D, 1);
            o169.layouts.cc_reflectionProbePlanarMap = f172, o169.bindings[d172] = e172;
            const g172 = s169.SAMPLER_REFLECTION_PROBE_DATA_MAP, h172 = new a161(g172, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), i172 = new h160(w169.LOCAL, g172, "cc_reflectionProbeDataMap", v157.SAMPLER2D, 1);
            o169.layouts.cc_reflectionProbeDataMap = i172, o169.bindings[g172] = h172;
            const j172 = s169.SAMPLER_REFLECTION_PROBE_BLEND_CUBE, k172 = new a161(j172, z158.SAMPLER_TEXTURE, 1, n158.FRAGMENT), l172 = new h160(w169.LOCAL, j172, "cc_reflectionProbeBlendCubemap", v157.SAMPLER_CUBE, 1);
            o169.layouts.cc_reflectionProbeBlendCubemap = l172, o169.bindings[j172] = k172;
            const m172 = w168.makeMaskExclude([w168.BitMask.UI_2D, w168.BitMask.GIZMOS, w168.BitMask.EDITOR, w168.BitMask.SCENE_GIZMO, w168.BitMask.PROFILER]), n172 = w168.makeMaskExclude([w168.BitMask.UI_2D, w168.BitMask.PROFILER]), o172 = w168.Enum.ALL;
            function i135(v1129) {
                return (v1129.getFormatFeatures(t157.R32F) & (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE)) == (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE) && !(v1129.gfxAPI === q157.WEBGL);
            }
            function j135(u1129) {
                return (u1129.getFormatFeatures(t157.RGBA16F) & (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE)) == (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE) && !(u1129.gfxAPI === q157.WEBGL);
            }
            function k135() {
                return !(!s143.rendering || !s143.rendering.enableEffectImport);
            }
            g125("pipeline", Object.freeze({
                __proto__: null,
                PIPELINE_FLOW_MAIN: "MainFlow",
                PIPELINE_FLOW_FORWARD: "ForwardFlow",
                PIPELINE_FLOW_SHADOW: "ShadowFlow",
                PIPELINE_FLOW_SMAA: "SMAAFlow",
                PIPELINE_FLOW_TONEMAP: "ToneMapFlow",
                get RenderPassStage() {
                    return l169;
                },
                get RenderPriority() {
                    return m169;
                },
                globalDescriptorSetLayout: n169,
                localDescriptorSetLayout: o169,
                get PipelineGlobalBindings() {
                    return p169;
                },
                get ModelLocalBindings() {
                    return s169;
                },
                get SetIndex() {
                    return w169;
                },
                bindingMappingInfo: x169,
                UBOGlobal: y169,
                UBOCamera: z169,
                UBOShadow: a170,
                UBOCSM: b170,
                UNIFORM_SHADOWMAP_BINDING: c170,
                UNIFORM_ENVIRONMENT_BINDING: f170,
                UNIFORM_DIFFUSEMAP_BINDING: i170,
                UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING: l170,
                UBOLocal: o170,
                UBOWorldBound: p170,
                INST_MAT_WORLD: "a_matWorld0",
                INST_SH: "a_sh_linear_const_r",
                UBOLocalBatched: q170,
                UBOForwardLight: r170,
                UBODeferredLight: s170,
                JOINT_UNIFORM_CAPACITY: 30,
                UBOSkinningTexture: t170,
                UBOSkinningAnimation: u170,
                INST_JOINT_ANIM_INFO: "a_jointAnimInfo",
                UBOSkinning: v170,
                localDescriptorSetLayout_ResizeMaxJoints: function (t1129) {
                    v170.initLayout(t1129), o169.layouts[v170.NAME] = v170.LAYOUT, o169.bindings[v170.BINDING] = v170.DESCRIPTOR;
                },
                UBOMorph: w170,
                UBOUILocal: x170,
                UBOSH: y170,
                UNIFORM_JOINT_TEXTURE_BINDING: z170,
                UNIFORM_REALTIME_JOINT_TEXTURE_BINDING: c171,
                UNIFORM_POSITION_MORPH_TEXTURE_BINDING: f171,
                UNIFORM_NORMAL_MORPH_TEXTURE_BINDING: i171,
                UNIFORM_TANGENT_MORPH_TEXTURE_BINDING: l171,
                UNIFORM_LIGHTMAP_TEXTURE_BINDING: o171,
                UNIFORM_SPRITE_TEXTURE_BINDING: r171,
                UNIFORM_REFLECTION_TEXTURE_BINDING: u171,
                UNIFORM_REFLECTION_STORAGE_BINDING: x171,
                UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING: a172,
                UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING: d172,
                UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING: g172,
                UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING: j172,
                CAMERA_DEFAULT_MASK: m172,
                CAMERA_EDITOR_MASK: n172,
                MODEL_ALWAYS_MASK: o172,
                supportsR16HalfFloatTexture: function (s1129) {
                    return (s1129.getFormatFeatures(t157.R16F) & (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE)) == (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE);
                },
                supportsR32FloatTexture: i135,
                supportsRGBA16HalfFloatTexture: j135,
                supportsRGBA32FloatTexture: function (r1129) {
                    return (r1129.getFormatFeatures(t157.RGBA32F) & (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE)) == (d158.RENDER_TARGET | d158.SAMPLED_TEXTURE) && !(r1129.gfxAPI === q157.WEBGL);
                },
                isEnableEffect: k135
            }));
            const p172 = jsb.RenderTexture.prototype, q172 = jsb.TextureBase.prototype;
            p172.createNode = null;
            const r172 = g125("RenderTexture", jsb.RenderTexture);
            r172.Filter = w163, r172.PixelFormat = u163, r172.WrapMode = v163, p172._serialize = function () {
                return {};
            }, p172._deserialize = function (o1129, p1129) {
                const q1129 = o1129;
                this._width = q1129.w, this._height = q1129.h, this._name = q1129.n, q172._deserialize.call(this, q1129.base, p1129);
            };
            const s172 = p172.readPixels;
            p172.readPixels = function (j1129, k1129, l1129, m1129) {
                j1129 = j1129 || 0, k1129 = k1129 || 0, l1129 = l1129 || this.width, m1129 = m1129 || this.height;
                let n1129 = s172.call(this, j1129, k1129, l1129, m1129);
                return 0 == n1129.length ? null : n1129;
            }, s143.RenderTexture = jsb.RenderTexture, function (f1129, g1129 = r163) {
                const { RenderTexture: h1129 } = {
                    ...f1129
                };
                g1129(() => {
                    e151("cc.RenderTexture")(h1129);
                }, "ccclass", null);
            }({
                RenderTexture: r172
            });
            const t172 = g125("getPhaseID", (() => {
                const b1129 = new Map();
                let c1129 = 0;
                return e1129 => "number" == typeof e1129 ? e1129 : (b1129.has(e1129) || (b1129.set(e1129, 1 << c1129), c1129++), b1129.get(e1129));
            })());
            let u172;
            var v172, w172, x172, y172, z172, a173, b173, c173, d173, e173, f173, g173;
            g125("PipelineEventType", u172), function (a1129) {
                a1129.RENDER_FRAME_BEGIN = "render-frame-begin", a1129.RENDER_FRAME_END = "render-frame-end", a1129.RENDER_CAMERA_BEGIN = "render-camera-begin", a1129.RENDER_CAMERA_END = "render-camera-end", a1129.ATTACHMENT_SCALE_CAHNGED = "attachment-scale-changed";
            }(u172 || g125("PipelineEventType", u172 = {}));
            const h173 = g125("RenderPipeline", nr.RenderPipeline), i173 = g125("RenderFlow", nr.RenderFlow), j173 = g125("RenderStage", nr.RenderStage), k173 = (g125("InstancedBuffer", nr.InstancedBuffer), g125("PipelineStateManager", nr.PipelineStateManager)), l173 = g125("ForwardPipeline", nr.ForwardPipeline), m173 = g125("ForwardFlow", nr.ForwardFlow), n173 = g125("ShadowFlow", nr.ShadowFlow), o173 = g125("ForwardStage", nr.ForwardStage), p173 = g125("ShadowStage", nr.ShadowStage), q173 = g125("DeferredPipeline", nr.DeferredPipeline), r173 = g125("MainFlow", nr.MainFlow), s173 = g125("LightingStage", nr.LightingStage), t173 = g125("PostProcessStage", nr.PostProcessStage), u173 = g125("GbufferStage", nr.GbufferStage), v173 = g125("BloomStage", nr.BloomStage), w173 = g125("ReflectionProbeFlow", nr.ReflectionProbeFlow), x173 = g125("ReflectionProbeStage", nr.ReflectionProbeStage);
            let y173 = nr.PipelineStateManager.getOrCreatePipelineState;
            nr.PipelineStateManager.getOrCreatePipelineState = function (v1128, w1128, x1128, y1128, z1128) {
                return y173(w1128, x1128, y1128, z1128);
            };
            const z173 = l173.prototype;
            z173._ctor = function () {
                this._tag = 0, this._flows = [];
            }, z173.init = function () {
                for (let u1128 = 0; u1128 < this._flows.length; u1128++)
                    this._flows[u1128].init(this);
                const t1128 = {
                    tag: this._tag,
                    flows: this._flows
                };
                this.initialize(t1128);
            };
            const a174 = z173.onLoaded;
            z173.onLoaded = function () {
                a174 && a174.call(this);
                for (let s1128 = 0; s1128 < this._flows.length; s1128++)
                    this._flows[s1128].init(this);
                const r1128 = {
                    tag: this._tag,
                    flows: this._flows
                };
                this.initialize(r1128);
            };
            const b174 = m173.prototype;
            b174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this._stages = [];
            }, b174.init = function (o1128) {
                for (let q1128 = 0; q1128 < this._stages.length; q1128++)
                    this._stages[q1128].init(o1128);
                const p1128 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    stages: this._stages
                };
                this.initialize(p1128);
            };
            const c174 = n173.prototype;
            c174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this._stages = [];
            }, c174.init = function (l1128) {
                for (let n1128 = 0; n1128 < this._stages.length; n1128++)
                    this._stages[n1128].init(l1128);
                const m1128 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    stages: this._stages
                };
                this.initialize(m1128);
            };
            const d174 = w173.prototype;
            d174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this._stages = [];
            }, d174.init = function (i1128) {
                for (let k1128 = 0; k1128 < this._stages.length; k1128++)
                    this._stages[k1128].init(i1128);
                const j1128 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    stages: this._stages
                };
                this.initialize(j1128);
            };
            const e174 = o173.prototype;
            e174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this.renderQueues = [];
            }, e174.init = function () {
                const f1128 = [];
                for (let h1128 = 0; h1128 < this.renderQueues.length; h1128++)
                    f1128.push(this.renderQueues[h1128].init());
                const g1128 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    renderQueues: f1128
                };
                this.initialize(g1128);
            };
            const f174 = p173.prototype;
            f174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0;
            };
            const g174 = x173.prototype;
            let h174;
            g174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this.renderQueues = [];
            }, g174.init = function () {
                const c1128 = [];
                for (let e1128 = 0; e1128 < this.renderQueues.length; e1128++)
                    c1128.push(this.renderQueues[e1128].init());
                const d1128 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    renderQueues: c1128
                };
                this.initialize(d1128);
            }, g125("RenderQueueSortMode", h174), function (b1128) {
                b1128[b1128.FRONT_TO_BACK = 0] = "FRONT_TO_BACK", b1128[b1128.BACK_TO_FRONT = 1] = "BACK_TO_FRONT";
            }(h174 || g125("RenderQueueSortMode", h174 = {})), s127(h174), f174.init = function () {
                const a1128 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    renderQueues: []
                };
                this.initialize(a1128);
            };
            let i174 = g125("RenderQueueDesc", (v172 = a131(h174), w172 = a131([b146]), x172 = class {
                constructor() {
                    this.isTransparent = y172 && y172(), this.sortMode = z172 && z172(), this.stages = a173 && a173(), this.stages = [];
                }
                init() {
                    return new nr.RenderQueueDesc(this.isTransparent, this.sortMode, this.stages);
                }
            }, y172 = p130(x172.prototype, "isTransparent", [j151], function () {
                return !1;
            }), z172 = p130(x172.prototype, "sortMode", [v172], function () {
                return h174.FRONT_TO_BACK;
            }), a173 = p130(x172.prototype, "stages", [w172], function () {
                return [];
            }), x172));
            const j174 = q173.prototype;
            j174._ctor = function () {
                this._tag = 0, this._flows = [], this.renderTextures = [], this.materials = [];
            };
            const k174 = j174.onLoaded;
            j174.onLoaded = function () {
                k174 && k174.call(this);
                for (let z1127 = 0; z1127 < this._flows.length; z1127++)
                    this._flows[z1127].init(this);
                let y1127 = {
                    tag: this._tag,
                    flows: this._flows
                };
                this.initialize(y1127);
            };
            const l174 = r173.prototype;
            l174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this._stages = [];
            }, l174.init = function (v1127) {
                for (let x1127 = 0; x1127 < this._stages.length; x1127++)
                    this._stages[x1127].init(v1127);
                const w1127 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    stages: this._stages
                };
                this.initialize(w1127);
            };
            const m174 = u173.prototype;
            m174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this.renderQueues = [];
            }, m174.init = function () {
                const s1127 = [];
                for (let u1127 = 0; u1127 < this.renderQueues.length; u1127++)
                    s1127.push(this.renderQueues[u1127].init());
                const t1127 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    renderQueues: s1127
                };
                this.initialize(t1127);
            };
            const n174 = s173.prototype;
            n174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this.renderQueues = [], this._deferredMaterial = null;
            }, n174.init = function (o1127) {
                const p1127 = [];
                for (let r1127 = 0; r1127 < this.renderQueues.length; r1127++)
                    p1127.push(this.renderQueues[r1127].init());
                o1127.pipelineSceneData.deferredLightingMaterial = this._deferredMaterial;
                const q1127 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    renderQueues: p1127
                };
                this.initialize(q1127);
            };
            const o174 = v173.prototype;
            o174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this.renderQueues = [], this._bloomMaterial = null;
            }, o174.init = function (k1127) {
                const l1127 = [];
                for (let n1127 = 0; n1127 < this.renderQueues.length; n1127++)
                    l1127.push(this.renderQueues[n1127].init());
                k1127.pipelineSceneData.bloomMaterial = this._bloomMaterial;
                const m1127 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    renderQueues: l1127
                };
                this.initialize(m1127);
            };
            const p174 = t173.prototype;
            p174._ctor = function () {
                this._name = 0, this._priority = 0, this._tag = 0, this.renderQueues = [], this._postProcessMaterial = null;
            }, p174.init = function (g1127) {
                const h1127 = [];
                for (let j1127 = 0; j1127 < this.renderQueues.length; j1127++)
                    h1127.push(this.renderQueues[j1127].init());
                g1127.pipelineSceneData.postProcessMaterial = this._postProcessMaterial;
                const i1127 = {
                    name: this._name,
                    priority: this._priority,
                    tag: this._tag,
                    renderQueues: h1127
                };
                this.initialize(i1127);
            }, s143.RenderFlow = i173, s143.RenderStage = j173, s143.RenderPipeline = h173;
            let q174 = (b173 = e151("RenderTextureConfig"), c173 = a131(r172), b173((e173 = class {
                constructor() {
                    this.name = f173 && f173(), this.texture = g173 && g173();
                }
            }, f173 = p130(e173.prototype, "name", [j151], function () {
                return "";
            }), g173 = p130(e173.prototype, "texture", [c173], function () {
                return null;
            }), d173 = e173)) || d173);
            const r174 = jsb.Material;
            !function (t1126, u1126 = r163) {
                const { RenderQueueDesc: v1126, RenderQueueSortMode: w1126, CCString: x1126 } = {
                    ...t1126
                };
                u1126(() => {
                    s151(v1126.prototype);
                }, "editable", "isTransparent"), u1126(() => {
                    j151(v1126.prototype, "isTransparent", () => !1);
                }, "serializable", "isTransparent"), u1126(() => {
                    a131(w1126)(v1126.prototype, "sortMode", () => w1126.FRONT_TO_BACK);
                }, "type", "sortMode"), u1126(() => {
                    a131([x1126])(v1126.prototype, "stages", () => []);
                }, "type", "stages"), u1126(() => {
                    e151("RenderQueueDesc")(v1126);
                }, "ccclass", null);
            }({
                RenderQueueDesc: i174,
                RenderQueueSortMode: h174,
                CCString: b146
            }), function (d1126, e1126 = r163) {
                const { RenderStage: f1126 } = {
                    ...d1126
                };
                e1126(() => {
                    j151(f1126.prototype, "_name", () => "");
                }, "serializable", "_name"), e1126(() => {
                    b152()(f1126.prototype, "_name", () => "");
                }, "displayOrder", "_name"), e1126(() => {
                    j151(f1126.prototype, "_priority", () => 0);
                }, "serializable", "_priority"), e1126(() => {
                    b152()(f1126.prototype, "_priority", () => 0);
                }, "displayOrder", "_priority"), e1126(() => {
                    j151(f1126.prototype, "_tag", () => 0);
                }, "serializable", "_tag"), e1126(() => {
                    b152()(f1126.prototype, "_tag", () => 0);
                }, "displayOrder", "_tag"), e1126(() => {
                    e151("RenderStage")(f1126);
                }, "ccclass", null);
            }({
                RenderStage: j173
            }), function (z1125, a1126 = r163) {
                const { ReflectionProbeStage: b1126 } = {
                    ...z1125
                };
                a1126(() => {
                    e151("ReflectionProbeStage")(b1126);
                }, "ccclass", null);
            }({
                ReflectionProbeStage: x173
            }), function (o1125, p1125 = r163) {
                const { GbufferStage: q1125, RenderQueueDesc: r1125 } = {
                    ...o1125
                };
                p1125(() => {
                    b152()(q1125.prototype, "renderQueues", () => []);
                }, "displayOrder", "renderQueues"), p1125(() => {
                    j151(q1125.prototype, "renderQueues", () => []);
                }, "serializable", "renderQueues"), p1125(() => {
                    a131([r1125])(q1125.prototype, "renderQueues", () => []);
                }, "type", "renderQueues"), p1125(() => {
                    e151("GbufferStage")(q1125);
                }, "ccclass", null);
            }({
                GbufferStage: u173,
                RenderQueueDesc: i174
            }), function (w1124, x1124 = r163) {
                const { LightingStage: y1124, Material: z1124, RenderQueueDesc: a1125 } = {
                    ...w1124
                };
                x1124(() => {
                    b152()(y1124.prototype, "_deferredMaterial", () => null);
                }, "displayOrder", "_deferredMaterial"), x1124(() => {
                    j151(y1124.prototype, "_deferredMaterial", () => null);
                }, "serializable", "_deferredMaterial"), x1124(() => {
                    a131(z1124)(y1124.prototype, "_deferredMaterial", () => null);
                }, "type", "_deferredMaterial"), x1124(() => {
                    b152()(y1124.prototype, "renderQueues", () => []);
                }, "displayOrder", "renderQueues"), x1124(() => {
                    j151(y1124.prototype, "renderQueues", () => []);
                }, "serializable", "renderQueues"), x1124(() => {
                    a131([a1125])(y1124.prototype, "renderQueues", () => []);
                }, "type", "renderQueues"), x1124(() => {
                    e151("LightingStage")(y1124);
                }, "ccclass", null);
            }({
                LightingStage: s173,
                RenderQueueDesc: i174,
                Material: r174
            }), function (l1124, m1124 = r163) {
                const { BloomStage: n1124, Material: o1124 } = {
                    ...l1124
                };
                m1124(() => {
                    b152()(n1124.prototype, "_bloomMaterial", () => null);
                }, "displayOrder", "_bloomMaterial"), m1124(() => {
                    j151(n1124.prototype, "_bloomMaterial", () => null);
                }, "serializable", "_bloomMaterial"), m1124(() => {
                    a131(o1124)(n1124.prototype, "_bloomMaterial", () => null);
                }, "type", "_bloomMaterial"), m1124(() => {
                    e151("BloomStage")(n1124);
                }, "ccclass", null);
            }({
                BloomStage: v173,
                Material: r174
            }), function (t1123, u1123 = r163) {
                const { PostProcessStage: v1123, Material: w1123, RenderQueueDesc: x1123 } = {
                    ...t1123
                };
                u1123(() => {
                    b152()(v1123.prototype, "_postProcessMaterial", () => null);
                }, "displayOrder", "_postProcessMaterial"), u1123(() => {
                    j151(v1123.prototype, "_postProcessMaterial", () => null);
                }, "serializable", "_postProcessMaterial"), u1123(() => {
                    a131(w1123)(v1123.prototype, "_postProcessMaterial", () => null);
                }, "type", "_postProcessMaterial"), u1123(() => {
                    b152()(v1123.prototype, "renderQueues", () => []);
                }, "displayOrder", "renderQueues"), u1123(() => {
                    j151(v1123.prototype, "renderQueues", () => []);
                }, "serializable", "renderQueues"), u1123(() => {
                    a131([x1123])(v1123.prototype, "renderQueues", () => []);
                }, "type", "renderQueues"), u1123(() => {
                    e151("PostProcessStage")(v1123);
                }, "ccclass", null);
            }({
                PostProcessStage: t173,
                Material: r174,
                RenderQueueDesc: i174
            }), function (i1123, j1123 = r163) {
                const { ForwardStage: k1123, RenderQueueDesc: l1123 } = {
                    ...i1123
                };
                j1123(() => {
                    b152()(k1123.prototype, "renderQueues", () => []);
                }, "displayOrder", "renderQueues"), j1123(() => {
                    j151(k1123.prototype, "renderQueues", () => []);
                }, "serializable", "renderQueues"), j1123(() => {
                    a131([l1123])(k1123.prototype, "renderQueues", () => []);
                }, "type", "renderQueues"), j1123(() => {
                    e151("ForwardStage")(k1123);
                }, "ccclass", null);
            }({
                ForwardStage: o173,
                RenderQueueDesc: i174
            }), function (e1123, f1123 = r163) {
                const { ShadowStage: g1123 } = {
                    ...e1123
                };
                f1123(() => {
                    e151("ShadowStage")(g1123);
                }, "ccclass", null);
            }({
                ShadowStage: p173
            }), function (h1122, i1122 = r163) {
                const { RenderFlow: j1122, RenderStage: k1122 } = {
                    ...h1122
                };
                i1122(() => {
                    j151(j1122.prototype, "_name", () => "");
                }, "serializable", "_name"), i1122(() => {
                    b152()(j1122.prototype, "_name", () => "");
                }, "displayOrder", "_name"), i1122(() => {
                    j151(j1122.prototype, "_priority", () => 0);
                }, "serializable", "_priority"), i1122(() => {
                    b152()(j1122.prototype, "_priority", () => 0);
                }, "displayOrder", "_priority"), i1122(() => {
                    j151(j1122.prototype, "_tag", () => 0);
                }, "serializable", "_tag"), i1122(() => {
                    b152()(j1122.prototype, "_tag", () => 0);
                }, "displayOrder", "_tag"), i1122(() => {
                    j151(j1122.prototype, "_stages", () => []);
                }, "serializable", "_stages"), i1122(() => {
                    a131([k1122])(j1122.prototype, "_stages", () => []);
                }, "type", "_stages"), i1122(() => {
                    b152()(j1122.prototype, "_stages", () => []);
                }, "displayOrder", "_stages"), i1122(() => {
                    e151("RenderFlow")(j1122);
                }, "ccclass", null);
            }({
                RenderFlow: i173,
                RenderStage: j173
            }), function (d1122, e1122 = r163) {
                const { MainFlow: f1122 } = {
                    ...d1122
                };
                e1122(() => {
                    e151("MainFlow")(f1122);
                }, "ccclass", null);
            }({
                MainFlow: r173
            }), function (z1121, a1122 = r163) {
                const { ForwardFlow: b1122 } = {
                    ...z1121
                };
                a1122(() => {
                    e151("ForwardFlow")(b1122);
                }, "ccclass", null);
            }({
                ForwardFlow: m173
            }), function (v1121, w1121 = r163) {
                const { ShadowFlow: x1121 } = {
                    ...v1121
                };
                w1121(() => {
                    e151("ShadowFlow")(x1121);
                }, "ccclass", null);
            }({
                ShadowFlow: n173
            }), function (r1121, s1121 = r163) {
                const { ReflectionProbeFlow: t1121 } = {
                    ...r1121
                };
                s1121(() => {
                    e151("ReflectionProbeFlow")(t1121);
                }, "ccclass", null);
            }({
                ReflectionProbeFlow: w173
            }), function (c1121, d1121 = r163) {
                const { RenderPipeline: e1121, RenderFlow: f1121 } = {
                    ...c1121
                };
                d1121(() => {
                    j151(e1121.prototype, "_tag", () => 0);
                }, "serializable", "_tag"), d1121(() => {
                    b152()(e1121.prototype, "_tag", () => 0);
                }, "displayOrder", "_tag"), d1121(() => {
                    j151(e1121.prototype, "_flows", () => []);
                }, "serializable", "_flows"), d1121(() => {
                    a131([f1121])(e1121.prototype, "_flows", () => []);
                }, "type", "_flows"), d1121(() => {
                    b152()(e1121.prototype, "_flows", () => []);
                }, "displayOrder", "_flows"), d1121(() => {
                    e151("cc.RenderPipeline")(e1121);
                }, "ccclass", null);
            }({
                RenderPipeline: h173,
                RenderFlow: i173
            }), function (r1120, s1120 = r163) {
                const { ForwardPipeline: t1120, RenderTextureConfig: u1120 } = {
                    ...r1120
                };
                s1120(() => {
                    b152()(t1120.prototype, "renderTextures", () => []);
                }, "displayOrder", "renderTextures"), s1120(() => {
                    j151(t1120.prototype, "renderTextures", () => []);
                }, "serializable", "renderTextures"), s1120(() => {
                    a131([u1120])(t1120.prototype, "renderTextures", () => []);
                }, "type", "renderTextures"), s1120(() => {
                    e151("ForwardPipeline")(t1120);
                }, "ccclass", null);
            }({
                ForwardPipeline: l173,
                RenderTextureConfig: q174
            }), function (g1120, h1120 = r163) {
                const { DeferredPipeline: i1120, RenderTextureConfig: j1120 } = {
                    ...g1120
                };
                h1120(() => {
                    b152()(i1120.prototype, "renderTextures", () => []);
                }, "displayOrder", "renderTextures"), h1120(() => {
                    j151(i1120.prototype, "renderTextures", () => []);
                }, "serializable", "renderTextures"), h1120(() => {
                    a131([j1120])(i1120.prototype, "renderTextures", () => []);
                }, "type", "renderTextures"), h1120(() => {
                    e151("DeferredPipeline")(i1120);
                }, "ccclass", null);
            }({
                DeferredPipeline: q173,
                RenderTextureConfig: q174
            });
            const s174 = g125("Root", jsb.Root);
            var t174;
            !function (f1120) {
                f1120[f1120.DIRECTIONAL = 0] = "DIRECTIONAL", f1120[f1120.SPHERE = 1] = "SPHERE", f1120[f1120.SPOT = 2] = "SPOT", f1120[f1120.POINT = 3] = "POINT", f1120[f1120.RANGED_DIRECTIONAL = 4] = "RANGED_DIRECTIONAL", f1120[f1120.UNKNOWN = 5] = "UNKNOWN";
            }(t174 || (t174 = {}));
            const u174 = s174.prototype;
            u174._createBatcher2D = function () {
                if (!this._batcher && s143.internal.Batcher2D) {
                    if (this._batcher = new s143.internal.Batcher2D(this), !this._batcher.initialize())
                        return this._batcher = null, void this.destroy();
                    this._batcher._nativeObj = this.getBatcher2D();
                }
            }, Object.defineProperty(u174, "batcher2D", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._batcher;
                }
            }), Object.defineProperty(u174, "dataPoolManager", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._dataPoolMgr;
                }
            }), Object.defineProperty(u174, "pipelineEvent", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._pipelineEvent;
                }
            });
            class v174 {
                on(b1120, c1120, d1120, e1120) { }
                once(y1119, z1119, a1120) { }
                off(v1119, w1119, x1119) { }
                emit(p1119, q1119, r1119, s1119, t1119, u1119) { }
                targetOff(o1119) { }
                removeAll(n1119) { }
                hasEventListener(k1119, l1119, m1119) {
                    return !1;
                }
            }
            u174._ctor = function (j1119) {
                this._device = j1119, this._dataPoolMgr = s143.internal.DataPoolManager && new s143.internal.DataPoolManager(j1119), this._modelPools = new Map(), this._lightPools = new Map(), this._batcher = null, this._pipelineEvent = new v174(), this._registerListeners();
            }, u174.initialize = function () {
                var h1119;
                this._initialize(b162.swapchain);
                const i1119 = r145.querySettings(q145.Category.ANIMATION, "customJointTextureLayouts") || [];
                null === (h1119 = this._dataPoolMgr) || void 0 === h1119 || h1119.jointTexturePool.registerCustomTextureLayouts(i1119);
            }, u174.createModel = function (b1119) {
                let c1119 = this._modelPools.get(b1119);
                c1119 || (this._modelPools.set(b1119, new x155(() => new b1119(), 10, g1119 => g1119.destroy())), c1119 = this._modelPools.get(b1119));
                const d1119 = c1119.alloc();
                return d1119.initialize(), d1119;
            }, u174.destroyModel = function (z1118) {
                const a1119 = this._modelPools.get(z1118.constructor);
                a1119 ? (a1119.free(z1118), z1118.scene && z1118.scene.removeModel(z1118)) : y125(1300, z1118.constructor.name), z1118.destroy();
            }, u174.createLight = function (t1118) {
                let u1118 = this._lightPools.get(t1118);
                u1118 || (this._lightPools.set(t1118, new x155(() => new t1118(), 4, y1118 => y1118.destroy())), u1118 = this._lightPools.get(t1118));
                const v1118 = u1118.alloc();
                return v1118.initialize(), v1118;
            }, u174.destroyLight = function (s1118) {
                if (s1118.scene)
                    switch (s1118.type) {
                        case t174.DIRECTIONAL:
                            s1118.scene.removeDirectionalLight(s1118);
                            break;
                        case t174.SPHERE:
                            s1118.scene.removeSphereLight(s1118);
                            break;
                        case t174.SPOT:
                            s1118.scene.removeSpotLight(s1118);
                            break;
                        case t174.POINT:
                            s1118.scene.removePointLight(s1118);
                            break;
                        case t174.RANGED_DIRECTIONAL:
                            s1118.scene.removeRangedDirLight(s1118);
                    }
                s1118.destroy();
            }, u174.recycleLight = function (q1118) {
                const r1118 = this._lightPools.get(q1118.constructor);
                if (r1118 && (r1118.free(q1118), q1118.scene))
                    switch (q1118.type) {
                        case t174.DIRECTIONAL:
                            q1118.scene.removeDirectionalLight(q1118);
                            break;
                        case t174.SPHERE:
                            q1118.scene.removeSphereLight(q1118);
                            break;
                        case t174.SPOT:
                            q1118.scene.removeSpotLight(q1118);
                            break;
                        case t174.POINT:
                            q1118.scene.removePointLight(q1118);
                            break;
                        case t174.RANGED_DIRECTIONAL:
                            q1118.scene.removeRangedDirLight(q1118);
                    }
            }, u174._onDirectorBeforeCommit = function () {
                s143.director.emit(s143.Director.EVENT_BEFORE_COMMIT);
            }, u174._onDirectorBeforeRender = function () {
                s143.director.emit(s143.Director.EVENT_BEFORE_RENDER);
            }, u174._onDirectorAfterRender = function () {
                s143.director.emit(s143.Director.EVENT_AFTER_RENDER);
            }, u174._onDirectorPipelineChanged = function () {
                const p1118 = s143.director.getScene();
                p1118 && p1118._activate();
            };
            const w174 = u174.onGlobalPipelineStateChanged;
            u174.onGlobalPipelineStateChanged = function () {
                w174.call(this);
                const o1118 = s143.rendering.getCustomPipeline(s145.CUSTOM_PIPELINE_NAME);
                o1118 && "function" == typeof o1118.onGlobalPipelineStateChanged && o1118.onGlobalPipelineStateChanged();
            };
            const x174 = u174.frameMove;
            u174.frameMove = function (n1118) {
                x174.call(this, n1118, s143.director.getTotalFrames());
            };
            const y174 = u174.setRenderPipeline;
            let z174, a175, b175;
            u174.setRenderPipeline = function (l1118) {
                let m1118;
                return "" !== s145.CUSTOM_PIPELINE_NAME && s143.rendering && this.usesCustomPipeline ? (s143.rendering.createCustomPipeline(), m1118 = y174.call(this, null)) : (l1118 || (l1118 = new l173()).init(), m1118 = y174.call(this, l1118)), this._createBatcher2D(), m1118;
            }, u174.addBatch = function () {
                console.error("The Draw Batch class is implemented differently in the native platform and does not support this interface.");
            }, u174.removeBatch = function () {
                console.error("The Draw Batch class is implemented differently in the native platform and does not support this interface.");
            }, u174.removeBatches = function () {
                console.error("The Draw Batch class is implemented differently in the native platform and does not support this interface.");
            }, g125("NodeEventType", z174), function (k1118) {
                k1118.TOUCH_START = "touch-start", k1118.TOUCH_MOVE = "touch-move", k1118.TOUCH_END = "touch-end", k1118.TOUCH_CANCEL = "touch-cancel", k1118.MOUSE_DOWN = "mouse-down", k1118.MOUSE_MOVE = "mouse-move", k1118.MOUSE_UP = "mouse-up", k1118.MOUSE_WHEEL = "mouse-wheel", k1118.MOUSE_ENTER = "mouse-enter", k1118.MOUSE_LEAVE = "mouse-leave", k1118.KEY_DOWN = "keydown", k1118.KEY_UP = "keyup", k1118.DEVICEMOTION = "devicemotion", k1118.TRANSFORM_CHANGED = "transform-changed", k1118.MOBILITY_CHANGED = "mobility-changed", k1118.SCENE_CHANGED_FOR_PERSISTS = "scene-changed-for-persists", k1118.SIZE_CHANGED = "size-changed", k1118.ANCHOR_CHANGED = "anchor-changed", k1118.COLOR_CHANGED = "color-changed", k1118.CHILD_ADDED = "child-added", k1118.CHILD_REMOVED = "child-removed", k1118.PARENT_CHANGED = "parent-changed", k1118.NODE_DESTROYED = "node-destroyed", k1118.LAYER_CHANGED = "layer-changed", k1118.SIBLING_ORDER_CHANGED = "sibling-order-changed", k1118.CHILDREN_ORDER_CHANGED = "sibling-order-changed", k1118.ACTIVE_IN_HIERARCHY_CHANGED = "active-in-hierarchy-changed", k1118.COMPONENT_ADDED = "component-added", k1118.COMPONENT_REMOVED = "component-removed", k1118.LIGHT_PROBE_CHANGED = "light-probe-changed", k1118.LIGHT_PROBE_BAKING_CHANGED = "light-probe-baking-changed";
            }(z174 || g125("NodeEventType", z174 = {}));
            class c175 {
                get uiTransformComp() {
                    return this._uiTransformComp || (this._uiTransformComp = this._node.getComponent("cc.UITransform")), this._uiTransformComp;
                }
                set uiTransformComp(j1118) {
                    this._uiTransformComp = j1118;
                }
                get uiComp() {
                    return this._uiComp;
                }
                set uiComp(i1118) {
                    this._uiComp && i1118 ? y125(12002) : this._uiComp = i1118;
                }
                setOpacity(h1118) {
                    this._opacity = h1118;
                }
                get opacity() {
                    return this._opacity;
                }
                get localOpacity() {
                    return this._localOpacity;
                }
                set localOpacity(g1118) {
                    this._localOpacity = g1118, this.colorDirty = !0;
                }
                constructor(f1118) {
                    this._uiComp = null, this._opacity = 1, this._localOpacity = 1, this.colorDirty = !0, this._uiTransformComp = null, this._node = void 0, this._node = f1118;
                }
                applyOpacity(e1118) {
                    this._opacity = this._localOpacity * e1118;
                }
                static markOpacityTree(c1118, d1118 = !0) { }
            }
            g125("NodeSpace", a175), function (b1118) {
                b1118[b1118.LOCAL = 0] = "LOCAL", b1118[b1118.WORLD = 1] = "WORLD";
            }(a175 || g125("NodeSpace", a175 = {})), g125("TransformBit", b175), function (a1118) {
                a1118[a1118.NONE = 0] = "NONE", a1118[a1118.POSITION = 1] = "POSITION", a1118[a1118.ROTATION = 2] = "ROTATION", a1118[a1118.SCALE = 4] = "SCALE", a1118[a1118.RS = a1118.ROTATION | a1118.SCALE] = "RS", a1118[a1118.TRS = a1118.POSITION | a1118.ROTATION | a1118.SCALE] = "TRS", a1118[a1118.TRS_MASK = ~a1118.TRS] = "TRS_MASK";
            }(b175 || g125("TransformBit", b175 = {})), s143.internal.TransformBit = b175;
            const d175 = g125("MobilityMode", p127({
                Static: 0,
                Stationary: 1,
                Movable: 2
            })), e175 = new Float32Array(jsb.createExternalArrayBuffer(80)), f175 = function (z1117) {
                o147.set(z1117, e175[0], e175[1], e175[2], e175[3], e175[4], e175[5], e175[6], e175[7], e175[8], e175[9], e175[10], e175[11], e175[12], e175[13], e175[14], e175[15]);
            };
            m152.Flags.Destroying, s143.GAME_VIEW;
            const g175 = Symbol("ReserveContentsForAllSyncablePrefab"), h175 = jsb.Node;
            g125({
                Node: h175,
                BaseNode: h175
            }), s143.Node = h175;
            const i175 = h175;
            i175.reserveContentsForAllSyncablePrefabTag = g175, i175.EventType = z174, i175.NodeSpace = a175, i175.TransformDirtyBit = b175, i175.TransformBit = b175;
            const j175 = b175.TRS, k175 = jsb.Node.prototype, l175 = m152.Flags.Destroying;
            function l135(y1117) {
                return y1117 ? "string" == typeof y1117 ? e127(y1117) : y1117 : null;
            }
            h175._setTempFloatArray(e175.buffer), k175.attr = function (x1117) {
                t126(this, x1117);
            }, k175.getComponent = function (v1117) {
                const w1117 = l135(v1117);
                return w1117 ? i175._findComponent(this, w1117) : null;
            }, k175.getComponents = function (s1117) {
                const t1117 = l135(s1117), u1117 = [];
                return t1117 && i175._findComponents(this, t1117, u1117), u1117;
            }, k175.getComponentInChildren = function (q1117) {
                const r1117 = l135(q1117);
                return r1117 ? i175._findChildComponent(this._children, r1117) : null;
            }, k175.getComponentsInChildren = function (n1117) {
                const o1117 = l135(n1117), p1117 = [];
                return o1117 && (i175._findComponents(this, o1117, p1117), i175._findChildComponents(this.children, o1117, p1117)), p1117;
            }, k175.addComponent = function (e1117) {
                let f1117;
                if ("string" == typeof e1117) {
                    if (f1117 = e127(e1117), !f1117)
                        throw s143._RF.peek() && z125(3808, e1117), TypeError(b126(3807, e1117));
                }
                else {
                    if (!e1117)
                        throw TypeError(b126(3804));
                    f1117 = e1117;
                }
                if ("function" != typeof f1117)
                    throw TypeError(b126(3809));
                if (!w126(f1117, a165))
                    throw TypeError(b126(3810));
                const g1117 = f1117._requireComponent;
                if (g1117) {
                    const i1117 = m1117 => {
                        this.getComponent(m1117) || this.addComponent(m1117);
                    };
                    Array.isArray(g1117) ? g1117.forEach(l1117 => i1117(l1117)) : i1117(g1117);
                }
                const h1117 = new f1117();
                return h1117.node = this, this._components.push(h1117), this.emit(z174.COMPONENT_ADDED, h1117), this._activeInHierarchy && s143.director._nodeActivator.activateComp(h1117), h1117;
            }, k175.removeComponent = function (c1117) {
                if (!c1117)
                    return void z125(3813);
                let d1117 = null;
                d1117 = c1117 instanceof a165 ? c1117 : this.getComponent(c1117), d1117 && d1117.destroy();
            }, k175.on = function (y1116, z1116, a1117, b1117 = !1) {
                switch (y1116) {
                    case z174.TRANSFORM_CHANGED:
                        this._eventMask |= 1, 1 & this._registeredNodeEventTypeMask || (this._registerOnTransformChanged(), this._registeredNodeEventTypeMask |= 1);
                        break;
                    case z174.PARENT_CHANGED:
                        2 & this._registeredNodeEventTypeMask || (this._registerOnParentChanged(), this._registeredNodeEventTypeMask |= 2);
                        break;
                    case z174.MOBILITY_CHANGED:
                        4 & this._registeredNodeEventTypeMask || (this._registerOnMobilityChanged(), this._registeredNodeEventTypeMask |= 4);
                        break;
                    case z174.LAYER_CHANGED:
                        8 & this._registeredNodeEventTypeMask || (this._registerOnLayerChanged(), this._registeredNodeEventTypeMask |= 8);
                        break;
                    case z174.CHILDREN_ORDER_CHANGED:
                        16 & this._registeredNodeEventTypeMask || (this._registerOnSiblingOrderChanged(), this._registeredNodeEventTypeMask |= 16);
                        break;
                    case z174.LIGHT_PROBE_BAKING_CHANGED:
                        32 & this._registeredNodeEventTypeMask || (this._registerOnLightProbeBakingChanged(), this._registeredNodeEventTypeMask |= 32);
                }
                this._eventProcessor.on(y1116, z1116, a1117, b1117);
            }, k175.off = function (u1116, v1116, w1116, x1116 = !1) {
                if (this._eventProcessor.off(u1116, v1116, w1116, x1116), !this._eventProcessor.hasEventListener(u1116))
                    switch (u1116) {
                        case z174.TRANSFORM_CHANGED:
                            this._eventMask &= -2;
                    }
            }, k175.once = function (q1116, r1116, s1116, t1116) {
                this._eventProcessor.once(q1116, r1116, s1116, t1116);
            }, k175.emit = function (k1116, l1116, m1116, n1116, o1116, p1116) {
                this._eventProcessor.emit(k1116, l1116, m1116, n1116, o1116, p1116);
            }, k175.dispatchEvent = function (j1116) {
                this._eventProcessor.dispatchEvent(j1116);
            }, k175.hasEventListener = function (g1116, h1116, i1116) {
                return this._eventProcessor.hasEventListener(g1116, h1116, i1116);
            }, k175.targetOff = function (f1116) {
                this._eventProcessor.targetOff(f1116), 1 & this._eventMask && !this._eventProcessor.hasEventListener(z174.TRANSFORM_CHANGED) && (this._eventMask &= -2);
            }, k175.pauseSystemEvents = function (e1116) {
                this._eventProcessor.setEnabled(!1, e1116);
            }, k175.resumeSystemEvents = function (d1116) {
                this._eventProcessor.setEnabled(!0, d1116);
            }, k175.getWritableComponents = function () {
                return this._components;
            }, k175._setActiveInHierarchy = function (c1116) {
                return this._activeInHierarchy = c1116;
            }, k175._removeComponent = function (a1116) {
                if (a1116) {
                    if (!(this._objFlags & l175)) {
                        const b1116 = this._components.indexOf(a1116);
                        -1 !== b1116 ? (this._components.splice(b1116, 1), this.emit(z174.COMPONENT_REMOVED, a1116)) : a1116.node !== this && z125(3815);
                    }
                }
                else
                    z125(3814);
            }, k175._registerIfAttached = void 0, k175._onTransformChanged = function (z1115) {
                this.emit(z174.TRANSFORM_CHANGED, z1115);
            }, k175._onParentChanged = function (y1115) {
                this.emit(z174.PARENT_CHANGED, y1115);
            }, k175._onReAttach = function () {
                this._eventProcessor.reattach();
            }, k175._onEditorAttached = function () { }, k175._onRemovePersistRootNode = function () {
                s143.game.removePersistRootNode(this);
            }, k175._onDestroyComponents = function () {
                this._eventProcessor.destroy();
                const w1115 = this._components;
                for (let x1115 = 0; x1115 < w1115.length; ++x1115)
                    w1115[x1115]._destroyImmediate();
            }, k175._onMobilityChanged = function () {
                this.emit(z174.MOBILITY_CHANGED);
            }, k175._onLayerChanged = function (v1115) {
                this.emit(z174.LAYER_CHANGED, v1115);
            }, k175._onChildRemoved = function (t1115) {
                const u1115 = this._children.indexOf(t1115);
                u1115 < 0 ? z125(1633) : (this._children.splice(u1115, 1), this.emit(z174.CHILD_REMOVED, t1115));
            }, k175._onChildAdded = function (s1115) {
                this._children.push(s1115), this.emit(z174.CHILD_ADDED, s1115);
            };
            const m175 = k175._onPreDestroy;
            k175._onPreDestroy = function () {
                const n1115 = m175.call(this);
                this.emit(z174.NODE_DESTROYED, this), this._eventProcessor.destroy();
                const o1115 = this._children;
                for (let r1115 = 0; r1115 < o1115.length; ++r1115)
                    o1115[r1115]._destroyImmediate();
                const p1115 = this._components;
                for (let q1115 = 0; q1115 < p1115.length; ++q1115)
                    p1115[q1115]._destroyImmediate();
                return n1115;
            }, k175.destroyAllChildren = function () {
                const k1115 = this._children;
                for (let l1115 = 0, m1115 = k1115.length; l1115 < m1115; ++l1115)
                    k1115[l1115].destroy();
            }, k175._onSiblingOrderChanged = function () {
                this.emit(z174.CHILDREN_ORDER_CHANGED);
            }, k175._onActivateNode = function (j1115) {
                s143.director._nodeActivator.activateNode(this, j1115);
            }, k175._onPostActivated = function (i1115) {
                i1115 ? (this._eventProcessor.setEnabled(!0), this.invalidateChildren(b175.TRS), this._uiProps && this._uiProps.uiComp && (this._uiProps.uiComp.setNodeDirty(), this._uiProps.uiComp.setTextureDirty(), this._uiProps.uiComp.markForUpdateRenderData())) : this._eventProcessor.setEnabled(!1);
            }, k175._onLightProbeBakingChanged = function () {
                this.emit(z174.LIGHT_PROBE_BAKING_CHANGED);
            }, i175._findComponent = function (a1115, b1115) {
                const c1115 = b1115, d1115 = a1115._components;
                if (c1115._sealed)
                    for (let g1115 = 0; g1115 < d1115.length; ++g1115) {
                        const h1115 = d1115[g1115];
                        if (h1115.constructor === b1115)
                            return h1115;
                    }
                else
                    for (let e1115 = 0; e1115 < d1115.length; ++e1115) {
                        const f1115 = d1115[e1115];
                        if (f1115 instanceof b1115)
                            return f1115;
                    }
                return null;
            }, i175._findComponents = function (r1114, s1114, t1114) {
                const u1114 = s1114, v1114 = r1114._components;
                if (u1114._sealed)
                    for (let y1114 = 0; y1114 < v1114.length; ++y1114) {
                        const z1114 = v1114[y1114];
                        z1114.constructor === s1114 && t1114.push(z1114);
                    }
                else
                    for (let w1114 = 0; w1114 < v1114.length; ++w1114) {
                        const x1114 = v1114[w1114];
                        x1114 instanceof s1114 && t1114.push(x1114);
                    }
            }, i175._findChildComponent = function (l1114, m1114) {
                for (let n1114 = 0; n1114 < l1114.length; ++n1114) {
                    const o1114 = l1114[n1114];
                    let p1114 = i175._findComponent(o1114, m1114);
                    if (p1114)
                        return p1114;
                    const q1114 = o1114.children;
                    if (q1114.length > 0 && (p1114 = i175._findChildComponent(q1114, m1114), p1114))
                        return p1114;
                }
                return null;
            }, i175._findChildComponents = function (f1114, g1114, h1114) {
                for (let i1114 = 0; i1114 < f1114.length; ++i1114) {
                    const j1114 = f1114[i1114];
                    i175._findComponents(j1114, g1114, h1114);
                    const k1114 = j1114.children;
                    k1114.length > 0 && i175._findChildComponents(k1114, g1114, h1114);
                }
            }, i175.isNode = function (e1114) {
                return e1114 instanceof jsb.Node && (e1114.constructor === jsb.Node || !(e1114 instanceof s143.Scene));
            };
            let n175 = new g147();
            k175.setRTS = function (a1114, b1114, c1114) {
                if (a1114) {
                    let d1114 = n175;
                    a1114 instanceof g147 ? d1114 = a1114 : g147.fromEuler(d1114, a1114.x, a1114.y, a1114.z), e175[0] = 4, e175[1] = d1114.x, e175[2] = d1114.y, e175[3] = d1114.z, e175[4] = d1114.w, this._lrot.set(d1114.x, d1114.y, d1114.z, d1114.w);
                }
                else
                    e175[0] = 0;
                b1114 ? (e175[5] = 3, e175[6] = b1114.x, e175[7] = b1114.y, e175[8] = b1114.z, this._lpos.set(b1114.x, b1114.y, b1114.z)) : e175[5] = 0, c1114 ? (e175[9] = 3, e175[10] = c1114.x, e175[11] = c1114.y, e175[12] = c1114.z, this._lscale.set(c1114.x, c1114.y, c1114.z)) : e175[9] = 0, this._setRTS();
            }, k175.getPosition = function (z1113) {
                return z1113 ? w146.set(z1113, this._lpos.x, this._lpos.y, this._lpos.z) : w146.copy(new w146(), this._lpos);
            }, k175.setPosition = function (v1113, w1113, x1113) {
                if (void 0 === w1113 && void 0 === x1113) {
                    e175[0] = 3;
                    const y1113 = v1113;
                    this._lpos.x = e175[1] = y1113.x, this._lpos.y = e175[2] = y1113.y, this._lpos.z = e175[3] = y1113.z;
                }
                else
                    void 0 === x1113 ? (e175[0] = 2, this._lpos.x = e175[1] = v1113, this._lpos.y = e175[2] = w1113) : (e175[0] = 3, this._lpos.x = e175[1] = v1113, this._lpos.y = e175[2] = w1113, this._lpos.z = e175[3] = x1113);
                this._setPosition();
            }, k175.getRotation = function (t1113) {
                const u1113 = this._lrot;
                return t1113 ? g147.set(t1113, u1113.x, u1113.y, u1113.z, u1113.w) : g147.copy(new g147(), u1113);
            }, k175.setRotation = function (o1113, p1113, q1113, r1113) {
                if (void 0 === p1113 || void 0 === q1113 || void 0 === r1113) {
                    const s1113 = o1113;
                    this._lrot.x = e175[0] = s1113.x, this._lrot.y = e175[1] = s1113.y, this._lrot.z = e175[2] = s1113.z, this._lrot.w = e175[3] = s1113.w;
                }
                else
                    this._lrot.x = e175[0] = o1113, this._lrot.y = e175[1] = p1113, this._lrot.z = e175[2] = q1113, this._lrot.w = e175[3] = r1113;
                this._setRotation();
            }, k175.setRotationFromEuler = function (j1113, k1113, l1113) {
                const m1113 = void 0 === l1113 ? this._euler.z : l1113;
                if (void 0 === k1113) {
                    const n1113 = j1113;
                    this._euler.x = e175[0] = n1113.x, this._euler.y = e175[1] = n1113.y, this._euler.z = e175[2] = n1113.z;
                }
                else
                    this._euler.x = e175[0] = j1113, this._euler.y = e175[1] = k1113, this._euler.z = e175[2] = m1113;
                this._setRotationFromEuler();
            }, k175.getScale = function (i1113) {
                return i1113 ? w146.set(i1113, this._lscale.x, this._lscale.y, this._lscale.z) : w146.copy(new w146(), this._lscale);
            }, k175.setScale = function (e1113, f1113, g1113) {
                if (void 0 === f1113 && void 0 === g1113) {
                    e175[0] = 3;
                    const h1113 = e1113;
                    this._lscale.x = e175[1] = h1113.x, this._lscale.y = e175[2] = h1113.y, this._lscale.z = e175[3] = h1113.z;
                }
                else
                    void 0 === g1113 ? (e175[0] = 2, this._lscale.x = e175[1] = e1113, this._lscale.y = e175[2] = f1113) : (e175[0] = 3, this._lscale.x = e175[1] = e1113, this._lscale.y = e175[2] = f1113, this._lscale.z = e175[3] = g1113);
                this._setScale();
            }, k175.getWorldPosition = function (d1113) {
                return this._getWorldPosition(), (d1113 = d1113 || new w146()).set(e175[0], e175[1], e175[2]);
            }, k175.getWorldRotation = function (c1113) {
                return this._getWorldRotation(), (c1113 = c1113 || new g147()).set(e175[0], e175[1], e175[2], e175[3]);
            }, k175.getWorldScale = function (b1113) {
                return this._getWorldScale(), (b1113 = b1113 || new w146()).set(e175[0], e175[1], e175[2]);
            }, k175.getWorldMatrix = function (a1113) {
                return this._getWorldMatrix(), a1113 = a1113 || new o147(), f175(a1113), a1113;
            }, k175.getEulerAngles = function (z1112) {
                return this._getEulerAngles(), (z1112 = z1112 || new w146()).set(e175[0], e175[1], e175[2]);
            }, k175.getForward = function (y1112) {
                return this._getForward(), (y1112 = y1112 || new w146()).set(e175[0], e175[1], e175[2]);
            }, k175.getUp = function (x1112) {
                return this._getUp(), (x1112 = x1112 || new w146()).set(e175[0], e175[1], e175[2]);
            }, k175.getRight = function (w1112) {
                return this._getRight(), (w1112 = w1112 || new w146()).set(e175[0], e175[1], e175[2]);
            }, k175.inverseTransformPoint = function (u1112, v1112) {
                return e175[0] = v1112.x, e175[1] = v1112.y, e175[2] = v1112.z, this._inverseTransformPoint(), u1112.x = e175[0], u1112.y = e175[1], u1112.z = e175[2], u1112;
            }, k175.getWorldRT = function (t1112) {
                return t1112 = t1112 || new o147(), this._getWorldRT(), f175(t1112), t1112;
            }, k175.getWorldRS = function (s1112) {
                return s1112 = s1112 || new o147(), this._getWorldRS(), f175(s1112), s1112;
            }, k175.isTransformDirty = function () {
                return this._transformFlags !== b175.NONE;
            }, Object.defineProperty(k175, "name", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._name;
                },
                set(r1112) {
                    this._name = r1112;
                }
            }), Object.defineProperty(k175, "position", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._lpos;
                },
                set(q1112) {
                    this.setPosition(q1112);
                }
            }), Object.defineProperty(k175, "rotation", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._lrot;
                },
                set(p1112) {
                    this.setRotation(p1112);
                }
            }), Object.defineProperty(k175, "scale", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._lscale;
                },
                set(o1112) {
                    this.setScale(o1112);
                }
            }), Object.defineProperty(k175, "worldPosition", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldPosition();
                },
                set(n1112) {
                    this.setWorldPosition(n1112);
                }
            }), Object.defineProperty(k175, "worldRotation", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldRotation();
                },
                set(m1112) {
                    this.setWorldRotation(m1112);
                }
            }), Object.defineProperty(k175, "worldScale", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldScale();
                },
                set(l1112) {
                    this.setWorldScale(l1112);
                }
            }), Object.defineProperty(k175, "_pos", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldPosition();
                }
            }), Object.defineProperty(k175, "_rot", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldRotation();
                }
            }), Object.defineProperty(k175, "_scale", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldScale();
                }
            }), Object.defineProperty(k175, "eulerAngles", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getEulerAngles();
                },
                set(k1112) {
                    this.setRotationFromEuler(k1112.x, k1112.y, k1112.z);
                }
            }), Object.defineProperty(k175, "worldMatrix", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldMatrix();
                }
            }), Object.defineProperty(k175, "_mat", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getWorldMatrix();
                }
            }), Object.defineProperty(k175, "activeInHierarchy", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return 0 != this._sharedUint8Arr[0];
                },
                set(j1112) {
                    this._sharedUint8Arr[0] = j1112 ? 1 : 0;
                }
            }), Object.defineProperty(k175, "_activeInHierarchy", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return 0 != this._sharedUint8Arr[0];
                },
                set(i1112) {
                    this._sharedUint8Arr[0] = i1112 ? 1 : 0;
                }
            }), Object.defineProperty(k175, "layer", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._sharedUint32Arr[1];
                },
                set(h1112) {
                    this._sharedUint32Arr[1] = h1112, this._uiProps && this._uiProps.uiComp && (this._uiProps.uiComp.setNodeDirty(), this._uiProps.uiComp.markForUpdateRenderData()), this.emit(z174.LAYER_CHANGED, h1112);
                }
            }), Object.defineProperty(k175, "_layer", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._sharedUint32Arr[1];
                },
                set(g1112) {
                    this._sharedUint32Arr[1] = g1112;
                }
            }), Object.defineProperty(k175, "_eventMask", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._sharedUint32Arr[0];
                },
                set(f1112) {
                    this._sharedUint32Arr[0] = f1112;
                }
            }), Object.defineProperty(k175, "_siblingIndex", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._sharedInt32Arr[0];
                },
                set(e1112) {
                    this._sharedInt32Arr[0] = e1112;
                }
            }), Object.defineProperty(k175, "prefab", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._prefab;
                }
            }), Object.defineProperty(k175, "siblingIndex", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._sharedInt32Arr[0];
                },
                set(d1112) {
                    this._sharedInt32Arr[0] = d1112;
                }
            }), k175.getSiblingIndex = function () {
                return this._sharedInt32Arr[0];
            }, Object.defineProperty(k175, "_transformFlags", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._sharedUint32Arr[2];
                },
                set(c1112) {
                    this._sharedUint32Arr[2] = c1112;
                }
            }), Object.defineProperty(k175, "_active", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return 0 != this._sharedUint8Arr[1];
                },
                set(b1112) {
                    this._sharedUint8Arr[1] = b1112 ? 1 : 0;
                }
            }), Object.defineProperty(k175, "active", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return 0 != this._sharedUint8Arr[1];
                },
                set(a1112) {
                    this.setActive(!!a1112);
                }
            }), Object.defineProperty(k175, "_static", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return 0 != this._sharedUint8Arr[2];
                },
                set(z1111) {
                    this._sharedUint8Arr[2] = z1111 ? 1 : 0;
                }
            }), Object.defineProperty(k175, "forward", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getForward();
                },
                set(y1111) {
                    this.setForward(y1111);
                }
            }), Object.defineProperty(k175, "up", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getUp();
                }
            }), Object.defineProperty(k175, "right", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getRight();
                }
            }), Object.defineProperty(k175, "eventProcessor", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._eventProcessor;
                }
            }), Object.defineProperty(k175, "components", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._components;
                }
            }), Object.defineProperty(k175, "_parent", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._parentRef = this._parentInternal, this._parentRef;
                },
                set(x1111) {
                    this._parentRef = this._parentInternal = x1111;
                }
            }), Object.defineProperty(k175, "parent", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._parentRef = this.getParent(), this._parentRef;
                },
                set(w1111) {
                    this._parentRef = w1111, this.setParent(w1111);
                }
            }), Object.defineProperty(k175, "children", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._children;
                },
                set(v1111) {
                    this._children = v1111;
                }
            }), Object.defineProperty(k175, "scene", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._scene;
                }
            }), k175.rotate = function (s1111, t1111) {
                e175[1] = s1111.x, e175[2] = s1111.y, e175[3] = s1111.z, e175[4] = s1111.w, t1111 ? (e175[5] = t1111, e175[0] = 5) : e175[0] = 4, this._rotateForJS();
                const u1111 = this._lrot;
                u1111.x = e175[0], u1111.y = e175[1], u1111.z = e175[2], u1111.w = e175[3];
            }, k175.addChild = function (r1111) {
                r1111.setParent(this);
            }, k175.insertChild = function (p1111, q1111) {
                p1111.parent = this, p1111.setSiblingIndex(q1111);
            }, k175[x152] = function (w1110, x1110) {
                w1110.writeThis();
                const y1110 = () => {
                    var o1111;
                    return !(null === (o1111 = this[i152]) || void 0 === o1111 || !o1111.mountedRoot);
                }, z1110 = () => {
                    var k1111, l1111, m1111, n1111;
                    return (null === (k1111 = this._prefab) || void 0 === k1111 || null === (l1111 = k1111.root) || void 0 === l1111 || null === (m1111 = l1111._prefab) || void 0 === m1111 ? void 0 : m1111.instance) && ((null == this || null === (n1111 = this._prefab) || void 0 === n1111 ? void 0 : n1111.instance) || !y1110());
                };
                var a1111;
                if ((() => !(x1110.customArguments[g175] || !z1110() || x1110.root === this))()) {
                    if ((null === (a1111 = this._prefab) || void 0 === a1111 ? void 0 : a1111.root) === this) {
                        let f1111 = !1, g1111 = this.getParent();
                        for (; g1111;) {
                            var b1111;
                            const h1111 = null === (b1111 = g1111._prefab) || void 0 === b1111 ? void 0 : b1111.nestedPrefabInstanceRoots;
                            if (h1111 && h1111.length > 0) {
                                f1111 = !h1111.some(j1111 => j1111 === this);
                                break;
                            }
                            g1111 = g1111.getParent();
                        }
                        f1111 || (w1110.writeProperty("_objFlags", this._objFlags), w1110.writeProperty("_parent", this._parent), w1110.writeProperty("_prefab", this._prefab), x1110.customArguments.keepNodeUuid && w1110.writeProperty("_id", this._id)), w1110.writeProperty(i152, this[i152]);
                    }
                }
                else
                    w1110.writeThis();
            }, k175._onActiveNode = function (v1110) {
                s143.director._nodeActivator.activateNode(this, v1110);
            }, k175._onBatchCreated = function (q1110) {
                this.hasChangedFlags = j175;
                const r1110 = this._children, s1110 = r1110.length;
                let t1110;
                for (let u1110 = 0; u1110 < s1110; ++u1110)
                    t1110 = r1110[u1110], t1110._siblingIndex = u1110, t1110._onBatchCreated(q1110);
                v133(this);
            }, k175._onSceneUpdated = function (p1110) {
                this._scene = p1110;
            }, k175._onLocalPositionUpdated = function (l1110, m1110, n1110) {
                const o1110 = this._lpos;
                o1110.x = l1110, o1110.y = m1110, o1110.z = n1110;
            }, k175._onLocalRotationUpdated = function (g1110, h1110, i1110, j1110) {
                const k1110 = this._lrot;
                k1110.x = g1110, k1110.y = h1110, k1110.z = i1110, k1110.w = j1110;
            }, k175._onLocalScaleUpdated = function (c1110, d1110, e1110) {
                const f1110 = this._lscale;
                f1110.x = c1110, f1110.y = d1110, f1110.z = e1110;
            }, k175._onLocalPositionRotationScaleUpdated = function (p1109, q1109, r1109, s1109, t1109, u1109, v1109, w1109, x1109, y1109) {
                const z1109 = this._lpos;
                z1109.x = p1109, z1109.y = q1109, z1109.z = r1109;
                const a1110 = this._lrot;
                a1110.x = s1109, a1110.y = t1109, a1110.z = u1109, a1110.w = v1109;
                const b1110 = this._lscale;
                b1110.x = w1109, b1110.y = x1109, b1110.z = y1109;
            }, k175._instantiate = function (n1109, o1109) {
                return n1109 || (n1109 = s143.instantiate._clone(this, this)), n1109._prefab, n1109._parent = null, n1109._onBatchCreated(o1109), n1109;
            }, k175._onSiblingIndexChanged = function (k1109) {
                const l1109 = this._parent._children;
                k1109 = -1 !== k1109 ? k1109 : l1109.length - 1;
                const m1109 = l1109.indexOf(this);
                k1109 !== m1109 && (l1109.splice(m1109, 1), k1109 < l1109.length ? l1109.splice(k1109, 0, this) : l1109.push(this));
            }, k175._ctor = function () {
                this.__nativeRefs = {}, this._parentRef = null, this.__jsb_ref_id = void 0, this._iN$t = null, this.__editorExtras__ = {
                    editorOnly: !0
                }, this._components = [], this._eventProcessor = new s143.NodeEventProcessor(this), this._uiProps = new c175(this);
                const j1109 = this._initAndReturnSharedBuffer();
                this._sharedUint32Arr = new Uint32Array(j1109, 0, 3), this._sharedInt32Arr = new Int32Array(j1109, 12, 1), this._sharedUint8Arr = new Uint8Array(j1109, 16, 3), this._sharedUint32Arr[1] = w168.Enum.DEFAULT, this._scene = null, this._prefab = null, this._originalSceneId = "", this._children = [], this._lpos = new w146(), this._lrot = new g147(), this._lscale = new w146(1, 1, 1), this._euler = new w146(), this._registeredNodeEventTypeMask = 0;
            }, function (r1107, s1107 = r163) {
                const { Node: t1107, Vec3: u1107, Quat: v1107, MobilityMode: w1107, Layers: x1107 } = {
                    ...r1107
                }, y1107 = Object.getOwnPropertyDescriptor(t1107.prototype, "_persistNode");
                Object.getOwnPropertyDescriptor(t1107.prototype, "name"), Object.getOwnPropertyDescriptor(t1107.prototype, "children"), Object.getOwnPropertyDescriptor(t1107.prototype, "active"), Object.getOwnPropertyDescriptor(t1107.prototype, "activeInHierarchy"), Object.getOwnPropertyDescriptor(t1107.prototype, "parent");
                const z1107 = Object.getOwnPropertyDescriptor(t1107.prototype, "eulerAngles");
                Object.getOwnPropertyDescriptor(t1107.prototype, "angle");
                const a1108 = Object.getOwnPropertyDescriptor(t1107.prototype, "mobility");
                Object.getOwnPropertyDescriptor(t1107.prototype, "layer"), s1107(() => {
                    u130(t1107.prototype, "_persistNode", y1107);
                }, "property", "_persistNode"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "name"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "children"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "active"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "activeInHierarchy"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "parent"), s1107(() => {
                    j151(t1107.prototype, "_parent", () => null);
                }, "serializable", "_parent"), s1107(() => {
                    j151(t1107.prototype, "_children", () => []);
                }, "serializable", "_children"), s1107(() => {
                    j151(t1107.prototype, "_active", () => !0);
                }, "serializable", "_active"), s1107(() => {
                    j151(t1107.prototype, "_components", () => []);
                }, "serializable", "_components"), s1107(() => {
                    j151(t1107.prototype, "_prefab", () => null);
                }, "serializable", "_prefab"), s1107(() => {
                    j151(t1107.prototype, "_lpos", () => new u1107());
                }, "serializable", "_lpos"), s1107(() => {
                    j151(t1107.prototype, "_lrot", () => new v1107());
                }, "serializable", "_lrot"), s1107(() => {
                    j151(t1107.prototype, "_lscale", () => new u1107(1, 1, 1));
                }, "serializable", "_lscale"), s1107(() => {
                    j151(t1107.prototype, "_mobility", () => w1107.Static);
                }, "serializable", "_mobility"), s1107(() => {
                    j151(t1107.prototype, "_layer", () => x1107.Enum.DEFAULT);
                }, "serializable", "_layer"), s1107(() => {
                    j151(t1107.prototype, "_euler", () => new u1107());
                }, "serializable", "_euler"), s1107(() => {
                    a131(u1107)(t1107.prototype, "eulerAngles", z1107);
                }, "type", "eulerAngles"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "angle"), s1107(() => {
                    a131(w1107)(t1107.prototype, "mobility", a1108);
                }, "type", "mobility"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "mobility"), s1107(() => {
                    s151(t1107.prototype);
                }, "editable", "layer"), s1107(() => {
                    e151("cc.Node")(t1107);
                }, "ccclass", null);
            }({
                Node: h175,
                Vec3: w146,
                Quat: g147,
                MobilityMode: d175,
                Layers: w168
            }), s128.Attr.setClassAttr(p164, "target", "type", "Object"), s128.Attr.setClassAttr(p164, "target", "ctor", h175);
            const o175 = new Array(16);
            let p175 = null;
            const q175 = new s147(), r175 = [z174.TOUCH_START, z174.TOUCH_MOVE, z174.TOUCH_END, z174.TOUCH_CANCEL], s175 = [z174.MOUSE_DOWN, z174.MOUSE_ENTER, z174.MOUSE_MOVE, z174.MOUSE_LEAVE, z174.MOUSE_UP, z174.MOUSE_WHEEL];
            let t175;
            !function (q1107) {
                q1107[q1107.ADD_POINTER_EVENT_PROCESSOR = 0] = "ADD_POINTER_EVENT_PROCESSOR", q1107[q1107.REMOVE_POINTER_EVENT_PROCESSOR = 1] = "REMOVE_POINTER_EVENT_PROCESSOR", q1107[q1107.MARK_LIST_DIRTY = 2] = "MARK_LIST_DIRTY";
            }(t175 || (t175 = {}));
            class u175 {
                get isEnabled() {
                    return this._isEnabled;
                }
                get node() {
                    return this._node;
                }
                constructor(p1107) {
                    this.claimedTouchIdList = [], this.maskList = null, this.cachedCameraPriority = 0, this.previousMouseIn = !1, this.bubblingTarget = null, this.capturingTarget = null, this.shouldHandleEventMouse = !1, this.shouldHandleEventTouch = !1, this._dispatchingTouch = null, this._isEnabled = !1, this._node = void 0, this._node = p1107;
                }
                setEnabled(l1107, m1107 = !1) {
                    if (this._isEnabled === l1107)
                        return;
                    this._isEnabled = l1107;
                    const n1107 = this.node.children;
                    if (l1107 && this._attachMask(), u175.callbacksInvoker.emit(t175.MARK_LIST_DIRTY), m1107 && n1107.length > 0)
                        for (let o1107 = 0; o1107 < n1107.length; ++o1107)
                            n1107[o1107].eventProcessor.setEnabled(l1107, !0);
                }
                reattach() {
                    let i1107;
                    this.node.walk(k1107 => {
                        i1107 || (i1107 = this._searchComponentsInParent(u175._maskComp)), k1107.eventProcessor.maskList = i1107;
                    });
                }
                destroy() {
                    if (p175 === this._node && (p175 = null), this.capturingTarget && this.capturingTarget.clear(), this.bubblingTarget && this.bubblingTarget.clear(), u175.callbacksInvoker.emit(t175.REMOVE_POINTER_EVENT_PROCESSOR, this), this._dispatchingTouch) {
                        const h1107 = new w166([this._dispatchingTouch], !0, r166.TOUCH_CANCEL);
                        h1107.touch = this._dispatchingTouch, this.dispatchEvent(h1107), this._dispatchingTouch = null;
                    }
                }
                on(a1107, b1107, c1107, d1107) {
                    let e1107;
                    var f1107, g1107;
                    return this._tryEmittingAddEvent(a1107), e1107 = (d1107 = !!d1107) ? null !== (f1107 = this.capturingTarget) && void 0 !== f1107 ? f1107 : this.capturingTarget = this._newCallbacksInvoker() : null !== (g1107 = this.bubblingTarget) && void 0 !== g1107 ? g1107 : this.bubblingTarget = this._newCallbacksInvoker(), e1107.on(a1107, b1107, c1107), b1107;
                }
                once(t1106, u1106, v1106, w1106) {
                    let x1106;
                    var y1106, z1106;
                    return this._tryEmittingAddEvent(t1106), x1106 = (w1106 = !!w1106) ? null !== (y1106 = this.capturingTarget) && void 0 !== y1106 ? y1106 : this.capturingTarget = this._newCallbacksInvoker() : null !== (z1106 = this.bubblingTarget) && void 0 !== z1106 ? z1106 : this.bubblingTarget = this._newCallbacksInvoker(), x1106.on(t1106, u1106, v1106, !0), u1106;
                }
                off(n1106, o1106, p1106, q1106) {
                    var r1106;
                    let s1106;
                    s1106 = (q1106 = !!q1106) ? this.capturingTarget : this.bubblingTarget, null === (r1106 = s1106) || void 0 === r1106 || r1106.off(n1106, o1106, p1106);
                }
                targetOff(k1106) {
                    var l1106, m1106;
                    null === (l1106 = this.capturingTarget) || void 0 === l1106 || l1106.removeAll(k1106), null === (m1106 = this.bubblingTarget) || void 0 === m1106 || m1106.removeAll(k1106), this.shouldHandleEventTouch && !this._hasTouchListeners() && (this.shouldHandleEventTouch = !1), this.shouldHandleEventMouse && !this._hasMouseListeners() && (this.shouldHandleEventMouse = !1), this._hasPointerListeners() || u175.callbacksInvoker.emit(t175.REMOVE_POINTER_EVENT_PROCESSOR, this);
                }
                emit(d1106, e1106, f1106, g1106, h1106, i1106) {
                    var j1106;
                    null === (j1106 = this.bubblingTarget) || void 0 === j1106 || j1106.emit(d1106, e1106, f1106, g1106, h1106, i1106);
                }
                dispatchEvent(z1105) {
                    const a1106 = this.node;
                    let b1106, c1106 = 0;
                    for (z1105.target = a1106, o175.length = 0, this.getCapturingTargets(z1105.type, o175), z1105.eventPhase = 1, c1106 = o175.length - 1; c1106 >= 0; --c1106)
                        if (b1106 = o175[c1106], b1106.eventProcessor.capturingTarget && (z1105.currentTarget = b1106, b1106.eventProcessor.capturingTarget.emit(z1105.type, z1105, o175), z1105.propagationStopped))
                            return void (o175.length = 0);
                    if (o175.length = 0, z1105.eventPhase = 2, z1105.currentTarget = a1106, this.capturingTarget && this.capturingTarget.emit(z1105.type, z1105), !z1105.propagationImmediateStopped && this.bubblingTarget && this.bubblingTarget.emit(z1105.type, z1105), !z1105.propagationStopped && z1105.bubbles)
                        for (this.getBubblingTargets(z1105.type, o175), z1105.eventPhase = 3, c1106 = 0; c1106 < o175.length; ++c1106)
                            if (b1106 = o175[c1106], b1106.eventProcessor.bubblingTarget && (z1105.currentTarget = b1106, b1106.eventProcessor.bubblingTarget.emit(z1105.type, z1105), z1105.propagationStopped))
                                return void (o175.length = 0);
                    o175.length = 0;
                }
                hasEventListener(v1105, w1105, x1105) {
                    let y1105 = !1;
                    return this.bubblingTarget && (y1105 = this.bubblingTarget.hasEventListener(v1105, w1105, x1105)), !y1105 && this.capturingTarget && (y1105 = this.capturingTarget.hasEventListener(v1105, w1105, x1105)), y1105;
                }
                getCapturingTargets(r1105, s1105) {
                    let t1105 = this._node.parent;
                    for (; t1105;) {
                        var u1105;
                        null !== (u1105 = t1105.eventProcessor.capturingTarget) && void 0 !== u1105 && u1105.hasEventListener(r1105) && s1105.push(t1105), t1105 = t1105.parent;
                    }
                }
                getBubblingTargets(n1105, o1105) {
                    let p1105 = this._node.parent;
                    for (; p1105;) {
                        var q1105;
                        null !== (q1105 = p1105.eventProcessor.bubblingTarget) && void 0 !== q1105 && q1105.hasEventListener(n1105) && o1105.push(p1105), p1105 = p1105.parent;
                    }
                }
                onUpdatingSiblingIndex() {
                    u175.callbacksInvoker.emit(t175.MARK_LIST_DIRTY);
                }
                _searchComponentsInParent(g1105) {
                    const h1105 = this.node;
                    if (g1105) {
                        let i1105 = 0, j1105 = [];
                        for (let k1105 = h1105; k1105 && h175.isNode(k1105); k1105 = k1105.parent, ++i1105) {
                            const l1105 = k1105.getComponent(g1105);
                            if (l1105) {
                                const m1105 = {
                                    index: i1105,
                                    comp: l1105
                                };
                                j1105 ? j1105.push(m1105) : j1105 = [m1105];
                            }
                        }
                        return j1105.length > 0 ? j1105 : null;
                    }
                    return null;
                }
                _attachMask() {
                    this.maskList = this._searchComponentsInParent(u175._maskComp);
                }
                _isTouchEvent(f1105) {
                    return -1 !== r175.indexOf(f1105);
                }
                _isMouseEvent(e1105) {
                    return -1 !== s175.indexOf(e1105);
                }
                _hasTouchListeners() {
                    for (let c1105 = 0; c1105 < r175.length; ++c1105) {
                        const d1105 = r175[c1105];
                        if (this.hasEventListener(d1105))
                            return !0;
                    }
                    return !1;
                }
                _hasMouseListeners() {
                    for (let a1105 = 0; a1105 < s175.length; ++a1105) {
                        const b1105 = s175[a1105];
                        if (this.hasEventListener(b1105))
                            return !0;
                    }
                    return !1;
                }
                _hasPointerListeners() {
                    return !!this._hasTouchListeners() || this._hasMouseListeners();
                }
                _tryEmittingAddEvent(x1104) {
                    const y1104 = this._isTouchEvent(x1104), z1104 = this._isMouseEvent(x1104);
                    y1104 ? this.shouldHandleEventTouch = !0 : z1104 && (this.shouldHandleEventMouse = !0), !y1104 && !z1104 || this._hasPointerListeners() || u175.callbacksInvoker.emit(t175.ADD_POINTER_EVENT_PROCESSOR, this);
                }
                _newCallbacksInvoker() {
                    const v1104 = new n156();
                    return v1104._registerOffCallback(() => {
                        this.shouldHandleEventTouch && !this._hasTouchListeners() && (this.shouldHandleEventTouch = !1), this.shouldHandleEventMouse && !this._hasMouseListeners() && (this.shouldHandleEventMouse = !1), this._hasPointerListeners() || u175.callbacksInvoker.emit(t175.REMOVE_POINTER_EVENT_PROCESSOR, this);
                    }), v1104;
                }
                _handleEventMouse(u1104) {
                    switch (u1104.type) {
                        case r166.MOUSE_DOWN:
                            return this._handleMouseDown(u1104);
                        case r166.MOUSE_MOVE:
                            return this._handleMouseMove(u1104);
                        case r166.MOUSE_UP:
                            return this._handleMouseUp(u1104);
                        case r166.MOUSE_WHEEL:
                            return this._handleMouseWheel(u1104);
                        default:
                            return !1;
                    }
                }
                _handleMouseDown(s1104) {
                    const t1104 = this._node;
                    return !(!t1104 || !t1104._uiProps.uiTransformComp || (s1104.getLocation(q175), !t1104._uiProps.uiTransformComp.hitTest(q175, s1104.windowId) || (s1104.type = z174.MOUSE_DOWN, s1104.bubbles = !0, t1104.dispatchEvent(s1104), s1104.propagationStopped = !0, 0)));
                }
                _handleMouseMove(q1104) {
                    const r1104 = this._node;
                    return !(!r1104 || !r1104._uiProps.uiTransformComp) && (q1104.getLocation(q175), r1104._uiProps.uiTransformComp.hitTest(q175, q1104.windowId) ? (this.previousMouseIn || (p175 && p175 !== r1104 && (q1104.type = z174.MOUSE_LEAVE, p175.dispatchEvent(q1104), p175.eventProcessor.previousMouseIn = !1), p175 = r1104, q1104.type = z174.MOUSE_ENTER, r1104.dispatchEvent(q1104), this.previousMouseIn = !0), q1104.type = z174.MOUSE_MOVE, q1104.bubbles = !0, r1104.dispatchEvent(q1104), q1104.propagationStopped = !0, !0) : (this.previousMouseIn && (q1104.type = z174.MOUSE_LEAVE, r1104.dispatchEvent(q1104), this.previousMouseIn = !1, p175 = null), !1));
                }
                _handleMouseUp(o1104) {
                    const p1104 = this._node;
                    return !(!p1104 || !p1104._uiProps.uiTransformComp || (o1104.getLocation(q175), !p1104._uiProps.uiTransformComp.hitTest(q175, o1104.windowId) || (o1104.type = z174.MOUSE_UP, o1104.bubbles = !0, p1104.dispatchEvent(o1104), o1104.propagationStopped = !0, 0)));
                }
                _handleMouseWheel(m1104) {
                    const n1104 = this._node;
                    return !(!n1104 || !n1104._uiProps.uiTransformComp || (m1104.getLocation(q175), !n1104._uiProps.uiTransformComp.hitTest(q175, m1104.windowId) || (m1104.type = z174.MOUSE_WHEEL, m1104.bubbles = !0, n1104.dispatchEvent(m1104), m1104.propagationStopped = !0, 0)));
                }
                _handleEventTouch(l1104) {
                    switch (l1104.type) {
                        case r166.TOUCH_START:
                            return this._handleTouchStart(l1104);
                        case r166.TOUCH_MOVE:
                            return this._handleTouchMove(l1104);
                        case r166.TOUCH_END:
                            return this._handleTouchEnd(l1104);
                        case r166.TOUCH_CANCEL:
                            return this._handleTouchCancel(l1104);
                        default:
                            return !1;
                    }
                }
                _handleTouchStart(j1104) {
                    const k1104 = this.node;
                    return !(!k1104 || !k1104._uiProps.uiTransformComp || (j1104.getLocation(q175), !k1104._uiProps.uiTransformComp.hitTest(q175, j1104.windowId) || (j1104.type = z174.TOUCH_START, j1104.bubbles = !0, this._dispatchingTouch = j1104.touch, k1104.dispatchEvent(j1104), 0)));
                }
                _handleTouchMove(h1104) {
                    const i1104 = this.node;
                    return !(!i1104 || !i1104._uiProps.uiTransformComp || (h1104.type = z174.TOUCH_MOVE, h1104.bubbles = !0, this._dispatchingTouch = h1104.touch, i1104.dispatchEvent(h1104), 0));
                }
                _handleTouchEnd(f1104) {
                    const g1104 = this.node;
                    g1104 && g1104._uiProps.uiTransformComp && (f1104.getLocation(q175), g1104._uiProps.uiTransformComp.hitTest(q175, f1104.windowId) ? f1104.type = z174.TOUCH_END : f1104.type = z174.TOUCH_CANCEL, f1104.bubbles = !0, g1104.dispatchEvent(f1104), this._dispatchingTouch = null);
                }
                _handleTouchCancel(d1104) {
                    const e1104 = this.node;
                    e1104 && e1104._uiProps.uiTransformComp && (d1104.type = z174.TOUCH_CANCEL, d1104.bubbles = !0, e1104.dispatchEvent(d1104), this._dispatchingTouch = null);
                }
            }
            u175._maskComp = null, u175.callbacksInvoker = new n156(), s143.NodeEventProcessor = u175;
            const v175 = jsb.TextureCube.prototype;
            var w175, x175;
            !function (c1104) {
                c1104[c1104.right = 0] = "right", c1104[c1104.left = 1] = "left", c1104[c1104.top = 2] = "top", c1104[c1104.bottom = 3] = "bottom", c1104[c1104.front = 4] = "front", c1104[c1104.back = 5] = "back";
            }(w175 || (w175 = {})), function (b1104) {
                b1104[b1104.NONE = 0] = "NONE", b1104[b1104.AUTO = 1] = "AUTO", b1104[b1104.BAKED_CONVOLUTION_MAP = 2] = "BAKED_CONVOLUTION_MAP";
            }(x175 || (x175 = {})), v175.createNode = null;
            const y175 = g125("TextureCube", jsb.TextureCube);
            y175.Filter = w163, y175.PixelFormat = u163, y175.WrapMode = v163, v175._ctor = function () {
                jsb.SimpleTexture.prototype._ctor.apply(this, arguments), this._mipmaps = null, this._mipmapAtlas = null;
            }, Object.defineProperty(v175, "mipmaps", {
                get() {
                    return this._mipmaps;
                },
                set(a1104) {
                    this._mipmaps = a1104, this.setMipmaps(a1104);
                }
            }), Object.defineProperty(v175, "image", {
                get() {
                    return 0 === this._mipmaps.length ? null : this._mipmaps[0];
                },
                set(z1103) {
                    this.mipmaps = z1103 ? [z1103] : [];
                }
            });
            const z175 = v175.onLoaded;
            let a176;
            v175.onLoaded = function () {
                this._mipmapMode === x175.BAKED_CONVOLUTION_MAP ? this.setMipmapAtlasForJS(this._mipmapAtlas) : this.setMipmapsForJS(this._mipmaps), z175.apply(this);
            }, v175._serialize = function () {
                return null;
            }, v175._deserialize = function (q1103, r1103) {
                const s1103 = q1103;
                if (jsb.TextureBase.prototype._deserialize.call(this, s1103.base, r1103), this.isRGBE = s1103.rgbe, null != s1103.mipmapMode && (this._mipmapMode = s1103.mipmapMode), this._mipmapMode === x175.BAKED_CONVOLUTION_MAP) {
                    const w1103 = s1103.mipmapAtlas, x1103 = s1103.mipmapLayout;
                    if (this._mipmapAtlas = {
                        atlas: {},
                        layout: x1103
                    }, this._mipmapAtlas.atlas = {
                        front: new jsb.ImageAsset(),
                        back: new jsb.ImageAsset(),
                        left: new jsb.ImageAsset(),
                        right: new jsb.ImageAsset(),
                        top: new jsb.ImageAsset(),
                        bottom: new jsb.ImageAsset()
                    }, w1103) {
                        const y1103 = g127(jsb.ImageAsset);
                        r1103.result.push(this._mipmapAtlas.atlas, "front", w1103.front, y1103), r1103.result.push(this._mipmapAtlas.atlas, "back", w1103.back, y1103), r1103.result.push(this._mipmapAtlas.atlas, "left", w1103.left, y1103), r1103.result.push(this._mipmapAtlas.atlas, "right", w1103.right, y1103), r1103.result.push(this._mipmapAtlas.atlas, "top", w1103.top, y1103), r1103.result.push(this._mipmapAtlas.atlas, "bottom", w1103.bottom, y1103);
                    }
                }
                else {
                    this._mipmaps = new Array(s1103.mipmaps.length);
                    for (let t1103 = 0; t1103 < s1103.mipmaps.length; ++t1103) {
                        this._mipmaps[t1103] = {
                            front: new jsb.ImageAsset(),
                            back: new jsb.ImageAsset(),
                            left: new jsb.ImageAsset(),
                            right: new jsb.ImageAsset(),
                            top: new jsb.ImageAsset(),
                            bottom: new jsb.ImageAsset()
                        };
                        const u1103 = s1103.mipmaps[t1103], v1103 = g127(jsb.ImageAsset);
                        r1103.result.push(this._mipmaps[t1103], "front", u1103.front, v1103), r1103.result.push(this._mipmaps[t1103], "back", u1103.back, v1103), r1103.result.push(this._mipmaps[t1103], "left", u1103.left, v1103), r1103.result.push(this._mipmaps[t1103], "right", u1103.right, v1103), r1103.result.push(this._mipmaps[t1103], "top", u1103.top, v1103), r1103.result.push(this._mipmaps[t1103], "bottom", u1103.bottom, v1103);
                    }
                }
            }, s143.TextureCube = jsb.TextureCube, function (d1103, e1103 = r163) {
                const { TextureCube: f1103, MipmapMode: g1103 } = {
                    ...d1103
                };
                e1103(() => {
                    j151(f1103.prototype, "isRGBE", () => !1);
                }, "serializable", "isRGBE"), e1103(() => {
                    j151(f1103.prototype, "_mipmapAtlas", () => null);
                }, "serializable", "_mipmapAtlas"), e1103(() => {
                    j151(f1103.prototype, "_mipmapMode", () => g1103.NONE);
                }, "serializable", "_mipmapMode"), e1103(() => {
                    j151(f1103.prototype, "_mipmaps", () => []);
                }, "serializable", "_mipmaps"), e1103(() => {
                    e151("cc.TextureCube")(f1103);
                }, "ccclass", null);
            }({
                TextureCube: y175,
                MipmapMode: x175
            }), function (c1103) {
                c1103[c1103.DEFAULT = 0] = "DEFAULT", c1103[c1103.SKINNING = 1] = "SKINNING", c1103[c1103.BAKED_SKINNING = 2] = "BAKED_SKINNING", c1103[c1103.BATCH_2D = 3] = "BATCH_2D", c1103[c1103.PARTICLE_BATCH = 4] = "PARTICLE_BATCH", c1103[c1103.LINE = 5] = "LINE";
            }(a176 || (a176 = {}));
            const b176 = jsb.Model, c176 = b176.prototype;
            c176._ctor = function () {
                this._device = b162.gfxDevice;
            };
            const d176 = c176.createBoundingShape;
            c176.createBoundingShape = function (a1103, b1103) {
                a1103 && b1103 && d176.call(this, a1103, b1103);
            };
            const e176 = jsb.SubModel;
            let f176, g176, h176, i176, j176, k176, l176, m176;
            !function (z1102) {
                z1102[z1102.VERTICAL = 0] = "VERTICAL", z1102[z1102.HORIZONTAL = 1] = "HORIZONTAL";
            }(f176 || (f176 = {})), function (y1102) {
                y1102[y1102.ORTHO = 0] = "ORTHO", y1102[y1102.PERSPECTIVE = 1] = "PERSPECTIVE";
            }(g176 || (g176 = {})), function (x1102) {
                x1102[x1102.F1_8 = 0] = "F1_8", x1102[x1102.F2_0 = 1] = "F2_0", x1102[x1102.F2_2 = 2] = "F2_2", x1102[x1102.F2_5 = 3] = "F2_5", x1102[x1102.F2_8 = 4] = "F2_8", x1102[x1102.F3_2 = 5] = "F3_2", x1102[x1102.F3_5 = 6] = "F3_5", x1102[x1102.F4_0 = 7] = "F4_0", x1102[x1102.F4_5 = 8] = "F4_5", x1102[x1102.F5_0 = 9] = "F5_0", x1102[x1102.F5_6 = 10] = "F5_6", x1102[x1102.F6_3 = 11] = "F6_3", x1102[x1102.F7_1 = 12] = "F7_1", x1102[x1102.F8_0 = 13] = "F8_0", x1102[x1102.F9_0 = 14] = "F9_0", x1102[x1102.F10_0 = 15] = "F10_0", x1102[x1102.F11_0 = 16] = "F11_0", x1102[x1102.F13_0 = 17] = "F13_0", x1102[x1102.F14_0 = 18] = "F14_0", x1102[x1102.F16_0 = 19] = "F16_0", x1102[x1102.F18_0 = 20] = "F18_0", x1102[x1102.F20_0 = 21] = "F20_0", x1102[x1102.F22_0 = 22] = "F22_0";
            }(h176 || (h176 = {})), function (w1102) {
                w1102[w1102.ISO100 = 0] = "ISO100", w1102[w1102.ISO200 = 1] = "ISO200", w1102[w1102.ISO400 = 2] = "ISO400", w1102[w1102.ISO800 = 3] = "ISO800";
            }(i176 || (i176 = {})), function (v1102) {
                v1102[v1102.D1 = 0] = "D1", v1102[v1102.D2 = 1] = "D2", v1102[v1102.D4 = 2] = "D4", v1102[v1102.D8 = 3] = "D8", v1102[v1102.D15 = 4] = "D15", v1102[v1102.D30 = 5] = "D30", v1102[v1102.D60 = 6] = "D60", v1102[v1102.D125 = 7] = "D125", v1102[v1102.D250 = 8] = "D250", v1102[v1102.D500 = 9] = "D500", v1102[v1102.D1000 = 10] = "D1000", v1102[v1102.D2000 = 11] = "D2000", v1102[v1102.D4000 = 12] = "D4000";
            }(j176 || (j176 = {})), function (u1102) {
                u1102[u1102.DEFAULT = -1] = "DEFAULT", u1102[u1102.LEFT_EYE = 0] = "LEFT_EYE", u1102[u1102.RIGHT_EYE = 1] = "RIGHT_EYE", u1102[u1102.MAIN = 2] = "MAIN";
            }(k176 || (k176 = {})), function (t1102) {
                t1102[t1102.NO_TRACKING = 0] = "NO_TRACKING", t1102[t1102.POSITION_AND_ROTATION = 1] = "POSITION_AND_ROTATION", t1102[t1102.POSITION = 2] = "POSITION", t1102[t1102.ROTATION = 3] = "ROTATION";
            }(l176 || (l176 = {})), function (s1102) {
                s1102[s1102.EDITOR = 0] = "EDITOR", s1102[s1102.GAME_VIEW = 1] = "GAME_VIEW", s1102[s1102.SCENE_VIEW = 2] = "SCENE_VIEW", s1102[s1102.PREVIEW = 3] = "PREVIEW", s1102[s1102.GAME = 100] = "GAME";
            }(m176 || (m176 = {}));
            const n176 = d159.STENCIL << 1, o176 = jsb.Camera, p176 = jsb.Camera.prototype;
            Object.defineProperty(o176, "standardExposureValue", {
                configurable: !0,
                enumerable: !0,
                get: () => o176.getStandardExposureValue()
            }), Object.defineProperty(o176, "standardLightMeterScale", {
                configurable: !0,
                enumerable: !0,
                get: () => o176.getStandardLightMeterScale()
            }), Object.defineProperty(p176, "matView", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getMatView(), f175(this._matView), this._matView;
                }
            }), Object.defineProperty(p176, "matProj", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getMatProj(), f175(this._matProj), this._matProj;
                }
            }), Object.defineProperty(p176, "matProjInv", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getMatProjInv(), f175(this._matProjInv), this._matProjInv;
                }
            }), Object.defineProperty(p176, "matViewProj", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getMatViewProj(), f175(this._matViewProj), this._matViewProj;
                }
            }), Object.defineProperty(p176, "matViewProjInv", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getMatViewProjInv(), f175(this._matViewProjInv), this._matViewProjInv;
                }
            });
            const q176 = p176.initialize;
            p176.initialize = function () {
                q176.apply(this, arguments), this._matView = new o147(), this._matProj = new o147(), this._matProjInv = new o147(), this._matViewProj = new o147(), this._matViewProjInv = new o147();
            };
            const r176 = p176.screenPointToRay, s176 = p176.screenToWorld, t176 = p176.worldToScreen, u176 = p176.worldMatrixToScreen;
            let v176, w176;
            p176.screenPointToRay = function (p1102, q1102, r1102) {
                return e175[0] = q1102, e175[1] = r1102, r176.call(this), p1102.o.x = e175[0], p1102.o.y = e175[1], p1102.o.z = e175[2], p1102.d.x = e175[3], p1102.d.y = e175[4], p1102.d.z = e175[5], p1102;
            }, p176.screenToWorld = function (n1102, o1102) {
                return e175[0] = o1102.x, e175[1] = o1102.y, e175[2] = o1102.z, s176.call(this), w146.set(n1102, e175[0], e175[1], e175[2]), n1102;
            }, p176.worldToScreen = function (l1102, m1102) {
                return e175[0] = m1102.x, e175[1] = m1102.y, e175[2] = m1102.z, t176.call(this), w146.set(l1102, e175[0], e175[1], e175[2]), l1102;
            }, p176.worldMatrixToScreen = function (h1102, i1102, j1102, k1102) {
                return e175[0] = i1102.m00, e175[1] = i1102.m01, e175[2] = i1102.m02, e175[3] = i1102.m03, e175[4] = i1102.m04, e175[5] = i1102.m05, e175[6] = i1102.m06, e175[7] = i1102.m07, e175[8] = i1102.m08, e175[9] = i1102.m09, e175[10] = i1102.m10, e175[11] = i1102.m11, e175[12] = i1102.m12, e175[13] = i1102.m13, e175[14] = i1102.m14, e175[15] = i1102.m15, e175[16] = j1102, e175[17] = k1102, u176.call(this), f175(h1102), h1102;
            }, function (g1102) {
                g1102[g1102.SKYBOX = n176 | d159.DEPTH_STENCIL] = "SKYBOX", g1102[g1102.SOLID_COLOR = d159.ALL] = "SOLID_COLOR";
            }(v176 || (v176 = {})), function (f1102) {
                f1102[f1102.CUBE = 0] = "CUBE", f1102[f1102.PLANAR = 1] = "PLANAR";
            }(w176 || (w176 = {}));
            const x176 = jsb.ReflectionProbe;
            jsb.ReflectionProbe.prototype._ctor = function (e1102) {
                this._probeId = e1102;
            };
            const y176 = jsb.LODData, z176 = jsb.LODGroup, a177 = jsb.Ambient;
            let b177;
            s143.Ambient = a177, a177.SUN_ILLUM = 65e3, a177.SKY_ILLUM = 2e4, function (d1102) {
                d1102[d1102.DIRECTIONAL = 0] = "DIRECTIONAL", d1102[d1102.SPHERE = 1] = "SPHERE", d1102[d1102.SPOT = 2] = "SPOT", d1102[d1102.POINT = 3] = "POINT", d1102[d1102.RANGED_DIRECTIONAL = 4] = "RANGED_DIRECTIONAL", d1102[d1102.UNKNOWN = 5] = "UNKNOWN";
            }(b177 || (b177 = {}));
            const c177 = jsb.Light;
            s143.Light = jsb.Light;
            const d177 = jsb.DirectionalLight;
            s143.DirectionalLight = jsb.DirectionalLight;
            const e177 = jsb.SpotLight;
            s143.SpotLight = jsb.SpotLight;
            const f177 = jsb.SphereLight;
            s143.SphereLight = jsb.SphereLight;
            const g177 = jsb.PointLight;
            s143.PointLight = jsb.PointLight;
            const h177 = jsb.RangedDirectionalLight;
            s143.RangedDirectionalLight = jsb.RangedDirectionalLight;
            const i177 = p127({
                LINEAR: 0,
                EXP: 1,
                EXP_SQUARED: 2,
                LAYERED: 3
            }), j177 = i177.LAYERED + 1, k177 = jsb.FogInfo, l177 = jsb.Fog;
            s143.Fog = l177;
            const m177 = p127({
                Low_256x256: 256,
                Medium_512x512: 512,
                High_1024x1024: 1024,
                Ultra_2048x2048: 2048
            }), n177 = p127({
                Planar: 0,
                ShadowMap: 1
            }), o177 = p127({
                HARD: 0,
                SOFT: 1,
                SOFT_2X: 2,
                SOFT_4X: 3
            }), p177 = p127({
                LEVEL_1: 1,
                LEVEL_2: 2,
                LEVEL_3: 3,
                LEVEL_4: 4
            }), q177 = p127({
                NONE: 1,
                RemoveDuplicates: 2,
                DisableRotationFix: 3
            }), r177 = p127({
                HEMISPHERE_DIFFUSE: 0,
                AUTOGEN_HEMISPHERE_DIFFUSE_WITH_REFLECTION: 1,
                DIFFUSEMAP_WITH_REFLECTION: 2
            }), s177 = p127({
                DEFAULT: 0,
                LINEAR: 1
            }), t177 = jsb.ShadowsInfo, u177 = jsb.Shadows;
            s143.Shadows = u177, Object.defineProperty(u177, "MAX_FAR", {
                configurable: !0,
                enumerable: !0,
                get: () => 2e3
            });
            const v177 = 2 * Math.sqrt(3);
            Object.defineProperty(u177, "COEFFICIENT_OF_EXPANSION", {
                configurable: !0,
                enumerable: !0,
                get: () => v177
            });
            const w177 = jsb.Skybox;
            s143.Skybox = w177;
            const x177 = jsb.PostSettings;
            s143.PostSettings = x177;
            var y177 = Object.freeze({
                __proto__: null,
                get ModelType() {
                    return a176;
                },
                Model: b176,
                SubModel: e176,
                get CameraFOVAxis() {
                    return f176;
                },
                get CameraProjection() {
                    return g176;
                },
                get CameraAperture() {
                    return h176;
                },
                get CameraISO() {
                    return i176;
                },
                get CameraShutter() {
                    return j176;
                },
                get CameraType() {
                    return k176;
                },
                get TrackingType() {
                    return l176;
                },
                get CameraUsage() {
                    return m176;
                },
                SKYBOX_FLAG: n176,
                Camera: o176,
                get ProbeClearFlag() {
                    return v176;
                },
                get ProbeType() {
                    return w176;
                },
                ReflectionProbe: x176,
                LODData: y176,
                LODGroup: z176,
                Ambient: a177,
                ColorTemperatureToRGB: function (t1101, u1101) {
                    u1101 < 1e3 ? u1101 = 1e3 : u1101 > 15e3 && (u1101 = 15e3);
                    const v1101 = u1101 * u1101, w1101 = (.860117757 + .000154118254 * u1101 + 1.28641212e-7 * v1101) / (1 + .000842420235 * u1101 + 7.08145163e-7 * v1101), x1101 = (.317398726 + 422806245e-13 * u1101 + 4.20481691e-8 * v1101) / (1 - 289741816e-13 * u1101 + 1.61456053e-7 * v1101), y1101 = 2 * w1101 - 8 * x1101 + 4, z1101 = 3 * w1101 / y1101, a1102 = 2 * x1101 / y1101, b1102 = 1 / a1102 * z1101, c1102 = 1 / a1102 * (1 - z1101 - a1102);
                    t1101.x = 3.2404542 * b1102 - 1.5371385 + -.4985314 * c1102, t1101.y = -.969266 * b1102 + 1.8760108 + .041556 * c1102, t1101.z = .0556434 * b1102 - .2040259 + 1.0572252 * c1102;
                },
                get LightType() {
                    return b177;
                },
                nt2lm: s1101 => 4 * Math.PI * Math.PI * s1101 * s1101,
                Light: c177,
                DirectionalLight: d177,
                SpotLight: e177,
                SphereLight: f177,
                PointLight: g177,
                RangedDirectionalLight: h177,
                FogType: i177,
                FOG_TYPE_NONE: j177,
                FogInfo: k177,
                Fog: l177,
                ShadowSize: m177,
                ShadowType: n177,
                PCFType: o177,
                CSMLevel: p177,
                CSMOptimizationMode: q177,
                EnvironmentLightingType: r177,
                ToneMappingType: s177,
                ShadowsInfo: t177,
                Shadows: u177,
                Skybox: w177,
                PostSettings: x177
            });
            const z177 = g125("EffectAsset", jsb.EffectAsset);
            s143.EffectAsset = z177, z177.prototype._ctor = function () {
                jsb.Asset.prototype._ctor.apply(this, arguments), this.hideInEditor = !1;
            }, function (b1101, c1101 = r163) {
                const { EffectAsset: d1101 } = {
                    ...b1101
                };
                c1101(() => {
                    s151(d1101.prototype);
                }, "editable", "techniques"), c1101(() => {
                    j151(d1101.prototype, "techniques", () => []);
                }, "serializable", "techniques"), c1101(() => {
                    s151(d1101.prototype);
                }, "editable", "shaders"), c1101(() => {
                    j151(d1101.prototype, "shaders", () => []);
                }, "serializable", "shaders"), c1101(() => {
                    s151(d1101.prototype);
                }, "editable", "combinations"), c1101(() => {
                    j151(d1101.prototype, "combinations", () => []);
                }, "serializable", "combinations"), c1101(() => {
                    k151(d1101.prototype, "hideInEditor", () => !1);
                }, "editorOnly", "hideInEditor"), c1101(() => {
                    j151(d1101.prototype, "hideInEditor", () => !1);
                }, "serializable", "hideInEditor"), c1101(() => {
                    e151("cc.EffectAsset")(d1101);
                }, "ccclass", null);
            }({
                EffectAsset: z177
            });
            const a178 = jsb.Material.prototype;
            function m135(w1100, x1100, y1100, z1100, a1101) {
                null != a1101 ? w1100.call(x1100, y1100, z1100, a1101) : w1100.call(x1100, y1100, z1100);
            }
            var b178;
            !function (v1100) {
                v1100[v1100.VEC2 = 0] = "VEC2", v1100[v1100.VEC3 = 1] = "VEC3", v1100[v1100.VEC4 = 2] = "VEC4", v1100[v1100.QUATERNION = 3] = "QUATERNION", v1100[v1100.MAT3 = 4] = "MAT3", v1100[v1100.MAT4 = 5] = "MAT4", v1100[v1100.SIZE = 6] = "SIZE", v1100[v1100.RECT = 7] = "RECT", v1100[v1100.COLOR = 8] = "COLOR";
            }(b178 || (b178 = {})), a178.setProperty = function (r1100, s1100, t1100) {
                if (Array.isArray(s1100)) {
                    const u1100 = s1100[0];
                    "number" == typeof u1100 ? Number.isInteger(u1100) ? m135(this.setPropertyInt32Array, this, r1100, s1100, t1100) : m135(this.setPropertyFloat32Array, this, r1100, s1100, t1100) : u1100 instanceof s147 ? m135(this.setPropertyVec2Array, this, r1100, s1100, t1100) : u1100 instanceof w146 ? m135(this.setPropertyVec3Array, this, r1100, s1100, t1100) : u1100 instanceof v146 ? m135(this.setPropertyVec4Array, this, r1100, s1100, t1100) : u1100 instanceof a147 ? m135(this.setPropertyColorArray, this, r1100, s1100, t1100) : u1100 instanceof c147 ? m135(this.setPropertyMat3Array, this, r1100, s1100, t1100) : u1100 instanceof o147 ? m135(this.setPropertyMat4Array, this, r1100, s1100, t1100) : u1100 instanceof g147 ? m135(this.setPropertyQuatArray, this, r1100, s1100, t1100) : u1100 instanceof y165 ? m135(this.setPropertyTextureBaseArray, this, r1100, s1100, t1100) : u1100 instanceof q162 ? m135(this.setPropertyGFXTextureArray, this, r1100, s1100, t1100) : s143.error(`Material.setProperty Unknown type: ${s1100}`);
                }
                else
                    "number" == typeof s1100 ? Number.isInteger(s1100) ? m135(this.setPropertyInt32, this, r1100, s1100, t1100) : m135(this.setPropertyFloat32, this, r1100, s1100, t1100) : s1100 instanceof s147 ? m135(this.setPropertyVec2, this, r1100, s1100, t1100) : s1100 instanceof w146 ? m135(this.setPropertyVec3, this, r1100, s1100, t1100) : s1100 instanceof v146 ? m135(this.setPropertyVec4, this, r1100, s1100, t1100) : s1100 instanceof a147 ? m135(this.setPropertyColor, this, r1100, s1100, t1100) : s1100 instanceof c147 ? m135(this.setPropertyMat3, this, r1100, s1100, t1100) : s1100 instanceof o147 ? m135(this.setPropertyMat4, this, r1100, s1100, t1100) : s1100 instanceof g147 ? m135(this.setPropertyQuat, this, r1100, s1100, t1100) : s1100 instanceof y165 ? m135(this.setPropertyTextureBase, this, r1100, s1100, t1100) : s1100 instanceof q162 ? m135(this.setPropertyGFXTexture, this, r1100, s1100, t1100) : null === s1100 ? t1100 ? this.setPropertyNull(r1100, t1100) : this.setPropertyNull(r1100) : s143.error(`Material.setProperty Unknown type: ${s1100}`);
            }, a178.getProperty = function (p1099, q1099) {
                let r1099, s1099;
                if (r1099 = void 0 !== q1099 ? this._getProperty(p1099, q1099) : this._getProperty(p1099), Array.isArray(r1099)) {
                    const u1099 = r1099[0], v1099 = [];
                    if (u1099 instanceof jsb.Vec2 || u1099.type === b178.VEC2)
                        for (let o1100 = 0, p1100 = r1099.length; o1100 < p1100; ++o1100) {
                            const q1100 = r1099[o1100];
                            v1099.push(new s147(q1100.x, q1100.y));
                        }
                    else if (u1099.type === b178.VEC3)
                        for (let l1100 = 0, m1100 = r1099.length; l1100 < m1100; ++l1100) {
                            const n1100 = r1099[l1100];
                            v1099.push(new w146(n1100.x, n1100.y, n1100.z));
                        }
                    else if (u1099.type === b178.VEC4)
                        for (let i1100 = 0, j1100 = r1099.length; i1100 < j1100; ++i1100) {
                            const k1100 = r1099[i1100];
                            v1099.push(new v146(k1100.x, k1100.y, k1100.z, k1100.w));
                        }
                    else if (u1099 instanceof jsb.Color)
                        for (let f1100 = 0, g1100 = r1099.length; f1100 < g1100; ++f1100) {
                            const h1100 = r1099[f1100];
                            v1099.push(new a147(h1100.r, h1100.g, h1100.b, h1100.a));
                        }
                    else if (u1099.type === b178.MAT3)
                        for (let c1100 = 0, d1100 = r1099.length; c1100 < d1100; ++c1100) {
                            const e1100 = r1099[c1100];
                            v1099.push(new c147(e1100[0], e1100[1], e1100[2], e1100[3], e1100[4], e1100[5], e1100[6], e1100[7], e1100[8]));
                        }
                    else if (u1099.type === b178.MAT4)
                        for (let z1099 = 0, a1100 = r1099.length; z1099 < a1100; ++z1099) {
                            const b1100 = r1099[z1099];
                            v1099.push(new o147(b1100[0], b1100[1], b1100[2], b1100[3], b1100[4], b1100[5], b1100[6], b1100[7], b1100[8], b1100[9], b1100[10], b1100[11], b1100[12], b1100[13], b1100[14], b1100[15]));
                        }
                    else if (u1099.type === b178.QUATERNION)
                        for (let w1099 = 0, x1099 = r1099.length; w1099 < x1099; ++w1099) {
                            const y1099 = r1099[w1099];
                            v1099.push(new g147(y1099.x, y1099.y, y1099.z, y1099.w));
                        }
                    return v1099 || r1099;
                }
                if (null == r1099)
                    return null;
                const t1099 = r1099;
                return r1099 instanceof jsb.Vec2 || r1099.type === b178.VEC2 ? s1099 = new w146(t1099.x, t1099.y) : r1099.type === b178.VEC3 ? s1099 = new w146(t1099.x, t1099.y, t1099.z) : r1099.type === b178.VEC4 ? s1099 = new v146(t1099.x, t1099.y, t1099.z, t1099.w) : r1099 instanceof jsb.Color ? s1099 = new a147(t1099.r, t1099.g, t1099.b, t1099.a) : r1099.type === b178.MAT3 ? s1099 = new c147(t1099[0], t1099[1], t1099[2], t1099[3], t1099[4], t1099[5], t1099[6], t1099[7], t1099[8]) : r1099.type === b178.MAT4 ? s1099 = new o147(t1099[0], t1099[1], t1099[2], t1099[3], t1099[4], t1099[5], t1099[6], t1099[7], t1099[8], t1099[9], t1099[10], t1099[11], t1099[12], t1099[13], t1099[14], t1099[15]) : r1099.type === b178.QUATERNION && (s1099 = new g147(t1099.x, t1099.y, t1099.z, t1099.w)), s1099 || r1099;
            };
            const c178 = g125("Material", jsb.Material);
            s143.Material = c178;
            const d178 = c178.prototype;
            d178._ctor = function () {
                jsb.Asset.prototype._ctor.apply(this, arguments), this._props = [], this._passes = [], this._registerPassesUpdatedListener(), this._isCtorCalled = !0;
            };
            const e178 = d178.onLoaded;
            d178.onLoaded = function () {
                this._propsInternal = this._props, e178.call(this);
            }, d178._onPassesUpdated = function () {
                this._passes = this.getPasses();
            }, Object.defineProperty(d178, "passes", {
                enumerable: !0,
                configurable: !0,
                get() {
                    return this._isCtorCalled || (this._ctor(), this._passes = this.getPasses()), this._passes;
                }
            }), function (a1099, b1099 = r163) {
                const { Material: c1099, EffectAsset: d1099 } = {
                    ...a1099
                };
                b1099(() => {
                    a131(d1099)(c1099.prototype, "_effectAsset", () => null);
                }, "type", "_effectAsset"), b1099(() => {
                    j151(c1099.prototype, "_techIdx", () => 0);
                }, "serializable", "_techIdx"), b1099(() => {
                    j151(c1099.prototype, "_defines", () => []);
                }, "serializable", "_defines"), b1099(() => {
                    j151(c1099.prototype, "_states", () => []);
                }, "serializable", "_states"), b1099(() => {
                    j151(c1099.prototype, "_props", () => []);
                }, "serializable", "_props"), b1099(() => {
                    e151("cc.Material")(c1099);
                }, "ccclass", null);
            }({
                Material: c178,
                EffectAsset: z177
            });
            const f178 = g125("DEFAULT_WORLD_MIN_POS", new w146(-1024, -1024, -1024)), g178 = g125("DEFAULT_WORLD_MAX_POS", new w146(1024, 1024, 1024)), h178 = g125("DEFAULT_OCTREE_DEPTH", 8), i178 = g125("FogType", p127({
                LINEAR: 0,
                EXP: 1,
                EXP_SQUARED: 2,
                LAYERED: 3
            })), j178 = g125("ShadowSize", p127({
                Low_256x256: 256,
                Medium_512x512: 512,
                High_1024x1024: 1024,
                Ultra_2048x2048: 2048
            })), k178 = g125("ShadowType", p127({
                Planar: 0,
                ShadowMap: 1
            })), l178 = g125("AmbientInfo", jsb.AmbientInfo);
            s143.AmbientInfo = l178;
            const m178 = g125("SkyboxInfo", jsb.SkyboxInfo);
            s143.SkyboxInfo = m178;
            const n178 = g125("FogInfo", jsb.FogInfo);
            s143.FogInfo = n178, n178.FogType = i178;
            const o178 = g125("ShadowsInfo", jsb.ShadowsInfo);
            s143.ShadowsInfo = o178;
            const p178 = g125("OctreeInfo", jsb.OctreeInfo);
            s143.OctreeInfo = p178;
            const q178 = g125("LightProbeInfo", jsb.LightProbeInfo), r178 = g125("SceneGlobals", jsb.SceneGlobals);
            s143.SceneGlobals = r178;
            const s178 = g125("SkinInfo", jsb.SkinInfo);
            s143.SkinInfo = s178;
            const t178 = g125("PostSettingsInfo", jsb.PostSettingsInfo);
            var u178;
            s143.PostSettingsInfo = t178, function () {
                const p1098 = r178.prototype;
                p1098._ctor = function () {
                    this._ambientRef = this.getAmbientInfo(), this._shadowsRef = this.getShadowsInfo(), this._skyboxRef = this.getSkyboxInfo(), this._fogRef = this.getFogInfo(), this._octreeRef = this.getOctreeInfo(), this._lightProbeRef = this.getLightProbeInfo(), this._skinRef = this.getSkinInfo(), this._postSettingsRef = this.getPostSettingsInfo();
                }, Object.defineProperty(p1098, "ambient", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._ambientRef;
                    },
                    set(z1098) {
                        this._ambientRef = z1098, this.setAmbientInfo(z1098);
                    }
                }), Object.defineProperty(p1098, "shadows", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._shadowsRef;
                    },
                    set(y1098) {
                        this._shadowsRef = y1098, this.setShadowsInfo(y1098);
                    }
                }), Object.defineProperty(p1098, "_skybox", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._skyboxRef;
                    },
                    set(x1098) {
                        this._skyboxRef = x1098, this.setSkyboxInfo(x1098);
                    }
                }), Object.defineProperty(p1098, "skybox", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._skyboxRef;
                    },
                    set(w1098) {
                        this._skyboxRef = w1098, this.setSkyboxInfo(w1098);
                    }
                }), Object.defineProperty(p1098, "fog", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._fogRef;
                    },
                    set(v1098) {
                        this._fogRef = v1098, this.setFogInfo(v1098);
                    }
                }), Object.defineProperty(p1098, "octree", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._octreeRef;
                    },
                    set(u1098) {
                        this._octreeRef = u1098, this.setOctreeInfo(u1098);
                    }
                }), Object.defineProperty(p1098, "lightProbeInfo", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._lightProbeRef;
                    },
                    set(t1098) {
                        this._lightProbeRef = t1098, this.setLightProbeInfo(t1098);
                    }
                }), Object.defineProperty(p1098, "skin", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._skinRef;
                    },
                    set(s1098) {
                        this._skinRef = s1098, this.setSkinInfo(s1098);
                    }
                }), Object.defineProperty(p1098, "postSettings", {
                    enumerable: !0,
                    configurable: !0,
                    get() {
                        return this._postSettingsRef;
                    },
                    set(r1098) {
                        this._postSettingsRef = r1098, this.setPostSettingsInfo(r1098);
                    }
                });
            }(), function (x1096, y1096 = r163) {
                const { SceneGlobals: z1096, AmbientInfo: a1097, ShadowsInfo: b1097, SkyboxInfo: c1097, FogInfo: d1097, OctreeInfo: e1097, SkinInfo: f1097, LightProbeInfo: g1097, PostSettingsInfo: h1097 } = {
                    ...x1096
                }, i1097 = Object.getOwnPropertyDescriptor(z1096.prototype, "skybox");
                y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "ambient"), y1096(() => {
                    j151(z1096.prototype, "ambient", () => new a1097());
                }, "serializable", "ambient"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "shadows"), y1096(() => {
                    j151(z1096.prototype, "shadows", () => new b1097());
                }, "serializable", "shadows"), y1096(() => {
                    j151(z1096.prototype, "_skybox", () => new c1097());
                }, "serializable", "_skybox"), y1096(() => {
                    j151(z1096.prototype, "fog", () => new d1097());
                }, "serializable", "fog"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "fog"), y1096(() => {
                    a131(c1097)(z1096.prototype, "skybox", i1097);
                }, "type", "skybox"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "skybox"), y1096(() => {
                    j151(z1096.prototype, "octree", () => new e1097());
                }, "serializable", "octree"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "octree"), y1096(() => {
                    j151(z1096.prototype, "skin", () => new f1097());
                }, "serializable", "skin"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "skin"), y1096(() => {
                    j151(z1096.prototype, "lightProbeInfo", () => new g1097());
                }, "serializable", "lightProbeInfo"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "lightProbeInfo"), y1096(() => {
                    j151(z1096.prototype, "postSettings", () => new h1097());
                }, "serializable", "postSettings"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "postSettings"), y1096(() => {
                    j151(z1096.prototype, "bakedWithStationaryMainLight", () => !1);
                }, "serializable", "bakedWithStationaryMainLight"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "bakedWithStationaryMainLight"), y1096(() => {
                    j151(z1096.prototype, "bakedWithHighpLightmap", () => !1);
                }, "serializable", "bakedWithHighpLightmap"), y1096(() => {
                    s151(z1096.prototype);
                }, "editable", "bakedWithHighpLightmap"), y1096(() => {
                    e151("cc.SceneGlobals")(z1096);
                }, "ccclass", null);
            }({
                SceneGlobals: r178,
                AmbientInfo: l178,
                SkyboxInfo: m178,
                FogInfo: n178,
                ShadowsInfo: o178,
                LightProbeInfo: q178,
                OctreeInfo: p178,
                SkinInfo: s178,
                PostSettingsInfo: t178
            }), function (p1095, q1095 = r163) {
                const { OctreeInfo: r1095, CCInteger: s1095, Vec3: t1095, DEFAULT_WORLD_MIN_POS: u1095, DEFAULT_WORLD_MAX_POS: v1095, DEFAULT_OCTREE_DEPTH: w1095 } = {
                    ...p1095
                }, x1095 = Object.getOwnPropertyDescriptor(r1095.prototype, "enabled"), y1095 = Object.getOwnPropertyDescriptor(r1095.prototype, "minPos"), z1095 = Object.getOwnPropertyDescriptor(r1095.prototype, "maxPos"), a1096 = Object.getOwnPropertyDescriptor(r1095.prototype, "depth");
                q1095(() => {
                    w151()(r1095.prototype, "enabled", x1095);
                }, "tooltip", "enabled"), q1095(() => {
                    s151(r1095.prototype);
                }, "editable", "enabled"), q1095(() => {
                    v151()(r1095.prototype, "minPos", y1095);
                }, "displayName", "minPos"), q1095(() => {
                    w151()(r1095.prototype, "minPos", y1095);
                }, "tooltip", "minPos"), q1095(() => {
                    s151(r1095.prototype);
                }, "editable", "minPos"), q1095(() => {
                    v151()(r1095.prototype, "maxPos", z1095);
                }, "displayName", "maxPos"), q1095(() => {
                    w151()(r1095.prototype, "maxPos", z1095);
                }, "tooltip", "maxPos"), q1095(() => {
                    s151(r1095.prototype);
                }, "editable", "maxPos"), q1095(() => {
                    w151()(r1095.prototype, "depth", a1096);
                }, "tooltip", "depth"), q1095(() => {
                    a131(s1095)(r1095.prototype, "depth", a1096);
                }, "type", "depth"), q1095(() => {
                    a152(r1095.prototype);
                }, "slide", "depth"), q1095(() => {
                    x151()(r1095.prototype, "depth", a1096);
                }, "range", "depth"), q1095(() => {
                    s151(r1095.prototype);
                }, "editable", "depth"), q1095(() => {
                    j151(r1095.prototype, "_enabled", () => !1);
                }, "serializable", "_enabled"), q1095(() => {
                    j151(r1095.prototype, "_minPos", () => new t1095(u1095));
                }, "serializable", "_minPos"), q1095(() => {
                    j151(r1095.prototype, "_maxPos", () => new t1095(v1095));
                }, "serializable", "_maxPos"), q1095(() => {
                    j151(r1095.prototype, "_depth", () => w1095);
                }, "serializable", "_depth"), q1095(() => {
                    e151("cc.OctreeInfo")(r1095);
                }, "ccclass", null);
            }({
                OctreeInfo: p178,
                CCInteger: y145,
                Vec3: w146,
                DEFAULT_WORLD_MAX_POS: g178,
                DEFAULT_WORLD_MIN_POS: f178,
                DEFAULT_OCTREE_DEPTH: h178
            }), function (j1093, k1093 = r163) {
                const { ShadowsInfo: l1093, ShadowType: m1093, CCFloat: n1093, CCInteger: o1093, ShadowSize: p1093, Vec3: q1093, Color: r1093, Vec2: s1093 } = {
                    ...j1093
                }, t1093 = Object.getOwnPropertyDescriptor(l1093.prototype, "enabled"), u1093 = Object.getOwnPropertyDescriptor(l1093.prototype, "type"), v1093 = Object.getOwnPropertyDescriptor(l1093.prototype, "shadowColor"), w1093 = Object.getOwnPropertyDescriptor(l1093.prototype, "planeDirection"), x1093 = Object.getOwnPropertyDescriptor(l1093.prototype, "planeHeight"), y1093 = Object.getOwnPropertyDescriptor(l1093.prototype, "planeBias"), z1093 = Object.getOwnPropertyDescriptor(l1093.prototype, "maxReceived"), a1094 = Object.getOwnPropertyDescriptor(l1093.prototype, "shadowMapSize");
                k1093(() => {
                    w151()(l1093.prototype, "enabled", t1093);
                }, "tooltip", "enabled"), k1093(() => {
                    s151(l1093.prototype);
                }, "editable", "enabled"), k1093(() => {
                    a131(m1093)(l1093.prototype, "type", u1093);
                }, "type", "type"), k1093(() => {
                    s151(l1093.prototype);
                }, "editable", "type"), k1093(() => {
                    w151()(l1093.prototype, "type", u1093);
                }, "tooltip", "type"), k1093(() => {
                    t151()(l1093.prototype, "shadowColor", v1093);
                }, "visible", "shadowColor"), k1093(() => {
                    w151()(l1093.prototype, "shadowColor", v1093);
                }, "tooltip", "shadowColor"), k1093(() => {
                    t151()(l1093.prototype, "planeDirection", w1093);
                }, "visible", "planeDirection"), k1093(() => {
                    w151()(l1093.prototype, "planeDirection", w1093);
                }, "tooltip", "planeDirection"), k1093(() => {
                    t151()(l1093.prototype, "planeHeight", x1093);
                }, "visible", "planeHeight"), k1093(() => {
                    a131(n1093)(l1093.prototype, "planeHeight", x1093);
                }, "type", "planeHeight"), k1093(() => {
                    s151(l1093.prototype);
                }, "editable", "planeHeight"), k1093(() => {
                    w151()(l1093.prototype, "planeHeight", x1093);
                }, "tooltip", "planeHeight"), k1093(() => {
                    t151()(l1093.prototype, "planeBias", y1093);
                }, "visible", "planeBias"), k1093(() => {
                    a131(n1093)(l1093.prototype, "planeBias", y1093);
                }, "type", "planeBias"), k1093(() => {
                    s151(l1093.prototype);
                }, "editable", "planeBias"), k1093(() => {
                    w151()(l1093.prototype, "planeBias", y1093);
                }, "tooltip", "planeBias"), k1093(() => {
                    t151()(l1093.prototype, "maxReceived", z1093);
                }, "visible", "maxReceived"), k1093(() => {
                    a131(o1093)(l1093.prototype, "maxReceived", z1093);
                }, "type", "maxReceived"), k1093(() => {
                    w151()(l1093.prototype, "maxReceived", z1093);
                }, "tooltip", "maxReceived"), k1093(() => {
                    t151()(l1093.prototype, "shadowMapSize", a1094);
                }, "visible", "shadowMapSize"), k1093(() => {
                    a131(p1093)(l1093.prototype, "shadowMapSize", a1094);
                }, "type", "shadowMapSize"), k1093(() => {
                    w151()(l1093.prototype, "shadowMapSize", a1094);
                }, "tooltip", "shadowMapSize"), k1093(() => {
                    j151(l1093.prototype, "_enabled", () => !1);
                }, "serializable", "_enabled"), k1093(() => {
                    j151(l1093.prototype, "_type", () => m1093.Planar);
                }, "serializable", "_type"), k1093(() => {
                    j151(l1093.prototype, "_normal", () => new q1093(0, 1, 0));
                }, "serializable", "_normal"), k1093(() => {
                    j151(l1093.prototype, "_distance", () => 0);
                }, "serializable", "_distance"), k1093(() => {
                    j151(l1093.prototype, "_planeBias", () => 1);
                }, "serializable", "_planeBias"), k1093(() => {
                    j151(l1093.prototype, "_shadowColor", () => new r1093(0, 0, 0, 76));
                }, "serializable", "_shadowColor"), k1093(() => {
                    j151(l1093.prototype, "_maxReceived", () => 4);
                }, "serializable", "_maxReceived"), k1093(() => {
                    j151(l1093.prototype, "_size", () => new s1093(1024, 1024));
                }, "serializable", "_size"), k1093(() => {
                    e151("cc.ShadowsInfo")(l1093);
                }, "ccclass", null);
            }({
                ShadowsInfo: o178,
                ShadowType: k178,
                CCFloat: z145,
                CCInteger: y145,
                ShadowSize: j178,
                Vec3: w146,
                Color: a147,
                Vec2: s147
            }), function (m1090, n1090 = r163) {
                const { FogInfo: o1090, FogType: p1090, CCFloat: q1090, Color: r1090 } = {
                    ...m1090
                }, s1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "enabled"), t1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "accurate"), u1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "fogColor"), v1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "type"), w1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "fogDensity"), x1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "fogStart"), y1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "fogEnd"), z1090 = Object.getOwnPropertyDescriptor(o1090.prototype, "fogAtten"), a1091 = Object.getOwnPropertyDescriptor(o1090.prototype, "fogTop"), b1091 = Object.getOwnPropertyDescriptor(o1090.prototype, "fogRange");
                n1090(() => {
                    b152()(o1090.prototype, "enabled", s1090);
                }, "displayOrder", "enabled"), n1090(() => {
                    w151()(o1090.prototype, "enabled", s1090);
                }, "tooltip", "enabled"), n1090(() => {
                    s151(o1090.prototype);
                }, "editable", "enabled"), n1090(() => {
                    b152()(o1090.prototype, "accurate", t1090);
                }, "displayOrder", "accurate"), n1090(() => {
                    w151()(o1090.prototype, "accurate", t1090);
                }, "tooltip", "accurate"), n1090(() => {
                    s151(o1090.prototype);
                }, "editable", "accurate"), n1090(() => {
                    w151()(o1090.prototype, "fogColor", u1090);
                }, "tooltip", "fogColor"), n1090(() => {
                    s151(o1090.prototype);
                }, "editable", "fogColor"), n1090(() => {
                    w151()(o1090.prototype, "type", v1090);
                }, "tooltip", "type"), n1090(() => {
                    b152()(o1090.prototype, "type", v1090);
                }, "displayOrder", "type"), n1090(() => {
                    a131(p1090)(o1090.prototype, "type", v1090);
                }, "type", "type"), n1090(() => {
                    s151(o1090.prototype);
                }, "editable", "type"), n1090(() => {
                    w151()(o1090.prototype, "fogDensity", w1090);
                }, "tooltip", "fogDensity"), n1090(() => {
                    a152(o1090.prototype);
                }, "slide", "fogDensity"), n1090(() => {
                    x151()(o1090.prototype, "fogDensity", w1090);
                }, "range", "fogDensity"), n1090(() => {
                    a131(q1090)(o1090.prototype, "fogDensity", w1090);
                }, "type", "fogDensity"), n1090(() => {
                    t151()(o1090.prototype, "fogDensity", w1090);
                }, "visible", "fogDensity"), n1090(() => {
                    w151()(o1090.prototype, "fogStart", x1090);
                }, "tooltip", "fogStart"), n1090(() => {
                    z151()(o1090.prototype, "fogStart", x1090);
                }, "rangeStep", "fogStart"), n1090(() => {
                    a131(q1090)(o1090.prototype, "fogStart", x1090);
                }, "type", "fogStart"), n1090(() => {
                    t151()(o1090.prototype, "fogStart", x1090);
                }, "visible", "fogStart"), n1090(() => {
                    w151()(o1090.prototype, "fogEnd", y1090);
                }, "tooltip", "fogEnd"), n1090(() => {
                    z151()(o1090.prototype, "fogEnd", y1090);
                }, "rangeStep", "fogEnd"), n1090(() => {
                    a131(q1090)(o1090.prototype, "fogEnd", y1090);
                }, "type", "fogEnd"), n1090(() => {
                    t151()(o1090.prototype, "fogEnd", y1090);
                }, "visible", "fogEnd"), n1090(() => {
                    w151()(o1090.prototype, "fogAtten", z1090);
                }, "tooltip", "fogAtten"), n1090(() => {
                    z151()(o1090.prototype, "fogAtten", z1090);
                }, "rangeStep", "fogAtten"), n1090(() => {
                    y151()(o1090.prototype, "fogAtten", z1090);
                }, "rangeMin", "fogAtten"), n1090(() => {
                    a131(q1090)(o1090.prototype, "fogAtten", z1090);
                }, "type", "fogAtten"), n1090(() => {
                    t151()(o1090.prototype, "fogAtten", z1090);
                }, "visible", "fogAtten"), n1090(() => {
                    w151()(o1090.prototype, "fogTop", a1091);
                }, "tooltip", "fogTop"), n1090(() => {
                    z151()(o1090.prototype, "fogTop", a1091);
                }, "rangeStep", "fogTop"), n1090(() => {
                    a131(q1090)(o1090.prototype, "fogTop", a1091);
                }, "type", "fogTop"), n1090(() => {
                    t151()(o1090.prototype, "fogTop", a1091);
                }, "visible", "fogTop"), n1090(() => {
                    w151()(o1090.prototype, "fogRange", b1091);
                }, "tooltip", "fogRange"), n1090(() => {
                    z151()(o1090.prototype, "fogRange", b1091);
                }, "rangeStep", "fogRange"), n1090(() => {
                    a131(q1090)(o1090.prototype, "fogRange", b1091);
                }, "type", "fogRange"), n1090(() => {
                    t151()(o1090.prototype, "fogRange", b1091);
                }, "visible", "fogRange"), n1090(() => {
                    j151(o1090.prototype, "_type", () => p1090.LINEAR);
                }, "serializable", "_type"), n1090(() => {
                    j151(o1090.prototype, "_fogColor", () => new r1090("#C8C8C8"));
                }, "serializable", "_fogColor"), n1090(() => {
                    j151(o1090.prototype, "_enabled", () => !1);
                }, "serializable", "_enabled"), n1090(() => {
                    j151(o1090.prototype, "_fogDensity", () => .3);
                }, "serializable", "_fogDensity"), n1090(() => {
                    j151(o1090.prototype, "_fogStart", () => .5);
                }, "serializable", "_fogStart"), n1090(() => {
                    j151(o1090.prototype, "_fogEnd", () => 300);
                }, "serializable", "_fogEnd"), n1090(() => {
                    j151(o1090.prototype, "_fogAtten", () => 5);
                }, "serializable", "_fogAtten"), n1090(() => {
                    j151(o1090.prototype, "_fogTop", () => 1.5);
                }, "serializable", "_fogTop"), n1090(() => {
                    j151(o1090.prototype, "_fogRange", () => 1.2);
                }, "serializable", "_fogRange"), n1090(() => {
                    j151(o1090.prototype, "_accurate", () => !1);
                }, "serializable", "_accurate"), n1090(() => {
                    e151("cc.FogInfo")(o1090);
                }, "ccclass", null);
            }({
                FogInfo: n178,
                FogType: i178,
                CCFloat: z145,
                Color: a147
            }), function (j1087, k1087 = r163) {
                const { SkyboxInfo: l1087, EnvironmentLightingType: m1087, TextureCube: n1087, CCFloat: o1087, Material: p1087 } = {
                    ...j1087
                }, q1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "enabled"), r1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "envLightingType"), s1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "useHDR"), t1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "envmap"), u1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "rotationAngle"), v1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "diffuseMap"), w1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "reflectionMap"), x1087 = Object.getOwnPropertyDescriptor(l1087.prototype, "skyboxMaterial");
                k1087(() => {
                    w151()(l1087.prototype, "enabled", q1087);
                }, "tooltip", "enabled"), k1087(() => {
                    s151(l1087.prototype);
                }, "editable", "enabled"), k1087(() => {
                    w151()(l1087.prototype, "envLightingType", r1087);
                }, "tooltip", "envLightingType"), k1087(() => {
                    a131(m1087)(l1087.prototype, "envLightingType", r1087);
                }, "type", "envLightingType"), k1087(() => {
                    s151(l1087.prototype);
                }, "editable", "envLightingType"), k1087(() => {
                    w151()(l1087.prototype, "useHDR", s1087);
                }, "tooltip", "useHDR"), k1087(() => {
                    s151(l1087.prototype);
                }, "editable", "useHDR"), k1087(() => {
                    w151()(l1087.prototype, "envmap", t1087);
                }, "tooltip", "envmap"), k1087(() => {
                    a131(n1087)(l1087.prototype, "envmap", t1087);
                }, "type", "envmap"), k1087(() => {
                    s151(l1087.prototype);
                }, "editable", "envmap"), k1087(() => {
                    w151()(l1087.prototype, "rotationAngle", u1087);
                }, "tooltip", "rotationAngle"), k1087(() => {
                    a152(l1087.prototype);
                }, "slide", "rotationAngle"), k1087(() => {
                    x151()(l1087.prototype, "rotationAngle", u1087);
                }, "range", "rotationAngle"), k1087(() => {
                    a131(o1087)(l1087.prototype, "rotationAngle", u1087);
                }, "type", "rotationAngle"), k1087(() => {
                    b152()(l1087.prototype, "diffuseMap", v1087);
                }, "displayOrder", "diffuseMap"), k1087(() => {
                    a131(n1087)(l1087.prototype, "diffuseMap", v1087);
                }, "type", "diffuseMap"), k1087(() => {
                    u151(l1087.prototype);
                }, "readOnly", "diffuseMap"), k1087(() => {
                    s151(l1087.prototype);
                }, "editable", "diffuseMap"), k1087(() => {
                    t151()(l1087.prototype, "diffuseMap", v1087);
                }, "visible", "diffuseMap"), k1087(() => {
                    b152()(l1087.prototype, "reflectionMap", w1087);
                }, "displayOrder", "reflectionMap"), k1087(() => {
                    a131(n1087)(l1087.prototype, "reflectionMap", w1087);
                }, "type", "reflectionMap"), k1087(() => {
                    u151(l1087.prototype);
                }, "readOnly", "reflectionMap"), k1087(() => {
                    s151(l1087.prototype);
                }, "editable", "reflectionMap"), k1087(() => {
                    t151()(l1087.prototype, "reflectionMap", w1087);
                }, "visible", "reflectionMap"), k1087(() => {
                    w151()(l1087.prototype, "skyboxMaterial", x1087);
                }, "tooltip", "skyboxMaterial"), k1087(() => {
                    a131(p1087)(l1087.prototype, "skyboxMaterial", x1087);
                }, "type", "skyboxMaterial"), k1087(() => {
                    s151(l1087.prototype);
                }, "editable", "skyboxMaterial"), k1087(() => {
                    j151(l1087.prototype, "_envLightingType", () => m1087.HEMISPHERE_DIFFUSE);
                }, "serializable", "_envLightingType"), k1087(() => {
                    y130("_envmap")(l1087.prototype, "_envmapHDR", () => null);
                }, "formerlySerializedAs", "_envmapHDR"), k1087(() => {
                    a131(n1087)(l1087.prototype, "_envmapHDR", () => null);
                }, "type", "_envmapHDR"), k1087(() => {
                    j151(l1087.prototype, "_envmapHDR", () => null);
                }, "serializable", "_envmapHDR"), k1087(() => {
                    a131(n1087)(l1087.prototype, "_envmapLDR", () => null);
                }, "type", "_envmapLDR"), k1087(() => {
                    j151(l1087.prototype, "_envmapLDR", () => null);
                }, "serializable", "_envmapLDR"), k1087(() => {
                    a131(n1087)(l1087.prototype, "_diffuseMapHDR", () => null);
                }, "type", "_diffuseMapHDR"), k1087(() => {
                    j151(l1087.prototype, "_diffuseMapHDR", () => null);
                }, "serializable", "_diffuseMapHDR"), k1087(() => {
                    a131(n1087)(l1087.prototype, "_diffuseMapLDR", () => null);
                }, "type", "_diffuseMapLDR"), k1087(() => {
                    j151(l1087.prototype, "_diffuseMapLDR", () => null);
                }, "serializable", "_diffuseMapLDR"), k1087(() => {
                    j151(l1087.prototype, "_enabled", () => !1);
                }, "serializable", "_enabled"), k1087(() => {
                    j151(l1087.prototype, "_useHDR", () => !0);
                }, "serializable", "_useHDR"), k1087(() => {
                    a131(p1087)(l1087.prototype, "_editableMaterial", () => null);
                }, "type", "_editableMaterial"), k1087(() => {
                    j151(l1087.prototype, "_editableMaterial", () => null);
                }, "serializable", "_editableMaterial"), k1087(() => {
                    a131(n1087)(l1087.prototype, "_reflectionHDR", () => null);
                }, "type", "_reflectionHDR"), k1087(() => {
                    j151(l1087.prototype, "_reflectionHDR", () => null);
                }, "serializable", "_reflectionHDR"), k1087(() => {
                    a131(n1087)(l1087.prototype, "_reflectionLDR", () => null);
                }, "type", "_reflectionLDR"), k1087(() => {
                    j151(l1087.prototype, "_reflectionLDR", () => null);
                }, "serializable", "_reflectionLDR"), k1087(() => {
                    j151(l1087.prototype, "_rotationAngle", () => 0);
                }, "serializable", "_rotationAngle"), k1087(() => {
                    e151("cc.SkyboxInfo")(l1087);
                }, "ccclass", null);
            }({
                SkyboxInfo: m178,
                EnvironmentLightingType: r177,
                TextureCube: y175,
                CCFloat: z145,
                Material: c178
            }), function (w1085, x1085 = r163) {
                const { AmbientInfo: y1085, legacyCC: z1085, CCFloat: a1086, Vec4: b1086, Ambient: c1086 } = {
                    ...w1085
                }, d1086 = Object.getOwnPropertyDescriptor(y1085.prototype, "skyLightingColor"), e1086 = Object.getOwnPropertyDescriptor(y1085.prototype, "skyIllum"), f1086 = Object.getOwnPropertyDescriptor(y1085.prototype, "groundLightingColor");
                x1085(() => {
                    w151()(y1085.prototype, "skyLightingColor", d1086);
                }, "tooltip", "skyLightingColor"), x1085(() => {
                    s151(y1085.prototype);
                }, "editable", "skyLightingColor"), x1085(() => {
                    t151()(y1085.prototype, "skyLightingColor", d1086);
                }, "visible", "skyLightingColor"), x1085(() => {
                    x151()(y1085.prototype, "skyIllum", e1086);
                }, "range", "skyIllum"), x1085(() => {
                    w151()(y1085.prototype, "skyIllum", e1086);
                }, "tooltip", "skyIllum"), x1085(() => {
                    a131(a1086)(y1085.prototype, "skyIllum", e1086);
                }, "type", "skyIllum"), x1085(() => {
                    s151(y1085.prototype);
                }, "editable", "skyIllum"), x1085(() => {
                    w151()(y1085.prototype, "groundLightingColor", f1086);
                }, "tooltip", "groundLightingColor"), x1085(() => {
                    s151(y1085.prototype);
                }, "editable", "groundLightingColor"), x1085(() => {
                    t151()(y1085.prototype, "groundLightingColor", f1086);
                }, "visible", "groundLightingColor"), x1085(() => {
                    y130("_skyColor")(y1085.prototype, "_skyColorHDR", () => new b1086(.2, .5, .8, 1));
                }, "formerlySerializedAs", "_skyColorHDR"), x1085(() => {
                    j151(y1085.prototype, "_skyColorHDR", () => new b1086(.2, .5, .8, 1));
                }, "serializable", "_skyColorHDR"), x1085(() => {
                    y130("_skyIllum")(y1085.prototype, "_skyIllumHDR", () => c1086.SKY_ILLUM);
                }, "formerlySerializedAs", "_skyIllumHDR"), x1085(() => {
                    j151(y1085.prototype, "_skyIllumHDR", () => c1086.SKY_ILLUM);
                }, "serializable", "_skyIllumHDR"), x1085(() => {
                    y130("_groundAlbedo")(y1085.prototype, "_groundAlbedoHDR", () => new b1086(.2, .2, .2, 1));
                }, "formerlySerializedAs", "_groundAlbedoHDR"), x1085(() => {
                    j151(y1085.prototype, "_groundAlbedoHDR", () => new b1086(.2, .2, .2, 1));
                }, "serializable", "_groundAlbedoHDR"), x1085(() => {
                    j151(y1085.prototype, "_skyColorLDR", () => new b1086(.2, .5, .8, 1));
                }, "serializable", "_skyColorLDR"), x1085(() => {
                    j151(y1085.prototype, "_skyIllumLDR", () => c1086.SKY_ILLUM);
                }, "serializable", "_skyIllumLDR"), x1085(() => {
                    j151(y1085.prototype, "_groundAlbedoLDR", () => new b1086(.2, .2, .2, 1));
                }, "serializable", "_groundAlbedoLDR"), x1085(() => {
                    e151("cc.AmbientInfo")(y1085);
                }, "ccclass", null);
            }({
                AmbientInfo: l178,
                Vec4: v146,
                Ambient: a177,
                CCFloat: z145,
                legacyCC: s143
            }), function (q1083, r1083 = r163) {
                const { LightProbeInfo: s1083, CCFloat: t1083, CCInteger: u1083 } = {
                    ...q1083
                }, v1083 = Object.getOwnPropertyDescriptor(s1083.prototype, "giScale"), w1083 = Object.getOwnPropertyDescriptor(s1083.prototype, "giSamples"), x1083 = Object.getOwnPropertyDescriptor(s1083.prototype, "bounces"), y1083 = Object.getOwnPropertyDescriptor(s1083.prototype, "reduceRinging"), z1083 = Object.getOwnPropertyDescriptor(s1083.prototype, "showWireframe"), a1084 = Object.getOwnPropertyDescriptor(s1083.prototype, "showConvex"), b1084 = Object.getOwnPropertyDescriptor(s1083.prototype, "lightProbeSphereVolume");
                r1083(() => {
                    v151()(s1083.prototype, "giScale", v1083);
                }, "displayName", "giScale"), r1083(() => {
                    w151()(s1083.prototype, "giScale", v1083);
                }, "tooltip", "giScale"), r1083(() => {
                    a131(t1083)(s1083.prototype, "giScale", v1083);
                }, "type", "giScale"), r1083(() => {
                    x151()(s1083.prototype, "giScale", v1083);
                }, "range", "giScale"), r1083(() => {
                    s151(s1083.prototype);
                }, "editable", "giScale"), r1083(() => {
                    v151()(s1083.prototype, "giSamples", w1083);
                }, "displayName", "giSamples"), r1083(() => {
                    w151()(s1083.prototype, "giSamples", w1083);
                }, "tooltip", "giSamples"), r1083(() => {
                    a131(u1083)(s1083.prototype, "giSamples", w1083);
                }, "type", "giSamples"), r1083(() => {
                    x151()(s1083.prototype, "giSamples", w1083);
                }, "range", "giSamples"), r1083(() => {
                    s151(s1083.prototype);
                }, "editable", "giSamples"), r1083(() => {
                    w151()(s1083.prototype, "bounces", x1083);
                }, "tooltip", "bounces"), r1083(() => {
                    a131(u1083)(s1083.prototype, "bounces", x1083);
                }, "type", "bounces"), r1083(() => {
                    x151()(s1083.prototype, "bounces", x1083);
                }, "range", "bounces"), r1083(() => {
                    s151(s1083.prototype);
                }, "editable", "bounces"), r1083(() => {
                    w151()(s1083.prototype, "reduceRinging", y1083);
                }, "tooltip", "reduceRinging"), r1083(() => {
                    a131(t1083)(s1083.prototype, "reduceRinging", y1083);
                }, "type", "reduceRinging"), r1083(() => {
                    a152(s1083.prototype);
                }, "slide", "reduceRinging"), r1083(() => {
                    x151()(s1083.prototype, "reduceRinging", y1083);
                }, "range", "reduceRinging"), r1083(() => {
                    s151(s1083.prototype);
                }, "editable", "reduceRinging"), r1083(() => {
                    w151()(s1083.prototype, "showWireframe", z1083);
                }, "tooltip", "showWireframe"), r1083(() => {
                    s151(s1083.prototype);
                }, "editable", "showWireframe"), r1083(() => {
                    w151()(s1083.prototype, "showConvex", a1084);
                }, "tooltip", "showConvex"), r1083(() => {
                    s151(s1083.prototype);
                }, "editable", "showConvex"), r1083(() => {
                    w151()(s1083.prototype, "lightProbeSphereVolume", b1084);
                }, "tooltip", "lightProbeSphereVolume"), r1083(() => {
                    a131(t1083)(s1083.prototype, "lightProbeSphereVolume", b1084);
                }, "type", "lightProbeSphereVolume"), r1083(() => {
                    x151()(s1083.prototype, "lightProbeSphereVolume", b1084);
                }, "range", "lightProbeSphereVolume"), r1083(() => {
                    s151(s1083.prototype);
                }, "editable", "lightProbeSphereVolume"), r1083(() => {
                    j151(s1083.prototype, "_giScale", () => 1);
                }, "serializable", "_giScale"), r1083(() => {
                    j151(s1083.prototype, "_giSamples", () => 1024);
                }, "serializable", "_giSamples"), r1083(() => {
                    j151(s1083.prototype, "_bounces", () => 2);
                }, "serializable", "_bounces"), r1083(() => {
                    j151(s1083.prototype, "_reduceRinging", () => 0);
                }, "serializable", "_reduceRinging"), r1083(() => {
                    j151(s1083.prototype, "_showProbe", () => !0);
                }, "serializable", "_showProbe"), r1083(() => {
                    j151(s1083.prototype, "_showWireframe", () => !0);
                }, "serializable", "_showWireframe"), r1083(() => {
                    j151(s1083.prototype, "_showConvex", () => !1);
                }, "serializable", "_showConvex"), r1083(() => {
                    j151(s1083.prototype, "_data", () => null);
                }, "serializable", "_data"), r1083(() => {
                    j151(s1083.prototype, "_lightProbeSphereVolume", () => 1);
                }, "serializable", "_lightProbeSphereVolume"), r1083(() => {
                    e151("cc.LightProbeInfo")(s1083);
                }, "ccclass", null);
            }({
                LightProbeInfo: q178,
                CCFloat: z145,
                CCInteger: y145
            }), function (o1082, p1082 = r163) {
                const { SkinInfo: q1082, CCFloat: r1082 } = {
                    ...o1082
                }, s1082 = Object.getOwnPropertyDescriptor(q1082.prototype, "enabled"), t1082 = Object.getOwnPropertyDescriptor(q1082.prototype, "blurRadius"), u1082 = Object.getOwnPropertyDescriptor(q1082.prototype, "sssIntensity");
                p1082(() => {
                    w151()(q1082.prototype, "enabled", s1082);
                }, "tooltip", "enabled"), p1082(() => {
                    u151(q1082.prototype);
                }, "readOnly", "enabled"), p1082(() => {
                    s151(q1082.prototype);
                }, "editable", "enabled"), p1082(() => {
                    w151()(q1082.prototype, "blurRadius", t1082);
                }, "tooltip", "blurRadius"), p1082(() => {
                    a131(r1082)(q1082.prototype, "blurRadius", t1082);
                }, "type", "blurRadius"), p1082(() => {
                    a152(q1082.prototype);
                }, "slide", "blurRadius"), p1082(() => {
                    x151()(q1082.prototype, "blurRadius", t1082);
                }, "range", "blurRadius"), p1082(() => {
                    s151(q1082.prototype);
                }, "editable", "blurRadius"), p1082(() => {
                    t151()(q1082.prototype, "blurRadius", t1082);
                }, "visible", "blurRadius"), p1082(() => {
                    w151()(q1082.prototype, "sssIntensity", u1082);
                }, "tooltip", "sssIntensity"), p1082(() => {
                    a131(r1082)(q1082.prototype, "sssIntensity", u1082);
                }, "type", "sssIntensity"), p1082(() => {
                    a152(q1082.prototype);
                }, "slide", "sssIntensity"), p1082(() => {
                    x151()(q1082.prototype, "sssIntensity", u1082);
                }, "range", "sssIntensity"), p1082(() => {
                    s151(q1082.prototype);
                }, "editable", "sssIntensity"), p1082(() => {
                    j151(q1082.prototype, "_enabled", () => !0);
                }, "serializable", "_enabled"), p1082(() => {
                    j151(q1082.prototype, "_blurRadius", () => .01);
                }, "serializable", "_blurRadius"), p1082(() => {
                    j151(q1082.prototype, "_sssIntensity", () => 3);
                }, "serializable", "_sssIntensity"), p1082(() => {
                    e151("cc.SkinInfo")(q1082);
                }, "ccclass", null);
            }({
                SkinInfo: s178,
                CCFloat: z145
            }), function (d1082, e1082 = r163) {
                const { PostSettingsInfo: f1082, ToneMappingType: g1082 } = {
                    ...d1082
                }, h1082 = Object.getOwnPropertyDescriptor(f1082.prototype, "toneMappingType");
                e1082(() => {
                    w151()(f1082.prototype, "toneMappingType", h1082);
                }, "tooltip", "toneMappingType"), e1082(() => {
                    a131(g1082)(f1082.prototype, "toneMappingType", h1082);
                }, "type", "toneMappingType"), e1082(() => {
                    s151(f1082.prototype);
                }, "editable", "toneMappingType"), e1082(() => {
                    j151(f1082.prototype, "_toneMappingType", () => g1082.DEFAULT);
                }, "serializable", "_toneMappingType"), e1082(() => {
                    e151("cc.PostSettingsInfo")(f1082);
                }, "ccclass", null);
            }({
                PostSettingsInfo: t178,
                ToneMappingType: s177
            }), k144(h175.prototype, "Node", [{
                    name: "childrenCount",
                    newName: "children.length",
                    customGetter() {
                        return this.children.length;
                    }
                }]), k144(h175.prototype, "Node", [{
                    name: "width",
                    targetName: "node.getComponent(UITransform)",
                    customGetter() {
                        return this._uiProps.uiTransformComp.width;
                    },
                    customSetter(c1082) {
                        this._uiProps.uiTransformComp.width = c1082;
                    }
                }, {
                    name: "height",
                    targetName: "node.getComponent(UITransform)",
                    customGetter() {
                        return this._uiProps.uiTransformComp.height;
                    },
                    customSetter(b1082) {
                        this._uiProps.uiTransformComp.height = b1082;
                    }
                }, {
                    name: "anchorX",
                    targetName: "node.getComponent(UITransform)",
                    customGetter() {
                        return this._uiProps.uiTransformComp.anchorX;
                    },
                    customSetter(a1082) {
                        this._uiProps.uiTransformComp.anchorX = a1082;
                    }
                }, {
                    name: "anchorY",
                    targetName: "node.getComponent(UITransform)",
                    customGetter() {
                        return this._uiProps.uiTransformComp.anchorY;
                    },
                    customSetter(z1081) {
                        this._uiProps.uiTransformComp.anchorY = z1081;
                    }
                }, {
                    name: "getAnchorPoint",
                    targetName: "node.getComponent(UITransform)",
                    customFunction(y1081) {
                        return y1081 || (y1081 = new s147()), y1081.set(this._uiProps.uiTransformComp.anchorPoint), y1081;
                    }
                }, {
                    name: "setAnchorPoint",
                    targetName: "node.getComponent(UITransform)",
                    customFunction(w1081, x1081) {
                        this._uiProps.uiTransformComp.setAnchorPoint(w1081, x1081);
                    }
                }, {
                    name: "getContentSize",
                    targetName: "node.getComponent(UITransform)",
                    customFunction(v1081) {
                        return v1081 || (v1081 = new x147()), v1081.set(this._uiProps.uiTransformComp.contentSize), v1081;
                    }
                }, {
                    name: "setContentSize",
                    targetName: "node.getComponent(UITransform)",
                    customFunction(t1081, u1081) {
                        "number" == typeof t1081 ? this._uiProps.uiTransformComp.setContentSize(t1081, u1081) : this._uiProps.uiTransformComp.setContentSize(t1081);
                    }
                }]), l144(r178.prototype, "SceneGlobals.prototype", [{
                    name: "aspect"
                }, {
                    name: "selfShadow"
                }, {
                    name: "linear"
                }, {
                    name: "packing"
                }, {
                    name: "autoAdapt"
                }, {
                    name: "fixedArea"
                }, {
                    name: "pcf"
                }, {
                    name: "bias"
                }, {
                    name: "normalBias"
                }, {
                    name: "near"
                }, {
                    name: "far"
                }, {
                    name: "shadowDistance"
                }, {
                    name: "invisibleOcclusionRange"
                }, {
                    name: "orthoSize"
                }, {
                    name: "saturation"
                }]), k144(r178.prototype, "SceneGlobals.prototype", [{
                    name: "distance",
                    newName: "planeHeight"
                }, {
                    name: "normal",
                    newName: "planeDirection"
                }, {
                    name: "size",
                    newName: "shadowMapSize"
                }]), l144(h175.prototype, "Node.prototype", [{
                    name: "addLayer"
                }, {
                    name: "removeLayer"
                }]), k144(c175.prototype, "NodeUIProperties", [{
                    name: "opacityDirty",
                    newName: "colorDirty"
                }]), l144(w168, "Layers", [{
                    name: "All"
                }, {
                    name: "RaycastMask"
                }, {
                    name: "check"
                }]), k144(w168, "Layers", [{
                    name: "Default",
                    newName: "DEFAULT",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "Always",
                    newName: "ALWAYS",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "IgnoreRaycast",
                    newName: "IGNORE_RAYCAST",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "Gizmos",
                    newName: "GIZMOS",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "Editor",
                    newName: "EDITOR",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "UI",
                    newName: "UI_3D",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "UI2D",
                    newName: "UI_2D",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "SceneGizmo",
                    newName: "SCENE_GIZMO",
                    target: w168.Enum,
                    targetName: "Layers.Enum"
                }, {
                    name: "makeInclusiveMask",
                    newName: "makeMaskInclude",
                    target: w168,
                    targetName: "Layers"
                }, {
                    name: "makeExclusiveMask",
                    newName: "makeMaskExclude",
                    target: w168,
                    targetName: "Layers"
                }]), l144(w168.Enum, "Layers.Enum", [{
                    name: "ALWAYS"
                }]), l144(w168.BitMask, "Layers.BitMask", [{
                    name: "ALWAYS"
                }]);
            const v178 = m152.Flags.HideInHierarchy, w178 = m152.Flags.DontSave;
            let x178 = g125("PrivateNode", e151("cc.PrivateNode")(u178 = class extends h175 {
                constructor(s1081) {
                    super(s1081), y125(12003, this.name), this.hideFlags |= w178 | v178;
                }
            }) || u178);
            var y178, z178, a179, b179, c179, d179, e179, f179, g179, h179, i179, j179, k179, l179, m179, n179, o179, p179, q179, r179, s179, t179, u179, v179, w179, x179, y179, z179, a180, b180, c180, d180, e180, f180, g180, h180, i180, j180, k180, l180, m180, n180, o180, p180, q180, r180, s180, t180, u180, v180, w180, x180, y180, z180, a181, b181, c181, d181, e181, f181, g181, h181, i181, j181, k181, l181, m181, n181, o181;
            k144(q166, "SystemEventType", ["MOUSE_ENTER", "MOUSE_LEAVE", "TRANSFORM_CHANGED", "SCENE_CHANGED_FOR_PERSISTS", "SIZE_CHANGED", "ANCHOR_CHANGED", "COLOR_CHANGED", "CHILD_ADDED", "CHILD_REMOVED", "PARENT_CHANGED", "NODE_DESTROYED", "LAYER_CHANGED", "SIBLING_ORDER_CHANGED"].map(r1081 => ({
                name: r1081,
                target: h175.EventType,
                targetName: "Node.EventType"
            }))), k144(h175.EventType, "Node.EventType", [{
                    name: "DEVICEMOTION",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }, {
                    name: "KEY_DOWN",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }, {
                    name: "KEY_UP",
                    target: t168.EventType,
                    targetName: "SystemEvent.EventType"
                }]), s143.PrivateNode = x178, e126({
                BaseNode: {
                    newName: "Node",
                    since: "3.7.0",
                    removed: !1
                }
            });
            let p181 = (y178 = e151("cc.TargetInfo"), z178 = a131([b146]), y178((b179 = class {
                constructor() {
                    this.localID = c179 && c179();
                }
            }, c179 = p130(b179.prototype, "localID", [j151, z178], function () {
                return [];
            }), a179 = b179)) || a179), q181 = (d179 = e151("cc.TargetOverrideInfo"), e179 = a131(m152), f179 = a131(p181), g179 = a131([b146]), h179 = a131(h175), i179 = a131(p181), d179((k179 = class {
                constructor() {
                    this.source = l179 && l179(), this.sourceInfo = m179 && m179(), this.propertyPath = n179 && n179(), this.target = o179 && o179(), this.targetInfo = p179 && p179();
                }
            }, l179 = p130(k179.prototype, "source", [j151, e179], function () {
                return null;
            }), m179 = p130(k179.prototype, "sourceInfo", [j151, f179], function () {
                return null;
            }), n179 = p130(k179.prototype, "propertyPath", [j151, g179], function () {
                return [];
            }), o179 = p130(k179.prototype, "target", [j151, h179], function () {
                return null;
            }), p179 = p130(k179.prototype, "targetInfo", [j151, i179], function () {
                return null;
            }), j179 = k179)) || j179), r181 = e151("cc.CompPrefabInfo")((r179 = class {
                constructor() {
                    this.fileId = s179 && s179();
                }
            }, s179 = p130(r179.prototype, "fileId", [j151], function () {
                return "";
            }), q179 = r179)) || q179, s181 = (t179 = e151("CCPropertyOverrideInfo"), u179 = a131(p181), v179 = a131([b146]), t179((x179 = class {
                constructor() {
                    this.targetInfo = y179 && y179(), this.propertyPath = z179 && z179(), this.value = a180 && a180();
                }
                isTarget(p1081, q1081) { }
            }, y179 = p130(x179.prototype, "targetInfo", [j151, u179], function () {
                return null;
            }), z179 = p130(x179.prototype, "propertyPath", [j151, v179], function () {
                return [];
            }), a180 = p130(x179.prototype, "value", [j151], null), w179 = x179)) || w179), t181 = (b180 = e151("cc.MountedChildrenInfo"), c180 = a131(p181), d180 = a131([h175]), b180((f180 = class {
                constructor() {
                    this.targetInfo = g180 && g180(), this.nodes = h180 && h180();
                }
                isTarget(o1081) { }
            }, g180 = p130(f180.prototype, "targetInfo", [j151, c180], function () {
                return null;
            }), h180 = p130(f180.prototype, "nodes", [j151, d180], function () {
                return [];
            }), e180 = f180)) || e180), u181 = (i180 = e151("cc.MountedComponentsInfo"), j180 = a131(p181), k180 = a131([a165]), i180((m180 = class {
                constructor() {
                    this.targetInfo = n180 && n180(), this.components = o180 && o180();
                }
                isTarget(n1081) { }
            }, n180 = p130(m180.prototype, "targetInfo", [j151, j180], function () {
                return null;
            }), o180 = p130(m180.prototype, "components", [j151, k180], function () {
                return [];
            }), l180 = m180)) || l180), v181 = (p180 = e151("cc.PrefabInstance"), q180 = a131(h175), r180 = a131([t181]), s180 = a131([u181]), t180 = a131([s181]), u180 = a131([p181]), p180((w180 = class {
                constructor() {
                    this.fileId = x180 && x180(), this.prefabRootNode = y180 && y180(), this.mountedChildren = z180 && z180(), this.mountedComponents = a181 && a181(), this.propertyOverrides = b181 && b181(), this.removedComponents = c181 && c181(), this.targetMap = {}, this.expanded = !1;
                }
                findPropertyOverride(l1081, m1081) { }
                removePropertyOverride(j1081, k1081) { }
            }, x180 = p130(w180.prototype, "fileId", [j151], function () {
                return "";
            }), y180 = p130(w180.prototype, "prefabRootNode", [j151, q180], null), z180 = p130(w180.prototype, "mountedChildren", [j151, r180], function () {
                return [];
            }), a181 = p130(w180.prototype, "mountedComponents", [j151, s180], function () {
                return [];
            }), b181 = p130(w180.prototype, "propertyOverrides", [j151, t180], function () {
                return [];
            }), c181 = p130(w180.prototype, "removedComponents", [j151, u180], function () {
                return [];
            }), v180 = w180)) || v180), w181 = (d181 = e151("cc.PrefabInfo"), e181 = a131(h175), f181 = a131(v181), g181 = a131([q181]), d181((i181 = class {
                constructor() {
                    this.root = j181 && j181(), this.asset = k181 && k181(), this.fileId = l181 && l181(), this.instance = m181 && m181(), this.targetOverrides = n181 && n181(), this.nestedPrefabInstanceRoots = o181 && o181();
                }
            }, j181 = p130(i181.prototype, "root", [j151, e181], null), k181 = p130(i181.prototype, "asset", [j151], null), l181 = p130(i181.prototype, "fileId", [j151], function () {
                return "";
            }), m181 = p130(i181.prototype, "instance", [j151, f181], null), n181 = p130(i181.prototype, "targetOverrides", [j151, g181], null), o181 = p130(i181.prototype, "nestedPrefabInstanceRoots", [j151], null), h181 = i181)) || h181);
            function n135(d1081) {
                const e1081 = null == d1081 ? void 0 : d1081.prefab;
                if (!e1081)
                    return;
                if (!e1081.instance)
                    return;
                if (!e1081.asset)
                    return z125(3701, d1081.name), void (e1081.instance = void 0);
                const f1081 = d1081._objFlags, g1081 = d1081.getParent(), h1081 = d1081.uuid;
                d1081[i152], s143.game._isCloning = !0;
                {
                    const i1081 = e1081.asset.data;
                    i1081._iN$t = d1081, s143.instantiate._clone(i1081, i1081);
                }
                s143.game._isCloning = !1, d1081._objFlags = f1081, d1081.modifyParent(g1081), d1081.id = h1081, d1081.prefab && (d1081.prefab.instance = e1081.instance);
            }
            function o135(s1080, t1080, u1080) {
                var v1080;
                if (!t1080)
                    return;
                if (!s1080)
                    return;
                let w1080 = t1080;
                const x1080 = null === (v1080 = s1080.prefab) || void 0 === v1080 ? void 0 : v1080.instance;
                !u1080 && x1080 && (t1080[x1080.fileId] = {}, w1080 = t1080[x1080.fileId]);
                const y1080 = s1080.prefab;
                y1080 && (w1080[y1080.fileId] = s1080);
                const z1080 = s1080.components;
                for (let b1081 = 0; b1081 < z1080.length; b1081++) {
                    const c1081 = z1080[b1081];
                    c1081.__prefab && (w1080[c1081.__prefab.fileId] = c1081);
                }
                for (let a1081 = 0; a1081 < s1080.children.length; a1081++)
                    o135(s1080.children[a1081], w1080, !1);
            }
            function p135(n1080, o1080) {
                if (!n1080)
                    return null;
                let p1080 = null, q1080 = o1080;
                for (let r1080 = 0; r1080 < n1080.length; r1080++) {
                    if (!q1080)
                        return null;
                    q1080 = q1080[n1080[r1080]];
                }
                return p1080 = q1080, p1080;
            }
            function q135(c1080, d1080, e1080) {
                if (d1080)
                    for (let f1080 = 0; f1080 < d1080.length; f1080++) {
                        const g1080 = d1080[f1080];
                        if (g1080 && g1080.targetInfo) {
                            const h1080 = p135(g1080.targetInfo.localID, e1080);
                            if (!h1080)
                                continue;
                            let i1080 = e1080;
                            const j1080 = g1080.targetInfo.localID;
                            if (j1080.length > 0)
                                for (let m1080 = 0; m1080 < j1080.length - 1; m1080++)
                                    i1080 = i1080[j1080[m1080]];
                            if (g1080.nodes)
                                for (let k1080 = 0; k1080 < g1080.nodes.length; k1080++) {
                                    const l1080 = g1080.nodes[k1080];
                                    l1080 && !h1080.children.includes(l1080) && (h1080.children.push(l1080), l1080.modifyParent(h1080), o135(l1080, i1080, !1), l1080.siblingIndex = h1080.children.length - 1, v135(l1080, !0));
                                }
                        }
                    }
            }
            function r135(u1079, v1079, w1079) {
                if (v1079)
                    for (let x1079 = 0; x1079 < v1079.length; x1079++) {
                        const y1079 = v1079[x1079];
                        if (y1079 && y1079.targetInfo) {
                            const z1079 = p135(y1079.targetInfo.localID, w1079);
                            if (!z1079)
                                continue;
                            if (y1079.components)
                                for (let a1080 = 0; a1080 < y1079.components.length; a1080++) {
                                    const b1080 = y1079.components[a1080];
                                    b1080 && (b1080.node = z1079, z1079.getWritableComponents().push(b1080));
                                }
                        }
                    }
            }
            function s135(n1079, o1079, p1079) {
                if (o1079)
                    for (let q1079 = 0; q1079 < o1079.length; q1079++) {
                        const r1079 = o1079[q1079];
                        if (r1079) {
                            const s1079 = p135(r1079.localID, p1079);
                            if (!s1079 || !s1079.node)
                                continue;
                            const t1079 = s1079.node.components.indexOf(s1079);
                            t1079 >= 0 && s1079.node.getWritableComponents().splice(t1079, 1);
                        }
                    }
            }
            function t135(c1079, d1079, e1079) {
                if (d1079.length <= 0)
                    return;
                let f1079 = null;
                for (let g1079 = 0; g1079 < d1079.length; g1079++) {
                    const h1079 = d1079[g1079];
                    if (h1079 && h1079.targetInfo) {
                        if (f1079 = p135(h1079.targetInfo.localID, e1079), !f1079)
                            continue;
                        let i1079 = f1079;
                        const j1079 = h1079.propertyPath.slice();
                        if (j1079.length > 0) {
                            const k1079 = j1079.pop();
                            if (!k1079)
                                continue;
                            for (let m1079 = 0; m1079 < j1079.length && (i1079 = i1079[j1079[m1079]], i1079); m1079++)
                                ;
                            if (!i1079)
                                continue;
                            if (Array.isArray(i1079)) {
                                if ("length" === k1079)
                                    i1079[k1079] = h1079.value;
                                else {
                                    const l1079 = Number.parseInt(k1079);
                                    Number.isInteger(l1079) && l1079 < i1079.length && (i1079[k1079] = h1079.value);
                                }
                            }
                            else
                                i1079[k1079] instanceof p145 ? i1079[k1079].set(h1079.value) : i1079[k1079] = h1079.value;
                        }
                    }
                }
            }
            function u135(j1078) {
                var k1078;
                const l1078 = null === (k1078 = j1078.prefab) || void 0 === k1078 ? void 0 : k1078.targetOverrides;
                if (l1078)
                    for (let o1078 = 0; o1078 < l1078.length; o1078++) {
                        var m1078;
                        const p1078 = l1078[o1078];
                        let q1078 = p1078.source;
                        const r1078 = p1078.sourceInfo;
                        if (r1078) {
                            var n1078;
                            const a1079 = p1078.source, b1079 = null == a1079 || null === (n1078 = a1079.prefab) || void 0 === n1078 ? void 0 : n1078.instance;
                            b1079 && b1079.targetMap && (q1078 = p135(r1078.localID, b1079.targetMap));
                        }
                        if (!q1078)
                            continue;
                        let s1078 = null;
                        const t1078 = p1078.targetInfo;
                        if (!t1078)
                            continue;
                        const u1078 = p1078.target, v1078 = null == u1078 || null === (m1078 = u1078.prefab) || void 0 === m1078 ? void 0 : m1078.instance;
                        if (!v1078 || !v1078.targetMap)
                            continue;
                        if (s1078 = p135(t1078.localID, v1078.targetMap), !s1078)
                            continue;
                        const w1078 = p1078.propertyPath.slice();
                        let x1078 = q1078;
                        if (w1078.length > 0) {
                            const y1078 = w1078.pop();
                            if (!y1078)
                                return;
                            for (let z1078 = 0; z1078 < w1078.length && (x1078 = x1078[w1078[z1078]], x1078); z1078++)
                                ;
                            if (!x1078)
                                continue;
                            x1078[y1078] = s1078;
                        }
                    }
            }
            function v135(a1078, b1078 = !1) {
                var c1078;
                const d1078 = null == a1078 || null === (c1078 = a1078.prefab) || void 0 === c1078 ? void 0 : c1078.instance;
                if (d1078 && !d1078.expanded) {
                    n135(a1078), b1078 && a1078 && a1078.children && a1078.children.forEach(i1078 => {
                        v135(i1078, !0);
                    });
                    const g1078 = {};
                    d1078.targetMap = g1078, o135(a1078, g1078, !0), q135(0, d1078.mountedChildren, g1078), s135(0, d1078.removedComponents, g1078), r135(0, d1078.mountedComponents, g1078), t135(0, d1078.propertyOverrides, g1078), d1078.expanded = !0;
                }
                else
                    b1078 && a1078 && a1078.children && a1078.children.forEach(f1078 => {
                        v135(f1078, !0);
                    });
            }
            function w135(w1077) {
                const x1077 = w1077.prefab;
                x1077 && x1077.nestedPrefabInstanceRoots && x1077.nestedPrefabInstanceRoots.forEach(z1077 => {
                    v135(z1077);
                });
            }
            s143._PrefabInfo = w181;
            var x181 = Object.freeze({
                __proto__: null,
                createNodeWithPrefab: n135,
                generateTargetMap: o135,
                getTarget: p135,
                applyMountedChildren: q135,
                applyMountedComponents: r135,
                applyRemovedComponents: s135,
                applyPropertyOverrides: t135,
                applyTargetOverrides: u135,
                expandPrefabInstanceNode: v135,
                expandNestedPrefabInstanceNode: w135,
                applyNodeAndComponentId: function t(j1077, k1077) {
                    const { components: l1077, children: m1077 } = j1077;
                    for (let t1077 = 0; t1077 < l1077.length; t1077++) {
                        var n1077, o1077;
                        const u1077 = l1077[t1077], v1077 = null !== (n1077 = null === (o1077 = u1077.__prefab) || void 0 === o1077 ? void 0 : o1077.fileId) && void 0 !== n1077 ? n1077 : "";
                        u1077._id = `${k1077}${v1077}`;
                    }
                    for (let p1077 = 0; p1077 < m1077.length; p1077++) {
                        const q1077 = m1077[p1077], r1077 = q1077.prefab, s1077 = null != r1077 && r1077.instance ? r1077.instance.fileId : null == r1077 ? void 0 : r1077.fileId;
                        s1077 && (q1077.id = `${k1077}${s1077}`, null != r1077 && r1077.instance || t(q1077, k1077));
                    }
                },
                TargetInfo: p181,
                TargetOverrideInfo: q181,
                CompPrefabInfo: r181,
                PropertyOverrideInfo: s181,
                MountedChildrenInfo: t181,
                MountedComponentsInfo: u181,
                PrefabInstance: v181,
                PrefabInfo: w181
            });
            const y181 = g125("Scene", jsb.Scene);
            s143.Scene = y181;
            const z181 = y181.prototype;
            Object.defineProperty(z181, "_globals", {
                enumerable: !0,
                configurable: !0,
                get() {
                    return this.getSceneGlobals();
                },
                set(i1077) {
                    this._globalRef = i1077, this.setSceneGlobals(i1077);
                }
            }), Object.defineProperty(z181, "globals", {
                enumerable: !0,
                configurable: !0,
                get() {
                    return this.getSceneGlobals();
                }
            }), Object.defineProperty(z181, "_renderScene", {
                enumerable: !0,
                configurable: !0,
                get() {
                    return this._renderSceneInternal || (this._renderSceneInternal = this.getRenderScene()), this._renderSceneInternal;
                }
            }), Object.defineProperty(z181, "renderScene", {
                enumerable: !0,
                configurable: !0,
                get() {
                    return this._renderSceneInternal || (this._renderSceneInternal = this.getRenderScene()), this._renderSceneInternal;
                }
            }), z181._ctor = function () {
                h175.prototype._ctor.apply(this, arguments), this._inited = !1, this._renderSceneInternal = null, this._globalRef = null, this._prefabSyncedInLiveReload = !1;
            }, z181._onBatchCreated = function (d1077) {
                this._parent && (this._siblingIndex = this._parent.children.indexOf(this));
                const e1077 = this._children, f1077 = e1077.length;
                let g1077;
                for (let h1077 = 0; h1077 < f1077; ++h1077)
                    g1077 = e1077[h1077], g1077._siblingIndex = h1077, g1077._onBatchCreated(d1077);
            };
            const a182 = z181._load;
            function x135(a1077, b1077) {
                if (!b1077) {
                    const c1077 = s143.director.getScene();
                    if (!c1077)
                        return null;
                    b1077 = c1077;
                }
                return b1077.getChildByPath(a1077);
            }
            z181._load = function () {
                this._scene = this, this._inited || (w135(this), u135(this), this._onBatchCreated(false), this._inited = !0), w133(this), a182.call(this);
            }, z181._activate = function (z1076) {
                z1076 = !1 !== z1076, s143.director._nodeActivator.activateNode(this, z1076), this._globals.activate(this), this._renderScene && this._renderScene.activate();
            }, z181._instantiate = function () { }, function (o1076, p1076 = r163) {
                const { Scene: q1076, SceneGlobals: r1076 } = {
                    ...o1076
                };
                Object.getOwnPropertyDescriptor(q1076.prototype, "globals"), p1076(() => {
                    s151(q1076.prototype);
                }, "editable", "globals"), p1076(() => {
                    s151(q1076.prototype);
                }, "editable", "autoReleaseAssets"), p1076(() => {
                    j151(q1076.prototype, "autoReleaseAssets", () => !1);
                }, "serializable", "autoReleaseAssets"), p1076(() => {
                    j151(q1076.prototype, "_globals", () => new r1076());
                }, "serializable", "_globals"), p1076(() => {
                    e151("cc.Scene")(q1076);
                }, "ccclass", null);
            }({
                Scene: y181,
                SceneGlobals: r178
            }), s143.find = x135;
            const b182 = i127, c182 = m152.Flags.IsStartCalled, d182 = m152.Flags.IsOnEnableCalled;
            function y135(e1076, f1076) {
                const g1076 = f1076.constructor._executionOrder, h1076 = f1076._id;
                let i1076 = 0;
                for (let j1076 = e1076.length - 1, k1076 = j1076 >>> 1; i1076 <= j1076; k1076 = i1076 + j1076 >>> 1) {
                    const l1076 = e1076[k1076], m1076 = l1076.constructor._executionOrder;
                    if (m1076 > g1076)
                        j1076 = k1076 - 1;
                    else if (m1076 < g1076)
                        i1076 = k1076 + 1;
                    else {
                        const n1076 = l1076._id;
                        if (n1076 > h1076)
                            j1076 = k1076 - 1;
                        else {
                            if (!(n1076 < h1076))
                                return k1076;
                            i1076 = k1076 + 1;
                        }
                    }
                }
                return ~i1076;
            }
            function z135(z1075, a1076) {
                const b1076 = z1075.array;
                let c1076 = z1075.i + 1;
                for (; c1076 < b1076.length;) {
                    const d1076 = b1076[c1076];
                    d1076.node._activeInHierarchy ? ++c1076 : (z1075.removeAt(c1076), a1076 && (d1076._objFlags &= ~a1076));
                }
            }
            m152.Flags.IsEditorOnEnableCalled;
            class e182 {
                get zero() {
                    return this._zero;
                }
                get neg() {
                    return this._neg;
                }
                get pos() {
                    return this._pos;
                }
                constructor(x1075) {
                    this._zero = void 0, this._neg = void 0, this._pos = void 0, this._invoke = void 0;
                    const y1075 = k145;
                    this._zero = new y1075([]), this._neg = new y1075([]), this._pos = new y1075([]), this._invoke = x1075;
                }
            }
            function a136(v1075, w1075) {
                return v1075.constructor._executionOrder - w1075.constructor._executionOrder;
            }
            e182.stableRemoveInactive = z135;
            class f182 extends e182 {
                add(t1075) {
                    const u1075 = t1075.constructor._executionOrder;
                    (0 === u1075 ? this._zero : u1075 < 0 ? this._neg : this._pos).array.push(t1075);
                }
                remove(r1075) {
                    const s1075 = r1075.constructor._executionOrder;
                    (0 === s1075 ? this._zero : s1075 < 0 ? this._neg : this._pos).fastRemove(r1075);
                }
                cancelInactive(q1075) {
                    z135(this._zero, q1075), z135(this._neg, q1075), z135(this._pos, q1075);
                }
                invoke() {
                    const o1075 = this._neg;
                    o1075.array.length > 0 && (o1075.array.sort(a136), this._invoke(o1075), o1075.array.length = 0), this._invoke(this._zero), this._zero.array.length = 0;
                    const p1075 = this._pos;
                    p1075.array.length > 0 && (p1075.array.sort(a136), this._invoke(p1075), p1075.array.length = 0);
                }
            }
            class g182 extends e182 {
                add(k1075) {
                    const l1075 = k1075.constructor._executionOrder;
                    if (0 === l1075)
                        this._zero.array.push(k1075);
                    else {
                        const m1075 = l1075 < 0 ? this._neg.array : this._pos.array, n1075 = y135(m1075, k1075);
                        n1075 < 0 && m1075.splice(~n1075, 0, k1075);
                    }
                }
                remove(g1075) {
                    const h1075 = g1075.constructor._executionOrder;
                    if (0 === h1075)
                        this._zero.fastRemove(g1075);
                    else {
                        const i1075 = h1075 < 0 ? this._neg : this._pos, j1075 = y135(i1075.array, g1075);
                        j1075 >= 0 && i1075.removeAt(j1075);
                    }
                }
                invoke(f1075) {
                    this._neg.array.length > 0 && this._invoke(this._neg, f1075), this._invoke(this._zero, f1075), this._pos.array.length > 0 && this._invoke(this._pos, f1075);
                }
            }
            function b136(w1074, x1074, y1074) {
                return (a1075, b1075) => {
                    try {
                        x1074(a1075, b1075);
                    }
                    catch (c1075) {
                        s143._throw(c1075);
                        const d1075 = a1075.array;
                        for (y1074 && (d1075[a1075.i]._objFlags |= y1074), ++a1075.i; a1075.i < d1075.length; ++a1075.i)
                            try {
                                w1074(d1075[a1075.i], b1075);
                            }
                            catch (e1075) {
                                s143._throw(e1075), y1074 && (d1075[a1075.i]._objFlags |= y1074);
                            }
                    }
                };
            }
            const h182 = b136(v1074 => {
                v1074.start(), v1074._objFlags |= c182;
            }, s1074 => {
                const t1074 = s1074.array;
                for (s1074.i = 0; s1074.i < t1074.length; ++s1074.i) {
                    const u1074 = t1074[s1074.i];
                    u1074.start(), u1074._objFlags |= c182;
                }
            }, c182), i182 = b136((q1074, r1074) => {
                q1074.update(r1074);
            }, (n1074, o1074) => {
                const p1074 = n1074.array;
                for (n1074.i = 0; n1074.i < p1074.length; ++n1074.i)
                    p1074[n1074.i].update(o1074);
            }), j182 = b136((l1074, m1074) => {
                l1074.lateUpdate(m1074);
            }, (i1074, j1074) => {
                const k1074 = i1074.array;
                for (i1074.i = 0; i1074.i < k1074.length; ++i1074.i)
                    k1074[i1074.i].lateUpdate(j1074);
            }), k182 = e1074 => {
                const f1074 = s143.director._compScheduler, g1074 = e1074.array;
                for (e1074.i = 0; e1074.i < g1074.length; ++e1074.i) {
                    const h1074 = g1074[e1074.i];
                    h1074._enabled && (h1074.onEnable(), !h1074.node._activeInHierarchy || f1074._onEnabled(h1074));
                }
            };
            class l182 {
                constructor() {
                    this.startInvoker = void 0, this.updateInvoker = void 0, this.lateUpdateInvoker = void 0, this._deferredComps = [], this._updating = void 0, this.unscheduleAll();
                }
                unscheduleAll() {
                    this.startInvoker = new f182(h182), this.updateInvoker = new g182(i182), this.lateUpdateInvoker = new g182(j182), this._updating = !1;
                }
                _onEnabled(d1074) {
                    s143.director.getScheduler().resumeTarget(d1074), d1074._objFlags |= d182, this._updating ? this._deferredComps.push(d1074) : this._scheduleImmediate(d1074);
                }
                _onDisabled(b1074) {
                    s143.director.getScheduler().pauseTarget(b1074), b1074._objFlags &= ~d182;
                    const c1074 = this._deferredComps.indexOf(b1074);
                    c1074 >= 0 ? b182(this._deferredComps, c1074) : (!b1074.internalStart || b1074._objFlags & c182 || this.startInvoker.remove(b1074), b1074.internalUpdate && this.updateInvoker.remove(b1074), b1074.internalLateUpdate && this.lateUpdateInvoker.remove(b1074));
                }
                enableComp(z1073, a1074) {
                    if (!(z1073._objFlags & d182)) {
                        if (z1073.internalOnEnable) {
                            if (a1074)
                                return void a1074.add(z1073);
                            if (z1073.internalOnEnable(), !z1073.node.activeInHierarchy)
                                return;
                        }
                        this._onEnabled(z1073);
                    }
                }
                disableComp(y1073) {
                    y1073._objFlags & d182 && (y1073.internalOnDisable && y1073.internalOnDisable(), this._onDisabled(y1073));
                }
                startPhase() {
                    this._updating = !0, this.startInvoker.invoke(), this._startForNewComps();
                }
                updatePhase(x1073) {
                    this.updateInvoker.invoke(x1073);
                }
                lateUpdatePhase(w1073) {
                    this.lateUpdateInvoker.invoke(w1073), this._updating = !1, this._startForNewComps();
                }
                _startForNewComps() {
                    this._deferredComps.length > 0 && (this._deferredSchedule(), this.startInvoker.invoke());
                }
                _scheduleImmediate(v1073) {
                    "function" != typeof v1073.internalStart || v1073._objFlags & c182 || this.startInvoker.add(v1073), "function" == typeof v1073.internalUpdate && this.updateInvoker.add(v1073), "function" == typeof v1073.internalLateUpdate && this.lateUpdateInvoker.add(v1073);
                }
                _deferredSchedule() {
                    const s1073 = this._deferredComps;
                    for (let t1073 = 0, u1073 = s1073.length; t1073 < u1073; t1073++)
                        this._scheduleImmediate(s1073[t1073]);
                    s1073.length = 0;
                }
            }
            const m182 = m152.Flags.IsPreloadStarted, n182 = m152.Flags.IsOnLoadStarted, o182 = m152.Flags.IsOnLoadCalled, p182 = m152.Flags.IsOnEnableCalled, q182 = m152.Flags.Deactivating;
            class r182 extends e182 {
                add(r1073) {
                    this._zero.array.push(r1073);
                }
                remove(q1073) {
                    this._zero.fastRemove(q1073);
                }
                cancelInactive(p1073) {
                    e182.stableRemoveInactive(this._zero, p1073);
                }
                invoke() {
                    this._invoke(this._zero), this._zero.array.length = 0;
                }
            }
            const s182 = b136(n1073 => {
                var o1073;
                null === (o1073 = n1073.internalPreload) || void 0 === o1073 || o1073.call(n1073);
            }, j1073 => {
                const k1073 = j1073.array;
                for (j1073.i = 0; j1073.i < k1073.length; ++j1073.i) {
                    var l1073, m1073;
                    null === (l1073 = (m1073 = k1073[j1073.i]).internalPreload) || void 0 === l1073 || l1073.call(m1073);
                }
            }), t182 = b136(h1073 => {
                var i1073;
                null === (i1073 = h1073.internalOnLoad) || void 0 === i1073 || i1073.call(h1073), h1073._objFlags |= o182;
            }, d1073 => {
                const e1073 = d1073.array;
                for (d1073.i = 0; d1073.i < e1073.length; ++d1073.i) {
                    var f1073;
                    const g1073 = e1073[d1073.i];
                    null === (f1073 = g1073.internalOnLoad) || void 0 === f1073 || f1073.call(g1073), g1073._objFlags |= o182;
                }
            }, o182), u182 = new j145(4);
            function c136(a1073, b1073, c1073) {
                z125(3817, a1073.name, c1073), console.log("Corrupted component value:", b1073), b1073 ? a1073._removeComponent(b1073) : h127(a1073.getWritableComponents(), c1073);
            }
            u182.get = function () {
                const y1072 = this._get() || {
                    preload: new r182(s182),
                    onLoad: new f182(t182),
                    onEnable: new f182(k182)
                };
                y1072.preload.zero.i = -1;
                let z1072 = y1072.onLoad;
                return z1072.zero.i = -1, z1072.neg.i = -1, z1072.pos.i = -1, z1072 = y1072.onEnable, z1072.zero.i = -1, z1072.neg.i = -1, z1072.pos.i = -1, y1072;
            };
            class v182 {
                constructor() {
                    this._activatingStack = void 0, this.reset();
                }
                reset() {
                    this._activatingStack = [];
                }
                activateNode(t1072, u1072) {
                    if (u1072) {
                        const x1072 = u182.get();
                        x1072 && (this._activatingStack.push(x1072), this._activateNodeRecursively(t1072, x1072.preload, x1072.onLoad, x1072.onEnable), x1072.preload.invoke(), x1072.onLoad.invoke(), x1072.onEnable.invoke(), this._activatingStack.pop(), u182.put(x1072));
                    }
                    else {
                        this._deactivateNodeRecursively(t1072);
                        const v1072 = this._activatingStack;
                        for (const w1072 of v1072)
                            w1072.preload.cancelInactive(m182), w1072.onLoad.cancelInactive(n182), w1072.onEnable.cancelInactive(p182);
                    }
                    t1072.emit(z174.ACTIVE_IN_HIERARCHY_CHANGED, t1072);
                }
                activateComp(p1072, q1072, r1072, s1072) {
                    if (c131(p1072, !0) && (p1072._objFlags & m182 || (p1072._objFlags |= m182, p1072.internalPreload && (q1072 ? q1072.add(p1072) : p1072.internalPreload())), p1072._objFlags & n182 || (p1072._objFlags |= n182, p1072.internalOnLoad ? r1072 ? r1072.add(p1072) : (p1072.internalOnLoad(), p1072._objFlags |= o182) : p1072._objFlags |= o182), p1072._enabled)) {
                        if (!p1072.node.activeInHierarchy)
                            return;
                        s143.director._compScheduler.enableComp(p1072, s1072);
                    }
                }
                destroyComp(o1072) {
                    s143.director._compScheduler.disableComp(o1072), o1072.internalOnDestroy && o1072._objFlags & o182 && o1072.internalOnDestroy();
                }
                _activateNodeRecursively(e1072, f1072, g1072, h1072) {
                    if (e1072._objFlags & q182)
                        return void z125(3816, e1072.name);
                    e1072._setActiveInHierarchy(!0);
                    let i1072 = e1072.components.length;
                    for (let m1072 = 0; m1072 < i1072; ++m1072) {
                        const n1072 = e1072.components[m1072];
                        n1072 instanceof s143.Component ? this.activateComp(n1072, f1072, g1072, h1072) : (c136(e1072, n1072, m1072), --m1072, --i1072);
                    }
                    for (let j1072 = 0, k1072 = e1072.children.length; j1072 < k1072; ++j1072) {
                        const l1072 = e1072.children[j1072];
                        l1072.active && this._activateNodeRecursively(l1072, f1072, g1072, h1072);
                    }
                    e1072._onPostActivated(!0);
                }
                _deactivateNodeRecursively(x1071) {
                    x1071._objFlags |= q182, x1071._setActiveInHierarchy(!1);
                    const y1071 = x1071.components.length;
                    for (let c1072 = 0; c1072 < y1071; ++c1072) {
                        const d1072 = x1071.components[c1072];
                        if (d1072._enabled && (s143.director._compScheduler.disableComp(d1072), x1071.activeInHierarchy))
                            return void (x1071._objFlags &= ~q182);
                    }
                    for (let z1071 = 0, a1072 = x1071.children.length; z1071 < a1072; ++z1071) {
                        const b1072 = x1071.children[z1071];
                        if (b1072.activeInHierarchy && (this._deactivateNodeRecursively(b1072), x1071.activeInHierarchy))
                            return void (x1071._objFlags &= ~q182);
                    }
                    x1071._onPostActivated(!1), x1071._objFlags &= ~q182;
                }
            }
            g125("NodeActivator", v182);
            const w182 = m152.Flags.Destroyed, x182 = m152.Flags.PersistentMask, y182 = `${s128.Attr.DELIMETER}default`, z182 = s128.IDENTIFIER_RE, a183 = "var ", b183 = "o", c183 = {
                "cc.ClickEvent": !1,
                "cc.PrefabInfo": !1
            }, d183 = s128.escapeForJS;
            class e183 {
                constructor(v1071, w1071) {
                    this.varName = void 0, this.expression = void 0, this.varName = v1071, this.expression = w1071;
                }
                toString() {
                    return `${a183 + this.varName}=${this.expression};`;
                }
            }
            function d136(t1071, u1071) {
                return u1071 instanceof e183 ? new e183(u1071.varName, t1071 + u1071.expression) : t1071 + u1071;
            }
            function e136(q1071, r1071, s1071) {
                Array.isArray(s1071) ? (s1071[0] = d136(r1071, s1071[0]), q1071.push(s1071)) : q1071.push(`${d136(r1071, s1071)};`);
            }
            class f183 {
                constructor(p1071) {
                    this._exps = void 0, this._targetExp = void 0, this._exps = [], this._targetExp = p1071;
                }
                append(n1071, o1071) {
                    this._exps.push([n1071, o1071]);
                }
                writeCode(j1071) {
                    let k1071;
                    if (this._exps.length > 1)
                        j1071.push(`t=${this._targetExp};`), k1071 = "t";
                    else {
                        if (1 !== this._exps.length)
                            return;
                        k1071 = this._targetExp;
                    }
                    for (let l1071 = 0; l1071 < this._exps.length; l1071++) {
                        const m1071 = this._exps[l1071];
                        e136(j1071, `${k1071 + f136(m1071[0])}=`, m1071[1]);
                    }
                }
            }
            function f136(i1071) {
                return z182.test(i1071) ? `.${i1071}` : `[${d183(i1071)}]`;
            }
            f183.pool = void 0, f183.pool = new j145(h1071 => {
                h1071._exps.length = 0, h1071._targetExp = null;
            }, 1), f183.pool.get = function (f1071) {
                const g1071 = this._get() || new f183();
                return g1071._targetExp = f1071, g1071;
            };
            class g183 {
                constructor(z1070, a1071) {
                    let b1071;
                    this.parent = void 0, this.objsToClear_iN$t = void 0, this.codeArray = void 0, this.objs = void 0, this.funcs = void 0, this.funcModuleCache = void 0, this.globalVariables = void 0, this.globalVariableId = void 0, this.localVariableId = void 0, this.result = void 0, this.parent = a1071, this.objsToClear_iN$t = [], this.codeArray = [], this.objs = [], this.funcs = [], this.funcModuleCache = j126(), t126(this.funcModuleCache, c183), this.globalVariables = [], this.globalVariableId = 0, this.localVariableId = 0, this.codeArray.push("var o,t;", "if(R){", "o=R;", "}else{", `o=R=new ${this.getFuncModule(z1070.constructor, !0)}();`, "}"), z1070._iN$t = {
                        globalVar: "R"
                    }, this.objsToClear_iN$t.push(z1070), this.enumerateObject(this.codeArray, z1070), this.globalVariables.length > 0 && (b1071 = `${a183 + this.globalVariables.join(",")};`);
                    const c1071 = z133(["return (function(R){", b1071 || [], this.codeArray, "return o;", "})"]);
                    this.result = Function("O", "F", c1071)(this.objs, this.funcs);
                    for (let d1071 = 0, e1071 = this.objsToClear_iN$t.length; d1071 < e1071; ++d1071)
                        this.objsToClear_iN$t[d1071]._iN$t = null;
                    this.objsToClear_iN$t.length = 0;
                }
                getFuncModule(r1070, s1070) {
                    const t1070 = k126(r1070);
                    if (t1070) {
                        const w1070 = this.funcModuleCache[t1070];
                        if (w1070)
                            return w1070;
                        if (void 0 === w1070) {
                            let x1070 = -1 !== t1070.indexOf(".");
                            if (x1070)
                                try {
                                    if (x1070 = r1070 === Function(`return ${t1070}`)(), x1070)
                                        return this.funcModuleCache[t1070] = t1070, t1070;
                                }
                                catch (y1070) { }
                        }
                    }
                    let u1070 = this.funcs.indexOf(r1070);
                    u1070 < 0 && (u1070 = this.funcs.length, this.funcs.push(r1070));
                    let v1070 = `F[${u1070}]`;
                    return s1070 && (v1070 = `(${v1070})`), this.funcModuleCache[t1070] = v1070, v1070;
                }
                getObjRef(p1070) {
                    let q1070 = this.objs.indexOf(p1070);
                    return q1070 < 0 && (q1070 = this.objs.length, this.objs.push(p1070)), `O[${q1070}]`;
                }
                setValueType(f1070, g1070, h1070, i1070) {
                    const j1070 = f183.pool.get(i1070);
                    let k1070 = g1070.constructor.__props__;
                    k1070 || (k1070 = Object.keys(g1070));
                    for (let l1070 = 0; l1070 < k1070.length; l1070++) {
                        const m1070 = k1070[l1070], n1070 = h1070[m1070];
                        if (g1070[m1070] === n1070)
                            continue;
                        const o1070 = this.enumerateField(h1070, m1070, n1070);
                        j1070.append(m1070, o1070);
                    }
                    j1070.writeCode(f1070), f183.pool.put(j1070);
                }
                enumerateCCClass(v1069, w1069, x1069) {
                    const y1069 = x1069.__values__, z1069 = s128.Attr.getClassAttrs(x1069);
                    for (let a1070 = 0; a1070 < y1069.length; a1070++) {
                        const b1070 = y1069[a1070], c1070 = w1069[b1070];
                        let d1070 = z1069[b1070 + y182];
                        if (!g136(d1070, c1070))
                            if ("object" == typeof c1070 && c1070 instanceof s143.ValueType && (d1070 = s128.getDefault(d1070), d1070 && d1070.constructor === c1070.constructor)) {
                                const e1070 = b183 + f136(b1070);
                                this.setValueType(v1069, d1070, c1070, e1070);
                            }
                            else
                                this.setObjProp(v1069, w1069, b1070, c1070);
                    }
                }
                instantiateArray(r1069) {
                    if (0 === r1069.length)
                        return "[]";
                    const s1069 = "a" + ++this.localVariableId, t1069 = [new e183(s1069, `new Array(${r1069.length})`)];
                    r1069._iN$t = {
                        globalVar: "",
                        source: t1069
                    }, this.objsToClear_iN$t.push(r1069);
                    for (let u1069 = 0; u1069 < r1069.length; ++u1069)
                        e136(t1069, `${s1069}[${u1069}]=`, this.enumerateField(r1069, u1069, r1069[u1069]));
                    return t1069;
                }
                instantiateTypedArray(m1069) {
                    const n1069 = m1069.constructor.name;
                    if (0 === m1069.length)
                        return `new ${n1069}`;
                    const o1069 = "a" + ++this.localVariableId, p1069 = [new e183(o1069, `new ${n1069}(${m1069.length})`)];
                    m1069._iN$t = {
                        globalVar: "",
                        source: p1069
                    }, this.objsToClear_iN$t.push(m1069);
                    for (let q1069 = 0; q1069 < m1069.length; ++q1069)
                        0 !== m1069[q1069] && e136(p1069, `${o1069}[${q1069}]=`, m1069[q1069]);
                    return p1069;
                }
                enumerateField(g1069, h1069, i1069) {
                    if ("object" == typeof i1069 && i1069) {
                        const j1069 = i1069._iN$t;
                        if (j1069) {
                            let k1069 = j1069.globalVar;
                            if (!k1069) {
                                k1069 = j1069.globalVar = "v" + ++this.globalVariableId, this.globalVariables.push(k1069);
                                const l1069 = j1069.source[0];
                                j1069.source[0] = d136(`${k1069}=`, l1069);
                            }
                            return k1069;
                        }
                        return ArrayBuffer.isView(i1069) ? this.instantiateTypedArray(i1069) : Array.isArray(i1069) ? this.instantiateArray(i1069) : this.instantiateObj(i1069);
                    }
                    return "function" == typeof i1069 ? this.getFuncModule(i1069) : "string" == typeof i1069 ? d183(i1069) : ("_objFlags" === h1069 && b131(g1069) && (i1069 &= x182), i1069);
                }
                setObjProp(c1069, d1069, e1069, f1069) {
                    e136(c1069, `${b183 + f136(e1069)}=`, this.enumerateField(d1069, e1069, f1069));
                }
                enumerateObject(x1068, y1068) {
                    const z1068 = y1068.constructor;
                    if (t128(z1068))
                        this.enumerateCCClass(x1068, y1068, z1068);
                    else
                        for (const a1069 in y1068) {
                            if (!y1068.hasOwnProperty(a1069) || 95 === a1069.charCodeAt(0) && 95 === a1069.charCodeAt(1) && "__type__" !== a1069)
                                continue;
                            const b1069 = y1068[a1069];
                            "object" == typeof b1069 && b1069 && b1069 === y1068._iN$t || this.setObjProp(x1068, y1068, a1069, b1069);
                        }
                }
                instantiateObj(s1068) {
                    if (s1068 instanceof s143.ValueType)
                        return s128.getNewValueTypeCode(s1068);
                    if (s1068 instanceof s143.Asset)
                        return this.getObjRef(s1068);
                    if (s1068._objFlags & w182)
                        return null;
                    let t1068;
                    const u1068 = s1068.constructor;
                    if (t128(u1068)) {
                        if (this.parent)
                            if (this.parent instanceof s143.Component) {
                                if (s1068 instanceof s143.Node || s1068 instanceof s143.Component)
                                    return this.getObjRef(s1068);
                            }
                            else if (this.parent instanceof s143.Node)
                                if (s1068 instanceof s143.Node) {
                                    if (!s1068.isChildOf(this.parent))
                                        return this.getObjRef(s1068);
                                }
                                else if (s1068 instanceof s143.Component) {
                                    var v1068;
                                    if (null === (v1068 = s1068.node) || void 0 === v1068 || !v1068.isChildOf(this.parent))
                                        return this.getObjRef(s1068);
                                }
                        t1068 = new e183(b183, `new ${this.getFuncModule(u1068, !0)}()`);
                    }
                    else if (u1068 === Object)
                        t1068 = new e183(b183, "{}");
                    else {
                        if (u1068)
                            return this.getObjRef(s1068);
                        t1068 = new e183(b183, "Object.create(null)");
                    }
                    const w1068 = [t1068];
                    return s1068._iN$t = {
                        globalVar: "",
                        source: w1068
                    }, this.objsToClear_iN$t.push(s1068), this.enumerateObject(w1068, s1068), ["(function(){", w1068, "return o;})();"];
                }
            }
            function g136(p1068, q1068) {
                if ("function" == typeof p1068)
                    try {
                        p1068 = p1068();
                    }
                    catch (r1068) {
                        return !1;
                    }
                if (p1068 === q1068)
                    return !0;
                if (p1068 && q1068 && "object" == typeof p1068 && "object" == typeof q1068 && p1068.constructor === q1068.constructor)
                    if (p1068 instanceof s143.ValueType) {
                        if (p1068.equals(q1068))
                            return !0;
                    }
                    else {
                        if (Array.isArray(p1068))
                            return 0 === p1068.length && 0 === q1068.length;
                        if (p1068.constructor === Object)
                            return i126(p1068) && i126(q1068);
                    }
                return !1;
            }
            var h183, i183, j183, k183, l183, m183;
            const n183 = p127({
                AUTO: 0,
                SINGLE_INSTANCE: 1,
                MULTI_INSTANCE: 2
            });
            let o183 = g125("Prefab", e151("cc.Prefab")(((m183 = class extends t163 {
                constructor() {
                    super(), this.data = j183 && j183(), this.optimizationPolicy = k183 && k183(), this.persistent = l183 && l183(), this._createFunction = void 0, this._instantiatedTimes = void 0, this._createFunction = null, this._instantiatedTimes = 0;
                }
                createNode(n1068) {
                    const o1068 = s143.instantiate(this);
                    o1068.name = this.name, n1068(null, o1068);
                }
                compileCreateFunction() {
                    this._createFunction = function (l1068) {
                        const m1068 = l1068 instanceof s143.Node && l1068;
                        return new g183(l1068, m1068).result;
                    }(this.data);
                }
                _doInstantiate(j1068) {
                    return this.data._prefab || y125(3700), this._createFunction || this.compileCreateFunction(), this._createFunction(j1068);
                }
                _instantiate() {
                    let i1068;
                    return i1068 = this.data._instantiate(), ++this._instantiatedTimes, i1068;
                }
                initDefault(g1068) {
                    super.initDefault(g1068), this.data = new h175(), this.data.name = "(Missing Node)";
                    const h1068 = new s143._PrefabInfo();
                    h1068.asset = this, h1068.root = this.data, this.data._prefab = h1068;
                }
                validate() {
                    return !!this.data;
                }
                onLoaded() {
                    const f1068 = this.data;
                    w135(f1068), u135(f1068), w133(f1068);
                }
            }).OptimizationPolicy = n183, m183.OptimizationPolicyThreshold = 3, j183 = p130((i183 = m183).prototype, "data", [j151], function () {
                return null;
            }), k183 = p130(i183.prototype, "optimizationPolicy", [j151], function () {
                return n183.AUTO;
            }), l183 = p130(i183.prototype, "persistent", [j151], function () {
                return !1;
            }), h183 = i183)) || h183);
            z144(o183, "_utils", x181), s143.Prefab = o183, l126(s143, "cc._Prefab", "Prefab");
            const p183 = new class {
                constructor() {
                    this._allRenderers = [], this._dirtyRenderers = [], this._dirtyVersion = 0;
                }
                addRenderer(e1068) {
                    -1 === e1068._internalId && (e1068._internalId = this._allRenderers.length, this._allRenderers.push(e1068));
                }
                removeRenderer(c1068) {
                    if (-1 !== c1068._internalId) {
                        const d1068 = c1068._internalId;
                        this._allRenderers[this._allRenderers.length - 1]._internalId = d1068, i127(this._allRenderers, d1068), c1068._internalId = -1, c1068._dirtyVersion === this._dirtyVersion && (k127(this._dirtyRenderers, c1068), c1068._dirtyVersion = -1);
                    }
                }
                markDirtyRenderer(b1068) {
                    b1068._dirtyVersion !== this._dirtyVersion && -1 !== b1068._internalId && (this._dirtyRenderers.push(b1068), b1068._dirtyVersion = this._dirtyVersion);
                }
                updateAllDirtyRenderers() {
                    const y1067 = this._dirtyRenderers.length, z1067 = this._dirtyRenderers;
                    for (let a1068 = 0; a1068 < y1067; a1068++)
                        z1067[a1068].updateRenderer();
                    this._dirtyRenderers.length = 0, this._dirtyVersion++;
                }
            }();
            class q183 {
                constructor() {
                    this.name = "", this.base = "", this.importBase = "", this.nativeBase = "", this.deps = null, this.assetInfos = new x162(), this.scenes = new x162(), this.paths = new x162();
                }
                init(j1066) {
                    (p1066 => {
                        let q1066 = p1066.uuids;
                        const r1066 = p1066.paths, s1066 = p1066.types, t1066 = p1066.deps, u1066 = p1066.paths = Object.create(null);
                        if (!1 === p1066.debug) {
                            for (let w1067 = 0, x1067 = q1066.length; w1067 < x1067; w1067++)
                                q1066[w1067] = j134(q1066[w1067]);
                            for (const t1067 in r1066) {
                                const u1067 = r1066[t1067], v1067 = u1067[1];
                                u1067[1] = s1066[v1067];
                            }
                        }
                        else {
                            const p1067 = Object.create(null);
                            for (let q1067 = 0, r1067 = q1066.length; q1067 < r1067; q1067++) {
                                const s1067 = q1066[q1067];
                                q1066[q1067] = p1067[s1067] = j134(s1067);
                            }
                            q1066 = p1067;
                        }
                        for (const n1067 in r1066) {
                            const o1067 = r1066[n1067];
                            u1066[q1066[n1067]] = o1067;
                        }
                        const v1066 = p1066.scenes;
                        for (const l1067 in v1066) {
                            const m1067 = v1066[l1067];
                            v1066[l1067] = q1066[m1067];
                        }
                        const w1066 = p1066.packs;
                        for (const i1067 in w1066) {
                            const j1067 = w1066[i1067];
                            for (let k1067 = 0; k1067 < j1067.length; ++k1067)
                                j1067[k1067] = q1066[j1067[k1067]];
                        }
                        const x1066 = p1066.versions;
                        if (x1066)
                            for (const e1067 in x1066) {
                                const f1067 = x1066[e1067];
                                for (let g1067 = 0; g1067 < f1067.length; g1067 += 2) {
                                    const h1067 = f1067[g1067];
                                    f1067[g1067] = q1066[h1067] || h1067;
                                }
                            }
                        const y1066 = p1066.redirect;
                        if (y1066)
                            for (let d1067 = 0; d1067 < y1066.length; d1067 += 2)
                                y1066[d1067] = q1066[y1066[d1067]], y1066[d1067 + 1] = t1066[y1066[d1067 + 1]];
                        if (p1066.extensionMap)
                            for (const z1066 in p1066.extensionMap)
                                Object.prototype.hasOwnProperty.call(p1066.extensionMap, z1066) && p1066.extensionMap[z1066].forEach((b1067, c1067) => {
                                    p1066.extensionMap[z1066][c1067] = q1066[b1067] || b1067;
                                });
                    })(j1066), this.importBase = j1066.importBase || "", this.nativeBase = j1066.nativeBase || "", this.base = j1066.base || "", this.name = j1066.name || "", this.deps = j1066.deps || [], this._initUuid(j1066.uuids), this._initPath(j1066.paths), this._initScene(j1066.scenes), this._initPackage(j1066.packs), this._initVersion(j1066.versions), this._initRedirect(j1066.redirect);
                    for (const l1066 in j1066.extensionMap)
                        Object.prototype.hasOwnProperty.call(j1066.extensionMap, l1066) && j1066.extensionMap[l1066].forEach(n1066 => {
                            const o1066 = this.assetInfos.get(n1066);
                            o1066 && (o1066.extension = l1066);
                        });
                }
                getInfoWithPath(d1066, e1066) {
                    if (!d1066)
                        return null;
                    d1066 = n134(d1066);
                    const f1066 = this.paths.get(d1066);
                    if (f1066) {
                        if (!e1066)
                            return f1066[0];
                        for (let g1066 = 0, h1066 = f1066.length; g1066 < h1066; g1066++) {
                            const i1066 = f1066[g1066];
                            if (w126(i1066.ctor, e1066))
                                return i1066;
                        }
                    }
                    return null;
                }
                getDirWithPath(q1065, r1065, s1065) {
                    "/" === (q1065 = n134(q1065))[q1065.length - 1] && (q1065 = q1065.slice(0, -1));
                    const t1065 = s1065 || [];
                    return this.paths.forEach((v1065, w1065) => {
                        if (w1065.startsWith(q1065) && ((b1066, c1066) => !(b1066.length > c1066.length) || 47 === b1066.charCodeAt(c1066.length))(w1065, q1065) || !q1065)
                            for (let y1065 = 0, z1065 = v1065.length; y1065 < z1065; y1065++) {
                                const a1066 = v1065[y1065];
                                r1065 && !w126(a1066.ctor, r1065) || t1065.push(a1066);
                            }
                    }), t1065;
                }
                getAssetInfo(p1065) {
                    return this.assetInfos.get(p1065) || null;
                }
                getSceneInfo(l1065) {
                    return l1065.endsWith(".scene") || (l1065 += ".scene"), "/" === l1065[0] || l1065.startsWith("db://") || (l1065 = `/${l1065}`), this.scenes.find((n1065, o1065) => o1065.endsWith(l1065));
                }
                destroy() {
                    this.paths.destroy(), this.scenes.destroy(), this.assetInfos.destroy();
                }
                _initUuid(h1065) {
                    if (h1065) {
                        this.assetInfos.clear();
                        for (let i1065 = 0, j1065 = h1065.length; i1065 < j1065; i1065++) {
                            const k1065 = h1065[i1065];
                            this.assetInfos.add(k1065, {
                                uuid: k1065
                            });
                        }
                    }
                }
                _initPath(z1064) {
                    if (!z1064)
                        return;
                    const a1065 = this.paths;
                    a1065.clear();
                    for (const b1065 in z1064) {
                        const c1065 = z1064[b1065], d1065 = c1065[0], e1065 = c1065[1], f1065 = 3 === c1065.length, g1065 = this.assetInfos.get(b1065);
                        g1065.path = d1065, g1065.ctor = d127(e1065), a1065.has(d1065) ? f1065 ? a1065.get(d1065).push(g1065) : a1065.get(d1065).unshift(g1065) : a1065.add(d1065, [g1065]);
                    }
                }
                _initScene(t1064) {
                    if (!t1064)
                        return;
                    const u1064 = this.scenes;
                    u1064.clear();
                    const v1064 = this.assetInfos;
                    for (const w1064 in t1064) {
                        const x1064 = t1064[w1064], y1064 = v1064.get(x1064);
                        y1064.url = w1064, u1064.add(w1064, y1064);
                    }
                }
                _initPackage(j1064) {
                    if (!j1064)
                        return;
                    const k1064 = this.assetInfos;
                    for (const l1064 in j1064) {
                        const m1064 = j1064[l1064], n1064 = {
                            uuid: l1064,
                            packedUuids: m1064,
                            ext: ".json"
                        };
                        k1064.add(l1064, n1064);
                        for (let o1064 = 0, p1064 = m1064.length; o1064 < p1064; o1064++) {
                            const q1064 = m1064[o1064], r1064 = k1064.get(q1064), s1064 = r1064.packs;
                            s1064 ? 1 === p1064 ? s1064.unshift(n1064) : s1064.push(n1064) : r1064.packs = [n1064];
                        }
                    }
                }
                _initVersion(a1064) {
                    if (!a1064)
                        return;
                    const b1064 = this.assetInfos;
                    let c1064 = a1064.import;
                    if (c1064)
                        for (let g1064 = 0, h1064 = c1064.length; g1064 < h1064; g1064 += 2) {
                            const i1064 = c1064[g1064];
                            b1064.get(i1064).ver = c1064[g1064 + 1];
                        }
                    if (c1064 = a1064.native, c1064)
                        for (let d1064 = 0, e1064 = c1064.length; d1064 < e1064; d1064 += 2) {
                            const f1064 = c1064[d1064];
                            b1064.get(f1064).nativeVer = c1064[d1064 + 1];
                        }
                }
                _initRedirect(v1063) {
                    if (!v1063)
                        return;
                    const w1063 = this.assetInfos;
                    for (let x1063 = 0, y1063 = v1063.length; x1063 < y1063; x1063 += 2) {
                        const z1063 = v1063[x1063];
                        w1063.get(z1063).redirect = v1063[x1063 + 1];
                    }
                }
            }
            function h136(t1063, u1063) {
                t1063._uuid && u1063.push(t1063._uuid);
            }
            function i136(i1063, j1063) {
                const k1063 = Object.getOwnPropertyNames(i1063);
                for (let l1063 = 0; l1063 < k1063.length; l1063++) {
                    const m1063 = k1063[l1063];
                    if ("node" === m1063 || "__eventTargets" === m1063)
                        continue;
                    const n1063 = i1063[m1063];
                    if ("object" == typeof n1063 && n1063)
                        if (Array.isArray(n1063))
                            for (let r1063 = 0; r1063 < n1063.length; r1063++) {
                                const s1063 = n1063[r1063];
                                s1063 instanceof t163 && h136(s1063, j1063);
                            }
                        else if (n1063.constructor && n1063.constructor !== Object)
                            n1063 instanceof t163 && h136(n1063, j1063);
                        else {
                            const o1063 = Object.getOwnPropertyNames(n1063);
                            for (let p1063 = 0; p1063 < o1063.length; p1063++) {
                                const q1063 = n1063[o1063[p1063]];
                                q1063 instanceof t163 && h136(q1063, j1063);
                            }
                        }
                }
            }
            function j136(e1063, f1063) {
                for (let h1063 = 0; h1063 < e1063._components.length; h1063++)
                    i136(e1063._components[h1063], f1063);
                for (let g1063 = 0; g1063 < e1063._children.length; g1063++)
                    j136(e1063._children[g1063], f1063);
            }
            function k136(v1062, w1062, x1062, y1062) {
                x1062.push(v1062._uuid);
                const z1062 = w165.getDeps(v1062._uuid);
                for (let a1063 = 0, b1063 = z1062.length; a1063 < b1063; a1063++) {
                    const c1063 = z162.get(z1062[a1063]);
                    if (!c1063)
                        continue;
                    const d1063 = c1063._uuid;
                    d1063 in w1062 ? w1062[d1063] += y1062 : w1062[d1063] = c1063.refCount + y1062, x1062.includes(d1063) || k136(c1063, w1062, x1062, y1062);
                }
            }
            const r183 = [], s183 = new class {
                constructor() {
                    this._persistNodeDeps = new x162(), this._toDelete = new x162(), this._eventListener = !1, this._dontDestroyAssets = [];
                }
                addIgnoredAsset(u1062) {
                    this._dontDestroyAssets.push(u1062._uuid);
                }
                init() {
                    this._persistNodeDeps.clear(), this._toDelete.clear();
                }
                _addPersistNodeRef(p1062) {
                    const q1062 = [];
                    j136(p1062, q1062);
                    for (let r1062 = 0, s1062 = q1062.length; r1062 < s1062; r1062++) {
                        const t1062 = z162.get(q1062[r1062]);
                        t1062 && t1062.addRef();
                    }
                    this._persistNodeDeps.add(p1062.uuid, q1062);
                }
                _removePersistNodeRef(k1062) {
                    if (!this._persistNodeDeps.has(k1062.uuid))
                        return;
                    const l1062 = this._persistNodeDeps.get(k1062.uuid);
                    for (let m1062 = 0, n1062 = l1062.length; m1062 < n1062; m1062++) {
                        const o1062 = z162.get(l1062[m1062]);
                        o1062 && o1062.decRef();
                    }
                    this._persistNodeDeps.remove(k1062.uuid);
                }
                _autoRelease(s1061, t1061, u1061) {
                    if (s1061) {
                        const b1062 = w165.getDeps(s1061.uuid);
                        for (let h1062 = 0, i1062 = b1062.length; h1062 < i1062; h1062++) {
                            const j1062 = z162.get(b1062[h1062]);
                            j1062 && j1062.decRef(s1061.autoReleaseAssets);
                        }
                        const c1062 = w165._depends.get(s1061.uuid);
                        if (c1062 && c1062.persistDeps) {
                            const d1062 = c1062.persistDeps;
                            for (let e1062 = 0, f1062 = d1062.length; e1062 < f1062; e1062++) {
                                const g1062 = z162.get(d1062[e1062]);
                                g1062 && g1062.decRef(s1061.autoReleaseAssets);
                            }
                        }
                        s1061.uuid !== t1061.uuid && w165.remove(s1061.uuid);
                    }
                    const v1061 = w165._depends.get(t1061.uuid);
                    v1061 && (v1061.persistDeps = []);
                    for (const w1061 in u1061) {
                        const x1061 = u1061[w1061], y1061 = this._persistNodeDeps.get(x1061.uuid);
                        for (const z1061 of y1061) {
                            const a1062 = z162.get(z1061);
                            a1062 && a1062.addRef();
                        }
                        v1061 && v1061.persistDeps.push(...y1061);
                    }
                }
                tryRelease(q1061, r1061 = !1) {
                    q1061 instanceof t163 && (r1061 ? this._free(q1061, r1061) : (this._toDelete.add(q1061._uuid, q1061), this._eventListener || (this._eventListener = !0, x127(this._freeAssets.bind(this)))));
                }
                _freeAssets() {
                    this._eventListener = !1, this._toDelete.forEach(p1061 => {
                        this._free(p1061);
                    }), this._toDelete.clear();
                }
                _free(d1061, e1061 = !1) {
                    const f1061 = d1061._uuid;
                    if (this._toDelete.remove(f1061), !c131(d1061, !0) || -1 !== this._dontDestroyAssets.indexOf(f1061))
                        return;
                    if (!e1061 && d1061.refCount > 0 && function (l1061) {
                        const m1061 = Object.create(null);
                        if (m1061[l1061._uuid] = l1061.refCount, k136(l1061, m1061, r183, -1), r183.length = 0, 0 !== m1061[l1061._uuid])
                            return m1061[l1061._uuid];
                        for (const n1061 in m1061)
                            0 !== m1061[n1061] && k136(z162.get(n1061), m1061, r183, 1);
                        return r183.length = 0, m1061[l1061._uuid];
                    }(d1061) > 0)
                        return;
                    z162.remove(f1061);
                    const g1061 = w165.getDeps(f1061);
                    for (let i1061 = 0, j1061 = g1061.length; i1061 < j1061; i1061++) {
                        const k1061 = z162.get(g1061[i1061]);
                        k1061 && (k1061.decRef(!1), this._free(k1061, !1));
                    }
                    d1061.destroy(), w165.remove(f1061);
                }
            }();
            let t183 = null;
            function l136(y1060, z1060) {
                for (let a1061 = 0, b1061 = y1060.input.length; a1061 < b1061; a1061++) {
                    const c1061 = y1060.input[a1061];
                    z1060 && !c1061.isNative && c1061.content instanceof t163 && c1061.content.decRef(!1), c1061.recycle();
                }
                y1060.input = null;
            }
            function m136(w1060, x1060) {
                return x1060 ? /\?/.test(w1060) ? `${w1060}&_t=${Date.now()}` : `${w1060}?_t=${Date.now()}` : w1060;
            }
            function n136(n1060, o1060, p1060, q1060, r1060 = 0) {
                n1060(r1060, (t1060, u1060) => {
                    r1060++, !t1060 || r1060 > o1060 ? q1060 && q1060(t1060, u1060) : setTimeout(() => {
                        n136(n1060, o1060, p1060, q1060, r1060);
                    }, p1060);
                });
            }
            function o136(d1060, e1060, f1060, g1060, h1060) {
                try {
                    const j1060 = w165.parse(d1060, e1060);
                    for (let k1060 = 0, l1060 = j1060.deps.length; k1060 < l1060; k1060++) {
                        const m1060 = j1060.deps[k1060];
                        m1060 in f1060 || (f1060[m1060] = !0, g1060.push({
                            uuid: m1060,
                            bundle: h1060 && h1060.name
                        }));
                    }
                    j1060.nativeDep && (h1060 && (j1060.nativeDep.bundle = h1060.name), g1060.push({
                        ...j1060.nativeDep
                    }));
                }
                catch (i1060) {
                    r125(i1060.message, i1060.stack);
                }
            }
            function p136(a1060, b1060, c1060) {
                b1060 && (c1060 = void 0 !== c1060 ? c1060 : s143.assetManager.cacheAsset, m134(b1060) || !c1060 || b1060.isDefault || z162.add(a1060, b1060));
            }
            function q136(q1059, r1059, s1059) {
                let t1059 = 0;
                const u1059 = [], v1059 = q1059.length;
                0 === v1059 && s1059 && s1059(u1059);
                const w1059 = z1059 => {
                    z1059 && u1059.push(z1059), t1059++, t1059 === v1059 && s1059 && s1059(u1059);
                };
                for (let y1059 = 0; y1059 < v1059; y1059++)
                    r1059(q1059[y1059], w1059);
            }
            function r136(j1059, k1059, l1059) {
                let m1059 = j1059, n1059 = k1059, o1059 = l1059;
                if (void 0 === l1059) {
                    const p1059 = "function" == typeof j1059;
                    k1059 ? (o1059 = k1059, p1059 || (n1059 = null)) : void 0 === k1059 && p1059 && (o1059 = j1059, m1059 = null, n1059 = null), void 0 !== k1059 && p1059 && (n1059 = j1059, m1059 = null);
                }
                return {
                    options: m1059 || Object.create(null),
                    onProgress: n1059,
                    onComplete: o1059
                };
            }
            function s136(c1059, d1059, e1059) {
                let f1059 = c1059, g1059 = d1059, h1059 = e1059;
                if (void 0 === e1059) {
                    const i1059 = w126(c1059, t163);
                    d1059 ? (h1059 = d1059, i1059 && (g1059 = null)) : void 0 !== d1059 || i1059 || (h1059 = c1059, g1059 = null, f1059 = null), void 0 === d1059 || i1059 || (g1059 = c1059, f1059 = null);
                }
                return {
                    type: f1059,
                    onProgress: g1059 || t183,
                    onComplete: h1059
                };
            }
            function t136(t1058, u1058, v1058, w1058 = {}) {
                if (!v1058[u1058] || w1058[u1058])
                    return !1;
                w1058[u1058] = !0;
                let x1058 = !1;
                const y1058 = w165.getDeps(u1058);
                if (y1058)
                    for (let z1058 = 0, a1059 = y1058.length; z1058 < a1059; z1058++) {
                        const b1059 = y1058[z1058];
                        if (b1059 === t1058 || t136(t1058, b1059, v1058, w1058)) {
                            x1058 = !0;
                            break;
                        }
                    }
                return x1058;
            }
            function u136(j1058) {
                return (l1058, m1058) => {
                    if (!j1058)
                        return;
                    const n1058 = [];
                    Array.isArray(m1058) ? m1058.forEach(s1058 => s1058 instanceof t163 && n1058.push(s1058.addRef())) : m1058 instanceof t163 && n1058.push(m1058.addRef()), x127(() => {
                        n1058.forEach(r1058 => r1058.decRef(!1)), j1058(l1058, m1058);
                    });
                };
            }
            class u183 {
                constructor() {
                    this._config = new q183();
                }
                get config() {
                    return this._config;
                }
                get name() {
                    return this._config.name;
                }
                get deps() {
                    return this._config.deps;
                }
                get base() {
                    return this._config.base;
                }
                getInfoWithPath(h1058, i1058) {
                    return this._config.getInfoWithPath(h1058, i1058);
                }
                getDirWithPath(e1058, f1058, g1058) {
                    return this._config.getDirWithPath(e1058, f1058, g1058);
                }
                getAssetInfo(d1058) {
                    return this._config.getAssetInfo(d1058);
                }
                getSceneInfo(c1058) {
                    return this._config.getSceneInfo(c1058);
                }
                init(b1058) {
                    this._config.init(b1058), c163.add(b1058.name, this);
                }
                load(t1057, u1057, v1057, w1057) {
                    const { type: x1057, onProgress: y1057, onComplete: z1057 } = s136(u1057, v1057, w1057), a1058 = {
                        __requestType__: h163.PATH,
                        type: x1057,
                        bundle: this.name,
                        __outputAsArray__: Array.isArray(t1057)
                    };
                    s143.assetManager.loadAny(t1057, a1058, y1057, z1057);
                }
                preload(m1057, n1057, o1057, p1057) {
                    const { type: q1057, onProgress: r1057, onComplete: s1057 } = s136(n1057, o1057, p1057);
                    s143.assetManager.preloadAny(m1057, {
                        __requestType__: h163.PATH,
                        type: q1057,
                        bundle: this.name
                    }, r1057, s1057);
                }
                loadDir(f1057, g1057, h1057, i1057) {
                    const { type: j1057, onProgress: k1057, onComplete: l1057 } = s136(g1057, h1057, i1057);
                    s143.assetManager.loadAny(f1057, {
                        __requestType__: h163.DIR,
                        type: j1057,
                        bundle: this.name,
                        __outputAsArray__: !0
                    }, k1057, l1057);
                }
                preloadDir(y1056, z1056, a1057, b1057) {
                    const { type: c1057, onProgress: d1057, onComplete: e1057 } = s136(z1056, a1057, b1057);
                    s143.assetManager.preloadAny(y1056, {
                        __requestType__: h163.DIR,
                        type: c1057,
                        bundle: this.name
                    }, d1057, e1057);
                }
                loadScene(n1056, o1056, p1056, q1056) {
                    const { options: r1056, onProgress: s1056, onComplete: t1056 } = r136(o1056, p1056, q1056);
                    r1056.preset = r1056.preset || "scene", r1056.bundle = this.name, s143.assetManager.loadAny({
                        scene: n1056
                    }, r1056, s1056, (v1056, w1056) => {
                        if (v1056)
                            r125(v1056.message, v1056.stack);
                        else if (w1056.scene) {
                            const x1056 = w1056.scene;
                            x1056._id = w1056._uuid, x1056.name = w1056.name;
                        }
                        else
                            v1056 = new Error(`The asset ${w1056._uuid} is not a scene`);
                        t1056 && t1056(v1056, w1056);
                    });
                }
                preloadScene(e1056, f1056, g1056, h1056) {
                    const { options: i1056, onProgress: j1056, onComplete: k1056 } = r136(f1056, g1056, h1056);
                    i1056.bundle = this.name, s143.assetManager.preloadAny({
                        scene: e1056
                    }, i1056, j1056, m1056 => {
                        m1056 && z125(1210, e1056, m1056.message), k1056 && k1056(m1056);
                    });
                }
                get(b1056, c1056) {
                    const d1056 = this.getInfoWithPath(b1056, c1056);
                    return d1056 && z162.get(d1056.uuid) || null;
                }
                release(y1055, z1055) {
                    const a1056 = this.get(y1055, z1055);
                    a1056 && s183.tryRelease(a1056, !0);
                }
                releaseUnusedAssets() {
                    z162.forEach(w1055 => {
                        const x1055 = this.getAssetInfo(w1055._uuid);
                        x1055 && !x1055.redirect && s183.tryRelease(w1055);
                    });
                }
                releaseAll() {
                    z162.forEach(t1055 => {
                        const u1055 = this.getAssetInfo(t1055._uuid);
                        u1055 && !u1055.redirect && s183.tryRelease(t1055, !0);
                    });
                }
                _destroy() {
                    this._config.destroy();
                }
            }
            const v183 = g125("resources", new u183());
            function v136(m1055, n1055, o1055) {
                const r1055 = new u143.Image();
                function p1055() {
                    r1055.removeEventListener("load", p1055), r1055.removeEventListener("error", q1055), o1055 && o1055(null, r1055);
                }
                function q1055() {
                    r1055.removeEventListener("load", p1055), r1055.removeEventListener("error", q1055), o1055 && o1055(new Error(b126(4930, m1055)));
                }
                return "file:" !== u143.location.protocol && (r1055.crossOrigin = "anonymous"), r1055.addEventListener("load", p1055), r1055.addEventListener("error", q1055), r1055.src = m1055, r1055;
            }
            function w136(z1054, a1055, b1055, c1055) {
                const d1055 = new XMLHttpRequest(), e1055 = `download failed: ${z1054}, status: `;
                if (d1055.open("GET", z1054, !0), void 0 !== a1055.xhrResponseType && (d1055.responseType = a1055.xhrResponseType), void 0 !== a1055.xhrWithCredentials && (d1055.withCredentials = a1055.xhrWithCredentials), void 0 !== a1055.xhrMimeType && d1055.overrideMimeType && d1055.overrideMimeType(a1055.xhrMimeType), void 0 !== a1055.xhrTimeout && (d1055.timeout = a1055.xhrTimeout), a1055.xhrHeader)
                    for (const l1055 in a1055.xhrHeader)
                        d1055.setRequestHeader(l1055, a1055.xhrHeader[l1055]);
                return d1055.onload = () => {
                    200 === d1055.status || 0 === d1055.status ? c1055 && c1055(null, d1055.response) : c1055 && c1055(new Error(`${e1055}${d1055.status}(no response)`));
                }, b1055 && (d1055.onprogress = k1055 => {
                    k1055.lengthComputable && b1055(k1055.loaded, k1055.total);
                }), d1055.onerror = () => {
                    c1055 && c1055(new Error(`${e1055}${d1055.status}(error)`));
                }, d1055.ontimeout = () => {
                    c1055 && c1055(new Error(`${e1055}${d1055.status}(time out)`));
                }, d1055.onabort = () => {
                    c1055 && c1055(new Error(`${e1055}${d1055.status}(abort)`));
                }, d1055.send(null), d1055;
            }
            s143.resources = v183;
            const w183 = u143.document, x183 = {};
            function x136(t1054, u1054, v1054) {
                if (x183[t1054])
                    return v1054 && v1054(null), null;
                const y1054 = w183.createElement("script");
                function w1054() {
                    y1054.parentNode.removeChild(y1054), y1054.removeEventListener("load", w1054, !1), y1054.removeEventListener("error", x1054, !1), x183[t1054] = !0, v1054 && v1054(null);
                }
                function x1054() {
                    y1054.parentNode.removeChild(y1054), y1054.removeEventListener("load", w1054, !1), y1054.removeEventListener("error", x1054, !1), v1054 && v1054(new Error(b126(4928, t1054)));
                }
                return "file:" !== u143.location.protocol && (y1054.crossOrigin = "anonymous"), y1054.async = u1054.scriptAsyncLoading || !1, y1054.src = t1054, y1054.addEventListener("load", w1054, !1), y1054.addEventListener("error", x1054, !1), w183.body.appendChild(y1054), y1054;
            }
            const y183 = /^(?:\w+:\/\/|\.+\/).+/, z183 = (q1054, r1054, s1054) => {
                (i157.hasFeature(i157.Feature.IMAGE_BITMAP) && s143.assetManager.allowImageBitmap ? a184 : v136)(q1054, r1054, s1054);
            }, a184 = (n1054, o1054, p1054) => {
                o1054.xhrResponseType = "blob", w136(n1054, o1054, o1054.onFileProgress, p1054);
            }, b184 = (k1054, l1054, m1054) => {
                l1054.xhrResponseType = "json", w136(k1054, l1054, l1054.onFileProgress, m1054);
            }, c184 = (h1054, i1054, j1054) => {
                i1054.xhrResponseType = "arraybuffer", w136(h1054, i1054, i1054.onFileProgress, j1054);
            }, d184 = (n1053, o1053, p1053) => {
                i184._downloadJson(n1053, o1053, (r1053, s1053) => {
                    if (r1053)
                        return void p1053(r1053);
                    const t1053 = q134(s1053);
                    Promise.all(t1053.chunks.map(a1054 => new Promise((c1054, d1054) => {
                        i184._downloadArrayBuffer(`${j133(n1053)}${a1054}`, {}, (f1054, g1054) => {
                            r1053 ? d1054(r1053) : c1054(new Uint8Array(g1054));
                        });
                    }))).then(y1053 => {
                        const z1053 = new f165(t1053.document, y1053);
                        p1053(null, z1053);
                    }).catch(x1053 => {
                        p1053(x1053);
                    });
                });
            }, e184 = (f1053, g1053, h1053) => {
                i184._downloadArrayBuffer(f1053, g1053, (j1053, k1053) => {
                    if (j1053)
                        h1053(j1053);
                    else
                        try {
                            const m1053 = r134(new Uint8Array(k1053));
                            h1053(null, m1053);
                        }
                        catch (l1053) {
                            h1053(l1053);
                        }
                });
            }, f184 = (c1053, d1053, e1053) => {
                d1053.xhrResponseType = "text", w136(c1053, d1053, d1053.onFileProgress, e1053);
            }, g184 = (o1052, p1052, q1052) => {
                const r1052 = k133(o1052);
                let s1052 = o1052;
                y183.test(s1052) || (s1052 = -1 !== i184.remoteBundles.indexOf(r1052) ? `${i184.remoteServerAddress}remote/${r1052}` : `assets/${r1052}`);
                const t1052 = p1052.version || i184.bundleVers[r1052];
                let u1052 = 0, v1052 = null, w1052 = null;
                b184(`${s1052}/config.${t1052 ? `${t1052}.` : ""}json`, p1052, (a1053, b1053) => {
                    w1052 = a1053 || w1052, v1052 = b1053, v1052 && (v1052.base = `${s1052}/`), 2 == ++u1052 && q1052(w1052, v1052);
                }), x136(`${s1052}/index.${t1052 ? `${t1052}.` : ""}js`, p1052, z1052 => {
                    w1052 = z1052 || w1052, 2 == ++u1052 && q1052(w1052, v1052);
                });
            };
            class h184 {
                static get instance() {
                    return h184._instance || (h184._instance = new h184()), h184._instance;
                }
                get remoteServerAddress() {
                    return this._remoteServerAddress;
                }
                init(l1052 = "", m1052 = {}, n1052 = []) {
                    this._downloading.clear(), this._queue.length = 0, this._remoteServerAddress = l1052, this.bundleVers = m1052, this.remoteBundles = n1052;
                }
                register(j1052, k1052) {
                    "object" == typeof j1052 ? t126(this._downloaders, j1052) : this._downloaders[j1052] = k1052;
                }
                download(h1051, i1051, j1051, k1051, l1051) {
                    const m1051 = a163.get(h1051);
                    if (m1051)
                        return void l1051(null, m1051);
                    const n1051 = this._downloading.get(h1051);
                    if (n1051) {
                        n1051.push(l1051);
                        const f1052 = this._queue.find(i1052 => i1052.id === h1051);
                        if (!f1052)
                            return;
                        const g1052 = k1051.priority || 0;
                        return void (f1052.priority < g1052 && (f1052.priority = g1052, this._queueDirty = !0));
                    }
                    const o1051 = void 0 !== k1051.maxRetryCount ? k1051.maxRetryCount : this.maxRetryCount, p1051 = void 0 !== k1051.maxConcurrency ? k1051.maxConcurrency : this.maxConcurrency, q1051 = void 0 !== k1051.maxRequestsPerFrame ? k1051.maxRequestsPerFrame : this.maxRequestsPerFrame, r1051 = this._downloaders[j1051] || this._downloaders.default;
                    n136((z1051, a1052) => {
                        if (0 === z1051 && this._downloading.add(h1051, [l1051]), !this.limited)
                            return void r1051(m136(i1051, this.appendTimeStamp), k1051, a1052);
                        this._updateTime();
                        const b1052 = (d1052, e1052) => {
                            this._totalNum--, this._handleQueueInNextFrame(p1051, q1051), a1052(d1052, e1052);
                        };
                        this._totalNum < p1051 && this._totalNumThisPeriod < q1051 ? (r1051(m136(i1051, this.appendTimeStamp), k1051, b1052), this._totalNum++, this._totalNumThisPeriod++) : (this._queue.push({
                            id: h1051,
                            priority: k1051.priority || 0,
                            url: i1051,
                            options: k1051,
                            done: b1052,
                            handler: r1051
                        }), this._queueDirty = !0, this._totalNum < p1051 && this._handleQueueInNextFrame(p1051, q1051));
                    }, o1051, this.retryInterval, (u1051, v1051) => {
                        u1051 || a163.add(h1051, v1051);
                        const w1051 = this._downloading.remove(h1051);
                        for (let x1051 = 0, y1051 = w1051.length; x1051 < y1051; x1051++)
                            w1051[x1051](u1051, v1051);
                    });
                }
                loadSubpackage(f1051, g1051) {
                    s143.assetManager.loadBundle(f1051, null, g1051);
                }
                constructor() {
                    this.maxConcurrency = 15, this.maxRequestsPerFrame = 15, this.maxRetryCount = 3, this.appendTimeStamp = !1, this.limited = !0, this.retryInterval = 2e3, this.bundleVers = {}, this.remoteBundles = [], this.downloadDomImage = v136, this.downloadDomAudio = null, this.downloadFile = w136, this.downloadScript = x136, this._downloadArrayBuffer = c184, this._downloadJson = b184, this._downloaders = {
                        ".png": z183,
                        ".jpg": z183,
                        ".bmp": z183,
                        ".jpeg": z183,
                        ".gif": z183,
                        ".ico": z183,
                        ".tiff": z183,
                        ".webp": z183,
                        ".image": z183,
                        ".pvr": c184,
                        ".pkm": c184,
                        ".astc": c184,
                        ".txt": f184,
                        ".xml": f184,
                        ".vsh": f184,
                        ".fsh": f184,
                        ".atlas": f184,
                        ".tmx": f184,
                        ".tsx": f184,
                        ".json": b184,
                        ".ExportJson": b184,
                        ".plist": f184,
                        ".ccon": d184,
                        ".cconb": e184,
                        ".fnt": f184,
                        ".binary": c184,
                        ".bin": c184,
                        ".dbbin": c184,
                        ".skel": c184,
                        ".js": x136,
                        bundle: g184,
                        default: f184
                    }, this._downloading = new x162(), this._queue = [], this._queueDirty = !1, this._totalNum = 0, this._totalNumThisPeriod = 0, this._lastDate = -1, this._checkNextPeriod = !1, this._remoteServerAddress = "", this._maxInterval = 1 / 30;
                }
                _updateTime() {
                    const c1051 = performance.now(), d1051 = s143.game.deltaTime, e1051 = d1051 > this._maxInterval ? this._maxInterval : d1051;
                    c1051 - this._lastDate > 1e3 * e1051 && (this._totalNumThisPeriod = 0, this._lastDate = c1051);
                }
                _handleQueue(w1050, x1050) {
                    for (this._checkNextPeriod = !1, this._updateTime(); this._queue.length > 0 && this._totalNum < w1050 && this._totalNumThisPeriod < x1050;) {
                        this._queueDirty && (this._queue.sort((a1051, b1051) => a1051.priority - b1051.priority), this._queueDirty = !1);
                        const y1050 = this._queue.pop();
                        if (!y1050)
                            break;
                        this._totalNum++, this._totalNumThisPeriod++, y1050.handler(m136(y1050.url, this.appendTimeStamp), y1050.options, y1050.done);
                    }
                    this._handleQueueInNextFrame(w1050, x1050);
                }
                _handleQueueInNextFrame(u1050, v1050) {
                    !this._checkNextPeriod && this._queue.length > 0 && (x127(this._handleQueue.bind(this), u1050, v1050), this._checkNextPeriod = !0);
                }
            }
            h184._instance = void 0;
            const i184 = h184.instance;
            var j184, k184, l184, m184 = h184.instance;
            let n184 = g125("JsonAsset", e151("cc.JsonAsset")((k184 = class extends t163 {
                constructor(...t1050) {
                    super(...t1050), this.json = l184 && l184();
                }
            }, l184 = p130(k184.prototype, "json", [j151], function () {
                return null;
            }), j184 = k184)) || j184);
            var o184, p184, q184;
            s143.JsonAsset = n184;
            let r184 = g125("TextAsset", e151("cc.TextAsset")((p184 = class extends t163 {
                constructor(...s1050) {
                    super(...s1050), this.text = q184 && q184();
                }
                toString() {
                    return this.text;
                }
            }, q184 = p130(p184.prototype, "text", [j151], function () {
                return "";
            }), o184 = p184)) || o184);
            s143.TextAsset = r184;
            const s184 = g125("BufferAsset", jsb.BufferAsset);
            function y136(l1050, m1050, n1050, o1050) {
                let p1050 = null, q1050 = null;
                try {
                    p1050 = new x163(), p1050._nativeUrl = l1050, p1050._nativeAsset = m1050;
                }
                catch (r1050) {
                    q1050 = r1050;
                }
                o1050(q1050, p1050);
            }
            function z136(g1050, h1050, i1050, j1050) {
                const k1050 = new n184();
                k1050.json = h1050, j1050(null, k1050);
            }
            function a137(b1050, c1050, d1050, e1050) {
                const f1050 = new r184();
                f1050.text = c1050, e1050(null, f1050);
            }
            function b137(w1049, x1049, y1049, z1049) {
                const a1050 = new s184();
                a1050._nativeUrl = w1049, a1050._nativeAsset = x1049, z1049(null, a1050);
            }
            function c137(r1049, s1049, t1049, u1049) {
                const v1049 = new t163();
                v1049._nativeUrl = r1049, v1049._nativeAsset = s1049, u1049(null, v1049);
            }
            function d137(l1049, m1049, n1049, o1049) {
                let p1049 = c163.get(m1049.name);
                p1049 || (p1049 = m1049.name === j163.RESOURCES ? v183 : new u183(), m1049.base = m1049.base || `${l1049}/`, p1049.init(m1049)), h125.import(`virtual:///prerequisite-imports/${p1049.name}`).then(() => {
                    o1049(null, p1049);
                }).catch(o1049);
            }
            s143.BufferAsset = jsb.BufferAsset, function (f1049, g1049 = r163) {
                const { BufferAsset: h1049 } = {
                    ...f1049
                }, i1049 = Object.getOwnPropertyDescriptor(h1049.prototype, "_nativeAsset");
                g1049(() => {
                    h152(h1049.prototype, "_nativeAsset", i1049);
                }, "override", "_nativeAsset"), g1049(() => {
                    e151("cc.BufferAsset")(h1049);
                }, "ccclass", null);
            }({
                BufferAsset: s184
            });
            var t184 = new class {
                constructor() {
                    this._creating = new x162(), this._producers = {
                        ".png": y136,
                        ".jpg": y136,
                        ".bmp": y136,
                        ".jpeg": y136,
                        ".gif": y136,
                        ".ico": y136,
                        ".tiff": y136,
                        ".webp": y136,
                        ".image": y136,
                        ".pvr": y136,
                        ".pkm": y136,
                        ".txt": a137,
                        ".xml": a137,
                        ".vsh": a137,
                        ".fsh": a137,
                        ".atlas": a137,
                        ".tmx": a137,
                        ".tsx": a137,
                        ".fnt": a137,
                        ".json": z136,
                        ".ExportJson": z136,
                        ".binary": b137,
                        ".bin": b137,
                        ".dbbin": b137,
                        ".skel": b137,
                        bundle: d137,
                        default: c137
                    };
                }
                register(d1049, e1049) {
                    "object" == typeof d1049 ? t126(this._producers, d1049) : this._producers[d1049] = e1049;
                }
                create(p1048, q1048, r1048, s1048, t1048) {
                    const u1048 = this._producers[r1048] || this._producers.default, v1048 = z162.get(p1048);
                    if (!s1048.reloadAsset && v1048)
                        return void t1048(null, v1048);
                    const w1048 = this._creating.get(p1048);
                    w1048 ? w1048.push(t1048) : (this._creating.add(p1048, [t1048]), u1048(p1048, q1048, s1048, (y1048, z1048) => {
                        !y1048 && z1048 instanceof t163 && (z1048._uuid = p1048, p136(p1048, z1048, s1048.cacheAsset));
                        const a1049 = this._creating.remove(p1048);
                        for (let b1049 = 0, c1049 = a1049.length; b1049 < c1049; b1049++)
                            a1049[b1049](y1048, z1048);
                    }));
                }
            }(), u184 = new class {
                constructor() {
                    this._loading = new x162(), this._unpackers = {
                        ".json": this.unpackJson
                    };
                }
                unpackJson(t1047, u1047, v1047, w1047) {
                    const x1047 = j126(!0);
                    let y1047 = null;
                    if (Array.isArray(u1047)) {
                        (u1047 = function (h1048) {
                            if (h1048[0] < 1)
                                throw new Error(b126(5304, h1048[0]));
                            c135(h1048, !0, void 0, e135.reportMissingClass), d135(h1048);
                            const i1048 = new r165(h1048[0]), j1048 = h1048[1], k1048 = h1048[2], l1048 = h1048[3], m1048 = h1048[4], n1048 = h1048[5];
                            for (let o1048 = 0; o1048 < n1048.length; ++o1048)
                                n1048[o1048].unshift(i1048, j1048, k1048, l1048, m1048);
                            return n1048;
                        }(u1047)).length !== t1047.length && z125(4915);
                        for (let g1048 = 0; g1048 < t1047.length; g1048++)
                            x1047[`${t1047[g1048]}@import`] = u1047[g1048];
                    }
                    else {
                        const z1047 = g127(j166), a1048 = g127(x163);
                        if (u1047.type === z1047 && u1047.data) {
                            const d1048 = u1047.data;
                            d1048.length !== t1047.length && z125(4915);
                            for (let e1048 = 0; e1048 < t1047.length; e1048++)
                                x1047[`${t1047[e1048]}@import`] = f135(z1047, {
                                    base: d1048[e1048][0],
                                    mipmaps: d1048[e1048][1]
                                });
                        }
                        else {
                            if (u1047.type !== a1048 || !u1047.data)
                                return y1047 = new Error("unmatched type pack!"), void w1047(y1047, null);
                            {
                                const b1048 = u1047.data;
                                b1048.length !== t1047.length && z125(4915);
                                for (let c1048 = 0; c1048 < t1047.length; c1048++)
                                    x1047[`${t1047[c1048]}@import`] = b1048[c1048];
                            }
                        }
                    }
                    w1047(y1047, x1047);
                }
                init() {
                    this._loading.clear();
                }
                register(r1047, s1047) {
                    "object" == typeof r1047 ? t126(this._unpackers, r1047) : this._unpackers[r1047] = s1047;
                }
                unpack(m1047, n1047, o1047, p1047, q1047) {
                    n1047 ? (0, this._unpackers[o1047])(m1047, n1047, p1047, q1047) : q1047(new Error("package data is wrong!"));
                }
                load(r1046, s1046, t1046) {
                    if (r1046.isNative || !r1046.info || !r1046.info.packs)
                        return void m184.download(r1046.id, r1046.url, r1046.ext, r1046.options, t1046);
                    if (a163.has(r1046.id))
                        return void t1046(null, a163.get(r1046.id));
                    const u1046 = r1046.info.packs, v1046 = u1046.find(l1047 => this._loading.has(l1047.uuid));
                    if (v1046)
                        return void this._loading.get(v1046.uuid).push({
                            onComplete: t1046,
                            id: r1046.id
                        });
                    const w1046 = u1046[0];
                    this._loading.add(w1046.uuid, [{
                            onComplete: t1046,
                            id: r1046.id
                        }]), r1046.config;
                    const x1046 = o134(w1046.uuid, {
                        ext: w1046.ext,
                        bundle: r1046.config.name
                    });
                    m184.download(w1046.uuid, x1046, w1046.ext, r1046.options, (a1047, b1047) => {
                        a163.remove(w1046.uuid), a1047 && r125(a1047.message, a1047.stack), this.unpack(w1046.packedUuids, b1047, w1046.ext, r1046.options, (d1047, e1047) => {
                            if (!d1047)
                                for (const k1047 in e1047)
                                    a163.add(k1047, e1047[k1047]);
                            const f1047 = this._loading.remove(w1046.uuid);
                            for (let g1047 = 0, h1047 = f1047.length; g1047 < h1047; g1047++) {
                                const i1047 = f1047[g1047];
                                if (a1047 || d1047) {
                                    i1047.onComplete(a1047 || d1047);
                                    continue;
                                }
                                const j1047 = e1047[i1047.id];
                                j1047 ? i1047.onComplete(null, j1047) : i1047.onComplete(new Error("can not retrieve data from package"));
                            }
                        });
                    });
                }
            }();
            function e137(z1045, a1046) {
                let b1046 = !1;
                z1045.progress || (z1045.progress = {
                    finish: 0,
                    total: z1045.input.length,
                    canInvoke: !0
                }, b1046 = !0);
                const { options: c1046, progress: d1046 } = z1045, e1046 = [], f1046 = d1046.total, g1046 = c1046.__exclude__ = c1046.__exclude__ || Object.create(null);
                z1045.output = [], q136(z1045.input, (l1046, m1046) => {
                    if (!l1046.isNative && z162.has(l1046.uuid)) {
                        const q1046 = z162.get(l1046.uuid);
                        return l1046.content = q1046.addRef(), z1045.output.push(l1046), d1046.canInvoke && z1045.dispatch("progress", ++d1046.finish, d1046.total, l1046), void m1046();
                    }
                    u184.load(l1046, z1045.options, (o1046, p1046) => {
                        o1046 ? z1045.isFinished || (!s143.assetManager.force || b1046 ? (r125(o1046.message, o1046.stack), d1046.canInvoke = !1, a1046(o1046)) : (z1045.output.push(l1046), d1046.canInvoke && z1045.dispatch("progress", ++d1046.finish, d1046.total, l1046))) : z1045.isFinished || (l1046.file = p1046, z1045.output.push(l1046), l1046.isNative || (g1046[l1046.uuid] = !0, o136(l1046.uuid, p1046, g1046, e1046, l1046.config), d1046.total = f1046 + e1046.length), d1046.canInvoke && z1045.dispatch("progress", ++d1046.finish, d1046.total, l1046)), m1046();
                    });
                }, () => {
                    if (z1045.isFinished)
                        return l136(z1045, !0), void z1045.dispatch("error");
                    if (e1046.length > 0) {
                        const j1046 = k163.create({
                            input: e1046,
                            progress: d1046,
                            options: c1046,
                            onProgress: z1045.onProgress,
                            onError: k163.prototype.recycle,
                            onComplete: k1046 => {
                                k1046 || (z1045.output.push(...j1046.output), j1046.recycle()), b1046 && f137(z1045), a1046(k1046);
                            }
                        });
                        e163.async(j1046);
                    }
                    else
                        b1046 && f137(z1045), a1046();
                });
            }
            function f137(v1045) {
                const w1045 = v1045.output;
                for (let x1045 = 0, y1045 = w1045.length; x1045 < y1045; x1045++)
                    w1045[x1045].content && w1045[x1045].content.decRef(!1);
            }
            class v184 {
                constructor() {
                    this._parser = null, globalThis.DOMParser && (this._parser = new DOMParser());
                }
                parse(u1045) {
                    return this._parseXML(u1045);
                }
                _parseXML(t1045) {
                    if (this._parser)
                        return this._parser.parseFromString(t1045, "text/xml");
                    throw new Error("Dom parser is not supported in this platform!");
                }
            }
            const w184 = new class extends v184 {
                parse(o1045) {
                    const p1045 = this._parseXML(o1045).documentElement;
                    if ("plist" !== p1045.tagName)
                        return y125(5100), {};
                    let q1045 = null;
                    for (let r1045 = 0, s1045 = p1045.childNodes.length; r1045 < s1045 && (q1045 = p1045.childNodes[r1045], 1 !== q1045.nodeType); r1045++)
                        ;
                    return this._parseNode(q1045);
                }
                _parseNode(k1045) {
                    let l1045 = null;
                    const m1045 = k1045.tagName;
                    if ("dict" === m1045)
                        l1045 = this._parseDict(k1045);
                    else if ("array" === m1045)
                        l1045 = this._parseArray(k1045);
                    else if ("string" === m1045) {
                        if (1 === k1045.childNodes.length)
                            l1045 = k1045.firstChild.nodeValue;
                        else {
                            l1045 = "";
                            for (let n1045 = 0; n1045 < k1045.childNodes.length; n1045++)
                                l1045 += k1045.childNodes[n1045].nodeValue;
                        }
                    }
                    else
                        "false" === m1045 ? l1045 = !1 : "true" === m1045 ? l1045 = !0 : "real" === m1045 ? l1045 = parseFloat(k1045.firstChild.nodeValue) : "integer" === m1045 && (l1045 = parseInt(k1045.firstChild.nodeValue, 10));
                    return l1045;
                }
                _parseArray(f1045) {
                    const g1045 = [];
                    for (let h1045 = 0, i1045 = f1045.childNodes.length; h1045 < i1045; h1045++) {
                        const j1045 = f1045.childNodes[h1045];
                        1 === j1045.nodeType && g1045.push(this._parseNode(j1045));
                    }
                    return g1045;
                }
                _parseDict(z1044) {
                    const a1045 = {};
                    let b1045 = "";
                    for (let c1045 = 0, d1045 = z1044.childNodes.length; c1045 < d1045; c1045++) {
                        const e1045 = z1044.childNodes[c1045];
                        1 === e1045.nodeType && ("key" === e1045.tagName ? b1045 = e1045.firstChild.nodeValue : a1045[b1045] = this._parseNode(e1045));
                    }
                    return a1045;
                }
            }();
            class x184 {
                static get instance() {
                    return this._instance || (this._instance = new x184()), this._instance;
                }
                constructor() {
                    this._parsing = new x162(), this._parsers = {
                        ".png": this.parseImage,
                        ".jpg": this.parseImage,
                        ".bmp": this.parseImage,
                        ".jpeg": this.parseImage,
                        ".gif": this.parseImage,
                        ".ico": this.parseImage,
                        ".tiff": this.parseImage,
                        ".webp": this.parseImage,
                        ".image": this.parseImage,
                        ".pvr": this.parsePVRTex,
                        ".pkm": this.parsePKMTex,
                        ".astc": this.parseASTCTex,
                        ".plist": this.parsePlist,
                        import: this.parseImport,
                        ".ccon": this.parseImport,
                        ".cconb": this.parseImport
                    };
                }
                parseImage(s1044, t1044, u1044) {
                    s1044 instanceof HTMLImageElement ? u1044(null, s1044) : createImageBitmap(s1044, {
                        premultiplyAlpha: "none"
                    }).then(y1044 => {
                        u1044(null, y1044);
                    }, x1044 => {
                        u1044(x1044, null);
                    });
                }
                parsePVRTex(m1044, n1044, o1044) {
                    let p1044 = null, q1044 = null;
                    try {
                        q1044 = x163.parseCompressedTextures(m1044, 0);
                    }
                    catch (r1044) {
                        p1044 = r1044, console.warn(p1044);
                    }
                    o1044(p1044, q1044);
                }
                parsePKMTex(g1044, h1044, i1044) {
                    let j1044 = null, k1044 = null;
                    try {
                        k1044 = x163.parseCompressedTextures(g1044, 1);
                    }
                    catch (l1044) {
                        j1044 = l1044, console.warn(j1044);
                    }
                    i1044(j1044, k1044);
                }
                parseASTCTex(a1044, b1044, c1044) {
                    let d1044 = null, e1044 = null;
                    try {
                        e1044 = x163.parseCompressedTextures(a1044, 2);
                    }
                    catch (f1044) {
                        d1044 = f1044, console.warn(d1044);
                    }
                    c1044(d1044, e1044);
                }
                parsePlist(v1043, w1043, x1043) {
                    let y1043 = null;
                    const z1043 = w184.parse(v1043);
                    z1043 || (y1043 = new Error("parse failed")), x1043(y1043, z1043);
                }
                parseImport(p1043, q1043, r1043) {
                    if (!p1043)
                        return void r1043(new Error(`The json file of asset ${q1043.__uuid__} is empty or missing`));
                    let s1043 = null, t1043 = null;
                    try {
                        s1043 = g135(p1043, q1043);
                    }
                    catch (u1043) {
                        t1043 = u1043;
                    }
                    r1043(t1043, s1043);
                }
                init() {
                    this._parsing.clear();
                }
                register(n1043, o1043) {
                    "object" == typeof n1043 ? t126(this._parsers, n1043) : this._parsers[n1043] = o1043;
                }
                parse(z1042, a1043, b1043, c1043, d1043) {
                    const e1043 = b163.get(z1042);
                    if (e1043)
                        return void d1043(null, e1043);
                    const f1043 = this._parsing.get(z1042);
                    if (f1043)
                        return void f1043.push(d1043);
                    const g1043 = this._parsers[b1043];
                    g1043 ? (this._parsing.add(z1042, [d1043]), g1043(a1043, c1043, (i1043, j1043) => {
                        i1043 ? a163.remove(z1042) : m134(j1043) || b163.add(z1042, j1043);
                        const k1043 = this._parsing.remove(z1042);
                        for (let l1043 = 0, m1043 = k1043.length; l1043 < m1043; l1043++)
                            k1043[l1043](i1043, j1043);
                    })) : d1043(null, a1043);
                }
            }
            x184._instance = void 0;
            var y184 = x184.instance;
            function g137(h1042, i1042) {
                let j1042 = !1;
                h1042.progress || (h1042.progress = {
                    finish: 0,
                    total: h1042.input.length,
                    canInvoke: !0
                }, j1042 = !0);
                const { options: k1042, progress: l1042 } = h1042;
                k1042.__exclude__ = k1042.__exclude__ || Object.create(null), h1042.output = [], q136(h1042.input, (u1042, v1042) => {
                    const w1042 = k163.create({
                        input: u1042,
                        onProgress: h1042.onProgress,
                        options: k1042,
                        progress: l1042,
                        onComplete: (x1042, y1042) => {
                            x1042 && !h1042.isFinished && (!s143.assetManager.force || j1042 ? (r125(x1042.message, x1042.stack), l1042.canInvoke = !1, i1042(x1042)) : l1042.canInvoke && h1042.dispatch("progress", ++l1042.finish, l1042.total, u1042)), h1042.output.push(y1042), w1042.recycle(), v1042(null);
                        }
                    });
                    z184.async(w1042);
                }, () => {
                    if (k1042.__exclude__ = null, h1042.isFinished)
                        return l136(h1042, !0), void h1042.dispatch("error");
                    !function (p1042) {
                        const q1042 = p1042.source;
                        if (p1042.options.__outputAsArray__ || 1 !== q1042.length) {
                            const r1042 = p1042.output = [];
                            for (let s1042 = 0, t1042 = q1042.length; s1042 < t1042; s1042++)
                                r1042.push(q1042[s1042].content);
                        }
                        else
                            p1042.output = q1042[0].content;
                    }(h1042), l136(h1042, !0), i1042();
                });
            }
            const z184 = new y162("loadOneAsset", [function (w1041, x1041) {
                    const y1041 = w1041.output = w1041.input, { options: z1041, isNative: a1042, uuid: b1042, file: c1042 } = y1041, { reloadAsset: d1042 } = z1041;
                    c1042 || !d1042 && !a1042 && z162.has(b1042) ? x1041() : u184.load(y1041, w1041.options, (f1042, g1042) => {
                        y1041.file = g1042, x1041(f1042);
                    });
                }, function (u1039, v1039) {
                    const w1039 = u1039.output = u1039.input, x1039 = u1039.progress, y1039 = u1039.options.__exclude__, { id: z1039, file: a1040, options: b1040 } = w1039;
                    if (w1039.isNative)
                        y184.parse(z1039, a1040, w1039.ext, b1040, (u1041, v1041) => {
                            u1041 ? v1039(u1041) : (w1039.content = v1041, x1039.canInvoke && u1039.dispatch("progress", ++x1039.finish, x1039.total, w1039), a163.remove(z1039), b163.remove(z1039), v1039());
                        });
                    else {
                        const { uuid: d1040 } = w1039;
                        if (d1040 in y1039) {
                            const { finish: q1041, content: r1041, err: s1041, callbacks: t1041 } = y1039[d1040];
                            x1039.canInvoke && u1039.dispatch("progress", ++x1039.finish, x1039.total, w1039), q1041 || t136(d1040, d1040, y1039) ? (r1041 && r1041.addRef(), w1039.content = r1041, v1039(s1041)) : t1041.push({
                                done: v1039,
                                item: w1039
                            });
                        }
                        else if (!b1040.reloadAsset && z162.has(d1040)) {
                            const p1041 = z162.get(d1040);
                            w1039.content = p1041.addRef(), x1039.canInvoke && u1039.dispatch("progress", ++x1039.finish, x1039.total, w1039), v1039();
                        }
                        else
                            b1040.__uuid__ = d1040, y184.parse(z1039, a1040, "import", b1040, (f1040, g1040) => {
                                f1040 ? v1039(f1040) : function (i1040, j1040, k1040) {
                                    const { input: l1040, progress: m1040 } = i1040, { uuid: n1040, id: o1040, options: p1040, config: q1040 } = l1040, { cacheAsset: r1040 } = p1040, s1040 = [];
                                    j1040.addRef && j1040.addRef(), o136(n1040, j1040, Object.create(null), s1040, q1040), m1040.canInvoke && i1040.dispatch("progress", ++m1040.finish, m1040.total += s1040.length, l1040);
                                    const t1040 = i1040.options.__exclude__[n1040] = {
                                        content: j1040,
                                        finish: !1,
                                        callbacks: [{
                                                done: k1040,
                                                item: l1040
                                            }]
                                    }, u1040 = k163.create({
                                        input: s1040,
                                        options: i1040.options,
                                        onProgress: i1040.onProgress,
                                        onError: k163.prototype.recycle,
                                        progress: m1040,
                                        onComplete: v1040 => {
                                            if (j1040.decRef && j1040.decRef(!1), t1040.finish = !0, t1040.err = v1040, !v1040) {
                                                const a1041 = Array.isArray(u1040.output) ? u1040.output : [u1040.output], b1041 = Object.create(null);
                                                for (const o1041 of a1041)
                                                    o1041 && (b1041[o1041 instanceof t163 ? `${o1041._uuid}@import` : `${n1040}@native`] = o1041);
                                                !function (e1041, f1041, g1041) {
                                                    let h1041 = !1;
                                                    const i1041 = s165.get(f1041);
                                                    if (i1041) {
                                                        for (let j1041 = 0, k1041 = i1041.length; j1041 < k1041; j1041++) {
                                                            const l1041 = i1041[j1041], m1041 = g1041[`${l1041.uuid}@import`];
                                                            if (m1041)
                                                                l1041.owner[l1041.prop] = m1041.addRef();
                                                            else {
                                                                if (r125(`The asset ${l1041.uuid} is missing!`), s143.assetManager.dispatchAssetMissing(f1041, l1041.owner, l1041.prop, l1041.uuid), l1041.type && l1041.type !== t163) {
                                                                    const n1041 = new l1041.type();
                                                                    n1041.initDefault(l1041.uuid), l1041.owner[l1041.prop] = n1041;
                                                                }
                                                                h1041 = !0;
                                                            }
                                                        }
                                                        s165.delete(f1041);
                                                    }
                                                    t165.has(f1041) && (g1041[`${e1041}@native`] ? f1041._nativeAsset = g1041[`${e1041}@native`] : (h1041 = !0, console.error(`the native asset of ${e1041} is missing!`)), t165.delete(f1041));
                                                }(n1040, j1040, b1041);
                                                try {
                                                    "function" != typeof j1040.onLoaded || u165.has(j1040) || t165.has(j1040) || (j1040.onLoaded(), u165.add(j1040));
                                                }
                                                catch (d1041) {
                                                    r125(`The asset ${n1040} is invalid for some reason, detail message: ${d1041.message}, stack: ${d1041.stack}`);
                                                }
                                                a163.remove(o1040), b163.remove(o1040), p136(n1040, j1040, r1040), u1040.recycle();
                                            }
                                            const w1040 = t1040.callbacks;
                                            for (let x1040 = 0, y1040 = w1040.length; x1040 < y1040; x1040++) {
                                                const z1040 = w1040[x1040];
                                                j1040.addRef && j1040.addRef(), z1040.item.content = j1040, z1040.done(v1040);
                                            }
                                            w1040.length = 0;
                                        }
                                    });
                                    d163.async(u1040);
                                }(u1039, g1040, v1039);
                            });
                    }
                }]);
            function h137(j1039, k1039) {
                const l1039 = j1039.options, m1039 = Object.create(null), n1039 = Object.create(null);
                for (const t1039 in l1039)
                    switch (t1039) {
                        case h163.PATH:
                        case h163.UUID:
                        case h163.DIR:
                        case h163.SCENE:
                        case h163.URL:
                            break;
                        case "__requestType__":
                        case "__isNative__":
                        case "ext":
                        case "type":
                        case "__nativeName__":
                        case "audioLoadMode":
                        case "bundle":
                            m1039[t1039] = l1039[t1039];
                            break;
                        case "__exclude__":
                        case "__outputAsArray__":
                            n1039[t1039] = l1039[t1039];
                            break;
                        default:
                            m1039[t1039] = l1039[t1039], n1039[t1039] = l1039[t1039];
                    }
                j1039.options = n1039;
                const o1039 = k163.create({
                    input: j1039.input,
                    options: m1039
                });
                let p1039 = null;
                try {
                    j1039.output = j1039.source = f163.sync(o1039);
                }
                catch (q1039) {
                    p1039 = q1039;
                    for (let r1039 = 0, s1039 = o1039.output.length; r1039 < s1039; r1039++)
                        o1039.output[r1039].recycle();
                }
                o1039.recycle(), k1039(p1039);
            }
            class a185 {
                constructor() {
                    this.uuid = "", this.overrideUuid = "", this.url = "", this.ext = ".json", this.content = null, this.file = null, this.info = null, this.config = null, this.isNative = !1, this.options = Object.create(null), this._id = "";
                }
                get id() {
                    return this._id || (this._id = `${this.overrideUuid || this.uuid}@${this.isNative ? "native" : "import"}`), this._id;
                }
                static create() {
                    let i1039;
                    return i1039 = 0 !== a185._deadPool.length ? a185._deadPool.pop() : new a185(), i1039;
                }
                recycle() {
                    a185._deadPool.length !== a185.MAX_DEAD_NUM && (this._id = "", this.uuid = "", this.overrideUuid = "", this.url = "", this.ext = ".json", this.content = null, this.file = null, this.info = null, this.config = null, this.isNative = !1, this.options = Object.create(null), a185._deadPool.push(this));
                }
            }
            a185.MAX_DEAD_NUM = 500, a185._deadPool = [];
            const b185 = [];
            function i137(p1038) {
                var q1038;
                const r1038 = p1038.options, s1038 = Array.isArray(p1038.input) ? p1038.input : [p1038.input];
                p1038.output = [];
                for (let u1038 = 0; u1038 < s1038.length; u1038++) {
                    let v1038 = s1038[u1038], w1038 = a185.create(), x1038 = null, y1038 = null;
                    if ("string" == typeof v1038 && (v1038 = Object.create(null), v1038[r1038.__requestType__ || h163.UUID] = s1038[u1038]), "object" == typeof v1038) {
                        s126(v1038, r1038), v1038.preset && s126(v1038, i163[v1038.preset]);
                        for (const z1038 in v1038) {
                            switch (z1038) {
                                case h163.UUID:
                                    {
                                        var t1038;
                                        const e1039 = w1038.uuid = j134(v1038.uuid);
                                        if (!v1038.bundle) {
                                            const f1039 = c163.find(h1039 => !!h1039.getAssetInfo(e1039));
                                            v1038.bundle = f1039 && f1039.name;
                                        }
                                        if (c163.has(v1038.bundle)) {
                                            if (x1038 = c163.get(v1038.bundle).config, y1038 = x1038.getAssetInfo(e1039), y1038 && y1038.redirect) {
                                                if (!c163.has(y1038.redirect))
                                                    throw new Error(`Please load bundle ${y1038.redirect} first`);
                                                x1038 = c163.get(y1038.redirect).config, y1038 = x1038.getAssetInfo(e1039);
                                            }
                                            w1038.config = x1038, w1038.info = y1038;
                                        }
                                        w1038.ext = v1038.ext || (null === (t1038 = y1038) || void 0 === t1038 ? void 0 : t1038.extension) || ".json";
                                        break;
                                    }
                                case "__requestType__":
                                case "ext":
                                case "bundle":
                                case "preset":
                                case "type":
                                    break;
                                case h163.DIR:
                                    if (c163.has(v1038.bundle)) {
                                        c163.get(v1038.bundle).config.getDirWithPath(v1038.dir, v1038.type, b185);
                                        for (const d1039 of b185)
                                            s1038.push({
                                                uuid: d1039.uuid,
                                                __isNative__: !1,
                                                ext: d1039.extension || ".json",
                                                bundle: v1038.bundle
                                            });
                                        b185.length = 0;
                                    }
                                    w1038.recycle(), w1038 = null;
                                    break;
                                case h163.PATH:
                                    if (c163.has(v1038.bundle)) {
                                        if (x1038 = c163.get(v1038.bundle).config, y1038 = x1038.getInfoWithPath(v1038.path, v1038.type), y1038 && y1038.redirect) {
                                            if (!c163.has(y1038.redirect))
                                                throw new Error(`you need to load bundle ${y1038.redirect} first`);
                                            x1038 = c163.get(y1038.redirect).config, y1038 = x1038.getAssetInfo(y1038.uuid);
                                        }
                                        if (!y1038)
                                            throw w1038.recycle(), new Error(`Bundle ${v1038.bundle} doesn't contain ${v1038.path}`);
                                        w1038.config = x1038, w1038.uuid = y1038.uuid, w1038.info = y1038;
                                    }
                                    w1038.ext = v1038.ext || (null === (q1038 = y1038) || void 0 === q1038 ? void 0 : q1038.extension) || ".json";
                                    break;
                                case h163.SCENE:
                                    if (!v1038.bundle) {
                                        const a1039 = c163.find(c1039 => !!c1039.getSceneInfo(v1038.scene));
                                        v1038.bundle = a1039 && a1039.name;
                                    }
                                    if (c163.has(v1038.bundle)) {
                                        if (x1038 = c163.get(v1038.bundle).config, y1038 = x1038.getSceneInfo(v1038.scene), y1038 && y1038.redirect) {
                                            if (!c163.has(y1038.redirect))
                                                throw new Error(`you need to load bundle ${y1038.redirect} first`);
                                            x1038 = c163.get(y1038.redirect).config, y1038 = x1038.getAssetInfo(y1038.uuid);
                                        }
                                        if (!y1038)
                                            throw w1038.recycle(), new Error(`Bundle ${x1038.name} doesn't contain scene ${v1038.scene}`);
                                        w1038.config = x1038, w1038.uuid = y1038.uuid, w1038.info = y1038;
                                    }
                                    break;
                                case "__isNative__":
                                    w1038.isNative = v1038.__isNative__;
                                    break;
                                case h163.URL:
                                    w1038.url = v1038.url, w1038.uuid = v1038.uuid || v1038.url, w1038.ext = v1038.ext || i133(v1038.url), w1038.isNative = void 0 === v1038.__isNative__ || v1038.__isNative__;
                                    break;
                                default:
                                    w1038.options[z1038] = v1038[z1038];
                            }
                            if (!w1038)
                                break;
                        }
                    }
                    if (w1038 && (p1038.output.push(w1038), !w1038.uuid && !w1038.url))
                        throw new Error(`Can not parse this input:${JSON.stringify(v1038)}`);
                }
                return null;
            }
            function j137(e1038) {
                const f1038 = e1038.output = e1038.input;
                for (let h1038 = 0; h1038 < f1038.length; h1038++) {
                    const i1038 = f1038[h1038];
                    if (g163.has(i1038.uuid)) {
                        const j1038 = g163.get(i1038.uuid), k1038 = c163.find(o1038 => !!o1038.getAssetInfo(j1038));
                        if (k1038) {
                            var g1038;
                            i1038.overrideUuid = j1038;
                            let m1038 = k1038.config, n1038 = m1038.getAssetInfo(j1038);
                            if (n1038 && n1038.redirect) {
                                if (!c163.has(n1038.redirect))
                                    throw new Error(`Please load bundle ${n1038.redirect} first`);
                                m1038 = c163.get(n1038.redirect).config, n1038 = m1038.getAssetInfo(j1038);
                            }
                            i1038.config = m1038, i1038.info = n1038, i1038.ext = i1038.isNative ? i1038.ext : (null === (g1038 = n1038) || void 0 === g1038 ? void 0 : g1038.extension) || ".json";
                        }
                        else
                            y125(16201, j1038, i1038.uuid);
                    }
                }
            }
            function k137(v1037) {
                const w1037 = v1037.output = v1037.input;
                for (let x1037 = 0; x1037 < w1037.length; x1037++) {
                    const y1037 = w1037[x1037];
                    if (y1037.url)
                        continue;
                    let z1037 = "", a1038 = "";
                    const b1038 = y1037.config;
                    a1038 = y1037.isNative ? b1038 && b1038.nativeBase ? b1038.base + b1038.nativeBase : s143.assetManager.generalNativeBase : b1038 && b1038.importBase ? b1038.base + b1038.importBase : s143.assetManager.generalImportBase;
                    const c1038 = y1037.overrideUuid || y1037.uuid;
                    let d1038 = "";
                    y1037.info && (d1038 = y1037.isNative ? y1037.info.nativeVer ? `.${y1037.info.nativeVer}` : "" : y1037.info.ver ? `.${y1037.info.ver}` : ""), z1037 = ".ttf" === y1037.ext ? `${a1038}/${c1038.slice(0, 2)}/${c1038}${d1038}/${y1037.options.__nativeName__}` : `${a1038}/${c1038.slice(0, 2)}/${c1038}${d1038}${y1037.ext}`, y1037.url = z1037;
                }
                return null;
            }
            const c185 = "asset-missing";
            class d185 {
                static get instance() {
                    return this._instance || (this._instance = new d185()), this._instance;
                }
                constructor() {
                    this.pipeline = d163.append(h137).append(g137), this.fetchPipeline = e163.append(h137).append(e137), this.transformPipeline = f163.append(i137).append(j137).append(k137), this.bundles = c163, this.assets = z162, this.assetsOverrideMap = g163, this.generalImportBase = "", this.generalNativeBase = "", this.dependUtil = w165, this.force = !1, this.allowImageBitmap = !1, this.utils = q163, this.downloader = m184, this.parser = y184, this.packManager = u184, this.cacheAsset = !0, this.cacheManager = null, this.presets = i163, this.factory = t184, this.preprocessPipe = h137, this.fetchPipe = e137, this.loadPipe = g137, this.references = null, this._releaseManager = s183, this._files = a163, this._parsed = b163, this._parsePipeline = null, this._projectBundles = [], this._eventTarget = new o156();
                }
                get main() {
                    return c163.get(j163.MAIN) || null;
                }
                get resources() {
                    return c163.get(j163.RESOURCES) || null;
                }
                onAssetMissing(t1037, u1037) {
                    this._eventTarget.on(c185, t1037, u1037);
                }
                offAssetMissing(r1037, s1037) {
                    this._eventTarget.off(c185, r1037, s1037);
                }
                dispatchAssetMissing(n1037, o1037, p1037, q1037) {
                    this._eventTarget.emit(c185, n1037, o1037, p1037, q1037);
                }
                init(e1037 = {}) {
                    const f1037 = e1037.server || r145.querySettings(q145.Category.ASSETS, "server") || "", g1037 = e1037.bundleVers || r145.querySettings(q145.Category.ASSETS, "bundleVers") || {}, h1037 = e1037.remoteBundles || r145.querySettings(q145.Category.ASSETS, "remoteBundles") || [], i1037 = e1037.downloadMaxConcurrency || r145.querySettings(q145.Category.ASSETS, "downloadMaxConcurrency");
                    i1037 && i1037 > 0 && (this.downloader.maxConcurrency = i1037), this._files.clear(), this._parsed.clear(), this._releaseManager.init(), this.assets.clear(), this.bundles.clear(), this.packManager.init(), this.downloader.init(f1037, g1037, h1037), this.parser.init(), this.dependUtil.init();
                    let j1037 = e1037.importBase || r145.querySettings(q145.Category.ASSETS, "importBase") || "";
                    j1037 && j1037.endsWith("/") && (j1037 = j1037.substr(0, j1037.length - 1));
                    let k1037 = e1037.nativeBase || r145.querySettings(q145.Category.ASSETS, "nativeBase") || "";
                    k1037 && k1037.endsWith("/") && (k1037 = k1037.substr(0, k1037.length - 1)), this.generalImportBase = j1037, this.generalNativeBase = k1037, this._projectBundles = r145.querySettings(q145.Category.ASSETS, "projectBundles") || [];
                    const l1037 = r145.querySettings(q145.Category.ASSETS, "assetsOverrides") || {};
                    for (const m1037 in l1037)
                        this.assetsOverrideMap.set(m1037, l1037[m1037]);
                }
                getBundle(d1037) {
                    return c163.get(d1037) || null;
                }
                removeBundle(c1037) {
                    c1037._destroy(), c163.remove(c1037.name);
                }
                loadAny(u1036, v1036, w1036, x1036) {
                    const { options: y1036, onProgress: z1036, onComplete: a1037 } = r136(v1036, w1036, x1036);
                    y1036.preset = y1036.preset || "default", u1036 = Array.isArray(u1036) ? u1036.slice() : u1036;
                    const b1037 = k163.create({
                        input: u1036,
                        onProgress: z1036,
                        onComplete: u136(a1037),
                        options: y1036
                    });
                    d163.async(b1037);
                }
                preloadAny(m1036, n1036, o1036, p1036) {
                    const { options: q1036, onProgress: r1036, onComplete: s1036 } = r136(n1036, o1036, p1036);
                    q1036.preset = q1036.preset || "preload", m1036 = Array.isArray(m1036) ? m1036.slice() : m1036;
                    const t1036 = k163.create({
                        input: m1036,
                        onProgress: r1036,
                        onComplete: u136(s1036),
                        options: q1036
                    });
                    e163.async(t1036);
                }
                loadRemote(b1036, c1036, d1036) {
                    const { options: e1036, onComplete: f1036 } = r136(c1036, void 0, d1036);
                    e1036.reloadAsset || !this.assets.has(b1036) ? (e1036.__isNative__ = !0, e1036.preset = e1036.preset || "remote", this.loadAny({
                        url: b1036
                    }, e1036, null, (h1036, i1036) => {
                        h1036 ? (r125(h1036.message, h1036.stack), f1036 && f1036(h1036, i1036)) : t184.create(b1036, i1036, e1036.ext || i133(b1036), e1036, (k1036, l1036) => {
                            f1036 && f1036(k1036, l1036);
                        });
                    })) : u136(f1036)(null, this.assets.get(b1036));
                }
                loadBundle(p1035, q1035, r1035) {
                    const { options: s1035, onComplete: t1035 } = r136(q1035, void 0, r1035), u1035 = k133(p1035);
                    this.bundles.has(u1035) ? u136(t1035)(null, this.getBundle(u1035)) : (s1035.preset = s1035.preset || "bundle", s1035.ext = "bundle", s1035.__isNative__ = !0, this.loadAny({
                        url: p1035
                    }, s1035, null, (w1035, x1035) => {
                        w1035 ? (r125(w1035.message, w1035.stack), t1035 && t1035(w1035, x1035)) : t184.create(p1035, x1035, "bundle", s1035, (z1035, a1036) => {
                            t1035 && t1035(z1035, a1036);
                        });
                    }));
                }
                releaseAsset(o1035) {
                    s183.tryRelease(o1035, !0);
                }
                releaseUnusedAssets() {
                    z162.forEach(n1035 => {
                        s183.tryRelease(n1035);
                    });
                }
                releaseAll() {
                    z162.forEach(l1035 => {
                        s183.tryRelease(l1035, !0);
                    });
                }
                loadWithJson(g1035, h1035, i1035, j1035) {
                    throw new Error("Only valid in Editor");
                }
            }
            g125("AssetManager", d185), d185._instance = void 0, d185.Pipeline = y162, d185.Task = k163, d185.Cache = x162, d185.RequestItem = a185, d185.Bundle = u183, d185.BuiltinBundleName = j163, d185.CacheManager = class {
                constructor() {
                    this.cacheDir = void 0, this.cacheEnabled = void 0, this.autoClear = void 0, this.cacheInterval = void 0, this.deleteInterval = void 0, this.cachedFiles = void 0;
                }
            }, d185.Downloader = h184, d185.Parser = x184, d185.DependUtil = v165;
            const e185 = g125("assetManager", s143.assetManager = d185.instance);
            s143.AssetManager = d185;
            const f185 = [".png", ".jpg", ".bmp", ".jpeg", ".gif", ".ico", ".tiff", ".webp", ".image", ".pvr", ".pkm", ".astc"], g185 = [".mp3", ".ogg", ".wav", ".m4a"];
            function l137() {
                return !0;
            }
            const h185 = {
                transformURL(u1034) {
                    const v1034 = k134(u1034);
                    if (!v1034)
                        return u1034;
                    const w1034 = c163.find(f1035 => !!f1035.getAssetInfo(v1034));
                    if (!w1034)
                        return u1034;
                    let x1034 = "";
                    const y1034 = w1034.getAssetInfo(v1034);
                    if (x1034 = u1034.startsWith(w1034.base + w1034.config.nativeBase) ? y1034.nativeVer || "" : y1034.ver || "", !x1034 || -1 !== u1034.indexOf(x1034))
                        return u1034;
                    let z1034 = !1;
                    if (".ttf" === i133(u1034) && (z1034 = !0), z1034) {
                        const d1035 = l133(u1034), e1035 = k133(u1034);
                        u1034 = `${d1035}.${x1034}/${e1035}`;
                    }
                    else
                        u1034 = u1034.replace(/.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,})/, c1035 => `${c1035}.${x1034}`);
                    return u1034;
                }
            };
            class i185 {
                constructor() {
                    this._autoReleaseSetting = Object.create(null), this._parseLoadResArgs = s136;
                }
                set onProgress(t1034) {
                    t183 = t1034;
                }
                get _cache() {
                    if (z162 instanceof x162)
                        return z162.map;
                    {
                        const p1034 = {};
                        return z162.forEach((r1034, s1034) => {
                            p1034[s1034] = r1034;
                        }), p1034;
                    }
                }
                load(m1033, n1033, o1033) {
                    void 0 === o1033 && void 0 !== n1033 && (o1033 = n1033, n1033 = null);
                    const p1033 = Array.isArray(m1033) ? m1033 : [m1033];
                    for (let n1034 = 0; n1034 < p1033.length; n1034++) {
                        const o1034 = p1033[n1034];
                        "string" == typeof o1034 ? p1033[n1034] = {
                            url: o1034,
                            __isNative__: !0
                        } : (o1034.type && (o1034.ext = `.${o1034.type}`, o1034.type = void 0), o1034.url && (o1034.__isNative__ = !0));
                    }
                    const q1033 = [], r1033 = [];
                    e185.loadAny(p1033, null, (k1034, l1034, m1034) => {
                        m1034.content && (f185.includes(m1034.ext) ? q1033.push(m1034.content) : g185.includes(m1034.ext) && r1033.push(m1034.content)), n1033 && n1033(k1034, l1034, m1034);
                    }, (u1033, v1033) => {
                        let w1033 = null;
                        if (!u1033) {
                            v1033 = Array.isArray(v1033) ? v1033 : [v1033];
                            for (let a1034 = 0; a1034 < v1033.length; a1034++) {
                                const b1034 = v1033[a1034];
                                if (!(b1034 instanceof t163)) {
                                    let c1034 = b1034;
                                    const d1034 = p1033[a1034].url;
                                    q1033.includes(c1034) ? t184.create(d1034, b1034, ".png", {}, (i1034, j1034) => {
                                        c1034 = v1033[a1034] = j1034;
                                    }) : r1033.includes(c1034) && t184.create(d1034, b1034, ".mp3", {}, (g1034, h1034) => {
                                        c1034 = v1033[a1034] = h1034;
                                    }), z162.add(d1034, c1034);
                                }
                            }
                            if (v1033.length > 1) {
                                const x1033 = Object.create(null);
                                v1033.forEach(z1033 => {
                                    x1033[z1033._uuid] = z1033;
                                }), w1033 = {
                                    isCompleted: l137,
                                    _map: x1033
                                };
                            }
                            else
                                w1033 = v1033[0];
                        }
                        o1033 && o1033(u1033, w1033);
                    });
                }
                getXMLHttpRequest() {
                    return new XMLHttpRequest();
                }
                getItem(l1033) {
                    return e185.assets.has(l1033) ? {
                        content: e185.assets.get(l1033)
                    } : null;
                }
                loadRes(d1033, e1033, f1033, g1033) {
                    const { type: h1033, onProgress: i1033, onComplete: j1033 } = this._parseLoadResArgs(e1033, f1033, g1033), k1033 = i133(d1033);
                    k1033 && !v183.getInfoWithPath(d1033, h1033) && (d1033 = d1033.slice(0, -k1033.length)), v183.load(d1033, h1033, i1033, j1033);
                }
                loadResArray(s1032, t1032, u1032, v1032) {
                    const { type: w1032, onProgress: x1032, onComplete: y1032 } = this._parseLoadResArgs(t1032, u1032, v1032);
                    s1032.forEach((a1033, b1033) => {
                        const c1033 = i133(a1033);
                        c1033 && !v183.getInfoWithPath(a1033, w1032) && (s1032[b1033] = a1033.slice(0, -c1033.length));
                    }), v183.load(s1032, w1032, x1032, y1032);
                }
                loadResDir(f1032, g1032, h1032, i1032) {
                    const { type: j1032, onProgress: k1032, onComplete: l1032 } = this._parseLoadResArgs(g1032, h1032, i1032);
                    v183.loadDir(f1032, j1032, k1032, (n1032, o1032) => {
                        let p1032 = [];
                        n1032 || (p1032 = v183.getDirWithPath(f1032, j1032).map(r1032 => r1032.path)), l1032 && l1032(n1032, o1032, p1032);
                    });
                }
                getRes(d1032, e1032) {
                    return z162.has(d1032) ? z162.get(d1032) : v183.get(d1032, e1032);
                }
                getResCount() {
                    return z162.count;
                }
                getDependsRecursively(b1032) {
                    if (!b1032)
                        return [];
                    const c1032 = "string" == typeof b1032 ? b1032 : b1032._uuid;
                    return w165.getDepsRecursively(c1032).concat([c1032]);
                }
                get md5Pipe() {
                    return h185;
                }
                get downloader() {
                    return m184;
                }
                get loader() {
                    return e185.parser;
                }
                addDownloadHandlers(t1031) {
                    const u1031 = Object.create(null);
                    for (const v1031 in t1031) {
                        const w1031 = t1031[v1031];
                        u1031[`.${v1031}`] = (y1031, z1031, a1032) => {
                            w1031({
                                url: y1031
                            }, a1032);
                        };
                    }
                    m184.register(u1031);
                }
                addLoadHandlers(l1031) {
                    const m1031 = Object.create(null);
                    for (const n1031 in l1031) {
                        const o1031 = l1031[n1031];
                        m1031[`.${n1031}`] = (q1031, r1031, s1031) => {
                            o1031({
                                content: q1031
                            }, s1031);
                        };
                    }
                    y184.register(m1031);
                }
                release(i1031) {
                    if (Array.isArray(i1031))
                        for (let j1031 = 0; j1031 < i1031.length; j1031++) {
                            let k1031 = i1031[j1031];
                            "string" == typeof k1031 && (k1031 = z162.get(k1031)), e185.releaseAsset(k1031);
                        }
                    else
                        i1031 && ("string" == typeof i1031 && (i1031 = z162.get(i1031)), e185.releaseAsset(i1031));
                }
                releaseAsset(h1031) {
                    e185.releaseAsset(h1031);
                }
                releaseRes(f1031, g1031) {
                    v183.release(f1031, g1031);
                }
                releaseAll() {
                    e185.releaseAll(), z162.clear();
                }
                removeItem(e1031) {
                    return !!z162.remove(e1031);
                }
                setAutoRelease(c1031, d1031) {
                    "object" == typeof c1031 && (c1031 = c1031._uuid), this._autoReleaseSetting[c1031] = !!d1031;
                }
                setAutoReleaseRecursively(y1030, z1030) {
                    "object" == typeof y1030 && (y1030 = y1030._uuid), z1030 = !!z1030, this._autoReleaseSetting[y1030] = z1030;
                    const a1031 = w165.getDepsRecursively(y1030);
                    for (let b1031 = 0; b1031 < a1031.length; b1031++)
                        this._autoReleaseSetting[a1031[b1031]] = z1030;
                }
                isAutoRelease(x1030) {
                    return "object" == typeof x1030 && (x1030 = x1030._uuid), !!this._autoReleaseSetting[x1030];
                }
            }
            g125("CCLoader", i185);
            const j185 = g125("loader", new i185()), k185 = g125("AssetLibrary", {
                init(w1030) {
                    w1030.importBase = w1030.libraryPath, w1030.nativeBase = w1030.rawAssetsBase, e185.init(w1030), w1030.rawAssets && v183.init({
                        base: "",
                        deps: [],
                        scenes: {},
                        redirect: [],
                        debug: !0,
                        packs: {},
                        types: [],
                        versions: {
                            import: [],
                            native: []
                        },
                        name: j163.RESOURCES,
                        importBase: w1030.importBase,
                        nativeBase: w1030.nativeBase,
                        paths: w1030.rawAssets.assets,
                        uuids: Object.keys(w1030.rawAssets.assets),
                        extensionMap: {}
                    });
                },
                loadAsset(t1030, u1030, v1030) {
                    e185.loadAny(t1030, u1030);
                }
            }), l185 = g125("url", {});
            k144(l185, "url", [{
                    name: "normalize",
                    target: e185.utils,
                    targetName: "assetManager.utils",
                    newName: "normalize"
                }, {
                    name: "raw",
                    targetName: "Asset.prototype",
                    newName: "nativeUrl",
                    customFunction: s1030 => s1030.startsWith("resources/") ? o134({
                        path: m133(s1030.substr(10)),
                        bundle: j163.RESOURCES,
                        __isNative__: !0,
                        ext: i133(s1030)
                    }) : ""
                }]), l144(k185, "AssetLibrary", [{
                    name: "getLibUrlNoExt",
                    suggest: "AssetLibrary.getLibUrlNoExt was removed, if you want to transform url, please use assetManager.utils.getUrlWithUuid instead"
                }, {
                    name: "queryAssetInfo",
                    suggest: "AssetLibrary.queryAssetInfo was removed"
                }]), l144(j185, "loader", [{
                    name: "releaseResDir",
                    suggest: "loader.releaseResDir was removed, please use assetManager.releaseAsset instead"
                }, {
                    name: "flowInDeps",
                    suggest: "loader.flowInDeps was removed"
                }, {
                    name: "assetLoader",
                    suggest: "loader.assetLoader was removed, assetLoader and md5Pipe were merged into assetManager.transformPipeline"
                }]), k144(s143, "cc", [{
                    name: "loader",
                    newName: "assetManager",
                    logTimes: 1,
                    customGetter: () => j185
                }, {
                    name: "AssetLibrary",
                    newName: "assetManager",
                    logTimes: 1,
                    customGetter: () => k185
                }, {
                    name: "Pipeline",
                    target: d185,
                    targetName: "AssetManager",
                    newName: "Pipeline",
                    logTimes: 1
                }, {
                    name: "url",
                    targetName: "assetManager",
                    newName: "utils",
                    logTimes: 1,
                    customGetter: () => l185
                }]), l144(s143, "cc", [{
                    name: "LoadingItems",
                    suggest: b126(1400, "LoadingItems", "AssetManager.Task")
                }]), k144(s145, "macro", [{
                    name: "DOWNLOAD_MAX_CONCURRENT",
                    target: m184,
                    targetName: "assetManager.downloader",
                    newName: "maxConcurrency"
                }]);
            const m185 = s183._autoRelease;
            s183._autoRelease = function (k1030, l1030, m1030) {
                m185.call(s183, k1030, l1030, m1030);
                const n1030 = j185._autoReleaseSetting, o1030 = Object.keys(n1030);
                for (let p1030 = 0; p1030 < o1030.length; p1030++) {
                    const q1030 = o1030[p1030];
                    if (!0 === n1030[q1030]) {
                        const r1030 = z162.get(q1030);
                        r1030 && s183.tryRelease(r1030);
                    }
                }
            };
            const n185 = jsb.Texture2D, o185 = jsb.ImageAsset, p185 = jsb.BuiltinResMgr, q185 = p185.prototype;
            q185.init = function () {
                this._resources = {}, this._materialsToBeCompiled = [];
                const a1030 = this._resources, b1030 = new Uint8Array(16);
                for (let i1030 = 0; i1030 < 4; i1030++) {
                    const j1030 = 4 * i1030;
                    b1030[j1030] = 0, b1030[j1030 + 1] = 0, b1030[j1030 + 2] = 0, b1030[j1030 + 3] = 255;
                }
                const c1030 = {
                    width: 2,
                    height: 2,
                    _data: b1030,
                    _compressed: !1,
                    format: n185.PixelFormat.RGBA8888
                }, d1030 = new o185(c1030), e1030 = new n185();
                if (e1030._uuid = "black-texture", e1030.image = d1030, a1030[e1030._uuid] = e1030, s143.SpriteFrame) {
                    const f1030 = new s143.SpriteFrame(), g1030 = d1030, h1030 = new n185();
                    h1030.image = g1030, f1030.texture = h1030, f1030._uuid = "default-spriteframe", a1030[f1030._uuid] = f1030;
                }
                this.initBuiltinRes();
            }, q185.get = function (z1029) {
                return this._resources[z1029] || this.getAsset(z1029);
            }, q185.compileBuiltinMaterial = function () {
                for (let w1029 = 0; w1029 < this._materialsToBeCompiled.length; ++w1029) {
                    const x1029 = this._materialsToBeCompiled[w1029];
                    for (let y1029 = 0; y1029 < x1029.passes.length; ++y1029)
                        x1029.passes[y1029].tryCompile();
                }
                this._materialsToBeCompiled.length = 0;
            }, q185.loadBuiltinAssets = function () {
                const k1029 = r145.querySettings(q145.Category.ENGINE, "builtinAssets");
                if (!k1029)
                    return Promise.resolve();
                const l1029 = this._resources;
                return new Promise((n1029, o1029) => {
                    e185.loadBundle(j163.INTERNAL, q1029 => {
                        q1029 ? o1029(q1029) : e185.loadAny(k1029, (s1029, t1029) => {
                            s1029 ? o1029(s1029) : (t1029.forEach(v1029 => {
                                l1029[v1029.name] = v1029, v1029.nativeUrl, s183.addIgnoredAsset(v1029), this.addAsset(v1029.name, v1029), v1029 instanceof s143.Material && this._materialsToBeCompiled.push(v1029);
                            }), n1029());
                        });
                    });
                });
            };
            const r185 = g125("builtinResMgr", s143.builtinResMgr = p185.getInstance());
            class s185 extends o156 {
                constructor() {
                    super(), this._compScheduler = void 0, this._nodeActivator = void 0, this._invalid = void 0, this._paused = void 0, this._root = void 0, this._loadingScene = void 0, this._scene = void 0, this._totalFrames = void 0, this._scheduler = void 0, this._systems = void 0, this._persistRootNodes = {}, this._invalid = !1, this._paused = !1, this._root = null, this._loadingScene = "", this._scene = null, this._totalFrames = 0, this._scheduler = new g156(), this._compScheduler = new l182(), this._nodeActivator = new v182(), this._systems = [];
                }
                calculateDeltaTime(j1029) { }
                end() {
                    this.once(s185.EVENT_END_FRAME, () => {
                        this.purgeDirector();
                    });
                }
                pause() {
                    this._paused || (this._paused = !0);
                }
                purgeDirector() {
                    this._scheduler.unscheduleAll(), this._compScheduler.unscheduleAll(), this._nodeActivator.reset(), c131(this._scene) && this._scene.destroy(), this._scene = null, this.stopAnimation(), e185.releaseAll();
                }
                reset() {
                    var g1029;
                    this.purgeDirector();
                    for (const h1029 in this._persistRootNodes)
                        this.removePersistRootNode(this._persistRootNodes[h1029]);
                    null === (g1029 = this.getScene()) || void 0 === g1029 || g1029.destroy(), this.emit(s185.EVENT_RESET), this.startAnimation();
                }
                runSceneImmediate(v1028, w1028, x1028) {
                    v1028 instanceof n166 && (v1028 = v1028.scene), a126(v1028 instanceof y181, 1216), v1028._load();
                    const y1028 = Object.keys(this._persistRootNodes).map(f1029 => this._persistRootNodes[f1029]);
                    for (let b1029 = 0; b1029 < y1028.length; b1029++) {
                        const c1029 = y1028[b1029];
                        c1029.emit(h175.EventType.SCENE_CHANGED_FOR_PERSISTS, v1028.renderScene);
                        const d1029 = v1028.uuid === c1029._originalSceneId && v1028.getChildByUuid(c1029.uuid);
                        if (d1029) {
                            const e1029 = d1029.getSiblingIndex();
                            c1029.hideFlags &= ~m152.Flags.DontSave, c1029.hideFlags |= m152.Flags.DontSave & d1029.hideFlags, d1029._destroyImmediate(), v1028.insertChild(c1029, e1029);
                        }
                        else
                            c1029.hideFlags |= m152.Flags.DontSave, c1029.parent = v1028;
                    }
                    const z1028 = this._scene;
                    c131(z1028) && z1028.destroy(), s183._autoRelease(z1028, v1028, this._persistRootNodes), this._scene = null, m152._deferredDestroy(), w1028 && w1028(), this.emit(s185.EVENT_BEFORE_SCENE_LAUNCH, v1028), this._scene = v1028, v1028._activate(), this._root && this._root.resetCumulativeTime(), this.startAnimation(), x1028 && x1028(null, v1028), this.emit(s185.EVENT_AFTER_SCENE_LAUNCH, v1028);
                }
                runScene(r1028, s1028, t1028) {
                    r1028 instanceof n166 && (r1028 = r1028.scene), a126(Boolean(r1028), 1205), a126(r1028 instanceof y181, 1216), this.once(s185.EVENT_END_FRAME, () => {
                        this.runSceneImmediate(r1028, s1028, t1028);
                    });
                }
                loadScene(i1028, j1028, k1028) {
                    if (this._loadingScene)
                        return y125(1208, i1028, this._loadingScene), !1;
                    const l1028 = e185.bundles.find(q1028 => !!q1028.getSceneInfo(i1028));
                    return l1028 ? (this.emit(s185.EVENT_BEFORE_SCENE_LOADING, i1028), this._loadingScene = i1028, console.time(`LoadScene ${i1028}`), l1028.loadScene(i1028, (o1028, p1028) => {
                        console.timeEnd(`LoadScene ${i1028}`), this._loadingScene = "", o1028 ? (r125(o1028), j1028 && j1028(o1028)) : this.runSceneImmediate(p1028, k1028, j1028);
                    }), !0) : (z125(1209, i1028), !1);
                }
                preloadScene(b1028, c1028, d1028) {
                    const e1028 = e185.bundles.find(h1028 => !!h1028.getSceneInfo(b1028));
                    if (e1028)
                        e1028.preloadScene(b1028, null, c1028, d1028);
                    else {
                        const g1028 = `Can not preload the scene "${b1028}" because it is not in the build settings.`;
                        d1028 && d1028(new Error(g1028)), r125(`preloadScene: ${g1028}`);
                    }
                }
                resume() {
                    this._paused && (this._paused = !1);
                }
                get root() {
                    return this._root;
                }
                getScene() {
                    return this._scene;
                }
                getDeltaTime() {
                    return s143.game.deltaTime;
                }
                getTotalTime() {
                    return s143.game.totalTime;
                }
                getCurrentTime() {
                    return s143.game.frameStartTime;
                }
                getTotalFrames() {
                    return this._totalFrames;
                }
                isPaused() {
                    return this._paused;
                }
                getScheduler() {
                    return this._scheduler;
                }
                setScheduler(a1028) {
                    this._scheduler !== a1028 && (this.unregisterSystem(this._scheduler), this._scheduler = a1028, this.registerSystem(g156.ID, a1028, 200));
                }
                registerSystem(x1027, y1027, z1027) {
                    y1027.id = x1027, y1027.priority = z1027, this._systems.push(y1027), this._systems.sort(a156.sortByPriority);
                }
                unregisterSystem(w1027) {
                    k127(this._systems, w1027), this._systems.sort(a156.sortByPriority);
                }
                getSystem(t1027) {
                    return this._systems.find(v1027 => v1027.id === t1027);
                }
                getAnimationManager() {
                    return this.getSystem(s143.AnimationManager.ID);
                }
                startAnimation() {
                    this._invalid = !1;
                }
                stopAnimation() {
                    this._invalid = !0;
                }
                mainLoop(r1027) {
                    let s1027;
                    s1027 = s143.game._calculateDT(r1027), this.tick(s1027);
                }
                tick(o1027) {
                    if (!this._invalid) {
                        if (this.emit(s185.EVENT_BEGIN_FRAME), s168._frameDispatchEvents(), !this._paused) {
                            this.emit(s185.EVENT_BEFORE_UPDATE), this._compScheduler.startPhase(), this._compScheduler.updatePhase(o1027);
                            for (let q1027 = 0; q1027 < this._systems.length; ++q1027)
                                this._systems[q1027].update(o1027);
                            this._compScheduler.lateUpdatePhase(o1027), this.emit(s185.EVENT_AFTER_UPDATE), m152._deferredDestroy();
                            for (let p1027 = 0; p1027 < this._systems.length; ++p1027)
                                this._systems[p1027].postUpdate(o1027);
                        }
                        this.emit(s185.EVENT_BEFORE_DRAW), p183.updateAllDirtyRenderers(), this._root.frameMove(o1027), this.emit(s185.EVENT_AFTER_DRAW), h175.resetHasChangedFlags(), h175.clearNodeArray(), w155.update(o1027), this.emit(s185.EVENT_END_FRAME), this._totalFrames++;
                    }
                }
                buildRenderPipeline() {
                    this._root && (this._root.customPipeline.beginSetup(), s143.rendering.getCustomPipeline(s145.CUSTOM_PIPELINE_NAME).setup(this._root.cameraList, this._root.customPipeline), this._root.customPipeline.endSetup());
                }
                setupRenderPipelineBuilder() {
                    "" !== s145.CUSTOM_PIPELINE_NAME && s143.rendering && this._root && this._root.usesCustomPipeline && this.on(s185.EVENT_BEFORE_RENDER, this.buildRenderPipeline, this);
                }
                init() {
                    this._totalFrames = 0, this._paused = !1, this.registerSystem(g156.ID, this._scheduler, 200), this._root = new s174(b162.gfxDevice), this._root.initialize({}), this.setupRenderPipelineBuilder();
                    for (let n1027 = 0; n1027 < this._systems.length; n1027++)
                        this._systems[n1027].init();
                    this.emit(s185.EVENT_INIT);
                }
                addPersistRootNode(k1027) {
                    if (!h175.isNode(k1027) || !k1027.uuid)
                        return void y125(3800);
                    const l1027 = k1027.uuid;
                    if (!this._persistRootNodes[l1027]) {
                        const m1027 = this._scene;
                        if (c131(m1027))
                            if (k1027.parent) {
                                if (!(k1027.parent instanceof y181))
                                    return void y125(3801);
                                if (k1027.parent !== m1027)
                                    return void y125(3802);
                                k1027._originalSceneId = m1027.uuid;
                            }
                            else
                                k1027.parent = m1027, k1027._originalSceneId = m1027.uuid;
                        this._persistRootNodes[l1027] = k1027, k1027._persistNode = !0, s183._addPersistNodeRef(k1027);
                    }
                }
                removePersistRootNode(i1027) {
                    const j1027 = i1027.uuid || "";
                    i1027 === this._persistRootNodes[j1027] && (delete this._persistRootNodes[j1027], i1027._persistNode = !1, i1027._originalSceneId = "", s183._removePersistNodeRef(i1027));
                }
                isPersistRootNode(h1027) {
                    return !!h1027._persistNode;
                }
            }
            g125("Director", s185), s185.EVENT_INIT = "director_init", s185.EVENT_RESET = "director_reset", s185.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading", s185.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch", s185.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch", s185.EVENT_BEFORE_UPDATE = "director_before_update", s185.EVENT_AFTER_UPDATE = "director_after_update", s185.EVENT_BEFORE_DRAW = "director_before_draw", s185.EVENT_AFTER_DRAW = "director_after_draw", s185.EVENT_BEFORE_COMMIT = "director_before_commit", s185.EVENT_BEFORE_RENDER = "director_before_render", s185.EVENT_AFTER_RENDER = "director_after_render", s185.EVENT_BEFORE_PHYSICS = "director_before_physics", s185.EVENT_AFTER_PHYSICS = "director_after_physics", s185.EVENT_BEGIN_FRAME = "director_begin_frame", s185.EVENT_END_FRAME = "director_end_frame", s185.instance = void 0, s143.Director = s185;
            const t185 = g125("director", s185.instance = s143.director = new s185()), u185 = void 0 !== globalThis.jsb && void 0 !== jsb.window ? jsb.window : window, v185 = u185.document;
            class w185 {
                constructor() {
                    this._rafHandle = 0, this._onTick = null, this._targetFrameRate = 60, this._isPlaying = !1, this._updateCallback = void 0, this._updateCallback = () => {
                        this._isPlaying && (this._rafHandle = requestAnimationFrame(this._updateCallback)), this._onTick && this._onTick();
                    };
                }
                get targetFrameRate() {
                    return this._targetFrameRate;
                }
                set targetFrameRate(f1027) {
                    this._targetFrameRate !== f1027 && (this._targetFrameRate = f1027, jsb.setPreferredFramesPerSecond(this._targetFrameRate), this._isPlaying && (this.stop(), this.start()));
                }
                set onTick(e1027) {
                    this._onTick = e1027;
                }
                get onTick() {
                    return this._onTick;
                }
                start() {
                    this._isPlaying || (this._rafHandle = requestAnimationFrame(this._updateCallback), this._isPlaying = !0);
                }
                stop() {
                    this._isPlaying && (cancelAnimationFrame(this._rafHandle), this._rafHandle = 0, this._isPlaying = !1);
                }
            }
            let x185, y185, z185;
            !function (d1027) {
                d1027[d1027.NONE = -1] = "NONE", d1027[d1027.LEFT = 0] = "LEFT", d1027[d1027.RIGHT = 1] = "RIGHT";
            }(x185 || (x185 = {})), function (c1027) {
                c1027[c1027.SESSION_RUNNING = 2] = "SESSION_RUNNING", c1027[c1027.VIEW_COUNT = 6] = "VIEW_COUNT", c1027[c1027.SWAPCHAIN_WIDTH = 7] = "SWAPCHAIN_WIDTH", c1027[c1027.SWAPCHAIN_HEIGHT = 8] = "SWAPCHAIN_HEIGHT", c1027[c1027.DEVICE_IPD = 37] = "DEVICE_IPD", c1027[c1027.SPLIT_AR_GLASSES = 42] = "SPLIT_AR_GLASSES";
            }(y185 || (y185 = {})), function (b1027) {
                b1027[b1027.VIEW_LEFT = 0] = "VIEW_LEFT", b1027[b1027.HAND_LEFT = 1] = "HAND_LEFT", b1027[b1027.AIM_LEFT = 2] = "AIM_LEFT", b1027[b1027.VIEW_RIGHT = 3] = "VIEW_RIGHT", b1027[b1027.HAND_RIGHT = 4] = "HAND_RIGHT", b1027[b1027.AIM_RIGHT = 5] = "AIM_RIGHT", b1027[b1027.HEAD_MIDDLE = 6] = "HEAD_MIDDLE";
            }(z185 || (z185 = {}));
            const a186 = new s147();
            class b186 {
                get isFinished() {
                    return this._curTime >= this.settings.totalTime;
                }
                set curTime(a1027) {
                    this._curTime = a1027;
                }
                get curTime() {
                    return this._curTime;
                }
                init() {
                    var i1026, j1026, k1026, l1026, m1026, n1026;
                    if (this.settings = {
                        displayRatio: null !== (i1026 = r145.querySettings(q145.Category.SPLASH_SCREEN, "displayRatio")) && void 0 !== i1026 ? i1026 : .4,
                        totalTime: null !== (j1026 = r145.querySettings(q145.Category.SPLASH_SCREEN, "totalTime")) && void 0 !== j1026 ? j1026 : 3e3,
                        watermarkLocation: null !== (k1026 = r145.querySettings(q145.Category.SPLASH_SCREEN, "watermarkLocation")) && void 0 !== k1026 ? k1026 : "default",
                        autoFit: null === (l1026 = r145.querySettings(q145.Category.SPLASH_SCREEN, "autoFit")) || void 0 === l1026 || l1026,
                        logo: null !== (m1026 = r145.querySettings(q145.Category.SPLASH_SCREEN, "logo")) && void 0 !== m1026 ? m1026 : void 0,
                        background: null !== (n1026 = r145.querySettings(q145.Category.SPLASH_SCREEN, "background")) && void 0 !== n1026 ? n1026 : void 0
                    }, this._curTime = 0, !(this.settings.totalTime <= 0 || void 0 === this.settings.logo || void 0 === this.settings.background)) {
                        this.device = s143.director.root.device, this.swapchain = s143.director.root.mainWindow.swapchain, this.preInit(), this.initLayout(), "default" === this.settings.logo.type && this.initWaterMark();
                        let o1026 = Promise.resolve(), p1026 = Promise.resolve();
                        return "custom" === this.settings.background.type && (o1026 = new Promise((w1026, x1026) => {
                            this.bgImage = new u143.Image(), this.bgImage.onload = () => {
                                this.initBG(), w1026();
                            }, this.bgImage.onerror = () => {
                                x1026();
                            }, this.bgImage.src = this.settings.background.base64;
                        })), "none" !== this.settings.logo.type && (p1026 = new Promise((s1026, t1026) => {
                            this.logoImage = new u143.Image(), this.logoImage.onload = () => {
                                this.initLogo(), s1026();
                            }, this.logoImage.onerror = () => {
                                t1026();
                            }, this.logoImage.src = this.settings.logo.base64;
                        })), Promise.all([o1026, p1026]);
                    }
                    return this.settings.totalTime = 0, Promise.resolve([]);
                }
                preInit() {
                    var w1025;
                    const x1025 = null === (w1025 = this.settings.background) || void 0 === w1025 ? void 0 : w1025.color;
                    this.clearColors = x1025 ? [new t159(x1025.x, x1025.y, x1025.z, x1025.w)] : [new t159(0, 0, 0, 1)];
                    const { device: y1025, swapchain: z1025 } = this;
                    this.renderArea = new l159(0, 0, z1025.width, z1025.height), this.cmdBuff = y1025.commandBuffer;
                    const a1026 = new Float32Array([.5, .5, 1, 0, -.5, .5, 0, 0, .5, -.5, 1, 1, -.5, -.5, 0, 1]), b1026 = 4 * Float32Array.BYTES_PER_ELEMENT, c1026 = 4 * b1026;
                    this.vertexBuffers = y1025.createBuffer(new x159(w157.VERTEX | w157.TRANSFER_DST, z157.DEVICE, c1026, b1026)), this.vertexBuffers.update(a1026);
                    const d1026 = new Uint16Array([0, 1, 2, 1, 3, 2]), e1026 = Uint16Array.BYTES_PER_ELEMENT, f1026 = 6 * e1026;
                    this.indicesBuffers = y1025.createBuffer(new x159(w157.INDEX | w157.TRANSFER_DST, z157.DEVICE, f1026, e1026)), this.indicesBuffers.update(d1026);
                    const g1026 = [new o160("a_position", t157.RG32F), new o160("a_texCoord", t157.RG32F)], h1026 = new q160(g1026, [this.vertexBuffers], this.indicesBuffers);
                    this.quadAssmebler = y1025.createInputAssembler(h1026), this.projection = new o147(), o147.ortho(this.projection, -1, 1, -1, 1, -1, 1, y1025.capabilities.clipSpaceMinZ, y1025.capabilities.clipSpaceSignY, z1025.surfaceTransform), this.isMobile = i157.isMobile;
                }
                initLayout() {
                    this.isMobile ? (this.bgWidth = 812, this.bgHeight = 375, this.logoWidthTemp = 70, this.logoHeightTemp = 100, this.textSize = 12, this.textHeight = this.textSize + this.textExpandSize, this.textXTrans = .5, this.textYExtraTrans = 16) : (this.bgWidth = 1920, this.bgHeight = 1080, this.logoWidthTemp = 140, this.logoHeightTemp = 200, this.textSize = 24, this.textHeight = this.textSize + this.textExpandSize, this.textXTrans = .5, this.textYExtraTrans = 32), this.logoXTrans = .5, this.logoYTrans = 1 / 6 + 2.5 / 6, this.initScale();
                }
                initScale() {
                    const r1025 = this.swapchain.width, s1025 = this.swapchain.height;
                    let t1025 = this.isMobile ? 375 : 1080, u1025 = this.isMobile ? 812 : 1920;
                    if (r1025 > s1025) {
                        const v1025 = u1025;
                        u1025 = t1025, t1025 = v1025;
                    }
                    this.scaleSize = r1025 / s1025 > 16 / 9 ? s1025 / u1025 : r1025 / t1025;
                }
                update(e1025) {
                    const f1025 = this.settings, { device: g1025, swapchain: h1025 } = this;
                    o147.ortho(this.projection, -1, 1, -1, 1, -1, 1, g1025.capabilities.clipSpaceMinZ, g1025.capabilities.clipSpaceSignY, h1025.surfaceTransform);
                    const i1025 = h1025.width, j1025 = h1025.height;
                    this.initScale(), this._curTime += 1e3 * e1025;
                    const k1025 = m131(y128(this._curTime / f1025.totalTime));
                    let l1025 = 1, m1025 = 1;
                    "custom" === this.settings.background.type && (i1025 < j1025 ? (l1025 = j1025 * this.bgRatio, m1025 = j1025) : (l1025 = i1025, m1025 = i1025 * this.bgRatio), this.bgMat.setProperty("resolution", a186.set(i1025, j1025), 0), this.bgMat.setProperty("scale", a186.set(l1025, m1025), 0), this.bgMat.setProperty("translate", a186.set(.5 * i1025, .5 * j1025), 0), this.bgMat.setProperty("percent", 1), this.bgMat.setProperty("u_projection", this.projection), this.bgMat.passes[0].update());
                    const n1025 = j1025 * this.logoYTrans;
                    if ("none" !== this.settings.logo.type && (l1025 = this.logoWidth * this.scaleSize * f1025.displayRatio, m1025 = this.logoHeight * this.scaleSize * f1025.displayRatio, this.logoMat.setProperty("resolution", a186.set(i1025, j1025), 0), this.logoMat.setProperty("scale", a186.set(l1025, m1025), 0), this.logoMat.setProperty("translate", a186.set(i1025 * this.logoXTrans, n1025), 0), this.logoMat.setProperty("percent", k1025), this.logoMat.setProperty("u_projection", this.projection), this.logoMat.passes[0].update()), "default" === this.settings.logo.type && this.watermarkMat) {
                        const o1025 = this.watermarkTexture.width, p1025 = this.watermarkTexture.height;
                        l1025 = o1025, m1025 = p1025;
                        const q1025 = n1025 - (.5 * this.logoHeight * f1025.displayRatio + this.textYExtraTrans) * this.scaleSize - .5 * p1025;
                        this.watermarkMat.setProperty("resolution", a186.set(i1025, j1025), 0), this.watermarkMat.setProperty("scale", a186.set(l1025, m1025), 0), this.watermarkMat.setProperty("translate", a186.set(i1025 * this.textXTrans, q1025), 0), this.watermarkMat.setProperty("percent", k1025), this.watermarkMat.setProperty("u_projection", this.projection), this.watermarkMat.passes[0].update();
                    }
                    this.frame();
                }
                initBG() {
                    const y1024 = this.device;
                    this.bgMat = new c178(), this.bgMat.initialize({
                        effectName: "util/splash-screen"
                    });
                    const z1024 = new e160();
                    z1024.addressU = h158.CLAMP, z1024.addressV = h158.CLAMP, z1024.addressW = h158.CLAMP, this.sampler = y1024.getSampler(z1024), this.bgTexture = y1024.createTexture(new c160(a158.TEX2D, b158.SAMPLED | b158.TRANSFER_DST, t157.RGBA8, this.bgImage.width, this.bgImage.height));
                    const a1025 = this.bgMat.passes[0], b1025 = a1025.getBinding("mainTexture");
                    a1025.bindTexture(b1025, this.bgTexture), this.shader = a1025.getShaderVariant();
                    const c1025 = a1025.descriptorSet;
                    c1025.bindSampler(b1025, this.sampler), c1025.update();
                    const d1025 = new r159();
                    d1025.texExtent.width = this.bgImage.width, d1025.texExtent.height = this.bgImage.height, d1025.texExtent.depth = 1, y1024.copyTexImagesToTexture([this.bgImage], this.bgTexture, [d1025]);
                }
                initLogo() {
                    const r1024 = this.device;
                    this.logoMat = new c178(), this.logoMat.initialize({
                        effectName: "util/splash-screen"
                    });
                    const s1024 = new e160();
                    s1024.addressU = h158.CLAMP, s1024.addressV = h158.CLAMP, s1024.addressW = h158.CLAMP, this.sampler = r1024.getSampler(s1024), this.logoTexture = r1024.createTexture(new c160(a158.TEX2D, b158.SAMPLED | b158.TRANSFER_DST, t157.RGBA8, this.logoImage.width, this.logoImage.height));
                    const t1024 = this.logoMat.passes[0], u1024 = t1024.getBinding("mainTexture");
                    t1024.bindTexture(u1024, this.logoTexture), this.shader = t1024.getShaderVariant();
                    const v1024 = t1024.descriptorSet;
                    v1024.bindSampler(u1024, this.sampler), v1024.update();
                    const w1024 = new r159();
                    w1024.texExtent.width = this.logoImage.width, w1024.texExtent.height = this.logoImage.height, w1024.texExtent.depth = 1, r1024.copyTexImagesToTexture([this.logoImage], this.logoTexture, [w1024]);
                    const x1024 = this.logoImage.width / this.logoImage.height;
                    x1024 < 1 ? (this.logoWidth = this.logoWidthTemp, this.logoHeight = this.logoWidthTemp / x1024) : (this.logoWidth = this.logoHeightTemp * x1024, this.logoHeight = this.logoHeightTemp);
                }
                initWaterMark() {
                    const k1024 = u143.document.createElement("canvas");
                    k1024.height = this.textHeight * this.scaleSize, k1024.style.width = `${k1024.width}`, k1024.style.height = `${k1024.height}`;
                    const l1024 = "Created with Cocos", m1024 = k1024.getContext("2d");
                    m1024.font = this.textSize * this.scaleSize + "px Arial", m1024.textBaseline = "top", m1024.textAlign = "center", m1024.fillStyle = "#707070";
                    const n1024 = m1024.measureText(l1024).width + 10;
                    k1024.width = n1024, m1024.font = this.textSize * this.scaleSize + "px Arial", m1024.textBaseline = "top", m1024.textAlign = "center", m1024.fillStyle = "#707070", m1024.fillText(l1024, k1024.width / 2, 0);
                    const o1024 = new r159();
                    o1024.texExtent.width = k1024.width, o1024.texExtent.height = k1024.height, o1024.texExtent.depth = 1, this.watermarkTexture = this.device.createTexture(new c160(a158.TEX2D, b158.SAMPLED | b158.TRANSFER_DST, t157.RGBA8, k1024.width, k1024.height)), this.device.copyTexImagesToTexture([k1024], this.watermarkTexture, [o1024]), this.watermarkMat = new c178(), this.watermarkMat.initialize({
                        effectName: "util/splash-screen"
                    });
                    const p1024 = this.watermarkMat.passes[0], q1024 = p1024.getBinding("mainTexture");
                    p1024.bindTexture(q1024, this.watermarkTexture), p1024.descriptorSet.update();
                }
                frame() {
                    const { device: u1023, swapchain: v1023 } = this;
                    if (!i157.isXR || xr.entry.isRenderAllowable()) {
                        const w1023 = i157.isXR ? 2 : 1;
                        for (let x1023 = 0; x1023 < w1023; x1023++) {
                            if (i157.isXR) {
                                xr.entry.renderLoopStart(x1023);
                                const h1024 = xr.entry.getEyeFov(x1023);
                                let i1024 = 1, j1024 = 1;
                                x1023 === x185.LEFT ? i1024 = Math.abs(Math.tan(h1024[0])) / Math.abs(Math.tan(h1024[1])) : x1023 === x185.RIGHT && (j1024 = Math.abs(Math.tan(h1024[1])) / Math.abs(Math.tan(h1024[0]))), o147.ortho(this.projection, -i1024, j1024, -1, 1, -1, 1, u1023.capabilities.clipSpaceMinZ, u1023.capabilities.clipSpaceSignY, v1023.surfaceTransform), this.projection.m00 = n147[v1023.surfaceTransform][0], this.projection.m05 = n147[v1023.surfaceTransform][3] * u1023.capabilities.clipSpaceSignY, "custom" === this.settings.background.type && (this.bgMat.setProperty("u_projection", this.projection), this.bgMat.passes[0].update()), "none" !== this.settings.logo.type && (this.logoMat.setProperty("u_projection", this.projection), this.logoMat.passes[0].update()), "default" === this.settings.logo.type && this.watermarkMat && (this.watermarkMat.setProperty("u_projection", this.projection), this.watermarkMat.passes[0].update());
                            }
                            u1023.enableAutoBarrier(!0), u1023.acquire([v1023]);
                            const y1023 = this.cmdBuff, z1023 = s143.director.root.mainWindow.framebuffer, a1024 = this.renderArea;
                            if (a1024.width = v1023.width, a1024.height = v1023.height, y1023.begin(), y1023.beginRenderPass(z1023.renderPass, z1023, a1024, this.clearColors, 1, 0), "custom" === this.settings.background.type) {
                                const f1024 = this.bgMat.passes[0], g1024 = k173.getOrCreatePipelineState(u1023, f1024, this.shader, z1023.renderPass, this.quadAssmebler);
                                y1023.bindPipelineState(g1024), y1023.bindDescriptorSet(w169.MATERIAL, f1024.descriptorSet), y1023.bindInputAssembler(this.quadAssmebler), y1023.draw(this.quadAssmebler);
                            }
                            if ("none" !== this.settings.logo.type) {
                                const d1024 = this.logoMat.passes[0], e1024 = k173.getOrCreatePipelineState(u1023, d1024, this.shader, z1023.renderPass, this.quadAssmebler);
                                y1023.bindPipelineState(e1024), y1023.bindDescriptorSet(w169.MATERIAL, d1024.descriptorSet), y1023.bindInputAssembler(this.quadAssmebler), y1023.draw(this.quadAssmebler);
                            }
                            if ("default" === this.settings.logo.type && this.watermarkMat) {
                                const b1024 = this.watermarkMat.passes[0], c1024 = k173.getOrCreatePipelineState(u1023, b1024, this.shader, z1023.renderPass, this.quadAssmebler);
                                y1023.bindPipelineState(c1024), y1023.bindDescriptorSet(w169.MATERIAL, b1024.descriptorSet), y1023.bindInputAssembler(this.quadAssmebler), y1023.draw(this.quadAssmebler);
                            }
                            y1023.endRenderPass(), y1023.end(), u1023.flushCommands([y1023]), u1023.queue.submit([y1023]), u1023.present(), u1023.enableAutoBarrier(!s143.rendering), i157.isXR && xr.entry.renderLoopEnd(x1023);
                        }
                    }
                }
                destroy() {
                    this.device = null, this.swapchain = null, this.clearColors = null, "custom" === this.settings.background.type && (this.bgImage.destroy && this.bgImage.destroy(), this.bgImage = null, this.bgMat.destroy(), this.bgMat = null, this.bgTexture.destroy(), this.bgTexture = null), "none" !== this.settings.logo.type && (this.logoImage.destroy && this.logoImage.destroy(), this.logoImage = null, this.logoMat.destroy(), this.logoMat = null, this.logoTexture.destroy(), this.logoTexture = null), this.renderArea = null, this.cmdBuff = null, this.shader = null, this.quadAssmebler.destroy(), this.quadAssmebler = null, this.vertexBuffers.destroy(), this.vertexBuffers = null, this.indicesBuffers.destroy(), this.indicesBuffers = null, this.sampler = null, "default" === this.settings.logo.type && this.watermarkTexture && (this.watermarkMat.destroy(), this.watermarkMat = null, this.watermarkTexture.destroy(), this.watermarkTexture = null), this.settings = null;
                }
                static get instance() {
                    return b186._ins || (b186._ins = new b186()), b186._ins;
                }
                constructor() {
                    this.settings = void 0, this._curTime = 0, this.device = void 0, this.swapchain = void 0, this.shader = void 0, this.sampler = void 0, this.cmdBuff = void 0, this.quadAssmebler = void 0, this.vertexBuffers = void 0, this.indicesBuffers = void 0, this.renderArea = void 0, this.clearColors = void 0, this.projection = void 0, this.isMobile = !1, this.bgMat = void 0, this.bgImage = void 0, this.bgTexture = void 0, this.logoMat = void 0, this.logoImage = void 0, this.logoTexture = void 0, this.watermarkMat = void 0, this.watermarkTexture = void 0, this.bgWidth = 1920, this.bgHeight = 1080, this.bgRatio = 16 / 9, this.logoWidthTemp = 140, this.logoHeightTemp = 200, this.logoWidth = 0, this.logoHeight = 0, this.logoXTrans = .5, this.logoYTrans = 1 / 6 + 2.5 / 6, this.textSize = 24, this.textHeight = 24, this.textXTrans = .5, this.textYExtraTrans = 32, this.textExpandSize = 4, this.scaleSize = 1;
                }
            }
            b186._ins = void 0, s143.internal.SplashScreen = b186;
            const c186 = new class {
                constructor() {
                    this._data = null;
                }
                init(k1023 = "") {
                    return s143.rendering && s143.rendering.enableEffectImport && k1023 ? new Promise((m1023, n1023) => {
                        if (k1023.startsWith("http")) {
                            const r1023 = new XMLHttpRequest();
                            r1023.open("GET", k1023), r1023.responseType = "arraybuffer", r1023.onload = () => {
                                this._data = r1023.response, m1023();
                            }, r1023.onerror = () => {
                                n1023(new Error("request effect settings failed!"));
                            }, r1023.send(null);
                        }
                        else
                            fsUtils.readArrayBuffer(k1023, (p1023, q1023) => {
                                p1023 ? n1023(p1023) : (this._data = q1023, m1023());
                            });
                    }) : Promise.resolve();
                }
                get data() {
                    return this._data;
                }
            }();
            s143.effectSettings = c186;
            class d186 extends o156 {
                constructor(...j1023) {
                    super(...j1023), this.frame = null, this.container = null, this.canvas = null, this.renderType = -1, this.eventTargetOn = super.on, this.eventTargetOnce = super.once, this.config = {}, this.onStart = null, this.frameTime = 1e3 / 60, this._isCloning = !1, this._inited = !1, this._engineInited = !1, this._rendererInitialized = !1, this._paused = !0, this._pausedByEngine = !1, this._frameRate = 60, this._pacer = null, this._initTime = 0, this._startTime = 0, this._deltaTime = 0, this._useFixedDeltaTime = !1, this._shouldLoadLaunchScene = !0, this.onPreBaseInitDelegate = new p156(), this.onPostBaseInitDelegate = new p156(), this.onPreInfrastructureInitDelegate = new p156(), this.onPostInfrastructureInitDelegate = new p156(), this.onPreSubsystemInitDelegate = new p156(), this.onPostSubsystemInitDelegate = new p156(), this.onPreProjectInitDelegate = new p156(), this.onPostProjectInitDelegate = new p156();
                }
                get inited() {
                    return this._inited;
                }
                get frameRate() {
                    return this._frameRate;
                }
                set frameRate(i1023) {
                    "number" != typeof i1023 && (i1023 = parseInt(i1023, 10), Number.isNaN(i1023) && (i1023 = 60)), this._frameRate = i1023, this.frameTime = 1e3 / i1023, this._pacer && (this._pacer.targetFrameRate = this._frameRate);
                }
                get deltaTime() {
                    return this._useFixedDeltaTime ? this.frameTime / 1e3 : this._deltaTime;
                }
                get totalTime() {
                    return performance.now() - this._initTime;
                }
                get frameStartTime() {
                    return this._startTime;
                }
                setFrameRate(h1023) {
                    this.frameRate = h1023;
                }
                getFrameRate() {
                    return this.frameRate;
                }
                step() {
                    t185.tick(this._calculateDT(!0));
                }
                pauseByEngine() {
                    this._paused || (this._pausedByEngine = !0, this.pause());
                }
                resumeByEngine() {
                    this._pausedByEngine && (this.resume(), this._pausedByEngine = !1);
                }
                pause() {
                    var g1023;
                    this._paused || (this._paused = !0, null === (g1023 = this._pacer) || void 0 === g1023 || g1023.stop(), this.emit(d186.EVENT_PAUSE));
                }
                resume() {
                    var f1023;
                    this._paused && (s168._clearEvents(), this._paused = !1, null === (f1023 = this._pacer) || void 0 === f1023 || f1023.start(), this.emit(d186.EVENT_RESUME));
                }
                isPaused() {
                    return this._paused;
                }
                restart() {
                    return new Promise(d1023 => {
                        t185.once(s185.EVENT_END_FRAME, () => d1023());
                    }).then(() => {
                        t185.reset(), s143.Object._deferredDestroy(), this.pause(), this.resume(), this._shouldLoadLaunchScene = !0, b186.instance.curTime = 0, this._safeEmit(d186.EVENT_RESTART);
                    });
                }
                end() {
                    y156.close();
                }
                on(x1022, y1022, z1022, a1023) {
                    return this.canRegisterEvent(x1022) && y1022.call(z1022), this.eventTargetOn(x1022, y1022, z1022, a1023);
                }
                once(u1022, v1022, w1022) {
                    return this.canRegisterEvent(u1022) ? v1022.call(w1022) : this.eventTargetOnce(u1022, v1022, w1022);
                }
                canRegisterEvent(t1022) {
                    return this._engineInited && t1022 === d186.EVENT_ENGINE_INITED || this._inited && t1022 === d186.EVENT_GAME_INITED || this._rendererInitialized && t1022 === d186.EVENT_RENDERER_INITED;
                }
                init(g1021) {
                    return this._compatibleWithOldParams(g1021), Promise.resolve().then(() => (this.emit(d186.EVENT_PRE_BASE_INIT), this.onPreBaseInitDelegate.dispatch())).then(() => {
                        u125(g1021.debugMode || i144.NONE);
                    }).then(() => i157.init()).then(() => {
                        this._initEvents();
                    }).then(() => r145.init(g1021.settingsPath, g1021.overrideSettings)).then(() => (this.emit(d186.EVENT_POST_BASE_INIT), this.onPostBaseInitDelegate.dispatch())).then(() => (this.emit(d186.EVENT_PRE_INFRASTRUCTURE_INIT), this.onPreInfrastructureInitDelegate.dispatch())).then(() => {
                        s145.init(), this._initXR();
                        const q1022 = function () {
                            const s1022 = v185.createElement("div");
                            return {
                                frame: v185.documentElement,
                                canvas: u185.__canvas,
                                container: s1022
                            };
                        }();
                        q1022 && (this.canvas = q1022.canvas, this.frame = q1022.frame, this.container = q1022.container), h157.init(), l157.init(), b162.init(this.canvas, x169), "" === s145.CUSTOM_PIPELINE_NAME && (s143.rendering = void 0), e185.init(), r185.init(), w168.init(), this.initPacer();
                    }).then(() => (this.emit(d186.EVENT_POST_INFRASTRUCTURE_INIT), this.onPostInfrastructureInitDelegate.dispatch())).then(() => (this.emit(d186.EVENT_PRE_SUBSYSTEM_INIT), this.onPreSubsystemInitDelegate.dispatch())).then(() => c186.init(r145.querySettings(q145.Category.RENDERING, "effectSettingsPath"))).then(() => {
                        if (!s143.rendering || !s143.rendering.enableEffectImport)
                            return;
                        if (r145.querySettings(q145.Category.RENDERING, "renderMode") === y161.HEADLESS)
                            return void s143.rendering.init(b162.gfxDevice, null);
                        const p1022 = c186.data;
                        null !== p1022 ? s143.rendering.init(b162.gfxDevice, p1022) : z125(1102);
                    }).then(() => {
                        const m1022 = r145.querySettings(q145.Category.SCRIPTING, "scriptPackages");
                        return m1022 ? Promise.all(m1022.map(o1022 => h125.import(o1022))) : Promise.resolve([]);
                    }).then(() => (t185.init(), r185.loadBuiltinAssets())).then(() => (this.emit(d186.EVENT_POST_SUBSYSTEM_INIT), this.onPostSubsystemInitDelegate.dispatch())).then(() => {
                        p125(`Cocos Creator v${t143}`), this.emit(d186.EVENT_ENGINE_INITED), this._engineInited = !0;
                    }).then(() => (this.emit(d186.EVENT_PRE_PROJECT_INIT), this.onPreProjectInitDelegate.dispatch())).then(() => {
                        const g1022 = r145.querySettings(q145.Category.PLUGINS, "jsList");
                        let h1022 = Promise.resolve();
                        return g1022 && g1022.forEach(j1022 => {
                            h1022 = h1022.then(() => {
                                return l1022 = `src/${j1022}`, window.oh && "napi" === window.scriptEngineType ? (window.oh.loadModule(l1022), Promise.resolve()) : require(`${l1022}`);
                                var l1022;
                            });
                        }), h1022;
                    }).then(() => this._loadProjectBundles()).then(() => this._loadCCEScripts()).then(() => this._setupRenderPipeline()).then(() => this._loadPreloadAssets()).then(() => (r185.compileBuiltinMaterial(), b186.instance.init())).then(() => (this.emit(d186.EVENT_POST_PROJECT_INIT), this.onPostProjectInitDelegate.dispatch())).then(() => {
                        this._inited = !0, this._safeEmit(d186.EVENT_GAME_INITED);
                    });
                }
                _initXR() {
                    var b1021;
                    if (void 0 === globalThis.__globalXR && (globalThis.__globalXR = {}), globalThis.__globalXR.webxrCompatible = null !== (b1021 = r145.querySettings(q145.Category.XR, "webxrCompatible")) && void 0 !== b1021 && b1021, i157.isXR) {
                        var c1021, d1021;
                        xr.entry = xr.XrEntry.getInstance();
                        const e1021 = null !== (c1021 = r145.querySettings(q145.Category.RENDERING, "msaa")) && void 0 !== c1021 ? c1021 : 1, f1021 = null !== (d1021 = r145.querySettings(q145.Category.RENDERING, "renderingScale")) && void 0 !== d1021 ? d1021 : 1;
                        xr.entry.setMultisamplesRTT(e1021), xr.entry.setRenderingScale(f1021);
                    }
                }
                _compatibleWithOldParams(z1020) {
                    const a1021 = z1020.overrideSettings = z1020.overrideSettings || {};
                    "showFPS" in z1020 && (a1021.profiling = a1021.profiling || {}, a1021.profiling.showFPS = z1020.showFPS), "frameRate" in z1020 && (a1021.screen = a1021.screen || {}, a1021.screen.frameRate = z1020.frameRate), "renderMode" in z1020 && (a1021.rendering = a1021.rendering || {}, a1021.rendering.renderMode = z1020.renderMode), "renderPipeline" in z1020 && (a1021.rendering = a1021.rendering || {}, a1021.rendering.renderPipeline = z1020.renderPipeline), "assetOptions" in z1020 && (a1021.assets = a1021.assets || {}, Object.assign(a1021.assets, z1020.assetOptions)), "customJointTextureLayouts" in z1020 && (a1021.animation = a1021.animation || {}, a1021.animation.customJointTextureLayouts = z1020.customJointTextureLayouts), "physics" in z1020 && (a1021.physics = a1021.physics || {}, Object.assign(a1021.physics, z1020.physics)), "orientation" in z1020 && (a1021.screen = a1021.screen || {}, a1021.screen.orientation = z1020.orientation), "exactFitScreen" in z1020 && (a1021.screen = a1021.screen || {}, a1021.screen.exactFitScreen = z1020.exactFitScreen);
                }
                _loadPreloadAssets() {
                    const r1020 = r145.querySettings(q145.Category.ASSETS, "preloadAssets");
                    return r1020 ? Promise.all(r1020.map(t1020 => new Promise((v1020, w1020) => {
                        e185.loadAny(t1020, y1020 => {
                            y1020 ? w1020(y1020) : v1020();
                        });
                    }))) : Promise.resolve([]);
                }
                _loadCCEScripts() {
                    return new Promise(q1020 => {
                        q1020();
                    });
                }
                _loadProjectBundles() {
                    const f1020 = r145.querySettings(q145.Category.ASSETS, "preloadBundles");
                    return f1020 ? Promise.all(f1020.map(({ bundle: h1020, version: i1020 }) => new Promise((k1020, l1020) => {
                        const m1020 = {};
                        i1020 && (m1020.version = i1020), e185.loadBundle(h1020, m1020, o1020 => {
                            o1020 ? l1020(o1020) : k1020();
                        });
                    }))) : Promise.resolve([]);
                }
                run(e1020) {
                    e1020 && (this.onStart = e1020), this._inited && this.resume();
                }
                _calculateDT(c1020) {
                    if (this._useFixedDeltaTime = c1020, c1020)
                        return this._startTime = performance.now(), this.frameTime / 1e3;
                    const d1020 = performance.now();
                    return this._deltaTime = d1020 > this._startTime ? (d1020 - this._startTime) / 1e3 : 0, this._deltaTime > d186.DEBUG_DT_THRESHOLD && (this._deltaTime = this.frameTime / 1e3), this._startTime = d1020, this._deltaTime;
                }
                _updateCallback() {
                    if (this._inited)
                        if (b186.instance.isFinished) {
                            if (this._shouldLoadLaunchScene) {
                                this._shouldLoadLaunchScene = !1;
                                const z1019 = r145.querySettings(q145.Category.LAUNCH, "launchScene");
                                var y1019;
                                z1019 ? t185.loadScene(z1019, () => {
                                    var b1020;
                                    x125(1103, z1019), this._initTime = performance.now(), t185.startAnimation(), null === (b1020 = this.onStart) || void 0 === b1020 || b1020.call(this);
                                }) : (this._initTime = performance.now(), t185.startAnimation(), null === (y1019 = this.onStart) || void 0 === y1019 || y1019.call(this));
                            }
                            else
                                t185.tick(this._calculateDT(!1));
                        }
                        else
                            b186.instance.update(this._calculateDT(!1));
                }
                initPacer() {
                    var w1019;
                    const x1019 = null !== (w1019 = r145.querySettings(q145.Category.SCREEN, "frameRate")) && void 0 !== w1019 ? w1019 : 60;
                    s125("number" == typeof x1019), this._pacer = new w185(), this._pacer.onTick = this._updateCallback.bind(this), this.frameRate = x1019;
                }
                _initEvents() {
                    y156.on("show", this._onShow, this), y156.on("hide", this._onHide, this), y156.on("close", this._onClose, this);
                }
                _onHide() {
                    this.emit(d186.EVENT_HIDE), this.pauseByEngine();
                }
                _onShow() {
                    this.emit(d186.EVENT_SHOW), this.resumeByEngine();
                }
                _onClose() {
                    this.emit(d186.EVENT_CLOSE), y156.exit();
                }
                addPersistRootNode(v1019) {
                    t185.addPersistRootNode(v1019);
                }
                removePersistRootNode(u1019) {
                    t185.removePersistRootNode(u1019);
                }
                isPersistRootNode(t1019) {
                    return t185.isPersistRootNode(t1019);
                }
                _setupRenderPipeline() {
                    const i1019 = r145.querySettings(q145.Category.RENDERING, "renderPipeline");
                    return i1019 ? new Promise((o1019, p1019) => {
                        e185.loadAny(i1019, (r1019, s1019) => !r1019 && s1019 instanceof h173 ? o1019(s1019) : p1019(r1019));
                    }).then(n1019 => {
                        this._setRenderPipeline(n1019);
                    }).catch(m1019 => {
                        q125(m1019), q125(`Failed load render pipeline: ${i1019}, engine failed to initialize, will fallback to default pipeline`), this._setRenderPipeline();
                    }) : this._setRenderPipeline();
                }
                _setRenderPipeline(h1019) {
                    t185.root.setRenderPipeline(h1019) || this._setRenderPipeline(), this._rendererInitialized = !0, this._safeEmit(d186.EVENT_RENDERER_INITED);
                }
                _safeEmit(g1019) {
                    this.emit(g1019);
                }
            }
            g125("Game", d186), d186.EVENT_HIDE = "game_on_hide", d186.EVENT_SHOW = "game_on_show", d186.EVENT_LOW_MEMORY = "game_on_low_memory", d186.EVENT_GAME_INITED = "game_inited", d186.EVENT_ENGINE_INITED = "engine_inited", d186.EVENT_RENDERER_INITED = "renderer_inited", d186.EVENT_PRE_BASE_INIT = "pre_base_init", d186.EVENT_POST_BASE_INIT = "post_base_init", d186.EVENT_PRE_INFRASTRUCTURE_INIT = "pre_infrastructure_init", d186.EVENT_POST_INFRASTRUCTURE_INIT = "post_infrastructure_init", d186.EVENT_PRE_SUBSYSTEM_INIT = "pre_subsystem_init", d186.EVENT_POST_SUBSYSTEM_INIT = "post_subsystem_init", d186.EVENT_PRE_PROJECT_INIT = "pre_project_init", d186.EVENT_POST_PROJECT_INIT = "post_project_init", d186.EVENT_RESTART = "game_on_restart", d186.EVENT_PAUSE = "game_on_pause", d186.EVENT_RESUME = "game_on_resume", d186.EVENT_CLOSE = "game_on_close", d186.RENDER_TYPE_CANVAS = 0, d186.RENDER_TYPE_WEBGL = 1, d186.RENDER_TYPE_OPENGL = 2, d186.RENDER_TYPE_HEADLESS = 3, d186.DEBUG_DT_THRESHOLD = 1, s143.Game = d186;
            const e186 = g125("game", s143.game = new d186());
            m144(s185.prototype, "director", [{
                    name: "calculateDeltaTime"
                }, {
                    name: "getDeltaTime",
                    suggest: "Use game.deltaTime instead"
                }, {
                    name: "getTotalTime",
                    suggest: "Use game.totalTime instead"
                }, {
                    name: "getCurrentTime",
                    suggest: "Use game.frameStartTime instead"
                }]), l144(s185.prototype, "director", [{
                    name: "setAnimationInterval",
                    suggest: "please use game.frameRate instead"
                }, {
                    name: "getAnimationInterval",
                    suggest: "please use game.frameRate instead"
                }, {
                    name: "getRunningScene",
                    suggest: "please use getScene instead"
                }, {
                    name: "setDepthTest",
                    suggest: "please use camera API instead"
                }, {
                    name: "setClearColor",
                    suggest: "please use camera API instead"
                }, {
                    name: "getWinSize",
                    suggest: "please use view.getVisibleSize instead"
                }, {
                    name: "getWinSizeInPixels"
                }, {
                    name: "purgeCachedData",
                    suggest: "please use assetManager.releaseAll instead"
                }, {
                    name: "convertToGL"
                }, {
                    name: "convertToUI"
                }]), k144(t185, "director", [{
                    name: "_getSceneUuid",
                    targetName: "assetManager.main",
                    newName: "getSceneInfo",
                    customFunction: e1019 => {
                        var f1019;
                        return e185.main ? null === (f1019 = e185.main.getSceneInfo(e1019)) || void 0 === f1019 ? void 0 : f1019.uuid : "";
                    }
                }]), m144(e186, "game", [{
                    name: "collisionMatrix"
                }, {
                    name: "groupList"
                }]), k144(e186, "game", [{
                    name: "_sceneInfos",
                    targetName: "assetManager.main",
                    newName: "getSceneInfo",
                    customGetter: () => {
                        const b1019 = [];
                        return e185.main && e185.main.config.scenes.forEach(d1019 => {
                            b1019.push(d1019);
                        }), b1019;
                    }
                }]);
            class f186 extends a156 {
                constructor(...a1019) {
                    super(...a1019), this._atlases = [], this._atlasIndex = -1, this._maxAtlasCount = 5, this._textureSize = 2048, this._maxFrameSize = 512, this._textureBleeding = !0, this._enabled = !1;
                }
                get enabled() {
                    return this._enabled;
                }
                set enabled(z1018) {
                    this._enabled !== z1018 && (z1018 ? (this.reset(), s143.director.on(s143.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this)) : (this.reset(), s143.director.off(s143.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this)), this._enabled = z1018);
                }
                get maxAtlasCount() {
                    return this._maxAtlasCount;
                }
                set maxAtlasCount(y1018) {
                    this._maxAtlasCount = y1018;
                }
                get atlasCount() {
                    return this._atlases.length;
                }
                get textureBleeding() {
                    return this._textureBleeding;
                }
                set textureBleeding(x1018) {
                    this._textureBleeding = x1018;
                }
                get textureSize() {
                    return this._textureSize;
                }
                set textureSize(w1018) {
                    this._textureSize = w1018;
                }
                get maxFrameSize() {
                    return this._maxFrameSize;
                }
                set maxFrameSize(v1018) {
                    this._maxFrameSize = v1018;
                }
                newAtlas() {
                    let u1018 = this._atlases[++this._atlasIndex];
                    return u1018 || (u1018 = new l166(this._textureSize, this._textureSize), this._atlases.push(u1018)), u1018;
                }
                beforeSceneLoad() {
                    this.reset();
                }
                init() {
                    this.enabled = !s145.CLEANUP_IMAGE_CACHE;
                }
                insertSpriteFrame(q1018) {
                    if (!this._enabled || this._atlasIndex === this._maxAtlasCount || !q1018 || q1018._original)
                        return null;
                    if (!q1018.packable)
                        return null;
                    const r1018 = q1018.texture.getSamplerInfo();
                    if (r1018.minFilter !== w163.LINEAR || r1018.magFilter !== w163.LINEAR || r1018.mipFilter !== w163.NONE)
                        return null;
                    let s1018 = this._atlases[this._atlasIndex];
                    s1018 || (s1018 = this.newAtlas());
                    const t1018 = s1018.insertSpriteFrame(q1018);
                    return t1018 || this._atlasIndex === this._maxAtlasCount ? t1018 : (s1018 = this.newAtlas(), s1018.insertSpriteFrame(q1018));
                }
                reset() {
                    for (let o1018 = 0, p1018 = this._atlases.length; o1018 < p1018; o1018++)
                        this._atlases[o1018].destroy();
                    this._atlases.length = 0, this._atlasIndex = -1;
                }
                deleteAtlasSpriteFrame(k1018) {
                    if (!k1018._original)
                        return;
                    let l1018;
                    for (let n1018 = this._atlases.length - 1; n1018 >= 0; n1018--)
                        l1018 = this._atlases[n1018], k127(l1018._innerSpriteFrames, k1018);
                    const m1018 = k1018._original._texture;
                    this.deleteAtlasTexture(m1018);
                }
                deleteAtlasTexture(i1018) {
                    if (i1018)
                        for (let j1018 = this._atlases.length - 1; j1018 >= 0; j1018--)
                            this._atlases[j1018].deleteInnerTexture(i1018), this._atlases[j1018].isEmpty() && (this._atlases[j1018].destroy(), this._atlases.splice(j1018, 1), this._atlasIndex--);
                }
                packToDynamicAtlas(f1018, g1018) {
                    if (this._enabled && g1018 && !g1018._original && g1018.packable && g1018.texture && g1018.texture.width > 0 && g1018.texture.height > 0) {
                        const h1018 = this.insertSpriteFrame(g1018);
                        h1018 && g1018._setDynamicAtlasFrame(h1018);
                    }
                }
            }
            g125("DynamicAtlasManager", f186), f186.instance = void 0;
            const g186 = g125("dynamicAtlasManager", f186.instance = new f186());
            var h186;
            t185.registerSystem("dynamicAtlasManager", g186, 0), s143.internal.dynamicAtlasManager = g186, u157.UNORM, u157.SNORM, u157.UINT, u157.INT, u157.UFLOAT, u157.FLOAT, function (e1018) {
                e1018[e1018.positions = g159.ATTR_POSITION] = "positions", e1018[e1018.normals = g159.ATTR_NORMAL] = "normals", e1018[e1018.uvs = g159.ATTR_TEX_COORD] = "uvs", e1018[e1018.colors = g159.ATTR_COLOR] = "colors";
            }(h186 || (h186 = {}));
            const i186 = jsb.MeshUtils, j186 = i186.createMesh;
            var k186, l186;
            i186.createDynamicMesh, s143.MeshUtils = jsb.MeshUtils;
            const m186 = new w146(), n186 = new o147();
            var o186;
            !function (d1018) {
                d1018[d1018.RECT = 0] = "RECT", d1018[d1018.POLYGON = 1] = "POLYGON";
            }(o186 || (o186 = {}));
            const p186 = [{
                    u: 0,
                    v: 0
                }, {
                    u: 0,
                    v: 0
                }, {
                    u: 0,
                    v: 0
                }, {
                    u: 0,
                    v: 0
                }];
            let q186 = g125("SpriteFrame", e151("cc.SpriteFrame")(((l186 = class t extends t163 {
                static createWithImage(z1017) {
                    const a1018 = z1017 instanceof x163 ? z1017 : new x163(z1017), b1018 = new j166();
                    b1018.image = a1018;
                    const c1018 = new t();
                    return c1018.texture = b1018, c1018;
                }
                get insetTop() {
                    return this._capInsets[1];
                }
                set insetTop(y1017) {
                    this._capInsets[1] !== y1017 && (this._capInsets[1] = y1017, this._texture && this._calculateSlicedUV());
                }
                get insetBottom() {
                    return this._capInsets[3];
                }
                set insetBottom(x1017) {
                    this._capInsets[3] !== x1017 && (this._capInsets[3] = x1017, this._texture && this._calculateSlicedUV());
                }
                get insetLeft() {
                    return this._capInsets[0];
                }
                set insetLeft(w1017) {
                    this._capInsets[0] !== w1017 && (this._capInsets[0] = w1017, this._texture && this._calculateSlicedUV());
                }
                get insetRight() {
                    return this._capInsets[2];
                }
                set insetRight(v1017) {
                    this._capInsets[2] !== v1017 && (this._capInsets[2] = v1017, this._texture && this._calculateSlicedUV());
                }
                get rect() {
                    return this._rect;
                }
                set rect(u1017) {
                    this._rect.equals(u1017) || (this._rect.set(u1017), this._texture && this._calculateUV(), this._calcTrimmedBorder());
                }
                get originalSize() {
                    return this._originalSize;
                }
                set originalSize(t1017) {
                    this._originalSize.equals(t1017) || (this._originalSize.set(t1017), this._texture && this._calculateUV(), this._calcTrimmedBorder());
                }
                get offset() {
                    return this._offset;
                }
                set offset(s1017) {
                    this._offset.set(s1017), this._calcTrimmedBorder();
                }
                get rotated() {
                    return this._rotated;
                }
                set rotated(r1017) {
                    this._rotated !== r1017 && (this._rotated = r1017, this._texture && this._calculateUV());
                }
                get texture() {
                    return this._texture;
                }
                set texture(q1017) {
                    q1017 ? q1017 !== this._texture && this.reset({
                        texture: q1017
                    }, !0) : y125(3122, this.name);
                }
                get atlasUuid() {
                    return this._atlasUuid;
                }
                set atlasUuid(p1017) {
                    this._atlasUuid = p1017;
                }
                get width() {
                    return this._texture.width;
                }
                get height() {
                    return this._texture.height;
                }
                set _textureSource(o1017) {
                    globalThis.Build ? this._texture = o1017 : o1017 && (this._refreshTexture(o1017), this._calculateUV());
                }
                get flipUVX() {
                    return this._isFlipUVX;
                }
                set flipUVX(n1017) {
                    this._isFlipUVX = n1017, this._calculateUV();
                }
                get flipUVY() {
                    return this._isFlipUVY;
                }
                set flipUVY(m1017) {
                    this._isFlipUVY = m1017, this._calculateUV();
                }
                get packable() {
                    return this._packable;
                }
                set packable(l1017) {
                    this._packable = l1017;
                }
                get original() {
                    return this._original;
                }
                get pixelsToUnit() {
                    return this._pixelsToUnit;
                }
                get pivot() {
                    return this._pivot;
                }
                get mesh() {
                    return this._mesh;
                }
                get trimmedBorder() {
                    return this._trimmedBorder;
                }
                constructor() {
                    super(), this.vertices = null, this.uv = [], this.unbiasUV = [], this.uvSliced = [], this._rect = new y147(), this._trimmedBorder = new v146(), this._offset = new s147(), this._originalSize = new x147(), this._rotated = !1, this._capInsets = [0, 0, 0, 0], this._atlasUuid = "", this._texture = void 0, this._isFlipUVY = !1, this._isFlipUVX = !1, this._original = null, this._packable = !0, this._pixelsToUnit = 100, this._pivot = new s147(.5, .5), this._meshType = o186.RECT, this._extrude = 0, this._customOutLine = [], this._minPos = new w146(), this._maxPos = new w146();
                }
                textureLoaded() {
                    return !!this.texture;
                }
                isRotated() {
                    return this._rotated;
                }
                setRotated(k1017) {
                    this.rotated = k1017;
                }
                getRect(j1017) {
                    return j1017 ? (j1017.set(this._rect), j1017) : this._rect.clone();
                }
                setRect(i1017) {
                    this.rect = i1017;
                }
                getOriginalSize(h1017) {
                    return h1017 ? (h1017.set(this._originalSize), h1017) : this._originalSize.clone();
                }
                setOriginalSize(g1017) {
                    this.originalSize = g1017;
                }
                getOffset(f1017) {
                    return f1017 ? (f1017.set(this._offset), f1017) : this._offset.clone();
                }
                setOffset(e1017) {
                    this.offset = e1017;
                }
                getGFXTexture() {
                    return this._texture.getGFXTexture();
                }
                getGFXSampler() {
                    return this._texture.getGFXSampler();
                }
                getHash() {
                    return this._texture.getHash();
                }
                getSamplerInfo() {
                    return this._texture.getSamplerInfo();
                }
                reset(b1017, c1017 = !1) {
                    let d1017 = !1;
                    c1017 && (this._originalSize.set(0, 0), this._rect.set(0, 0, 0, 0), this._offset.set(0, 0), this._capInsets = [0, 0, 0, 0], this._rotated = !1, d1017 = !0), b1017 && (b1017.texture && (this._rect.x = this._rect.y = 0, this._rect.width = b1017.texture.width, this._rect.height = b1017.texture.height, this._refreshTexture(b1017.texture), this.checkRect(this._texture)), b1017.originalSize && this._originalSize.set(b1017.originalSize), b1017.rect && this._rect.set(b1017.rect), b1017.offset && this._offset.set(b1017.offset), void 0 !== b1017.borderTop && (this._capInsets[1] = b1017.borderTop), void 0 !== b1017.borderBottom && (this._capInsets[3] = b1017.borderBottom), void 0 !== b1017.borderLeft && (this._capInsets[0] = b1017.borderLeft), void 0 !== b1017.borderRight && (this._capInsets[2] = b1017.borderRight), void 0 !== b1017.isRotate && (this._rotated = !!b1017.isRotate), void 0 !== b1017.isFlipUv && (this._isFlipUVY = !!b1017.isFlipUv), d1017 = !0), d1017 && this.texture && this._calculateUV(), this._calcTrimmedBorder();
                }
                checkRect(x1016) {
                    const y1016 = this._rect;
                    let z1016 = y1016.x, a1017 = y1016.y;
                    return this._rotated ? (z1016 += y1016.height, a1017 += y1016.width) : (z1016 += y1016.width, a1017 += y1016.height), z1016 > x1016.width ? (z125(3300, `${this.name}/${x1016.name}`, z1016, x1016.width), !1) : !(a1017 > x1016.height && (z125(3301, `${this.name}/${x1016.name}`, a1017, x1016.height), 1));
                }
                _calcTrimmedBorder() {
                    const t1016 = this._originalSize.width, u1016 = this._originalSize.height, v1016 = .5 * (t1016 - this._rect.width), w1016 = .5 * (u1016 - this._rect.height);
                    this._trimmedBorder.x = this._offset.x + v1016, this._trimmedBorder.y = this._offset.x - v1016, this._trimmedBorder.z = this._offset.y + w1016, this._trimmedBorder.w = this._offset.y - w1016;
                }
                ensureMeshData() {
                    this._mesh || (this._initVertices(), this._createMesh());
                }
                destroy() {
                    return this._packable && g186 && g186.deleteAtlasSpriteFrame(this), super.destroy();
                }
                _calculateSlicedUV() {
                    const a1016 = this._rect, b1016 = this.texture, c1016 = b1016.width, d1016 = b1016.height, e1016 = this._capInsets[0], f1016 = this._capInsets[2], g1016 = a1016.width - e1016 - f1016, h1016 = this._capInsets[1], i1016 = this._capInsets[3], j1016 = a1016.height - h1016 - i1016, k1016 = this.uvSliced;
                    if (k1016.length = 0, this._rotated) {
                        p186[0].u = a1016.x / c1016, p186[1].u = (a1016.x + i1016) / c1016, p186[2].u = (a1016.x + i1016 + j1016) / c1016, p186[3].u = (a1016.x + a1016.height) / c1016, p186[3].v = a1016.y / d1016, p186[2].v = (a1016.y + e1016) / d1016, p186[1].v = (a1016.y + e1016 + g1016) / d1016, p186[0].v = (a1016.y + a1016.width) / d1016;
                        for (let p1016 = 0; p1016 < 4; ++p1016) {
                            const q1016 = p186[p1016];
                            for (let r1016 = 0; r1016 < 4; ++r1016) {
                                const s1016 = p186[3 - r1016];
                                k1016.push({
                                    u: q1016.u,
                                    v: s1016.v
                                });
                            }
                        }
                    }
                    else {
                        p186[0].u = a1016.x / c1016, p186[1].u = (a1016.x + e1016) / c1016, p186[2].u = (a1016.x + e1016 + g1016) / c1016, p186[3].u = (a1016.x + a1016.width) / c1016, p186[3].v = a1016.y / d1016, p186[2].v = (a1016.y + h1016) / d1016, p186[1].v = (a1016.y + h1016 + j1016) / d1016, p186[0].v = (a1016.y + a1016.height) / d1016;
                        for (let l1016 = 0; l1016 < 4; ++l1016) {
                            const m1016 = p186[l1016];
                            for (let n1016 = 0; n1016 < 4; ++n1016) {
                                const o1016 = p186[n1016];
                                k1016.push({
                                    u: o1016.u,
                                    v: m1016.v
                                });
                            }
                        }
                    }
                    this.emit(t.EVENT_UV_UPDATED, this);
                }
                _calculateUV() {
                    const e1015 = this._rect, f1015 = this.uv, g1015 = this.unbiasUV, h1015 = this.texture, i1015 = h1015.width, j1015 = h1015.height;
                    if (this._rotated) {
                        const s1015 = 0 === i1015 ? 0 : e1015.x / i1015, t1015 = 0 === i1015 ? 1 : (e1015.x + e1015.height) / i1015, u1015 = 0 === j1015 ? 0 : e1015.y / j1015, v1015 = 0 === j1015 ? 1 : (e1015.y + e1015.width) / j1015;
                        this._isFlipUVX && this._isFlipUVY ? (f1015[0] = t1015, f1015[1] = v1015, f1015[2] = t1015, f1015[3] = u1015, f1015[4] = s1015, f1015[5] = v1015, f1015[6] = s1015, f1015[7] = u1015) : this._isFlipUVX ? (f1015[0] = t1015, f1015[1] = u1015, f1015[2] = t1015, f1015[3] = v1015, f1015[4] = s1015, f1015[5] = u1015, f1015[6] = s1015, f1015[7] = v1015) : this._isFlipUVY ? (f1015[0] = s1015, f1015[1] = v1015, f1015[2] = s1015, f1015[3] = u1015, f1015[4] = t1015, f1015[5] = v1015, f1015[6] = t1015, f1015[7] = u1015) : (f1015[0] = s1015, f1015[1] = u1015, f1015[2] = s1015, f1015[3] = v1015, f1015[4] = t1015, f1015[5] = u1015, f1015[6] = t1015, f1015[7] = v1015);
                        const w1015 = 0 === i1015 ? 0 : e1015.x / i1015, x1015 = 0 === i1015 ? 1 : (e1015.x + e1015.height) / i1015, y1015 = 0 === j1015 ? 0 : e1015.y / j1015, z1015 = 0 === j1015 ? 1 : (e1015.y + e1015.width) / j1015;
                        this._isFlipUVX && this._isFlipUVY ? (g1015[0] = x1015, g1015[1] = z1015, g1015[2] = x1015, g1015[3] = y1015, g1015[4] = w1015, g1015[5] = z1015, g1015[6] = w1015, g1015[7] = y1015) : this._isFlipUVX ? (g1015[0] = x1015, g1015[1] = y1015, g1015[2] = x1015, g1015[3] = z1015, g1015[4] = w1015, g1015[5] = y1015, g1015[6] = w1015, g1015[7] = z1015) : this._isFlipUVY ? (g1015[0] = w1015, g1015[1] = z1015, g1015[2] = w1015, g1015[3] = y1015, g1015[4] = x1015, g1015[5] = z1015, g1015[6] = x1015, g1015[7] = y1015) : (g1015[0] = w1015, g1015[1] = y1015, g1015[2] = w1015, g1015[3] = z1015, g1015[4] = x1015, g1015[5] = y1015, g1015[6] = x1015, g1015[7] = z1015);
                    }
                    else {
                        const k1015 = 0 === i1015 ? 0 : e1015.x / i1015, l1015 = 0 === i1015 ? 1 : (e1015.x + e1015.width) / i1015, m1015 = 0 === j1015 ? 1 : (e1015.y + e1015.height) / j1015, n1015 = 0 === j1015 ? 0 : e1015.y / j1015;
                        this._isFlipUVX && this._isFlipUVY ? (f1015[0] = l1015, f1015[1] = n1015, f1015[2] = k1015, f1015[3] = n1015, f1015[4] = l1015, f1015[5] = m1015, f1015[6] = k1015, f1015[7] = m1015) : this._isFlipUVX ? (f1015[0] = l1015, f1015[1] = m1015, f1015[2] = k1015, f1015[3] = m1015, f1015[4] = l1015, f1015[5] = n1015, f1015[6] = k1015, f1015[7] = n1015) : this._isFlipUVY ? (f1015[0] = k1015, f1015[1] = n1015, f1015[2] = l1015, f1015[3] = n1015, f1015[4] = k1015, f1015[5] = m1015, f1015[6] = l1015, f1015[7] = m1015) : (f1015[0] = k1015, f1015[1] = m1015, f1015[2] = l1015, f1015[3] = m1015, f1015[4] = k1015, f1015[5] = n1015, f1015[6] = l1015, f1015[7] = n1015);
                        const o1015 = 0 === i1015 ? 0 : e1015.x / i1015, p1015 = 0 === i1015 ? 1 : (e1015.x + e1015.width) / i1015, q1015 = 0 === j1015 ? 1 : (e1015.y + e1015.height) / j1015, r1015 = 0 === j1015 ? 0 : e1015.y / j1015;
                        this._isFlipUVX && this._isFlipUVY ? (g1015[0] = p1015, g1015[1] = r1015, g1015[2] = o1015, g1015[3] = r1015, g1015[4] = p1015, g1015[5] = q1015, g1015[6] = o1015, g1015[7] = q1015) : this._isFlipUVX ? (g1015[0] = p1015, g1015[1] = q1015, g1015[2] = o1015, g1015[3] = q1015, g1015[4] = p1015, g1015[5] = r1015, g1015[6] = o1015, g1015[7] = r1015) : this._isFlipUVY ? (g1015[0] = o1015, g1015[1] = r1015, g1015[2] = p1015, g1015[3] = r1015, g1015[4] = o1015, g1015[5] = q1015, g1015[6] = p1015, g1015[7] = q1015) : (g1015[0] = o1015, g1015[1] = q1015, g1015[2] = p1015, g1015[3] = q1015, g1015[4] = o1015, g1015[5] = r1015, g1015[6] = p1015, g1015[7] = r1015);
                    }
                    this._calculateSlicedUV();
                }
                _setDynamicAtlasFrame(d1015) {
                    d1015 && (this._original = {
                        _texture: this._texture,
                        _x: this._rect.x,
                        _y: this._rect.y
                    }, this._texture = d1015.texture, this._rect.x = d1015.x, this._rect.y = d1015.y, this._calculateUV());
                }
                _resetDynamicAtlasFrame() {
                    this._original && (this._rect.x = this._original._x, this._rect.y = this._original._y, this._texture = this._original._texture, this._original = null, this._calculateUV());
                }
                _checkPackable() {
                    const y1014 = g186;
                    if (!y1014)
                        return;
                    const z1014 = this._texture;
                    if (!(z1014 instanceof j166) || z1014.isCompressed)
                        return void (this._packable = !1);
                    const a1015 = this.width, b1015 = this.height;
                    if (!z1014.image || a1015 > y1014.maxFrameSize || b1015 > y1014.maxFrameSize)
                        return void (this._packable = !1);
                    const c1015 = u143.HTMLCanvasElement;
                    z1014.image && z1014.image instanceof c1015 && (this._packable = !0);
                }
                _serialize(x1014) {
                    return null;
                }
                _deserialize(m1014, n1014) {
                    const o1014 = m1014, p1014 = o1014.rect;
                    p1014 && (this._rect = new y147(p1014.x, p1014.y, p1014.width, p1014.height));
                    const q1014 = o1014.offset;
                    o1014.offset && (this._offset = new s147(q1014.x, q1014.y));
                    const r1014 = o1014.originalSize;
                    o1014.originalSize && (this._originalSize = new x147(r1014.width, r1014.height)), this._rotated = !!o1014.rotated, this._name = o1014.name, this._packable = !!o1014.packable, this._pixelsToUnit = o1014.pixelsToUnit;
                    const s1014 = o1014.pivot;
                    s1014 && (this._pivot = new s147(s1014.x, s1014.y)), this._meshType = o1014.meshType;
                    const t1014 = o1014.capInsets;
                    t1014 && (this._capInsets[0] = t1014[0], this._capInsets[1] = t1014[1], this._capInsets[2] = t1014[2], this._capInsets[3] = t1014[3]);
                    const u1014 = o1014.vertices;
                    if (u1014) {
                        this.vertices || (this.vertices = {
                            rawPosition: [],
                            positions: [],
                            indexes: u1014.indexes,
                            uv: u1014.uv,
                            nuv: u1014.nuv,
                            minPos: new w146(u1014.minPos.x, u1014.minPos.y, u1014.minPos.z),
                            maxPos: new w146(u1014.maxPos.x, u1014.maxPos.y, u1014.maxPos.z)
                        }), this.vertices.rawPosition.length = 0;
                        const v1014 = u1014.rawPosition;
                        for (let w1014 = 0; w1014 < v1014.length; w1014 += 3)
                            this.vertices.rawPosition.push(new w146(v1014[w1014], v1014[w1014 + 1], v1014[w1014 + 2]));
                        this._updateMeshVertices();
                    }
                }
                clone() {
                    const k1014 = new t(), l1014 = this.vertices;
                    return k1014.vertices = l1014 ? {
                        rawPosition: l1014.rawPosition.slice(0),
                        positions: l1014.positions.slice(0),
                        indexes: l1014.indexes.slice(0),
                        uv: l1014.uv.slice(0),
                        nuv: l1014.nuv.slice(0),
                        minPos: l1014.minPos.clone(),
                        maxPos: l1014.minPos.clone()
                    } : null, k1014.uv.splice(0, k1014.uv.length, ...this.uv), k1014.unbiasUV.splice(0, k1014.unbiasUV.length, ...this.unbiasUV), k1014.uvSliced.splice(0, k1014.uvSliced.length, ...this.uvSliced), k1014._rect.set(this._rect), k1014._offset.set(this._offset), k1014._originalSize.set(this._originalSize), k1014._rotated = this._rotated, k1014._capInsets.splice(0, k1014._capInsets.length, ...this._capInsets), k1014._atlasUuid = this._atlasUuid, k1014._texture = this._texture, k1014._isFlipUVX = this._isFlipUVX, k1014._isFlipUVY = this._isFlipUVY, k1014._pixelsToUnit = this._pixelsToUnit, k1014._pivot.set(this._pivot), k1014._meshType = this._meshType, k1014;
                }
                _refreshTexture(g1014) {
                    this._texture = g1014;
                    const h1014 = this._texture, i1014 = {};
                    let j1014 = !1;
                    0 !== this._rect.width && 0 !== this._rect.height && this.checkRect(h1014) || (i1014.rect = new y147(0, 0, h1014.width, h1014.height), j1014 = !0), (0 === this._originalSize.width || 0 === this._originalSize.height || j1014) && (i1014.originalSize = new x147(h1014.width, h1014.height), j1014 = !0), j1014 && this.reset(i1014), this._checkPackable(), this._mesh && this._updateMesh();
                }
                onLoaded() {
                    this._calcTrimmedBorder();
                }
                initDefault(e1014) {
                    super.initDefault(e1014);
                    const f1014 = new j166();
                    f1014.initDefault(), this._refreshTexture(f1014), this._calculateUV();
                }
                validate() {
                    return this._texture && this._rect && 0 !== this._rect.width && 0 !== this._rect.height;
                }
                _initVertices() {
                    if (this.vertices ? (this.vertices.rawPosition.length = 0, this.vertices.positions.length = 0, this.vertices.indexes.length = 0, this.vertices.uv.length = 0, this.vertices.nuv.length = 0, this.vertices.minPos.set(0, 0, 0), this.vertices.maxPos.set(0, 0, 0)) : this.vertices = {
                        rawPosition: [],
                        positions: [],
                        indexes: [],
                        uv: [],
                        nuv: [],
                        minPos: new w146(),
                        maxPos: new w146()
                    }, this._meshType === o186.POLYGON)
                        ;
                    else {
                        const q1013 = this.texture, r1013 = q1013.width, s1013 = q1013.height, t1013 = this.rect, u1013 = t1013.width, v1013 = t1013.height, w1013 = t1013.x, x1013 = s1013 - t1013.y - v1013, y1013 = u1013 / 2, z1013 = v1013 / 2, a1014 = 0 === r1013 ? 0 : w1013 / r1013, b1014 = 0 === r1013 ? 1 : (w1013 + u1013) / r1013, c1014 = 0 === s1013 ? 1 : (x1013 + v1013) / s1013, d1014 = 0 === s1013 ? 0 : t1013.y / s1013;
                        m186.set(-y1013, -z1013, 0), this.vertices.rawPosition.push(m186.clone()), this.vertices.uv.push(w1013), this.vertices.uv.push(x1013 + v1013), this.vertices.nuv.push(a1014), this.vertices.nuv.push(d1014), this.vertices.minPos.set(m186), m186.set(y1013, -z1013, 0), this.vertices.rawPosition.push(m186.clone()), this.vertices.uv.push(w1013 + u1013), this.vertices.uv.push(x1013 + v1013), this.vertices.nuv.push(b1014), this.vertices.nuv.push(d1014), m186.set(-y1013, z1013, 0), this.vertices.rawPosition.push(m186.clone()), this.vertices.uv.push(w1013), this.vertices.uv.push(x1013), this.vertices.nuv.push(a1014), this.vertices.nuv.push(c1014), m186.set(y1013, z1013, 0), this.vertices.rawPosition.push(m186.clone()), this.vertices.uv.push(w1013 + u1013), this.vertices.uv.push(x1013), this.vertices.nuv.push(b1014), this.vertices.nuv.push(c1014), this.vertices.maxPos.set(m186), this.vertices.indexes.push(0), this.vertices.indexes.push(1), this.vertices.indexes.push(2), this.vertices.indexes.push(2), this.vertices.indexes.push(1), this.vertices.indexes.push(3);
                    }
                    this._updateMeshVertices();
                }
                _updateMeshVertices() {
                    n186.identity();
                    const j1013 = 1 / this._pixelsToUnit, k1013 = -(this._pivot.x - .5) * this.rect.width * j1013, l1013 = -(this._pivot.y - .5) * this.rect.height * j1013, m1013 = new w146(k1013, l1013, 0);
                    n186.transform(m1013), m1013.set(j1013, j1013, 1), n186.scale(m1013);
                    const n1013 = this.vertices;
                    for (let o1013 = 0; o1013 < n1013.rawPosition.length; o1013++) {
                        const p1013 = n1013.rawPosition[o1013];
                        w146.transformMat4(m1013, p1013, n186), w146.toArray(n1013.positions, m1013, 3 * o1013);
                    }
                    w146.transformMat4(this._minPos, n1013.minPos, n186), w146.transformMat4(this._maxPos, n1013.maxPos, n186);
                }
                _createMesh() {
                    this._mesh = j186({
                        primitiveMode: t158.TRIANGLE_LIST,
                        positions: this.vertices.positions,
                        uvs: this.vertices.nuv,
                        indices: this.vertices.indexes,
                        minPos: this._minPos,
                        maxPos: this._maxPos,
                        attributes: [new o160(g159.ATTR_POSITION, t157.RGB32F), new o160(g159.ATTR_TEX_COORD, t157.RG32F)]
                    });
                }
                _updateMesh() {
                    this._mesh && this._mesh.destroy(), this._initVertices(), this._createMesh();
                }
            }).EVENT_UV_UPDATED = "uv_updated", l186.MeshType = o186, k186 = l186)) || k186);
            s143.SpriteFrame = q186, l144(y165.prototype, "TextureBase.prototype", [{
                    name: "hasPremultipliedAlpha"
                }, {
                    name: "setPremultiplyAlpha"
                }, {
                    name: "setFlipY"
                }]), k144(r172.prototype, "RenderTexture.prototype", [{
                    name: "getGFXWindow",
                    customFunction() {
                        return this.window;
                    }
                }]);
            const r186 = g125("RenderingSubMesh", jsb.RenderingSubMesh), s186 = r186.prototype;
            var t186, u186, v186;
            s186._ctor = function (e1013, f1013, g1013, h1013 = null, i1013 = null) {
                jsb.Asset.prototype._ctor.apply(this, arguments), this._attributes = f1013, this._vertexBuffers = e1013, this._indexBuffer = h1013, this._indirectBuffer = i1013;
            }, Object.defineProperty(s186, "geometricInfo", {
                configurable: !0,
                enumerable: !0,
                get() {
                    let d1013 = this.getGeometricInfo();
                    return d1013.positions || d1013.indices || (d1013.positions = new Float32Array(), d1013.indices = new Uint8Array()), d1013;
                }
            }), Object.defineProperty(s186, "attributes", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._attributes || (this._attributes = this.getAttributes()), this._attributes;
                }
            }), Object.defineProperty(s186, "vertexBuffers", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._vertexBuffers || (this._vertexBuffers = this.getVertexBuffers()), this._vertexBuffers;
                }
            }), Object.defineProperty(s186, "indexBuffer", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._indexBuffer || (this._indexBuffer = this.getIndexBuffer()), this._indexBuffer;
                }
            }), Object.defineProperty(s186, "indirectBuffer", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._indirectBuffer || (this._indirectBuffer = this.getIndexBuffer()), this._indirectBuffer;
                }
            });
            let w186 = g125("SpriteAtlas", e151("cc.SpriteAtlas")((u186 = class extends t163 {
                constructor(...c1013) {
                    super(...c1013), this.spriteFrames = v186 && v186();
                }
                getTexture() {
                    const a1013 = Object.keys(this.spriteFrames);
                    if (a1013.length > 0) {
                        const b1013 = this.spriteFrames[a1013[0]];
                        return b1013 && b1013.texture;
                    }
                    return null;
                }
                getSpriteFrame(y1012) {
                    const z1012 = this.spriteFrames[y1012];
                    return z1012 ? (z1012.name || (z1012.name = y1012), z1012) : null;
                }
                getSpriteFrames() {
                    const v1012 = [], w1012 = this.spriteFrames;
                    for (const x1012 of Object.keys(w1012))
                        v1012.push(w1012[x1012]);
                    return v1012;
                }
                _serialize(u1012) { }
                _deserialize(p1012, q1012) {
                    const r1012 = p1012;
                    this._name = r1012.name;
                    const s1012 = r1012.spriteFrames;
                    this.spriteFrames = j126();
                    for (let t1012 = 0; t1012 < s1012.length; t1012 += 2)
                        q1012.result.push(this.spriteFrames, s1012[t1012], s1012[t1012 + 1], g127(q186));
                }
            }, v186 = p130(u186.prototype, "spriteFrames", [j151], function () {
                return j126();
            }), t186 = u186)) || t186);
            var x186;
            s143.SpriteAtlas = w186;
            let y186 = g125("Font", e151("cc.Font")(x186 = class extends t163 {
            }) || x186);
            var z186, a187, b187;
            s143.Font = y186;
            let c187 = g125("TTFFont", e151("cc.TTFFont")((a187 = class extends y186 {
                constructor(...o1012) {
                    super(...o1012), this._fontFamily = b187 && b187();
                }
                get _nativeAsset() {
                    return this._fontFamily;
                }
                set _nativeAsset(n1012) {
                    this._fontFamily = n1012 || "Arial";
                }
                get _nativeDep() {
                    return {
                        uuid: this._uuid,
                        __nativeName__: this._native,
                        ext: i133(this._native),
                        __isNative__: !0
                    };
                }
                initDefault(m1012) {
                    this._fontFamily = "Arial", super.initDefault(m1012);
                }
            }, b187 = p130(a187.prototype, "_fontFamily", [j151], function () {
                return null;
            }), i125(a187.prototype, "_nativeAsset", [h152, g152], Object.getOwnPropertyDescriptor(a187.prototype, "_nativeAsset"), a187.prototype), i125(a187.prototype, "_nativeDep", [h152], Object.getOwnPropertyDescriptor(a187.prototype, "_nativeDep"), a187.prototype), z186 = a187)) || z186);
            var d187, e187, f187, g187, h187, i187, j187, k187;
            s143.TTFFont = c187;
            class l187 {
                constructor() {
                    this.u = 0, this.v = 0, this.w = 0, this.h = 0, this.offsetX = 0, this.offsetY = 0, this.textureID = 0, this.valid = !1, this.xAdvance = 0;
                }
            }
            class m187 {
                constructor(l1012) {
                    this.letterDefinitions = {}, this.texture = l1012;
                }
                addLetterDefinitions(j1012, k1012) {
                    this.letterDefinitions[j1012] = k1012;
                }
                cloneLetterDefinition() {
                    const g1012 = {};
                    for (const h1012 of Object.keys(this.letterDefinitions)) {
                        const i1012 = new l187();
                        t126(i1012, this.letterDefinitions[h1012]), g1012[h1012] = i1012;
                    }
                    return g1012;
                }
                getTexture() {
                    return this.texture;
                }
                getLetter(f1012) {
                    return this.letterDefinitions[f1012];
                }
                getLetterDefinitionForChar(b1012, c1012) {
                    const d1012 = b1012.charCodeAt(0);
                    let e1012;
                    return e1012 = this.letterDefinitions.hasOwnProperty(d1012) ? this.letterDefinitions[d1012] : null, e1012;
                }
                clear() {
                    this.letterDefinitions = {};
                }
            }
            let n187 = g125("BitmapFont", (d187 = e151("cc.BitmapFont"), e187 = a131(q186), d187((g187 = class extends y186 {
                constructor(...a1012) {
                    super(...a1012), this.fntDataStr = h187 && h187(), this.spriteFrame = i187 && i187(), this.fontSize = j187 && j187(), this.fntConfig = k187 && k187();
                }
                onLoaded() {
                    const u1011 = this.spriteFrame;
                    !this.fontDefDictionary && u1011 && (this.fontDefDictionary = new m187(u1011.texture));
                    const v1011 = this.fntConfig;
                    if (!v1011)
                        return void q125("The fnt config is not exists!");
                    const w1011 = v1011.fontDefDictionary;
                    for (const x1011 in w1011) {
                        const y1011 = new l187(), z1011 = w1011[x1011].rect;
                        y1011.offsetX = w1011[x1011].xOffset, y1011.offsetY = w1011[x1011].yOffset, y1011.w = z1011.width, y1011.h = z1011.height, y1011.u = z1011.x, y1011.v = z1011.y, y1011.textureID = 0, y1011.valid = !0, y1011.xAdvance = w1011[x1011].xAdvance, this.fontDefDictionary.addLetterDefinitions(x1011, y1011);
                    }
                }
            }, h187 = p130(g187.prototype, "fntDataStr", [j151], function () {
                return "";
            }), i187 = p130(g187.prototype, "spriteFrame", [e187], function () {
                return null;
            }), j187 = p130(g187.prototype, "fontSize", [j151], function () {
                return -1;
            }), k187 = p130(g187.prototype, "fntConfig", [j151], function () {
                return null;
            }), f187 = g187)) || f187));
            var o187;
            s143.BitmapFont = n187;
            let p187 = g125("LabelAtlas", e151("cc.LabelAtlas")(o187 = class extends n187 {
            }) || o187);
            s143.LabelAtlas = p187;
            const q187 = g125("BASELINE_RATIO", .26), r187 = g125("MIDDLE_RATIO", (q187 + 1) / 2 - q187);
            const s187 = new j145(2);
            s187.get = function () {
                return this._get() || {
                    key: "",
                    value: 0,
                    prev: null,
                    next: null
                };
            };
            class t187 {
                constructor(t1011) {
                    this.count = 0, this.limit = 0, this.datas = {}, this.limit = t1011;
                }
                moveToHead(s1011) {
                    s1011.next = this.head, s1011.prev = null, this.head && (this.head.prev = s1011), this.head = s1011, this.tail || (this.tail = s1011), this.count++, this.datas[s1011.key] = s1011;
                }
                put(o1011, p1011) {
                    const q1011 = s187.get();
                    if (q1011.key = o1011, q1011.value = p1011, this.count >= this.limit) {
                        const r1011 = this.tail;
                        delete this.datas[r1011.key], this.count--, this.tail = r1011.prev, this.tail.next = null, r1011.prev = null, r1011.next = null, s187.put(r1011);
                    }
                    this.moveToHead(q1011);
                }
                remove(n1011) {
                    n1011.prev ? n1011.prev.next = n1011.next : this.head = n1011.next, n1011.next ? n1011.next.prev = n1011.prev : this.tail = n1011.prev, delete this.datas[n1011.key], this.count--;
                }
                get(l1011) {
                    const m1011 = this.datas[l1011];
                    return m1011 ? (this.remove(m1011), this.moveToHead(m1011), m1011.value) : null;
                }
                clear() {
                    this.count = 0, this.datas = {}, this.head = null, this.tail = null;
                }
                has(k1011) {
                    return !!this.datas[k1011];
                }
                delete(i1011) {
                    const j1011 = this.datas[i1011];
                    this.remove(j1011);
                }
            }
            g125("LRUCache", t187);
            const u187 = new t187(100), v187 = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/, w187 = /^[!,.:;'}\]%\?>、‘“》？。，！]/, x187 = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁёáàảạãăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệiíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđÁÀẢẠÃĂẮẰẲẴẶÂẤẦẨẪẬÉÈẺẼẸÊẾỀỂỄỆIÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴĐ]+|\S)$/, y187 = /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁёáàảạãăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệiíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđÁÀẢẠÃĂẮẰẲẴẶÂẤẦẨẪẬÉÈẺẼẸÊẾỀỂỄỆIÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴĐ]+$/, z187 = /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁёáàảạãăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệiíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđÁÀẢẠÃĂẮẰẲẴẶÂẤẦẨẪẬÉÈẺẼẸÊẾỀỂỄỆIÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴĐ]/;
            function m137(h1011) {
                return /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/.test(h1011) || /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g.test(h1011) || /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/.test(h1011);
            }
            function n137(f1011) {
                const g1011 = f1011.charCodeAt(0);
                return g1011 >= 9 && g1011 <= 13 || 32 === g1011 || 133 === g1011 || 160 === g1011 || 5760 === g1011 || g1011 >= 8192 && g1011 <= 8202 || 8232 === g1011 || 8233 === g1011 || 8239 === g1011 || 8287 === g1011 || 12288 === g1011;
            }
            function o137(y1010, z1010, a1011) {
                const b1011 = `${a1011 || y1010.font}🎮${z1010}`, c1011 = u187.get(b1011);
                if (null !== c1011)
                    return c1011;
                const d1011 = y1010.measureText(z1010), e1011 = d1011 && d1011.width || 0;
                return u187.put(b1011, e1011), e1011;
            }
            function p137(r1010, s1010, t1010) {
                let u1010 = s1010, v1010 = t1010;
                const w1010 = r1010[s1010];
                if (w1010 >= "\udc00" && w1010 <= "\udfff" && u1010--, void 0 !== t1010)
                    if (t1010 - 1 !== s1010) {
                        const x1010 = r1010[t1010 - 1];
                        x1010 >= "\ud800" && x1010 <= "\udbff" && v1010--;
                    }
                    else
                        w1010 >= "\ud800" && w1010 <= "\udbff" && v1010++;
                return r1010.substring(u1010, v1010);
            }
            function q137(q1010) {
                return z187.exec(q1010);
            }
            function r137(p1010) {
                return y187.exec(p1010);
            }
            function s137(z1009, a1010, b1010, c1010) {
                const d1010 = [];
                if (0 === z1009.length || b1010 < 0)
                    return d1010.push(""), d1010;
                let e1010 = z1009;
                for (; a1010 > b1010 && e1010.length > 1;) {
                    let f1010 = e1010.length * (b1010 / a1010) | 0, g1010 = p137(e1010, f1010), h1010 = a1010 - c1010(g1010), i1010 = g1010, j1010 = 0, k1010 = 0;
                    const l1010 = 100;
                    for (; h1010 > b1010 && k1010++ < l1010;)
                        f1010 *= b1010 / h1010, f1010 |= 0, g1010 = p137(e1010, f1010), h1010 = a1010 - c1010(g1010);
                    for (k1010 = 0; g1010 && h1010 <= b1010 && k1010++ < l1010;) {
                        const o1010 = v187.exec(g1010);
                        j1010 = o1010 ? o1010[0].length : 1, i1010 = g1010, f1010 += j1010, g1010 = p137(e1010, f1010), h1010 = a1010 - c1010(g1010);
                    }
                    f1010 -= j1010, 0 === f1010 ? (f1010 = 1, i1010 = p137(e1010, 1)) : 1 === f1010 && e1010[0] >= "\ud800" && e1010[0] <= "\udbff" && (f1010 = 2, i1010 = p137(e1010, 2));
                    let m1010, n1010 = p137(e1010, 0, f1010);
                    w187.test(i1010 || g1010) && (m1010 = x187.exec(n1010), f1010 -= m1010 ? m1010[0].length : 0, 0 === f1010 && (f1010 = 1), i1010 = p137(e1010, f1010), n1010 = p137(e1010, 0, f1010)), z187.test(i1010) && (m1010 = y187.exec(n1010), m1010 && n1010 !== m1010[0] && (f1010 -= m1010[0].length, i1010 = p137(e1010, f1010), n1010 = p137(e1010, 0, f1010))), 0 === d1010.length ? d1010.push(n1010) : (n1010 = n1010.trim(), n1010.length > 0 && d1010.push(n1010)), e1010 = i1010 || g1010, a1010 = c1010(e1010);
                }
                return 0 === d1010.length ? d1010.push(e1010) : (e1010 = e1010.trim(), e1010.length > 0 && d1010.push(e1010)), d1010;
            }
            let a188;
            class b188 {
                constructor() {
                    this.pool = [];
                }
                static getInstance() {
                    return a188 || (a188 = new b188()), a188;
                }
                get() {
                    let w1009 = this.pool.pop();
                    if (!w1009) {
                        const x1009 = u143.document.createElement("canvas"), y1009 = x1009.getContext("2d");
                        w1009 = {
                            canvas: x1009,
                            context: y1009
                        };
                    }
                    return w1009;
                }
                put(v1009) {
                    this.pool.length >= s145.MAX_LABEL_CANVAS_POOL_SIZE || this.pool.push(v1009);
                }
            }
            const c188 = a147.WHITE.clone();
            class d188 {
                constructor() {
                    this.u = 0, this.v = 0, this.w = 0, this.h = 0, this.texture = null, this.offsetX = 0, this.offsetY = 0, this.valid = !1, this.xAdvance = 0;
                }
            }
            const e188 = `rgba(255, 255, 255, ${(1 / 255).toFixed(3)})`;
            class f188 {
                constructor(t1009, u1009) {
                    this.image = null, this.labelInfo = void 0, this.char = void 0, this.data = null, this.canvas = null, this.context = null, this.width = 0, this.height = 0, this.offsetY = 0, this.hash = void 0, this.char = t1009, this.labelInfo = u1009, this.hash = `${t1009.charCodeAt(0)}${u1009.hash}`;
                }
                updateRenderData() {
                    this._updateProperties(), this._updateTexture();
                }
                destroy() {
                    this.image = null, b188.getInstance().put(this.data);
                }
                _updateProperties() {
                    if (this.data = b188.getInstance().get(), this.canvas = this.data.canvas, this.context = this.data.context, this.context) {
                        const q1009 = this.labelInfo.fontScale;
                        this.context.font = this.labelInfo.fontDesc;
                        const r1009 = o137(this.context, this.char, this.labelInfo.fontDesc), s1009 = 2 * this.labelInfo.margin + 2;
                        this.width = parseFloat(r1009.toFixed(2)) * q1009 + s1009, this.height = (1 + q187) * this.labelInfo.fontSize * q1009 + s1009, this.offsetY = -this.labelInfo.fontSize * q187 * q1009 / 2;
                    }
                    this.canvas.width !== this.width && (this.canvas.width = this.width), this.canvas.height !== this.height && (this.canvas.height = this.height), this.image || (this.image = new x163()), this.image.reset(this.canvas);
                }
                _updateTexture() {
                    if (!this.context || !this.canvas)
                        return;
                    const b1009 = this.context, c1009 = this.labelInfo, d1009 = this.canvas.width, e1009 = this.canvas.height, f1009 = c1009.fontScale;
                    b1009.textAlign = "center", b1009.textBaseline = "alphabetic", b1009.clearRect(0, 0, d1009, e1009), b1009.fillStyle = e188, b1009.fillRect(0, 0, d1009, e1009), b1009.font = c1009.fontDesc.replace(/(\d+)(\.\d+)?(px|em|rem|pt)/g, (m1009, n1009, o1009, p1009) => (+n1009 * f1009 + (+o1009 || 0) * f1009).toString() + p1009);
                    const g1009 = c1009.fontSize * f1009, h1009 = d1009 / 2, i1009 = e1009 / 2 + g1009 * r187 + 0 * g1009, j1009 = c1009.color;
                    if (b1009.lineJoin = "round", b1009.fillStyle = `rgba(${j1009.r}, ${j1009.g}, ${j1009.b}, 1)`, c1009.isOutlined) {
                        const l1009 = c1009.out || c188;
                        b1009.strokeStyle = `rgba(${l1009.r}, ${l1009.g}, ${l1009.b}, ${l1009.a / 255})`, b1009.lineWidth = 2 * c1009.margin * f1009, b1009.strokeText(this.char, h1009, i1009);
                    }
                    b1009.fillText(this.char, h1009, i1009);
                }
            }
            class g188 extends j166 {
                initWithSize(y1008, z1008, a1009 = u163.RGBA8888) {
                    this.reset({
                        width: y1008,
                        height: z1008,
                        format: a1009
                    });
                }
                drawTextureAt(s1008, t1008, u1008) {
                    const v1008 = this.getGFXTexture();
                    if (!s1008 || !v1008)
                        return;
                    const w1008 = this._getGFXDevice();
                    if (!w1008)
                        return void console.warn("Unable to get device");
                    const x1008 = new r159();
                    x1008.texOffset.x = t1008, x1008.texOffset.y = u1008, x1008.texExtent.width = s1008.width, x1008.texExtent.height = s1008.height, w1008.copyTexImagesToTexture([s1008.data], v1008, [x1008]);
                }
            }
            class h188 {
                get width() {
                    return this._width;
                }
                get height() {
                    return this._height;
                }
                constructor(p1008, q1008) {
                    this._x = 0, this._y = 0, this._nextY = 0, this._width = 0, this._height = 0, this._halfBleed = 0, this._dirty = !1;
                    const r1008 = new g188();
                    r1008.initWithSize(p1008, q1008), this.fontDefDictionary = new m187(r1008), this._halfBleed = 1, this._width = p1008, this._height = q1008, t185.on(s185.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
                }
                insertLetterTexture(j1008) {
                    const k1008 = j1008.image, l1008 = t185.root.device;
                    if (!k1008 || !this.fontDefDictionary || !l1008)
                        return null;
                    const m1008 = k1008.width, n1008 = k1008.height;
                    if (this._x + m1008 + 0 > this._width && (this._x = 0, this._y = this._nextY), this._y + n1008 > this._nextY && (this._nextY = this._y + n1008 + 0), this._nextY > this._height)
                        return y125(12100), null;
                    this.fontDefDictionary.texture.drawTextureAt(k1008, this._x, this._y), this._dirty = !0;
                    const o1008 = new d188();
                    return o1008.u = this._x + this._halfBleed, o1008.v = this._y + this._halfBleed, o1008.texture = this.fontDefDictionary.texture, o1008.valid = !0, o1008.w = j1008.width - 2, o1008.h = j1008.height - 2, o1008.xAdvance = o1008.w, o1008.offsetY = j1008.offsetY, this._x += m1008 + 0, this.fontDefDictionary.addLetterDefinitions(j1008.hash, o1008), o1008;
                }
                update() {
                    this._dirty && (this._dirty = !1);
                }
                reset() {
                    this._x = 0, this._y = 0, this._nextY = 0, this.fontDefDictionary.clear();
                }
                destroy() {
                    this.reset(), this.fontDefDictionary && (this.fontDefDictionary.texture.destroy(), this.fontDefDictionary.texture = null);
                }
                getTexture() {
                    return this.fontDefDictionary.getTexture();
                }
                beforeSceneLoad() {
                    this.clearAllCache();
                }
                clearAllCache() {
                    this.destroy();
                    const i1008 = new g188();
                    i1008.initWithSize(this._width, this._height), this.fontDefDictionary.texture = i1008;
                }
                getLetter(h1008) {
                    return this.fontDefDictionary.letterDefinitions[h1008];
                }
                getLetterDefinitionForChar(c1008, d1008) {
                    const e1008 = c1008.charCodeAt(0) + d1008.hash;
                    let f1008 = this.fontDefDictionary.letterDefinitions[e1008];
                    if (!f1008) {
                        const g1008 = new f188(c1008, d1008);
                        g1008.updateRenderData(), f1008 = this.insertLetterTexture(g1008), g1008.destroy();
                    }
                    return f1008;
                }
            }
            const i188 = {
                fontAtlas: null,
                fontSize: 0,
                lineHeight: 0,
                hAlign: 0,
                vAlign: 0,
                hash: "",
                fontFamily: "",
                fontDesc: "Arial",
                color: a147.WHITE.clone(),
                isOutlined: !1,
                out: a147.WHITE.clone(),
                margin: 0,
                fontScale: 1
            }, j188 = [new o160(g159.ATTR_POSITION, t157.RGB32F)], k188 = [new o160(g159.ATTR_POSITION, t157.RGB32F), new o160(g159.ATTR_COLOR, t157.RGBA32F)], l188 = [new o160(g159.ATTR_POSITION, t157.RGB32F), new o160(g159.ATTR_TEX_COORD, t157.RG32F), new o160(g159.ATTR_COLOR, t157.RGBA32F)], m188 = [new o160(g159.ATTR_POSITION, t157.RGB32F), new o160(g159.ATTR_TEX_COORD, t157.RG32F), new o160(g159.ATTR_COLOR, t157.RGBA8, !0)], n188 = [new o160(g159.ATTR_POSITION, t157.RGB32F), new o160(g159.ATTR_TEX_COORD, t157.RG32F), new o160(g159.ATTR_COLOR, t157.RGBA32F), new o160(g159.ATTR_COLOR2, t157.RGBA32F)], o188 = [new o160(g159.ATTR_POSITION, t157.RGB32F), new o160(g159.ATTR_TEX_COORD, t157.RG32F), new o160(g159.ATTR_COLOR, t157.RGBA8, !0), new o160(g159.ATTR_COLOR2, t157.RGBA8, !0)];
            function t137(y1007) {
                let z1007 = 0;
                for (let a1008 = 0; a1008 < y1007.length; a1008++) {
                    const b1008 = y1007[a1008];
                    z1007 += n161[b1008.format].count;
                }
                return z1007;
            }
            function u137(u1007) {
                let v1007 = 0;
                for (let w1007 = 0; w1007 < u1007.length; w1007++) {
                    const x1007 = u1007[w1007];
                    v1007 += n161[x1007.format].size;
                }
                return v1007;
            }
            s143.internal.vfmtPosUvColor = l188, s143.internal.vfmtPosUvTwoColor = n188, s143.internal.vfmtPosUvColor4B = m188, s143.internal.vfmtPosUvTwoColor4B = o188, g125("UIVertexFormat", Object.freeze({
                __proto__: null,
                vfmt: j188,
                vfmtPosColor: k188,
                vfmtPosUvColor: l188,
                vfmtPosUvColor4B: m188,
                vfmtPosUvTwoColor: n188,
                vfmtPosUvTwoColor4B: o188,
                getComponentPerVertex: t137,
                getAttributeStride: u137
            }));
            const p188 = n2d.RenderDrawInfo;
            n2d.Batcher2d;
            const q188 = n2d.UIMeshBuffer, r188 = n2d.RenderEntity, s188 = n2d.UIModelProxy;
            var t188;
            n2d.StencilManager, function (t1007) {
                t1007[t1007.byteOffset = 0] = "byteOffset", t1007[t1007.vertexOffset = 1] = "vertexOffset", t1007[t1007.indexOffset = 2] = "indexOffset", t1007[t1007.dirty = 3] = "dirty", t1007[t1007.count = 4] = "count";
            }(t188 || (t188 = {}));
            class u188 {
                get attributes() {
                    return this._attributes;
                }
                get vertexFormatBytes() {
                    return this._vertexFormatBytes;
                }
                get byteOffset() {
                    return this._byteOffset;
                }
                set byteOffset(s1007) {
                    this._byteOffset = s1007, this._sharedBuffer[t188.byteOffset] = s1007;
                }
                get vertexOffset() {
                    return this._vertexOffset;
                }
                set vertexOffset(r1007) {
                    this._vertexOffset = r1007, this._sharedBuffer[t188.vertexOffset] = r1007;
                }
                get indexOffset() {
                    return this._indexOffset;
                }
                set indexOffset(q1007) {
                    this._indexOffset = q1007, this._sharedBuffer[t188.indexOffset] = q1007;
                }
                get dirty() {
                    return this._dirty;
                }
                set dirty(p1007) {
                    this._dirty = p1007, this._sharedBuffer[t188.dirty] = p1007 ? 1 : 0;
                }
                get floatsPerVertex() {
                    return this._floatsPerVertex;
                }
                set floatsPerVertex(o1007) {
                    this._floatsPerVertex = o1007;
                }
                get vData() {
                    return this._vData;
                }
                set vData(n1007) {
                    this._vData = n1007, this._nativeObj.vData = n1007;
                }
                get iData() {
                    return this._iData;
                }
                set iData(m1007) {
                    this._iData = m1007, this._nativeObj.iData = m1007;
                }
                get nativeObj() {
                    return this._nativeObj;
                }
                get sharedBuffer() {
                    return this._sharedBuffer;
                }
                initSharedBuffer() {
                    this._sharedBuffer = new Uint32Array(t188.count);
                }
                syncSharedBufferToNative() {
                    this._nativeObj.syncSharedBufferToNative(this._sharedBuffer);
                }
                constructor() {
                    this._byteOffset = 0, this._vertexOffset = 0, this._indexOffset = 0, this._dirty = !1, this._floatsPerVertex = 0, this._vData = null, this._iData = null, this._vertexFormatBytes = 0, this._initVDataCount = 0, this._initIDataCount = 0, this._attributes = null, this._iaPool = [], this._iaInfo = null, this._nextFreeIAHandle = 0, this._nativeObj = new q188(), this.initSharedBuffer(), this.syncSharedBufferToNative();
                }
                initialize(i1007, j1007, k1007, l1007) {
                    this._initVDataCount = k1007, this._initIDataCount = l1007, this._attributes = j1007, this.floatsPerVertex = u137(j1007) >> 2, this._initVDataCount, this._floatsPerVertex, b126(9005), this.vData && this.iData || (this.vData = new Float32Array(this._initVDataCount), this.iData = new Uint16Array(this._initIDataCount)), this._iaPool.push(this.createNewIA(i1007)), this._nativeObj.initialize(j1007);
                }
                reset() {
                    this._nextFreeIAHandle = 0, this.dirty = !1;
                }
                destroy() {
                    this.reset(), this._attributes = null, this._iaInfo = null, this.vData = null, this.iData = null;
                    for (let g1007 = 0; g1007 < this._iaPool.length; ++g1007) {
                        const h1007 = this._iaPool[g1007];
                        h1007.vertexBuffers[0] && h1007.vertexBuffers[0].destroy(), h1007.indexBuffer && h1007.indexBuffer.destroy(), h1007.ia.destroy();
                    }
                    this._iaPool.length = 0;
                }
                setDirty() {
                    this.dirty = !0;
                }
                request(e1007, f1007) {
                    return y125(9002), !1;
                }
                requireFreeIA(d1007) {
                    return this._iaPool.length <= this._nextFreeIAHandle && this._iaPool.push(this.createNewIA(d1007)), this._iaPool[this._nextFreeIAHandle++].ia;
                }
                recycleIA(z1006) {
                    const a1007 = this._iaPool;
                    for (let b1007 = 0; b1007 < this._nextFreeIAHandle; ++b1007)
                        if (z1006 === a1007[b1007].ia) {
                            const c1007 = a1007[b1007];
                            return a1007[b1007] = a1007[--this._nextFreeIAHandle], void (a1007[this._nextFreeIAHandle] = c1007);
                        }
                }
                checkCapacity(v1006, w1006) {
                    const x1006 = (this.vertexOffset + v1006) * this._floatsPerVertex, y1006 = this.indexOffset + w1006;
                    return !(x1006 > this._initVDataCount || y1006 > this._initIDataCount);
                }
                uploadBuffers() {
                    if (0 === this.byteOffset || !this._dirty)
                        return;
                    const j1006 = i157.__isWebIOS14OrIPadOS14Env, k1006 = j1006 ? this._nextFreeIAHandle : 1;
                    if (j1006 && k1006 / this._iaPool.length < .5) {
                        const s1006 = k1006 / .5;
                        for (let t1006 = this._iaPool.length - 1; t1006 >= s1006; t1006--) {
                            const u1006 = this._iaPool[t1006];
                            u1006.vertexBuffers[0] && u1006.vertexBuffers[0].destroy(), u1006.indexBuffer && u1006.indexBuffer.destroy(), u1006.ia.destroy();
                        }
                        this._iaPool.length = s1006;
                    }
                    const l1006 = this.byteOffset, m1006 = this.indexOffset;
                    for (let n1006 = 0; n1006 < k1006; ++n1006) {
                        const o1006 = this._iaPool[n1006], p1006 = new Float32Array(this.vData.buffer, 0, l1006 >> 2), q1006 = new Uint16Array(this.iData.buffer, 0, m1006), r1006 = o1006.vertexBuffers[0];
                        l1006 > r1006.size && r1006.resize(l1006), r1006.update(p1006), 2 * m1006 > o1006.indexBuffer.size && o1006.indexBuffer.resize(2 * m1006), o1006.indexBuffer.update(q1006);
                    }
                    this.dirty = !1;
                }
                createNewIA(c1006) {
                    let d1006, e1006, f1006;
                    if (i157.__isWebIOS14OrIPadOS14Env || !this._iaPool[0]) {
                        const g1006 = this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT, h1006 = Uint16Array.BYTES_PER_ELEMENT, i1006 = c1006.createBuffer(new x159(w157.VERTEX | w157.TRANSFER_DST, z157.HOST | z157.DEVICE, g1006, g1006));
                        f1006 = c1006.createBuffer(new x159(w157.INDEX | w157.TRANSFER_DST, z157.HOST | z157.DEVICE, h1006, h1006)), e1006 = [i1006], this._iaInfo = new q160(this._attributes, e1006, f1006), d1006 = c1006.createInputAssembler(this._iaInfo);
                    }
                    else
                        d1006 = c1006.createInputAssembler(this._iaInfo), e1006 = this._iaInfo.vertexBuffers, f1006 = this._iaInfo.indexBuffer;
                    return {
                        ia: d1006,
                        vertexBuffers: e1006,
                        indexBuffer: f1006
                    };
                }
            }
            g125("MeshBuffer", u188);
            const v188 = new x155(() => ({
                offset: 0,
                length: 0
            }), 32);
            class w188 {
                get ib() {
                    return this._ib;
                }
                constructor(w1005, x1005, y1005, z1005, a1006, b1006) {
                    this._ib = void 0, this.vertexAccessor = w1005, this.bufferId = x1005, this.meshBuffer = y1005, this.vertexOffset = z1005, this.vb = a1006, this.indexCount = b1006, this._ib = new Uint16Array(b1006), w1005.getMeshBuffer(x1005);
                }
                setIndexBuffer(t1005) {
                    t1005.length, this.ib.length;
                    for (let u1005 = 0; u1005 < t1005.length; ++u1005) {
                        const v1005 = t1005[u1005];
                        this._ib[u1005] = this.vertexOffset + v1005;
                    }
                }
            }
            class x188 extends class {
                get attributes() {
                    return this._attributes;
                }
                get vertexFormatBytes() {
                    return this._vertexFormatBytes;
                }
                get floatsPerVertex() {
                    return this._floatsPerVertex;
                }
                constructor(r1005, s1005) {
                    this._device = null, this._attributes = null, this._vertexFormatBytes = void 0, this._floatsPerVertex = void 0, this._buffers = [], this._device = r1005, this._attributes = s1005, this._floatsPerVertex = u137(s1005) >> 2, this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT;
                }
                initialize() { }
                reset() { }
                request(p1005 = 4, q1005 = 6) { }
                appendBuffers(n1005, o1005) { }
                uploadBuffers() { }
                destroy() {
                    this._attributes.length = 0;
                }
            } {
                get id() {
                    return this._id;
                }
                constructor(j1005, k1005, l1005, m1005) {
                    super(j1005, k1005), this._freeLists = [], this._vCount = 0, this._iCount = 0, this._id = 0, this._vCount = l1005 || Math.floor(1024 * s145.BATCHER2D_MEM_INCREMENT / this._vertexFormatBytes), this._iCount = m1005 || this._vCount * x188.IB_SCALE, this._id = x188.generateID(), this._allocateBuffer();
                }
                destroy() {
                    for (let g1005 = 0; g1005 < this._buffers.length; ++g1005) {
                        this._buffers[g1005].destroy();
                        const h1005 = this._freeLists[g1005];
                        for (let i1005 = 0; i1005 < h1005.length; ++i1005)
                            v188.free(h1005[i1005]);
                    }
                    this._buffers.length = 0, this._freeLists.length = 0, super.destroy();
                }
                reset() {
                    for (let e1005 = 0; e1005 < this._buffers.length; ++e1005) {
                        const f1005 = this._buffers[e1005];
                        f1005.indexOffset = 0, f1005.reset();
                    }
                }
                getVertexBuffer(d1005) {
                    return this._buffers[d1005].vData;
                }
                getIndexBuffer(c1005) {
                    return this._buffers[c1005].iData;
                }
                getMeshBuffer(b1005) {
                    return this._buffers[b1005];
                }
                uploadBuffers() {
                    for (let y1004 = 0; y1004 < this._buffers.length; ++y1004) {
                        const z1004 = this._freeLists[y1004][0], a1005 = this._buffers[y1004];
                        (!z1004 || z1004.length < a1005.vData.byteLength) && a1005.uploadBuffers();
                    }
                }
                appendIndices(s1004, t1004) {
                    const u1004 = this._buffers[s1004];
                    if (t1004.length) {
                        const v1004 = u1004.indexOffset + t1004.length;
                        if (u1004.iData.length < v1004) {
                            const w1004 = Math.floor(1.25 * v1004), x1004 = new Uint16Array(w1004);
                            x1004.set(u1004.iData), u1004.iData = x1004;
                        }
                        u1004.iData.set(t1004, u1004.indexOffset), u1004.indexOffset += t1004.length;
                    }
                }
                allocateChunk(g1004, h1004) {
                    const i1004 = g1004 * this.vertexFormatBytes;
                    let j1004, k1004 = null, l1004 = 0, m1004 = -1, n1004 = null;
                    for (let q1004 = 0; q1004 < this._buffers.length; ++q1004) {
                        k1004 = this._buffers[q1004], j1004 = this._freeLists[q1004];
                        for (let r1004 = 0; r1004 < j1004.length; ++r1004)
                            if (j1004[r1004].length >= i1004) {
                                n1004 = j1004[r1004], l1004 = q1004, m1004 = r1004;
                                break;
                            }
                        if (n1004)
                            break;
                    }
                    if (n1004 || (l1004 = this._allocateBuffer(), k1004 = this._buffers[l1004], k1004 && k1004.checkCapacity(g1004, h1004) && (m1004 = 0, n1004 = this._freeLists[l1004][m1004])), n1004) {
                        const o1004 = n1004.offset / this.vertexFormatBytes, p1004 = new Float32Array(k1004.vData.buffer, n1004.offset, i1004 >> 2).fill(0);
                        return this._allocateChunkFromEntry(l1004, m1004, n1004, i1004), new w188(this, l1004, k1004, o1004, p1004, h1004);
                    }
                    return z125(9004, i1004), null;
                }
                recycleChunk(v1003) {
                    const w1003 = this._freeLists[v1003.bufferId], x1003 = this._buffers[v1003.bufferId];
                    let y1003 = v1003.vertexOffset * this.vertexFormatBytes, z1003 = v1003.vb.byteLength;
                    if (0 === z1003)
                        return;
                    let a1004 = !1, b1004 = 0, c1004 = null, d1004 = w1003[b1004];
                    for (; d1004 && d1004.offset < y1003;)
                        c1004 = d1004, d1004 = w1003[++b1004];
                    if (c1004 && 0 == y1003 - (c1004.offset + c1004.length) && (c1004.length += z1003, y1003 = c1004.offset, z1003 = c1004.length, d1004 && d1004.offset - (y1003 + z1003) == 0 && (c1004.length += d1004.length, w1003.splice(b1004, 1), v188.free(d1004), d1004 = null), a1004 = !0), !a1004 && d1004) {
                        if (0 == d1004.offset - (y1003 + z1003))
                            d1004.offset = y1003, d1004.length += z1003;
                        else {
                            const f1004 = v188.alloc();
                            f1004.offset = y1003, f1004.length = z1003, w1003.splice(b1004, 0, f1004);
                        }
                        a1004 = !0;
                    }
                    if (a1004)
                        y1003 + z1003 === x1003.byteOffset && (x1003.byteOffset = y1003);
                    else {
                        const e1004 = v188.alloc();
                        e1004.offset = y1003, e1004.length = z1003, w1003.push(e1004);
                    }
                }
                _allocateChunkFromEntry(o1003, p1003, q1003, r1003) {
                    const s1003 = q1003.length - r1003, t1003 = q1003.offset + r1003, u1003 = this._buffers[o1003];
                    u1003.byteOffset < t1003 && (u1003.byteOffset = t1003), a126(s1003 >= 0, 9004, o1003, q1003.offset, q1003.length), 0 === s1003 ? (this._freeLists[o1003].splice(p1003, 1), v188.free(q1003)) : (q1003.offset += r1003, q1003.length = s1003);
                }
                _allocateBuffer() {
                    a126(this._buffers.length === this._freeLists.length, 9003);
                    const k1003 = new u188(), l1003 = this._vCount * this._floatsPerVertex;
                    k1003.initialize(this._device, this._attributes, l1003, this._iCount), this._buffers.push(k1003);
                    const m1003 = v188.alloc();
                    m1003.offset = 0, m1003.length = k1003.vData.byteLength;
                    const n1003 = [m1003];
                    return this._freeLists.push(n1003), t185.root.batcher2D.syncMeshBuffersToNative(this.id, this._buffers), this._buffers.length - 1;
                }
                static generateID() {
                    return x188.ID_COUNT++;
                }
            }
            let y188, z188, a189, b189, c189, d189, e189, f189, g189, h189, i189;
            x188.IB_SCALE = 4, x188.ID_COUNT = 0, function (j1003) {
                j1003[j1003.DrawInfoType = 0] = "DrawInfoType", j1003[j1003.VertDirty = 1] = "VertDirty", j1003[j1003.IsMeshBuffer = 2] = "IsMeshBuffer", j1003[j1003.Stride = 3] = "Stride", j1003[j1003.Count = 4] = "Count";
            }(y188 || (y188 = {})), function (i1003) {
                i1003[i1003.BufferID = 0] = "BufferID", i1003[i1003.AccessorID = 1] = "AccessorID", i1003[i1003.Count = 2] = "Count";
            }(z188 || (z188 = {})), function (h1003) {
                h1003[h1003.VertexOffset = 0] = "VertexOffset", h1003[h1003.IndexOffset = 1] = "IndexOffset", h1003[h1003.VBCount = 2] = "VBCount", h1003[h1003.IBCount = 3] = "IBCount", h1003[h1003.DataHash = 4] = "DataHash", h1003[h1003.Count = 5] = "Count";
            }(a189 || (a189 = {})), function (g1003) {
                g1003[g1003.COMP = 0] = "COMP", g1003[g1003.MODEL = 1] = "MODEL", g1003[g1003.MIDDLEWARE = 2] = "MIDDLEWARE", g1003[g1003.SUB_NODE = 3] = "SUB_NODE";
            }(b189 || (b189 = {}));
            class j189 {
                constructor(d1003) {
                    this._accId = -1, this._bufferId = -1, this._vertexOffset = 0, this._indexOffset = 0, this._vb = null, this._ib = null, this._vData = null, this._iData = null, this._vertDirty = !1, this._vbCount = 0, this._ibCount = 0, this._dataHash = 0, this._isMeshBuffer = !1, this._material = null, this._texture = null, this._sampler = null, this._stride = 0, this._useLocal = !1, this._model = null, this._drawInfoType = b189.COMP, this._subNode = null, this._uint8SharedBuffer = void 0, this._uint16SharedBuffer = void 0, this._uint32SharedBuffer = void 0, this.init(d1003);
                    const e1003 = this._nativeObj.getAttrSharedBufferForJS();
                    let f1003 = 0;
                    this._uint8SharedBuffer = new Uint8Array(e1003, f1003, y188.Count), f1003 += y188.Count * Uint8Array.BYTES_PER_ELEMENT, this._uint16SharedBuffer = new Uint16Array(e1003, f1003, z188.Count), f1003 += z188.Count * Uint16Array.BYTES_PER_ELEMENT, this._uint32SharedBuffer = new Uint32Array(e1003, f1003, a189.Count);
                }
                get nativeObj() {
                    return this._nativeObj;
                }
                get render2dBuffer() {
                    return this._render2dBuffer;
                }
                init(c1003) {
                    c1003 && (this._nativeObj = c1003), this._nativeObj || (this._nativeObj = new p188());
                }
                clear() {
                    this._bufferId = 0, this._vertexOffset = 0, this._indexOffset = 0, this._vertDirty = !1;
                }
                setAccId(b1003) {
                    this._accId !== b1003 && (this._uint16SharedBuffer[z188.AccessorID] = b1003), this._accId = b1003;
                }
                setBufferId(a1003) {
                    this._bufferId !== a1003 && (this._uint16SharedBuffer[z188.BufferID] = a1003, this._nativeObj.changeMeshBuffer()), this._bufferId = a1003;
                }
                setAccAndBuffer(y1002, z1002) {
                    this._accId === y1002 && this._bufferId === z1002 || (this._uint16SharedBuffer[z188.AccessorID] = y1002, this._uint16SharedBuffer[z188.BufferID] = z1002, this._nativeObj.changeMeshBuffer()), this._bufferId = z1002, this._accId = y1002;
                }
                setVertexOffset(x1002) {
                    this._vertexOffset = x1002, this._uint32SharedBuffer[a189.VertexOffset] = x1002;
                }
                setIndexOffset(w1002) {
                    this._indexOffset = w1002, this._uint32SharedBuffer[a189.IndexOffset] = w1002;
                }
                setVB(v1002) {
                    this._nativeObj.vbBuffer = v1002;
                }
                setIB(u1002) {
                    this._nativeObj.ibBuffer = u1002;
                }
                setVData(t1002) {
                    this._nativeObj.vDataBuffer = t1002;
                }
                setIData(s1002) {
                    this._nativeObj.iDataBuffer = s1002;
                }
                setVBCount(r1002) {
                    this._uint32SharedBuffer[a189.VBCount] = r1002, this._vbCount = r1002;
                }
                setIBCount(q1002) {
                    this._uint32SharedBuffer[a189.IBCount] = q1002;
                }
                setVertDirty(p1002) {
                    this._uint8SharedBuffer[y188.VertDirty] = p1002 ? 1 : 0, this._vertDirty = p1002;
                }
                setDataHash(o1002) {
                    this._uint32SharedBuffer[a189.DataHash] = o1002, this._dataHash = o1002;
                }
                setIsMeshBuffer(n1002) {
                    this._uint8SharedBuffer[y188.IsMeshBuffer] = n1002 ? 1 : 0, this._isMeshBuffer = n1002;
                }
                setMaterial(m1002) {
                    this._material !== m1002 && (this._nativeObj.material = m1002), this._material = m1002;
                }
                setTexture(l1002) {
                    this._texture !== l1002 && (this._nativeObj.texture = l1002), this._texture = l1002;
                }
                setSampler(k1002) {
                    this._sampler !== k1002 && (this._nativeObj.sampler = k1002), this._sampler = k1002;
                }
                setModel(j1002) {
                    this._model !== j1002 && (this._nativeObj.model = j1002);
                }
                setDrawInfoType(i1002) {
                    this._drawInfoType !== i1002 && (this._uint8SharedBuffer[y188.DrawInfoType] = i1002), this._drawInfoType = i1002;
                }
                setSubNode(h1002) {
                    this._subNode !== h1002 && (this._nativeObj.subNode = h1002), this._subNode = h1002;
                }
                setStride(g1002) {
                    this._uint8SharedBuffer[y188.Stride] = g1002, this._stride = g1002;
                }
                initRender2dBuffer() {
                    this._render2dBuffer = new Float32Array(this._vbCount * this._stride), this._nativeObj.setRender2dBufferToNative(this._render2dBuffer);
                }
                fillRender2dBuffer(b1002) {
                    {
                        const c1002 = Math.min(this._vbCount, b1002.length);
                        let d1002 = 0;
                        for (let e1002 = 0; e1002 < c1002; e1002++) {
                            const f1002 = b1002[e1002];
                            this._render2dBuffer[d1002] = f1002.x, this._render2dBuffer[d1002 + 1] = f1002.y, this._render2dBuffer[d1002 + 2] = f1002.z, d1002 += this._stride;
                        }
                    }
                }
            }
            !function (a1002) {
                a1002[a1002.DISABLED = 0] = "DISABLED", a1002[a1002.CLEAR = 1] = "CLEAR", a1002[a1002.ENTER_LEVEL = 2] = "ENTER_LEVEL", a1002[a1002.ENABLED = 3] = "ENABLED", a1002[a1002.EXIT_LEVEL = 4] = "EXIT_LEVEL", a1002[a1002.CLEAR_INVERTED = 5] = "CLEAR_INVERTED", a1002[a1002.ENTER_LEVEL_INVERTED = 6] = "ENTER_LEVEL_INVERTED";
            }(c189 || (c189 = {})), function (z1001) {
                z1001[z1001.stencilTest = 0] = "stencilTest", z1001[z1001.func = 1] = "func", z1001[z1001.stencilMask = 2] = "stencilMask", z1001[z1001.writeMask = 3] = "writeMask", z1001[z1001.failOp = 4] = "failOp", z1001[z1001.zFailOp = 5] = "zFailOp", z1001[z1001.passOp = 6] = "passOp", z1001[z1001.ref = 7] = "ref", z1001[z1001.count = 8] = "count";
            }(d189 || (d189 = {}));
            class k189 {
                constructor() {
                    this._maskStack = [], this._stencilPattern = {
                        stencilTest: !0,
                        func: i158.ALWAYS,
                        stencilMask: 65535,
                        writeMask: 65535,
                        failOp: j158.KEEP,
                        zFailOp: j158.KEEP,
                        passOp: j158.KEEP,
                        ref: 1
                    }, this._stage = c189.DISABLED, this.stencilStateMap = new Map(), this.stencilStateMapWithDepth = new Map();
                }
                get stage() {
                    return this._stage;
                }
                set stage(y1001) {
                    this._stage = y1001;
                }
                get pattern() {
                    return this._stencilPattern;
                }
                pushMask(x1001) {
                    this._maskStack.push(x1001);
                }
                clear(w1001) {
                    return w1001.stencilStage !== c189.ENTER_LEVEL ? c189.CLEAR_INVERTED : c189.CLEAR;
                }
                enableMask() {
                    this.stage = c189.ENABLED;
                }
                exitMask() {
                    0 !== this._maskStack.length && (this._maskStack.pop(), 0 === this._maskStack.length ? this.stage = c189.DISABLED : this.stage = c189.ENABLED);
                }
                getWriteMask() {
                    return 1 << this._maskStack.length - 1;
                }
                getExitWriteMask() {
                    return 1 << this._maskStack.length;
                }
                getStencilRef() {
                    let u1001 = 0;
                    for (let v1001 = 0; v1001 < this._maskStack.length; ++v1001)
                        u1001 += 1 << v1001;
                    return u1001;
                }
                getMaskStackSize() {
                    return this._maskStack.length;
                }
                reset() {
                    this._maskStack.length = 0, this.stage = c189.DISABLED;
                }
                destroy() {
                    this.stencilStateMap.forEach(t1001 => {
                        t1001.destroy();
                    }), this.stencilStateMap.clear();
                }
                getStencilStage(h1001, i1001) {
                    let j1001 = 0, k1001 = !1, l1001 = !1, m1001 = i158.LESS, n1001 = this.stencilStateMap;
                    if (i1001 && i1001.passes[0]) {
                        const p1001 = i1001.passes[0].depthStencilState;
                        let q1001 = 0, r1001 = 0;
                        p1001.depthTest && (q1001 = 1), p1001.depthWrite && (r1001 = 1), j1001 = q1001 | r1001 << 1 | p1001.depthFunc << 2 | h1001 << 6 | this._maskStack.length << 9, k1001 = p1001.depthTest, l1001 = p1001.depthWrite, m1001 = p1001.depthFunc, n1001 = this.stencilStateMapWithDepth;
                    }
                    else
                        j1001 = h1001 << 16 | this._maskStack.length;
                    if (n1001 && n1001.has(j1001))
                        return n1001.get(j1001);
                    this.setStateFromStage(h1001);
                    const o1001 = new u161(k1001, l1001, m1001, this._stencilPattern.stencilTest, this._stencilPattern.func, this._stencilPattern.stencilMask, this._stencilPattern.writeMask, this._stencilPattern.failOp, this._stencilPattern.zFailOp, this._stencilPattern.passOp, this._stencilPattern.ref, this._stencilPattern.stencilTest, this._stencilPattern.func, this._stencilPattern.stencilMask, this._stencilPattern.writeMask, this._stencilPattern.failOp, this._stencilPattern.zFailOp, this._stencilPattern.passOp, this._stencilPattern.ref);
                    return n1001.set(j1001, o1001), o1001;
                }
                getStencilHash(g1001) {
                    return g1001 << 8 | this._maskStack.length;
                }
                setStateFromStage(e1001) {
                    const f1001 = this._stencilPattern;
                    e1001 === c189.DISABLED ? (f1001.stencilTest = !1, f1001.func = i158.ALWAYS, f1001.failOp = j158.KEEP, f1001.stencilMask = f1001.writeMask = 65535, f1001.ref = 1) : (f1001.stencilTest = !0, e1001 === c189.ENABLED ? (f1001.func = i158.EQUAL, f1001.failOp = j158.KEEP, f1001.stencilMask = f1001.ref = this.getStencilRef(), f1001.writeMask = this.getWriteMask()) : e1001 === c189.CLEAR ? (f1001.func = i158.NEVER, f1001.failOp = j158.ZERO, f1001.writeMask = f1001.stencilMask = f1001.ref = this.getWriteMask()) : e1001 === c189.CLEAR_INVERTED || e1001 === c189.ENTER_LEVEL ? (f1001.func = i158.NEVER, f1001.failOp = j158.REPLACE, f1001.writeMask = f1001.stencilMask = f1001.ref = this.getWriteMask()) : e1001 === c189.ENTER_LEVEL_INVERTED && (f1001.func = i158.NEVER, f1001.failOp = j158.ZERO, f1001.writeMask = f1001.stencilMask = f1001.ref = this.getWriteMask()));
                }
            }
            g125("StencilManager", k189), k189.sharedManager = null, k189.sharedManager = new k189(), function (d1001) {
                d1001[d1001.STATIC = 0] = "STATIC", d1001[d1001.DYNAMIC = 1] = "DYNAMIC", d1001[d1001.CROSSED = 2] = "CROSSED";
            }(e189 || (e189 = {})), function (c1001) {
                c1001[c1001.localOpacity = 0] = "localOpacity", c1001[c1001.count = 1] = "count";
            }(f189 || (f189 = {})), function (b1001) {
                b1001[b1001.colorR = 0] = "colorR", b1001[b1001.colorG = 1] = "colorG", b1001[b1001.colorB = 2] = "colorB", b1001[b1001.colorA = 3] = "colorA", b1001[b1001.maskMode = 4] = "maskMode", b1001[b1001.count = 5] = "count";
            }(g189 || (g189 = {})), function (a1001) {
                a1001[a1001.colorDirty = 0] = "colorDirty", a1001[a1001.enabled = 1] = "enabled", a1001[a1001.useLocal = 2] = "useLocal", a1001[a1001.count = 3] = "count";
            }(h189 || (h189 = {})), function (z1000) {
                z1000[z1000.NONE = 0] = "NONE", z1000[z1000.MASK = 1] = "MASK", z1000[z1000.MASK_INVERTED = 2] = "MASK_INVERTED", z1000[z1000.MASK_NODE = 3] = "MASK_NODE", z1000[z1000.MASK_NODE_INVERTED = 4] = "MASK_NODE_INVERTED";
            }(i189 || (i189 = {}));
            class l189 {
                get nativeObj() {
                    return this._nativeObj;
                }
                get renderDrawInfoArr() {
                    return this._dynamicDrawInfoArr;
                }
                get renderEntityType() {
                    return this._renderEntityType;
                }
                get color() {
                    return this._color;
                }
                set color(y1000) {
                    this._color = y1000, this._uint8SharedBuffer[g189.colorR] = y1000.r, this._uint8SharedBuffer[g189.colorG] = y1000.g, this._uint8SharedBuffer[g189.colorB] = y1000.b, this._uint8SharedBuffer[g189.colorA] = y1000.a;
                }
                get localOpacity() {
                    return this._localOpacity;
                }
                set localOpacity(x1000) {
                    this._localOpacity = x1000, this._floatSharedBuffer[f189.localOpacity] = x1000;
                }
                get colorDirty() {
                    return this._colorDirty;
                }
                set colorDirty(w1000) {
                    this._colorDirty = w1000, this._boolSharedBuffer[h189.colorDirty] = w1000 ? 1 : 0;
                }
                get enabled() {
                    return this._enabled;
                }
                set enabled(v1000) {
                    this._enabled = v1000, this._boolSharedBuffer[h189.enabled] = v1000 ? 1 : 0;
                }
                constructor(u1000) {
                    this._renderEntityType = e189.STATIC, this._dynamicDrawInfoArr = [], this._node = null, this._renderTransform = null, this._stencilStage = c189.DISABLED, this._useLocal = !1, this._maskMode = i189.NONE, this._color = a147.WHITE, this._localOpacity = 255, this._colorDirty = !0, this._enabled = !1, this._nativeObj || (this._nativeObj = new r188(u1000)), this._renderEntityType = u1000, this.initSharedBuffer();
                }
                addDynamicRenderDrawInfo(t1000) {
                    t1000 && (this._dynamicDrawInfoArr.push(t1000), this._nativeObj.addDynamicRenderDrawInfo(t1000.nativeObj));
                }
                removeDynamicRenderDrawInfo() {
                    this._dynamicDrawInfoArr.pop(), this._nativeObj.removeDynamicRenderDrawInfo();
                }
                clearDynamicRenderDrawInfos() {
                    this._dynamicDrawInfoArr.length = 0, this._nativeObj.clearDynamicRenderDrawInfos();
                }
                clearStaticRenderDrawInfos() {
                    this._nativeObj.clearStaticRenderDrawInfos();
                }
                setDynamicRenderDrawInfo(r1000, s1000) {
                    r1000 && (this._dynamicDrawInfoArr.length < s1000 + 1 ? (this._dynamicDrawInfoArr.push(r1000), this._nativeObj.addDynamicRenderDrawInfo(r1000.nativeObj)) : (this._dynamicDrawInfoArr[s1000] = r1000, this._nativeObj.setDynamicRenderDrawInfo(r1000.nativeObj, s1000)));
                }
                setMaskMode(q1000) {
                    this._uint8SharedBuffer[g189.maskMode] = q1000, this._maskMode = q1000;
                }
                getStaticRenderDrawInfo() {
                    {
                        const p1000 = this._nativeObj.getStaticRenderDrawInfo(this._nativeObj.staticDrawInfoSize++);
                        return new j189(p1000);
                    }
                }
                setNode(o1000) {
                    this._node !== o1000 && (this._nativeObj.node = o1000), this._node = o1000;
                }
                setRenderTransform(n1000) {
                    this._renderTransform !== n1000 && (this._nativeObj.renderTransform = n1000), this._renderTransform = n1000;
                }
                setStencilStage(m1000) {
                    this._stencilStage !== m1000 && (this._nativeObj.stencilStage = m1000), this._stencilStage = m1000;
                }
                setUseLocal(l1000) {
                    this._boolSharedBuffer[h189.useLocal] = l1000 ? 1 : 0, this._useLocal = l1000;
                }
                initSharedBuffer() {
                    {
                        const j1000 = this._nativeObj.getEntitySharedBufferForJS();
                        let k1000 = 0;
                        this._floatSharedBuffer = new Float32Array(j1000, k1000, f189.count), k1000 += 4 * f189.count, this._uint8SharedBuffer = new Uint8Array(j1000, k1000, g189.count), k1000 += 1 * g189.count, this._boolSharedBuffer = new Uint8Array(j1000, k1000, h189.count);
                    }
                }
            }
            const m189 = u137(l188) >> 2;
            class n189 {
                get vertexCount() {
                    return this._vc;
                }
                get indexCount() {
                    return this._ic;
                }
                get stride() {
                    return this._floatStride << 2;
                }
                get floatStride() {
                    return this._floatStride;
                }
                get vertexFormat() {
                    return this._vertexFormat;
                }
                get drawInfoType() {
                    return this._drawInfoType;
                }
                set drawInfoType(i1000) {
                    this._drawInfoType = i1000, this._renderDrawInfo && this._renderDrawInfo.setDrawInfoType(i1000);
                }
                get renderDrawInfo() {
                    return this._renderDrawInfo;
                }
                get material() {
                    return this._material;
                }
                set material(h1000) {
                    this._material = h1000, this._renderDrawInfo && this._renderDrawInfo.setMaterial(h1000);
                }
                get dataHash() {
                    return this._dataHash;
                }
                set dataHash(g1000) {
                    this._dataHash = g1000, this._renderDrawInfo && this._renderDrawInfo.setDataHash(g1000);
                }
                get multiOwner() {
                    return this._multiOwner;
                }
                set multiOwner(f1000) {
                    this._multiOwner = f1000;
                }
                get batcher() {
                    return this._batcher || (this._batcher = t185.root.batcher2D), this._batcher;
                }
                constructor(e1000 = l188) {
                    this.chunk = null, this._renderDrawInfo = null, this._material = null, this._dataHash = 0, this._isMeshBuffer = !1, this._vc = 0, this._ic = 0, this._floatStride = 0, this._vertexFormat = l188, this._drawInfoType = b189.COMP, this._multiOwner = !1, this._batcher = null, this._floatStride = e1000 === l188 ? m189 : u137(e1000) >> 2, this._vertexFormat = e1000;
                }
                isValid() {
                    return this._ic > 0 && this.chunk.vertexAccessor;
                }
                initRenderDrawInfo(a1000, b1000 = b189.COMP) {
                    {
                        const c1000 = a1000.renderEntity;
                        if (c1000.renderEntityType === e189.STATIC) {
                            if (!this._renderDrawInfo) {
                                const d1000 = c1000.getStaticRenderDrawInfo();
                                d1000 && (this._renderDrawInfo = d1000);
                            }
                        }
                        else
                            !1 === this.multiOwner && (this._renderDrawInfo || (this._renderDrawInfo = new j189(), c1000.addDynamicRenderDrawInfo(this._renderDrawInfo)));
                        this.drawInfoType = b1000, this.setRenderDrawInfoAttributes();
                    }
                }
                removeRenderDrawInfo(y999) {
                    {
                        const z999 = y999.renderEntity;
                        z999.renderEntityType === e189.DYNAMIC ? z999.removeDynamicRenderDrawInfo() : z999.renderEntityType === e189.STATIC && z999.clearStaticRenderDrawInfos();
                    }
                }
                setRenderDrawInfoAttributes() {
                    this._renderDrawInfo && (this.chunk && (this._renderDrawInfo.setBufferId(this.chunk.bufferId), this._renderDrawInfo.setVertexOffset(this.chunk.vertexOffset), this._renderDrawInfo.setVB(this.chunk.vb), this._renderDrawInfo.setIB(this.chunk.ib), this.chunk.meshBuffer && (this._renderDrawInfo.setIndexOffset(this.chunk.meshBuffer.indexOffset), this._renderDrawInfo.setVData(this.chunk.meshBuffer.vData.buffer), this._renderDrawInfo.setIData(this.chunk.meshBuffer.iData.buffer))), this._renderDrawInfo.setVBCount(this._vc), this._renderDrawInfo.setIBCount(this._ic), this._renderDrawInfo.setDataHash(this.dataHash), this._renderDrawInfo.setIsMeshBuffer(this._isMeshBuffer), this._renderDrawInfo.setMaterial(this.material), this._renderDrawInfo.setDrawInfoType(this._drawInfoType));
                }
            }
            g125("BaseRenderData", n189);
            class o189 extends n189 {
                static add(v999 = l188, w999) {
                    const x999 = new o189(v999, w999);
                    return w999 || (w999 = t185.root.batcher2D.switchBufferAccessor(x999._vertexFormat)), x999._accessor = w999, x999;
                }
                static remove(u999) {
                    u999.clear(), u999._accessor = null;
                }
                get dataLength() {
                    return this._data.length;
                }
                set dataLength(r999) {
                    const s999 = this._data;
                    if (s999.length !== r999) {
                        for (let t999 = s999.length; t999 < r999; t999++)
                            s999.push({
                                x: 0,
                                y: 0,
                                z: 0,
                                u: 0,
                                v: 0,
                                color: a147.WHITE.clone()
                            });
                        s999.length = r999;
                    }
                    this.syncRender2dBuffer();
                }
                get data() {
                    return this._data;
                }
                get vertDirty() {
                    return this._vertDirty;
                }
                set vertDirty(q999) {
                    this._vertDirty = q999, this._renderDrawInfo && q999 && this._renderDrawInfo.setVertDirty(q999);
                }
                get textureHash() {
                    return this._textureHash;
                }
                set textureHash(p999) {
                    this._textureHash = p999;
                }
                set frame(o999) {
                    this._frame = o999, this._renderDrawInfo && (this._frame ? (this._renderDrawInfo.setTexture(this._frame.getGFXTexture()), this._renderDrawInfo.setSampler(this._frame.getGFXSampler())) : (this._renderDrawInfo.setTexture(null), this._renderDrawInfo.setSampler(null)));
                }
                get frame() {
                    return this._frame;
                }
                get accessor() {
                    return this._accessor;
                }
                constructor(m999 = l188, n999) {
                    super(m999), this._vertDirty = !0, this._textureHash = 0, this.indices = null, this.layer = 0, this.nodeDirty = !0, this.passDirty = !0, this.textureDirty = !0, this.hashDirty = !0, this._data = [], this._frame = null, this._accessor = null, this.vertexRow = 1, this.vertexCol = 1, n999 || (n999 = this.batcher.switchBufferAccessor(this._vertexFormat)), this._accessor = n999;
                }
                resize(k999, l999) {
                    k999 === this._vc && l999 === this._ic && this.chunk || (this._vc = k999, this._ic = l999, this.chunk && (this._accessor.recycleChunk(this.chunk), this.chunk = null), this.chunk = this._accessor.allocateChunk(k999, l999), this.updateHash(), !1 === this.multiOwner && this._renderDrawInfo && (this._renderDrawInfo.setDrawInfoType(this._drawInfoType), this._renderDrawInfo.setBufferId(this.chunk.bufferId), this._renderDrawInfo.setVertexOffset(this.chunk.vertexOffset), this._renderDrawInfo.setIndexOffset(this.chunk.meshBuffer.indexOffset), this._renderDrawInfo.setVB(this.chunk.vb), this._renderDrawInfo.setIB(this.chunk.ib), this._renderDrawInfo.setVData(this.chunk.meshBuffer.vData.buffer), this._renderDrawInfo.setIData(this.chunk.meshBuffer.iData.buffer), this._renderDrawInfo.setVBCount(this._vc), this._renderDrawInfo.setIBCount(this._ic)));
                }
                setRenderDrawInfoAttributes() {
                    this._renderDrawInfo && (this._renderDrawInfo.setAccId(this._accessor.id), super.setRenderDrawInfoAttributes(), this._renderDrawInfo.setTexture(this.frame ? this.frame.getGFXTexture() : null), this._renderDrawInfo.setSampler(this.frame ? this.frame.getGFXSampler() : null));
                }
                fillDrawInfoAttributes(j999) {
                    j999 && (j999.setDrawInfoType(this._drawInfoType), j999.setAccAndBuffer(this._accessor.id, this.chunk.bufferId), j999.setVertexOffset(this.chunk.vertexOffset), j999.setIndexOffset(this.chunk.meshBuffer.indexOffset), j999.setVB(this.chunk.vb), j999.setIB(this.chunk.ib), j999.setVData(this.chunk.meshBuffer.vData.buffer), j999.setIData(this.chunk.meshBuffer.iData.buffer), j999.setVBCount(this._vc), j999.setIBCount(this._ic), j999.setDataHash(this.dataHash), j999.setIsMeshBuffer(this._isMeshBuffer));
                }
                syncRender2dBuffer() {
                    if (!1 === this.multiOwner) {
                        if (!this._renderDrawInfo)
                            return;
                        this.renderDrawInfo.setStride(this.floatStride), this.renderDrawInfo.setVBCount(this.dataLength), this.renderDrawInfo.initRender2dBuffer();
                    }
                }
                resizeAndCopy(g999, h999) {
                    if (g999 === this._vc && h999 === this._ic && this.chunk)
                        return;
                    this._vc = g999, this._ic = h999;
                    const i999 = this.chunk;
                    this.chunk = this._accessor.allocateChunk(g999, h999), i999 && (this.chunk.vb.set(i999.vb), this._accessor.recycleChunk(i999)), this.updateHash();
                }
                getMeshBuffer() {
                    return this.chunk && this._accessor ? this._accessor.getMeshBuffer(this.chunk.bufferId) : null;
                }
                updateNode(f999) {
                    this.layer = f999.node.layer, this.nodeDirty = !1, this.hashDirty = !0;
                }
                updatePass(e999) {
                    this.material = e999.getRenderMaterial(0), this.passDirty = !1, this.hashDirty = !0;
                }
                updateTexture(d999) {
                    this.frame = d999, this.textureHash = d999.getHash(), this.textureDirty = !1, this.hashDirty = !0;
                }
                updateHash() {
                    const c999 = `${this.chunk ? this.chunk.bufferId : -1}${this.layer} ${this.textureHash}`;
                    this.dataHash = u133(c999, 666), this.hashDirty = !1;
                }
                updateRenderData(z998, a999) {
                    if (this.passDirty && (this.material = z998.getRenderMaterial(0), this.passDirty = !1, this.hashDirty = !0, this._renderDrawInfo && this._renderDrawInfo.setMaterial(this.material)), this.nodeDirty) {
                        const b999 = z998.node.scene ? z998._getRenderScene() : null;
                        this.layer = z998.node.layer, null !== b999 && (this.nodeDirty = !1), this.hashDirty = !0;
                    }
                    this.textureDirty && (this.frame = a999, this.textureHash = a999.getHash(), this.textureDirty = !1, this.hashDirty = !0, this._renderDrawInfo && (this._renderDrawInfo.setTexture(this.frame ? this.frame.getGFXTexture() : null), this._renderDrawInfo.setSampler(this.frame ? this.frame.getGFXSampler() : null))), this.hashDirty && (this.updateHash(), this._renderDrawInfo && this._renderDrawInfo.setDataHash(this.dataHash)), !1 === this.multiOwner && this._renderDrawInfo.fillRender2dBuffer(this._data);
                }
                clear() {
                    this.resize(0, 0), this._data.length = 0, this.indices = null, this.vertDirty = !0, this.material = null, this.nodeDirty = !0, this.passDirty = !0, this.textureDirty = !0, this.hashDirty = !0, this.layer = 0, this.frame = null, this.textureHash = 0, this.dataHash = 0, this._renderDrawInfo && this._renderDrawInfo.clear();
                }
                static createStaticVBAccessor(v998, w998, x998) {
                    const y998 = t185.root.device;
                    return new x188(y998, v998, w998, x998);
                }
            }
            g125("RenderData", o189);
            class p189 extends n189 {
                static add(t998 = l188) {
                    const u998 = new p189();
                    return u998._floatStride = t998 === l188 ? m189 : u137(t998) >> 2, u998._vertexFormat = t998, u998;
                }
                static remove(s998) {
                    s998.clear();
                }
                set formatByte(r998) { }
                get formatByte() {
                    return this.stride;
                }
                get floatStride() {
                    return this._floatStride;
                }
                get vDataOffset() {
                    return this._byteLength >>> 2;
                }
                constructor(q998 = l188) {
                    super(q998), this._isMeshBuffer = !0, this.vData = void 0, this.iData = void 0, this.vertexStart = 0, this.vertexRange = 0, this.indexStart = 0, this.indexRange = 0, this.lastFilledIndex = 0, this.lastFilledVertex = 0, this.frame = void 0, this._byteLength = 0, this._vertexBuffers = [], this._indexBuffer = null, this._iaPool = null, this._iaInfo = null, this.vData = new Float32Array(256 * this.stride), this.iData = new Uint16Array(1536);
                }
                request(n998, o998) {
                    const p998 = this._byteLength + n998 * this.stride;
                    return !!this.reserve(n998, o998) && (this._vc += n998, this._ic += o998, this._byteLength = p998, this.vertexRange = this._vc, this.indexRange = this._ic, !0);
                }
                reserve(f998, g998) {
                    const h998 = this._byteLength + f998 * this.stride, i998 = this.indexCount + g998;
                    if (f998 + this.vertexCount > 65535)
                        return !1;
                    let j998 = this.vData.byteLength, k998 = this.iData.length, l998 = this.vData.length, m998 = this.iData.length;
                    if (h998 > j998 || i998 > k998) {
                        for (; j998 < h998 || k998 < i998;)
                            l998 *= 2, m998 *= 2, j998 = 4 * l998, k998 = m998;
                        this._reallocBuffer(l998, m998);
                    }
                    return !0;
                }
                resize(c998, d998) {
                    const e998 = c998 * this.stride;
                    c998 >= 0 && d998 >= 0 && e998 <= this.vData.byteLength && this.iData.length, this._vc = c998, this._ic = d998, this._byteLength = e998, this.updateRange(0, c998, 0, d998);
                }
                updateRange(y997, z997, a998, b998) {
                    z997 >= 0 && b998 >= 0 && z997 <= this._vc && this._ic, this.vertexStart = y997, this.indexStart = a998, this.vertexRange = z997, this.indexRange = b998;
                }
                requestIA(w997) {
                    this._initIAInfo(w997);
                    const x997 = this._iaPool.add();
                    return x997.firstIndex = this.indexStart, x997.indexCount = this.indexRange, x997;
                }
                uploadBuffers() {
                    if (0 === this._byteLength || !this._vertexBuffers[0] || !this._indexBuffer)
                        return;
                    const r997 = this._ic, s997 = new Float32Array(this.vData.buffer, 0, this._byteLength >> 2), t997 = new Uint16Array(this.iData.buffer, 0, r997), u997 = this._vertexBuffers[0];
                    this._byteLength > u997.size && u997.resize(this._byteLength), u997.update(s997);
                    const v997 = r997 << 1;
                    v997 > this._indexBuffer.size && this._indexBuffer.resize(v997), this._indexBuffer.update(t997);
                }
                freeIAPool() {
                    this._iaPool && this._iaPool.reset();
                }
                reset() {
                    this._vc = 0, this._ic = 0, this._byteLength = 0, this.vertexStart = 0, this.vertexRange = 0, this.indexStart = 0, this.indexRange = 0, this.lastFilledIndex = 0, this.lastFilledVertex = 0, this.material = null, this.freeIAPool();
                }
                clear() {
                    this.reset(), this._iaPool && this._iaPool.destroy(), this._vertexBuffers[0] && (this._vertexBuffers[0].destroy(), this._vertexBuffers = []), this._iaInfo = null, this.vData = new Float32Array(256 * this.stride), this.iData = new Uint16Array(1536);
                }
                _initIAInfo(k997) {
                    if (!this._iaInfo) {
                        const l997 = this.stride, m997 = this._vertexBuffers;
                        m997.length || m997.push(k997.createBuffer(new x159(w157.VERTEX | w157.TRANSFER_DST, z157.DEVICE, l997, l997)));
                        const n997 = Uint16Array.BYTES_PER_ELEMENT;
                        this._indexBuffer || (this._indexBuffer = k997.createBuffer(new x159(w157.INDEX | w157.TRANSFER_DST, z157.DEVICE, n997, n997))), this._iaInfo = new q160(this._vertexFormat, m997, this._indexBuffer), this._iaPool = new y155(() => k997.createInputAssembler(this._iaInfo), 1, q997 => {
                            q997.destroy();
                        });
                    }
                }
                _reallocBuffer(g997, h997) {
                    const i997 = this.vData;
                    this.vData = new Float32Array(g997), i997 && this.vData.set(i997, 0);
                    const j997 = this.iData;
                    this.iData = new Uint16Array(h997), j997 && this.iData.set(j997, 0);
                }
                setRenderDrawInfoAttributes() {
                    var e997, f997;
                    this._renderDrawInfo && (this._renderDrawInfo.setVData(this.vData.buffer), this._renderDrawInfo.setIData(this.iData.buffer), this._renderDrawInfo.setVBCount(this._vc), this._renderDrawInfo.setIBCount(this._ic), this._renderDrawInfo.setVertexOffset(this.vertexStart), this._renderDrawInfo.setIndexOffset(this.indexStart), this._renderDrawInfo.setIsMeshBuffer(this._isMeshBuffer), this._renderDrawInfo.setMaterial(this.material), this._renderDrawInfo.setTexture(null === (e997 = this.frame) || void 0 === e997 ? void 0 : e997.getGFXTexture()), this._renderDrawInfo.setSampler(null === (f997 = this.frame) || void 0 === f997 ? void 0 : f997.getGFXSampler()));
                }
                particleInitRenderDrawInfo(c997) {
                    if (c997.renderEntityType === e189.STATIC && !this._renderDrawInfo) {
                        const d997 = c997.getStaticRenderDrawInfo();
                        d997 && (this._renderDrawInfo = d997);
                    }
                }
            }
            var q189, r189, s189, t189, u189;
            g125("MeshRenderData", p189);
            const v189 = new s147(), w189 = new s147(), x189 = new w146(), y189 = new o147(), z189 = new o147(), a190 = new o147(), b190 = new o147(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), c190 = new y147();
            let d190 = e151("cc.UITransform")(q189 = g151(110)(q189 = h151(((u189 = class t extends a165 {
                constructor(...b997) {
                    super(...b997), this._priority = 0, this._contentSize = s189 && s189(), this._anchorPoint = t189 && t189();
                }
                get contentSize() {
                    return this._contentSize;
                }
                set contentSize(a997) {
                    this._contentSize.equals(a997) || (this._contentSize.set(a997), this.node.emit(z174.SIZE_CHANGED), this._markRenderDataDirty());
                }
                get width() {
                    return this._contentSize.width;
                }
                set width(z996) {
                    this._contentSize.width !== z996 && (this._contentSize.width = z996, this.node.emit(z174.SIZE_CHANGED), this._markRenderDataDirty());
                }
                get height() {
                    return this._contentSize.height;
                }
                set height(y996) {
                    this.contentSize.height !== y996 && (this._contentSize.height = y996, this.node.emit(z174.SIZE_CHANGED), this._markRenderDataDirty());
                }
                get anchorPoint() {
                    return this._anchorPoint;
                }
                set anchorPoint(x996) {
                    this._anchorPoint.equals(x996) || (this._anchorPoint.set(x996), this.node.emit(z174.ANCHOR_CHANGED, this._anchorPoint), this._markRenderDataDirty());
                }
                get anchorX() {
                    return this._anchorPoint.x;
                }
                set anchorX(w996) {
                    this._anchorPoint.x !== w996 && (this._anchorPoint.x = w996, this.node.emit(z174.ANCHOR_CHANGED, this._anchorPoint), this._markRenderDataDirty());
                }
                get anchorY() {
                    return this._anchorPoint.y;
                }
                set anchorY(v996) {
                    this._anchorPoint.y !== v996 && (this._anchorPoint.y = v996, this.node.emit(z174.ANCHOR_CHANGED, this._anchorPoint), this._markRenderDataDirty());
                }
                get priority() {
                    return this._priority;
                }
                set priority(u996) {
                    this._priority !== u996 && (this.node.getComponent("cc.RenderRoot2D") ? y125(6706) : (this._priority = u996, this.node.parent && t.insertChangeMap(this.node.parent)));
                }
                get visibility() {
                    const t996 = t185.root.batcher2D.getFirstRenderCamera(this.node);
                    return t996 ? t996.visibility : 0;
                }
                get cameraPriority() {
                    const s996 = t185.root.batcher2D.getFirstRenderCamera(this.node);
                    return s996 ? s996.priority : 0;
                }
                __preload() {
                    this.node._uiProps.uiTransformComp = this;
                }
                onLoad() {
                    this.node.parent && t.insertChangeMap(this.node.parent);
                }
                onEnable() {
                    this.node.on(z174.PARENT_CHANGED, this._parentChanged, this), this._markRenderDataDirty();
                }
                onDisable() {
                    this.node.off(z174.PARENT_CHANGED, this._parentChanged, this);
                }
                onDestroy() {
                    this.node._uiProps.uiTransformComp = null;
                }
                setContentSize(n996, o996) {
                    const p996 = this._contentSize;
                    let q996, r996;
                    if (void 0 === o996) {
                        if (w128((n996 = n996).width, p996.width, q146) && w128(n996.height, p996.height, q146))
                            return;
                        q996 = n996.width, r996 = n996.height;
                    }
                    else {
                        if (w128(n996 = n996, p996.width, q146) && w128(o996, p996.height, q146))
                            return;
                        q996 = n996, r996 = o996;
                    }
                    p996.width = q996, p996.height = r996, this.node.emit(z174.SIZE_CHANGED), this._markRenderDataDirty();
                }
                setAnchorPoint(k996, l996) {
                    const m996 = this._anchorPoint;
                    if (void 0 === l996) {
                        if ((k996 = k996).x === m996.x && k996.y === m996.y)
                            return;
                        m996.x = k996.x, m996.y = k996.y;
                    }
                    else {
                        if (k996 === m996.x && l996 === m996.y)
                            return;
                        m996.x = k996, m996.y = l996;
                    }
                    this.node.emit(z174.ANCHOR_CHANGED, this._anchorPoint), this._markRenderDataDirty();
                }
                isHit(y995) {
                    const z995 = this._contentSize.width, a996 = this._contentSize.height, b996 = v189, c996 = w189, d996 = this._getRenderScene().cameras;
                    for (let e996 = 0; e996 < d996.length; e996++) {
                        const f996 = d996[e996];
                        if (!(f996.visibility & this.node.layer))
                            continue;
                        f996.node.getWorldRT(y189);
                        const g996 = y189.m12, h996 = y189.m13, i996 = j157.center;
                        if (y189.m12 = i996.x - (y189.m00 * g996 + y189.m04 * h996), y189.m13 = i996.y - (y189.m01 * g996 + y189.m05 * h996), o147.invert(y189, y189), s147.transformMat4(b996, y995, y189), this.node.getWorldMatrix(a190), o147.invert(y189, a190), o147.strictEquals(y189, b190))
                            continue;
                        s147.transformMat4(c996, b996, y189), c996.x += this._anchorPoint.x * z995, c996.y += this._anchorPoint.y * a996;
                        let j996 = !1;
                        if (c996.x >= 0 && c996.y >= 0 && c996.x <= z995 && c996.y <= a996 && (j996 = this._maskTest(b996)), j996)
                            return !0;
                    }
                    return !1;
                }
                hitTest(n995, o995 = 0) {
                    const p995 = this._contentSize.width, q995 = this._contentSize.height, r995 = x189, s995 = v189, t995 = w189, u995 = this._getRenderScene().cameras;
                    for (let v995 = 0; v995 < u995.length; v995++) {
                        const w995 = u995[v995];
                        if (!(w995.visibility & this.node.layer) || w995.window && !w995.window.swapchain)
                            continue;
                        if (w995.systemWindowId !== o995)
                            continue;
                        if (w146.set(r995, n995.x, n995.y, 0), w995.screenToWorld(r995, r995), s147.set(s995, r995.x, r995.y), this.node.getWorldMatrix(a190), o147.invert(y189, a190), o147.strictEquals(y189, b190))
                            continue;
                        s147.transformMat4(t995, s995, y189), t995.x += this._anchorPoint.x * p995, t995.y += this._anchorPoint.y * q995;
                        let x995 = !1;
                        if (t995.x >= 0 && t995.y >= 0 && t995.x <= p995 && t995.y <= q995 && (x995 = this._maskTest(s995)), x995)
                            return !0;
                    }
                    return !1;
                }
                _maskTest(d995) {
                    var e995, f995;
                    const g995 = null === (e995 = this.node) || void 0 === e995 || null === (f995 = e995.eventProcessor) || void 0 === f995 ? void 0 : f995.maskList;
                    if (g995) {
                        let h995 = this.node;
                        const i995 = g995.length;
                        for (let j995 = 0, k995 = 0; h995 && k995 < i995; ++j995, h995 = h995.parent) {
                            const l995 = g995[k995];
                            if (j995 === l995.index) {
                                if (h995 !== l995.comp.node) {
                                    g995.length = k995;
                                    break;
                                }
                                {
                                    const m995 = l995.comp;
                                    if (m995 && m995._enabled && !m995.isHit(d995))
                                        return !1;
                                    k995++;
                                }
                            }
                            else if (j995 > l995.index) {
                                g995.length = k995;
                                break;
                            }
                        }
                    }
                    return !0;
                }
                convertToNodeSpaceAR(b995, c995) {
                    return this.node.getWorldMatrix(a190), o147.invert(y189, a190), c995 || (c995 = new w146()), w146.transformMat4(c995, b995, y189);
                }
                convertToWorldSpaceAR(z994, a995) {
                    return this.node.getWorldMatrix(a190), a995 || (a995 = new w146()), w146.transformMat4(a995, z994, a190);
                }
                getBoundingBox() {
                    const y994 = new y147();
                    return this._selfBoundingBox(y994), o147.fromSRT(z189, this.node.rotation, this.node.position, this.node.scale), y994.transformMat4(z189), y994;
                }
                getBoundingBoxToWorld() {
                    const t994 = new y147(), u994 = this.node.children;
                    for (let v994 = 0; v994 < u994.length; ++v994) {
                        const w994 = u994[v994];
                        if (w994 && w994.active) {
                            const x994 = w994.getComponent(t);
                            x994 && x994.contentSize.width && x994.contentSize.height && (x994._selfBoundingBox(c190), c190.transformMat4(w994.worldMatrix), 0 === t994.width ? t994.set(c190) : y147.union(t994, t994, c190));
                        }
                    }
                    return this._contentSize.width && this._contentSize.height && (this._selfBoundingBox(c190), c190.transformMat4(this.node.worldMatrix), 0 === t994.width ? t994.set(c190) : y147.union(t994, t994, c190)), t994;
                }
                getBoundingBoxTo(n994) {
                    const o994 = new y147(), p994 = this.node.children;
                    o147.invert(y189, n994);
                    for (let q994 = 0; q994 < p994.length; ++q994) {
                        const r994 = p994[q994];
                        if (r994 && r994.active) {
                            const s994 = r994.getComponent(t);
                            s994 && s994.contentSize.width && s994.contentSize.height && (s994._selfBoundingBox(c190), o147.multiply(z189, r994.worldMatrix, y189), c190.transformMat4(z189), 0 === o994.width ? o994.set(c190) : y147.union(o994, o994, c190));
                        }
                    }
                    return this._contentSize.width && this._contentSize.height && (this._selfBoundingBox(c190), o147.multiply(z189, this.node.worldMatrix, y189), c190.transformMat4(z189), 0 === o994.width ? o994.set(c190) : y147.union(o994, o994, c190)), o994;
                }
                getComputeAABB(f994) {
                    const g994 = this._contentSize.width, h994 = this._contentSize.height;
                    c190.set(-this._anchorPoint.x * g994, -this._anchorPoint.y * h994, g994, h994), c190.transformMat4(this.node.worldMatrix);
                    const i994 = c190.x + .5 * c190.width, j994 = c190.y + .5 * c190.height, k994 = this.node.worldPosition.z, l994 = c190.width / 2, m994 = c190.height / 2;
                    return null != f994 ? (i150.set(f994, i994, j994, k994, l994, m994, .001), f994) : new i150(i994, j994, k994, l994, m994, .001);
                }
                _selfBoundingBox(c994) {
                    const d994 = this._contentSize.width, e994 = this._contentSize.height;
                    return c994.set(-this._anchorPoint.x * d994, -this._anchorPoint.y * e994, d994, e994), c994;
                }
                _parentChanged(b994) {
                    this.node.getComponent("cc.RenderRoot2D") || this.node.parent && t.insertChangeMap(this.node.parent);
                }
                _markRenderDataDirty() {
                    const a994 = this.node._uiProps.uiComp;
                    a994 && a994.markForUpdateRenderData();
                }
                static insertChangeMap(y993) {
                    const z993 = y993.uuid;
                    t.priorityChangeNodeMap.has(z993) || t.priorityChangeNodeMap.set(z993, y993);
                }
                static _sortChildrenSibling(q993) {
                    const r993 = q993.children;
                    r993 && r993.sort((t993, u993) => {
                        const v993 = t993._uiProps.uiTransformComp, w993 = u993._uiProps.uiTransformComp, x993 = (v993 ? v993._priority : 0) - (w993 ? w993._priority : 0);
                        return 0 === x993 ? t993.getSiblingIndex() - u993.getSiblingIndex() : x993;
                    });
                }
                static _sortSiblings() {
                    t.priorityChangeNodeMap.forEach(p993 => {
                        t._sortChildrenSibling(p993), p993._updateSiblingIndex(), p993.emit("childrenSiblingOrderChanged");
                    }), t.priorityChangeNodeMap.clear();
                }
                static _cleanChangeMap() {
                    t.priorityChangeNodeMap.clear();
                }
            }).EventType = z174, u189.priorityChangeNodeMap = new Map(), s189 = p130((r189 = u189).prototype, "_contentSize", [j151], function () {
                return new x147(100, 100);
            }), t189 = p130(r189.prototype, "_anchorPoint", [j151], function () {
                return new s147(.5, .5);
            }), q189 = r189)) || q189) || q189) || q189;
            g125({
                UITransform: d190,
                UITransformComponent: d190
            }), t185.on(s185.EVENT_AFTER_UPDATE, d190._sortSiblings), t185.on(s185.EVENT_BEFORE_SCENE_LAUNCH, d190._cleanChangeMap);
            const e190 = jsb.MaterialInstance, f190 = jsb.MaterialInstance.prototype;
            var g190, h190, i190, j190, k190, l190;
            Object.defineProperty(f190, "parent", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._parent;
                }
            }), Object.defineProperty(f190, "owner", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this._owner;
                }
            }), f190._ctor = function (n993) {
                jsb.Material.prototype._ctor.apply(this, arguments), this._registerListeners(), this._parent = n993.parent, this._owner = n993.owner || null, this._subModelIdx = n993.subModelIdx || 0, this._passes = this.getPasses();
            }, f190._onRebuildPSO = function () {
                this._owner && this._owner._onRebuildPSO(this._subModelIdx, this);
            };
            const m190 = {
                parent: null,
                owner: null,
                subModelIdx: 0
            }, { ccclass: n190, serializable: o190, disallowMultiple: p190, type: q190, displayOrder: r190, displayName: s190 } = k152;
            let t190 = g125("Renderer", (g190 = n190("cc.Renderer"), h190 = q190(c178), i190 = q190([c178]), g190(j190 = p190((i125((k190 = class extends a165 {
                constructor(...m993) {
                    super(...m993), this._materials = l190 && l190(), this._materialInstances = [];
                }
                get sharedMaterial() {
                    return this.getSharedMaterial(0);
                }
                get sharedMaterials() {
                    return this._materials;
                }
                set sharedMaterials(j993) {
                    for (let l993 = 0; l993 < j993.length; l993++)
                        j993[l993] !== this._materials[l993] && this.setSharedMaterial(j993[l993], l993);
                    if (j993.length < this._materials.length) {
                        for (let k993 = j993.length; k993 < this._materials.length; k993++)
                            this.setSharedMaterial(null, k993);
                        this._materials.splice(j993.length);
                    }
                }
                get material() {
                    return this.getMaterialInstance(0);
                }
                set material(i993) {
                    (1 !== this._materials.length || this._materialInstances[0] || this._materials[0] !== i993) && this.setMaterialInstance(i993, 0);
                }
                get materials() {
                    for (let h993 = 0; h993 < this._materials.length; h993++)
                        this._materialInstances[h993] = this.getMaterialInstance(h993);
                    return this._materialInstances;
                }
                set materials(c993) {
                    const d993 = c993.length, e993 = this._materials.length;
                    for (let g993 = d993; g993 < e993; g993++)
                        this.setMaterialInstance(null, g993);
                    this._materials.length = d993, this._materialInstances.length = d993;
                    for (let f993 = 0; f993 < d993; f993++)
                        this._materialInstances[f993] != c993[f993] && this.setMaterialInstance(c993[f993], f993);
                }
                getMaterial(b993) {
                    return this.getSharedMaterial(b993);
                }
                setMaterial(z992, a993) {
                    this.setSharedMaterial(z992, a993);
                }
                getSharedMaterial(y992) {
                    return y992 < 0 || y992 >= this._materials.length ? null : this._materials[y992];
                }
                setSharedMaterial(v992, w992) {
                    v992 && v992 instanceof e190 && z125(12012), this._materials[w992] = v992;
                    const x992 = this._materialInstances[w992];
                    x992 && (x992.destroy(), this._materialInstances[w992] = null), this._onMaterialModified(w992, this._materials[w992]);
                }
                getMaterialInstance(t992) {
                    if (!this._materials[t992])
                        return null;
                    if (!this._materialInstances[t992]) {
                        m190.parent = this._materials[t992], m190.owner = this, m190.subModelIdx = t992;
                        const u992 = new e190(m190);
                        m190.parent = null, m190.owner = null, m190.subModelIdx = 0, this.setMaterialInstance(u992, t992);
                    }
                    return this._materialInstances[t992];
                }
                setMaterialInstance(p992, q992) {
                    if ("number" == typeof p992) {
                        y125(12007);
                        const s992 = p992;
                        p992 = q992, q992 = s992;
                    }
                    const r992 = this._materialInstances[q992];
                    p992 && p992.parent ? p992 !== r992 && (this._materialInstances[q992] = p992, this._onMaterialModified(q992, p992)) : (p992 !== this._materials[q992] || r992) && this.setSharedMaterial(p992, q992);
                }
                getRenderMaterial(o992) {
                    return this._materialInstances[o992] || this._materials[o992];
                }
                _onMaterialModified(m992, n992) { }
                _onRebuildPSO(k992, l992) { }
                _clearMaterials() { }
            }).prototype, "sharedMaterials", [h190], Object.getOwnPropertyDescriptor(k190.prototype, "sharedMaterials"), k190.prototype), l190 = p130(k190.prototype, "_materials", [i190], function () {
                return [];
            }), j190 = k190)) || j190) || j190));
            var u190, v190, w190, x190, y190, z190, a191, b191, c191, d191, e191, f191;
            let g191;
            s127(k158), s127(l158), s127(m158), g125("InstanceMaterialType", g191), function (j992) {
                j992[j992.ADD_COLOR = 0] = "ADD_COLOR", j992[j992.ADD_COLOR_AND_TEXTURE = 1] = "ADD_COLOR_AND_TEXTURE", j992[j992.GRAYSCALE = 2] = "GRAYSCALE", j992[j992.USE_ALPHA_SEPARATED = 3] = "USE_ALPHA_SEPARATED", j992[j992.USE_ALPHA_SEPARATED_AND_GRAY = 4] = "USE_ALPHA_SEPARATED_AND_GRAY";
            }(g191 || g125("InstanceMaterialType", g191 = {}));
            let h191 = (u190 = e151("cc.UIRenderer"), v190 = f151(d190), w190 = a131(c178), x190 = a131(c178), u190(y190 = v190(((f191 = class t extends t190 {
                constructor() {
                    super(), this._renderData = null, this._materials = a191 && a191(), this._customMaterial = b191 && b191(), this._srcBlendFactor = c191 && c191(), this._dstBlendFactor = d191 && d191(), this._color = e191 && e191(), this._stencilStage = c189.DISABLED, this._assembler = null, this._postAssembler = null, this._renderDataFlag = !0, this._renderFlag = !0, this._renderEntity = void 0, this._instanceMaterialType = -1, this._srcBlendFactorCache = k158.SRC_ALPHA, this._dstBlendFactorCache = k158.ONE_MINUS_SRC_ALPHA, this._dirtyVersion = -1, this._internalId = -1, this._flagChangedVersion = -1, this._useVertexOpacity = !1, this._lastParent = null, this._renderEntity = this.createRenderEntity();
                }
                get sharedMaterials() {
                    return this._materials;
                }
                set sharedMaterials(g992) {
                    for (let i992 = 0; i992 < g992.length; i992++)
                        g992[i992] !== this._materials[i992] && this.setSharedMaterial(g992[i992], i992);
                    if (g992.length < this._materials.length) {
                        for (let h992 = g992.length; h992 < this._materials.length; h992++)
                            this.setSharedMaterial(null, h992);
                        this._materials.splice(g992.length);
                    }
                }
                get customMaterial() {
                    return this._customMaterial;
                }
                set customMaterial(f992) {
                    this._customMaterial = f992, this.updateMaterial();
                }
                get color() {
                    return this._color;
                }
                set color(e992) {
                    this._color.equals(e992) || (this._color.set(e992), this._updateColor());
                }
                get renderData() {
                    return this._renderData;
                }
                setRenderData(d992) {
                    this._renderData = d992;
                }
                get useVertexOpacity() {
                    return this._useVertexOpacity;
                }
                get stencilStage() {
                    return this._stencilStage;
                }
                set stencilStage(c992) {
                    this._stencilStage = c992, this._renderEntity.setStencilStage(c992);
                }
                get srcBlendFactor() {
                    return this._srcBlendFactor;
                }
                set srcBlendFactor(b992) {
                    this._srcBlendFactor = b992;
                }
                get batcher() {
                    return t185.root.batcher2D;
                }
                get renderEntity() {
                    return this._renderEntity;
                }
                onLoad() {
                    this._renderEntity.setNode(this.node);
                }
                __preload() {
                    this.node._uiProps.uiComp = this, this._flushAssembler && this._flushAssembler();
                }
                onEnable() {
                    this.node.on(z174.ANCHOR_CHANGED, this._nodeStateChange, this), this.node.on(z174.SIZE_CHANGED, this._nodeStateChange, this), this.node.on(z174.PARENT_CHANGED, this._colorDirty, this), this.updateMaterial(), this._colorDirty(), p183.addRenderer(this), this.markForUpdateRenderData();
                }
                onRestore() {
                    this.updateMaterial(), this.markForUpdateRenderData();
                }
                onDisable() {
                    this.node.off(z174.ANCHOR_CHANGED, this._nodeStateChange, this), this.node.off(z174.SIZE_CHANGED, this._nodeStateChange, this), this.node.off(z174.PARENT_CHANGED, this._colorDirty, this), p183.removeRenderer(this), this._renderFlag = !1, this._renderEntity.enabled = !1;
                }
                onDestroy() {
                    if (this._renderEntity.setNode(null), this.node._uiProps.uiComp === this && (this.node._uiProps.uiComp = null), this.destroyRenderData(), this._materialInstances)
                        for (let z991 = 0; z991 < this._materialInstances.length; z991++) {
                            const a992 = this._materialInstances[z991];
                            a992 && a992.destroy();
                        }
                }
                markForUpdateRenderData(x991 = !0) {
                    if (x991) {
                        const y991 = this._renderData;
                        y991 && (y991.vertDirty = !0), p183.markDirtyRenderer(this);
                    }
                }
                requestRenderData(v991 = b189.COMP) {
                    const w991 = o189.add();
                    return w991.initRenderDrawInfo(this, v991), this._renderData = w991, w991;
                }
                destroyRenderData() {
                    this._renderData && (this._renderData.removeRenderDrawInfo(this), o189.remove(this._renderData), this._renderData = null);
                }
                updateRenderer() {
                    this._assembler && this._assembler.updateRenderData(this), this._renderFlag = this._canRender(), this._renderEntity.enabled = this._renderFlag;
                }
                fillBuffers(u991) {
                    this._renderFlag && this._render(u991);
                }
                postUpdateAssembler(t991) {
                    this._postAssembler && this._renderFlag && this._postRender(t991);
                }
                _render(s991) { }
                _postRender(r991) { }
                _canRender() {
                    return null !== this.getSharedMaterial(0) && this._enabled && this._color.a > 0;
                }
                _postCanRender() { }
                updateMaterial() {
                    if (this._customMaterial)
                        return void (this.getSharedMaterial(0) !== this._customMaterial && this.setSharedMaterial(this._customMaterial, 0));
                    const q991 = this._updateBuiltinMaterial();
                    this.setSharedMaterial(q991, 0), this.stencilStage !== c189.ENTER_LEVEL && this.stencilStage !== c189.ENTER_LEVEL_INVERTED || this.getMaterialInstance(0).recompileShaders({
                        USE_ALPHA_TEST: !0
                    }), this._updateBlendFunc();
                }
                _updateColor() {
                    if (this.node._uiProps.colorDirty = !0, this.setEntityColorDirty(!0), this.setEntityColor(this._color), this.setEntityOpacity(this.node._uiProps.localOpacity), this._assembler) {
                        this._assembler.updateColor(this);
                        const o991 = this._renderFlag;
                        if (this._renderFlag = this._canRender(), this.setEntityEnabled(this._renderFlag), o991 !== this._renderFlag) {
                            const p991 = this.renderData;
                            p991 && (p991.vertDirty = !0);
                        }
                    }
                }
                static setEntityColorDirtyRecursively(k991, l991) {
                    const m991 = k991._uiProps.uiComp;
                    m991 && m991.color && (m991._renderEntity.colorDirty = l991);
                    for (let n991 = 0; n991 < k991.children.length; n991++)
                        t.setEntityColorDirtyRecursively(k991.children[n991], l991);
                }
                setEntityColorDirty(j991) {
                    t.setEntityColorDirtyRecursively(this.node, j991);
                }
                setEntityColor(i991) {
                    this._renderEntity.color = i991;
                }
                setEntityOpacity(h991) {
                    this._renderEntity.localOpacity = h991;
                }
                setEntityEnabled(g991) {
                    this._renderEntity.enabled = g991;
                }
                _updateBlendFunc() {
                    let e991 = this.getRenderMaterial(0).passes[0].blendState.targets[0];
                    if (this._dstBlendFactorCache = e991.blendDst, this._srcBlendFactorCache = e991.blendSrc, this._dstBlendFactorCache !== this._dstBlendFactor || this._srcBlendFactorCache !== this._srcBlendFactor) {
                        e991 = this.getMaterialInstance(0).passes[0].blendState.targets[0], e991.blend = !0, e991.blendDstAlpha = k158.ONE_MINUS_SRC_ALPHA, e991.blendDst = this._dstBlendFactor, e991.blendSrc = this._srcBlendFactor;
                        const f991 = this.getMaterialInstance(0).passes[0];
                        f991.blendState.setTarget(0, e991), f991._updatePassHash(), this._dstBlendFactorCache = this._dstBlendFactor, this._srcBlendFactorCache = this._srcBlendFactor;
                    }
                }
                _nodeStateChange(b991) {
                    this._renderData && this.markForUpdateRenderData();
                    for (let c991 = 0; c991 < this.node.children.length; ++c991) {
                        const d991 = this.node.children[c991].getComponent(t);
                        d991 && d991.markForUpdateRenderData();
                    }
                }
                _colorDirty() {
                    this.node._uiProps.colorDirty = !0, this.setEntityColorDirty(!0);
                }
                _onMaterialModified(z990, a991) {
                    this._renderData && (this.markForUpdateRenderData(), this._renderData.passDirty = !0), super._onMaterialModified(z990, a991);
                }
                _updateBuiltinMaterial() {
                    let y990;
                    switch (this._instanceMaterialType) {
                        case g191.ADD_COLOR:
                            y990 = r185.get("ui-base-material");
                            break;
                        case g191.GRAYSCALE:
                            y990 = r185.get("ui-sprite-gray-material");
                            break;
                        case g191.USE_ALPHA_SEPARATED:
                            y990 = r185.get("ui-sprite-alpha-sep-material");
                            break;
                        case g191.USE_ALPHA_SEPARATED_AND_GRAY:
                            y990 = r185.get("ui-sprite-gray-alpha-sep-material");
                            break;
                        default:
                            y990 = r185.get("ui-sprite-material");
                    }
                    return y990;
                }
                setNodeDirty() {
                    this._renderData && (this._renderData.nodeDirty = !0);
                }
                setTextureDirty() {
                    this._renderData && (this._renderData.textureDirty = !0);
                }
                createRenderEntity() {
                    return new l189(e189.STATIC);
                }
            }).BlendState = k158, f191.Assembler = null, f191.PostAssembler = null, i125((z190 = f191).prototype, "sharedMaterials", [h152], Object.getOwnPropertyDescriptor(z190.prototype, "sharedMaterials"), z190.prototype), i125(z190.prototype, "customMaterial", [w190], Object.getOwnPropertyDescriptor(z190.prototype, "customMaterial"), z190.prototype), a191 = p130(z190.prototype, "_materials", [h152], function () {
                return [];
            }), b191 = p130(z190.prototype, "_customMaterial", [x190], function () {
                return null;
            }), c191 = p130(z190.prototype, "_srcBlendFactor", [j151], function () {
                return k158.SRC_ALPHA;
            }), d191 = p130(z190.prototype, "_dstBlendFactor", [j151], function () {
                return k158.ONE_MINUS_SRC_ALPHA;
            }), e191 = p130(z190.prototype, "_color", [j151], function () {
                return a147.WHITE.clone();
            }), y190 = z190)) || y190) || y190);
            g125({
                UIRenderer: h191,
                RenderComponent: h191,
                UIRenderable: h191,
                Renderable2D: h191
            }), s143.internal.UIRenderer = h191;
            class i191 {
                constructor() {
                    this.isBold = !1, this.isItalic = !1, this.isUnderline = !1, this.underlineHeight = 1, this.isOutlined = !1, this.outlineColor = a147.WHITE.clone(), this.outlineWidth = 1, this.hasShadow = !1, this.shadowColor = a147.BLACK.clone(), this.shadowBlur = 2, this.shadowOffsetX = 0, this.shadowOffsetY = 0, this.color = a147.WHITE.clone(), this.fontSize = 40, this.actualFontSize = 0, this.isSystemFontUsed = !1, this.originFontSize = 0, this.bmfontScale = 1, this.fontFamily = "Arial", this.fontDesc = "", this.fntConfig = null, this.spriteFrame = null, this.fontScale = 1;
                }
                reset() {
                    this.isBold = !1, this.isItalic = !1, this.isUnderline = !1, this.underlineHeight = 1, this.isOutlined = !1, this.outlineColor.set(), this.outlineWidth = 1, this.hasShadow = !1, this.shadowColor.set(), this.shadowBlur = 2, this.shadowOffsetX = 0, this.shadowOffsetY = 0;
                }
            }
            class j191 {
                constructor() {
                    this.horizontalAlign = 0, this.verticalAlign = 0, this.wrapping = !0, this.overFlow = 0, this.lineHeight = 10, this.maxLineWidth = 0, this.spacingX = 0, this.textWidthTemp = 0, this.textHeightTemp = 0, this.textDimensions = new x147(), this.horizontalKerning = [], this.numberOfLines = 1, this.linesOffsetX = [], this.letterOffsetY = 0, this.tailoredTopY = 0, this.tailoredBottomY = 0, this.textDesiredHeight = 0, this.linesWidth = [];
                }
                reset() {
                    this.horizontalAlign = 0, this.verticalAlign = 0, this.wrapping = !0, this.overFlow = 0, this.lineHeight = 10, this.maxLineWidth = 0, this.spacingX = 0, this.textWidthTemp = 0, this.textHeightTemp = 0, this.textDimensions.set(), this.horizontalKerning.length = 0, this.numberOfLines = 1, this.linesOffsetX.length = 0, this.letterOffsetY = 0, this.tailoredTopY = 0, this.tailoredBottomY = 0, this.textDesiredHeight = 0, this.linesWidth.length = 0;
                }
            }
            class k191 {
                constructor() {
                    this.parsedString = [], this.nodeContentSize = x147.ZERO.clone(), this.canvasSize = new x147(), this.canvasPadding = new y147(), this.contentSizeExtend = x147.ZERO.clone(), this.startPosition = s147.ZERO.clone();
                }
                reset() {
                    this.parsedString.length = 0, this.nodeContentSize.set(0, 0), this.canvasSize.set(), this.canvasPadding.set(), this.contentSizeExtend.set(), this.startPosition.set();
                }
            }
            class l191 {
                constructor() {
                    this.quadCount = 0, this.vertexBuffer = [], this.texture = null, this.uiTransAnchorX = .5, this.uiTransAnchorY = .5;
                }
                reset() {
                    this.quadCount = 0, this.vertexBuffer.length = 0, this.texture = null, this.uiTransAnchorX = .5, this.uiTransAnchorY = .5;
                }
            }
            var m191, n191, o191, p191, q191, r191, s191, t191, u191, v191, w191, x191, y191, z191, a192, b192, c192, d192, e192, f192, g192, h192, i192, j192, k192, l192, m192, n192, o192, p192, q192, r192, s192, t192;
            const u192 = a147.WHITE.clone();
            let v192, w192, x192, y192;
            g125("HorizontalTextAlignment", v192), function (x990) {
                x990[x990.LEFT = 0] = "LEFT", x990[x990.CENTER = 1] = "CENTER", x990[x990.RIGHT = 2] = "RIGHT";
            }(v192 || g125("HorizontalTextAlignment", v192 = {})), s127(v192), g125("VerticalTextAlignment", w192), function (w990) {
                w990[w990.TOP = 0] = "TOP", w990[w990.CENTER = 1] = "CENTER", w990[w990.BOTTOM = 2] = "BOTTOM";
            }(w192 || g125("VerticalTextAlignment", w192 = {})), s127(w192), g125("Overflow", x192), function (v990) {
                v990[v990.NONE = 0] = "NONE", v990[v990.CLAMP = 1] = "CLAMP", v990[v990.SHRINK = 2] = "SHRINK", v990[v990.RESIZE_HEIGHT = 3] = "RESIZE_HEIGHT";
            }(x192 || g125("Overflow", x192 = {})), s127(x192), g125("CacheMode", y192), function (u990) {
                u990[u990.NONE = 0] = "NONE", u990[u990.BITMAP = 1] = "BITMAP", u990[u990.CHAR = 2] = "CHAR";
            }(y192 || g125("CacheMode", y192 = {})), s127(y192);
            let z192 = (m191 = e151("cc.Label"), n191 = g151(110), o191 = a131(v192), p191 = a131(w192), q191 = a131(x192), r191 = a131(y186), s191 = a131(y192), m191(t191 = n191(((t192 = class t extends h191 {
                get string() {
                    return this._string;
                }
                set string(t990) {
                    t990 = null == t990 ? "" : t990.toString(), this._string !== t990 && (this._string = t990, this.markForUpdateRenderData());
                }
                get horizontalAlign() {
                    return this._horizontalAlign;
                }
                set horizontalAlign(s990) {
                    this._horizontalAlign !== s990 && (this._horizontalAlign = s990, this.markForUpdateRenderData());
                }
                get verticalAlign() {
                    return this._verticalAlign;
                }
                set verticalAlign(r990) {
                    this._verticalAlign !== r990 && (this._verticalAlign = r990, this.markForUpdateRenderData());
                }
                get actualFontSize() {
                    return this._actualFontSize;
                }
                set actualFontSize(q990) {
                    this._actualFontSize = q990;
                }
                get fontSize() {
                    return this._fontSize;
                }
                set fontSize(p990) {
                    this._fontSize !== p990 && (this._fontSize = p990, this.markForUpdateRenderData());
                }
                get lineHeight() {
                    return this._lineHeight;
                }
                set lineHeight(o990) {
                    this._lineHeight !== o990 && (this._lineHeight = o990, this.markForUpdateRenderData());
                }
                get spacingX() {
                    return this._spacingX;
                }
                set spacingX(n990) {
                    this._spacingX !== n990 && (this._spacingX = n990, this.markForUpdateRenderData());
                }
                get overflow() {
                    return this._overflow;
                }
                set overflow(m990) {
                    this._overflow !== m990 && (this._overflow = m990, this.markForUpdateRenderData());
                }
                get enableWrapText() {
                    return this._enableWrapText;
                }
                set enableWrapText(l990) {
                    this._enableWrapText !== l990 && (this._enableWrapText = l990, this.markForUpdateRenderData());
                }
                get useSystemFont() {
                    return this._isSystemFontUsed;
                }
                set useSystemFont(k990) {
                    this._isSystemFontUsed !== k990 && (this.destroyRenderData(), this._isSystemFontUsed = !!k990, k990 && (this.font = null), this._flushAssembler(), this.markForUpdateRenderData());
                }
                get fontFamily() {
                    return this._fontFamily;
                }
                set fontFamily(j990) {
                    this._fontFamily !== j990 && (this._fontFamily = j990, this.markForUpdateRenderData());
                }
                get font() {
                    return this._font;
                }
                set font(i990) {
                    this._font !== i990 && (this._isSystemFontUsed = !i990, this._font = i990, this.destroyRenderData(), this._fontAtlas = null, this.updateRenderData(!0));
                }
                get cacheMode() {
                    return this._cacheMode;
                }
                set cacheMode(h990) {
                    this._cacheMode !== h990 && (this._cacheMode !== y192.BITMAP || this._font instanceof n187 || !this._ttfSpriteFrame || this._ttfSpriteFrame._resetDynamicAtlasFrame(), this._cacheMode === y192.CHAR && (this._ttfSpriteFrame = null), this._cacheMode = h990, this.updateRenderData(!0));
                }
                get isBold() {
                    return this._isBold;
                }
                set isBold(g990) {
                    this._isBold !== g990 && (this._isBold = g990, this.markForUpdateRenderData());
                }
                get isItalic() {
                    return this._isItalic;
                }
                set isItalic(f990) {
                    this._isItalic !== f990 && (this._isItalic = f990, this.markForUpdateRenderData());
                }
                get isUnderline() {
                    return this._isUnderline;
                }
                set isUnderline(e990) {
                    this._isUnderline !== e990 && (this._isUnderline = e990, this.markForUpdateRenderData());
                }
                get underlineHeight() {
                    return this._underlineHeight;
                }
                set underlineHeight(d990) {
                    this._underlineHeight !== d990 && (this._underlineHeight = d990, this.markForUpdateRenderData());
                }
                get enableOutline() {
                    return this._enableOutline;
                }
                set enableOutline(c990) {
                    this._enableOutline !== c990 && (this._enableOutline = c990, this.markForUpdateRenderData());
                }
                get outlineColor() {
                    return this._outlineColor;
                }
                set outlineColor(b990) {
                    this._outlineColor !== b990 && (this._outlineColor.set(b990), this.markForUpdateRenderData());
                }
                get outlineWidth() {
                    return this._outlineWidth;
                }
                set outlineWidth(a990) {
                    this._outlineWidth !== a990 && (this._outlineWidth = a990, this.markForUpdateRenderData());
                }
                get enableShadow() {
                    return this._enableShadow;
                }
                set enableShadow(z989) {
                    this._enableShadow !== z989 && (this._enableShadow = z989, this.markForUpdateRenderData());
                }
                get shadowColor() {
                    return this._shadowColor;
                }
                set shadowColor(y989) {
                    this._shadowColor !== y989 && (this._shadowColor.set(y989), this.markForUpdateRenderData());
                }
                get shadowOffset() {
                    return this._shadowOffset;
                }
                set shadowOffset(x989) {
                    this._shadowOffset !== x989 && (this._shadowOffset.set(x989), this.markForUpdateRenderData());
                }
                get shadowBlur() {
                    return this._shadowBlur;
                }
                set shadowBlur(w989) {
                    this._shadowBlur !== w989 && (this._shadowBlur = w989, this.markForUpdateRenderData());
                }
                get spriteFrame() {
                    return this._texture;
                }
                get ttfSpriteFrame() {
                    return this._ttfSpriteFrame;
                }
                get assemblerData() {
                    return this._assemblerData;
                }
                get fontAtlas() {
                    return this._fontAtlas;
                }
                set fontAtlas(v989) {
                    this._fontAtlas = v989;
                }
                get _bmFontOriginalSize() {
                    return this._font instanceof n187 ? this._font.fontSize : -1;
                }
                get textStyle() {
                    return this._textStyle;
                }
                get textLayout() {
                    return this._textLayout;
                }
                get textRenderData() {
                    return this._textRenderData;
                }
                get textLayoutData() {
                    return this._textLayoutData;
                }
                get contentWidth() {
                    return this._contentWidth;
                }
                set contentWidth(u989) {
                    this._contentWidth = u989;
                }
                constructor() {
                    super(), this._string = v191 && v191(), this._horizontalAlign = w191 && w191(), this._verticalAlign = x191 && x191(), this._actualFontSize = y191 && y191(), this._fontSize = z191 && z191(), this._fontFamily = a192 && a192(), this._lineHeight = b192 && b192(), this._overflow = c192 && c192(), this._enableWrapText = d192 && d192(), this._font = e192 && e192(), this._isSystemFontUsed = f192 && f192(), this._spacingX = g192 && g192(), this._isItalic = h192 && h192(), this._isBold = i192 && i192(), this._isUnderline = j192 && j192(), this._underlineHeight = k192 && k192(), this._cacheMode = l192 && l192(), this._enableOutline = m192 && m192(), this._outlineColor = n192 && n192(), this._outlineWidth = o192 && o192(), this._enableShadow = p192 && p192(), this._shadowColor = q192 && q192(), this._shadowOffset = r192 && r192(), this._shadowBlur = s192 && s192(), this._N$file = null, this._texture = null, this._ttfSpriteFrame = null, this._userDefinedFont = null, this._assemblerData = null, this._fontAtlas = null, this._letterTexture = null, this._contentWidth = 0, this._textStyle = null, this._textLayout = null, this._textRenderData = null, this._textLayoutData = null, this._ttfSpriteFrame = null, this._textStyle = new i191(), this._textLayout = new j191(), this._textLayoutData = new k191(), this._textRenderData = new l191();
                }
                onEnable() {
                    super.onEnable(), this._font || this._isSystemFontUsed || (this.useSystemFont = !0), this._isSystemFontUsed && !this._fontFamily && (this.fontFamily = "Arial"), this._applyFontTexture();
                }
                onDestroy() {
                    if (this._assembler && this._assembler.resetAssemblerData && this._assembler.resetAssemblerData(this._assemblerData), this._assemblerData = null, this._ttfSpriteFrame) {
                        this._ttfSpriteFrame._resetDynamicAtlasFrame();
                        const s989 = this._ttfSpriteFrame.texture;
                        if (this._ttfSpriteFrame.destroy(), s989) {
                            const t989 = s989;
                            t989.image && t989.image.destroy(), s989.destroy();
                        }
                        this._ttfSpriteFrame = null;
                    }
                    this._letterTexture = null, super.onDestroy();
                }
                updateRenderData(r989 = !1) {
                    r989 && (this._flushAssembler(), this.renderData && (this.renderData.vertDirty = !0), this._applyFontTexture()), this._assembler && this._assembler.updateRenderData(this);
                }
                _render(q989) {
                    q989.commitComp(this, this.renderData, this._texture, this._assembler, null);
                }
                _updateColor() {
                    super._updateColor(), this.markForUpdateRenderData();
                }
                setEntityColor(p989) {
                    this._font instanceof n187 ? this._renderEntity.color = p989 : (u192.set(255, 255, 255, p989.a), this._renderEntity.color = u192);
                }
                _canRender() {
                    if (!super._canRender() || !this._string)
                        return !1;
                    const n989 = this._font;
                    if (n989 && n989 instanceof n187) {
                        const o989 = n989.spriteFrame;
                        if (!o989 || !o989.texture)
                            return !1;
                    }
                    return !0;
                }
                _flushAssembler() {
                    const m989 = t.Assembler.getAssembler(this);
                    this._assembler !== m989 && (this.destroyRenderData(), this._assembler = m989, this.textStyle.reset(), this.textLayout.reset(), this.textLayoutData.reset(), this.textRenderData.reset()), this.renderData || this._assembler && this._assembler.createData && (this._renderData = this._assembler.createData(this), this.renderData.material = this.material, this._updateColor());
                }
                _applyFontTexture() {
                    this.markForUpdateRenderData();
                    const i989 = this._font;
                    if (i989 instanceof n187) {
                        const l989 = i989.spriteFrame;
                        l989 && l989.texture && (this._texture = l989, this.renderData && (this.renderData.textureDirty = !0), this.changeMaterialForDefine(), this._assembler && this._assembler.updateRenderData(this));
                    }
                    else {
                        if (this.cacheMode === y192.CHAR)
                            this._letterTexture = this._assembler.getAssemblerData(), this._texture = this._letterTexture;
                        else if (!this._ttfSpriteFrame) {
                            this._ttfSpriteFrame = new q186(), this._assemblerData = this._assembler.getAssemblerData();
                            const j989 = new x163(this._assemblerData.canvas), k989 = new j166();
                            k989.image = j989, this._ttfSpriteFrame.texture = k989;
                        }
                        this.cacheMode !== y192.CHAR && (this._texture = this._ttfSpriteFrame), this.changeMaterialForDefine();
                    }
                }
                changeMaterialForDefine() {
                    if (!this._texture)
                        return;
                    let f989 = !1;
                    if (this.cacheMode !== y192.CHAR) {
                        const g989 = this._texture.texture;
                        if (g989 instanceof y165) {
                            const h989 = g989.getPixelFormat();
                            f989 = h989 === u163.RGBA_ETC1 || h989 === u163.RGB_A_PVRTC_4BPPV1 || h989 === u163.RGB_A_PVRTC_2BPPV1;
                        }
                    }
                    this._instanceMaterialType = f989 ? g191.USE_ALPHA_SEPARATED : g191.ADD_COLOR_AND_TEXTURE, this.updateMaterial();
                }
                _updateBlendFunc() {
                    super._updateBlendFunc();
                }
            }).HorizontalAlign = v192, t192.VerticalAlign = w192, t192.Overflow = x192, t192.CacheMode = y192, t192._canvasPool = b188.getInstance(), i125((u191 = t192).prototype, "horizontalAlign", [o191], Object.getOwnPropertyDescriptor(u191.prototype, "horizontalAlign"), u191.prototype), i125(u191.prototype, "verticalAlign", [p191], Object.getOwnPropertyDescriptor(u191.prototype, "verticalAlign"), u191.prototype), i125(u191.prototype, "overflow", [q191], Object.getOwnPropertyDescriptor(u191.prototype, "overflow"), u191.prototype), i125(u191.prototype, "font", [r191], Object.getOwnPropertyDescriptor(u191.prototype, "font"), u191.prototype), i125(u191.prototype, "cacheMode", [s191], Object.getOwnPropertyDescriptor(u191.prototype, "cacheMode"), u191.prototype), v191 = p130(u191.prototype, "_string", [j151], function () {
                return "label";
            }), w191 = p130(u191.prototype, "_horizontalAlign", [j151], function () {
                return v192.CENTER;
            }), x191 = p130(u191.prototype, "_verticalAlign", [j151], function () {
                return w192.CENTER;
            }), y191 = p130(u191.prototype, "_actualFontSize", [j151], function () {
                return 0;
            }), z191 = p130(u191.prototype, "_fontSize", [j151], function () {
                return 40;
            }), a192 = p130(u191.prototype, "_fontFamily", [j151], function () {
                return "Arial";
            }), b192 = p130(u191.prototype, "_lineHeight", [j151], function () {
                return 40;
            }), c192 = p130(u191.prototype, "_overflow", [j151], function () {
                return x192.NONE;
            }), d192 = p130(u191.prototype, "_enableWrapText", [j151], function () {
                return !0;
            }), e192 = p130(u191.prototype, "_font", [j151], function () {
                return null;
            }), f192 = p130(u191.prototype, "_isSystemFontUsed", [j151], function () {
                return !0;
            }), g192 = p130(u191.prototype, "_spacingX", [j151], function () {
                return 0;
            }), h192 = p130(u191.prototype, "_isItalic", [j151], function () {
                return !1;
            }), i192 = p130(u191.prototype, "_isBold", [j151], function () {
                return !1;
            }), j192 = p130(u191.prototype, "_isUnderline", [j151], function () {
                return !1;
            }), k192 = p130(u191.prototype, "_underlineHeight", [j151], function () {
                return 2;
            }), l192 = p130(u191.prototype, "_cacheMode", [j151], function () {
                return y192.NONE;
            }), m192 = p130(u191.prototype, "_enableOutline", [j151], function () {
                return !1;
            }), n192 = p130(u191.prototype, "_outlineColor", [j151], function () {
                return new a147(0, 0, 0, 255);
            }), o192 = p130(u191.prototype, "_outlineWidth", [j151], function () {
                return 2;
            }), p192 = p130(u191.prototype, "_enableShadow", [j151], function () {
                return !1;
            }), q192 = p130(u191.prototype, "_shadowColor", [j151], function () {
                return new a147(0, 0, 0, 255);
            }), r192 = p130(u191.prototype, "_shadowOffset", [j151], function () {
                return new s147(2, 2);
            }), s192 = p130(u191.prototype, "_shadowBlur", [j151], function () {
                return 2;
            }), t191 = u191)) || t191) || t191);
            g125({
                Label: z192,
                LabelComponent: z192
            }), s143.Label = z192;
            let a193 = 0;
            const b193 = {};
            var c193 = {
                addStage(d989) {
                    if (void 0 !== b193[d989])
                        return;
                    const e989 = 1 << a193;
                    b193[d989] = e989, a193 += 1;
                },
                stageID(b989) {
                    const c989 = b193[b989];
                    return void 0 === c989 ? -1 : c989;
                },
                stageIDs(x988) {
                    let y988 = 0;
                    for (const z988 of x988) {
                        const a989 = b193[z988];
                        void 0 !== a989 && (y988 |= a989);
                    }
                    return y988;
                }
            };
            let d193, e193;
            !function (w988) {
                w988[w988.OPAQUE = 0] = "OPAQUE", w988[w988.TRANSPARENT = 1] = "TRANSPARENT", w988[w988.OVERLAY = 2] = "OVERLAY";
            }(d193 || (d193 = {})), function (v988) {
                v988[v988.DEFAULT = 1] = "DEFAULT", v988[v988.FORWARD = 2] = "FORWARD", v988[v988.SHADOWCAST = 4] = "SHADOWCAST";
            }(e193 || (e193 = {}));
            const f193 = 4227858432, g193 = 66060288, h193 = 1044480, i193 = {
                [v157.UNKNOWN]: (s988, t988, u988 = 0) => y125(12010, u988),
                [v157.INT]: (p988, q988, r988 = 0) => p988[r988],
                [v157.INT2]: (m988, n988, o988 = 0) => s147.fromArray(n988, m988, o988),
                [v157.INT3]: (j988, k988, l988 = 0) => w146.fromArray(k988, j988, l988),
                [v157.INT4]: (g988, h988, i988 = 0) => v146.fromArray(h988, g988, i988),
                [v157.FLOAT]: (d988, e988, f988 = 0) => d988[f988],
                [v157.FLOAT2]: (a988, b988, c988 = 0) => s147.fromArray(b988, a988, c988),
                [v157.FLOAT3]: (x987, y987, z987 = 0) => w146.fromArray(y987, x987, z987),
                [v157.FLOAT4]: (u987, v987, w987 = 0) => v146.fromArray(v987, u987, w987),
                [v157.MAT3]: (r987, s987, t987 = 0) => c147.fromArray(s987, r987, t987),
                [v157.MAT4]: (o987, p987, q987 = 0) => o147.fromArray(p987, o987, q987)
            }, j193 = {
                [v157.UNKNOWN]: (l987, m987, n987 = 0) => y125(12010, n987),
                [v157.INT]: (i987, j987, k987 = 0) => i987[k987] = j987,
                [v157.INT2]: (f987, g987, h987 = 0) => s147.toArray(f987, g987, h987),
                [v157.INT3]: (c987, d987, e987 = 0) => w146.toArray(c987, d987, e987),
                [v157.INT4]: (z986, a987, b987 = 0) => v146.toArray(z986, a987, b987),
                [v157.FLOAT]: (w986, x986, y986 = 0) => w986[y986] = x986,
                [v157.FLOAT2]: (t986, u986, v986 = 0) => s147.toArray(t986, u986, v986),
                [v157.FLOAT3]: (q986, r986, s986 = 0) => w146.toArray(q986, r986, s986),
                [v157.FLOAT4]: (n986, o986, p986 = 0) => v146.toArray(n986, o986, p986),
                [v157.MAT3]: (k986, l986, m986 = 0) => c147.toArray(k986, l986, m986),
                [v157.MAT4]: (h986, i986, j986 = 0) => o147.toArray(h986, i986, j986)
            }, k193 = {
                [v157.INT]: g986 => "number" == typeof g986,
                [v157.FLOAT]: f986 => "number" == typeof f986,
                [v157.INT2]: e986 => !!(e986 instanceof s147),
                [v157.FLOAT2]: d986 => !!(d986 instanceof s147),
                [v157.INT3]: c986 => !!(c986 instanceof w146),
                [v157.FLOAT3]: b986 => !!(b986 instanceof w146),
                [v157.INT4]: a986 => !!(a986 instanceof v146),
                [v157.FLOAT4]: z985 => !!(z985 instanceof v146 || z985 instanceof a147 || z985 instanceof g147),
                [v157.MAT3]: y985 => !!(y985 instanceof c147),
                [v157.MAT4]: x985 => !!(x985 instanceof o147)
            }, l193 = [Object.freeze([0]), Object.freeze([0, 0]), Object.freeze([0, 0, 0, 0]), Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])];
            function v137(w985) {
                switch (w985) {
                    case v157.BOOL:
                    case v157.INT:
                    case v157.UINT:
                    case v157.FLOAT:
                        return l193[0];
                    case v157.BOOL2:
                    case v157.INT2:
                    case v157.UINT2:
                    case v157.FLOAT2:
                        return l193[1];
                    case v157.BOOL4:
                    case v157.INT4:
                    case v157.UINT4:
                    case v157.FLOAT4:
                        return l193[2];
                    case v157.MAT4:
                        return l193[3];
                    case v157.SAMPLER2D:
                        return "default-texture";
                    case v157.SAMPLER_CUBE:
                        return "default-cube-texture";
                    case v157.SAMPLER2D_ARRAY:
                        return "default-array-texture";
                    case v157.SAMPLER3D:
                        return "default-3d-texture";
                }
                return l193[0];
            }
            function w137(v985) {
                switch (v985) {
                    case v157.SAMPLER2D:
                        return "-texture";
                    case v157.SAMPLER_CUBE:
                        return "-cube-texture";
                    case v157.SAMPLER2D_ARRAY:
                        return "-array-texture";
                    case v157.SAMPLER3D:
                        return "-3d-texture";
                    default:
                        return "-unknown";
                }
            }
            function x137(q985, r985) {
                const s985 = Object.entries(r985);
                let t985 = !1;
                for (let u985 = 0; u985 < s985.length; u985++)
                    q985[s985[u985][0]] !== s985[u985][1] && (q985[s985[u985][0]] = s985[u985][1], t985 = !0);
                return t985;
            }
            let m193;
            !function (p985) {
                p985[p985.NONE = 0] = "NONE", p985[p985.INSTANCING = 1] = "INSTANCING";
            }(m193 || (m193 = {}));
            const n193 = jsb.Pass;
            n193.prototype.getUniform = function (m985, n985) {
                const o985 = this._getUniform(m985);
                if ("object" == typeof o985) {
                    if (o985.type)
                        switch (o985.type) {
                            case u147.VEC2:
                                s147.copy(n985, o985);
                                break;
                            case u147.VEC3:
                                w146.copy(n985, o985);
                                break;
                            case u147.VEC4:
                                v146.copy(n985, o985);
                                break;
                            case u147.COLOR:
                                n985.x = o985.x, n985.y = o985.y, n985.z = o985.z, n985.w = o985.w;
                                break;
                            case u147.MAT3:
                                c147.copy(n985, o985);
                                break;
                            case u147.MAT4:
                                o147.copy(n985, o985);
                                break;
                            case u147.QUATERNION:
                                g147.copy(n985, o985);
                                break;
                            default:
                                console.error(`getUniform, unknown object type: ${o985.type}`);
                        }
                    else
                        console.error(`getUniform, unknown object: ${o985}`);
                }
                else
                    "number" == typeof o985 ? n985 = o985 : console.error(`getUniform, not supported: ${o985}`);
                return n985;
            };
            const o193 = jsb.ProgramLib.getInstance();
            function y137(l985) {
                return --l985, l985 |= l985 >> 16, l985 |= l985 >> 8, l985 |= l985 >> 4, l985 |= l985 >> 2, l985 |= l985 >> 1, ++l985;
            }
            function z137(j985, k985) {
                return Math.ceil(j985 / k985) * k985;
            }
            s143.programLib = o193;
            const p193 = jsb.NativeBufferPool;
            var q193;
            jsb.NativeObjectPool, jsb.NativeBufferAllocator, function (i985) {
                i985[i985.UINT32 = 0] = "UINT32", i985[i985.FLOAT32 = 1] = "FLOAT32", i985[i985.NEVER = 2] = "NEVER";
            }(q193 || (q193 = {}));
            class r193 {
                constructor(z984, a985, b985, c985, d985 = 8) {
                    this._dataType = void 0, this._dataMembers = void 0, this._elementCount = void 0, this._entryBits = void 0, this._stride = void 0, this._entriesPerChunk = void 0, this._entryMask = void 0, this._chunkMask = void 0, this._poolFlag = void 0, this._arrayBuffers = [], this._freeLists = [], this._uint32BufferViews = [], this._float32BufferViews = [], this._hasUint32 = !1, this._hasFloat32 = !1, this._nativePool = void 0, this._elementCount = c985.COUNT, this._entryBits = d985, this._dataType = a985, this._dataMembers = b985, this._stride = 4 * this._elementCount, this._entriesPerChunk = 1 << d985, this._entryMask = this._entriesPerChunk - 1, this._poolFlag = 1 << 30, this._chunkMask = ~(this._entryMask | this._poolFlag), this._nativePool = new p193(z984, d985, this._stride);
                    let e985 = q193.NEVER, f985 = !1, g985 = !1;
                    for (const h985 in a985) {
                        if (f985 = this._hasFloat32, g985 = this._hasUint32, g985 && f985)
                            break;
                        e985 = a985[h985], f985 || e985 !== q193.FLOAT32 ? g985 || e985 !== q193.UINT32 || (this._hasUint32 = !0) : this._hasFloat32 = !0;
                    }
                }
                alloc() {
                    let p984 = 0;
                    for (; p984 < this._freeLists.length; p984++) {
                        const x984 = this._freeLists[p984];
                        if (x984.length) {
                            const y984 = x984[x984.length - 1];
                            return x984.length--, (p984 << this._entryBits) + y984 + this._poolFlag;
                        }
                    }
                    const q984 = this._nativePool.allocateNewChunk(), r984 = [], s984 = [], t984 = [], u984 = this._hasFloat32, v984 = this._hasUint32;
                    for (let w984 = 0; w984 < this._entriesPerChunk; w984++)
                        u984 && r984.push(new Float32Array(q984, this._stride * w984, this._elementCount)), v984 && s984.push(new Uint32Array(q984, this._stride * w984, this._elementCount)), w984 && t984.push(w984);
                    return v984 && this._uint32BufferViews.push(s984), u984 && this._float32BufferViews.push(r984), this._freeLists.push(t984), this._arrayBuffers.push(q984), (p984 << this._entryBits) + this._poolFlag;
                }
                getBuffer(m984) {
                    const n984 = (this._chunkMask & m984) >> this._entryBits, o984 = this._entryMask & m984;
                    return (this._hasFloat32 ? this._float32BufferViews : this._uint32BufferViews)[n984][o984];
                }
                getTypedArray(f984, g984) {
                    const h984 = (this._chunkMask & f984) >> this._entryBits, i984 = this._entryMask & f984, j984 = g984, k984 = (this._dataType[g984] === q193.UINT32 ? this._uint32BufferViews : this._float32BufferViews)[h984][i984], l984 = this._dataMembers[g984];
                    return k984.subarray(j984, j984 + l984);
                }
                free(c984) {
                    const d984 = (this._chunkMask & c984) >> this._entryBits, e984 = this._entryMask & c984;
                    (this._hasUint32 ? this._uint32BufferViews : this._float32BufferViews)[d984][e984].fill(0), this._freeLists[d984].push(e984);
                }
            }
            let s193, t193;
            !function (b984) {
                b984[b984.NODE = 0] = "NODE", b984[b984.PASS = 1] = "PASS", b984[b984.AABB = 2] = "AABB", b984[b984.RENDER2D = 3] = "RENDER2D";
            }(s193 || (s193 = {})), function (a984) {
                a984[a984.POSITION = 0] = "POSITION", a984[a984.UV = 3] = "UV", a984[a984.COLOR = 5] = "COLOR", a984[a984.COUNT = 9] = "COUNT";
            }(t193 || (t193 = {}));
            const u193 = {
                [t193.POSITION]: q193.FLOAT32,
                [t193.UV]: q193.FLOAT32,
                [t193.COLOR]: q193.UINT32,
                [t193.COUNT]: q193.NEVER
            }, v193 = {
                [t193.POSITION]: t193.UV - t193.POSITION,
                [t193.UV]: t193.COLOR - t193.UV,
                [t193.COLOR]: t193.COUNT - t193.COLOR,
                [t193.COUNT]: 1
            }, w193 = new r193(s193.RENDER2D, u193, v193, t193);
            let x193;
            !function (z983) {
                z983[z983.DIRTY_FLAG = 0] = "DIRTY_FLAG", z983[z983.LAYER = 1] = "LAYER", z983[z983.WORLD_SCALE = 2] = "WORLD_SCALE", z983[z983.WORLD_POSITION = 5] = "WORLD_POSITION", z983[z983.WORLD_ROTATION = 8] = "WORLD_ROTATION", z983[z983.WORLD_MATRIX = 12] = "WORLD_MATRIX", z983[z983.LOCAL_SCALE = 28] = "LOCAL_SCALE", z983[z983.LOCAL_POSITION = 31] = "LOCAL_POSITION", z983[z983.LOCAL_ROTATION = 34] = "LOCAL_ROTATION", z983[z983.COUNT = 38] = "COUNT";
            }(x193 || (x193 = {}));
            const y193 = {
                [x193.DIRTY_FLAG]: q193.UINT32,
                [x193.LAYER]: q193.UINT32,
                [x193.WORLD_SCALE]: q193.FLOAT32,
                [x193.WORLD_POSITION]: q193.FLOAT32,
                [x193.WORLD_ROTATION]: q193.FLOAT32,
                [x193.WORLD_MATRIX]: q193.FLOAT32,
                [x193.LOCAL_SCALE]: q193.FLOAT32,
                [x193.LOCAL_POSITION]: q193.FLOAT32,
                [x193.LOCAL_ROTATION]: q193.FLOAT32,
                [x193.COUNT]: q193.NEVER
            }, z193 = {
                [x193.DIRTY_FLAG]: x193.LAYER - x193.DIRTY_FLAG,
                [x193.LAYER]: x193.WORLD_SCALE - x193.LAYER,
                [x193.WORLD_SCALE]: x193.WORLD_POSITION - x193.WORLD_SCALE,
                [x193.WORLD_POSITION]: x193.WORLD_ROTATION - x193.WORLD_POSITION,
                [x193.WORLD_ROTATION]: x193.WORLD_MATRIX - x193.WORLD_ROTATION,
                [x193.WORLD_MATRIX]: x193.LOCAL_SCALE - x193.WORLD_MATRIX,
                [x193.LOCAL_SCALE]: x193.LOCAL_POSITION - x193.LOCAL_SCALE,
                [x193.LOCAL_POSITION]: x193.LOCAL_ROTATION - x193.LOCAL_POSITION,
                [x193.LOCAL_ROTATION]: x193.COUNT - x193.LOCAL_ROTATION,
                [x193.COUNT]: 1
            }, a194 = new r193(s193.NODE, y193, z193, x193);
            let b194;
            !function (y983) {
                y983[y983.PRIORITY = 0] = "PRIORITY", y983[y983.STAGE = 1] = "STAGE", y983[y983.PHASE = 2] = "PHASE", y983[y983.PRIMITIVE = 3] = "PRIMITIVE", y983[y983.BATCHING_SCHEME = 4] = "BATCHING_SCHEME", y983[y983.DYNAMIC_STATE = 5] = "DYNAMIC_STATE", y983[y983.HASH = 6] = "HASH", y983[y983.COUNT = 7] = "COUNT";
            }(b194 || (b194 = {}));
            const c194 = {
                [b194.PRIORITY]: q193.UINT32,
                [b194.STAGE]: q193.UINT32,
                [b194.PHASE]: q193.UINT32,
                [b194.PRIMITIVE]: q193.UINT32,
                [b194.BATCHING_SCHEME]: q193.UINT32,
                [b194.DYNAMIC_STATE]: q193.UINT32,
                [b194.HASH]: q193.UINT32,
                [b194.COUNT]: q193.NEVER
            }, d194 = {
                [b194.PRIORITY]: b194.STAGE - b194.PRIORITY,
                [b194.STAGE]: b194.PHASE - b194.STAGE,
                [b194.PHASE]: b194.PRIMITIVE - b194.PHASE,
                [b194.PRIMITIVE]: b194.BATCHING_SCHEME - b194.PRIMITIVE,
                [b194.BATCHING_SCHEME]: b194.DYNAMIC_STATE - b194.BATCHING_SCHEME,
                [b194.DYNAMIC_STATE]: b194.HASH - b194.DYNAMIC_STATE,
                [b194.HASH]: b194.COUNT - b194.HASH,
                [b194.COUNT]: 1
            }, e194 = new r193(s193.PASS, c194, d194, b194);
            let f194;
            !function (x983) {
                x983[x983.CENTER = 0] = "CENTER", x983[x983.HALFEXTENTS = 3] = "HALFEXTENTS", x983[x983.COUNT = 6] = "COUNT";
            }(f194 || (f194 = {}));
            const g194 = {
                [f194.CENTER]: q193.FLOAT32,
                [f194.HALFEXTENTS]: q193.FLOAT32,
                [f194.COUNT]: q193.NEVER
            }, h194 = {
                [f194.CENTER]: f194.HALFEXTENTS - f194.CENTER,
                [f194.HALFEXTENTS]: f194.COUNT - f194.HALFEXTENTS,
                [f194.COUNT]: 1
            }, i194 = new r193(s193.AABB, g194, h194, f194), j194 = jsb.RenderScene.prototype;
            Object.defineProperty(j194, "mainLight", {
                enumerable: !0,
                configurable: !0,
                get() {
                    return this.getMainLight();
                }
            });
            const k194 = jsb.RenderScene;
            p127({
                Low_256x256: 256,
                Medium_512x512: 512,
                High_1024x1024: 1024,
                Ultra_2048x2048: 2048
            });
            const l194 = p127({
                Planar: 0,
                ShadowMap: 1
            });
            p127({
                HARD: 0,
                SOFT: 1,
                SOFT_2X: 2,
                SOFT_4X: 3
            });
            const m194 = p127({
                LEVEL_1: 1,
                LEVEL_2: 2,
                LEVEL_3: 3,
                LEVEL_4: 4
            });
            p127({
                NONE: 1,
                RemoveDuplicates: 2,
                DisableRotationFix: 3
            });
            const n194 = l194.ShadowMap + 1;
            class o194 {
                constructor() {
                    this.fixedSphere = new s148(0, 0, 0, .01), this.maxReceived = 4, this._matLight = new o147(), this._material = null, this._instancingMaterial = null, this._enabled = !1, this._type = n194, this._distance = 0, this._planeBias = 1, this._normal = new w146(0, 1, 0), this._shadowColor = new a147(0, 0, 0, 76), this._size = new s147(1024, 1024), this._shadowMapDirty = !1;
                }
                get enabled() {
                    return this._enabled;
                }
                set enabled(w983) {
                    this._enabled = w983, this.activate();
                }
                get type() {
                    return this._type;
                }
                set type(v983) {
                    this._type = this.enabled ? v983 : n194, this.activate();
                }
                get normal() {
                    return this._normal;
                }
                set normal(u983) {
                    w146.copy(this._normal, u983);
                }
                get distance() {
                    return this._distance;
                }
                set distance(t983) {
                    this._distance = t983;
                }
                get planeBias() {
                    return this._planeBias;
                }
                set planeBias(s983) {
                    this._planeBias = s983;
                }
                get shadowColor() {
                    return this._shadowColor;
                }
                set shadowColor(r983) {
                    this._shadowColor = r983;
                }
                get size() {
                    return this._size;
                }
                set size(q983) {
                    this._size.set(q983);
                }
                get shadowMapDirty() {
                    return this._shadowMapDirty;
                }
                set shadowMapDirty(p983) {
                    this._shadowMapDirty = p983;
                }
                get matLight() {
                    return this._matLight;
                }
                get material() {
                    return this._material;
                }
                get instancingMaterial() {
                    return this._instancingMaterial;
                }
                getPlanarShader(n983) {
                    this._material || (this._material = new c178(), this._material.initialize({
                        effectName: "pipeline/planar-shadow"
                    }));
                    const o983 = this._material.passes;
                    return o983.length > 0 ? o983[0].getShaderVariant(n983) : null;
                }
                initialize(m983) {
                    this._enabled = m983.enabled, this._type = this.enabled ? m983.type : n194, this.normal = m983.planeDirection, this.distance = m983.planeHeight, this.planeBias = m983.planeBias, this.shadowColor = m983.shadowColor, this.maxReceived = m983.maxReceived, m983.shadowMapSize !== this._size.x && (this.size.set(m983.shadowMapSize, m983.shadowMapSize), this._shadowMapDirty = !0);
                }
                activate() {
                    if (this._enabled) {
                        if (this.type === l194.Planar)
                            this._updatePlanarInfo();
                        else {
                            const l983 = s143.director.root;
                            l983.pipeline.macros.CC_SHADOW_TYPE = 2, l983.onGlobalPipelineStateChanged();
                        }
                    }
                    else {
                        const k983 = s143.director.root;
                        k983.pipeline.macros.CC_SHADOW_TYPE = 0, k983.onGlobalPipelineStateChanged();
                    }
                }
                _updatePlanarInfo() {
                    this._material || (this._material = new c178(), this._material.initialize({
                        effectName: "pipeline/planar-shadow"
                    }));
                    const j983 = s143.director.root;
                    j983.pipeline.macros.CC_SHADOW_TYPE = 1, j983.onGlobalPipelineStateChanged();
                }
                destroy() {
                    this._material && this._material.destroy(), this._instancingMaterial && this._instancingMaterial.destroy(), this.fixedSphere.destroy();
                }
            }
            o194.MAX_FAR = 2e3, o194.COEFFICIENT_OF_EXPANSION = 2 * Math.sqrt(3), s143.Shadows = o194, l144(k194.prototype, "RenderScene.prototype", [{
                    name: "raycastUI2DNode"
                }, {
                    name: "raycastUINode"
                }]), l144(k194.prototype, "RenderScene.prototype", [{
                    name: "raycastAll",
                    suggest: "using intersect.rayModel in geometry"
                }, {
                    name: "raycastAllModels",
                    suggest: "using intersect.rayModel in geometry"
                }, {
                    name: "raycastSingleModel",
                    suggest: "using intersect.rayModel in geometry"
                }, {
                    name: "raycastAllCanvas",
                    suggest: "using intersect.rayAABB in geometry"
                }, {
                    name: "rayResultCanvas"
                }, {
                    name: "rayResultModels"
                }, {
                    name: "rayResultAll"
                }, {
                    name: "rayResultSingleModel"
                }]), l144(b176.prototype, "Model.prototype", [{
                    name: "isInstancingEnabled"
                }, {
                    name: "instancedAttributes"
                }]);
            const p194 = {};
            l144(p194, "CameraVisFlags", [{
                    name: "GENERAL"
                }]), k144(p194, "CameraVisFlags", [{
                    name: "PROFILER",
                    newName: "PROFILER",
                    target: w168.BitMask,
                    targetName: "PROFILER"
                }, {
                    name: "GIZMOS",
                    newName: "GIZMOS",
                    target: w168.BitMask,
                    targetName: "GIZMOS"
                }, {
                    name: "EDITOR",
                    newName: "EDITOR",
                    target: w168.BitMask,
                    targetName: "EDITOR"
                }, {
                    name: "UI",
                    newName: "UI",
                    target: w168.BitMask,
                    targetName: "UI_3D"
                }, {
                    name: "UI2D",
                    newName: "UI2D",
                    target: w168.BitMask,
                    targetName: "UI_2D"
                }]), s143.CameraVisFlags = p194;
            const q194 = {};
            l144(q194, "VisibilityFlags", [{
                    name: "GENERAL"
                }]), k144(q194, "VisibilityFlags", [{
                    name: "ALWALS",
                    newName: "ALWALS",
                    target: w168.Enum,
                    targetName: "ALWALS"
                }, {
                    name: "PROFILER",
                    newName: "PROFILER",
                    target: w168.Enum,
                    targetName: "PROFILER"
                }, {
                    name: "GIZMOS",
                    newName: "GIZMOS",
                    target: w168.Enum,
                    targetName: "GIZMOS"
                }, {
                    name: "EDITOR",
                    newName: "EDITOR",
                    target: w168.Enum,
                    targetName: "EDITOR"
                }, {
                    name: "UI",
                    newName: "UI",
                    target: w168.Enum,
                    targetName: "UI_3D"
                }, {
                    name: "UI2D",
                    newName: "UI2D",
                    target: w168.Enum,
                    targetName: "UI_2D"
                }]), s143.VisibilityFlags = q194, k144(n193.prototype, "Pass.prototype", [{
                    name: "getBindingTypeFromHandle",
                    newName: "getDescriptorTypeFromHandle"
                }]), l144(o176.prototype, "Camera.prototype", [{
                    name: "getSplitFrustum"
                }, {
                    name: "setMatView"
                }, {
                    name: "setMatViewInv"
                }, {
                    name: "setMatProjInv"
                }, {
                    name: "setMatViewProjInv"
                }, {
                    name: "setMatProj"
                }, {
                    name: "setMatViewProj"
                }, {
                    name: "getMatViewInv"
                }]), l144(o194.prototype, "Shadows.prototype", [{
                    name: "aspect"
                }, {
                    name: "selfShadow"
                }, {
                    name: "linear"
                }, {
                    name: "packing"
                }, {
                    name: "autoAdapt"
                }, {
                    name: "fixedArea"
                }, {
                    name: "pcf"
                }, {
                    name: "bias"
                }, {
                    name: "normalBias"
                }, {
                    name: "near"
                }, {
                    name: "far"
                }, {
                    name: "shadowDistance"
                }, {
                    name: "invisibleOcclusionRange"
                }, {
                    name: "orthoSize"
                }, {
                    name: "saturation"
                }]), l144(e177.prototype, "SpotLight.prototype", [{
                    name: "aspect"
                }]), k144(e176.prototype, "SubModel.prototype", [{
                    name: "subMeshData",
                    newName: "subMesh"
                }]), l144(e176.prototype, "SubModel.prototype", [{
                    name: "getSubModel",
                    suggest: "Use `subModels[i]` instead"
                }, {
                    name: "subModelNum",
                    suggest: "Use `subModels.length` instead"
                }]);
            const r194 = c193.addStage;
            var s194 = Object.freeze({
                __proto__: null,
                addStage: r194,
                scene: y177,
                createIA: function (b983, c983) {
                    if (!c983.positions)
                        return console.error("The data must have positions field"), null;
                    const d983 = [], e983 = c983.positions.length / 3;
                    for (let i983 = 0; i983 < e983; ++i983)
                        d983.push(c983.positions[3 * i983], c983.positions[3 * i983 + 1], c983.positions[3 * i983 + 2]), c983.normals && d983.push(c983.normals[3 * i983], c983.normals[3 * i983 + 1], c983.normals[3 * i983 + 2]), c983.uvs && d983.push(c983.uvs[2 * i983], c983.uvs[2 * i983 + 1]), c983.colors && d983.push(c983.colors[3 * i983], c983.colors[3 * i983 + 1], c983.colors[3 * i983 + 2]);
                    const f983 = [];
                    f983.push(new o160(g159.ATTR_POSITION, t157.RGB32F)), c983.normals && f983.push(new o160(g159.ATTR_NORMAL, t157.RGB32F)), c983.uvs && f983.push(new o160(g159.ATTR_TEX_COORD, t157.RG32F)), c983.colors && f983.push(new o160(g159.ATTR_COLOR, t157.RGB32F));
                    const g983 = b983.createBuffer(new x159(w157.VERTEX | w157.TRANSFER_DST, z157.DEVICE, 4 * d983.length, 4 * d983.length / e983));
                    g983.update(new Float32Array(d983));
                    let h983 = null;
                    return c983.indices && (h983 = b983.createBuffer(new x159(w157.INDEX | w157.TRANSFER_DST, z157.DEVICE, 2 * c983.indices.length, 2)), h983.update(new Uint16Array(c983.indices))), b983.createInputAssembler(new q160(f983, [g983], h983));
                },
                programLib: o193,
                getDeviceShaderVersion: function (a983) {
                    switch (a983.gfxAPI) {
                        case q157.GLES2:
                        case q157.WEBGL:
                            return "glsl1";
                        case q157.GLES3:
                        case q157.WEBGL2:
                            return "glsl3";
                        default:
                            return "glsl4";
                    }
                },
                get RenderQueue() {
                    return d193;
                },
                get PassStage() {
                    return e193;
                },
                genHandle: (w982, x982, y982, z982 = 0) => x982 << 26 & f193 | w982 << 20 & g193 | y982 << 12 & h193 | 4095 & z982,
                getTypeFromHandle: v982 => (v982 & f193) >>> 26,
                getBindingFromHandle: u982 => (u982 & g193) >>> 20,
                getCountFromHandle: t982 => (t982 & h193) >>> 12,
                getOffsetFromHandle: s982 => 4095 & s982,
                customizeType: (q982, r982) => 67108863 & q982 | r982 << 26 & f193,
                type2reader: i193,
                type2writer: j193,
                type2validator: k193,
                getDefaultFromType: v137,
                getStringFromType: w137,
                overrideMacros: x137,
                get BatchingSchemes() {
                    return m193;
                },
                Pass: n193,
                nearestPOT: y137,
                TextureBufferPool: class {
                    constructor(p982) {
                        this._device = void 0, this._format = t157.UNKNOWN, this._formatSize = 0, this._chunks = [], this._chunkCount = 0, this._handles = [], this._region0 = new r159(), this._region1 = new r159(), this._region2 = new r159(), this._roundUpFn = null, this._bufferViewCtor = Uint8Array, this._channels = 4, this._alignment = 1, this._device = p982;
                    }
                    initialize(n982) {
                        const o982 = n161[n982.format];
                        this._format = n982.format, this._formatSize = o982.size, this._channels = o982.count, this._bufferViewCtor = f134(o982), this._roundUpFn = n982.roundUpFn || null, this._alignment = n982.alignment || 1, n982.inOrderFree && (this.alloc = this._McDonaldAlloc);
                    }
                    destroy() {
                        for (let m982 = 0; m982 < this._chunkCount; ++m982)
                            this._chunks[m982].texture.destroy();
                        this._chunks.length = 0, this._handles.length = 0;
                    }
                    alloc(b982, c982) {
                        b982 = z137(b982, this._alignment);
                        let d982 = -1, e982 = -1;
                        if (void 0 !== c982 && (d982 = c982, e982 = this._findAvailableSpace(b982, d982)), e982 < 0)
                            for (let l982 = 0; l982 < this._chunkCount && (d982 = l982, e982 = this._findAvailableSpace(b982, d982), !(e982 >= 0)); ++l982)
                                ;
                        if (e982 >= 0) {
                            const j982 = this._chunks[d982];
                            j982.start += b982;
                            const k982 = {
                                chunkIdx: d982,
                                start: e982,
                                end: e982 + b982,
                                texture: j982.texture
                            };
                            return this._handles.push(k982), k982;
                        }
                        const f982 = Math.sqrt(b982 / this._formatSize), g982 = this._roundUpFn && this._roundUpFn(f982, this._formatSize) || Math.max(1024, y137(f982)), h982 = this._chunks[this.createChunk(g982)];
                        h982.start += b982;
                        const i982 = {
                            chunkIdx: this._chunkCount - 1,
                            start: 0,
                            end: b982,
                            texture: h982.texture
                        };
                        return this._handles.push(i982), i982;
                    }
                    free(z981) {
                        for (let a982 = 0; a982 < this._handles.length; ++a982)
                            if (this._handles[a982] === z981)
                                return this._chunks[z981.chunkIdx].end = z981.end, void this._handles.splice(a982, 1);
                    }
                    createChunk(w981) {
                        const x981 = w981 * w981 * this._formatSize;
                        t125(`TextureBufferPool: Allocate chunk ${this._chunkCount}, size: ${x981}, format: ${this._format}`);
                        const y981 = {
                            texture: this._device.createTexture(new c160(a158.TEX2D, b158.SAMPLED | b158.TRANSFER_DST, this._format, w981, w981)),
                            size: x981,
                            start: 0,
                            end: x981
                        };
                        return this._chunks[this._chunkCount] = y981, this._chunkCount++;
                    }
                    update(m981, n981) {
                        const o981 = [], p981 = [], q981 = m981.start / this._formatSize;
                        let r981 = n981.byteLength / this._formatSize, s981 = q981 % m981.texture.width, t981 = Math.floor(q981 / m981.texture.width), u981 = Math.min(m981.texture.width - s981, r981), v981 = 0;
                        s981 > 0 && (this._region0.texOffset.x = s981, this._region0.texOffset.y = t981, this._region0.texExtent.width = u981, this._region0.texExtent.height = 1, o981.push(new this._bufferViewCtor(n981, v981 * this._formatSize, u981 * this._channels)), p981.push(this._region0), s981 = 0, t981 += 1, r981 -= u981, v981 += u981), r981 > 0 && (this._region1.texOffset.x = s981, this._region1.texOffset.y = t981, r981 > m981.texture.width ? (this._region1.texExtent.width = m981.texture.width, this._region1.texExtent.height = Math.floor(r981 / m981.texture.width), u981 = this._region1.texExtent.width * this._region1.texExtent.height) : (u981 = r981, this._region1.texExtent.width = u981, this._region1.texExtent.height = 1), o981.push(new this._bufferViewCtor(n981, v981 * this._formatSize, u981 * this._channels)), p981.push(this._region1), s981 = 0, t981 += this._region1.texExtent.height, r981 -= u981, v981 += u981), r981 > 0 && (this._region2.texOffset.x = s981, this._region2.texOffset.y = t981, this._region2.texExtent.width = r981, this._region2.texExtent.height = 1, o981.push(new this._bufferViewCtor(n981, v981 * this._formatSize, r981 * this._channels)), p981.push(this._region2)), this._device.copyBuffersToTexture(o981, m981.texture, p981);
                    }
                    _findAvailableSpace(z980, a981) {
                        const b981 = this._chunks[a981];
                        let c981 = !1, d981 = b981.start;
                        if (d981 + z980 <= b981.size)
                            c981 = !0;
                        else {
                            d981 = 0;
                            const e981 = this._handles.filter(l981 => l981.chunkIdx === a981).sort((j981, k981) => j981.start - k981.start);
                            for (let h981 = 0; h981 < e981.length; h981++) {
                                const i981 = e981[h981];
                                if (d981 + z980 <= i981.start) {
                                    c981 = !0;
                                    break;
                                }
                                d981 = i981.end;
                            }
                            !c981 && d981 + z980 <= b981.size && (c981 = !0);
                        }
                        return c981 ? d981 : -1;
                    }
                    _McDonaldAlloc(p980) {
                        p980 = z137(p980, this._alignment);
                        for (let u980 = 0; u980 < this._chunkCount; ++u980) {
                            const v980 = this._chunks[u980];
                            let w980 = !1, x980 = v980.start;
                            if (x980 + p980 <= v980.end ? w980 = !0 : x980 > v980.end ? x980 + p980 <= v980.size ? w980 = !0 : p980 <= v980.end && (v980.start = x980 = 0, w980 = !0) : x980 === v980.end && (v980.start = x980 = 0, v980.end = v980.size, p980 <= v980.end && (w980 = !0)), w980) {
                                v980.start += p980;
                                const y980 = {
                                    chunkIdx: u980,
                                    start: x980,
                                    end: x980 + p980,
                                    texture: v980.texture
                                };
                                return this._handles.push(y980), y980;
                            }
                        }
                        const q980 = Math.sqrt(p980 / this._formatSize), r980 = this._roundUpFn && this._roundUpFn(q980, this._formatSize) || Math.max(1024, y137(q980)), s980 = this._chunks[this.createChunk(r980)];
                        s980.start += p980;
                        const t980 = {
                            chunkIdx: this._chunkCount,
                            start: 0,
                            end: p980,
                            texture: s980.texture
                        };
                        return this._handles.push(t980), t980;
                    }
                },
                MaterialInstance: e190,
                PassInstance: class extends n193 {
                    get parent() {
                        return this._parent;
                    }
                    constructor(d980, e980) {
                        super(d980.root), this._parent = void 0, this._owner = void 0, this._dontNotify = !1, this._parent = d980, this._owner = e980, this._doInit(this._parent, !0);
                        for (let l980 = 0; l980 < this._shaderInfo.blocks.length; l980++) {
                            const m980 = this._shaderInfo.blocks[l980], n980 = this._blocks[m980.binding], o980 = this._parent.blocks[m980.binding];
                            n980.set(o980);
                        }
                        this._rootBufferDirty = !0;
                        const f980 = this._parent;
                        for (let g980 = 0; g980 < this._shaderInfo.samplerTextures.length; g980++) {
                            const h980 = this._shaderInfo.samplerTextures[g980];
                            for (let i980 = 0; i980 < h980.count; i980++) {
                                const j980 = f980._descriptorSet.getSampler(h980.binding, i980), k980 = f980._descriptorSet.getTexture(h980.binding, i980);
                                this._descriptorSet.bindSampler(h980.binding, j980, i980), this._descriptorSet.bindTexture(h980.binding, k980, i980);
                            }
                        }
                        super.tryCompile();
                    }
                    overridePipelineStates(b980, c980) {
                        this._bs.reset(), this._rs.reset(), this._dss.reset(), n193.fillPipelineInfo(this, b980), n193.fillPipelineInfo(this, c980), this._onStateChange();
                    }
                    tryCompile(z979) {
                        if (z979 && !x137(this._defines, z979))
                            return !1;
                        const a980 = super.tryCompile();
                        return this._onStateChange(), a980;
                    }
                    beginChangeStatesSilently() {
                        this._dontNotify = !0;
                    }
                    endChangeStatesSilently() {
                        this._dontNotify = !1;
                    }
                    _syncBatchingScheme() {
                        this._defines.USE_INSTANCING = !1, this._batchingScheme = m193.NONE;
                    }
                    _onStateChange() {
                        this._hash = n193.getPassHash(this), this._owner.onPassStateChange(this._dontNotify);
                    }
                },
                get PoolType() {
                    return s193;
                },
                NULL_HANDLE: 0,
                get Render2dView() {
                    return t193;
                },
                Render2dPool: w193,
                get NodeView() {
                    return x193;
                },
                NodePool: a194,
                get PassView() {
                    return b194;
                },
                PassPool: e194,
                get AABBView() {
                    return f194;
                },
                AABBPool: i194,
                RenderScene: k194,
                CameraVisFlags: p194,
                VisibilityFlags: q194
            });
            let t194, u194, v194;
            g125("renderer", s194), function (y979) {
                y979[y979.BUTT = 0] = "BUTT", y979[y979.ROUND = 1] = "ROUND", y979[y979.SQUARE = 2] = "SQUARE";
            }(t194 || (t194 = {})), s127(t194), function (x979) {
                x979[x979.BEVEL = 0] = "BEVEL", x979[x979.ROUND = 1] = "ROUND", x979[x979.MITER = 2] = "MITER";
            }(u194 || (u194 = {})), s127(u194), function (w979) {
                w979[w979.PT_CORNER = 1] = "PT_CORNER", w979[w979.PT_LEFT = 2] = "PT_LEFT", w979[w979.PT_BEVEL = 4] = "PT_BEVEL", w979[w979.PT_INNERBEVEL = 8] = "PT_INNERBEVEL";
            }(v194 || (v194 = {})), s127(v194);
            const w194 = Math.PI, x194 = Math.min, y194 = Math.max, z194 = Math.cos, a195 = Math.sin, b195 = Math.abs, c195 = Math.sign, d195 = .5522847493;
            function a138(r979, s979, t979, u979, v979) {
                r979.moveTo(s979 - u979, t979), r979.bezierCurveTo(s979 - u979, t979 + v979 * d195, s979 - u979 * d195, t979 + v979, s979, t979 + v979), r979.bezierCurveTo(s979 + u979 * d195, t979 + v979, s979 + u979, t979 + v979 * d195, s979 + u979, t979), r979.bezierCurveTo(s979 + u979, t979 - v979 * d195, s979 + u979 * d195, t979 - v979, s979, t979 - v979), r979.bezierCurveTo(s979 - u979 * d195, t979 - v979, s979 - u979, t979 - v979 * d195, s979 - u979, t979), r979.close();
            }
            function b138(q978, r978, s978, t978, u978, v978, w978, x978, y978, z978, a979) {
                let b979 = 0, c979 = 0, d979 = 0, e979 = 0, f979 = 0, g979 = 0, h979 = 0, i979 = 0, j979 = 0, k979 = 0, l979 = 0, m979 = 0, n979 = 0, o979 = 0, p979 = 0, q979 = 0;
                z978 > 10 || (b979 = .5 * (r978 + t978), c979 = .5 * (s978 + u978), d979 = .5 * (t978 + v978), e979 = .5 * (u978 + w978), f979 = .5 * (v978 + x978), g979 = .5 * (w978 + y978), h979 = .5 * (b979 + d979), i979 = .5 * (c979 + e979), n979 = x978 - r978, o979 = y978 - s978, p979 = b195((t978 - x978) * o979 - (u978 - y978) * n979), q979 = b195((v978 - x978) * o979 - (w978 - y978) * n979), (p979 + q979) * (p979 + q979) < q978.tessTol * (n979 * n979 + o979 * o979) ? q978.addPoint(x978, y978, 0 === a979 ? a979 | v194.PT_BEVEL : a979) : (j979 = .5 * (d979 + f979), k979 = .5 * (e979 + g979), l979 = .5 * (h979 + j979), m979 = .5 * (i979 + k979), b138(q978, r978, s978, b979, c979, h979, i979, l979, m979, z978 + 1, 0), b138(q978, l979, m979, j979, k979, f979, g979, x978, y978, z978 + 1, a979)));
            }
            class e195 extends s147 {
                constructor(...p978) {
                    super(...p978), this.dx = 0, this.dy = 0, this.dmx = 0, this.dmy = 0, this.flags = 0, this.len = 0;
                }
                reset() {
                    this.dx = 0, this.dy = 0, this.dmx = 0, this.dmy = 0, this.flags = 0, this.len = 0;
                }
            }
            class f195 {
                constructor() {
                    this.closed = !1, this.bevel = 0, this.complex = !0, this.points = [];
                }
                reset() {
                    this.closed = !1, this.bevel = 0, this.complex = !0, this.points.length = 0;
                }
            }
            class g195 {
                constructor(o978) {
                    this.dataOffset = 0, this.updatePathOffset = !1, this.pathLength = 0, this.pathOffset = 0, this.paths = [], this.tessTol = .25, this.distTol = .01, this.fillColor = a147.WHITE.clone(), this.lineCap = t194.BUTT, this.strokeColor = a147.BLACK.clone(), this.lineJoin = u194.MITER, this.lineWidth = 0, this.pointsOffset = 0, this._commandX = 0, this._commandY = 0, this._points = [], this._renderDataList = [], this._curPath = null, this._comp = void 0, this._comp = o978;
                }
                moveTo(m978, n978) {
                    this.updatePathOffset && (this.pathOffset = this.pathLength, this.updatePathOffset = !1), this._addPath(), this.addPoint(m978, n978, v194.PT_CORNER), this._commandX = m978, this._commandY = n978;
                }
                lineTo(k978, l978) {
                    this.addPoint(k978, l978, v194.PT_CORNER), this._commandX = k978, this._commandY = l978;
                }
                bezierCurveTo(c978, d978, e978, f978, g978, h978) {
                    const i978 = this._curPath, j978 = i978.points[i978.points.length - 1];
                    j978 && (j978.x !== c978 || j978.y !== d978 || e978 !== g978 || f978 !== h978 ? (b138(this, j978.x, j978.y, c978, d978, e978, f978, g978, h978, 0, v194.PT_CORNER), this._commandX = g978, this._commandY = h978) : this.lineTo(g978, h978));
                }
                quadraticCurveTo(w977, x977, y977, z977) {
                    const a978 = this._commandX, b978 = this._commandY;
                    this.bezierCurveTo(a978 + 2 / 3 * (w977 - a978), b978 + 2 / 3 * (x977 - b978), y977 + 2 / 3 * (w977 - y977), z977 + 2 / 3 * (x977 - z977), y977, z977);
                }
                arc(s976, t976, u976, v976, w976, x976) {
                    !function (z976, a977, b977, c977, d977, e977, f977) {
                        let g977 = 0, h977 = 0, i977 = 0, j977 = 0, k977 = 0, l977 = 0, m977 = 0, n977 = 0, o977 = 0, p977 = 0, q977 = 0, r977 = 0, s977 = 0, t977 = 0, u977 = 0, v977 = 0;
                        if (h977 = e977 - d977, f977 = f977 || !1) {
                            if (b195(h977) >= 2 * w194)
                                h977 = 2 * w194;
                            else
                                for (; h977 < 0;)
                                    h977 += 2 * w194;
                        }
                        else if (b195(h977) >= 2 * w194)
                            h977 = 2 * -w194;
                        else
                            for (; h977 > 0;)
                                h977 -= 2 * w194;
                        for (v977 = 0 | y194(1, x194(b195(h977) / (.5 * w194) + .5, 5)), i977 = h977 / v977 / 2, j977 = b195(4 / 3 * (1 - z194(i977)) / a195(i977)), f977 || (j977 = -j977), u977 = 0; u977 <= v977; u977++)
                            g977 = d977 + h977 * (u977 / v977), k977 = z194(g977), l977 = a195(g977), m977 = a977 + k977 * c977, n977 = b977 + l977 * c977, o977 = -l977 * c977 * j977, p977 = k977 * c977 * j977, 0 === u977 ? z976.moveTo(m977, n977) : z976.bezierCurveTo(q977 + s977, r977 + t977, m977 - o977, n977 - p977, m977, n977), q977 = m977, r977 = n977, s977 = o977, t977 = p977;
                    }(this, s976, t976, u976, v976, w976, x976);
                }
                ellipse(o976, p976, q976, r976) {
                    a138(this, o976, p976, q976, r976), this._curPath.complex = !1;
                }
                circle(l976, m976, n976) {
                    a138(this, l976, m976, n976, n976), this._curPath.complex = !1;
                }
                rect(h976, i976, j976, k976) {
                    this.moveTo(h976, i976), this.lineTo(h976 + j976, i976), this.lineTo(h976 + j976, i976 + k976), this.lineTo(h976, i976 + k976), this.close(), this._curPath.complex = !1;
                }
                roundRect(t975, u975, v975, w975, x975) {
                    !function (z975, a976, b976, c976, d976, e976) {
                        if (e976 < .1)
                            z975.rect(a976, b976, c976, d976);
                        else {
                            const f976 = x194(e976, .5 * b195(c976)) * c195(c976), g976 = x194(e976, .5 * b195(d976)) * c195(d976);
                            z975.moveTo(a976, b976 + g976), z975.lineTo(a976, b976 + d976 - g976), z975.bezierCurveTo(a976, b976 + d976 - g976 * (1 - d195), a976 + f976 * (1 - d195), b976 + d976, a976 + f976, b976 + d976), z975.lineTo(a976 + c976 - f976, b976 + d976), z975.bezierCurveTo(a976 + c976 - f976 * (1 - d195), b976 + d976, a976 + c976, b976 + d976 - g976 * (1 - d195), a976 + c976, b976 + d976 - g976), z975.lineTo(a976 + c976, b976 + g976), z975.bezierCurveTo(a976 + c976, b976 + g976 * (1 - d195), a976 + c976 - f976 * (1 - d195), b976, a976 + c976 - f976, b976), z975.lineTo(a976 + f976, b976), z975.bezierCurveTo(a976 + f976 * (1 - d195), b976, a976, b976 + g976 * (1 - d195), a976, b976 + g976), z975.close();
                        }
                    }(this, t975, u975, v975, w975, x975), this._curPath.complex = !1;
                }
                clear() {
                    this.pathLength = 0, this.pathOffset = 0, this.pointsOffset = 0, this.dataOffset = 0, this._curPath = null, this.paths.length = 0, this._points.length = 0;
                    const p975 = this._renderDataList;
                    for (let q975 = 0, r975 = p975.length; q975 < r975; q975++) {
                        const s975 = p975[q975];
                        s975 && (p189.remove(s975), s975.removeRenderDrawInfo(this._comp));
                    }
                    this._renderDataList.length = 0;
                }
                close() {
                    this._curPath.closed = !0;
                }
                requestRenderData() {
                    const o975 = p189.add();
                    return this._renderDataList.push(o975), o975.initRenderDrawInfo(this._comp, b189.MODEL), o975.material = this._comp.getMaterialInstance(0), this._comp.setRenderData(o975), o975;
                }
                getRenderDataList() {
                    return 0 === this._renderDataList.length && this.requestRenderData(), this._renderDataList;
                }
                addPoint(h975, i975, j975) {
                    const k975 = this._curPath;
                    if (!k975)
                        return;
                    const l975 = this._points, m975 = k975.points;
                    let n975 = l975[this.pointsOffset++];
                    n975 ? (n975.x = h975, n975.y = i975) : (n975 = new e195(h975, i975), l975.push(n975)), n975.flags = j975, m975.push(n975);
                }
                _addPath() {
                    const f975 = this.pathLength;
                    let g975 = this.paths[f975];
                    return g975 ? g975.reset() : (g975 = new f195(), this.paths.push(g975)), this.pathLength++, this._curPath = g975, g975;
                }
            }
            var h195, i195, j195, k195, l195, m195, n195, o195, p195, q195, r195, s195, t195;
            const u195 = k188.concat([new o160("a_dist", t157.R32F)]), v195 = t137(u195), w195 = u137(u195);
            let x195 = (h195 = e151("cc.Graphics"), i195 = g151(110), j195 = a131(u194), k195 = a131(t194), h195(l195 = i195(((t195 = class t extends h191 {
                get lineWidth() {
                    return this._lineWidth;
                }
                set lineWidth(e975) {
                    this._lineWidth = e975, this.impl && (this.impl.lineWidth = e975);
                }
                get lineJoin() {
                    return this._lineJoin;
                }
                set lineJoin(d975) {
                    this._lineJoin = d975, this.impl && (this.impl.lineJoin = d975);
                }
                get lineCap() {
                    return this._lineCap;
                }
                set lineCap(c975) {
                    this._lineCap = c975, this.impl && (this.impl.lineCap = c975);
                }
                get strokeColor() {
                    return this._strokeColor;
                }
                set strokeColor(b975) {
                    this.impl && (this._strokeColor.set(b975), this.impl.strokeColor = this._strokeColor);
                }
                get fillColor() {
                    return this._fillColor;
                }
                set fillColor(a975) {
                    this.impl && (this._fillColor.set(a975), this.impl.fillColor = this._fillColor);
                }
                get miterLimit() {
                    return this._miterLimit;
                }
                set miterLimit(z974) {
                    this._miterLimit = z974;
                }
                get color() {
                    return this._color;
                }
                set color(y974) {
                    this._color !== y974 && this._color.set(y974);
                }
                get graphicsNativeProxy() {
                    return this._graphicsNativeProxy;
                }
                constructor() {
                    super(), this.impl = null, this.model = null, this._lineWidth = n195 && n195(), this._strokeColor = o195 && o195(), this._lineJoin = p195 && p195(), this._lineCap = q195 && q195(), this._fillColor = r195 && r195(), this._miterLimit = s195 && s195(), this._isDrawing = !1, this._isNeedUploadData = !0, this._graphicsUseSubMeshes = [], this._instanceMaterialType = g191.ADD_COLOR, this.impl = new g195(this), this._graphicsNativeProxy = new s188();
                }
                onRestore() {
                    this.impl || this._flushAssembler();
                }
                onLoad() {
                    super.onLoad(), this._graphicsNativeProxy.initModel(this.node), this.model = this._graphicsNativeProxy.getModel(), this._flushAssembler();
                }
                onEnable() {
                    super.onEnable(), this._updateMtlForGraphics();
                }
                onDestroy() {
                    this._sceneGetter = null, this._graphicsNativeProxy.destroy(), this.model = null, this.impl && (this._isDrawing = !1, this.impl.clear(), this.impl = null), super.onDestroy();
                }
                moveTo(w974, x974) {
                    this.impl && this.impl.moveTo(w974, x974);
                }
                lineTo(u974, v974) {
                    this.impl && this.impl.lineTo(u974, v974);
                }
                bezierCurveTo(o974, p974, q974, r974, s974, t974) {
                    this.impl && this.impl.bezierCurveTo(o974, p974, q974, r974, s974, t974);
                }
                quadraticCurveTo(k974, l974, m974, n974) {
                    this.impl && this.impl.quadraticCurveTo(k974, l974, m974, n974);
                }
                arc(e974, f974, g974, h974, i974, j974) {
                    this.impl && this.impl.arc(e974, f974, g974, h974, i974, j974);
                }
                ellipse(a974, b974, c974, d974) {
                    this.impl && this.impl.ellipse(a974, b974, c974, d974);
                }
                circle(x973, y973, z973) {
                    this.impl && this.impl.circle(x973, y973, z973);
                }
                rect(t973, u973, v973, w973) {
                    this.impl && this.impl.rect(t973, u973, v973, w973);
                }
                roundRect(o973, p973, q973, r973, s973) {
                    this.impl && this.impl.roundRect(o973, p973, q973, r973, s973);
                }
                fillRect(k973, l973, m973, n973) {
                    this.rect(k973, l973, m973, n973), this.fill();
                }
                clear() {
                    this.impl && (this.impl.clear(), this._isDrawing = !1, this._graphicsNativeProxy.clear(), this.markForUpdateRenderData());
                }
                close() {
                    this.impl && this.impl.close();
                }
                stroke() {
                    this._assembler || this._flushAssembler(), this._isDrawing = !0, this._isNeedUploadData = !0, this._assembler.stroke(this);
                }
                fill() {
                    this._assembler || this._flushAssembler(), this._isDrawing = !0, this._isNeedUploadData = !0, this._assembler.fill(this);
                }
                _updateMtlForGraphics() {
                    let j973;
                    this._customMaterial ? j973 = this.getMaterialInstance(0) : (j973 = r185.get("ui-graphics-material"), this.setSharedMaterial(j973, 0), j973 = this.getMaterialInstance(0), j973.recompileShaders({
                        USE_LOCAL: !0
                    }));
                }
                activeSubModel(e973) {
                    if (this.model) {
                        if (this.model.subModels.length <= e973) {
                            const f973 = b162.gfxDevice, g973 = f973.createBuffer(new x159(w157.VERTEX | w157.TRANSFER_DST, z157.DEVICE, 65535 * w195, w195)), h973 = f973.createBuffer(new x159(w157.INDEX | w157.TRANSFER_DST, z157.DEVICE, 131070 * Uint16Array.BYTES_PER_ELEMENT, Uint16Array.BYTES_PER_ELEMENT)), i973 = new r186([g973], u195, t158.TRIANGLE_LIST, h973);
                            i973.subMeshIdx = 0, this.model.initSubModel(e973, i973, this.getMaterialInstance(0)), this._graphicsUseSubMeshes.push(i973);
                        }
                    }
                    else
                        y125(4500, this.node.name);
                }
                _uploadData() {
                    const w972 = this.impl;
                    if (!w972)
                        return;
                    const x972 = w972 && w972.getRenderDataList();
                    if (x972.length <= 0 || !this.model)
                        return;
                    const y972 = this.model.subModels;
                    for (let z972 = 0; z972 < x972.length; z972++) {
                        const a973 = x972[z972], b973 = y972[z972].inputAssembler;
                        if (a973.lastFilledVertex === a973.vertexStart)
                            continue;
                        const c973 = new Float32Array(a973.vData.buffer, 0, a973.vertexStart * v195);
                        b973.vertexBuffers[0].update(c973), b973.vertexCount = a973.vertexStart;
                        const d973 = new Uint16Array(a973.iData.buffer, 0, a973.indexStart);
                        b973.indexBuffer.update(d973), b973.indexCount = a973.indexStart, a973.lastFilledVertex = a973.vertexStart, a973.lastFilledIndex = a973.indexStart;
                    }
                    this._isNeedUploadData = !1;
                }
                _render(s972) {
                    if (this._isNeedUploadData) {
                        if (this.impl) {
                            const t972 = this.impl.getRenderDataList(), u972 = this.model.subModels.length;
                            if (t972.length > u972)
                                for (let v972 = u972; v972 < t972.length; v972++)
                                    this.activeSubModel(v972);
                        }
                        this._uploadData();
                    }
                    s972.commitModel(this, this.model, this.getMaterialInstance(0));
                }
                _flushAssembler() {
                    const r972 = t.Assembler.getAssembler(this);
                    this._assembler !== r972 && (this._assembler = r972);
                }
                _canRender() {
                    return !!super._canRender() && this._isDrawing;
                }
                updateRenderer() {
                    if (super.updateRenderer(), this._isNeedUploadData) {
                        if (this.impl) {
                            const p972 = this.impl.getRenderDataList();
                            for (let q972 = 0; q972 < p972.length; q972++)
                                p972[q972].setRenderDrawInfoAttributes();
                            this._graphicsNativeProxy.activeSubModels();
                        }
                        this._graphicsNativeProxy.uploadData(), this._isNeedUploadData = !1;
                    }
                }
                createRenderEntity() {
                    return new l189(e189.DYNAMIC);
                }
            }).LineJoin = u194, t195.LineCap = t194, i125((m195 = t195).prototype, "lineJoin", [j195], Object.getOwnPropertyDescriptor(m195.prototype, "lineJoin"), m195.prototype), i125(m195.prototype, "lineCap", [k195], Object.getOwnPropertyDescriptor(m195.prototype, "lineCap"), m195.prototype), i125(m195.prototype, "color", [h152], Object.getOwnPropertyDescriptor(m195.prototype, "color"), m195.prototype), n195 = p130(m195.prototype, "_lineWidth", [j151], function () {
                return 1;
            }), o195 = p130(m195.prototype, "_strokeColor", [j151], function () {
                return a147.BLACK.clone();
            }), p195 = p130(m195.prototype, "_lineJoin", [j151], function () {
                return u194.MITER;
            }), q195 = p130(m195.prototype, "_lineCap", [j151], function () {
                return t194.BUTT;
            }), r195 = p130(m195.prototype, "_fillColor", [j151], function () {
                return a147.WHITE.clone();
            }), s195 = p130(m195.prototype, "_miterLimit", [j151], function () {
                return 10;
            }), l195 = m195)) || l195) || l195);
            var y195, z195, a196, b196, c196, d196, e196, f196, g196, h196, i196, j196, k196, l196, m196, n196, o196, p196, q196, r196;
            let s196;
            var t196, u196, v196;
            g125({
                Graphics: x195,
                GraphicsComponent: x195
            }), s143.Graphics = x195, function (o972) {
                o972[o972.SIMPLE = 0] = "SIMPLE", o972[o972.SLICED = 1] = "SLICED", o972[o972.TILED = 2] = "TILED", o972[o972.FILLED = 3] = "FILLED";
            }(s196 || (s196 = {})), s127(s196), function (n972) {
                n972[n972.HORIZONTAL = 0] = "HORIZONTAL", n972[n972.VERTICAL = 1] = "VERTICAL", n972[n972.RADIAL = 2] = "RADIAL";
            }(t196 || (t196 = {})), s127(t196), function (m972) {
                m972[m972.CUSTOM = 0] = "CUSTOM", m972[m972.TRIMMED = 1] = "TRIMMED", m972[m972.RAW = 2] = "RAW";
            }(u196 || (u196 = {})), s127(u196), function (l972) {
                l972.SPRITE_FRAME_CHANGED = "spriteframe-changed";
            }(v196 || (v196 = {}));
            let w196 = (y195 = e151("cc.Sprite"), z195 = g151(110), a196 = a131(w186), b196 = a131(q186), c196 = a131(s196), d196 = a131(t196), e196 = a131(u196), y195(f196 = z195(((r196 = class t extends h191 {
                constructor(...k972) {
                    super(...k972), this._spriteFrame = h196 && h196(), this._type = i196 && i196(), this._fillType = j196 && j196(), this._sizeMode = k196 && k196(), this._fillCenter = l196 && l196(), this._fillStart = m196 && m196(), this._fillRange = n196 && n196(), this._isTrimmedMode = o196 && o196(), this._useGrayscale = p196 && p196(), this._atlas = q196 && q196();
                }
                get spriteAtlas() {
                    return this._atlas;
                }
                set spriteAtlas(j972) {
                    this._atlas !== j972 && (this._atlas = j972);
                }
                get spriteFrame() {
                    return this._spriteFrame;
                }
                set spriteFrame(h972) {
                    if (this._spriteFrame === h972)
                        return;
                    const i972 = this._spriteFrame;
                    this._spriteFrame = h972, this.markForUpdateRenderData(), this._applySpriteFrame(i972);
                }
                get type() {
                    return this._type;
                }
                set type(g972) {
                    this._type !== g972 && (this._type = g972, this._flushAssembler());
                }
                get fillType() {
                    return this._fillType;
                }
                set fillType(f972) {
                    this._fillType !== f972 && (f972 === t196.RADIAL || this._fillType === t196.RADIAL ? this.destroyRenderData() : this.renderData && this.markForUpdateRenderData(!0)), this._fillType = f972, this._flushAssembler();
                }
                get fillCenter() {
                    return this._fillCenter;
                }
                set fillCenter(e972) {
                    this._fillCenter.x = e972.x, this._fillCenter.y = e972.y, this._type === s196.FILLED && this.renderData && this.markForUpdateRenderData();
                }
                get fillStart() {
                    return this._fillStart;
                }
                set fillStart(d972) {
                    this._fillStart = x128(d972, 0, 1), this._type === s196.FILLED && this.renderData && (this.markForUpdateRenderData(), this._updateUVs());
                }
                get fillRange() {
                    return this._fillRange;
                }
                set fillRange(c972) {
                    this._fillRange = x128(c972, -1, 1), this._type === s196.FILLED && this.renderData && (this.markForUpdateRenderData(), this._updateUVs());
                }
                get trim() {
                    return this._isTrimmedMode;
                }
                set trim(b972) {
                    this._isTrimmedMode !== b972 && (this._isTrimmedMode = b972, this._type === s196.SIMPLE && this.renderData && this.markForUpdateRenderData(!0));
                }
                get grayscale() {
                    return this._useGrayscale;
                }
                set grayscale(a972) {
                    this._useGrayscale !== a972 && (this._useGrayscale = a972, this.changeMaterialForDefine(), this.updateMaterial());
                }
                get sizeMode() {
                    return this._sizeMode;
                }
                set sizeMode(z971) {
                    this._sizeMode !== z971 && (this._sizeMode = z971, z971 !== u196.CUSTOM && this._applySpriteSize());
                }
                __preload() {
                    this.changeMaterialForDefine(), super.__preload();
                }
                onEnable() {
                    super.onEnable(), this._activateMaterial();
                    const y971 = this._spriteFrame;
                    y971 && (this._updateUVs(), this._type === s196.SLICED && y971.on(q186.EVENT_UV_UPDATED, this._updateUVs, this));
                }
                onDisable() {
                    super.onDisable(), this._spriteFrame && this._type === s196.SLICED && this._spriteFrame.off(q186.EVENT_UV_UPDATED, this._updateUVs, this);
                }
                onDestroy() {
                    super.onDestroy();
                }
                changeSpriteFrameFromAtlas(w971) {
                    if (!this._atlas)
                        return void console.warn("SpriteAtlas is null.");
                    const x971 = this._atlas.getSpriteFrame(w971);
                    this.spriteFrame = x971;
                }
                changeMaterialForDefine() {
                    let s971;
                    const t971 = this._instanceMaterialType;
                    this._spriteFrame && (s971 = this._spriteFrame.texture);
                    let u971 = !1;
                    if (s971 instanceof y165) {
                        const v971 = s971.getPixelFormat();
                        u971 = v971 === u163.RGBA_ETC1 || v971 === u163.RGB_A_PVRTC_4BPPV1 || v971 === u163.RGB_A_PVRTC_2BPPV1;
                    }
                    u971 && this.grayscale ? this._instanceMaterialType = g191.USE_ALPHA_SEPARATED_AND_GRAY : u971 ? this._instanceMaterialType = g191.USE_ALPHA_SEPARATED : this.grayscale ? this._instanceMaterialType = g191.GRAYSCALE : this._instanceMaterialType = g191.ADD_COLOR_AND_TEXTURE, t971 !== this._instanceMaterialType && this.updateMaterial();
                }
                _updateBuiltinMaterial() {
                    let p971 = super._updateBuiltinMaterial();
                    if (this.spriteFrame && this.spriteFrame.texture instanceof r172) {
                        const q971 = {
                            SAMPLE_FROM_RT: !0,
                            ...p971.passes[0].defines
                        }, r971 = new c178();
                        r971.initialize({
                            effectAsset: p971.effectAsset,
                            defines: q971
                        }), p971 = r971;
                    }
                    return p971;
                }
                _render(o971) {
                    o971.commitComp(this, this.renderData, this._spriteFrame, this._assembler, null);
                }
                _canRender() {
                    if (!super._canRender())
                        return !1;
                    const n971 = this._spriteFrame;
                    return !(!n971 || !n971.texture);
                }
                _flushAssembler() {
                    const m971 = t.Assembler.getAssembler(this);
                    this._assembler !== m971 && (this.destroyRenderData(), this._assembler = m971), this._renderData || this._assembler && this._assembler.createData && (this._renderData = this._assembler.createData(this), this._renderData.material = this.getRenderMaterial(0), this.markForUpdateRenderData(), this.spriteFrame && this._assembler.updateUVs(this), this._updateColor()), this._spriteFrame && (this._type === s196.SLICED ? this._spriteFrame.on(q186.EVENT_UV_UPDATED, this._updateUVs, this) : this._spriteFrame.off(q186.EVENT_UV_UPDATED, this._updateUVs, this));
                }
                _applySpriteSize() {
                    if (this._spriteFrame)
                        if (u196.RAW === this._sizeMode) {
                            const l971 = this._spriteFrame.originalSize;
                            this.node._uiProps.uiTransformComp.setContentSize(l971);
                        }
                        else if (u196.TRIMMED === this._sizeMode) {
                            const k971 = this._spriteFrame.rect;
                            this.node._uiProps.uiTransformComp.setContentSize(k971.width, k971.height);
                        }
                }
                _resized() { }
                _activateMaterial() {
                    const i971 = this._spriteFrame, j971 = this.getRenderMaterial(0);
                    i971 && j971 && this.markForUpdateRenderData(), this.renderData && (this.renderData.material = j971);
                }
                _updateUVs() {
                    this._assembler && this._assembler.updateUVs(this);
                }
                _applySpriteFrame(f971) {
                    const g971 = this._spriteFrame;
                    f971 && this._type === s196.SLICED && f971.off(q186.EVENT_UV_UPDATED, this._updateUVs, this);
                    let h971 = !1;
                    g971 && (f971 && f971.texture === g971.texture || (h971 = !0), h971 && (this.renderData && (this.renderData.textureDirty = !0), this.changeMaterialForDefine()), this._applySpriteSize(), this._type === s196.SLICED && g971.on(q186.EVENT_UV_UPDATED, this._updateUVs, this));
                }
            }).FillType = t196, r196.Type = s196, r196.SizeMode = u196, r196.EventType = v196, i125((g196 = r196).prototype, "spriteAtlas", [a196], Object.getOwnPropertyDescriptor(g196.prototype, "spriteAtlas"), g196.prototype), i125(g196.prototype, "spriteFrame", [b196], Object.getOwnPropertyDescriptor(g196.prototype, "spriteFrame"), g196.prototype), i125(g196.prototype, "type", [c196], Object.getOwnPropertyDescriptor(g196.prototype, "type"), g196.prototype), i125(g196.prototype, "fillType", [d196], Object.getOwnPropertyDescriptor(g196.prototype, "fillType"), g196.prototype), i125(g196.prototype, "sizeMode", [e196], Object.getOwnPropertyDescriptor(g196.prototype, "sizeMode"), g196.prototype), h196 = p130(g196.prototype, "_spriteFrame", [j151], function () {
                return null;
            }), i196 = p130(g196.prototype, "_type", [j151], function () {
                return s196.SIMPLE;
            }), j196 = p130(g196.prototype, "_fillType", [j151], function () {
                return t196.HORIZONTAL;
            }), k196 = p130(g196.prototype, "_sizeMode", [j151], function () {
                return u196.TRIMMED;
            }), l196 = p130(g196.prototype, "_fillCenter", [j151], function () {
                return new s147(0, 0);
            }), m196 = p130(g196.prototype, "_fillStart", [j151], function () {
                return 0;
            }), n196 = p130(g196.prototype, "_fillRange", [j151], function () {
                return 0;
            }), o196 = p130(g196.prototype, "_isTrimmedMode", [j151], function () {
                return !0;
            }), p196 = p130(g196.prototype, "_useGrayscale", [j151], function () {
                return !1;
            }), q196 = p130(g196.prototype, "_atlas", [j151], function () {
                return null;
            }), f196 = g196)) || f196) || f196);
            var x196, y196, z196, a197, b197, c197, d197, e197, f197, g197;
            g125({
                Sprite: w196,
                SpriteComponent: w196
            }), s143.Sprite = w196;
            const h197 = new o147(), i197 = new s147(), j197 = new o147(), k197 = [];
            let l197;
            !function (e971) {
                e971[e971.GRAPHICS_RECT = 0] = "GRAPHICS_RECT", e971[e971.GRAPHICS_ELLIPSE = 1] = "GRAPHICS_ELLIPSE", e971[e971.GRAPHICS_STENCIL = 2] = "GRAPHICS_STENCIL", e971[e971.SPRITE_STENCIL = 3] = "SPRITE_STENCIL";
            }(l197 || (l197 = {})), s127(l197);
            let m197 = (x196 = e151("cc.Mask"), y196 = g151(110), z196 = a131(l197), x196(a197 = y196(((g197 = class extends a165 {
                constructor(...d971) {
                    super(...d971), this._type = c197 && c197(), this._inverted = d197 && d197(), this._segments = e197 && e197(), this._alphaThreshold = f197 && f197(), this._sprite = null, this._graphics = null, this._stencilStage = c189.DISABLED;
                }
                get type() {
                    return this._type;
                }
                set type(c971) {
                    this._type !== c971 && (this._type = c971, this._type !== l197.SPRITE_STENCIL ? (this._sprite && (this.node.removeComponent(w196), this._sprite._destroyImmediate(), this._sprite = null), this._changeRenderType(), this._updateGraphics(), this.subComp.renderEntity.setMaskMode(this._inverted ? i189.MASK_INVERTED : i189.MASK)) : (this._graphics && (this._graphics.clear(), this.node.removeComponent(x195), this._graphics._destroyImmediate(), this._graphics = null), this._changeRenderType(), this.subComp.renderEntity.setMaskMode(this._inverted ? i189.MASK_INVERTED : i189.MASK)));
                }
                get inverted() {
                    return this._inverted;
                }
                set inverted(b971) {
                    this._inverted = b971, this.subComp.stencilStage = this.inverted ? c189.ENTER_LEVEL_INVERTED : c189.ENTER_LEVEL, this.subComp.renderEntity.setMaskMode(this._inverted ? i189.MASK_INVERTED : i189.MASK);
                }
                get segments() {
                    return this._segments;
                }
                set segments(a971) {
                    this._segments !== a971 && (this._segments = x128(a971, 3, 1e4), this._updateGraphics());
                }
                get spriteFrame() {
                    return this._sprite ? this._sprite.spriteFrame : null;
                }
                set spriteFrame(z970) {
                    this._sprite ? this._sprite.spriteFrame = z970 : r125("please change type to sprite_stencil first");
                }
                get alphaThreshold() {
                    return this._alphaThreshold;
                }
                set alphaThreshold(y970) {
                    this._alphaThreshold !== y970 && (this._alphaThreshold = y970, this.type === l197.SPRITE_STENCIL && this._sprite) && this._sprite.getMaterialInstance(0).setProperty("alphaThreshold", this._alphaThreshold);
                }
                get subComp() {
                    return this._graphics || this._sprite;
                }
                onLoad() {
                    this._changeRenderType(), this.subComp && this.subComp.renderEntity.setMaskMode(this._inverted ? i189.MASK_INVERTED : i189.MASK);
                }
                onEnable() {
                    this._changeRenderType(), this._updateGraphics(), this._enableRender(), this.node.on(z174.ANCHOR_CHANGED, this._nodeStateChange, this), this.node.on(z174.SIZE_CHANGED, this._nodeStateChange, this);
                }
                onRestore() {
                    this._changeRenderType(), this._updateGraphics();
                }
                onDisable() {
                    this._disableRender(), this.node.off(z174.ANCHOR_CHANGED, this._nodeStateChange, this), this.node.off(z174.SIZE_CHANGED, this._nodeStateChange, this);
                }
                onDestroy() {
                    this._removeMaskNode();
                }
                isHit(m970) {
                    const n970 = this.node._uiProps.uiTransformComp, o970 = n970.contentSize, p970 = o970.width, q970 = o970.height, r970 = i197;
                    this.node.getWorldMatrix(h197), o147.invert(j197, h197), s147.transformMat4(r970, m970, j197);
                    const s970 = n970.anchorPoint;
                    r970.x += s970.x * p970, r970.y += s970.y * q970;
                    let t970 = !1;
                    if (this.type === l197.GRAPHICS_RECT || this.type === l197.GRAPHICS_STENCIL || this.type === l197.SPRITE_STENCIL)
                        t970 = r970.x >= 0 && r970.y >= 0 && r970.x <= p970 && r970.y <= q970;
                    else if (this.type === l197.GRAPHICS_ELLIPSE) {
                        const u970 = p970 / 2, v970 = q970 / 2, w970 = r970.x - .5 * p970, x970 = r970.y - .5 * q970;
                        t970 = w970 * w970 / (u970 * u970) + x970 * x970 / (v970 * v970) < 1;
                    }
                    return this._inverted && (t970 = !t970), t970;
                }
                _nodeStateChange(l970) {
                    this._updateGraphics();
                }
                _changeRenderType() {
                    this._type !== l197.SPRITE_STENCIL ? this._createGraphics() : this._createSprite();
                }
                _createSprite() {
                    if (!this._sprite) {
                        let j970 = this._sprite = this.node.getComponent(w196);
                        if (!j970) {
                            const k970 = this.node;
                            j970 = this._sprite = k970.addComponent(w196);
                        }
                    }
                    this._sprite.stencilStage = this.inverted ? c189.ENTER_LEVEL_INVERTED : c189.ENTER_LEVEL, this._sprite.updateMaterial();
                }
                _createGraphics() {
                    if (!this._graphics) {
                        let g970 = this._graphics = this.node.getComponent(x195);
                        if (!g970) {
                            const i970 = this.node;
                            g970 = this._graphics = i970.addComponent(x195);
                        }
                        g970.lineWidth = 1;
                        const h970 = a147.WHITE.clone();
                        h970.a = 0, g970.fillColor = h970;
                    }
                    this._graphics.stencilStage = this.inverted ? c189.ENTER_LEVEL_INVERTED : c189.ENTER_LEVEL;
                }
                _updateGraphics() {
                    if (!this._graphics || this._type !== l197.GRAPHICS_RECT && this._type !== l197.GRAPHICS_ELLIPSE)
                        return;
                    const p969 = this.node._uiProps.uiTransformComp, q969 = this._graphics;
                    q969.clear();
                    const r969 = p969.contentSize, s969 = r969.width, t969 = r969.height, u969 = p969.anchorPoint, v969 = -s969 * u969.x, w969 = -t969 * u969.y;
                    if (this._type === l197.GRAPHICS_RECT)
                        q969.rect(v969, w969, s969, t969);
                    else if (this._type === l197.GRAPHICS_ELLIPSE) {
                        const x969 = function (b970, c970, d970) {
                            k197.length = 0;
                            const e970 = 2 * Math.PI / d970;
                            for (let f970 = 0; f970 < d970; ++f970)
                                k197.push(new w146(c970.x * Math.cos(e970 * f970) + b970.x, c970.y * Math.sin(e970 * f970) + b970.y, 0));
                            return k197;
                        }(new w146(v969 + s969 / 2, w969 + t969 / 2, 0), new w146(s969 / 2, t969 / 2, 0), this._segments);
                        for (let z969 = 0; z969 < x969.length; ++z969) {
                            const a970 = x969[z969];
                            0 === z969 ? q969.moveTo(a970.x, a970.y) : q969.lineTo(a970.x, a970.y);
                        }
                        q969.close();
                    }
                    q969.fill();
                }
                _enableRender() {
                    this.subComp && (this.subComp.enabled = !0);
                }
                _disableRender() {
                    this.subComp && (this.subComp.stencilStage = c189.DISABLED, this.subComp.updateMaterial(), this.node.activeInHierarchy && (this.subComp.enabled = !1));
                }
                _removeMaskNode() {
                    this._sprite && (this._sprite = null), this._graphics && (this._graphics = null);
                }
                get customMaterial() {
                    return y125(9007), this.subComp ? this.subComp.customMaterial : null;
                }
                set customMaterial(o969) {
                    y125(9007), this.subComp && (this.subComp.customMaterial = o969);
                }
                get color() {
                    return y125(9007), this.subComp ? this.subComp.color : null;
                }
                set color(n969) {
                    y125(9007), this.subComp && n969 && (this.subComp.color = n969);
                }
                markForUpdateRenderData(m969 = !0) {
                    y125(9007), this.subComp && this.subComp.markForUpdateRenderData(m969);
                }
                requestRenderData(l969) {
                    y125(9007);
                }
                destroyRenderData() {
                    y125(9007);
                }
                updateRenderer() {
                    y125(9007), this.subComp && this.subComp.updateRenderer();
                }
                fillBuffers(k969) {
                    y125(9007);
                }
                postUpdateAssembler(j969) {
                    y125(9007);
                }
                setNodeDirty() {
                    y125(9007), this.subComp && this.subComp.setNodeDirty();
                }
                setTextureDirty() {
                    y125(9007), this.subComp && this.subComp.setTextureDirty();
                }
                get sharedMaterial() {
                    return y125(9007), this.subComp ? this.subComp.sharedMaterial : null;
                }
                get sharedMaterials() {
                    return y125(9007), this.subComp ? this.subComp.sharedMaterials : null;
                }
                set sharedMaterials(i969) {
                    y125(9007), this.subComp && i969 && (this.subComp.sharedMaterials = i969);
                }
                get material() {
                    return y125(9007), this.subComp ? this.subComp.material : null;
                }
                set material(h969) {
                    y125(9007), this.subComp && (this.subComp.material = h969);
                }
                get materials() {
                    return y125(9007), this.subComp ? this.subComp.materials : [null];
                }
                set materials(g969) {
                    y125(9007), this.subComp && (this.subComp.materials = g969);
                }
                getMaterial(f969) {
                    return y125(9007), this.subComp ? this.subComp.getSharedMaterial(f969) : null;
                }
                setMaterial(d969, e969) {
                    y125(9007), this.subComp && this.subComp.setMaterial(d969, e969);
                }
                getMaterialInstance(c969) {
                    return y125(9007), this.subComp ? this.subComp.getMaterialInstance(c969) : null;
                }
                setMaterialInstance(a969, b969) {
                    y125(9007), this.subComp && this.subComp.setMaterialInstance(a969, b969);
                }
                getRenderMaterial(z968) {
                    return y125(9007), this.subComp ? this.subComp.getRenderMaterial(z968) : null;
                }
            }).Type = l197, i125((b197 = g197).prototype, "type", [z196], Object.getOwnPropertyDescriptor(b197.prototype, "type"), b197.prototype), c197 = p130(b197.prototype, "_type", [j151], function () {
                return l197.GRAPHICS_RECT;
            }), d197 = p130(b197.prototype, "_inverted", [j151], function () {
                return !1;
            }), e197 = p130(b197.prototype, "_segments", [j151], function () {
                return 64;
            }), f197 = p130(b197.prototype, "_alphaThreshold", [j151], function () {
                return .1;
            }), a197 = b197)) || a197) || a197);
            g125({
                Mask: m197,
                MaskComponent: m197
            }), u175._maskComp = m197, s143.Mask = m197;
            const n197 = /^(click)(\s)*=|(param)(\s)*=/, o197 = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            class p197 {
                constructor() {
                    this._specialSymbolArray = [], this._stack = [], this._resultObjectArray = [], this._specialSymbolArray.push([/&lt;/g, "<"]), this._specialSymbolArray.push([/&gt;/g, ">"]), this._specialSymbolArray.push([/&amp;/g, "&"]), this._specialSymbolArray.push([/&quot;/g, '"']), this._specialSymbolArray.push([/&apos;/g, "'"]);
                }
                parse(s968) {
                    this._resultObjectArray.length = 0, this._stack.length = 0;
                    let t968 = 0;
                    const u968 = s968.length;
                    for (; t968 < u968;) {
                        let v968 = s968.indexOf(">", t968), w968 = -1;
                        if (v968 >= 0 && (w968 = s968.lastIndexOf("<", v968), w968 < t968 - 1 && (w968 = s968.indexOf("<", v968 + 1), v968 = s968.indexOf(">", w968 + 1))), w968 < 0)
                            this._stack.pop(), this._processResult(s968.substring(t968)), t968 = u968;
                        else {
                            let x968 = s968.substring(t968, w968);
                            const y968 = s968.substring(w968 + 1, v968);
                            "" === y968 && (x968 = s968.substring(t968, v968 + 1)), this._processResult(x968), -1 === v968 ? v968 = w968 : "/" === s968.charAt(w968 + 1) ? this._stack.pop() : this._addToStack(y968), t968 = v968 + 1;
                        }
                    }
                    return this._resultObjectArray;
                }
                _attributeToObject(e968) {
                    e968 = e968.trim();
                    const f968 = {};
                    let g968 = /^(color|size)(\s)*=/.exec(e968), h968 = "", i968 = 0, j968 = "";
                    if (g968) {
                        if (h968 = g968[0], "" === (e968 = e968.substring(h968.length).trim()))
                            return f968;
                        switch ((i968 = e968.indexOf(" "), h968[0])) {
                            case "c":
                                f968.color = i968 > -1 ? e968.substring(0, i968).trim() : e968;
                                break;
                            case "s":
                                f968.size = parseInt(e968);
                        }
                        return i968 > -1 && (j968 = e968.substring(i968 + 1).trim(), f968.event = this._processEventHandler(j968)), f968;
                    }
                    if (g968 = /^(br(\s)*\/)/.exec(e968), g968 && g968[0].length > 0 && (h968 = g968[0].trim(), h968.startsWith("br") && "/" === h968[h968.length - 1]))
                        return f968.isNewLine = !0, this._resultObjectArray.push({
                            text: "",
                            style: {
                                isNewLine: !0
                            }
                        }), f968;
                    g968 = /^(img(\s)*src(\s)*=[^>]+\/)/.exec(e968);
                    let k968 = "", l968 = -1;
                    if (g968 && g968[0].length > 0 && (h968 = g968[0].trim(), h968.startsWith("img") && "/" === h968[h968.length - 1])) {
                        let p968;
                        g968 = o197.exec(e968);
                        let q968 = !1;
                        for (; g968;) {
                            h968 = (e968 = e968.substring(e968.indexOf(g968[0]))).substr(0, g968[0].length);
                            const r968 = h968.length;
                            if (h968 = h968.replace(/[^a-zA-Z]/g, "").trim(), h968 = h968.toLowerCase(), k968 = e968.substring(r968).trim(), l968 = "src" === h968 ? this.getRightQuotationIndex(k968) : -1, i968 = k968.indexOf(" ", l968 + 1 >= k968.length ? -1 : l968 + 1), p968 = i968 > -1 ? k968.substr(0, i968) : k968, e968 = k968.substring(i968).trim(), p968.endsWith("/") && (p968 = p968.slice(0, -1)), "src" === h968) {
                                switch (p968.charCodeAt(0)) {
                                    case 34:
                                    case 39:
                                        q968 = !0, p968 = p968.slice(1, -1);
                                }
                                f968.isImage = !0, f968.src = p968;
                            }
                            else if ("height" === h968)
                                f968.imageHeight = parseInt(p968);
                            else if ("width" === h968)
                                f968.imageWidth = parseInt(p968);
                            else if ("align" === h968) {
                                switch (p968.charCodeAt(0)) {
                                    case 34:
                                    case 39:
                                        p968 = p968.slice(1, -1);
                                }
                                f968.imageAlign = p968.toLowerCase();
                            }
                            else
                                "offset" === h968 ? f968.imageOffset = p968 : "click" === h968 && (f968.event = this._processEventHandler(`${h968}=${p968}`));
                            f968.event && "param" === h968 && (f968.event[h968] = p968.replace(/^"|"$/g, "")), g968 = o197.exec(e968);
                        }
                        return q968 && f968.isImage && this._resultObjectArray.push({
                            text: "",
                            style: f968
                        }), {};
                    }
                    if (g968 = /^(outline(\s)*[^>]*)/.exec(e968), g968) {
                        const m968 = {
                            color: "#ffffff",
                            width: 1
                        };
                        if (e968 = g968[0].substring("outline".length).trim()) {
                            const n968 = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
                            let o968;
                            for (g968 = n968.exec(e968); g968;)
                                h968 = (e968 = e968.substring(e968.indexOf(g968[0]))).substr(0, g968[0].length), k968 = e968.substring(h968.length).trim(), i968 = k968.indexOf(" "), o968 = i968 > -1 ? k968.substr(0, i968) : k968, h968 = h968.replace(/[^a-zA-Z]/g, "").trim(), h968 = h968.toLowerCase(), e968 = k968.substring(i968).trim(), "click" === h968 ? f968.event = this._processEventHandler(`${h968}=${o968}`) : "color" === h968 ? m968.color = o968 : "width" === h968 && (m968.width = parseInt(o968)), f968.event && "param" === h968 && (f968.event[h968] = o968.replace(/^"|"$/g, "")), g968 = n968.exec(e968);
                        }
                        f968.outline = m968;
                    }
                    if (g968 = /^(on|u|b|i)(\s)*/.exec(e968), g968 && g968[0].length > 0) {
                        switch ((h968 = g968[0], e968 = e968.substring(h968.length).trim(), h968[0])) {
                            case "u":
                                f968.underline = !0;
                                break;
                            case "i":
                                f968.italic = !0;
                                break;
                            case "b":
                                f968.bold = !0;
                        }
                        if ("" === e968)
                            return f968;
                        f968.event = this._processEventHandler(e968);
                    }
                    return f968;
                }
                getRightQuotationIndex(y967) {
                    let z967 = -1, a968 = -1;
                    const b968 = y967.indexOf("'"), c968 = y967.indexOf('"'), d968 = c968 > -1 && (c968 < b968 || -1 === b968);
                    return b968 > -1 && (b968 < c968 || -1 === c968) ? (z967 = b968, a968 = y967.indexOf("'", z967 + 1 >= y967.length ? -1 : z967 + 1)) : d968 && (z967 = c968, a968 = y967.indexOf('"', z967 + 1 >= y967.length ? -1 : z967 + 1)), a968;
                }
                _processEventHandler(q967) {
                    const r967 = {};
                    let s967 = 0, t967 = !1, u967 = n197.exec(q967);
                    for (; u967;) {
                        let v967 = u967[0], w967 = "";
                        if (t967 = !1, '"' === (q967 = q967.substring(v967.length).trim()).charAt(0))
                            s967 = q967.indexOf('"', 1), s967 > -1 && (w967 = q967.substring(1, s967).trim(), t967 = !0), s967++;
                        else if ("'" === q967.charAt(0))
                            s967 = q967.indexOf("'", 1), s967 > -1 && (w967 = q967.substring(1, s967).trim(), t967 = !0), s967++;
                        else {
                            const x967 = /(\S)+/.exec(q967);
                            w967 = x967 ? x967[0] : "", s967 = w967.length;
                        }
                        t967 && (v967 = v967.substring(0, v967.length - 1).trim(), r967[v967] = w967), q967 = q967.substring(s967).trim(), u967 = n197.exec(q967);
                    }
                    return r967;
                }
                _addToStack(m967) {
                    const n967 = this._attributeToObject(m967);
                    if (0 === this._stack.length)
                        this._stack.push(n967);
                    else {
                        if (n967.isNewLine || n967.isImage)
                            return;
                        const o967 = this._stack[this._stack.length - 1];
                        for (const p967 in o967)
                            n967[p967] || (n967[p967] = o967[p967]);
                        this._stack.push(n967);
                    }
                }
                _processResult(l967) {
                    0 !== l967.length && (l967 = this._escapeSpecialSymbol(l967), this._stack.length > 0 ? this._resultObjectArray.push({
                        text: l967,
                        style: this._stack[this._stack.length - 1]
                    }) : this._resultObjectArray.push({
                        text: l967
                    }));
                }
                _escapeSpecialSymbol(h967) {
                    for (const i967 of this._specialSymbolArray) {
                        const j967 = i967[0], k967 = i967[1];
                        h967 = h967.replace(j967, k967);
                    }
                    return h967;
                }
            }
            var q197;
            g125("HtmlTextParser", p197);
            let r197 = e151("cc.LabelOutline")(q197 = g151(110)(q197 = f151(z192)(q197 = class extends a165 {
                get color() {
                    return this.node.getComponent(z192).outlineColor;
                }
                set color(g967) {
                    this.node.getComponent(z192).outlineColor = g967;
                }
                get width() {
                    return this.node.getComponent(z192).outlineWidth;
                }
                set width(f967) {
                    this.node.getComponent(z192).outlineWidth = f967;
                }
                onEnable() {
                    this.node.getComponent(z192).enableOutline = !0;
                }
                onDisable() {
                    this.node.getComponent(z192).enableOutline = !1;
                }
            }) || q197) || q197) || q197;
            var s197, t197, u197, v197, w197, x197;
            g125({
                LabelOutline: r197,
                LabelOutlineComponent: r197
            }), s143.LabelOutline = r197, e126({
                RenderComponent: {
                    newName: "UIRenderer",
                    since: "1.2.0",
                    removed: !0
                },
                UITransformComponent: {
                    newName: "UITransform",
                    since: "1.2.0",
                    removed: !1
                },
                CanvasComponent: {
                    newName: "Canvas",
                    since: "1.2.0",
                    removed: !1
                }
            }), e126({
                UIRenderable: {
                    newName: "UIRenderer",
                    since: "3.0.0",
                    removed: !0
                }
            }), e126({
                Renderable2D: {
                    newName: "UIRenderer",
                    since: "3.6.0",
                    removed: !1
                }
            });
            let y197 = e151("cc.PostProcess")(s197 = h151(((x197 = class t extends a165 {
                constructor(...e967) {
                    super(...e967), this.global = u197 && u197(), this._shadingScale = v197 && v197(), this.enableShadingScaleInEditor = w197 && w197(), this.settings = new Map();
                }
                get shadingScale() {
                    return this._shadingScale;
                }
                set shadingScale(d967) {
                    this._shadingScale = d967;
                }
                addSetting(c967) {
                    this.settings.set(c967.constructor, c967);
                }
                removeSetting(b967) {
                    this.settings.delete(b967.constructor);
                }
                getSetting(a967) {
                    return this.settings.get(a967);
                }
                onEnable() {
                    t.all.push(this);
                }
                onDisable() {
                    const z966 = t.all.indexOf(this);
                    -1 !== z966 && t.all.splice(z966, 1);
                }
            }).all = [], u197 = p130((t197 = x197).prototype, "global", [u130, j151], function () {
                return !0;
            }), v197 = p130(t197.prototype, "_shadingScale", [j151], function () {
                return 1;
            }), i125(t197.prototype, "shadingScale", [u130], Object.getOwnPropertyDescriptor(t197.prototype, "shadingScale"), t197.prototype), w197 = p130(t197.prototype, "enableShadingScaleInEditor", [u130, j151], function () {
                return !1;
            }), s197 = t197)) || s197) || s197;
            var z197, a198, b198, c198, d198, e198, f198, g198, h198, i198, j198, k198, l198, m198, n198, o198, p198, q198, r198, s198, t198, u198, v198, w198, x198, y198, z198, a199, b199, c199, d199, e199, f199, g199, h199;
            const i199 = new w146(), j199 = p127(g176), k199 = p127(f176), l199 = p127(h176), m199 = p127(j176), n199 = p127(i176), o199 = p127({
                SKYBOX: n176 | d159.DEPTH_STENCIL,
                SOLID_COLOR: d159.ALL,
                DEPTH_ONLY: d159.DEPTH_STENCIL,
                DONT_CLEAR: d159.NONE
            });
            let p199 = (z197 = e151("cc.Camera"), a198 = a131(w168.BitMask), b198 = a131(o199), c198 = a131(j199), d198 = a131(k199), e198 = a131(l199), f198 = a131(m199), g198 = a131(n199), h198 = a131(r172), i198 = a131(y197), z197(((h199 = class t extends a165 {
                constructor(...y966) {
                    super(...y966), this._projection = l198 && l198(), this._priority = m198 && m198(), this._fov = n198 && n198(), this._fovAxis = o198 && o198(), this._orthoHeight = p198 && p198(), this._near = q198 && q198(), this._far = r198 && r198(), this._color = s198 && s198(), this._depth = t198 && t198(), this._stencil = u198 && u198(), this._clearFlags = v198 && v198(), this._rect = w198 && w198(), this._aperture = x198 && x198(), this._shutter = y198 && y198(), this._iso = z198 && z198(), this._screenScale = a199 && a199(), this._visibility = b199 && b199(), this._targetTexture = c199 && c199(), this._postProcess = d199 && d199(), this._usePostProcess = e199 && e199(), this._camera = null, this._inEditorMode = !1, this._flows = void 0, this._cameraType = f199 && f199(), this._trackingType = g199 && g199();
                }
                get camera() {
                    return this._camera;
                }
                get priority() {
                    return this._priority;
                }
                set priority(x966) {
                    this._priority = x966, this._camera && (this._camera.priority = x966);
                }
                get visibility() {
                    return this._visibility;
                }
                set visibility(w966) {
                    this._visibility = w966, this._camera && (this._camera.visibility = w966);
                }
                get clearFlags() {
                    return this._clearFlags;
                }
                set clearFlags(v966) {
                    this._clearFlags = v966, this._camera && (this._camera.clearFlag = v966);
                }
                get clearColor() {
                    return this._color;
                }
                set clearColor(u966) {
                    this._color.set(u966), this._camera && (this._camera.clearColor = this._color);
                }
                get clearDepth() {
                    return this._depth;
                }
                set clearDepth(t966) {
                    this._depth = t966, this._camera && (this._camera.clearDepth = t966);
                }
                get clearStencil() {
                    return this._stencil;
                }
                set clearStencil(s966) {
                    this._stencil = s966, this._camera && (this._camera.clearStencil = s966);
                }
                get projection() {
                    return this._projection;
                }
                set projection(r966) {
                    this._projection = r966, this._camera && (this._camera.projectionType = r966);
                }
                get fovAxis() {
                    return this._fovAxis;
                }
                set fovAxis(q966) {
                    q966 !== this._fovAxis && (this._fovAxis = q966, this._camera && (this._camera.fovAxis = q966, q966 === f176.VERTICAL ? this.fov = this._fov * this._camera.aspect : this.fov = this._fov / this._camera.aspect));
                }
                get fov() {
                    return this._fov;
                }
                set fov(p966) {
                    this._fov = p966, this._camera && (this._camera.fov = a129(p966));
                }
                get orthoHeight() {
                    return this._orthoHeight;
                }
                set orthoHeight(o966) {
                    this._orthoHeight = o966, this._camera && (this._camera.orthoHeight = o966);
                }
                get near() {
                    return this._near;
                }
                set near(n966) {
                    this._near = n966, this._camera && (this._camera.nearClip = n966);
                }
                get far() {
                    return this._far;
                }
                set far(m966) {
                    this._far = m966, this._camera && (this._camera.farClip = m966);
                }
                get aperture() {
                    return this._aperture;
                }
                set aperture(l966) {
                    this._aperture = l966, this._camera && (this._camera.aperture = l966);
                }
                get shutter() {
                    return this._shutter;
                }
                set shutter(k966) {
                    this._shutter = k966, this._camera && (this._camera.shutter = k966);
                }
                get iso() {
                    return this._iso;
                }
                set iso(j966) {
                    this._iso = j966, this._camera && (this._camera.iso = j966);
                }
                get rect() {
                    return this._rect;
                }
                set rect(i966) {
                    this._rect = i966, this._camera && this._camera.setViewportInOrientedSpace(i966);
                }
                get targetTexture() {
                    return this._targetTexture;
                }
                set targetTexture(g966) {
                    if (this._targetTexture === g966)
                        return;
                    const h966 = this._targetTexture;
                    this._targetTexture = g966, this._checkTargetTextureEvent(h966), this._updateTargetTexture(), !g966 && this._camera && (this._camera.changeTargetWindow(null), this._camera.isWindowSize = !0), this.node.emit(t.TARGET_TEXTURE_CHANGE, this);
                }
                get usePostProcess() {
                    return this._usePostProcess;
                }
                set usePostProcess(f966) {
                    this._usePostProcess = f966, this._camera && (this._camera.usePostProcess = f966);
                }
                get postProcess() {
                    return this._postProcess;
                }
                set postProcess(e966) {
                    this._postProcess = e966, this._camera && (this._camera.postProcess = e966);
                }
                get screenScale() {
                    return this._screenScale;
                }
                set screenScale(d966) {
                    this._screenScale = d966, this._camera && (this._camera.screenScale = d966);
                }
                get inEditorMode() {
                    return this._inEditorMode;
                }
                set inEditorMode(c966) {
                    this._inEditorMode = c966, this._camera && this._camera.changeTargetWindow(c966 ? s143.director.root && s143.director.root.mainWindow : s143.director.root && s143.director.root.tempWindow);
                }
                get cameraType() {
                    return this._cameraType;
                }
                set cameraType(b966) {
                    this._cameraType !== b966 && (this._cameraType = b966, this.camera && (this.camera.cameraType = b966));
                }
                get trackingType() {
                    return this._trackingType;
                }
                set trackingType(a966) {
                    this._trackingType !== a966 && (this._trackingType = a966, this.camera && (this.camera.trackingType = a966));
                }
                onLoad() {
                    this._createCamera();
                }
                onEnable() {
                    this.node.hasChangedFlags |= b175.POSITION, this._camera && this._attachToScene();
                }
                onDisable() {
                    this._camera && this._detachFromScene();
                }
                onDestroy() {
                    this._camera && (this._camera.destroy(), this._camera = null), this._targetTexture && this._targetTexture.off("resize");
                }
                screenPointToRay(x965, y965, z965) {
                    return z965 || (z965 = n148.create()), this._camera && this._camera.screenPointToRay(z965, x965, y965), z965;
                }
                worldToScreen(v965, w965) {
                    return w965 || (w965 = new w146()), this._camera && this._camera.worldToScreen(w965, v965), w965;
                }
                screenToWorld(t965, u965) {
                    return u965 || (u965 = this.node.getWorldPosition()), this._camera && this._camera.screenToWorld(u965, t965), u965;
                }
                convertToUINode(m965, n965, o965) {
                    if (o965 || (o965 = new w146()), !this._camera)
                        return o965;
                    this.worldToScreen(m965, i199);
                    const p965 = n965.getComponent("cc.UITransform"), q965 = s143.view.getVisibleSize(), r965 = i199.x - .5 * this._camera.width, s965 = i199.y - .5 * this._camera.height;
                    return i199.x = r965 / s143.view.getScaleX() + .5 * q965.width, i199.y = s965 / s143.view.getScaleY() + .5 * q965.height, p965 && p965.convertToNodeSpaceAR(i199, o965), o965;
                }
                _createCamera() {
                    this._camera || (this._camera = s143.director.root.createCamera(), this._camera.initialize({
                        name: this.node.name,
                        node: this.node,
                        projection: this._projection,
                        window: this._inEditorMode ? s143.director.root && s143.director.root.mainWindow : s143.director.root && s143.director.root.tempWindow,
                        priority: this._priority,
                        cameraType: this.cameraType,
                        trackingType: this.trackingType
                    }), this._camera.setViewportInOrientedSpace(this._rect), this._camera.fovAxis = this._fovAxis, this._camera.fov = a129(this._fov), this._camera.orthoHeight = this._orthoHeight, this._camera.nearClip = this._near, this._camera.farClip = this._far, this._camera.clearColor = this._color, this._camera.clearDepth = this._depth, this._camera.clearStencil = this._stencil, this._camera.clearFlag = this._clearFlags, this._camera.visibility = this._visibility, this._camera.aperture = this._aperture, this._camera.shutter = this._shutter, this._camera.iso = this._iso, this._camera.postProcess = this._postProcess, this._camera.usePostProcess = this._usePostProcess), this._updateTargetTexture();
                }
                _attachToScene() {
                    this.node.scene && this._camera && (this._camera && this._camera.scene && this._camera.scene.removeCamera(this._camera), this._getRenderScene().addCamera(this._camera));
                }
                _detachFromScene() {
                    this._camera && this._camera.scene && this._camera.scene.removeCamera(this._camera);
                }
                _checkTargetTextureEvent(j965) {
                    j965 && j965.off("resize"), this._targetTexture && this._targetTexture.on("resize", l965 => {
                        this._camera && this._camera.setFixedSize(l965.width, l965.height);
                    }, this);
                }
                _updateTargetTexture() {
                    if (this._camera && this._targetTexture) {
                        const i965 = this._targetTexture.window;
                        this._camera.changeTargetWindow(i965), this._camera.setFixedSize(i965.width, i965.height);
                    }
                }
            }).ProjectionType = j199, h199.FOVAxis = k199, h199.ClearFlag = o199, h199.Aperture = l199, h199.Shutter = m199, h199.ISO = n199, h199.TARGET_TEXTURE_CHANGE = "tex-change", l198 = p130((k198 = h199).prototype, "_projection", [j151], function () {
                return j199.PERSPECTIVE;
            }), m198 = p130(k198.prototype, "_priority", [j151], function () {
                return 0;
            }), n198 = p130(k198.prototype, "_fov", [j151], function () {
                return 45;
            }), o198 = p130(k198.prototype, "_fovAxis", [j151], function () {
                return k199.VERTICAL;
            }), p198 = p130(k198.prototype, "_orthoHeight", [j151], function () {
                return 10;
            }), q198 = p130(k198.prototype, "_near", [j151], function () {
                return 1;
            }), r198 = p130(k198.prototype, "_far", [j151], function () {
                return 1e3;
            }), s198 = p130(k198.prototype, "_color", [j151], function () {
                return new a147("#333333");
            }), t198 = p130(k198.prototype, "_depth", [j151], function () {
                return 1;
            }), u198 = p130(k198.prototype, "_stencil", [j151], function () {
                return 0;
            }), v198 = p130(k198.prototype, "_clearFlags", [j151], function () {
                return o199.SOLID_COLOR;
            }), w198 = p130(k198.prototype, "_rect", [j151], function () {
                return new y147(0, 0, 1, 1);
            }), x198 = p130(k198.prototype, "_aperture", [j151], function () {
                return l199.F16_0;
            }), y198 = p130(k198.prototype, "_shutter", [j151], function () {
                return m199.D125;
            }), z198 = p130(k198.prototype, "_iso", [j151], function () {
                return n199.ISO100;
            }), a199 = p130(k198.prototype, "_screenScale", [j151], function () {
                return 1;
            }), b199 = p130(k198.prototype, "_visibility", [j151], function () {
                return m172;
            }), c199 = p130(k198.prototype, "_targetTexture", [j151], function () {
                return null;
            }), d199 = p130(k198.prototype, "_postProcess", [j151], function () {
                return null;
            }), e199 = p130(k198.prototype, "_usePostProcess", [j151], function () {
                return !1;
            }), f199 = p130(k198.prototype, "_cameraType", [j151], function () {
                return k176.DEFAULT;
            }), g199 = p130(k198.prototype, "_trackingType", [j151], function () {
                return l176.NO_TRACKING;
            }), i125(k198.prototype, "visibility", [a198], Object.getOwnPropertyDescriptor(k198.prototype, "visibility"), k198.prototype), i125(k198.prototype, "clearFlags", [b198], Object.getOwnPropertyDescriptor(k198.prototype, "clearFlags"), k198.prototype), i125(k198.prototype, "projection", [c198], Object.getOwnPropertyDescriptor(k198.prototype, "projection"), k198.prototype), i125(k198.prototype, "fovAxis", [d198], Object.getOwnPropertyDescriptor(k198.prototype, "fovAxis"), k198.prototype), i125(k198.prototype, "aperture", [e198], Object.getOwnPropertyDescriptor(k198.prototype, "aperture"), k198.prototype), i125(k198.prototype, "shutter", [f198], Object.getOwnPropertyDescriptor(k198.prototype, "shutter"), k198.prototype), i125(k198.prototype, "iso", [g198], Object.getOwnPropertyDescriptor(k198.prototype, "iso"), k198.prototype), i125(k198.prototype, "targetTexture", [h198], Object.getOwnPropertyDescriptor(k198.prototype, "targetTexture"), k198.prototype), i125(k198.prototype, "usePostProcess", [u130], Object.getOwnPropertyDescriptor(k198.prototype, "usePostProcess"), k198.prototype), i125(k198.prototype, "postProcess", [i198], Object.getOwnPropertyDescriptor(k198.prototype, "postProcess"), k198.prototype), j198 = k198)) || j198);
            g125({
                Camera: p199,
                CameraComponent: p199
            }), s143.Camera = p199;
            const q199 = new x147(), r199 = {
                [s145.ORIENTATION_AUTO]: e157.AUTO,
                [s145.ORIENTATION_LANDSCAPE]: e157.LANDSCAPE,
                [s145.ORIENTATION_PORTRAIT]: e157.PORTRAIT
            };
            class s199 extends g133(a156) {
                constructor() {
                    super(), this._designResolutionSize = void 0, this._scaleX = void 0, this._scaleY = void 0, this._viewportRect = void 0, this._visibleRect = void 0, this._autoFullScreen = void 0, this._retinaEnabled = void 0, this._resizeCallback = void 0, this._resolutionPolicy = void 0, this._rpExactFit = void 0, this._rpShowAll = void 0, this._rpNoBorder = void 0, this._rpFixedHeight = void 0, this._rpFixedWidth = void 0;
                    const g965 = t199, h965 = u199;
                    this._designResolutionSize = new x147(0, 0), this._scaleX = 1, this._scaleY = 1, this._viewportRect = new y147(0, 0, 0, 0), this._visibleRect = new y147(0, 0, 0, 0), this._autoFullScreen = !1, this._retinaEnabled = !1, this._resizeCallback = null, this._rpExactFit = new v199(g965.EQUAL_TO_FRAME, h965.EXACT_FIT), this._rpShowAll = new v199(g965.EQUAL_TO_FRAME, h965.SHOW_ALL), this._rpNoBorder = new v199(g965.EQUAL_TO_FRAME, h965.NO_BORDER), this._rpFixedHeight = new v199(g965.EQUAL_TO_FRAME, h965.FIXED_HEIGHT), this._rpFixedWidth = new v199(g965.EQUAL_TO_FRAME, h965.FIXED_WIDTH), this._resolutionPolicy = this._rpShowAll;
                }
                init() {
                    const c965 = h157.windowSize, d965 = c965.width, e965 = c965.height;
                    this._designResolutionSize.width = d965, this._designResolutionSize.height = e965, this._viewportRect.width = d965, this._viewportRect.height = e965, this._visibleRect.width = d965, this._visibleRect.height = e965, q199.width = this._visibleRect.width, q199.height = this._visibleRect.height, j157 && j157.init(this._visibleRect);
                    {
                        this.resizeWithBrowserSize(!0);
                        const f965 = r145.querySettings(q145.Category.SCREEN, "designResolution");
                        f965 && this.setDesignResolutionSize(Number(f965.width), Number(f965.height), f965.policy || v199.FIXED_HEIGHT);
                    }
                    h157.on("window-resize", this._updateAdaptResult, this), h157.on("orientation-change", this._updateAdaptResult, this), h157.on("fullscreen-change", this._updateAdaptResult, this);
                }
                resizeWithBrowserSize(b965) {
                    g157.handleResizeEvent = b965;
                }
                setResizeCallback(a965) {
                    "function" != typeof a965 && null != a965 || (this._resizeCallback = a965);
                }
                setOrientation(z964) {
                    g157.orientation = r199[z964];
                }
                adjustViewportMeta(y964) { }
                enableRetina(x964) {
                    this._retinaEnabled = !!x964;
                }
                isRetinaEnabled() {
                    return this._retinaEnabled;
                }
                enableAutoFullScreen(v964) {
                    v964 !== this._autoFullScreen && (this._autoFullScreen = v964, v964 && h157.requestFullScreen().catch(() => { }));
                }
                isAutoFullScreenEnabled() {
                    return this._autoFullScreen;
                }
                setCanvasSize(r964, s964) {
                    g157.resolutionScale = 1;
                    const t964 = g157.devicePixelRatio, u964 = new x147(r964 * t964, s964 * t964);
                    h157.windowSize = u964;
                }
                getCanvasSize() {
                    return h157.windowSize;
                }
                getFrameSize() {
                    const p964 = g157.devicePixelRatio, q964 = h157.windowSize;
                    return q964.width /= p964, q964.height /= p964, q964;
                }
                setFrameSize(m964, n964) {
                    const o964 = g157.devicePixelRatio;
                    h157.windowSize = new x147(m964 * o964, n964 * o964);
                }
                getVisibleSize() {
                    return new x147(this._visibleRect.width, this._visibleRect.height);
                }
                getVisibleSizeInPixel() {
                    return new x147(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
                }
                getVisibleOrigin() {
                    return new s147(this._visibleRect.x, this._visibleRect.y);
                }
                getVisibleOriginInPixel() {
                    return new s147(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
                }
                getResolutionPolicy() {
                    return this._resolutionPolicy;
                }
                _updateResolutionPolicy(k964) {
                    if (k964 instanceof v199)
                        this._resolutionPolicy = k964;
                    else {
                        const l964 = v199;
                        k964 === l964.EXACT_FIT && (this._resolutionPolicy = this._rpExactFit), k964 === l964.SHOW_ALL && (this._resolutionPolicy = this._rpShowAll), k964 === l964.NO_BORDER && (this._resolutionPolicy = this._rpNoBorder), k964 === l964.FIXED_HEIGHT && (this._resolutionPolicy = this._rpFixedHeight), k964 === l964.FIXED_WIDTH && (this._resolutionPolicy = this._rpFixedWidth);
                    }
                }
                setResolutionPolicy(i964) {
                    this._updateResolutionPolicy(i964);
                    const j964 = w199.getDesignResolutionSize();
                    w199.setDesignResolutionSize(j964.width, j964.height, i964);
                }
                setDesignResolutionSize(a964, b964, c964) {
                    if (!(a964 > 0 && b964 > 0))
                        return void z125(2200);
                    this._updateResolutionPolicy(c964);
                    const d964 = this._resolutionPolicy;
                    d964 && d964.preApply(this), this._designResolutionSize.width = a964, this._designResolutionSize.height = b964;
                    const e964 = d964.apply(this, this._designResolutionSize);
                    if (e964.scale && 2 === e964.scale.length && (this._scaleX = e964.scale[0], this._scaleY = e964.scale[1]), e964.viewport) {
                        const f964 = this._viewportRect, g964 = this._visibleRect, h964 = e964.viewport;
                        f964.x = h964.x, f964.y = h964.y, f964.width = h964.width, f964.height = h964.height, g964.x = 0, g964.y = 0, g964.width = h964.width / this._scaleX, g964.height = h964.height / this._scaleY;
                    }
                    d964.postApply(this), q199.width = this._visibleRect.width, q199.height = this._visibleRect.height, j157 && j157.init(this._visibleRect), this.emit("design-resolution-changed");
                }
                getDesignResolutionSize() {
                    return new x147(this._designResolutionSize.width, this._designResolutionSize.height);
                }
                setRealPixelResolution(x963, y963, z963) {
                    this.setDesignResolutionSize(x963, y963, z963);
                }
                getViewportRect() {
                    return this._viewportRect;
                }
                getScaleX() {
                    return this._scaleX;
                }
                getScaleY() {
                    return this._scaleY;
                }
                getDevicePixelRatio() {
                    return g157.devicePixelRatio;
                }
                convertToLocationInView(r963, s963, t963, u963 = new s147()) {
                    const v963 = g157.devicePixelRatio * (r963 - t963.left), w963 = g157.devicePixelRatio * (t963.top + t963.height - s963);
                    return g157.isFrameRotated ? (u963.x = h157.windowSize.width - w963, u963.y = v963) : (u963.x = v963, u963.y = w963), u963;
                }
                _convertToUISpace(p963) {
                    const q963 = this._viewportRect;
                    p963.x = (p963.x - q963.x) / this._scaleX, p963.y = (p963.y - q963.y) / this._scaleY;
                }
                _updateAdaptResult(j963, k963, l963) {
                    var m963;
                    s143.director.root.resize(j963, k963, void 0 === l963 || 0 === l963 ? 1 : l963);
                    const n963 = this._designResolutionSize.width, o963 = this._designResolutionSize.height;
                    j963 > 0 && this.setDesignResolutionSize(n963, o963, this._resolutionPolicy), this.emit("canvas-resize"), null === (m963 = this._resizeCallback) || void 0 === m963 || m963.call(this);
                }
            }
            g125("View", s199), s199.instance = void 0;
            class t199 {
                constructor() {
                    this.name = "ContainerStrategy";
                }
                preApply(i963) { }
                apply(g963, h963) { }
                postApply(f963) { }
                _setupCanvas() {
                    const d963 = s143.game.canvas;
                    if (d963) {
                        const e963 = h157.windowSize;
                        d963.width !== e963.width && (d963.width = e963.width), d963.height !== e963.height && (d963.height = e963.height);
                    }
                }
            }
            t199.EQUAL_TO_FRAME = void 0, t199.PROPORTION_TO_FRAME = void 0;
            class u199 {
                constructor() {
                    this.name = "ContentStrategy", this._result = void 0, this._result = {
                        scale: [1, 1],
                        viewport: null
                    };
                }
                preApply(c963) { }
                apply(a963, b963) {
                    return {
                        scale: [1, 1]
                    };
                }
                postApply(z962) { }
                _buildResult(s962, t962, u962, v962, w962, x962) {
                    Math.abs(s962 - u962) < 2 && (u962 = s962), Math.abs(t962 - v962) < 2 && (v962 = t962);
                    const y962 = new y147(Math.round((s962 - u962) / 2), Math.round((t962 - v962) / 2), u962, v962);
                    return this._result.scale = [w962, x962], this._result.viewport = y962, this._result;
                }
            }
            u199.EXACT_FIT = void 0, u199.SHOW_ALL = void 0, u199.NO_BORDER = void 0, u199.FIXED_HEIGHT = void 0, u199.FIXED_WIDTH = void 0, t199.EQUAL_TO_FRAME = new class extends t199 {
                constructor(...r962) {
                    super(...r962), this.name = "EqualToFrame";
                }
                apply(p962, q962) {
                    g157.isProportionalToFrame = !1, this._setupCanvas();
                }
            }(), t199.PROPORTION_TO_FRAME = new class extends t199 {
                constructor(...o962) {
                    super(...o962), this.name = "ProportionalToFrame";
                }
                apply(m962, n962) {
                    g157.isProportionalToFrame = !0, this._setupCanvas();
                }
            }(), u199.EXACT_FIT = new class extends u199 {
                constructor(...l962) {
                    super(...l962), this.name = "ExactFit";
                }
                apply(e962, f962) {
                    const g962 = h157.windowSize, h962 = g962.width, i962 = g962.height, j962 = h962 / f962.width, k962 = i962 / f962.height;
                    return this._buildResult(h962, i962, h962, i962, j962, k962);
                }
            }(), u199.SHOW_ALL = new class extends u199 {
                constructor(...d962) {
                    super(...d962), this.name = "ShowAll";
                }
                apply(r961, s961) {
                    const t961 = h157.windowSize, u961 = t961.width, v961 = t961.height, w961 = s961.width, x961 = s961.height, y961 = u961 / w961, z961 = v961 / x961;
                    let a962, b962, c962 = 0;
                    return y961 < z961 ? (c962 = y961, a962 = u961, b962 = x961 * c962) : (c962 = z961, a962 = w961 * c962, b962 = v961), this._buildResult(u961, v961, a962, b962, c962, c962);
                }
            }(), u199.NO_BORDER = new class extends u199 {
                constructor(...q961) {
                    super(...q961), this.name = "NoBorder";
                }
                apply(e961, f961) {
                    const g961 = h157.windowSize, h961 = g961.width, i961 = g961.height, j961 = f961.width, k961 = f961.height, l961 = h961 / j961, m961 = i961 / k961;
                    let n961, o961, p961;
                    return l961 < m961 ? (n961 = m961, o961 = j961 * n961, p961 = i961) : (n961 = l961, o961 = h961, p961 = k961 * n961), this._buildResult(h961, i961, o961, p961, n961, n961);
                }
            }(), u199.FIXED_HEIGHT = new class extends u199 {
                constructor(...d961) {
                    super(...d961), this.name = "FixedHeight";
                }
                apply(v960, w960) {
                    const x960 = h157.windowSize, y960 = x960.width, z960 = x960.height, a961 = z960 / w960.height, b961 = y960, c961 = z960;
                    return this._buildResult(y960, z960, b961, c961, a961, a961);
                }
            }(), u199.FIXED_WIDTH = new class extends u199 {
                constructor(...u960) {
                    super(...u960), this.name = "FixedWidth";
                }
                apply(m960, n960) {
                    const o960 = h157.windowSize, p960 = o960.width, q960 = o960.height, r960 = p960 / n960.width, s960 = p960, t960 = q960;
                    return this._buildResult(p960, q960, s960, t960, r960, r960);
                }
            }();
            class v199 {
                constructor(k960, l960) {
                    this.name = "ResolutionPolicy", this._containerStrategy = void 0, this._contentStrategy = void 0, this._containerStrategy = null, this._contentStrategy = null, this.setContainerStrategy(k960), this.setContentStrategy(l960);
                }
                get canvasSize() {
                    return h157.windowSize;
                }
                preApply(j960) {
                    this._contentStrategy.preApply(j960);
                }
                apply(h960, i960) {
                    return this._containerStrategy.apply(h960, i960), this._contentStrategy.apply(h960, i960);
                }
                postApply(g960) {
                    this._contentStrategy.postApply(g960);
                }
                setContainerStrategy(f960) {
                    f960 instanceof t199 && (this._containerStrategy = f960);
                }
                setContentStrategy(e960) {
                    e960 instanceof u199 && (this._contentStrategy = e960);
                }
            }
            g125("ResolutionPolicy", v199), v199.EXACT_FIT = 0, v199.NO_BORDER = 1, v199.SHOW_ALL = 2, v199.FIXED_HEIGHT = 3, v199.FIXED_WIDTH = 4, v199.UNKNOWN = 5, v199.ContainerStrategy = t199, v199.ContentStrategy = u199, s143.ResolutionPolicy = v199;
            const w199 = g125("view", s199.instance = s143.view = new s199());
            var x199;
            t185.registerSystem("view", w199, 0), s143.winSize = q199;
            let y199 = g125("RenderRoot2D", e151("cc.RenderRoot2D")(x199 = g151(100)(x199 = f151(d190)(x199 = h151(x199 = class extends a165 {
                onEnable() {
                    s143.director.root.batcher2D.addScreen(this);
                }
                onDisable() {
                    s143.director.root.batcher2D.removeScreen(this);
                }
                onDestroy() {
                    s143.director.root.batcher2D.removeScreen(this);
                }
            }) || x199) || x199) || x199) || x199);
            var z199, a200, b200, c200, d200, e200, f200, g200;
            const h200 = new w146(), i200 = p127({
                OVERLAY: 0,
                INTERSPERSE: 1
            });
            let j200 = (z199 = e151("cc.Canvas"), a200 = g151(100), b200 = a131(p199), c200 = a131(p199), z199(d200 = a200(d200 = h151((i125((e200 = class extends y199 {
                get renderMode() {
                    return this._renderMode;
                }
                set renderMode(d960) {
                    this._renderMode = d960, this._cameraComponent && (this._cameraComponent.priority = this._getViewPriority());
                }
                get cameraComponent() {
                    return this._cameraComponent;
                }
                set cameraComponent(c960) {
                    this._cameraComponent !== c960 && (this._cameraComponent = c960, this._onResizeCamera());
                }
                get alignCanvasWithScreen() {
                    return this._alignCanvasWithScreen;
                }
                set alignCanvasWithScreen(b960) {
                    this._alignCanvasWithScreen = b960, this._onResizeCamera();
                }
                constructor() {
                    super(), this._cameraComponent = f200 && f200(), this._alignCanvasWithScreen = g200 && g200(), this._thisOnCameraResized = void 0, this.fitDesignResolution_EDITOR = void 0, this._pos = new w146(), this._renderMode = i200.OVERLAY, this._thisOnCameraResized = this._onResizeCamera.bind(this);
                }
                __preload() {
                    const a960 = this.getComponent("cc.Widget");
                    a960 && a960.updateAlignment(), this._cameraComponent && (this._cameraComponent._createCamera(), this._cameraComponent.node.on(p199.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized)), this._onResizeCamera(), this.node.on(z174.TRANSFORM_CHANGED, this._thisOnCameraResized);
                }
                onEnable() {
                    super.onEnable(), this._cameraComponent && this._cameraComponent.node.on(p199.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
                }
                onDisable() {
                    super.onDisable(), this._cameraComponent && this._cameraComponent.node.off(p199.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
                }
                onDestroy() {
                    super.onDestroy(), this.node.off(z174.TRANSFORM_CHANGED, this._thisOnCameraResized);
                }
                _onResizeCamera() {
                    if (this._cameraComponent && this._alignCanvasWithScreen) {
                        if (this._cameraComponent.targetTexture)
                            this._cameraComponent.orthoHeight = j157.height / 2;
                        else {
                            const z959 = h157.windowSize;
                            this._cameraComponent.orthoHeight = z959.height / w199.getScaleY() / 2;
                        }
                        this.node.getWorldPosition(h200), this._cameraComponent.node.setWorldPosition(h200.x, h200.y, 1e3);
                    }
                }
                _getViewPriority() {
                    if (this._cameraComponent) {
                        var x959;
                        let y959 = null === (x959 = this.cameraComponent) || void 0 === x959 ? void 0 : x959.priority;
                        return y959 = this._renderMode === i200.OVERLAY ? y959 | 1 << 30 : y959 & ~(1 << 30), y959;
                    }
                    return 0;
                }
            }).prototype, "cameraComponent", [b200], Object.getOwnPropertyDescriptor(e200.prototype, "cameraComponent"), e200.prototype), f200 = p130(e200.prototype, "_cameraComponent", [c200], function () {
                return null;
            }), g200 = p130(e200.prototype, "_alignCanvasWithScreen", [j151], function () {
                return !0;
            }), d200 = e200)) || d200) || d200) || d200);
            var k200;
            function c138(h959, i959, j959) {
                const k959 = h959.o, l959 = h959.d, m959 = 1 / l959.x, n959 = 1 / l959.y, o959 = 1 / l959.z, p959 = (i959.x - k959.x) * m959, q959 = (j959.x - k959.x) * m959, r959 = (i959.y - k959.y) * n959, s959 = (j959.y - k959.y) * n959, t959 = (i959.z - k959.z) * o959, u959 = (j959.z - k959.z) * o959, v959 = Math.max(Math.max(Math.min(p959, q959), Math.min(r959, s959)), Math.min(t959, u959)), w959 = Math.min(Math.min(Math.max(p959, q959), Math.max(r959, s959)), Math.max(t959, u959));
                return w959 < 0 || v959 > w959 ? 0 : v959 > 0 ? v959 : w959;
            }
            g125({
                Canvas: j200,
                CanvasComponent: j200
            }), s143.Canvas = j200, l144(g125("UIComponent", e151("cc.UIComponent")(k200 = f151(d190)(k200 = g151(110)(k200 = h151(k200 = class extends a165 {
                constructor(...g959) {
                    super(...g959), this._lastParent = null, this.stencilStage = c189.DISABLED;
                }
                __preload() {
                    this.node._uiProps.uiComp = this;
                }
                onEnable() { }
                onDisable() { }
                onDestroy() {
                    this.node._uiProps.uiComp === this && (this.node._uiProps.uiComp = null);
                }
                postUpdateAssembler(f959) { }
                markForUpdateRenderData(e959 = !0) { }
                setNodeDirty() { }
                setTextureDirty() { }
            }) || k200) || k200) || k200) || k200).prototype, "UIComponent", [{
                    name: "_visibility"
                }, {
                    name: "setVisibility"
                }]), k144(j200.prototype, "Canvas.prototype", [{
                    name: "camera",
                    newName: "cameraComponent.camera",
                    customGetter() {
                        var d959;
                        return null === (d959 = this._cameraComponent) || void 0 === d959 ? void 0 : d959.camera;
                    }
                }, {
                    name: "clearFlag",
                    newName: "cameraComponent.clearFlags",
                    customGetter() {
                        return this._cameraComponent ? this._cameraComponent.clearFlags : 0;
                    },
                    customSetter(c959) {
                        this._cameraComponent && (this._cameraComponent.clearFlags = c959);
                    }
                }, {
                    name: "color",
                    newName: "cameraComponent.clearColor",
                    customGetter() {
                        return this._cameraComponent ? this._cameraComponent.clearColor : a147.BLACK;
                    },
                    customSetter(b959) {
                        this._cameraComponent && (this._cameraComponent.clearColor = b959);
                    }
                }, {
                    name: "priority",
                    newName: "cameraComponent.priority",
                    customGetter() {
                        return this._cameraComponent ? this._cameraComponent.priority : 0;
                    },
                    customSetter(a959) {
                        this._cameraComponent && (this._cameraComponent.priority = a959);
                    }
                }, {
                    name: "targetTexture",
                    newName: "cameraComponent.targetTexture",
                    customGetter() {
                        return this._cameraComponent ? this._cameraComponent.targetTexture : null;
                    },
                    customSetter(z958) {
                        this._cameraComponent && (this._cameraComponent.targetTexture = z958);
                    }
                }, {
                    name: "visibility",
                    newName: "cameraComponent.visibility",
                    customGetter() {
                        return this._cameraComponent ? this._cameraComponent.visibility : 0;
                    }
                }]), m144(d190.prototype, "UITransform.prototype", [{
                    name: "priority",
                    suggest: "Please use setSiblingIndex to change index of the current node in its parent's children array."
                }]), s143.UITransformComponent = d190, a127(d190, "cc.UITransformComponent"), a127(h191, "cc.RenderComponent"), s143.CanvasComponent = j200, a127(j200, "cc.CanvasComponent"), s143.internal.Renderable2D = h191, a127(h191, "cc.Renderable2D");
            const l200 = function () {
                const h957 = b150.create(), i957 = {
                    distance: 1 / 0,
                    doubleSided: !1,
                    mode: t155.ANY
                };
                let j957 = 0;
                const k957 = (t958, u958, v958, w958, x958, y958) => {
                    t958 === t155.CLOSEST ? (j957 > u958 || 0 === j957) && (j957 = u958, y958 && (0 === y958.length ? y958.push({
                        distance: u958,
                        vertexIndex0: v958 / 3,
                        vertexIndex1: w958 / 3,
                        vertexIndex2: x958 / 3
                    }) : (y958[0].distance = u958, y958[0].vertexIndex0 = v958 / 3, y958[0].vertexIndex1 = w958 / 3, y958[0].vertexIndex2 = x958 / 3))) : (j957 = u958, y958 && y958.push({
                        distance: u958,
                        vertexIndex0: v958 / 3,
                        vertexIndex1: w958 / 3,
                        vertexIndex2: x958 / 3
                    }));
                };
                return function (n957, o957, p957) {
                    if (j957 = 0, 0 === o957.geometricInfo.positions.length)
                        return j957;
                    const q957 = void 0 === p957 ? i957 : p957;
                    if (c138(n957, o957.geometricInfo.boundingBox.min, o957.geometricInfo.boundingBox.max)) {
                        const r957 = o957.primitiveMode, { positions: s957, indices: t957 } = o957.geometricInfo;
                        ((v957, w957, x957, y957, z957) => {
                            if (x957 === t158.TRIANGLE_LIST) {
                                const n958 = w957.length;
                                for (let o958 = 0; o958 < n958; o958 += 3) {
                                    const p958 = 3 * w957[o958], q958 = 3 * w957[o958 + 1], r958 = 3 * w957[o958 + 2];
                                    w146.set(h957.a, v957[p958], v957[p958 + 1], v957[p958 + 2]), w146.set(h957.b, v957[q958], v957[q958 + 1], v957[q958 + 2]), w146.set(h957.c, v957[r958], v957[r958 + 1], v957[r958 + 2]);
                                    const s958 = v149.rayTriangle(y957, h957, z957.doubleSided);
                                    if (!(0 === s958 || s958 > z957.distance) && (k957(z957.mode, s958, p958, q958, r958, z957.result), z957.mode === t155.ANY))
                                        return s958;
                                }
                            }
                            else if (x957 === t158.TRIANGLE_STRIP) {
                                const g958 = w957.length - 2;
                                let h958 = 0;
                                for (let i958 = 0; i958 < g958; i958 += 1) {
                                    const j958 = 3 * w957[i958 - h958], k958 = 3 * w957[i958 + h958 + 1], l958 = 3 * w957[i958 + 2];
                                    w146.set(h957.a, v957[j958], v957[j958 + 1], v957[j958 + 2]), w146.set(h957.b, v957[k958], v957[k958 + 1], v957[k958 + 2]), w146.set(h957.c, v957[l958], v957[l958 + 1], v957[l958 + 2]), h958 = ~h958;
                                    const m958 = v149.rayTriangle(y957, h957, z957.doubleSided);
                                    if (!(0 === m958 || m958 > z957.distance) && (k957(z957.mode, m958, j958, k958, l958, z957.result), z957.mode === t155.ANY))
                                        return m958;
                                }
                            }
                            else if (x957 === t158.TRIANGLE_FAN) {
                                const a958 = w957.length - 1, b958 = 3 * w957[0];
                                w146.set(h957.a, v957[b958], v957[b958 + 1], v957[b958 + 2]);
                                for (let c958 = 1; c958 < a958; c958 += 1) {
                                    const d958 = 3 * w957[c958], e958 = 3 * w957[c958 + 1];
                                    w146.set(h957.b, v957[d958], v957[d958 + 1], v957[d958 + 2]), w146.set(h957.c, v957[e958], v957[e958 + 1], v957[e958 + 2]);
                                    const f958 = v149.rayTriangle(y957, h957, z957.doubleSided);
                                    if (!(0 === f958 || f958 > z957.distance) && (k957(z957.mode, f958, b958, d958, e958, z957.result), z957.mode === t155.ANY))
                                        return f958;
                                }
                            }
                        })(s957, t957, r957, n957, q957);
                    }
                    return j957;
                };
            }(), m200 = function () {
                let u956 = 0;
                const v956 = {
                    distance: 1 / 0,
                    doubleSided: !1,
                    mode: t155.ANY
                };
                return function (x956, y956, z956) {
                    u956 = 0;
                    const a957 = void 0 === z956 ? v956 : z956, b957 = y956.renderingSubMeshes.length, c957 = y956.struct.minPosition, d957 = y956.struct.maxPosition;
                    if (c957 && d957 && !c138(x956, c957, d957))
                        return u956;
                    for (let e957 = 0; e957 < b957; e957++) {
                        const f957 = y956.renderingSubMeshes[e957], g957 = l200(x956, f957, a957);
                        if (g957)
                            if (a957.mode === t155.CLOSEST)
                                (0 === u956 || u956 > g957) && (u956 = g957, a957.subIndices && (a957.subIndices[0] = e957));
                            else if (u956 = g957, a957.subIndices && a957.subIndices.push(e957), a957.mode === t155.ANY)
                                return g957;
                    }
                    return u956 && a957.mode === t155.CLOSEST && (a957.result && (a957.result[0].distance = u956, a957.result.length = 1), a957.subIndices && (a957.subIndices.length = 1)), u956;
                };
            }(), n200 = function () {
                let g956 = 0;
                const h956 = {
                    distance: 1 / 0,
                    doubleSided: !1,
                    mode: t155.ANY
                }, i956 = new n148(), j956 = new o147();
                return function (l956, m956, n956) {
                    g956 = 0;
                    const o956 = void 0 === n956 ? h956 : n956, p956 = m956.worldBounds;
                    if (p956 && !v149.rayAABB(l956, p956))
                        return g956;
                    n148.copy(i956, l956), m956.node && (o147.invert(j956, m956.node.getWorldMatrix(j956)), w146.transformMat4(i956.o, l956.o, j956), w146.transformMat4Normal(i956.d, l956.d, j956));
                    const q956 = m956.subModels;
                    for (let r956 = 0; r956 < q956.length; r956++) {
                        const s956 = q956[r956].subMesh, t956 = l200(i956, s956, o956);
                        if (t956)
                            if (o956.mode === t155.CLOSEST)
                                (0 === g956 || g956 > t956) && (g956 = t956, o956.subIndices && (o956.subIndices[0] = r956));
                            else if (g956 = t956, o956.subIndices && o956.subIndices.push(r956), o956.mode === t155.ANY)
                                return t956;
                    }
                    return g956 && o956.mode === t155.CLOSEST && (o956.result && (o956.result[0].distance = g956, o956.result.length = 1), o956.subIndices && (o956.subIndices.length = 1)), g956;
                };
            }();
            var o200, p200, q200;
            v149.rayModel = n200, v149.raySubMesh = l200, v149.rayMesh = m200, t172("specular-pass");
            let r200 = e151("cc.ModelRenderer")((p200 = class extends t190 {
                constructor(...f956) {
                    super(...f956), this._visFlags = q200 && q200(), this._models = [], this._priority = 0;
                }
                get visibility() {
                    return this._visFlags;
                }
                set visibility(e956) {
                    this._visFlags = e956, this._onVisibilityChange(e956);
                }
                get priority() {
                    return this._priority;
                }
                set priority(d956) {
                    d956 !== this._priority && (this._priority = d956, this._updatePriority());
                }
                _collectModels() {
                    return this._models;
                }
                onEnable() {
                    this._updatePriority();
                }
                _attachToScene() { }
                _detachFromScene() { }
                _onVisibilityChange(c956) { }
                _updatePriority() {
                    if (this._models.length > 0)
                        for (let b956 = 0; b956 < this._models.length; b956++)
                            this._models[b956].priority = this._priority;
                }
            }, q200 = p130(p200.prototype, "_visFlags", [j151], function () {
                return w168.Enum.NONE;
            }), o200 = p200)) || o200;
            var s200, t200, u200, v200, w200;
            g125({
                ModelRenderer: r200,
                RenderableComponent: r200
            });
            const { ccclass: x200, serializable: y200, type: z200, visible: a201 } = k152;
            var b201, c201, d201, e201, f201, g201, h201, i201, j201, k201, l201, m201, n201, o201, p201, q201, r201, s201, t201, u201, v201, w201, x201, y201, z201, a202, b202, c202, d202, e202, f202, g202, h202, i202, j202, k202, l202;
            g125("PrefabLink", (s200 = x200("cc.PrefabLink"), t200 = z200(o183), s200((v200 = class extends a165 {
                constructor(...a956) {
                    super(...a956), this.prefab = w200 && w200();
                }
            }, w200 = p130(v200.prototype, "prefab", [t200, y200], function () {
                return null;
            }), u200 = v200)) || u200)), k144(p199, "Camera", [{
                    name: "CameraClearFlag",
                    newName: "ClearFlag"
                }]), k144(p199.prototype, "Camera.prototype", [{
                    name: "color",
                    newName: "clearColor"
                }, {
                    name: "depth",
                    newName: "clearDepth"
                }, {
                    name: "stencil",
                    newName: "clearStencil"
                }]), m144(t190.prototype, "Renderer.prototype", [{
                    name: "getMaterial",
                    suggest: "please use renderer.getSharedMaterial instead."
                }]), s143.CameraComponent = p199, a127(p199, "cc.CameraComponent"), s143.RenderableComponent = r200, a127(r200, "cc.RenderableComponent"), function (z955) {
                z955[z955.SIMPLE = 0] = "SIMPLE", z955[z955.SLICED = 1] = "SLICED", z955[z955.TILED = 2] = "TILED";
            }(m201 || (m201 = {})), g125("SpriteRenderer", (b201 = e151("cc.SpriteRenderer"), c201 = g151(100), d201 = a131(q186), b201(e201 = c201((i125((f201 = class extends r200 {
                constructor(...y955) {
                    super(...y955), this._spriteFrame = g201 && g201(), this._mode = h201 && h201(), this._color = i201 && i201(), this._flipX = j201 && j201(), this._flipY = k201 && k201(), this._size = l201 && l201(), this._model = null;
                }
                get spriteFrame() {
                    return this._spriteFrame;
                }
                set spriteFrame(x955) {
                    this._spriteFrame !== x955 && (this._spriteFrame, this._spriteFrame = x955, this._spriteFrame && (this._spriteFrame.ensureMeshData(), this._spriteFrame.mesh.initialize()), this._updateModels(), this.enabledInHierarchy && this._attachToScene());
                }
                get model() {
                    return this._model;
                }
                onLoad() {
                    this._spriteFrame && (this._spriteFrame.mesh || this._spriteFrame.ensureMeshData(), this._spriteFrame.mesh.initialize()), this._updateModels();
                }
                onRestore() {
                    this._updateModels(), this.enabledInHierarchy && this._attachToScene();
                }
                onEnable() {
                    super.onEnable(), this._model || this._updateModels(), this._attachToScene();
                }
                onDisable() {
                    this._model && this._detachFromScene();
                }
                onDestroy() {
                    this._model && (s143.director.root.destroyModel(this._model), this._model = null, this._models.length = 0);
                }
                _updateModels() {
                    if (!this._spriteFrame)
                        return;
                    const v955 = this._model;
                    if (v955 ? (v955.destroy(), v955.initialize(), v955.node = v955.transform = this.node) : this._createModel(), this._model) {
                        const w955 = this._spriteFrame.mesh;
                        this._model.createBoundingShape(w955.struct.minPosition, w955.struct.maxPosition), this._updateModelParams(), this._onUpdateLocalDescriptorSet();
                    }
                }
                _createModel() {
                    const u955 = this._model = s143.director.root.createModel(b176);
                    u955.visFlags = this.visibility, u955.node = u955.transform = this.node, this._models.length = 0, this._models.push(this._model);
                }
                _updateModelParams() {
                    if (!this._spriteFrame || !this._model)
                        return;
                    this._spriteFrame.ensureMeshData();
                    const o955 = this._spriteFrame.mesh;
                    this.node.hasChangedFlags |= b175.POSITION, this._model.transform.hasChangedFlags |= b175.POSITION;
                    const p955 = o955 ? o955.renderingSubMeshes : null;
                    if (p955) {
                        const q955 = p955.length;
                        for (let r955 = 0; r955 < q955; ++r955) {
                            let s955 = this.getRenderMaterial(r955);
                            s955 && !s955.isValid && (s955 = null);
                            const t955 = p955[r955];
                            t955 && this._model.initSubModel(r955, t955, s955 || this._getBuiltinMaterial());
                        }
                    }
                    this._model.enabled = !0;
                }
                _getBuiltinMaterial() {
                    return r185.get("missing-material");
                }
                _onMaterialModified(m955, n955) {
                    super._onMaterialModified(m955, n955), this._spriteFrame && this._model && this._model.inited && this._onRebuildPSO(m955, n955 || this._getBuiltinMaterial());
                }
                _onRebuildPSO(k955, l955) {
                    this._model && this._model.inited && (this._model.setSubModelMaterial(k955, l955), this._onUpdateLocalDescriptorSet());
                }
                _onUpdateLocalDescriptorSet() {
                    if (!this._spriteFrame || !this._model || !this._model.inited)
                        return;
                    const e955 = this._spriteFrame.getGFXTexture(), f955 = this._spriteFrame.getGFXSampler(), g955 = this._model.subModels, h955 = s169.SAMPLER_SPRITE;
                    for (let i955 = 0; i955 < g955.length; i955++) {
                        const { descriptorSet: j955 } = g955[i955];
                        j955.bindTexture(h955, e955), j955.bindSampler(h955, f955), j955.update();
                    }
                }
                _attachToScene() {
                    if (!this.node.scene || !this._model)
                        return;
                    const d955 = this._getRenderScene();
                    null !== this._model.scene && this._detachFromScene(), d955.addModel(this._model);
                }
                _detachFromScene() {
                    this._model && this._model.scene && this._model.scene.removeModel(this._model);
                }
            }).prototype, "spriteFrame", [d201], Object.getOwnPropertyDescriptor(f201.prototype, "spriteFrame"), f201.prototype), g201 = p130(f201.prototype, "_spriteFrame", [j151], function () {
                return null;
            }), h201 = p130(f201.prototype, "_mode", [j151], function () {
                return m201.SIMPLE;
            }), i201 = p130(f201.prototype, "_color", [j151], function () {
                return a147.WHITE.clone();
            }), j201 = p130(f201.prototype, "_flipX", [j151], function () {
                return !1;
            }), k201 = p130(f201.prototype, "_flipY", [j151], function () {
                return !1;
            }), l201 = p130(f201.prototype, "_size", [j151], function () {
                return new s147();
            }), e201 = f201)) || e201) || e201));
            const m202 = new p197(), n202 = "RICHTEXT_CHILD", o202 = "RICHTEXT_Image_CHILD", p202 = new s147(), q202 = new s147(), r202 = new j145(b955 => {
                if (!s143.isValid(b955.node))
                    return !1;
                {
                    const c955 = b955.node.getComponent(r197);
                    c955 && (c955.width = 0);
                }
                return !0;
            }, 20), s202 = new j145(a955 => s143.isValid(a955.node), 10);
            function d138(z954) {
                return {
                    node: new h175(z954),
                    comp: null,
                    lineCount: 0,
                    styleIndex: 0,
                    imageOffset: "",
                    clickParam: "",
                    clickHandler: "",
                    type: z954
                };
            }
            function e138(v954, w954) {
                let x954;
                v954 === n202 ? x954 = r202._get() : v954 === o202 && (x954 = s202._get()), x954 = x954 || d138(v954);
                let y954 = x954.node;
                return y954 || (y954 = new h175(v954)), y954.hideFlags |= m152.Flags.DontSave | m152.Flags.HideInHierarchy, y954.active = !0, v954 === o202 ? (x954.comp = y954.getComponent(w196) || y954.addComponent(w196), x954.comp.spriteFrame = w954, x954.comp.type = w196.Type.SLICED, x954.comp.sizeMode = w196.SizeMode.CUSTOM) : (x954.comp = y954.getComponent(z192) || y954.addComponent(z192), x954.comp.string = w954, x954.comp.horizontalAlign = v192.LEFT, x954.comp.verticalAlign = w192.TOP, x954.comp.underlineHeight = 2), y954.setPosition(0, 0, 0), y954._uiProps.uiTransformComp.setAnchorPoint(.5, .5), x954.node = y954, x954.lineCount = 0, x954.styleIndex = 0, x954.imageOffset = "", x954.clickParam = "", x954.clickHandler = "", x954;
            }
            let t202 = (n201 = e151("cc.RichText"), o201 = g151(110), p201 = a131(v192), q201 = a131(w192), r201 = a131(a147), s201 = a131(y186), t201 = a131(y192), u201 = a131(w186), n201(v201 = o201(((l202 = class extends a165 {
                get string() {
                    return this._string;
                }
                set string(u954) {
                    this._string !== u954 && (this._string = u954, this._updateRichTextStatus());
                }
                get horizontalAlign() {
                    return this._horizontalAlign;
                }
                set horizontalAlign(t954) {
                    this.horizontalAlign !== t954 && (this._horizontalAlign = t954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get verticalAlign() {
                    return this._verticalAlign;
                }
                set verticalAlign(s954) {
                    this._verticalAlign !== s954 && (this._verticalAlign = s954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get fontSize() {
                    return this._fontSize;
                }
                set fontSize(r954) {
                    this._fontSize !== r954 && (this._fontSize = r954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get fontColor() {
                    return this._fontColor;
                }
                set fontColor(q954) {
                    this._fontColor !== q954 && (this._fontColor = q954, this._updateTextDefaultColor());
                }
                get fontFamily() {
                    return this._fontFamily;
                }
                set fontFamily(p954) {
                    this._fontFamily !== p954 && (this._fontFamily = p954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get font() {
                    return this._font;
                }
                set font(o954) {
                    this._font !== o954 && (this._font = o954, this._layoutDirty = !0, this._font ? (this.useSystemFont = !1, this._onTTFLoaded()) : this.useSystemFont = !0, this._updateRichTextStatus());
                }
                get useSystemFont() {
                    return this._isSystemFontUsed;
                }
                set useSystemFont(n954) {
                    this._isSystemFontUsed !== n954 && (this._isSystemFontUsed = n954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get cacheMode() {
                    return this._cacheMode;
                }
                set cacheMode(m954) {
                    this._cacheMode !== m954 && (this._cacheMode = m954, this._updateRichTextStatus());
                }
                get maxWidth() {
                    return this._maxWidth;
                }
                set maxWidth(l954) {
                    this._maxWidth !== l954 && (this._maxWidth = l954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get lineHeight() {
                    return this._lineHeight;
                }
                set lineHeight(k954) {
                    this._lineHeight !== k954 && (this._lineHeight = k954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get imageAtlas() {
                    return this._imageAtlas;
                }
                set imageAtlas(j954) {
                    this._imageAtlas !== j954 && (this._imageAtlas = j954, this._layoutDirty = !0, this._updateRichTextStatus());
                }
                get handleTouchEvent() {
                    return this._handleTouchEvent;
                }
                set handleTouchEvent(i954) {
                    this._handleTouchEvent !== i954 && (this._handleTouchEvent = i954, this.enabledInHierarchy && (this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners()));
                }
                constructor() {
                    super(), this._lineHeight = x201 && x201(), this._string = y201 && y201(), this._horizontalAlign = z201 && z201(), this._verticalAlign = a202 && a202(), this._fontSize = b202 && b202(), this._fontColor = c202 && c202(), this._maxWidth = d202 && d202(), this._fontFamily = e202 && e202(), this._font = f202 && f202(), this._isSystemFontUsed = g202 && g202(), this._userDefinedFont = h202 && h202(), this._cacheMode = i202 && i202(), this._imageAtlas = j202 && j202(), this._handleTouchEvent = k202 && k202(), this._textArray = [], this._segments = [], this._labelSegmentsCache = [], this._linesWidth = [], this._lineCount = 1, this._labelWidth = 0, this._labelHeight = 0, this._layoutDirty = !0, this._lineOffsetX = 0, this._updateRichTextStatus = void 0, this._labelChildrenNum = 0, this._updateRichTextStatus = this._updateRichText;
                }
                onLoad() {
                    this.node.on(z174.LAYER_CHANGED, this._applyLayer, this), this.node.on(z174.ANCHOR_CHANGED, this._updateRichTextPosition, this);
                }
                onEnable() {
                    this.handleTouchEvent && this._addEventListeners(), this._updateRichText(), this._activateChildren(!0);
                }
                onDisable() {
                    this.handleTouchEvent && this._removeEventListeners(), this._activateChildren(!1);
                }
                onRestore() { }
                onDestroy() {
                    for (const h954 of this._segments)
                        h954.node.removeFromParent(), h954.type === n202 ? r202.put(h954) : h954.type === o202 && s202.put(h954);
                    this.node.off(z174.ANCHOR_CHANGED, this._updateRichTextPosition, this), this.node.off(z174.LAYER_CHANGED, this._applyLayer, this);
                }
                _addEventListeners() {
                    this.node.on(z174.TOUCH_END, this._onTouchEnded, this);
                }
                _removeEventListeners() {
                    this.node.off(z174.TOUCH_END, this._onTouchEnded, this);
                }
                _updateLabelSegmentTextAttributes() {
                    this._segments.forEach(g954 => {
                        this._applyTextAttribute(g954);
                    });
                }
                _createFontLabel(e954) {
                    return e138(n202, e954);
                }
                _createImage(d954) {
                    return e138(o202, d954);
                }
                _onTTFLoaded() {
                    this._font, this._layoutDirty = !0, this._updateRichText();
                }
                splitLongStringApproximatelyIn2048(x953, y953) {
                    const z953 = [];
                    if (x953.length * this.fontSize <= 1638.4)
                        return z953.push(x953), z953;
                    if (this._calculateSize(p202, y953, x953), p202.x < 2048)
                        z953.push(x953);
                    else {
                        const a954 = x953.split("\n");
                        for (let b954 = 0; b954 < a954.length; b954++)
                            if (this._calculateSize(p202, y953, a954[b954]), p202.x < 2048)
                                z953.push(a954[b954]);
                            else {
                                const c954 = this.splitLongStringOver2048(a954[b954], y953);
                                z953.push(...c954);
                            }
                    }
                    return z953;
                }
                splitLongStringOver2048(h953, i953) {
                    const j953 = [], k953 = h953;
                    let l953 = 0, m953 = k953.length / 2, n953 = k953.substring(l953, m953), o953 = k953.substring(m953);
                    const p953 = this._calculateSize(p202, i953, n953), q953 = this._calculateSize(q202, i953, o953);
                    let r953 = this._maxWidth;
                    0 === this._maxWidth && (r953 = 2047.9);
                    const s953 = 1 * r953;
                    for (; p953.x > s953;) {
                        if (m953 /= 2, m953 < 1) {
                            m953 *= 2;
                            break;
                        }
                        n953 = n953.substring(l953, m953), o953 = k953.substring(m953), this._calculateSize(p953, i953, n953);
                    }
                    let t953 = 1e3, u953 = 1;
                    for (; t953 && l953 < h953.length;) {
                        for (; t953 && p953.x < s953;) {
                            const w953 = q137(o953);
                            w953 && w953.length > 0 && (u953 = w953[0].length), m953 += u953, n953 = k953.substring(l953, m953), o953 = k953.substring(m953), this._calculateSize(p953, i953, n953), t953--;
                        }
                        for (; t953 && n953.length >= 2 && p953.x > s953;)
                            m953 -= u953, n953 = k953.substring(l953, m953), this._calculateSize(p953, i953, n953), u953 = 1, t953--;
                        if (n953.length >= 2) {
                            const v953 = r137(n953);
                            v953 && v953.length > 0 && n953 !== v953[0] && (m953 -= v953[0].length, n953 = k953.substring(l953, m953));
                        }
                        if (j953.push(n953), l953 = m953, m953 += n953.length, n953 = k953.substring(l953, m953), o953 = k953.substring(m953), this._calculateSize(q953, i953, o953), this._calculateSize(p953, i953, n953), t953--, q953.x < 2048 && p953.x < s953) {
                            j953.push(n953), l953 = h953.length, m953 = h953.length, n953 = o953, "" !== o953 && j953.push(n953);
                            break;
                        }
                    }
                    return j953;
                }
                _measureText(c953, d953) {
                    const e953 = g953 => this._calculateSize(p202, c953, g953).x;
                    return d953 ? e953(d953) : e953;
                }
                _calculateSize(x952, y952, z952) {
                    let a953;
                    0 === this._labelSegmentsCache.length ? (a953 = this._createFontLabel(z952), this._labelSegmentsCache.push(a953)) : (a953 = this._labelSegmentsCache[0], a953.node.getComponent(z192).string = z952), a953.styleIndex = y952, this._applyTextAttribute(a953);
                    const b953 = a953.node._uiProps.uiTransformComp.contentSize;
                    return s147.set(x952, b953.x, b953.y), x952;
                }
                _onTouchEnded(p952) {
                    const q952 = this.node.getComponents(a165);
                    for (const r952 of this._segments) {
                        const s952 = r952.clickHandler, t952 = r952.clickParam;
                        s952 && this._containsTouchLocation(r952, p952.touch.getUILocation()) && (q952.forEach(v952 => {
                            const w952 = v952[s952];
                            v952.enabledInHierarchy && w952 && w952.call(v952, p952, t952);
                        }), p952.propagationStopped = !0);
                    }
                }
                _containsTouchLocation(m952, n952) {
                    const o952 = m952.node.getComponent(d190);
                    return !!o952 && o952.getBoundingBoxToWorld().contains(n952);
                }
                _resetState() {
                    const i952 = this.node.children;
                    for (let j952 = i952.length - 1; j952 >= 0; j952--) {
                        const k952 = i952[j952];
                        if (k952.name === n202 || k952.name === o202) {
                            k952.parent = null;
                            const l952 = d138(k952.name);
                            l952.node = k952, k952.name === n202 ? (l952.comp = k952.getComponent(z192), r202.put(l952)) : (l952.comp = k952.getComponent(w196), s202.put(l952)), this._labelChildrenNum--;
                        }
                    }
                    this._segments.length = 0, this._labelSegmentsCache.length = 0, this._linesWidth.length = 0, this._lineOffsetX = 0, this._lineCount = 1, this._labelWidth = 0, this._labelHeight = 0, this._layoutDirty = !0;
                }
                _activateChildren(f952) {
                    for (let g952 = this.node.children.length - 1; g952 >= 0; g952--) {
                        const h952 = this.node.children[g952];
                        h952.name !== n202 && h952.name !== o202 || (h952.active = f952);
                    }
                }
                _addLabelSegment(a952, b952) {
                    let c952;
                    if (0 === this._labelSegmentsCache.length)
                        c952 = this._createFontLabel(a952);
                    else {
                        c952 = this._labelSegmentsCache.pop();
                        const e952 = c952.node.getComponent(z192);
                        e952 && (e952.string = a952);
                    }
                    const d952 = c952.comp;
                    return d952.verticalAlign !== this._verticalAlign && (d952.verticalAlign = this._verticalAlign), c952.styleIndex = b952, c952.lineCount = this._lineCount, c952.node._uiProps.uiTransformComp.setAnchorPoint(0, 0), c952.node.layer = this.node.layer, this.node.insertChild(c952.node, this._labelChildrenNum++), this._applyTextAttribute(c952), this._segments.push(c952), c952;
                }
                _updateRichTextWithMaxWidth(m951, n951, o951) {
                    let p951, q951 = n951;
                    if (this._lineOffsetX > 0 && q951 + this._lineOffsetX > this._maxWidth) {
                        let v951 = 0;
                        for (; this._lineOffsetX <= this._maxWidth;) {
                            const w951 = this._getFirstWordLen(m951, v951, m951.length), x951 = m951.substr(v951, w951), y951 = this._measureText(o951, x951);
                            if (!(this._lineOffsetX + y951 <= this._maxWidth)) {
                                if (v951 > 0) {
                                    const z951 = m951.substr(0, v951);
                                    this._addLabelSegment(z951, o951), m951 = m951.substr(v951, m951.length), q951 = this._measureText(o951, m951);
                                }
                                this._updateLineInfo();
                                break;
                            }
                            this._lineOffsetX += y951, v951 += w951;
                        }
                    }
                    if (q951 > this._maxWidth) {
                        const r951 = s137(m951, q951, this._maxWidth, this._measureText(o951));
                        for (let s951 = 0; s951 < r951.length; ++s951) {
                            const t951 = r951[s951];
                            p951 = this._addLabelSegment(t951, o951);
                            const u951 = p951.node._uiProps.uiTransformComp.contentSize;
                            this._lineOffsetX += u951.width, r951.length > 1 && s951 < r951.length - 1 && this._updateLineInfo();
                        }
                    }
                    else
                        this._lineOffsetX += q951, this._addLabelSegment(m951, o951);
                }
                _isLastComponentCR(l951) {
                    return l951.length - 1 === l951.lastIndexOf("\n");
                }
                _updateLineInfo() {
                    this._linesWidth.push(this._lineOffsetX), this._lineOffsetX = 0, this._lineCount++;
                }
                _needsUpdateTextLayout(f951) {
                    if (this._layoutDirty || !this._textArray || !f951)
                        return !0;
                    if (this._textArray.length !== f951.length)
                        return !0;
                    for (let g951 = 0; g951 < this._textArray.length; g951++) {
                        const h951 = this._textArray[g951], i951 = f951[g951];
                        if (h951.text !== i951.text)
                            return !0;
                        {
                            const j951 = h951.style, k951 = i951.style;
                            if (j951) {
                                if (k951) {
                                    if (!!k951.outline != !!j951.outline)
                                        return !0;
                                    if (j951.size !== k951.size || j951.italic !== k951.italic || j951.isImage !== k951.isImage)
                                        return !0;
                                    if (j951.src !== k951.src || j951.imageAlign !== k951.imageAlign || j951.imageHeight !== k951.imageHeight || j951.imageWidth !== k951.imageWidth || j951.imageOffset !== k951.imageOffset)
                                        return !0;
                                }
                                else if (j951.size || j951.italic || j951.isImage || j951.outline)
                                    return !0;
                            }
                            else if (k951 && (k951.size || k951.italic || k951.isImage || k951.outline))
                                return !0;
                        }
                    }
                    return !1;
                }
                _addRichTextImageElement(t950) {
                    if (!t950.style)
                        return;
                    const u950 = t950.style, v950 = u950.src, w950 = this._imageAtlas && v950 && this._imageAtlas.getSpriteFrame(v950);
                    if (w950) {
                        const x950 = this._createImage(w950);
                        switch ((x950.comp, u950.imageAlign)) {
                            case "top":
                                x950.node._uiProps.uiTransformComp.setAnchorPoint(0, 1);
                                break;
                            case "center":
                                x950.node._uiProps.uiTransformComp.setAnchorPoint(0, .5);
                                break;
                            default:
                                x950.node._uiProps.uiTransformComp.setAnchorPoint(0, 0);
                        }
                        u950.imageOffset && (x950.imageOffset = u950.imageOffset), x950.node.layer = this.node.layer, this.node.insertChild(x950.node, this._labelChildrenNum++), this._segments.push(x950);
                        const y950 = w950.rect.clone();
                        let z950 = 1, a951 = y950.width, b951 = y950.height;
                        const c951 = u950.imageWidth || 0, d951 = u950.imageHeight || 0;
                        d951 > 0 ? (z950 = d951 / b951, a951 *= z950, b951 *= z950) : (z950 = this._lineHeight / b951, a951 *= z950, b951 *= z950), c951 > 0 && (a951 = c951), this._maxWidth > 0 ? (this._lineOffsetX + a951 > this._maxWidth && this._updateLineInfo(), this._lineOffsetX += a951) : (this._lineOffsetX += a951, this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX)), x950.node._uiProps.uiTransformComp.setContentSize(a951, b951), x950.lineCount = this._lineCount, x950.clickHandler = "", x950.clickParam = "";
                        const e951 = u950.event;
                        e951 && (x950.clickHandler = e951.click, x950.clickParam = e951.param);
                    }
                    else
                        y125(4400);
                }
                _updateTextDefaultColor() {
                    for (let q950 = 0; q950 < this._segments.length; ++q950) {
                        var o950, p950;
                        const r950 = this._segments[q950], s950 = r950.node.getComponent(z192);
                        s950 && (null !== (o950 = this._textArray[r950.styleIndex]) && void 0 !== o950 && null !== (p950 = o950.style) && void 0 !== p950 && p950.color || (s950.color = this._fontColor));
                    }
                }
                _updateRichText() {
                    if (!this.enabledInHierarchy)
                        return;
                    const e950 = m202.parse(this._string);
                    if (!this._needsUpdateTextLayout(e950))
                        return this._textArray = e950.slice(), void this._updateLabelSegmentTextAttributes();
                    this._textArray = e950.slice(), this._resetState();
                    let f950, g950 = !1;
                    for (let h950 = 0; h950 < this._textArray.length; ++h950) {
                        const i950 = this._textArray[h950];
                        let j950 = i950.text;
                        if (void 0 === j950)
                            continue;
                        if ("" === j950) {
                            if (i950.style && i950.style.isNewLine) {
                                this._updateLineInfo();
                                continue;
                            }
                            if (i950.style && i950.style.isImage && this._imageAtlas) {
                                this._addRichTextImageElement(i950);
                                continue;
                            }
                        }
                        j950 = this.splitLongStringApproximatelyIn2048(j950, h950).join("\n");
                        const k950 = j950.split("\n");
                        for (let l950 = 0; l950 < k950.length; ++l950) {
                            const m950 = k950[l950];
                            if ("" !== m950) {
                                if (g950 = !1, this._maxWidth > 0) {
                                    const n950 = this._measureText(h950, m950);
                                    this._updateRichTextWithMaxWidth(m950, n950, h950), k950.length > 1 && l950 < k950.length - 1 && this._updateLineInfo();
                                }
                                else
                                    f950 = this._addLabelSegment(m950, h950), this._lineOffsetX += f950.node._uiProps.uiTransformComp.width, this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX), k950.length > 1 && l950 < k950.length - 1 && this._updateLineInfo();
                            }
                            else {
                                if (this._isLastComponentCR(j950) && l950 === k950.length - 1)
                                    continue;
                                this._updateLineInfo(), g950 = !0;
                            }
                        }
                    }
                    g950 || this._linesWidth.push(this._lineOffsetX), this._maxWidth > 0 && (this._labelWidth = this._maxWidth), this._labelHeight = (this._lineCount + q187) * this._lineHeight, this.node._uiProps.uiTransformComp.setContentSize(this._labelWidth, this._labelHeight), this._updateRichTextPosition(), this._layoutDirty = !1;
                }
                _getFirstWordLen(y949, z949, a950) {
                    let b950 = y949.charAt(z949);
                    if (m137(b950) || n137(b950))
                        return 1;
                    let c950 = 1;
                    for (let d950 = z949 + 1; d950 < a950 && (b950 = y949.charAt(d950), !n137(b950) && !m137(b950)); ++d950)
                        c950++;
                    return c950;
                }
                _updateRichTextPosition() {
                    let e949 = 0, f949 = 1;
                    const g949 = this._lineCount, h949 = this.node._uiProps.uiTransformComp, i949 = h949.anchorX, j949 = h949.anchorY;
                    for (let k949 = 0; k949 < this._segments.length; ++k949) {
                        const l949 = this._segments[k949], m949 = l949.lineCount;
                        m949 > f949 && (e949 = 0, f949 = m949);
                        let n949 = this._labelWidth * (.5 * this._horizontalAlign - i949);
                        switch (this._horizontalAlign) {
                            case v192.LEFT:
                                break;
                            case v192.CENTER:
                                n949 -= this._linesWidth[m949 - 1] / 2;
                                break;
                            case v192.RIGHT:
                                n949 -= this._linesWidth[m949 - 1];
                        }
                        const o949 = l949.node.position;
                        if (l949.node.setPosition(e949 + n949, this._lineHeight * (g949 - m949) - this._labelHeight * j949, o949.z), m949 === f949 && (e949 += l949.node._uiProps.uiTransformComp.width), l949.node.getComponent(w196)) {
                            const r949 = l949.node.position.clone(), s949 = this._lineHeight, t949 = this._lineHeight * (1 + q187);
                            switch (l949.node._uiProps.uiTransformComp.anchorY) {
                                case 1:
                                    r949.y += s949 + (t949 - s949) / 2;
                                    break;
                                case .5:
                                    r949.y += t949 / 2;
                                    break;
                                default:
                                    r949.y += (t949 - s949) / 2;
                            }
                            if (l949.imageOffset) {
                                const u949 = l949.imageOffset.split(",");
                                if (1 === u949.length && u949[0]) {
                                    const x949 = parseFloat(u949[0]);
                                    Number.isInteger(x949) && (r949.y += x949);
                                }
                                else if (2 === u949.length) {
                                    const v949 = parseFloat(u949[0]), w949 = parseFloat(u949[1]);
                                    Number.isInteger(v949) && (r949.x += v949), Number.isInteger(w949) && (r949.y += w949);
                                }
                            }
                            l949.node.position = r949;
                        }
                        const p949 = l949.node.getComponent(r197);
                        if (p949) {
                            const q949 = l949.node.position.clone();
                            q949.y -= p949.width, l949.node.position = q949;
                        }
                    }
                }
                _convertLiteralColorValue(c949) {
                    const d949 = c949.toUpperCase();
                    return a147[d949] ? a147[d949] : new a147().fromHEX(c949);
                }
                _applyTextAttribute(w948) {
                    const x948 = w948.node.getComponent(z192);
                    if (!x948)
                        return;
                    this._resetLabelState(x948);
                    const y948 = w948.styleIndex;
                    let z948;
                    if (this._textArray[y948] && (z948 = this._textArray[y948].style), z948) {
                        if (z948.color ? x948.color = this._convertLiteralColorValue(z948.color) : x948.color = this._fontColor, x948.isBold = !!z948.bold, x948.isItalic = !!z948.italic, x948.isUnderline = !!z948.underline, z948.outline) {
                            let b949 = w948.node.getComponent(r197);
                            b949 || (b949 = w948.node.addComponent(r197)), b949.color = this._convertLiteralColorValue(z948.outline.color), b949.width = z948.outline.width;
                        }
                        x948.fontSize = z948.size || this._fontSize, w948.clickHandler = "", w948.clickParam = "";
                        const a949 = z948.event;
                        a949 && (w948.clickHandler = a949.click || "", w948.clickParam = a949.param || "");
                    }
                    x948.cacheMode = this._cacheMode, this._font instanceof y186 && !this._isSystemFontUsed ? x948.font = this._font : x948.fontFamily = this._fontFamily, x948.useSystemFont = this._isSystemFontUsed, x948.lineHeight = this._lineHeight, x948.updateRenderData(!0);
                }
                _applyLayer() {
                    for (const v948 of this._segments)
                        v948.node.layer = this.node.layer;
                }
                _resetLabelState(u948) {
                    u948.fontSize = this._fontSize, u948.color = this._fontColor, u948.isBold = !1, u948.isItalic = !1, u948.isUnderline = !1;
                }
            }).HorizontalAlign = v192, l202.VerticalAlign = w192, i125((w201 = l202).prototype, "horizontalAlign", [p201], Object.getOwnPropertyDescriptor(w201.prototype, "horizontalAlign"), w201.prototype), i125(w201.prototype, "verticalAlign", [q201], Object.getOwnPropertyDescriptor(w201.prototype, "verticalAlign"), w201.prototype), i125(w201.prototype, "fontColor", [r201], Object.getOwnPropertyDescriptor(w201.prototype, "fontColor"), w201.prototype), i125(w201.prototype, "font", [s201], Object.getOwnPropertyDescriptor(w201.prototype, "font"), w201.prototype), i125(w201.prototype, "cacheMode", [t201], Object.getOwnPropertyDescriptor(w201.prototype, "cacheMode"), w201.prototype), i125(w201.prototype, "imageAtlas", [u201], Object.getOwnPropertyDescriptor(w201.prototype, "imageAtlas"), w201.prototype), x201 = p130(w201.prototype, "_lineHeight", [j151], function () {
                return 40;
            }), y201 = p130(w201.prototype, "_string", [j151], function () {
                return "<color=#00ff00>Rich</color><color=#0fffff>Text</color>";
            }), z201 = p130(w201.prototype, "_horizontalAlign", [j151], function () {
                return v192.LEFT;
            }), a202 = p130(w201.prototype, "_verticalAlign", [j151], function () {
                return w192.TOP;
            }), b202 = p130(w201.prototype, "_fontSize", [j151], function () {
                return 40;
            }), c202 = p130(w201.prototype, "_fontColor", [j151], function () {
                return a147.WHITE.clone();
            }), d202 = p130(w201.prototype, "_maxWidth", [j151], function () {
                return 0;
            }), e202 = p130(w201.prototype, "_fontFamily", [j151], function () {
                return "Arial";
            }), f202 = p130(w201.prototype, "_font", [j151], function () {
                return null;
            }), g202 = p130(w201.prototype, "_isSystemFontUsed", [j151], function () {
                return !0;
            }), h202 = p130(w201.prototype, "_userDefinedFont", [j151], function () {
                return null;
            }), i202 = p130(w201.prototype, "_cacheMode", [j151], function () {
                return y192.NONE;
            }), j202 = p130(w201.prototype, "_imageAtlas", [j151], function () {
                return null;
            }), k202 = p130(w201.prototype, "_handleTouchEvent", [j151], function () {
                return !0;
            }), v201 = w201)) || v201) || v201);
            var u202;
            g125({
                RichText: t202,
                RichTextComponent: t202
            }), s143.RichText = t202;
            let v202 = e151("cc.UIMeshRenderer")(u202 = g151(110)(u202 = class extends a165 {
                constructor() {
                    super(), this._modelComponent = null, this._dirtyVersion = -1, this._internalId = -1, this.stencilStage = c189.DISABLED, this._renderData = null, this._renderEntity = new l189(e189.DYNAMIC), this._UIModelNativeProxy = new s188();
                }
                get modelComponent() {
                    return this._modelComponent;
                }
                __preload() {
                    this.node._uiProps.uiComp = this;
                }
                onEnable() {
                    p183.addRenderer(this), this.markForUpdateRenderData();
                }
                onDisable() {
                    p183.removeRenderer(this), this.renderEntity.enabled = this._canRender();
                }
                onLoad() {
                    this.node._uiProps.uiTransformComp || this.node.addComponent("cc.UITransform"), this._modelComponent = this.getComponent("cc.ModelRenderer"), this._modelComponent ? (this._UIModelNativeProxy.attachNode(this.node), this.renderEntity.setNode(this.node)) : q125(`node '${this.node && this.node.name}' doesn't have any renderable component`);
                }
                onDestroy() {
                    this.renderEntity.setNode(null), this.node._uiProps.uiComp === this && (this.node._uiProps.uiComp = null), this._modelComponent = this.getComponent("cc.ModelRenderer"), this._modelComponent && (this._modelComponent._sceneGetter = null);
                }
                _render(r948) {
                    if (this._modelComponent) {
                        const s948 = this._modelComponent._collectModels();
                        this._modelComponent._detachFromScene();
                        for (let t948 = 0; t948 < s948.length; t948++)
                            s948[t948].enabled && r948.commitModel(this, s948[t948], this._modelComponent.material);
                        return !0;
                    }
                    return !1;
                }
                fillBuffers(q948) {
                    this.enabled && this._render(q948);
                }
                updateRenderer() {
                    if (this.renderEntity.enabled = this._canRender(), this._modelComponent) {
                        const o948 = this._modelComponent._collectModels();
                        this._modelComponent._detachFromScene(), this._UIModelNativeProxy.clearModels(), this._renderEntity.clearDynamicRenderDrawInfos();
                        for (let p948 = 0; p948 < o948.length; p948++)
                            o948[p948].enabled && (this._uploadRenderData(p948), this._UIModelNativeProxy.updateModels(o948[p948]));
                        this._UIModelNativeProxy.attachDrawInfo();
                    }
                }
                _uploadRenderData(m948) {
                    {
                        const n948 = p189.add();
                        n948.initRenderDrawInfo(this, b189.MODEL), this._renderData = n948, this._renderData.material = this._modelComponent.getMaterialInstance(m948);
                    }
                }
                postUpdateAssembler(l948) { }
                update() {
                    this._modelComponent && this.markForUpdateRenderData(), this._fitUIRenderQueue();
                }
                _fitUIRenderQueue() {
                    if (!this._modelComponent)
                        return;
                    const f948 = this._modelComponent.sharedMaterials.length;
                    for (let g948 = 0; g948 < f948; g948++) {
                        const h948 = this._modelComponent.getMaterialInstance(g948);
                        if (null == h948)
                            continue;
                        const i948 = h948.passes, j948 = i948.length;
                        for (let k948 = 0; k948 < j948; k948++)
                            i948[k948].setPriority(m169.MAX - 11), h948.recompileShaders({
                                CC_FORCE_FORWARD_SHADING: !0
                            }, k948);
                    }
                }
                markForUpdateRenderData(e948 = !0) {
                    p183.markDirtyRenderer(this);
                }
                setNodeDirty() { }
                setTextureDirty() { }
                _canRender() {
                    return this.enabled && null !== this._modelComponent;
                }
                get renderEntity() {
                    return this._renderEntity;
                }
                get renderData() {
                    return this._renderData;
                }
            }) || u202) || u202;
            g125({
                UIMeshRenderer: v202,
                UIModelComponent: v202
            }), s143.UIMeshRenderer = v202;
            const w202 = w168.Enum.NONE | w168.Enum.UI_3D;
            class x202 {
                constructor() {
                    this.model = null, this.texture = null, this.sampler = null, this.useLocalData = null, this.isStatic = !1, this.textureHash = 0, this.samplerHash = 0, this._passes = [], this._shaders = [], this._visFlags = w202, this._inputAssembler = null, this._descriptorSet = null;
                }
                get inputAssembler() {
                    return this._inputAssembler;
                }
                set inputAssembler(d948) {
                    this._inputAssembler = d948;
                }
                get descriptorSet() {
                    return this._descriptorSet;
                }
                set descriptorSet(c948) {
                    this._descriptorSet = c948;
                }
                get visFlags() {
                    return this._visFlags;
                }
                set visFlags(b948) {
                    this._visFlags = b948;
                }
                get passes() {
                    return this._passes;
                }
                get shaders() {
                    return this._shaders;
                }
                destroy(a948) {
                    this._passes = [];
                }
                clear() {
                    this._inputAssembler = null, this._descriptorSet = null, this.texture = null, this.sampler = null, this.textureHash = 0, this.samplerHash = 0, this.model = null, this.isStatic = !1, this.useLocalData = null, this.visFlags = w202;
                }
                fillPasses(s947, t947, u947, v947) {
                    if (s947) {
                        const w947 = s947.passes;
                        if (!w947)
                            return;
                        this._shaders.length = w947.length;
                        for (let x947 = 0; x947 < w947.length; x947++) {
                            this._passes[x947] || (this._passes[x947] = new n193(s143.director.root));
                            const y947 = w947[x947], z947 = this._passes[x947];
                            y947.update(), t947 || (t947 = y947.depthStencilState, u947 = 0), z947._initPassFromTarget(y947, t947, u947), this._shaders[x947] = z947.getShaderVariant(v947);
                        }
                    }
                }
            }
            var y202, z202;
            let a203 = e151("cc.UIStaticBatch")(y202 = g151(110)((i125((z202 = class extends h191 {
                constructor(...r947) {
                    super(...r947), this._init = !1, this._bufferAccessor = null, this._dirty = !0, this._uiDrawBatchList = [];
                }
                get color() {
                    return this._color;
                }
                set color(q947) {
                    this._color !== q947 && this._color.set(q947);
                }
                get drawBatchList() {
                    return this._uiDrawBatchList;
                }
                postUpdateAssembler(p947) { }
                markAsDirty() { }
                _requireDrawBatch() {
                    const o947 = new x202();
                    return o947.isStatic = !0, this._uiDrawBatchList.push(o947), o947;
                }
                _clearData() {
                    if (this._bufferAccessor) {
                        this._bufferAccessor.reset();
                        const m947 = this._getBatcher();
                        for (let n947 = 0; n947 < this._uiDrawBatchList.length; n947++)
                            this._uiDrawBatchList[n947].destroy(m947);
                    }
                    this._uiDrawBatchList.length = 0, this._init = !1;
                }
                _getBatcher() {
                    return t185.root && t185.root.batcher2D ? t185.root.batcher2D : (y125(9301), null);
                }
            }).prototype, "color", [h152], Object.getOwnPropertyDescriptor(z202.prototype, "color"), z202.prototype), y202 = z202)) || y202) || y202;
            var b203;
            g125({
                UIStaticBatch: a203,
                UIStaticBatchComponent: a203
            });
            let c203 = g125("LabelShadow", e151("cc.LabelShadow")(b203 = g151(110)(b203 = f151(z192)(b203 = class extends a165 {
                get color() {
                    return this.node.getComponent(z192).shadowColor;
                }
                set color(l947) {
                    this.node.getComponent(z192).shadowColor = l947;
                }
                get offset() {
                    return this.node.getComponent(z192).shadowOffset;
                }
                set offset(k947) {
                    this.node.getComponent(z192).shadowOffset = k947;
                }
                get blur() {
                    return this.node.getComponent(z192).shadowBlur;
                }
                set blur(j947) {
                    this.node.getComponent(z192).shadowBlur = j947;
                }
                onEnable() {
                    this.node.getComponent(z192).enableShadow = !0;
                }
                onDisable() {
                    this.node.getComponent(z192).enableShadow = !1;
                }
            }) || b203) || b203) || b203);
            var d203, e203, f203;
            let g203 = e151("cc.UIOpacity")(d203 = g151(110)(d203 = h151((e203 = class t extends a165 {
                constructor(...i947) {
                    super(...i947), this._setByParent = !1, this._opacity = f203 && f203();
                }
                get opacity() {
                    return this._opacity;
                }
                set opacity(h947) {
                    this._opacity !== h947 && (h947 = z127(h947, 0, 255), this._opacity = h947, this.node._uiProps.localOpacity = h947 / 255, this.setEntityLocalOpacityDirtyRecursively(!0));
                }
                setEntityLocalOpacityDirtyRecursively(y946) {
                    t.setEntityLocalOpacityDirtyRecursively(this.node, y946, 1, !1);
                }
                static setEntityLocalOpacityDirtyRecursively(z946, a947, b947, c947) {
                    if (!z946.isValid)
                        return;
                    const d947 = z946._uiProps.uiComp, e947 = z946.getComponent(t);
                    let f947 = b947;
                    d947 && d947.color ? (d947.renderEntity.colorDirty = a947, e947 ? (d947.renderEntity.localOpacity = f947 * e947.opacity / 255, e947._setByParent = c947) : d947.renderEntity.localOpacity = f947, d947.node._uiProps.localOpacity = d947.renderEntity.localOpacity, f947 = 1) : e947 && (f947 = f947 * e947.opacity / 255, e947._setByParent = c947);
                    for (let g947 = 0; g947 < z946.children.length; g947++)
                        t.setEntityLocalOpacityDirtyRecursively(z946.children[g947], a947 || f947 < 1, f947, !0);
                }
                onEnable() {
                    this._setByParent || (this.node._uiProps.localOpacity = this._opacity / 255, this.setEntityLocalOpacityDirtyRecursively(!0));
                }
                onDisable() {
                    this._setByParent || (this.node._uiProps.localOpacity = 1, this.setEntityLocalOpacityDirtyRecursively(!0));
                }
            }, f203 = p130(e203.prototype, "_opacity", [j151], function () {
                return 255;
            }), d203 = e203)) || d203) || d203) || d203;
            g125({
                UIOpacity: g203,
                UIOpacityComponent: g203
            }), s143.MaskComponent = m197, a127(m197, "cc.MaskComponent"), s143.LabelComponent = z192, a127(z192, "cc.LabelComponent"), s143.LabelOutlineComponent = r197, a127(r197, "cc.LabelOutlineComponent"), s143.RichTextComponent = t202, a127(t202, "cc.RichTextComponent"), s143.SpriteComponent = w196, a127(w196, "cc.SpriteComponent"), s143.UIModelComponent = v202, a127(v202, "cc.UIModelComponent"), s143.GraphicsComponent = x195, a127(x195, "cc.GraphicsComponent"), a127(a203, "cc.UIStaticBatchComponent"), a127(g203, "cc.UIOpacityComponent"), k144(m197.prototype, "Mask", [{
                    name: "graphics",
                    newName: "subComp",
                    target: m197.prototype,
                    targetName: "Mask"
                }]), k144(l197, "MaskType", [{
                    name: "RECT",
                    newName: "GRAPHICS_RECT",
                    target: l197,
                    targetName: "MaskType"
                }, {
                    name: "ELLIPSE",
                    newName: "GRAPHICS_ELLIPSE",
                    target: l197,
                    targetName: "MaskType"
                }, {
                    name: "IMAGE_STENCIL",
                    newName: "SPRITE_STENCIL",
                    target: l197,
                    targetName: "MaskType"
                }]), m144(r197.prototype, "LabelOutline", [{
                    name: "width",
                    suggest: "Please use Label.outlineWidth instead."
                }, {
                    name: "color",
                    suggest: "Please use Label.outlineColor instead."
                }]), m144(c203.prototype, "LabelShadow", [{
                    name: "color",
                    suggest: "Please use Label.shadowColor instead."
                }, {
                    name: "offset",
                    suggest: "Please use Label.shadowOffset instead."
                }, {
                    name: "blur",
                    suggest: "Please use Label.shadowBlur instead."
                }]);
            class h203 {
                constructor(v946, w946, x946) {
                    this.i = void 0, this.x = void 0, this.y = void 0, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1, this.i = v946, this.x = w946, this.y = x946;
                }
            }
            function f138(g946, h946, i946, j946, k946) {
                let l946 = 0, m946 = null;
                if (k946 === function (o946, p946, q946, r946) {
                    let s946 = 0;
                    for (let t946 = p946, u946 = q946 - r946; t946 < q946; t946 += r946)
                        s946 += (o946[u946] - o946[t946]) * (o946[t946 + 1] + o946[u946 + 1]), u946 = t946;
                    return s946;
                }(g946, h946, i946, j946) > 0)
                    for (l946 = h946; l946 < i946; l946 += j946)
                        m946 = x138(l946, g946[l946], g946[l946 + 1], m946);
                else
                    for (l946 = i946 - j946; l946 >= h946; l946 -= j946)
                        m946 = x138(l946, g946[l946], g946[l946 + 1], m946);
                return m946 && t138(m946, m946.next) && (y138(m946), m946 = m946.next), m946;
            }
            function g138(c946, d946 = null) {
                if (!c946)
                    return c946;
                d946 || (d946 = c946);
                let e946 = c946, f946 = !1;
                do {
                    if (f946 = !1, e946.steiner || !t138(e946, e946.next) && 0 !== s138(e946.prev, e946, e946.next))
                        e946 = e946.next;
                    else {
                        if (y138(e946), e946 = d946 = e946.prev, e946 === e946.next)
                            return null;
                        f946 = !0;
                    }
                } while (f946 || e946 !== d946);
                return d946;
            }
            function h138(b945, c945, d945, e945, f945, g945, h945 = 0) {
                if (!b945)
                    return;
                !h945 && g945 && function (m945, n945, o945, p945) {
                    let q945 = m945;
                    do {
                        null === q945.z && (q945.z = o138(q945.x, q945.y, n945, o945, p945)), q945.prevZ = q945.prev, q945.nextZ = q945.next, q945 = q945.next;
                    } while (q945 !== m945);
                    q945.prevZ.nextZ = null, q945.prevZ = null, function (s945) {
                        let t945 = 0, u945 = null, v945 = null, w945 = null, x945 = null, y945 = 0, z945 = 0, a946 = 0, b946 = 1;
                        do {
                            for (u945 = s945, s945 = null, x945 = null, y945 = 0; u945;) {
                                for (y945++, v945 = u945, z945 = 0, t945 = 0; t945 < b946 && (z945++, v945 = v945.nextZ, v945); t945++)
                                    ;
                                for (a946 = b946; z945 > 0 || a946 > 0 && v945;)
                                    0 === z945 ? (w945 = v945, v945 = v945.nextZ, a946--) : 0 !== a946 && v945 ? u945.z <= v945.z ? (w945 = u945, u945 = u945.nextZ, z945--) : (w945 = v945, v945 = v945.nextZ, a946--) : (w945 = u945, u945 = u945.nextZ, z945--), x945 ? x945.nextZ = w945 : s945 = w945, w945.prevZ = x945, x945 = w945;
                                u945 = v945;
                            }
                            x945.nextZ = null, b946 *= 2;
                        } while (y945 > 1);
                    }(q945);
                }(b945, e945, f945, g945);
                let i945 = b945, j945 = null, k945 = null;
                for (; b945.prev !== b945.next;)
                    if (j945 = b945.prev, k945 = b945.next, g945 ? j138(b945, e945, f945, g945) : i138(b945))
                        c945.push(j945.i / d945), c945.push(b945.i / d945), c945.push(k945.i / d945), y138(b945), b945 = k945.next, i945 = k945.next;
                    else if ((b945 = k945) === i945) {
                        h945 ? 1 === h945 ? h138(b945 = k138(b945, c945, d945), c945, d945, e945, f945, g945, 2) : 2 === h945 && l138(b945, c945, d945, e945, f945, g945) : h138(g138(b945), c945, d945, e945, f945, g945, 1);
                        break;
                    }
            }
            function i138(w944) {
                const x944 = w944.prev, y944 = w944, z944 = w944.next;
                if (s138(x944, y944, z944) >= 0)
                    return !1;
                let a945 = w944.next.next;
                for (; a945 !== w944.prev;) {
                    if (q138(x944.x, x944.y, y944.x, y944.y, z944.x, z944.y, a945.x, a945.y) && s138(a945.prev, a945, a945.next) >= 0)
                        return !1;
                    a945 = a945.next;
                }
                return !0;
            }
            function j138(i944, j944, k944, l944) {
                const m944 = i944.prev, n944 = i944, o944 = i944.next;
                if (s138(m944, n944, o944) >= 0)
                    return !1;
                const p944 = m944.x < n944.x ? m944.x < o944.x ? m944.x : o944.x : n944.x < o944.x ? n944.x : o944.x, q944 = m944.y < n944.y ? m944.y < o944.y ? m944.y : o944.y : n944.y < o944.y ? n944.y : o944.y, r944 = m944.x > n944.x ? m944.x > o944.x ? m944.x : o944.x : n944.x > o944.x ? n944.x : o944.x, s944 = m944.y > n944.y ? m944.y > o944.y ? m944.y : o944.y : n944.y > o944.y ? n944.y : o944.y, t944 = o138(p944, q944, j944, k944, l944), u944 = o138(r944, s944, j944, k944, l944);
                let v944 = i944.nextZ;
                for (; v944 && v944.z <= u944;) {
                    if (v944 !== i944.prev && v944 !== i944.next && q138(m944.x, m944.y, n944.x, n944.y, o944.x, o944.y, v944.x, v944.y) && s138(v944.prev, v944, v944.next) >= 0)
                        return !1;
                    v944 = v944.nextZ;
                }
                for (v944 = i944.prevZ; v944 && v944.z >= t944;) {
                    if (v944 !== i944.prev && v944 !== i944.next && q138(m944.x, m944.y, n944.x, n944.y, o944.x, o944.y, v944.x, v944.y) && s138(v944.prev, v944, v944.next) >= 0)
                        return !1;
                    v944 = v944.prevZ;
                }
                return !0;
            }
            function k138(c944, d944, e944) {
                let f944 = c944;
                do {
                    const g944 = f944.prev, h944 = f944.next.next;
                    !t138(g944, h944) && u138(g944, f944, f944.next, h944) && v138(g944, h944) && v138(h944, g944) && (d944.push(g944.i / e944), d944.push(f944.i / e944), d944.push(h944.i / e944), y138(f944), y138(f944.next), f944 = c944 = h944), f944 = f944.next;
                } while (f944 !== c944);
                return f944;
            }
            function l138(t943, u943, v943, w943, x943, y943) {
                let z943 = t943;
                do {
                    let a944 = z943.next.next;
                    for (; a944 !== z943.prev;) {
                        if (z943.i !== a944.i && r138(z943, a944)) {
                            let b944 = w138(z943, a944);
                            return z943 = g138(z943, z943.next), b944 = g138(b944, b944.next), h138(z943, u943, v943, w943, x943, y943), void h138(b944, u943, v943, w943, x943, y943);
                        }
                        a944 = a944.next;
                    }
                    z943 = z943.next;
                } while (z943 !== t943);
            }
            function m138(r943, s943) {
                return r943.x - s943.x;
            }
            function n138(a943, b943) {
                if (b943 = function (e943, f943) {
                    let g943 = f943;
                    const h943 = e943.x, i943 = e943.y;
                    let j943 = -1 / 0, k943 = null;
                    do {
                        if (i943 <= g943.y && i943 >= g943.next.y) {
                            const q943 = g943.x + (i943 - g943.y) * (g943.next.x - g943.x) / (g943.next.y - g943.y);
                            if (q943 <= h943 && q943 > j943) {
                                if (j943 = q943, q943 === h943) {
                                    if (i943 === g943.y)
                                        return g943;
                                    if (i943 === g943.next.y)
                                        return g943.next;
                                }
                                k943 = g943.x < g943.next.x ? g943 : g943.next;
                            }
                        }
                        g943 = g943.next;
                    } while (g943 !== f943);
                    if (!k943)
                        return null;
                    if (h943 === j943)
                        return k943.prev;
                    const l943 = k943, m943 = k943.x, n943 = k943.y;
                    let o943, p943 = 1 / 0;
                    for (g943 = k943.next; g943 !== l943;)
                        h943 >= g943.x && g943.x >= m943 && q138(i943 < n943 ? h943 : j943, i943, m943, n943, i943 < n943 ? j943 : h943, i943, g943.x, g943.y) && (o943 = Math.abs(i943 - g943.y) / (h943 - g943.x), (o943 < p943 || o943 === p943 && g943.x > k943.x) && v138(g943, e943) && (k943 = g943, p943 = o943)), g943 = g943.next;
                    return k943;
                }(a943, b943)) {
                    const d943 = w138(b943, a943);
                    g138(d943, d943.next);
                }
            }
            function o138(v942, w942, x942, y942, z942) {
                return (v942 = 1431655765 & ((v942 = 858993459 & ((v942 = 252645135 & ((v942 = 16711935 & ((v942 = 32767 * (v942 - x942) / z942) | v942 << 8)) | v942 << 4)) | v942 << 2)) | v942 << 1)) | (w942 = 1431655765 & ((w942 = 858993459 & ((w942 = 252645135 & ((w942 = 16711935 & ((w942 = 32767 * (w942 - y942) / z942) | w942 << 8)) | w942 << 4)) | w942 << 2)) | w942 << 1)) << 1;
            }
            function p138(s942) {
                let t942 = s942, u942 = s942;
                do {
                    t942.x < u942.x && (u942 = t942), t942 = t942.next;
                } while (t942 !== s942);
                return u942;
            }
            function q138(k942, l942, m942, n942, o942, p942, q942, r942) {
                return (o942 - q942) * (l942 - r942) - (k942 - q942) * (p942 - r942) >= 0 && (k942 - q942) * (n942 - r942) - (m942 - q942) * (l942 - r942) >= 0 && (m942 - q942) * (p942 - r942) - (o942 - q942) * (n942 - r942) >= 0;
            }
            function r138(x941, y941) {
                return x941.next.i !== y941.i && x941.prev.i !== y941.i && !function (h942, i942) {
                    let j942 = h942;
                    do {
                        if (j942.i !== h942.i && j942.next.i !== h942.i && j942.i !== i942.i && j942.next.i !== i942.i && u138(j942, j942.next, h942, i942))
                            return !0;
                        j942 = j942.next;
                    } while (j942 !== h942);
                    return !1;
                }(x941, y941) && v138(x941, y941) && v138(y941, x941) && function (b942, c942) {
                    let d942 = b942, e942 = !1;
                    const f942 = (b942.x + c942.x) / 2, g942 = (b942.y + c942.y) / 2;
                    do {
                        d942.y > g942 != d942.next.y > g942 && f942 < (d942.next.x - d942.x) * (g942 - d942.y) / (d942.next.y - d942.y) + d942.x && (e942 = !e942), d942 = d942.next;
                    } while (d942 !== b942);
                    return e942;
                }(x941, y941);
            }
            function s138(u941, v941, w941) {
                return (v941.y - u941.y) * (w941.x - v941.x) - (v941.x - u941.x) * (w941.y - v941.y);
            }
            function t138(s941, t941) {
                return s941.x === t941.x && s941.y === t941.y;
            }
            function u138(o941, p941, q941, r941) {
                return !!(t138(o941, p941) && t138(q941, r941) || t138(o941, r941) && t138(q941, p941)) || s138(o941, p941, q941) > 0 != s138(o941, p941, r941) > 0 && s138(q941, r941, o941) > 0 != s138(q941, r941, p941) > 0;
            }
            function v138(m941, n941) {
                return s138(m941.prev, m941, m941.next) < 0 ? s138(m941, n941, m941.next) >= 0 && s138(m941, m941.prev, n941) >= 0 : s138(m941, n941, m941.prev) < 0 || s138(m941, m941.next, n941) < 0;
            }
            function w138(g941, h941) {
                const i941 = new h203(g941.i, g941.x, g941.y), j941 = new h203(h941.i, h941.x, h941.y), k941 = g941.next, l941 = h941.prev;
                return g941.next = h941, h941.prev = g941, i941.next = k941, k941.prev = i941, j941.next = i941, i941.prev = j941, l941.next = j941, j941.prev = l941, j941;
            }
            function x138(b941, c941, d941, e941) {
                const f941 = new h203(b941, c941, d941);
                return e941 ? (f941.next = e941.next, f941.prev = e941, e941.next.prev = f941, e941.next = f941) : (f941.prev = f941, f941.next = f941), f941;
            }
            function y138(a941) {
                a941.next.prev = a941.prev, a941.prev.next = a941.next, a941.prevZ && (a941.prevZ.nextZ = a941.nextZ), a941.nextZ && (a941.nextZ.prevZ = a941.prevZ);
            }
            function z138(a940, b940, c940) {
                c940 = c940 || 3;
                const d940 = b940 ? b940.length : 0, e940 = d940 ? b940[0] * c940 : a940.length;
                let f940 = f138(a940, 0, e940, c940, !0);
                const g940 = [];
                if (!f940)
                    return g940;
                let h940 = 0, i940 = 0, j940 = 0, k940 = 0, l940 = 0, m940 = 0, n940 = 0;
                if (d940 && (f940 = function (q940, r940, s940, t940) {
                    const u940 = [];
                    let v940 = 0, w940 = 0, x940 = 0, y940 = 0, z940 = null;
                    for (v940 = 0, w940 = r940.length; v940 < w940; v940++)
                        x940 = r940[v940] * t940, y940 = v940 < w940 - 1 ? r940[v940 + 1] * t940 : q940.length, z940 = f138(q940, x940, y940, t940, !1), z940 && (z940 === z940.next && (z940.steiner = !0), u940.push(p138(z940)));
                    if (u940.sort(m138), !s940)
                        return s940;
                    for (v940 = 0; v940 < u940.length; v940++)
                        n138(u940[v940], s940), s940 = g138(s940, s940.next);
                    return s940;
                }(a940, b940, f940, c940)), a940.length > 80 * c940) {
                    h940 = j940 = a940[0], i940 = k940 = a940[1];
                    for (let p940 = c940; p940 < e940; p940 += c940)
                        l940 = a940[p940], m940 = a940[p940 + 1], l940 < h940 && (h940 = l940), m940 < i940 && (i940 = m940), l940 > j940 && (j940 = l940), m940 > k940 && (k940 = m940);
                    n940 = Math.max(j940 - h940, k940 - i940);
                }
                return h138(f940, g940, c940, h940, i940, n940), g940;
            }
            const i203 = Math.PI, j203 = Math.min, k203 = Math.max, l203 = Math.ceil, m203 = Math.acos, n203 = Math.cos, o203 = Math.sin, p203 = Math.atan2;
            let q203 = null, r203 = null;
            const s203 = new a147(), t203 = [];
            for (let z939 = 0; z939 < 4; z939++)
                t203.push(new w146());
            function a139(w939, x939, y939) {
                return w939 < x939 ? x939 : w939 > y939 ? y939 : w939;
            }
            const u203 = {
                useModel: !0,
                updateRenderData(v939) {
                    v939.renderData && (v939.renderData.material = v939.getMaterialInstance(0));
                },
                fillBuffers(t939, u939) { },
                renderIA(r939, s939) { },
                getRenderData(l939, m939) {
                    if (!r203)
                        return null;
                    const n939 = r203.getRenderDataList();
                    let o939 = n939[r203.dataOffset];
                    if (!o939)
                        return null;
                    let p939 = o939;
                    const q939 = p939 ? p939.vertexStart + m939 : 0;
                    return (q939 > 65535 || 3 * q939 > 131070) && (++r203.dataOffset, r203.dataOffset < n939.length ? o939 = n939[r203.dataOffset] : (o939 = r203.requestRenderData(), n939[r203.dataOffset] = o939), p939 = o939), p939 && p939.vertexCount < q939 && p939.request(m939, 3 * m939), o939;
                },
                stroke(k939) {
                    a147.copy(s203, k939.strokeColor), k939.impl && (this._flattenPaths(k939.impl), this._expandStroke(k939), k939.impl.updatePathOffset = !0, this.end(k939));
                },
                fill(j939) {
                    a147.copy(s203, j939.fillColor), this._expandFill(j939), j939.impl && (j939.impl.updatePathOffset = !0), this.end(j939);
                },
                end(i939) {
                    i939.markForUpdateRenderData();
                },
                _expandStroke(s937) {
                    const t937 = .5 * s937.lineWidth, u937 = s937.lineCap, v937 = s937.lineJoin, w937 = s937.miterLimit;
                    if (r203 = s937.impl, !r203)
                        return;
                    const x937 = function (e939, f939, g939) {
                        const h939 = 2 * m203(e939 / (e939 + g939));
                        return k203(2, l203(f939 / h939));
                    }(t937, i203, r203.tessTol);
                    this._calculateJoins(r203, t937, v937, w937);
                    const y937 = r203.paths;
                    let z937 = 0;
                    for (let a939 = r203.pathOffset, b939 = r203.pathLength; a939 < b939; a939++) {
                        const c939 = y937[a939], d939 = c939.points.length;
                        v937 === u194.ROUND ? z937 += 2 * (d939 + c939.bevel * (x937 + 2) + 1) : z937 += 2 * (d939 + 5 * c939.bevel + 1), c939.closed || (u937 === t194.ROUND ? z937 += 2 * (2 * x937 + 2) : z937 += 12);
                    }
                    const a938 = q203 = this.getRenderData(s937, z937);
                    if (!a938)
                        return;
                    const b938 = a938.vData, c938 = a938.iData;
                    for (let e938 = r203.pathOffset, f938 = r203.pathLength; e938 < f938; e938++) {
                        const g938 = y937[e938], h938 = g938.points, i938 = h938.length, j938 = a938.vertexStart;
                        let k938, l938, m938 = 0, n938 = 0;
                        const o938 = g938.closed;
                        if (o938 ? (k938 = h938[i938 - 1], l938 = h938[0], m938 = 0, n938 = i938) : (k938 = h938[0], l938 = h938[1], m938 = 1, n938 = i938 - 1), l938 = l938 || k938, !o938) {
                            const x938 = new e195(l938.x, l938.y);
                            x938.subtract(k938), x938.normalize();
                            const y938 = x938.x, z938 = x938.y;
                            u937 === t194.BUTT ? this._buttCapStart(k938, y938, z938, t937, 0) : u937 === t194.SQUARE ? this._buttCapStart(k938, y938, z938, t937, t937) : u937 === t194.ROUND && this._roundCapStart(k938, y938, z938, t937, x937);
                        }
                        for (let w938 = m938; w938 < n938; ++w938)
                            v937 === u194.ROUND ? this._roundJoin(k938, l938, t937, t937, x937) : 0 != (l938.flags & (v194.PT_BEVEL | v194.PT_INNERBEVEL)) ? this._bevelJoin(k938, l938, t937, t937) : (this._vSet(l938.x + l938.dmx * t937, l938.y + l938.dmy * t937, 1), this._vSet(l938.x - l938.dmx * t937, l938.y - l938.dmy * t937, -1)), k938 = l938, l938 = h938[w938 + 1];
                        if (o938) {
                            const v938 = 8 * j938;
                            this._vSet(b938[v938], b938[v938 + 1], 1), this._vSet(b938[v938 + 8], b938[v938 + 8 + 1], -1);
                        }
                        else {
                            const s938 = new e195(l938.x, l938.y);
                            s938.subtract(k938), s938.normalize();
                            const t938 = s938.x, u938 = s938.y;
                            u937 === t194.BUTT ? this._buttCapEnd(l938, t938, u938, t937, 0) : u937 === t194.SQUARE ? this._buttCapEnd(l938, t938, u938, t937, t937) : u937 === t194.ROUND && this._roundCapEnd(l938, t938, u938, t937, x937);
                        }
                        let p938 = a938.indexStart;
                        for (let q938 = j938 + 2, r938 = a938.vertexStart; q938 < r938; q938++)
                            c938[p938++] = q938 - 2, c938[p938++] = q938 - 1, c938[p938++] = q938;
                        a938.indexStart = p938;
                    }
                    q203 = null, r203 = null;
                },
                _expandFill(r936) {
                    if (r203 = r936.impl, !r203)
                        return;
                    const s936 = r203.paths;
                    let t936 = 0;
                    for (let q937 = r203.pathOffset, r937 = r203.pathLength; q937 < r937; q937++)
                        t936 += s936[q937].points.length;
                    const u936 = q203 = this.getRenderData(r936, t936);
                    if (!u936)
                        return;
                    const v936 = u936, w936 = v936.vData, x936 = v936.iData;
                    for (let y936 = r203.pathOffset, z936 = r203.pathLength; y936 < z936; y936++) {
                        const a937 = s936[y936], b937 = a937.points, c937 = b937.length;
                        if (0 === c937)
                            continue;
                        const d937 = u936.vertexStart;
                        for (let p937 = 0; p937 < c937; ++p937)
                            this._vSet(b937[p937].x, b937[p937].y);
                        let e937 = u936.indexStart;
                        if (a937.complex) {
                            const i937 = [];
                            for (let m937 = d937, n937 = u936.vertexStart; m937 < n937; m937++) {
                                let o937 = 8 * m937;
                                i937.push(w936[o937++]), i937.push(w936[o937++]), i937.push(w936[o937++]);
                            }
                            const j937 = z138(i937, null, 3);
                            if (!j937 || 0 === j937.length)
                                continue;
                            for (let k937 = 0, l937 = j937.length; k937 < l937; k937++)
                                x936[e937++] = j937[k937] + d937;
                        }
                        else {
                            const f937 = d937;
                            for (let g937 = d937 + 2, h937 = v936.vertexStart; g937 < h937; g937++)
                                x936[e937++] = f937, x936[e937++] = g937 - 1, x936[e937++] = g937;
                        }
                        v936.indexStart = e937;
                    }
                    q203 = null, r203 = null;
                },
                _calculateJoins(v935, w935, x935, y935) {
                    let z935 = 0;
                    w935 > 0 && (z935 = 1 / w935);
                    const a936 = v935.paths;
                    for (let b936 = v935.pathOffset, c936 = v935.pathLength; b936 < c936; b936++) {
                        const d936 = a936[b936], e936 = d936.points, f936 = e936.length;
                        let g936 = e936[f936 - 1], h936 = e936[0];
                        d936.bevel = 0;
                        for (let i936 = 0; i936 < f936; i936++) {
                            let j936 = 0, k936 = 0, l936 = 0;
                            const m936 = g936.dy, n936 = -g936.dx, o936 = h936.dy, p936 = -h936.dx;
                            if (h936.dmx = .5 * (m936 + o936), h936.dmy = .5 * (n936 + p936), j936 = h936.dmx * h936.dmx + h936.dmy * h936.dmy, j936 > 1e-6) {
                                let q936 = 1 / j936;
                                q936 > 600 && (q936 = 600), h936.dmx *= q936, h936.dmy *= q936;
                            }
                            k936 = h936.dx * g936.dy - g936.dx * h936.dy, k936 > 0 && (h936.flags |= v194.PT_LEFT), l936 = k203(11, j203(g936.len, h936.len) * z935), j936 * l936 * l936 < 1 && (h936.flags |= v194.PT_INNERBEVEL), h936.flags & v194.PT_CORNER && (j936 * y935 * y935 < 1 || x935 === u194.BEVEL || x935 === u194.ROUND) && (h936.flags |= v194.PT_BEVEL), 0 != (h936.flags & (v194.PT_BEVEL | v194.PT_INNERBEVEL)) && d936.bevel++, g936 = h936, h936 = e936[i936 + 1];
                        }
                    }
                },
                _flattenPaths(k935) {
                    const l935 = k935.paths;
                    for (let m935 = k935.pathOffset, n935 = k935.pathLength; m935 < n935; m935++) {
                        const o935 = l935[m935], p935 = o935.points;
                        let q935 = p935[p935.length - 1], r935 = p935[0];
                        p935.length > 2 && q935.equals(r935) && (o935.closed = !0, p935.pop(), q935 = p935[p935.length - 1]);
                        for (let s935 = 0, t935 = p935.length; s935 < t935; s935++) {
                            const u935 = new e195(r935.x, r935.y);
                            u935.subtract(q935), q935.len = u935.length(), (u935.x || u935.y) && u935.normalize(), q935.dx = u935.x, q935.dy = u935.y, q935 = r935, r935 = p935[s935 + 1];
                        }
                    }
                },
                _chooseBevel(a935, b935, c935, d935) {
                    const e935 = c935.x, f935 = c935.y;
                    let g935 = 0, h935 = 0, i935 = 0, j935 = 0;
                    return 0 !== a935 ? (g935 = e935 + b935.dy * d935, h935 = f935 - b935.dx * d935, i935 = e935 + c935.dy * d935, j935 = f935 - c935.dx * d935) : (g935 = i935 = e935 + c935.dmx * d935, h935 = j935 = f935 + c935.dmy * d935), [g935, h935, i935, j935];
                },
                _buttCapStart(r934, s934, t934, u934, v934) {
                    const w934 = r934.x - s934 * v934, x934 = r934.y - t934 * v934, y934 = t934, z934 = -s934;
                    this._vSet(w934 + y934 * u934, x934 + z934 * u934, 1), this._vSet(w934 - y934 * u934, x934 - z934 * u934, -1);
                },
                _buttCapEnd(i934, j934, k934, l934, m934) {
                    const n934 = i934.x + j934 * m934, o934 = i934.y + k934 * m934, p934 = k934, q934 = -j934;
                    this._vSet(n934 + p934 * l934, o934 + q934 * l934, 1), this._vSet(n934 - p934 * l934, o934 - q934 * l934, -1);
                },
                _roundCapStart(v933, w933, x933, y933, z933) {
                    const a934 = v933.x, b934 = v933.y, c934 = x933, d934 = -w933;
                    for (let e934 = 0; e934 < z933; e934++) {
                        const f934 = e934 / (z933 - 1) * i203, g934 = n203(f934) * y933, h934 = o203(f934) * y933;
                        this._vSet(a934 - c934 * g934 - w933 * h934, b934 - d934 * g934 - x933 * h934, 1), this._vSet(a934, b934, 0);
                    }
                    this._vSet(a934 + c934 * y933, b934 + d934 * y933, 1), this._vSet(a934 - c934 * y933, b934 - d934 * y933, -1);
                },
                _roundCapEnd(i933, j933, k933, l933, m933) {
                    const n933 = i933.x, o933 = i933.y, p933 = k933, q933 = -j933;
                    this._vSet(n933 + p933 * l933, o933 + q933 * l933, 1), this._vSet(n933 - p933 * l933, o933 - q933 * l933, -1);
                    for (let r933 = 0; r933 < m933; r933++) {
                        const s933 = r933 / (m933 - 1) * i203, t933 = n203(s933) * l933, u933 = o203(s933) * l933;
                        this._vSet(n933, o933, 0), this._vSet(n933 - p933 * t933 + j933 * u933, o933 - q933 * t933 + k933 * u933, 1);
                    }
                },
                _roundJoin(z931, a932, b932, c932, d932) {
                    const e932 = z931.dy, f932 = -z931.dx, g932 = a932.dy, h932 = -a932.dx, i932 = a932.x, j932 = a932.y;
                    if (0 != (a932.flags & v194.PT_LEFT)) {
                        const w932 = this._chooseBevel(a932.flags & v194.PT_INNERBEVEL, z931, a932, b932), x932 = w932[0], y932 = w932[1], z932 = w932[2], a933 = w932[3], b933 = p203(-f932, -e932);
                        let c933 = p203(-h932, -g932);
                        c933 > b933 && (c933 -= 2 * i203), this._vSet(x932, y932, 1), this._vSet(i932 - e932 * c932, a932.y - f932 * c932, -1);
                        const d933 = a139(l203((b933 - c933) / i203) * d932, 2, d932);
                        for (let e933 = 0; e933 < d933; e933++) {
                            const f933 = b933 + e933 / (d933 - 1) * (c933 - b933), g933 = i932 + n203(f933) * c932, h933 = j932 + o203(f933) * c932;
                            this._vSet(i932, j932, 0), this._vSet(g933, h933, -1);
                        }
                        this._vSet(z932, a933, 1), this._vSet(i932 - g932 * c932, j932 - h932 * c932, -1);
                    }
                    else {
                        const k932 = this._chooseBevel(a932.flags & v194.PT_INNERBEVEL, z931, a932, -c932), l932 = k932[0], m932 = k932[1], n932 = k932[2], o932 = k932[3], p932 = p203(f932, e932);
                        let q932 = p203(h932, g932);
                        q932 < p932 && (q932 += 2 * i203), this._vSet(i932 + e932 * c932, j932 + f932 * c932, 1), this._vSet(l932, m932, -1);
                        const r932 = a139(l203((q932 - p932) / i203) * d932, 2, d932);
                        for (let s932 = 0; s932 < r932; s932++) {
                            const t932 = p932 + s932 / (r932 - 1) * (q932 - p932), u932 = i932 + n203(t932) * b932, v932 = j932 + o203(t932) * b932;
                            this._vSet(u932, v932, 1), this._vSet(i932, j932, 0);
                        }
                        this._vSet(i932 + g932 * c932, j932 + h932 * c932, 1), this._vSet(n932, o932, -1);
                    }
                },
                _bevelJoin(h931, i931, j931, k931) {
                    let l931 = 0, m931 = 0, n931 = 0, o931 = 0, p931 = 0, q931 = 0, r931 = 0, s931 = 0;
                    const t931 = h931.dy, u931 = -h931.dx, v931 = i931.dy, w931 = -i931.dx;
                    if (i931.flags & v194.PT_LEFT) {
                        const y931 = this._chooseBevel(i931.flags & v194.PT_INNERBEVEL, h931, i931, j931);
                        p931 = y931[0], q931 = y931[1], r931 = y931[2], s931 = y931[3], this._vSet(p931, q931, 1), this._vSet(i931.x - t931 * k931, i931.y - u931 * k931, -1), this._vSet(r931, s931, 1), this._vSet(i931.x - v931 * k931, i931.y - w931 * k931, -1);
                    }
                    else {
                        const x931 = this._chooseBevel(i931.flags & v194.PT_INNERBEVEL, h931, i931, -k931);
                        l931 = x931[0], m931 = x931[1], n931 = x931[2], o931 = x931[3], this._vSet(i931.x + t931 * j931, i931.y + u931 * j931, 1), this._vSet(l931, m931, -1), this._vSet(i931.x + v931 * j931, i931.y + w931 * j931, 1), this._vSet(n931, o931, -1);
                    }
                },
                _vSet(b931, c931, d931 = 0) {
                    if (!q203)
                        return;
                    const e931 = q203;
                    let f931 = 8 * e931.vertexStart;
                    const g931 = e931.vData;
                    g931[f931++] = b931, g931[f931++] = c931, g931[f931++] = 0, a147.toArray(g931, s203, f931), f931 += 4, g931[f931++] = d931, e931.vertexStart++;
                }
            }, v203 = g125("graphicsAssembler", {
                getAssembler: () => u203
            });
            x195.Assembler = v203;
            const w203 = ["left", "center", "right"], x203 = 2048, y203 = (1 / 255).toFixed(3);
            class z203 {
                constructor() {
                    this.char = "", this.valid = !0, this.x = 0, this.y = 0, this.line = 0, this.hash = "";
                }
            }
            class a204 {
                constructor() {
                    this._context = null, this._canvas = null, this._canvasData = null, this._lettersInfo = [], this._tmpRect = new y147(), this._maxFontSize = 100, this._fontScale = 1, this._canvasData = b188.getInstance().get(), this._canvas = this._canvasData.canvas, this._context = this._canvasData.context;
                }
                destroy() {
                    b188.getInstance().put(this._canvasData), this._lettersInfo.length = 0;
                }
                processingString(s930, t930, u930, v930, w930, x930) {
                    if (s930)
                        t930.fntConfig ? this._fontScale = 1 : this._fontScale = this._getStyleFontScale(t930.originFontSize, t930.fontScale), i188.fontScale = this._fontScale, this._setupBMFontOverflowMetrics(u930, v930), this._updateFontScale(t930), this._computeHorizontalKerningForText(t930, u930, w930), this._alignText(t930, u930, v930, w930);
                    else {
                        let y930 = 0;
                        for (this._fontScale = this._getStyleFontScale(t930.fontSize, t930.fontScale), this._updatePaddingRect(t930, v930), this._calculateLabelFont(t930, u930, v930, w930); (v930.canvasSize.width > x203 || v930.canvasSize.height > x203) && y930 <= 3;) {
                            if (y930++, y930 > 3)
                                this._fontScale = 1;
                            else {
                                const z930 = Math.max(v930.canvasSize.width, v930.canvasSize.height), a931 = x203 / z930;
                                this._fontScale *= a931, this._fontScale = Math.max(1, this._fontScale);
                            }
                            this._updatePaddingRect(t930, v930), this._calculateLabelFont(t930, u930, v930, w930);
                        }
                    }
                    x930 && (x930 = v930.parsedString);
                }
                generateRenderInfo(l930, m930, n930, o930, p930, q930, r930) {
                    l930 ? (this._computeAlignmentOffset(m930, n930, o930), this.generateVertexData(l930, m930, n930, o930, p930, q930, r930)) : (this._updateLabelDimensions(m930, n930, o930), this._updateTexture(m930, n930, o930, p930), this.generateVertexData(l930, m930, n930, o930, p930, q930, r930));
                }
                setCanvasUsed(j930, k930) {
                    this._canvas = j930, this._context = k930;
                }
                _getStyleFontScale(g930, h930) {
                    let i930 = h930;
                    return i930 * g930 > this._maxFontSize && g930 < this._maxFontSize && (i930 = this._maxFontSize / g930), i930 < 1 && (i930 = 1), i930;
                }
                _calculateLabelFont(s929, t929, u929, v929) {
                    if (!this._context)
                        return;
                    s929.actualFontSize = s929.fontSize * this._fontScale;
                    const w929 = v929.split("\n"), x929 = u929.parsedString = w929, y929 = this._getFontDesc(s929.actualFontSize, s929.fontFamily, s929.isBold, s929.isItalic);
                    switch ((this._context.font = s929.fontDesc = y929, t929.overFlow)) {
                        case x192.NONE:
                            {
                                let a930 = 0, b930 = 0;
                                for (let e930 = 0; e930 < w929.length; ++e930) {
                                    const f930 = o137(this._context, w929[e930], y929);
                                    a930 = a930 > f930 ? a930 : f930;
                                }
                                b930 = (x929.length + q187) * this._getLineHeight(t929.lineHeight, s929.actualFontSize, s929.fontSize);
                                const c930 = a930, d930 = b930;
                                u929.canvasSize.width = c930 + u929.canvasPadding.width * this._fontScale, u929.canvasSize.height = d930 + u929.canvasPadding.height * this._fontScale, u929.nodeContentSize.width = (c930 + u929.contentSizeExtend.width * this._fontScale) / this._fontScale, u929.nodeContentSize.height = (d930 + u929.contentSizeExtend.height * this._fontScale) / this._fontScale;
                                break;
                            }
                        case x192.SHRINK:
                            this._calculateShrinkFont(w929, s929, t929, u929), this._calculateWrapText(w929, s929, t929, u929), u929.canvasSize.width = u929.nodeContentSize.width * this._fontScale, u929.canvasSize.height = u929.nodeContentSize.height * this._fontScale;
                            break;
                        case x192.CLAMP:
                            this._calculateWrapText(w929, s929, t929, u929), u929.canvasSize.width = u929.nodeContentSize.width * this._fontScale, u929.canvasSize.height = u929.nodeContentSize.height * this._fontScale;
                            break;
                        case x192.RESIZE_HEIGHT:
                            {
                                this._calculateWrapText(w929, s929, t929, u929);
                                const z929 = (u929.parsedString.length + q187) * this._getLineHeight(t929.lineHeight, s929.actualFontSize, s929.fontSize);
                                u929.canvasSize.width = u929.nodeContentSize.width * this._fontScale, u929.canvasSize.height = z929 + u929.canvasPadding.height * this._fontScale, u929.nodeContentSize.height = (z929 + u929.contentSizeExtend.height * this._fontScale) / this._fontScale;
                                break;
                            }
                    }
                }
                _getFontDesc(n929, o929, p929, q929) {
                    let r929 = `${n929.toString()}px `;
                    return r929 += o929, p929 && (r929 = `bold ${r929}`), q929 && (r929 = `italic ${r929}`), r929;
                }
                _getLineHeight(j929, k929, l929) {
                    let m929 = j929;
                    return m929 = 0 === m929 ? k929 : m929 * k929 / l929, m929;
                }
                _calculateShrinkFont(p928, q928, r928, s928) {
                    if (!this._context)
                        return;
                    let t928 = this._getFontDesc(q928.actualFontSize, q928.fontFamily, q928.isBold, q928.isItalic);
                    this._context.font = t928;
                    const u928 = this._calculateParagraphLength(p928, this._context, t928);
                    let v928 = 0, w928 = 0, x928 = 0, y928 = q928.actualFontSize;
                    if (r928.wrapping) {
                        const b929 = s928.nodeContentSize.width * this._fontScale, c929 = s928.nodeContentSize.height * this._fontScale;
                        if (b929 < 0 || c929 < 0)
                            return;
                        w928 = c929 + 1;
                        let d929 = [], e929 = 0, f929 = 0 | q928.actualFontSize + 1, g929 = 0;
                        for (; e929 < f929;) {
                            if (g929 = e929 + f929 + 1 >> 1, g929 <= 0) {
                                x125(4003);
                                break;
                            }
                            y928 = g929, t928 = this._getFontDesc(y928, q928.fontFamily, q928.isBold, q928.isItalic), this._context.font = t928;
                            const h929 = this._getLineHeight(r928.lineHeight, y928, q928.fontSize);
                            for (w928 = 0, v928 = 0; v928 < p928.length; ++v928) {
                                const i929 = o137(this._context, p928[v928], t928);
                                d929 = s137(p928[v928], i929, b929, this._measureText(this._context, t928)), w928 += d929.length * h929;
                            }
                            w928 > c929 ? f929 = g929 - 1 : e929 = g929;
                        }
                        0 === e929 ? x125(4003) : (y928 = e929, t928 = this._getFontDesc(y928, q928.fontFamily, q928.isBold, q928.isItalic), this._context.font = t928);
                    }
                    else {
                        for (w928 = p928.length * this._getLineHeight(r928.lineHeight, y928, q928.fontSize), v928 = 0; v928 < p928.length; ++v928)
                            x928 < u928[v928] && (x928 = u928[v928]);
                        const z928 = (s928.canvasSize.width - s928.canvasPadding.width) * this._fontScale / x928, a929 = s928.canvasSize.height * this._fontScale / w928;
                        y928 = q928.actualFontSize * Math.min(1, z928, a929) | 0, t928 = this._getFontDesc(y928, q928.fontFamily, q928.isBold, q928.isItalic), this._context.font = t928;
                    }
                    q928.actualFontSize = y928, q928.fontDesc = t928;
                }
                _calculateWrapText(f928, g928, h928, i928) {
                    if (!h928.wrapping || !this._context)
                        return;
                    let j928 = [];
                    const k928 = i928.nodeContentSize.width * this._fontScale, l928 = this._getFontDesc(g928.actualFontSize, g928.fontFamily, g928.isBold, g928.isItalic);
                    this._context.font = l928;
                    for (let m928 = 0; m928 < f928.length; ++m928) {
                        const n928 = o137(this._context, f928[m928], l928), o928 = s137(f928[m928], n928, k928, this._measureText(this._context, l928));
                        j928 = j928.concat(o928);
                    }
                    i928.parsedString = j928, g928.fontDesc = l928;
                }
                _measureText(b928, c928) {
                    return e928 => o137(b928, e928, c928);
                }
                _calculateParagraphLength(v927, w927, x927) {
                    const y927 = [];
                    for (const z927 of v927) {
                        const a928 = o137(w927, z927, x927);
                        y927.push(a928);
                    }
                    return y927;
                }
                _updatePaddingRect(k927, l927) {
                    let m927 = 0, n927 = 0, o927 = 0, p927 = 0, q927 = 0;
                    if (l927.contentSizeExtend.width = l927.contentSizeExtend.height = 0, k927.isOutlined && (q927 = k927.outlineWidth, m927 = n927 = o927 = p927 = q927, l927.contentSizeExtend.width = l927.contentSizeExtend.height = 2 * q927), k927.hasShadow) {
                        const s927 = k927.shadowBlur + q927, t927 = k927.shadowOffsetX, u927 = k927.shadowOffsetY;
                        o927 = Math.max(o927, -t927 + s927), p927 = Math.max(p927, t927 + s927), m927 = Math.max(m927, u927 + s927), n927 = Math.max(n927, -u927 + s927);
                    }
                    if (k927.isItalic) {
                        const r927 = k927.fontSize * Math.tan(.20943951);
                        p927 += r927, l927.contentSizeExtend.width += r927;
                    }
                    l927.canvasPadding.x = o927, l927.canvasPadding.y = m927, l927.canvasPadding.width = o927 + p927, l927.canvasPadding.height = m927 + n927;
                }
                _updateLabelDimensions(h927, i927, j927) {
                    j927.canvasSize.width = Math.min(j927.canvasSize.width, x203), j927.canvasSize.height = Math.min(j927.canvasSize.height, x203), this._canvas.width = j927.canvasSize.width, this._canvas.height = j927.canvasSize.height, this._context.font = h927.fontDesc, this._context.textAlign = w203[i927.horizontalAlign], this._context.textBaseline = "alphabetic";
                }
                _calculateFillTextStartPosition(a927, b927, c927) {
                    let d927 = 0;
                    b927.horizontalAlign === v192.RIGHT ? d927 = c927.canvasSize.width - c927.canvasPadding.width : b927.horizontalAlign === v192.CENTER && (d927 = (c927.canvasSize.width - c927.canvasPadding.width) / 2);
                    const e927 = this._getLineHeight(b927.lineHeight, a927.actualFontSize, a927.fontSize) * (c927.parsedString.length - 1);
                    let f927 = a927.actualFontSize * (1 - q187 / 2);
                    if (b927.verticalAlign !== w192.TOP) {
                        let g927 = e927 + c927.canvasPadding.height + a927.actualFontSize - c927.canvasSize.height;
                        b927.verticalAlign === w192.BOTTOM ? (g927 += q187 / 2 * a927.actualFontSize, f927 -= g927) : f927 -= g927 / 2;
                    }
                    f927 += 0 * a927.actualFontSize, c927.startPosition.set(d927 + c927.canvasPadding.x, f927 + c927.canvasPadding.y);
                }
                _updateTexture(r926, s926, t926, u926) {
                    if (!this._context || !this._canvas)
                        return;
                    this._context.clearRect(0, 0, this._canvas.width, this._canvas.height), this._context.font = r926.fontDesc, this._calculateFillTextStartPosition(r926, s926, t926);
                    const v926 = this._getLineHeight(s926.lineHeight, r926.actualFontSize, r926.fontSize);
                    this._context.lineJoin = "round", r926.isOutlined ? (this._context.fillStyle = `rgba(${r926.outlineColor.r}, ${r926.outlineColor.g}, ${r926.outlineColor.b}, ${y203})`, this._context.fillRect(0, 0, this._canvas.width, this._canvas.height)) : (this._context.fillStyle = `rgba(${r926.color.r}, ${r926.color.g}, ${r926.color.b}, ${y203})`, this._context.fillRect(0, 0, this._canvas.width, this._canvas.height)), this._context.fillStyle = `rgb(${r926.color.r}, ${r926.color.g}, ${r926.color.b})`;
                    const w926 = new s147(t926.startPosition.x, t926.startPosition.y), x926 = w926.x;
                    let y926 = 0;
                    this._drawTextEffect(w926, v926, r926, s926, t926);
                    for (let z926 = 0; z926 < t926.parsedString.length; ++z926)
                        y926 = w926.y + z926 * v926, r926.isOutlined && this._context.strokeText(t926.parsedString[z926], x926, y926), this._context.fillText(t926.parsedString[z926], x926, y926);
                    r926.hasShadow && (this._context.shadowColor = "transparent"), this._uploadTexture(u926);
                }
                _uploadTexture(p926) {
                    if (p926.texture && this._canvas) {
                        let q926;
                        q926 = p926.texture instanceof q186 ? p926.texture.texture : p926.texture, 0 !== this._canvas.width && 0 !== this._canvas.height && (q926.reset({
                            width: this._canvas.width,
                            height: this._canvas.height,
                            mipmapLevel: 1
                        }), q926.uploadData(this._canvas), q926.setWrapMode(v163.CLAMP_TO_EDGE, v163.CLAMP_TO_EDGE), p926.texture instanceof q186 && (p926.texture.rect = new y147(0, 0, this._canvas.width, this._canvas.height), p926.texture._calculateUV()), s143.director.root && s143.director.root.batcher2D && s143.director.root.batcher2D._releaseDescriptorSetCache(q926.getGFXTexture(), q926.getGFXSampler()));
                    }
                }
                _drawTextEffect(d926, e926, f926, g926, h926) {
                    if (!f926.hasShadow && !f926.isOutlined && !f926.isUnderline)
                        return;
                    const i926 = h926.parsedString.length > 1 && f926.hasShadow, j926 = this._measureText(this._context, f926.fontDesc);
                    let k926 = 0, l926 = 0;
                    f926.hasShadow && this._setupShadow(f926), f926.isOutlined && this._setupOutline(f926);
                    for (let m926 = 0; m926 < h926.parsedString.length; ++m926)
                        if (k926 = d926.x, l926 = d926.y + m926 * e926, i926 && (f926.isOutlined && this._context.strokeText(h926.parsedString[m926], k926, l926), this._context.fillText(h926.parsedString[m926], k926, l926)), f926.isUnderline) {
                            const n926 = j926(h926.parsedString[m926]), o926 = new s147();
                            g926.horizontalAlign === v192.RIGHT ? o926.x = d926.x - n926 : g926.horizontalAlign === v192.CENTER ? o926.x = d926.x - n926 / 2 : o926.x = d926.x, o926.y = l926 + f926.actualFontSize / 8, this._context.fillRect(o926.x, o926.y, n926, f926.underlineHeight * this._fontScale);
                        }
                    i926 && (this._context.shadowColor = "transparent");
                }
                _setupOutline(c926) {
                    this._context.strokeStyle = `rgba(${c926.outlineColor.r}, ${c926.outlineColor.g}, ${c926.outlineColor.b}, ${c926.outlineColor.a / 255})`, this._context.lineWidth = 2 * c926.outlineWidth * this._fontScale;
                }
                _setupShadow(a926) {
                    const b926 = this._fontScale;
                    this._context.shadowColor = `rgba(${a926.shadowColor.r}, ${a926.shadowColor.g}, ${a926.shadowColor.b}, ${a926.shadowColor.a / 255})`, this._context.shadowBlur = a926.shadowBlur * b926, this._context.shadowOffsetX = a926.shadowOffsetX * b926, this._context.shadowOffsetY = -a926.shadowOffsetY * b926;
                }
                generateVertexData(t925, u925, v925, w925, x925, y925, z925) {
                    t925 ? this._updateQuads(u925, v925, w925, x925, y925, z925) : (this.updateQuatCount(x925), z925(u925, w925, x925));
                }
                updateQuatCount(p925) {
                    const q925 = p925.vertexBuffer, r925 = p925.quadCount;
                    if (q925.length !== r925) {
                        for (let s925 = q925.length; s925 < r925; s925++)
                            q925.push({
                                x: 0,
                                y: 0,
                                z: 0,
                                u: 0,
                                v: 0,
                                color: a147.WHITE.clone()
                            });
                        q925.length = r925;
                    }
                }
                _setupBMFontOverflowMetrics(l925, m925) {
                    let n925 = m925.nodeContentSize.width, o925 = m925.nodeContentSize.height;
                    l925.overFlow === x192.RESIZE_HEIGHT && (o925 = 0), l925.overFlow === x192.NONE && (n925 = 0, o925 = 0), l925.textWidthTemp = n925, l925.textHeightTemp = o925, l925.textDimensions.width = n925, l925.textDimensions.height = o925, l925.maxLineWidth = n925;
                }
                _updateFontScale(k925) {
                    k925.bmfontScale = k925.actualFontSize / (k925.originFontSize * this._fontScale);
                }
                _computeHorizontalKerningForText(z924, a925, b925) {
                    const c925 = b925, d925 = c925.length;
                    if (!z924.fntConfig)
                        return;
                    const e925 = z924.fntConfig.kerningDict, f925 = a925.horizontalKerning;
                    if (!e925 || 0 === e925.length)
                        return;
                    let g925 = -1;
                    for (let h925 = 0; h925 < d925; ++h925) {
                        const i925 = c925.charCodeAt(h925), j925 = e925[g925 << 16 | 65535 & i925] || 0;
                        f925[h925] = h925 < d925 - 1 ? j925 : 0, g925 = i925;
                    }
                }
                _alignText(v924, w924, x924, y924) {
                    this._multilineTextWrap(v924, w924, x924, y924, this._getFirstWordLen), w924.overFlow === x192.SHRINK && (v924.fontSize > 0 && this._isVerticalClamp(v924, w924, x924, y924, this) && this._shrinkLabelToContentSize(v924, w924, x924, y924, this._isVerticalClamp), v924.fontSize > 0 && this._isHorizontalNeedShrink(w924, x924) && this._shrinkLabelToContentSize(v924, w924, x924, y924, this._isHorizontalClamp)), this._parsedString(x924, y924);
                }
                _parsedString(n924, o924) {
                    let p924 = [], q924 = "";
                    for (let r924 = 0, s924 = 0, t924 = o924.length; r924 < t924; ++r924) {
                        const u924 = this._lettersInfo[r924];
                        u924.valid && (s924 === u924.line ? q924 += u924.char : (p924 = p924.concat(q924), s924 = u924.line, q924 = ""));
                    }
                    p924 = p924.concat(q924), n924.parsedString = p924;
                }
                _multilineTextWrap(m923, n923, o923, p923, q923) {
                    n923.linesWidth.length = 0;
                    const r923 = p923, s923 = r923.length;
                    let t923 = 0, u923 = 0, v923 = 0, w923 = 0, x923 = 0, y923 = 0, z923 = 0, a924 = null;
                    for (let b924 = 0; b924 < s923;) {
                        let c924 = r923.charAt(b924);
                        if ("\n" === c924) {
                            n923.linesWidth.push(x923), x923 = 0, t923++, u923 = 0, v923 -= n923.lineHeight * this._getFontScale(m923, n923) + 0, this._recordPlaceholderInfo(b924, c924), b924++;
                            continue;
                        }
                        const d924 = q923(m923, n923, r923, b924, s923);
                        let e924 = y923, f924 = z923, g924 = x923, h924 = u923, i924 = !1;
                        const j924 = new s147();
                        for (let k924 = 0; k924 < d924; ++k924) {
                            const l924 = b924 + k924;
                            if (c924 = r923.charAt(l924), "\r" === c924) {
                                this._recordPlaceholderInfo(l924, c924);
                                continue;
                            }
                            if (a924 = i188.fontAtlas.getLetterDefinitionForChar(c924, i188), !a924) {
                                this._recordPlaceholderInfo(l924, c924), null != m923.fntConfig ? p125(`Can't find letter definition in texture atlas ${m923.fntConfig.atlasName} for letter:${c924}`) : p125(`Can't find letter definition in font family ${m923.fontFamily} for letter:${c924}`);
                                continue;
                            }
                            const m924 = h924 + a924.offsetX * m923.bmfontScale - i188.margin;
                            if (n923.wrapping && n923.maxLineWidth > 0 && u923 > 0 && m924 + a924.w * m923.bmfontScale > n923.maxLineWidth && !n137(c924)) {
                                n923.linesWidth.push(x923), x923 = 0, t923++, u923 = 0, v923 -= n923.lineHeight * this._getFontScale(m923, n923) + 0, i924 = !0;
                                break;
                            }
                            j924.x = m924, j924.y = v923 - a924.offsetY * m923.bmfontScale, this._recordLetterInfo(j924, c924, l924, t923), l924 + 1 < n923.horizontalKerning.length && l924 < s923 - 1 && (h924 += n923.horizontalKerning[l924 + 1] * m923.bmfontScale), h924 += a924.xAdvance * m923.bmfontScale + n923.spacingX, g924 = j924.x + a924.w * m923.bmfontScale, e924 < j924.y && (e924 = j924.y), f924 > j924.y - a924.h * m923.bmfontScale && (f924 = j924.y - a924.h * m923.bmfontScale);
                        }
                        i924 || (u923 = h924, x923 = g924, y923 < e924 && (y923 = e924), z923 > f924 && (z923 = f924), w923 < x923 && (w923 = x923), b924 += d924);
                    }
                    return n923.linesWidth.push(x923), n923.numberOfLines = t923 + 1, n923.textDesiredHeight = n923.numberOfLines * n923.lineHeight * this._getFontScale(m923, n923), n923.numberOfLines > 1 && (n923.textDesiredHeight += 0 * (n923.numberOfLines - 1)), o923.nodeContentSize.width = n923.textWidthTemp, o923.nodeContentSize.height = n923.textHeightTemp, n923.textWidthTemp <= 0 && (o923.nodeContentSize.width = parseFloat(w923.toFixed(2)) + 2 * i188.margin), n923.textHeightTemp <= 0 && (o923.nodeContentSize.height = parseFloat(n923.textDesiredHeight.toFixed(2)) + 2 * i188.margin), n923.tailoredTopY = o923.nodeContentSize.height, n923.tailoredBottomY = 0, y923 > 0 && (n923.tailoredTopY = o923.nodeContentSize.height + y923), z923 < -n923.textDesiredHeight && (n923.tailoredBottomY = n923.textDesiredHeight + z923), !0;
                }
                _recordPlaceholderInfo(j923, k923) {
                    if (j923 >= this._lettersInfo.length) {
                        const l923 = new z203();
                        this._lettersInfo.push(l923);
                    }
                    this._lettersInfo[j923].char = k923, this._lettersInfo[j923].hash = `${k923.charCodeAt(0)}${i188.hash}`, this._lettersInfo[j923].valid = !1;
                }
                _recordLetterInfo(d923, e923, f923, g923) {
                    if (f923 >= this._lettersInfo.length) {
                        const i923 = new z203();
                        this._lettersInfo.push(i923);
                    }
                    const h923 = `${e923.charCodeAt(0)}${i188.hash}`;
                    this._lettersInfo[f923].line = g923, this._lettersInfo[f923].char = e923, this._lettersInfo[f923].hash = h923, this._lettersInfo[f923].valid = i188.fontAtlas.getLetter(h923).valid, this._lettersInfo[f923].x = d923.x, this._lettersInfo[f923].y = d923.y;
                }
                _getFirstWordLen(s922, t922, u922, v922, w922) {
                    let x922 = u922.charAt(v922);
                    if (m137(x922) || "\n" === x922 || n137(x922))
                        return 1;
                    let y922 = 1, z922 = i188.fontAtlas.getLetterDefinitionForChar(x922, i188);
                    if (!z922)
                        return y922;
                    let a923 = z922.xAdvance * s922.bmfontScale + t922.spacingX, b923 = 0;
                    for (let c923 = v922 + 1; c923 < w922 && (x922 = u922.charAt(c923), z922 = i188.fontAtlas.getLetterDefinitionForChar(x922, i188), z922); ++c923) {
                        if (b923 = a923 + z922.offsetX * s922.bmfontScale, b923 + z922.w * s922.bmfontScale > t922.maxLineWidth && !n137(x922) && t922.maxLineWidth > 0)
                            return y922;
                        if (a923 += z922.xAdvance * s922.bmfontScale + t922.spacingX, "\n" === x922 || n137(x922) || m137(x922))
                            break;
                        y922++;
                    }
                    return y922;
                }
                _computeAlignmentOffset(j922, k922, l922) {
                    switch ((k922.linesOffsetX.length = 0, k922.letterOffsetY = 0, k922.horizontalAlign)) {
                        case v192.LEFT:
                            for (let r922 = 0; r922 < k922.numberOfLines; ++r922)
                                k922.linesOffsetX.push(0);
                            break;
                        case v192.CENTER:
                            for (let p922 = 0, q922 = k922.linesWidth.length; p922 < q922; p922++)
                                k922.linesOffsetX.push((l922.nodeContentSize.width - k922.linesWidth[p922]) / 2);
                            break;
                        case v192.RIGHT:
                            for (let n922 = 0, o922 = k922.linesWidth.length; n922 < o922; n922++)
                                k922.linesOffsetX.push(l922.nodeContentSize.width - k922.linesWidth[n922]);
                    }
                    if (k922.letterOffsetY = l922.nodeContentSize.height, k922.verticalAlign !== w192.TOP) {
                        const m922 = l922.nodeContentSize.height - k922.textDesiredHeight + k922.lineHeight * this._getFontScale(j922, k922) - j922.originFontSize * this._fontScale * j922.bmfontScale;
                        k922.verticalAlign === w192.BOTTOM ? k922.letterOffsetY -= m922 : k922.letterOffsetY -= m922 / 2;
                    }
                }
                _getFontScale(h922, i922) {
                    return i922.overFlow === x192.SHRINK ? h922.bmfontScale : 1;
                }
                _isVerticalClamp(c922, d922, e922, f922, g922) {
                    return d922.textDesiredHeight > e922.nodeContentSize.height;
                }
                _isHorizontalClamp(q921, r921, s921, t921, u921) {
                    let v921 = !1;
                    for (let w921 = 0, x921 = t921.length; w921 < x921; ++w921) {
                        const y921 = u921._lettersInfo[w921];
                        if (y921.valid) {
                            const z921 = i188.fontAtlas.getLetterDefinitionForChar(y921.char, i188);
                            if (!z921)
                                continue;
                            const a922 = y921.x + z921.w * q921.bmfontScale, b922 = y921.line;
                            if (r921.textWidthTemp > 0)
                                if (r921.wrapping) {
                                    if (r921.linesWidth[b922] > s921.nodeContentSize.width && (a922 > s921.nodeContentSize.width || a922 < 0)) {
                                        v921 = !0;
                                        break;
                                    }
                                }
                                else if (a922 > s921.nodeContentSize.width) {
                                    v921 = !0;
                                    break;
                                }
                        }
                    }
                    return v921;
                }
                _isHorizontalNeedShrink(l921, m921) {
                    let n921 = 0;
                    for (let o921 = 0, p921 = l921.linesWidth.length; o921 < p921; ++o921)
                        if (n921 = l921.linesWidth[o921], n921 > m921.nodeContentSize.width)
                            return !0;
                    return !1;
                }
                _shrinkLabelToContentSize(c921, d921, e921, f921, g921) {
                    let h921 = 0, i921 = 0 | c921.actualFontSize, j921 = 0;
                    for (; h921 < i921;) {
                        j921 = h921 + i921 + 1 >> 1;
                        const k921 = j921;
                        if (k921 <= 0)
                            break;
                        c921.bmfontScale = k921 / (c921.originFontSize * this._fontScale), this._multilineTextWrap(c921, d921, e921, f921, this._getFirstWordLen), this._computeAlignmentOffset(c921, d921, e921), g921(c921, d921, e921, f921, this) ? i921 = j921 - 1 : h921 = j921;
                    }
                    h921 >= 0 && this._scaleFontSizeDown(c921, d921, e921, f921, h921);
                }
                _scaleFontSizeDown(w920, x920, y920, z920, a921) {
                    let b921 = !0;
                    a921 || (a921 = .1, b921 = !1), w920.actualFontSize = a921, b921 && (this._updateFontScale(w920), this._multilineTextWrap(w920, x920, y920, z920, this._getFirstWordLen));
                }
                _updateQuads(c920, d920, e920, f920, g920, h920) {
                    const i920 = c920.spriteFrame ? c920.spriteFrame.texture : i188.fontAtlas.getTexture(), j920 = f920.uiTransAnchorX * e920.nodeContentSize.width, k920 = f920.uiTransAnchorY * e920.nodeContentSize.height;
                    for (let l920 = 0, m920 = g920.length; l920 < m920; ++l920) {
                        const n920 = this._lettersInfo[l920];
                        if (!n920.valid)
                            continue;
                        const o920 = i188.fontAtlas.getLetter(n920.hash);
                        if (!o920) {
                            q125("Can't find letter in this bitmap-font");
                            continue;
                        }
                        this._tmpRect.height = o920.h, this._tmpRect.width = o920.w, this._tmpRect.x = o920.u, this._tmpRect.y = o920.v;
                        let p920 = n920.y + d920.letterOffsetY;
                        if (d920.textHeightTemp > 0) {
                            if (p920 > d920.tailoredTopY) {
                                const v920 = p920 - d920.tailoredTopY;
                                this._tmpRect.y += v920, this._tmpRect.height -= v920, p920 -= v920;
                            }
                            p920 - this._tmpRect.height * c920.bmfontScale < d920.tailoredBottomY && d920.overFlow === x192.CLAMP && (this._tmpRect.height = p920 < d920.tailoredBottomY ? 0 : (p920 - d920.tailoredBottomY) / c920.bmfontScale);
                        }
                        const q920 = n920.line, r920 = n920.x + o920.w / 2 * c920.bmfontScale + d920.linesOffsetX[q920];
                        if (d920.textWidthTemp > 0 && this._isHorizontalClamped(d920, e920, r920, q920) && d920.overFlow === x192.CLAMP && (this._tmpRect.width = 0), this._tmpRect.height > 0 && this._tmpRect.width > 0) {
                            const s920 = this._determineRect(c920), t920 = n920.x + d920.linesOffsetX[n920.line], u920 = f920.quadCount;
                            f920.quadCount += 4, this.updateQuatCount(f920), h920(c920, e920, f920, u920, i920, this._tmpRect, s920, t920 - j920, p920 - k920);
                        }
                    }
                    return !0;
                }
                _isHorizontalClamped(w919, x919, y919, z919) {
                    const a920 = w919.linesWidth[z919], b920 = y919 > x919.nodeContentSize.width || y919 < 0;
                    return w919.wrapping ? a920 > x919.nodeContentSize.width && b920 : b920;
                }
                _determineRect(n919) {
                    const o919 = n919.spriteFrame;
                    if (!o919)
                        return !1;
                    const p919 = o919.isRotated(), q919 = o919.getOriginalSize(), r919 = o919.getRect(), s919 = o919.getOffset(), t919 = s919.x + (q919.width - r919.width) / 2, u919 = s919.y - (q919.height - r919.height) / 2;
                    if (p919) {
                        const v919 = this._tmpRect.x;
                        this._tmpRect.x = r919.x + r919.height - this._tmpRect.y - this._tmpRect.height - u919, this._tmpRect.y = v919 + r919.y - t919, this._tmpRect.y < 0 && (this._tmpRect.height += u919);
                    }
                    else
                        this._tmpRect.x += r919.x - t919, this._tmpRect.y += r919.y + u919;
                    return p919;
                }
            }
            a204.instance = void 0, a204.instance = new a204();
            const b204 = new h188(64, 64), c204 = new m187(null);
            let d204, e204 = null, f204 = null, g204 = null, h204 = null;
            const i204 = {
                updateProcessingData(g919, h919, i919, j919, k919, l919) {
                    g919.fontSize = k919.fontSize, g919.actualFontSize = k919.fontSize, g919.originFontSize = g204 ? g204.fontSize : k919.fontSize, h919.horizontalAlign = k919.horizontalAlign, h919.verticalAlign = k919.verticalAlign, h919.spacingX = k919.spacingX;
                    const m919 = k919.overflow;
                    h919.overFlow = m919, h919.lineHeight = k919.lineHeight, i919.nodeContentSize.width = l919.width, i919.nodeContentSize.height = l919.height, m919 === x192.NONE ? (h919.wrapping = !1, i919.nodeContentSize.width += 2 * i188.margin, i919.nodeContentSize.height += 2 * i188.margin) : m919 === x192.RESIZE_HEIGHT ? (h919.wrapping = !0, i919.nodeContentSize.height += 2 * i188.margin) : h919.wrapping = k919.enableWrapText, j919.uiTransAnchorX = l919.anchorX, j919.uiTransAnchorY = l919.anchorY, i188.lineHeight = k919.lineHeight, i188.fontSize = k919.fontSize, g919.spriteFrame = h204, g919.fntConfig = g204, g919.fontFamily = i188.fontFamily, g919.color.set(k919.color);
                },
                updateRenderData(v918) {
                    if (v918.renderData && e204 !== v918) {
                        if (v918.renderData.vertDirty) {
                            e204 = v918, f204 = e204.node._uiProps.uiTransformComp;
                            const w918 = v918.renderData, x918 = a204.instance, y918 = v918.textStyle, z918 = v918.textLayout, a919 = v918.textLayoutData, b919 = v918.textRenderData;
                            y918.fontScale = w199.getScaleX(), this._updateFontFamily(v918), this.updateProcessingData(y918, z918, a919, b919, v918, f204), this._updateLabelInfo(v918), y918.fontDesc = i188.fontDesc, x918.processingString(!0, y918, z918, a919, v918.string), this.resetRenderData(v918), b919.quadCount = 0, x918.generateRenderInfo(!0, y918, z918, a919, b919, v918.string, this.generateVertexData), w918.dataLength = b919.quadCount, w918.resize(w918.dataLength, w918.dataLength / 2 * 3);
                            const c919 = w918.data;
                            for (let e919 = 0, f919 = b919.quadCount; e919 < f919; e919++)
                                c919[e919] = b919.vertexBuffer[e919];
                            const d919 = w918.indexCount;
                            this.createQuadIndices(d919), w918.chunk.setIndexBuffer(d204), e204.actualFontSize = y918.actualFontSize, f204.setContentSize(a919.nodeContentSize), this.updateUVs(v918), this.updateColor(v918), w918.vertDirty = !1, e204 = null, this._resetProperties();
                        }
                        v918.spriteFrame && v918.renderData.updateRenderData(v918, v918.spriteFrame);
                    }
                },
                updateUVs(n918) {
                    const o918 = n918.renderData, p918 = o918.chunk.vb, q918 = o918.vertexCount, r918 = o918.data;
                    let s918 = 3;
                    for (let t918 = 0; t918 < q918; t918++) {
                        const u918 = r918[t918];
                        p918[s918] = u918.u, p918[s918 + 1] = u918.v, s918 += 9;
                    }
                },
                updateColor(b918) {
                    {
                        const c918 = b918.renderData, d918 = c918.vertexCount;
                        if (0 === d918)
                            return;
                        const e918 = c918.chunk.vb, f918 = c918.floatStride;
                        let g918 = 5;
                        const h918 = b918.color, i918 = h918.r / 255, j918 = h918.g / 255, k918 = h918.b / 255, l918 = h918.a / 255;
                        for (let m918 = 0; m918 < d918; m918++)
                            e918[g918] = i918, e918[g918 + 1] = j918, e918[g918 + 2] = k918, e918[g918 + 3] = l918, g918 += f918;
                    }
                },
                resetRenderData(z917) {
                    const a918 = z917.renderData;
                    a918.dataLength = 0, a918.resize(0, 0);
                },
                generateVertexData(f917, g917, h917, i917, j917, k917, l917, m917, n917) {
                    const o917 = i917, p917 = f917.bmfontScale, q917 = h917.vertexBuffer, r917 = j917.width, s917 = j917.height, t917 = k917.width, u917 = k917.height;
                    let v917 = 0, w917 = 0, x917 = 0, y917 = 0;
                    l917 ? (v917 = k917.x / r917, y917 = (k917.x + u917) / r917, w917 = (k917.y + t917) / s917, x917 = k917.y / s917, q917[o917].u = v917, q917[o917].v = x917, q917[o917 + 1].u = v917, q917[o917 + 1].v = w917, q917[o917 + 2].u = y917, q917[o917 + 2].v = x917, q917[o917 + 3].u = y917, q917[o917 + 3].v = w917) : (v917 = k917.x / r917, y917 = (k917.x + t917) / r917, w917 = (k917.y + u917) / s917, x917 = k917.y / s917, q917[o917].u = v917, q917[o917].v = w917, q917[o917 + 1].u = y917, q917[o917 + 1].v = w917, q917[o917 + 2].u = v917, q917[o917 + 2].v = x917, q917[o917 + 3].u = y917, q917[o917 + 3].v = x917), q917[o917].x = m917, q917[o917].y = n917 - u917 * p917, q917[o917 + 1].x = m917 + t917 * p917, q917[o917 + 1].y = n917 - u917 * p917, q917[o917 + 2].x = m917, q917[o917 + 2].y = n917, q917[o917 + 3].x = m917 + t917 * p917, q917[o917 + 3].y = n917;
                },
                _updateFontFamily(d917) {
                    const e917 = d917.font;
                    h204 = e917.spriteFrame, g204 = e917.fntConfig, i188.fontAtlas = e917.fontDefDictionary, i188.fontAtlas || (d917.cacheMode === y192.CHAR ? i188.fontAtlas = b204 : i188.fontAtlas = c204), g186.packToDynamicAtlas(d917, h204);
                },
                _updateLabelInfo(c917) {
                    i188.hash = "", i188.margin = 0;
                },
                _resetProperties() {
                    g204 = null, h204 = null, i188.hash = "", i188.margin = 0;
                },
                createQuadIndices(y916) {
                    if (y916 % 6 != 0)
                        return void console.error("illegal index count!");
                    const z916 = y916 / 6;
                    d204 = null, d204 = new Uint16Array(y916);
                    let a917 = 0;
                    for (let b917 = 0; b917 < z916; b917++)
                        d204[a917++] = 0 + 4 * b917, d204[a917++] = 1 + 4 * b917, d204[a917++] = 2 + 4 * b917, d204[a917++] = 1 + 4 * b917, d204[a917++] = 3 + 4 * b917, d204[a917++] = 2 + 4 * b917;
                }
            }, j204 = new a147(255, 255, 255, 255), k204 = {
                createData(w916) {
                    const x916 = w916.requestRenderData();
                    return x916.resize(0, 0), x916;
                },
                fillBuffers(t916, u916) {
                    const v916 = t916.node;
                    j204.set(t916.color), j204.a = 255 * v916._uiProps.opacity, i134(v916, 0, t916.renderData, j204);
                },
                appendQuad(b916, c916, d916, e916, f916, g916, h916) {
                    const i916 = b916.renderData;
                    if (!i916)
                        return;
                    const j916 = i916.dataLength;
                    i916.dataLength += 4, i916.resize(i916.dataLength, i916.dataLength / 2 * 3);
                    const k916 = i916.data, l916 = c916.width, m916 = c916.height, n916 = d916.width, o916 = d916.height;
                    let p916 = 0, q916 = 0, r916 = 0, s916 = 0;
                    e916 ? (p916 = d916.x / l916, s916 = (d916.x + o916) / l916, q916 = (d916.y + n916) / m916, r916 = d916.y / m916, k916[j916].u = p916, k916[j916].v = r916, k916[j916 + 1].u = p916, k916[j916 + 1].v = q916, k916[j916 + 2].u = s916, k916[j916 + 2].v = r916, k916[j916 + 3].u = s916, k916[j916 + 3].v = q916) : (p916 = d916.x / l916, s916 = (d916.x + n916) / l916, q916 = (d916.y + o916) / m916, r916 = d916.y / m916, k916[j916].u = p916, k916[j916].v = q916, k916[j916 + 1].u = s916, k916[j916 + 1].v = q916, k916[j916 + 2].u = p916, k916[j916 + 2].v = r916, k916[j916 + 3].u = s916, k916[j916 + 3].v = r916), k916[j916].x = f916, k916[j916].y = g916 - o916 * h916, k916[j916 + 1].x = f916 + n916 * h916, k916[j916 + 1].y = g916 - o916 * h916, k916[j916 + 2].x = f916, k916[j916 + 2].y = g916, k916[j916 + 3].x = f916 + n916 * h916, k916[j916 + 3].y = g916;
                }
            };
            s126(k204, i204);
            let l204 = null;
            const m204 = t126(i204, {
                getAssemblerData: () => (l204 || (l204 = new h188(1024, 1024)), l204.getTexture()),
                _updateFontFamily(a916) {
                    i188.fontAtlas = l204, i188.fontFamily = this._getFontFamily(a916), a916.enableOutline && a916.outlineWidth > 0 ? (i188.isOutlined = !0, i188.margin = a916.outlineWidth, i188.out = a916.outlineColor.clone(), i188.out.a = a916.outlineColor.a * a916.color.a / 255) : (i188.isOutlined = !1, i188.margin = 0);
                },
                _getFontFamily(y915) {
                    let z915 = "Arial";
                    return y915.useSystemFont ? z915 = y915.fontFamily || "Arial" : y915.font && (z915 = y915.font._nativeAsset || "Arial"), z915;
                },
                _updateLabelInfo(t915) {
                    i188.fontDesc = this._getFontDesc(), i188.color = t915.color, i188.hash = function (v915) {
                        const w915 = v915.color.toHEX();
                        let x915 = "";
                        return v915.isOutlined && v915.margin > 0 && (x915 = x915 + v915.margin + v915.out.toHEX()), "" + v915.fontSize + v915.fontFamily + w915 + x915;
                    }(i188);
                },
                _getFontDesc() {
                    let s915 = `${i188.fontSize.toString()}px `;
                    return s915 += i188.fontFamily, s915;
                }
            }), n204 = new a147(255, 255, 255, 255), o204 = {
                createData(q915) {
                    const r915 = q915.requestRenderData();
                    return r915.resize(0, 0), r915;
                },
                fillBuffers(n915, o915) {
                    if (!n915.renderData)
                        return;
                    const p915 = n915.node;
                    n204.a = 255 * p915._uiProps.opacity, i134(p915, 0, n915.renderData, n204);
                },
                updateColor(g915) {
                    {
                        const h915 = g915.renderData, i915 = h915.vertexCount;
                        if (0 === i915)
                            return;
                        const j915 = h915.chunk.vb, k915 = h915.floatStride;
                        let l915 = 5;
                        for (let m915 = 0; m915 < i915; m915++)
                            j915[l915] = 1, j915[l915 + 1] = 1, j915[l915 + 2] = 1, j915[l915 + 3] = 1, l915 += k915;
                    }
                }
            };
            s126(o204, m204);
            const p204 = z192.Overflow, q204 = {
                updateProcessingData(a915, b915, c915, d915, e915, f915) {
                    a915.isSystemFontUsed = e915.useSystemFont, a915.fontSize = e915.fontSize, c915.nodeContentSize.width = c915.canvasSize.width = f915.width, c915.nodeContentSize.height = c915.canvasSize.height = f915.height, b915.lineHeight = e915.lineHeight, b915.overFlow = e915.overflow, e915.overflow === p204.NONE ? b915.wrapping = !1 : e915.overflow === p204.RESIZE_HEIGHT ? b915.wrapping = !0 : b915.wrapping = e915.enableWrapText, a915.isBold = e915.isBold, a915.isItalic = e915.isItalic, a915.isUnderline = e915.isUnderline, a915.underlineHeight = e915.underlineHeight, e915.enableOutline && e915.outlineWidth > 0 ? (a915.isOutlined = !0, a915.outlineColor.set(e915.outlineColor), a915.outlineWidth = e915.outlineWidth) : a915.isOutlined = !1, e915.enableShadow && (e915.shadowBlur > 0 || !w128(e915.shadowOffset.x, 0) || !w128(e915.shadowOffset.y, 0)) ? (a915.hasShadow = !0, a915.shadowColor.set(e915.shadowColor), a915.shadowBlur = e915.shadowBlur, a915.shadowOffsetX = e915.shadowOffset.x, a915.shadowOffsetY = e915.shadowOffset.y) : a915.hasShadow = !1, a915.color.set(e915.color), d915.texture = e915.spriteFrame, d915.uiTransAnchorX = f915.anchorX, d915.uiTransAnchorY = f915.anchorY, b915.horizontalAlign = e915.horizontalAlign, b915.verticalAlign = e915.verticalAlign;
                },
                getAssemblerData() {
                    const z914 = z192._canvasPool.get();
                    return z914.canvas.width = z914.canvas.height = 1, z914;
                },
                resetAssemblerData(y914) {
                    y914 && z192._canvasPool.put(y914);
                },
                updateRenderData(p914) {
                    if (p914.renderData) {
                        if (p914.renderData.vertDirty) {
                            const q914 = p914.node._uiProps.uiTransformComp, r914 = a204.instance, s914 = p914.textStyle, t914 = p914.textLayout, u914 = p914.textLayoutData, v914 = p914.textRenderData;
                            s914.fontScale = w199.getScaleX(), this.updateProcessingData(s914, t914, u914, v914, p914, q914), r914.setCanvasUsed(p914.assemblerData.canvas, p914.assemblerData.context), s914.fontFamily = this._updateFontFamily(p914), this._resetDynamicAtlas(p914), r914.processingString(!1, s914, t914, u914, p914.string), r914.generateRenderInfo(!1, s914, t914, u914, v914, p914.string, this.generateVertexData);
                            const w914 = p914.renderData;
                            w914.textureDirty = !0, this._calDynamicAtlas(p914, u914), p914.actualFontSize = s914.actualFontSize, q914.setContentSize(u914.nodeContentSize);
                            const x914 = w914.data;
                            x914[0] = v914.vertexBuffer[0], x914[1] = v914.vertexBuffer[1], x914[2] = v914.vertexBuffer[2], x914[3] = v914.vertexBuffer[3], this.updateUVs(p914), p914.renderData.vertDirty = !1, p914.contentWidth = u914.nodeContentSize.width;
                        }
                        p914.spriteFrame && p914.renderData.updateRenderData(p914, p914.spriteFrame);
                    }
                },
                generateVertexData(h914, i914, j914) {
                    const k914 = j914.vertexBuffer, l914 = i914.nodeContentSize.width, m914 = i914.nodeContentSize.height, n914 = j914.uiTransAnchorX * l914, o914 = j914.uiTransAnchorY * m914;
                    k914[0].x = -n914, k914[0].y = -o914, k914[1].x = l914 - n914, k914[1].y = -o914, k914[2].x = -n914, k914[2].y = m914 - o914, k914[3].x = l914 - n914, k914[3].y = m914 - o914;
                },
                updateVertexData(g914) { },
                updateUVs(f914) { },
                _updateFontFamily(d914) {
                    let e914 = "";
                    return e914 = d914.useSystemFont ? d914.fontFamily || "Arial" : d914.font && d914.font._nativeAsset || "Arial", e914;
                },
                _calDynamicAtlas(a914, b914) {
                    if (a914.cacheMode !== z192.CacheMode.BITMAP || b914.canvasSize.width <= 0 || b914.canvasSize.height <= 0)
                        return;
                    const c914 = a914.ttfSpriteFrame;
                    g186.packToDynamicAtlas(a914, c914);
                },
                _resetDynamicAtlas(y913) {
                    if (y913.cacheMode !== z192.CacheMode.BITMAP)
                        return;
                    const z913 = y913.ttfSpriteFrame;
                    g186.deleteAtlasSpriteFrame(z913), z913._resetDynamicAtlasFrame();
                }
            }, r204 = a147.WHITE.clone(), s204 = Uint16Array.from([0, 1, 2, 1, 3, 2]), t204 = {
                createData(t913) {
                    const u913 = t913.requestRenderData();
                    u913.dataLength = 4, u913.resize(4, 6), t913.textRenderData.quadCount = 4;
                    const v913 = u913.chunk.vb;
                    v913[3] = v913[21] = v913[22] = v913[31] = 0, v913[4] = v913[12] = v913[13] = v913[30] = 1;
                    let w913 = 5;
                    for (let x913 = 0; x913 < 4; x913++)
                        a147.toArray(v913, r204, w913), w913 += 9;
                    return u913.chunk.setIndexBuffer(s204), u913;
                },
                fillBuffers(z912, a913) {
                    const b913 = z912.renderData, c913 = b913.chunk, d913 = b913.data, e913 = z912.node, f913 = c913.vb, g913 = e913.worldMatrix, h913 = b913.floatStride;
                    let i913 = 0;
                    const j913 = d913.length;
                    for (let o913 = 0; o913 < j913; o913++) {
                        const p913 = d913[o913], q913 = p913.x, r913 = p913.y;
                        let s913 = g913.m03 * q913 + g913.m07 * r913 + g913.m15;
                        s913 = s913 ? 1 / s913 : 1, i913 = o913 * h913, f913[i913 + 0] = (g913.m00 * q913 + g913.m04 * r913 + g913.m12) * s913, f913[i913 + 1] = (g913.m01 * q913 + g913.m05 * r913 + g913.m13) * s913, f913[i913 + 2] = (g913.m02 * q913 + g913.m06 * r913 + g913.m14) * s913;
                    }
                    const k913 = c913.vertexOffset, l913 = c913.meshBuffer, m913 = c913.meshBuffer.iData;
                    let n913 = l913.indexOffset;
                    m913[n913++] = k913, m913[n913++] = k913 + 1, m913[n913++] = k913 + 2, m913[n913++] = k913 + 2, m913[n913++] = k913 + 1, m913[n913++] = k913 + 3, l913.indexOffset += 6;
                },
                updateVertexData(r912) {
                    const s912 = r912.renderData;
                    if (!s912)
                        return;
                    const t912 = r912.node._uiProps.uiTransformComp, u912 = t912.width, v912 = t912.height, w912 = t912.anchorX * u912, x912 = t912.anchorY * v912, y912 = s912.data;
                    y912[0].x = -w912, y912[0].y = -x912, y912[1].x = u912 - w912, y912[1].y = -x912, y912[2].x = -w912, y912[2].y = v912 - x912, y912[3].x = u912 - w912, y912[3].y = v912 - x912;
                },
                updateUVs(n912) {
                    const o912 = n912.renderData;
                    if (!o912 || !n912.ttfSpriteFrame)
                        return;
                    const p912 = o912.chunk.vb, q912 = n912.ttfSpriteFrame.uv;
                    p912[3] = q912[0], p912[4] = q912[1], p912[12] = q912[2], p912[13] = q912[3], p912[21] = q912[4], p912[22] = q912[5], p912[30] = q912[6], p912[31] = q912[7];
                },
                updateColor(m912) { }
            };
            s126(t204, q204);
            const u204 = g125("labelAssembler", {
                getAssembler(k912) {
                    let l912 = t204;
                    return k912.font instanceof n187 ? l912 = k204 : k912.cacheMode === z192.CacheMode.CHAR && (l912 = o204), l912;
                }
            });
            z192.Assembler = u204;
            const v204 = w196.FillType, w204 = new o147(), x204 = Uint16Array.from([0, 1, 2, 1, 3, 2]), y204 = {
                updateRenderData(e912) {
                    const f912 = e912.spriteFrame;
                    g186.packToDynamicAtlas(e912, f912);
                    const g912 = e912.renderData;
                    if (g912 && f912) {
                        if (!g912.vertDirty)
                            return;
                        let h912 = e912.fillStart, i912 = e912.fillRange;
                        i912 < 0 && (h912 += i912, i912 = -i912), i912 = h912 + i912, h912 = h912 > 1 ? 1 : h912, h912 = h912 < 0 ? 0 : h912, i912 = i912 > 1 ? 1 : i912, i912 = i912 < 0 ? 0 : i912, i912 -= h912, i912 = i912 < 0 ? 0 : i912;
                        let j912 = h912 + i912;
                        j912 = j912 > 1 ? 1 : j912, this.updateUVs(e912, h912, j912), this.updateVertexData(e912, h912, j912), g912.updateRenderData(e912, f912);
                    }
                },
                updateUVs(k911, l911, m911) {
                    const n911 = k911.spriteFrame, o911 = k911.renderData.chunk.vb, p911 = n911.width, q911 = n911.height, r911 = n911.rect;
                    let s911 = 0, t911 = 0, u911 = 0, v911 = 0, w911 = 0, x911 = 0, y911 = 0, z911 = 0, a912 = 0, b912 = 0, c912 = 0, d912 = 0;
                    switch ((n911.isRotated() ? (s911 = r911.x / p911, t911 = (r911.y + r911.width) / q911, u911 = (r911.x + r911.height) / p911, v911 = r911.y / q911, w911 = y911 = s911, a912 = c912 = u911, z911 = d912 = t911, x911 = b912 = v911) : (s911 = r911.x / p911, t911 = (r911.y + r911.height) / q911, u911 = (r911.x + r911.width) / p911, v911 = r911.y / q911, w911 = a912 = s911, y911 = c912 = u911, x911 = z911 = t911, b912 = d912 = v911), k911.fillType)) {
                        case v204.HORIZONTAL:
                            o911[3] = w911 + (y911 - w911) * l911, o911[4] = x911 + (z911 - x911) * l911, o911[12] = w911 + (y911 - w911) * m911, o911[13] = x911 + (z911 - x911) * m911, o911[21] = a912 + (c912 - a912) * l911, o911[22] = b912 + (d912 - b912) * l911, o911[30] = a912 + (c912 - a912) * m911, o911[31] = b912 + (d912 - b912) * m911;
                            break;
                        case v204.VERTICAL:
                            o911[3] = w911 + (a912 - w911) * l911, o911[4] = x911 + (b912 - x911) * l911, o911[12] = y911 + (c912 - y911) * l911, o911[13] = z911 + (d912 - z911) * l911, o911[21] = w911 + (a912 - w911) * m911, o911[22] = x911 + (b912 - x911) * m911, o911[30] = y911 + (c912 - y911) * m911, o911[31] = z911 + (d912 - z911) * m911;
                            break;
                        default:
                            z125(2626);
                    }
                },
                updateVertexData(v910, w910, x910) {
                    const y910 = v910.renderData.data, z910 = v910.node._uiProps.uiTransformComp, a911 = z910.width, b911 = z910.height, c911 = z910.anchorX * a911, d911 = z910.anchorY * b911;
                    let e911 = -c911, f911 = -d911, g911 = a911 - c911, h911 = b911 - d911, i911 = 0, j911 = 0;
                    switch (v910.fillType) {
                        case v204.HORIZONTAL:
                            i911 = e911 + (g911 - e911) * w910, j911 = e911 + (g911 - e911) * x910, e911 = i911, g911 = j911;
                            break;
                        case v204.VERTICAL:
                            i911 = f911 + (h911 - f911) * w910, j911 = f911 + (h911 - f911) * x910, f911 = i911, h911 = j911;
                            break;
                        default:
                            z125(2626);
                    }
                    y910[0].x = e911, y910[0].y = f911, y910[1].x = g911, y910[1].y = f911, y910[2].x = e911, y910[2].y = h911, y910[3].x = g911, y910[3].y = h911;
                },
                createData(r910) {
                    const s910 = r910.requestRenderData();
                    s910.dataLength = 4, s910.resize(4, 6), s910.chunk.setIndexBuffer(x204);
                    const t910 = s910.data;
                    for (const u910 of t910)
                        u910.z = 0;
                    return s910;
                },
                updateWorldVertexData(g910, h910) {
                    g910.node.getWorldMatrix(w204);
                    const i910 = g910.renderData.floatStride, j910 = g910.renderData.data, k910 = h910.vb;
                    let l910 = 0;
                    for (let m910 = 0; m910 < 4; m910++) {
                        const n910 = j910[m910], o910 = n910.x, p910 = n910.y;
                        let q910 = w204.m03 * o910 + w204.m07 * p910 + w204.m15;
                        q910 = q910 ? 1 / q910 : 1, l910 = m910 * i910, k910[l910] = (w204.m00 * o910 + w204.m04 * p910 + w204.m12) * q910, k910[l910 + 1] = (w204.m01 * o910 + w204.m05 * p910 + w204.m13) * q910, k910[l910 + 2] = (w204.m02 * o910 + w204.m06 * p910 + w204.m14) * q910;
                    }
                },
                fillBuffers(y909, z909) {
                    const a910 = y909.renderData, b910 = a910.chunk;
                    (y909._flagChangedVersion !== y909.node.flagChangedVersion || a910.vertDirty) && (this.updateWorldVertexData(y909, b910), a910.vertDirty = !1, y909._flagChangedVersion = y909.node.flagChangedVersion), b910.bufferId;
                    const c910 = b910.vertexOffset, d910 = b910.meshBuffer, e910 = b910.meshBuffer.iData;
                    let f910 = d910.indexOffset;
                    e910[f910++] = c910, e910[f910++] = c910 + 1, e910[f910++] = c910 + 2, e910[f910++] = c910 + 2, e910[f910++] = c910 + 1, e910[f910++] = c910 + 3, d910.indexOffset += 6;
                },
                updateColor(n909) {
                    const o909 = n909.renderData, p909 = o909.chunk.vb, q909 = o909.floatStride;
                    let r909 = 5;
                    const s909 = n909.color, t909 = s909.r / 255, u909 = s909.g / 255, v909 = s909.b / 255, w909 = n909.node._uiProps.opacity;
                    for (let x909 = 0; x909 < 4; x909++)
                        p909[r909] = t909, p909[r909 + 1] = u909, p909[r909 + 2] = v909, p909[r909 + 3] = w909, r909 += q909;
                }
            }, z204 = 2 * Math.PI, a205 = 1e-6, b205 = new o147(), c205 = [new s147(), new s147(), new s147(), new s147()], d205 = new Array(4), e205 = new Array(8), f205 = [new s147(), new s147(), new s147(), new s147()], g205 = [new s147(), new s147(), new s147(), new s147()], h205 = new s147(), i205 = [new s147(), new s147(), new s147(), new s147()];
            let j205 = null;
            function b139(y908, z908, a909, b909, c909, d909, e909) {
                let f909 = Math.sin(d909);
                f909 = Math.abs(f909) > a205 ? f909 : 0;
                let g909 = Math.cos(d909);
                g909 = Math.abs(g909) > a205 ? g909 : 0;
                let h909 = 0, i909 = 0;
                if (0 !== g909) {
                    if (h909 = f909 / g909, (y908 - c909.x) * g909 > 0) {
                        const m909 = c909.y + h909 * (y908 - c909.x);
                        e909[0].x = y908, e909[0].y = m909;
                    }
                    if ((z908 - c909.x) * g909 > 0) {
                        const l909 = c909.y + h909 * (z908 - c909.x);
                        e909[2].x = z908, e909[2].y = l909;
                    }
                }
                if (0 !== f909) {
                    if (i909 = g909 / f909, (b909 - c909.y) * f909 > 0) {
                        const k909 = c909.x + i909 * (b909 - c909.y);
                        e909[3].x = k909, e909[3].y = b909;
                    }
                    if ((a909 - c909.y) * f909 > 0) {
                        const j909 = c909.x + i909 * (a909 - c909.y);
                        e909[1].x = j909, e909[1].y = a909;
                    }
                }
            }
            function c139(t908, u908) {
                const v908 = u908.x - t908.x, w908 = u908.y - t908.y;
                if (0 === v908 && 0 === w908)
                    return 0;
                if (0 === v908)
                    return w908 > 0 ? .5 * Math.PI : 1.5 * Math.PI;
                {
                    let x908 = Math.atan(w908 / v908);
                    return v908 < 0 && (x908 += Math.PI), x908;
                }
            }
            function d139(h908, i908, j908, k908, l908) {
                const m908 = d205, n908 = m908[0], o908 = m908[1], p908 = m908[2], q908 = m908[3];
                h908[i908].x = j908.x, h908[i908].y = j908.y, h908[i908 + 1].x = k908.x, h908[i908 + 1].y = k908.y, h908[i908 + 2].x = l908.x, h908[i908 + 2].y = l908.y;
                let r908 = 0, s908 = 0;
                r908 = (j908.x - n908) / (p908 - n908), s908 = (j908.y - o908) / (q908 - o908), e139(r908, s908, h908, i908), r908 = (k908.x - n908) / (p908 - n908), s908 = (k908.y - o908) / (q908 - o908), e139(r908, s908, h908, i908 + 1), r908 = (l908.x - n908) / (p908 - n908), s908 = (l908.y - o908) / (q908 - o908), e139(r908, s908, h908, i908 + 2);
            }
            function e139(x907, y907, z907, a908) {
                const b908 = e205, c908 = b908[0] + (b908[2] - b908[0]) * x907, d908 = b908[4] + (b908[6] - b908[4]) * x907, e908 = b908[1] + (b908[3] - b908[1]) * x907, f908 = b908[5] + (b908[7] - b908[5]) * x907, g908 = z907[a908];
                g908.u = c908 + (d908 - c908) * y907, g908.v = e908 + (f908 - e908) * y907;
            }
            const k205 = {
                useModel: !1,
                createData: w907 => w907.requestRenderData(),
                updateRenderData(i906) {
                    const j906 = i906.spriteFrame;
                    g186.packToDynamicAtlas(i906, j906), this.updateUVs(i906);
                    const k906 = i906.renderData;
                    if (k906 && j906) {
                        if (!k906.vertDirty)
                            return;
                        const l906 = k906.data;
                        let m906 = i906.fillStart, n906 = i906.fillRange;
                        for (n906 < 0 && (m906 += n906, n906 = -n906); m906 >= 1;)
                            m906 -= 1;
                        for (; m906 < 0;)
                            m906 += 1;
                        m906 *= z204, n906 *= z204;
                        const o906 = m906 + n906;
                        !function (h907) {
                            const i907 = h907.node._uiProps.uiTransformComp, j907 = i907.width, k907 = i907.height, l907 = i907.anchorX * j907, m907 = i907.anchorY * k907, n907 = -l907, o907 = -m907, p907 = j907 - l907, q907 = k907 - m907, r907 = d205;
                            r907[0] = n907, r907[1] = o907, r907[2] = p907, r907[3] = q907;
                            const s907 = h907.fillCenter, t907 = h205.x = Math.min(Math.max(0, s907.x), 1) * (p907 - n907) + n907, u907 = h205.y = Math.min(Math.max(0, s907.y), 1) * (q907 - o907) + o907;
                            c205[0].x = c205[3].x = n907, c205[1].x = c205[2].x = p907, c205[0].y = c205[1].y = o907, c205[2].y = c205[3].y = q907;
                            for (const v907 of i205)
                                s147.set(v907, 0, 0);
                            t907 !== r907[0] && s147.set(i205[0], 3, 0), t907 !== r907[2] && s147.set(i205[2], 1, 2), u907 !== r907[1] && s147.set(i205[1], 0, 1), u907 !== r907[3] && s147.set(i205[3], 2, 3);
                        }(i906), function (y906) {
                            const z906 = y906.width, a907 = y906.height, b907 = y906.getRect();
                            let c907 = 0, d907 = 0, e907 = 0, f907 = 0;
                            const g907 = e205;
                            y906.isRotated() ? (c907 = b907.x / z906, d907 = (b907.x + b907.height) / z906, e907 = b907.y / a907, f907 = (b907.y + b907.width) / a907, g907[0] = g907[2] = c907, g907[4] = g907[6] = d907, g907[3] = g907[7] = f907, g907[1] = g907[5] = e907) : (c907 = b907.x / z906, d907 = (b907.x + b907.width) / z906, e907 = b907.y / a907, f907 = (b907.y + b907.height) / a907, g907[0] = g907[4] = c907, g907[2] = g907[6] = d907, g907[1] = g907[3] = f907, g907[5] = g907[7] = e907);
                        }(j906), b139(d205[0], d205[2], d205[1], d205[3], h205, m906, f205), b139(d205[0], d205[2], d205[1], d205[3], h205, m906 + n906, g205);
                        let p906 = 0;
                        for (let t906 = 0; t906 < 4; ++t906) {
                            const u906 = i205[t906];
                            if (!u906)
                                continue;
                            if (n906 >= z204) {
                                k906.dataLength = p906 + 3, d139(l906, p906, h205, c205[u906.x], c205[u906.y]), p906 += 3;
                                continue;
                            }
                            let v906 = c139(h205, c205[u906.x]), w906 = c139(h205, c205[u906.y]);
                            w906 < v906 && (w906 += z204), v906 -= z204, w906 -= z204;
                            for (let x906 = 0; x906 < 3; ++x906)
                                v906 >= o906 || (v906 >= m906 ? (k906.dataLength = p906 + 3, d139(l906, p906, h205, c205[u906.x], w906 >= o906 ? g205[t906] : c205[u906.y]), p906 += 3) : w906 > m906 && (w906 <= o906 ? (k906.dataLength = p906 + 3, d139(l906, p906, h205, f205[t906], c205[u906.y]), p906 += 3) : (k906.dataLength = p906 + 3, d139(l906, p906, h205, f205[t906], g205[t906]), p906 += 3))), v906 += z204, w906 += z204;
                        }
                        0 === p906 && (k906.dataLength = 0), k906.resize(p906, p906);
                        {
                            const s906 = k906.indexCount;
                            this.createQuadIndices(s906), k906.chunk.setIndexBuffer(j205), this.updateWorldUVData(i906), i906.renderEntity.colorDirty = !0;
                        }
                        k906.updateRenderData(i906, j906);
                    }
                },
                createQuadIndices(f906) {
                    j205 = null, j205 = new Uint16Array(f906);
                    let g906 = 0;
                    for (let h906 = 0; h906 < f906; h906++)
                        j205[g906++] = h906;
                },
                fillBuffers(v905, w905) {
                    const x905 = v905.node, y905 = v905.renderData, z905 = y905.chunk;
                    (v905._flagChangedVersion !== x905.flagChangedVersion || y905.vertDirty) && (this.updateWorldVertexAndUVData(v905, z905), y905.vertDirty = !1, v905._flagChangedVersion = x905.flagChangedVersion), this.updateColorLate(v905), z905.bufferId;
                    const a906 = z905.vertexOffset, b906 = z905.meshBuffer, c906 = z905.meshBuffer.iData, d906 = b906.indexOffset;
                    for (let e906 = 0; e906 < y905.indexCount; e906++)
                        c906[d906 + e906] = a906 + e906;
                    b906.indexOffset += y905.indexCount, b906.setDirty();
                },
                updateWorldUVData(n905, o905) {
                    const p905 = n905.renderData, q905 = p905.floatStride, r905 = p905.data, s905 = p905.chunk.vb;
                    for (let t905 = 0; t905 < r905.length; t905++) {
                        const u905 = t905 * q905;
                        s905[u905 + 3] = r905[t905].u, s905[u905 + 4] = r905[t905].v;
                    }
                },
                updateWorldVertexAndUVData(a905, b905) {
                    a905.node.getWorldMatrix(b205);
                    const c905 = a905.renderData, d905 = c905.floatStride, e905 = a905.renderData.data, f905 = b905.vb, g905 = c905.vertexCount;
                    let h905 = 0;
                    for (let i905 = 0; i905 < g905; i905++) {
                        const j905 = e905[i905], k905 = j905.x, l905 = j905.y;
                        let m905 = b205.m03 * k905 + b205.m07 * l905 + b205.m15;
                        m905 = m905 ? 1 / m905 : 1, f905[h905 + 0] = (b205.m00 * k905 + b205.m04 * l905 + b205.m12) * m905, f905[h905 + 1] = (b205.m01 * k905 + b205.m05 * l905 + b205.m13) * m905, f905[h905 + 2] = (b205.m02 * k905 + b205.m06 * l905 + b205.m14) * m905, f905[h905 + 3] = j905.u, f905[h905 + 4] = j905.v, h905 += d905;
                    }
                },
                updateUVs(z904) {
                    z904.renderData.vertDirty = !0, z904.markForUpdateRenderData();
                },
                updateColorLate(n904) {
                    const o904 = n904.renderData, p904 = o904.chunk.vb, q904 = o904.floatStride, r904 = o904.vertexCount;
                    let s904 = 5;
                    const t904 = n904.color, u904 = t904.r / 255, v904 = t904.g / 255, w904 = t904.b / 255, x904 = n904.node._uiProps.opacity;
                    for (let y904 = 0; y904 < r904; y904++)
                        p904[s904] = u904, p904[s904 + 1] = v904, p904[s904 + 2] = w904, p904[s904 + 3] = x904, s904 += q904;
                },
                updateColor(m904) { }
            }, l205 = Uint16Array.from([0, 1, 2, 1, 3, 2]), m205 = {
                createData(k904) {
                    const l904 = k904.requestRenderData();
                    return l904.dataLength = 4, l904.resize(4, 6), l904.chunk.setIndexBuffer(l205), l904;
                },
                updateRenderData(h904) {
                    const i904 = h904.spriteFrame;
                    g186.packToDynamicAtlas(h904, i904), this.updateUVs(h904);
                    const j904 = h904.renderData;
                    j904 && i904 && (j904.vertDirty && this.updateVertexData(h904), j904.updateRenderData(h904, i904));
                },
                updateWorldVerts(t903, u903) {
                    const v903 = t903.renderData, w903 = u903.vb, x903 = v903.data, y903 = t903.node.worldMatrix, z903 = v903.floatStride;
                    let a904 = 0;
                    const b904 = x903.length;
                    for (let c904 = 0; c904 < b904; c904++) {
                        const d904 = x903[c904], e904 = d904.x, f904 = d904.y;
                        let g904 = y903.m03 * e904 + y903.m07 * f904 + y903.m15;
                        g904 = g904 ? 1 / g904 : 1, a904 = c904 * z903, w903[a904 + 0] = (y903.m00 * e904 + y903.m04 * f904 + y903.m12) * g904, w903[a904 + 1] = (y903.m01 * e904 + y903.m05 * f904 + y903.m13) * g904, w903[a904 + 2] = (y903.m02 * e904 + y903.m06 * f904 + y903.m14) * g904;
                    }
                },
                fillBuffers(k903, l903) {
                    if (null === k903)
                        return;
                    const m903 = k903.renderData, n903 = m903.chunk;
                    (k903._flagChangedVersion !== k903.node.flagChangedVersion || m903.vertDirty) && (this.updateWorldVerts(k903, n903), m903.vertDirty = !1, k903._flagChangedVersion = k903.node.flagChangedVersion);
                    const o903 = n903.vertexOffset, p903 = n903.meshBuffer, q903 = n903.meshBuffer.iData;
                    let r903 = p903.indexOffset;
                    const s903 = o903;
                    q903[r903++] = s903, q903[r903++] = s903 + 1, q903[r903++] = s903 + 2, q903[r903++] = s903 + 1, q903[r903++] = s903 + 3, q903[r903++] = s903 + 2, p903.indexOffset += 6;
                },
                updateVertexData(t902) {
                    const u902 = t902.renderData;
                    if (!u902)
                        return;
                    const v902 = t902.node._uiProps.uiTransformComp, w902 = u902.data, x902 = v902.width, y902 = v902.height, z902 = v902.anchorX * x902, a903 = v902.anchorY * y902;
                    let b903 = 0, c903 = 0, d903 = 0, e903 = 0;
                    if (t902.trim)
                        b903 = -z902, c903 = -a903, d903 = x902 - z902, e903 = y902 - a903;
                    else {
                        const f903 = t902.spriteFrame, g903 = f903.originalSize, h903 = x902 / g903.width, i903 = y902 / g903.height, j903 = f903.trimmedBorder;
                        b903 = j903.x * h903 - z902, c903 = j903.z * i903 - a903, d903 = x902 + j903.y * h903 - z902, e903 = y902 + j903.w * i903 - a903;
                    }
                    w902[0].x = b903, w902[0].y = c903, w902[1].x = d903, w902[1].y = c903, w902[2].x = b903, w902[2].y = e903, w902[3].x = d903, w902[3].y = e903, u902.vertDirty = !0;
                },
                updateUVs(q902) {
                    if (!q902.spriteFrame)
                        return;
                    const r902 = q902.renderData.chunk.vb, s902 = q902.spriteFrame.uv;
                    r902[3] = s902[0], r902[4] = s902[1], r902[12] = s902[2], r902[13] = s902[3], r902[21] = s902[4], r902[22] = s902[5], r902[30] = s902[6], r902[31] = s902[7];
                },
                updateColor(g902) {
                    const h902 = g902.renderData, i902 = h902.chunk.vb;
                    let j902 = 5;
                    const k902 = g902.color, l902 = k902.r / 255, m902 = k902.g / 255, n902 = k902.b / 255, o902 = k902.a / 255;
                    for (let p902 = 0; p902 < 4; p902++, j902 += h902.floatStride)
                        i902[j902] = l902, i902[j902 + 1] = m902, i902[j902 + 2] = n902, i902[j902 + 3] = o902;
                }
            }, n205 = new o147(), o205 = [];
            for (let f902 = 0; f902 < 4; f902++)
                o205.push({
                    x: 0,
                    y: 0,
                    z: 0,
                    u: 0,
                    v: 0,
                    color: new a147()
                });
            const p205 = {
                createData(d902) {
                    const e902 = d902.requestRenderData();
                    return e902.dataLength = 16, e902.resize(16, 54), this.QUAD_INDICES = new Uint16Array(54), this.createQuadIndices(4, 4), e902.chunk.setIndexBuffer(this.QUAD_INDICES), e902;
                },
                createQuadIndices(x901, y901) {
                    let z901 = 0;
                    for (let a902 = 0; a902 < x901 - 1; a902++)
                        for (let b902 = 0; b902 < y901 - 1; b902++) {
                            const c902 = a902 * y901 + b902;
                            this.QUAD_INDICES[z901++] = c902, this.QUAD_INDICES[z901++] = c902 + 1, this.QUAD_INDICES[z901++] = c902 + y901, this.QUAD_INDICES[z901++] = c902 + 1, this.QUAD_INDICES[z901++] = c902 + 1 + y901, this.QUAD_INDICES[z901++] = c902 + y901;
                        }
                },
                updateRenderData(u901) {
                    const v901 = u901.spriteFrame;
                    g186.packToDynamicAtlas(u901, v901), this.updateUVs(u901);
                    const w901 = u901.renderData;
                    w901 && v901 && (w901.vertDirty && this.updateVertexData(u901), w901.updateRenderData(u901, v901));
                },
                updateVertexData(a901) {
                    const b901 = a901.renderData, c901 = b901.data, d901 = a901.node._uiProps.uiTransformComp, e901 = d901.width, f901 = d901.height, g901 = d901.anchorX * e901, h901 = d901.anchorY * f901, i901 = a901.spriteFrame, j901 = i901.insetLeft, k901 = i901.insetRight, l901 = i901.insetTop, m901 = i901.insetBottom;
                    let n901 = e901 - j901 - k901, o901 = f901 - l901 - m901, p901 = e901 / (j901 + k901), q901 = f901 / (l901 + m901);
                    p901 = Number.isNaN(p901) || p901 > 1 ? 1 : p901, q901 = Number.isNaN(q901) || q901 > 1 ? 1 : q901, n901 = n901 < 0 ? 0 : n901, o901 = o901 < 0 ? 0 : o901, o205[0].x = -g901, o205[0].y = -h901, o205[1].x = j901 * p901 - g901, o205[1].y = m901 * q901 - h901, o205[2].x = o205[1].x + n901, o205[2].y = o205[1].y + o901, o205[3].x = e901 - g901, o205[3].y = f901 - h901;
                    for (let r901 = 0; r901 < 4; r901++)
                        for (let s901 = 0; s901 < 4; s901++) {
                            const t901 = 4 * r901 + s901;
                            t901 < b901.dataLength && r901 < o205.length && s901 < o205.length && (c901[t901].x = o205[s901].x, c901[t901].y = o205[r901].y);
                        }
                },
                fillBuffers(p900, q900) {
                    const r900 = p900.renderData, s900 = r900.chunk;
                    (p900._flagChangedVersion !== p900.node.flagChangedVersion || r900.vertDirty) && (this.updateWorldVertexData(p900, s900), r900.vertDirty = !1, p900._flagChangedVersion = p900.node.flagChangedVersion), s900.bufferId;
                    const t900 = s900.vertexOffset, u900 = s900.meshBuffer, v900 = s900.meshBuffer.iData;
                    let w900 = u900.indexOffset;
                    for (let x900 = 0; x900 < 3; ++x900)
                        for (let y900 = 0; y900 < 3; ++y900) {
                            const z900 = t900 + 4 * x900 + y900;
                            v900[w900++] = z900, v900[w900++] = z900 + 1, v900[w900++] = z900 + 4, v900[w900++] = z900 + 1, v900[w900++] = z900 + 5, v900[w900++] = z900 + 4;
                        }
                    u900.indexOffset = w900;
                },
                updateWorldVertexData(c900, d900) {
                    c900.node.getWorldMatrix(n205);
                    const e900 = c900.renderData, f900 = e900.floatStride, g900 = e900.data, h900 = d900.vb;
                    let i900 = 0;
                    for (let j900 = 0; j900 < 4; ++j900) {
                        const k900 = g900[4 * j900];
                        for (let l900 = 0; l900 < 4; ++l900) {
                            const m900 = g900[l900].x, n900 = k900.y;
                            let o900 = n205.m03 * m900 + n205.m07 * n900 + n205.m15;
                            o900 = o900 ? 1 / o900 : 1, i900 = (4 * j900 + l900) * f900, h900[i900 + 0] = (n205.m00 * m900 + n205.m04 * n900 + n205.m12) * o900, h900[i900 + 1] = (n205.m01 * m900 + n205.m05 * n900 + n205.m13) * o900, h900[i900 + 2] = (n205.m02 * m900 + n205.m06 * n900 + n205.m14) * o900;
                        }
                    }
                },
                updateUVs(v899) {
                    if (!v899.spriteFrame)
                        return;
                    const w899 = v899.renderData, x899 = w899.chunk.vb, y899 = w899.floatStride, z899 = v899.spriteFrame.uvSliced;
                    let a900 = 3;
                    for (let b900 = 0; b900 < 16; b900++)
                        x899[a900] = z899[b900].u, x899[a900 + 1] = z899[b900].v, a900 += y899;
                },
                updateColor(k899) {
                    const l899 = k899.renderData, m899 = l899.chunk.vb, n899 = l899.floatStride;
                    let o899 = 5;
                    const p899 = k899.color, q899 = p899.r / 255, r899 = p899.g / 255, s899 = p899.b / 255, t899 = k899.node._uiProps.opacity;
                    for (let u899 = 0; u899 < 16; u899++)
                        m899[o899] = q899, m899[o899 + 1] = r899, m899[o899 + 2] = s899, m899[o899 + 3] = t899, o899 += n899;
                }
            }, q205 = new o147();
            let r205, s205, t205, u205, v205, w205, x205, y205 = 0;
            const z205 = [];
            let a206 = null;
            function f139(j899) {
                return j899 && (j899.insetTop > 0 || j899.insetBottom > 0 || j899.insetLeft > 0 || j899.insetRight > 0) ? 2 : 0;
            }
            const b206 = {
                createData: i899 => i899.requestRenderData(),
                updateRenderData(n898) {
                    const o898 = n898.renderData, p898 = n898.spriteFrame;
                    if (!p898 || !o898)
                        return;
                    if (!o898.vertDirty)
                        return;
                    const q898 = n898.node._uiProps.uiTransformComp, r898 = Math.abs(q898.width), s898 = Math.abs(q898.height), t898 = p898.getRect(), u898 = p898.insetLeft, v898 = p898.insetRight, w898 = t898.width - u898 - v898, x898 = p898.insetTop, y898 = p898.insetBottom, z898 = t898.height - x898 - y898;
                    let a899 = r898 - u898 - v898, b899 = s898 - x898 - y898;
                    a899 = a899 > 0 ? a899 : 0, b899 = b899 > 0 ? b899 : 0;
                    const c899 = 0 === w898 ? a899 : a899 / w898, d899 = 0 === z898 ? b899 : b899 / z898, e899 = f139(p898), f899 = Math.ceil(d899 + e899), g899 = Math.ceil(c899 + e899);
                    o898.dataLength = 4 * f899 * g899, this.updateVerts(n898, a899, b899, f899, g899), o898.vertexCount !== f899 * g899 * 4 && (n898.renderEntity.colorDirty = !0), o898.resize(f899 * g899 * 4, f899 * g899 * 6);
                    {
                        const h899 = o898.indexCount;
                        this.createQuadIndices(h899), o898.chunk.setIndexBuffer(a206), this.updateWorldUVData(n898);
                    }
                    o898.updateRenderData(n898, p898);
                },
                createQuadIndices(j898) {
                    if (j898 % 6 != 0)
                        return void r125("illegal index count!");
                    const k898 = j898 / 6;
                    a206 = null, a206 = new Uint16Array(j898);
                    let l898 = 0;
                    for (let m898 = 0; m898 < k898; m898++)
                        a206[l898++] = 0 + 4 * m898, a206[l898++] = 1 + 4 * m898, a206[l898++] = 2 + 4 * m898, a206[l898++] = 1 + 4 * m898, a206[l898++] = 3 + 4 * m898, a206[l898++] = 2 + 4 * m898;
                },
                updateUVs(i898) {
                    i898.renderData.vertDirty = !0, i898.markForUpdateRenderData();
                },
                fillBuffers(y897, z897) {
                    const a898 = y897.node, b898 = y897.renderData, c898 = b898.chunk;
                    (y897._flagChangedVersion !== a898.flagChangedVersion || b898.vertDirty) && (this.updateWorldVertexAndUVData(y897, c898), b898.vertDirty = !1, y897._flagChangedVersion = a898.flagChangedVersion), this.updateColorLate(y897), c898.bufferId;
                    let d898 = c898.vertexOffset;
                    const e898 = c898.meshBuffer, f898 = c898.meshBuffer.iData;
                    let g898 = e898.indexOffset;
                    for (let h898 = 0; h898 < b898.indexCount; h898 += 6)
                        f898[g898++] = d898, f898[g898++] = d898 + 1, f898[g898++] = d898 + 2, f898[g898++] = d898 + 1, f898[g898++] = d898 + 3, f898[g898++] = d898 + 2, d898 += 4, e898.indexOffset += 6;
                    e898.setDirty();
                },
                updateWorldUVData(r897) {
                    const s897 = r897.renderData, t897 = s897.floatStride, u897 = s897.data, v897 = s897.chunk.vb;
                    for (let w897 = 0; w897 < u897.length; w897++) {
                        const x897 = w897 * t897;
                        v897[x897 + 3] = u897[w897].u, v897[x897 + 4] = u897[w897].v;
                    }
                },
                updateWorldVertexAndUVData(e897, f897) {
                    e897.node.getWorldMatrix(q205);
                    const g897 = e897.renderData, h897 = g897.floatStride, i897 = g897.data, j897 = f897.vb, k897 = i897.length;
                    for (let l897 = 0; l897 < k897; l897++) {
                        const m897 = i897[l897].x, n897 = i897[l897].y, o897 = i897[l897].z;
                        let p897 = q205.m03 * m897 + q205.m07 * n897 + q205.m11 * o897 + q205.m15;
                        p897 = p897 ? 1 / p897 : 1;
                        const q897 = l897 * h897;
                        j897[q897] = (q205.m00 * m897 + q205.m04 * n897 + q205.m08 * o897 + q205.m12) * p897, j897[q897 + 1] = (q205.m01 * m897 + q205.m05 * n897 + q205.m09 * o897 + q205.m13) * p897, j897[q897 + 2] = (q205.m02 * m897 + q205.m06 * n897 + q205.m10 * o897 + q205.m14) * p897;
                    }
                    this.updateWorldUVData(e897);
                },
                updateVerts(l895, m895, n895, o895, p895) {
                    const q895 = l895.node._uiProps.uiTransformComp, r895 = l895.renderData.data, s895 = l895.spriteFrame, t895 = s895.rect, u895 = Math.abs(q895.width), v895 = Math.abs(q895.height), w895 = q895.anchorX * u895, x895 = q895.anchorY * v895, y895 = s895.insetLeft, z895 = s895.insetRight, a896 = t895.width - y895 - z895, b896 = s895.insetTop, c896 = s895.insetBottom, d896 = t895.height - b896 - c896, e896 = q895.width / (y895 + z895) > 1 ? 1 : q895.width / (y895 + z895), f896 = q895.height / (b896 + c896) > 1 ? 1 : q895.height / (b896 + c896);
                    let g896 = 0, h896 = 0;
                    g896 = a896 > 0 ? Math.floor(1e3 * m895) / 1e3 % a896 == 0 ? a896 : m895 % a896 : m895, h896 = d896 > 0 ? Math.floor(1e3 * n895) / 1e3 % d896 == 0 ? d896 : n895 % d896 : n895, z205.length = 0, y205 = Math.max(o895 + 1, p895 + 1);
                    for (let d897 = 0; d897 < y205; d897++)
                        z205.push({
                            x: 0,
                            y: 0,
                            z: 0,
                            u: 0,
                            v: 0,
                            color: new a147()
                        });
                    const i896 = f139(s895);
                    if (0 === i896)
                        for (let c897 = 0; c897 < y205; c897++)
                            z205[c897].x = c897 >= p895 ? u895 - w895 : c897 * a896 - w895, z205[c897].y = c897 >= o895 ? v895 - x895 : c897 * d896 - x895;
                    else
                        for (let b897 = 0; b897 < y205; b897++)
                            0 === b897 ? z205[b897].x = -w895 : 1 === b897 ? z205[b897].x = y895 * e896 - w895 : b897 > 1 && b897 < p895 - 1 ? z205[b897].x = a896 > 0 ? y895 * e896 - w895 + a896 * (b897 - 1) : y895 + m895 - w895 : b897 === p895 - 1 ? z205[b897].x = y895 * e896 - w895 + g896 + a896 * (b897 - 2) : b897 >= p895 && (z205[b897].x = Math.min(y895 + m895 + z895, u895) - w895), 0 === b897 ? z205[b897].y = -x895 : 1 === b897 ? z205[b897].y = c896 * f896 - x895 : b897 > 1 && b897 < o895 - 1 ? z205[b897].y = d896 > 0 ? c896 * f896 - x895 + d896 * (b897 - 1) : c896 + n895 - x895 : b897 === o895 - 1 ? z205[b897].y = c896 * f896 - x895 + h896 + d896 * (b897 - 2) : b897 >= o895 && (z205[b897].y = Math.min(c896 + n895 + b896, v895) - x895);
                    let j896 = 0, k896 = 0, l896 = 0, m896 = 0;
                    for (let y896 = 0; y896 < o895; ++y896) {
                        l896 = z205[y896].y, m896 = z205[y896 + 1].y;
                        for (let z896 = 0; z896 < p895; ++z896) {
                            j896 = z205[z896].x, k896 = z205[z896 + 1].x;
                            const a897 = 4 * (y896 * p895 + z896);
                            r895[a897].x = j896, r895[a897].y = l896, r895[a897 + 1].x = k896, r895[a897 + 1].y = l896, r895[a897 + 2].x = j896, r895[a897 + 2].y = m896, r895[a897 + 3].x = k896, r895[a897 + 3].y = m896;
                        }
                    }
                    const n896 = s895.rotated;
                    s895.uv;
                    const o896 = s895.uvSliced;
                    r205 = o896[0], s205 = o896[1], t205 = o896[2], u205 = o896[3], v205 = o896[4], w205 = o896[8], x205 = o896[12];
                    let p896 = 0, q896 = 0;
                    const r896 = 0 === a896 ? m895 : m895 / a896, s896 = 0 === d896 ? n895 : n895 / d896, t896 = [], u896 = [];
                    for (let v896 = 0; v896 < o895; ++v896) {
                        q896 = n895 > d896 ? n895 >= (i896 > 0 ? v896 : v896 + 1) * d896 ? 1 : s896 % 1 : s896;
                        for (let w896 = 0; w896 < p895; ++w896) {
                            p896 = m895 > a896 ? m895 >= (i896 > 0 ? w896 : w896 + 1) * a896 ? 1 : r896 % 1 : r896, n896 ? (0 === i896 ? (t896[0] = v205.u, t896[1] = v205.u, t896[2] = v205.u + (w205.u - v205.u) * q896, u896[0] = s205.v, u896[1] = s205.v + (t205.v - s205.v) * p896, u896[2] = s205.v) : (0 === v896 ? (t896[0] = r205.u, t896[1] = r205.u, t896[2] = v205.u) : v896 < o895 - 1 ? (t896[0] = v205.u, t896[1] = v205.u, t896[2] = v205.u + (w205.u - v205.u) * q896) : v896 === o895 - 1 && (t896[0] = w205.u, t896[1] = w205.u, t896[2] = x205.u), 0 === w896 ? (u896[0] = r205.v, u896[1] = s205.v, u896[2] = r205.v) : w896 < p895 - 1 ? (u896[0] = s205.v, u896[1] = s205.v + (t205.v - s205.v) * p896, u896[2] = s205.v) : w896 === p895 - 1 && (u896[0] = t205.v, u896[1] = u205.v, u896[2] = t205.v)), t896[3] = t896[2], u896[3] = u896[1]) : (0 === i896 ? (t896[0] = s205.u, t896[1] = s205.u + (t205.u - s205.u) * p896, t896[2] = s205.u, u896[0] = v205.v, u896[1] = v205.v, u896[2] = v205.v + (w205.v - v205.v) * q896) : (0 === w896 ? (t896[0] = r205.u, t896[1] = s205.u, t896[2] = r205.u) : w896 < p895 - 1 ? (t896[0] = s205.u, t896[1] = s205.u + (t205.u - s205.u) * p896, t896[2] = s205.u) : w896 === p895 - 1 && (t896[0] = t205.u, t896[1] = u205.u, t896[2] = t205.u), 0 === v896 ? (u896[0] = r205.v, u896[1] = r205.v, u896[2] = v205.v) : v896 < o895 - 1 ? (u896[0] = v205.v, u896[1] = v205.v, u896[2] = v205.v + (w205.v - v205.v) * q896) : v896 === o895 - 1 && (u896[0] = w205.v, u896[1] = w205.v, u896[2] = x205.v)), t896[3] = t896[1], u896[3] = u896[2]);
                            const x896 = 4 * (v896 * p895 + w896);
                            r895[x896].u = t896[0], r895[x896].v = u896[0], r895[x896 + 1].u = t896[1], r895[x896 + 1].v = u896[1], r895[x896 + 2].u = t896[2], r895[x896 + 2].v = u896[2], r895[x896 + 3].u = t896[3], r895[x896 + 3].v = u896[3];
                        }
                    }
                },
                updateColorLate(z894) {
                    const a895 = z894.renderData, b895 = a895.chunk.vb, c895 = a895.floatStride, d895 = a895.vertexCount;
                    let e895 = 5;
                    const f895 = z894.color, g895 = f895.r / 255, h895 = f895.g / 255, i895 = f895.b / 255, j895 = z894.node._uiProps.opacity;
                    for (let k895 = 0; k895 < d895; k895++)
                        b895[e895] = g895, b895[e895 + 1] = h895, b895[e895 + 2] = i895, b895[e895 + 3] = j895, e895 += c895;
                },
                updateColor(y894) { }
            }, c206 = w196.Type, d206 = w196.FillType, e206 = g125("spriteAssembler", {
                getAssembler(v894) {
                    let w894 = m205;
                    const x894 = v894;
                    switch (x894.type) {
                        case c206.SLICED:
                            w894 = p205;
                            break;
                        case c206.TILED:
                            w894 = b206;
                            break;
                        case c206.FILLED:
                            w894 = x894.fillType === d206.RADIAL ? k205 : y204;
                    }
                    return w894;
                }
            });
            w196.Assembler = e206;
            const f206 = [r168.EventType.MOUSE_DOWN, r168.EventType.MOUSE_MOVE, r168.EventType.MOUSE_UP, r168.EventType.MOUSE_WHEEL], g206 = [r168.EventType.TOUCH_START, r168.EventType.TOUCH_MOVE, r168.EventType.TOUCH_END, r168.EventType.TOUCH_CANCEL];
            new class {
                constructor() {
                    this.priority = o168.UI, this._isListDirty = !1, this._inDispatchCount = 0, this._pointerEventProcessorList = [], this._processorListToAdd = [], this._processorListToRemove = [], s168._registerEventDispatcher(this), u175.callbacksInvoker.on(t175.ADD_POINTER_EVENT_PROCESSOR, this.addPointerEventProcessor, this), u175.callbacksInvoker.on(t175.REMOVE_POINTER_EVENT_PROCESSOR, this.removePointerEventProcessor, this), u175.callbacksInvoker.on(t175.MARK_LIST_DIRTY, this._markListDirty, this);
                }
                dispatchEvent(t894) {
                    const u894 = t894.type;
                    return g206.includes(u894) ? this.dispatchEventTouch(t894) : !f206.includes(u894) || this.dispatchEventMouse(t894);
                }
                addPointerEventProcessor(s894) {
                    0 === this._inDispatchCount ? this._pointerEventProcessorList.includes(s894) || (this._pointerEventProcessorList.push(s894), this._isListDirty = !0) : this._processorListToAdd.includes(s894) || this._processorListToAdd.push(s894), j127(this._processorListToRemove, s894);
                }
                removePointerEventProcessor(r894) {
                    0 === this._inDispatchCount ? (j127(this._pointerEventProcessorList, r894), this._isListDirty = !0) : this._processorListToRemove.includes(r894) || this._processorListToRemove.push(r894), j127(this._processorListToAdd, r894);
                }
                dispatchEventMouse(l894) {
                    this._inDispatchCount++, this._sortPointerEventProcessorList();
                    const m894 = this._pointerEventProcessorList, n894 = m894.length;
                    let o894 = !0;
                    for (let p894 = 0; p894 < n894; ++p894) {
                        const q894 = m894[p894];
                        if (q894.isEnabled && q894.shouldHandleEventMouse && q894._handleEventMouse(l894)) {
                            if (o894 = !1, !l894.preventSwallow)
                                break;
                            l894.preventSwallow = !1;
                        }
                    }
                    return --this._inDispatchCount <= 0 && this._updatePointerEventProcessorList(), o894;
                }
                dispatchEventTouch(c894) {
                    this._inDispatchCount++, this._sortPointerEventProcessorList();
                    const d894 = this._pointerEventProcessorList, e894 = d894.length, f894 = c894.touch;
                    let g894 = !0;
                    for (let h894 = 0; h894 < e894; ++h894) {
                        const i894 = d894[h894];
                        if (i894.isEnabled && i894.shouldHandleEventTouch)
                            if (c894.type === r166.TOUCH_START) {
                                if (i894._handleEventTouch(c894)) {
                                    if (i894.isEnabled)
                                        i894.claimedTouchIdList.push(f894.getID());
                                    else {
                                        const k894 = new w166([c894.touch], !0, r166.TOUCH_CANCEL);
                                        k894.touch = c894.touch, i894.dispatchEvent(k894), i894.claimedTouchIdList.length = 0;
                                    }
                                    if (g894 = !1, !c894.preventSwallow)
                                        break;
                                    c894.preventSwallow = !1;
                                }
                            }
                            else if (i894.claimedTouchIdList.length > 0) {
                                const j894 = i894.claimedTouchIdList.indexOf(f894.getID());
                                if (-1 !== j894) {
                                    if (i894._handleEventTouch(c894), c894.type !== r166.TOUCH_END && c894.type !== r166.TOUCH_CANCEL || h127(i894.claimedTouchIdList, j894), g894 = !1, !c894.preventSwallow)
                                        break;
                                    c894.preventSwallow = !1;
                                }
                            }
                    }
                    return --this._inDispatchCount <= 0 && this._updatePointerEventProcessorList(), g894;
                }
                _updatePointerEventProcessorList() {
                    const w893 = this._processorListToAdd, x893 = w893.length;
                    for (let b894 = 0; b894 < x893; ++b894)
                        this.addPointerEventProcessor(w893[b894]);
                    w893.length = 0;
                    const y893 = this._processorListToRemove, z893 = y893.length;
                    for (let a894 = 0; a894 < z893; ++a894)
                        this.removePointerEventProcessor(y893[a894]);
                    y893.length = 0;
                }
                _sortPointerEventProcessorList() {
                    if (!this._isListDirty)
                        return;
                    const q893 = this._pointerEventProcessorList, r893 = q893.length;
                    for (let s893 = 0; s893 < r893; ++s893) {
                        const t893 = q893[s893], u893 = t893.node;
                        if (u893._uiProps) {
                            const v893 = u893._uiProps.uiTransformComp;
                            t893.cachedCameraPriority = v893.cameraPriority;
                        }
                    }
                    q893.sort(this._sortByPriority), this._isListDirty = !1;
                }
                _sortByPriority(b893, c893) {
                    const d893 = b893.node, e893 = c893.node;
                    if (!(c893 && e893 && e893.activeInHierarchy && e893._uiProps.uiTransformComp))
                        return -1;
                    if (!(b893 && d893 && d893.activeInHierarchy && d893._uiProps.uiTransformComp))
                        return 1;
                    if (b893.cachedCameraPriority !== c893.cachedCameraPriority)
                        return c893.cachedCameraPriority - b893.cachedCameraPriority;
                    let f893 = d893, g893 = e893, h893 = !1;
                    for (; (null === (i893 = f893.parent) || void 0 === i893 ? void 0 : i893.uuid) !== (null === (j893 = g893.parent) || void 0 === j893 ? void 0 : j893.uuid);) {
                        var i893, j893, k893, l893, m893, n893;
                        f893 = null === (null === (k893 = f893) || void 0 === k893 || null === (l893 = k893.parent) || void 0 === l893 ? void 0 : l893.parent) ? (h893 = !0) && e893 : f893 && f893.parent, g893 = null === (null === (m893 = g893) || void 0 === m893 || null === (n893 = m893.parent) || void 0 === n893 ? void 0 : n893.parent) ? (h893 = !0) && d893 : g893 && g893.parent;
                    }
                    if (f893.uuid === g893.uuid) {
                        if (f893.uuid === e893.uuid)
                            return -1;
                        if (f893.uuid === d893.uuid)
                            return 1;
                    }
                    const o893 = f893 ? f893.getSiblingIndex() : 0, p893 = g893 ? g893.getSiblingIndex() : 0;
                    return h893 ? o893 - p893 : p893 - o893;
                }
                _markListDirty() {
                    this._isListDirty = !0;
                }
            }();
            const h206 = new c161(null), i206 = new o147();
            class j206 {
                get nativeObj() {
                    return this._nativeObj;
                }
                get currBufferAccessor() {
                    return this._staticVBBuffer || (this._staticVBBuffer = this.switchBufferAccessor()), this._staticVBBuffer;
                }
                get batches() {
                    return this._batches;
                }
                set currStaticRoot(a893) {
                    this._currStaticRoot = a893;
                }
                set currIsStatic(z892) {
                    this._currIsStatic = z892;
                }
                constructor(v892) {
                    this.device = void 0, this._screens = [], this._staticVBBuffer = null, this._bufferAccessors = new Map(), this._drawBatchPool = void 0, this._batches = void 0, this._currBID = -1, this._indexStart = 0, this._emptyMaterial = new c178(), this._currRenderData = null, this._currMaterial = this._emptyMaterial, this._currTexture = null, this._currSampler = null, this._currStaticRoot = null, this._currComponent = null, this._currTransform = null, this._currTextureHash = 0, this._currSamplerHash = 0, this._currLayer = 0, this._currDepthStencilStateStage = null, this._currIsStatic = !1, this._currHash = 0, this._currIsMiddleware = !1, this._middlewareEnableBatch = !1, this._middlewareBuffer = null, this._middlewareIndexStart = 0, this._middlewareIndexCount = 0, this._pOpacity = 1, this._opacityDirty = 0, this._descriptorSetCache = new l206(), this._meshDataArray = [], this._maskClearModel = null, this._maskClearMtl = null, this._maskModelMesh = null, this._root = v892, this.device = v892.device, this._batches = new z155(64), this._drawBatchPool = new x155(() => new x202(), 128, y892 => y892.destroy(this));
                }
                initialize() {
                    return !0;
                }
                destroy() {
                    for (let u892 = 0; u892 < this._batches.length; u892++)
                        this._batches.array[u892] && this._batches.array[u892].destroy(this);
                    this._batches.destroy();
                    for (const t892 of this._bufferAccessors.values())
                        t892.destroy();
                    this._bufferAccessors.clear(), this._drawBatchPool && this._drawBatchPool.destroy(), this._descriptorSetCache.destroy(), k189.sharedManager.destroy(), this._maskClearModel && this._maskModelMesh && (s143.director.root.destroyModel(this._maskClearModel), this._maskModelMesh.destroy()), this._maskClearMtl && this._maskClearMtl.destroy();
                }
                syncRootNodesToNative() {
                    {
                        const r892 = [];
                        for (const s892 of this._screens)
                            r892.push(s892.node);
                        this._nativeObj.syncRootNodesToNative(r892);
                    }
                }
                addScreen(q892) {
                    this._screens.push(q892), this._screens.sort(this._screenSort), this.syncRootNodesToNative();
                }
                removeScreen(o892) {
                    const p892 = this._screens.indexOf(o892);
                    -1 !== p892 && (this._screens.splice(p892, 1), this.syncRootNodesToNative());
                }
                sortScreens() {
                    this._screens.sort(this._screenSort), this.syncRootNodesToNative();
                }
                getFirstRenderCamera(k892) {
                    if (k892.scene && k892.scene.renderScene) {
                        const l892 = k892.scene.renderScene.cameras;
                        for (let m892 = 0; m892 < l892.length; m892++) {
                            const n892 = l892[m892];
                            if (n892.visibility & k892.layer)
                                return n892;
                        }
                    }
                    return null;
                }
                update() { }
                uploadBuffers() {
                    this._nativeObj.uploadBuffers();
                }
                reset() {
                    this._nativeObj.reset();
                }
                switchBufferAccessor(h892 = l188) {
                    const i892 = h892 === l188 ? 36 : u137(h892);
                    if (!this._staticVBBuffer || this._staticVBBuffer.vertexFormatBytes !== i892) {
                        let j892 = this._bufferAccessors.get(i892);
                        j892 || (j892 = new x188(this.device, h892), this._bufferAccessors.set(i892, j892)), this._staticVBBuffer = j892, this._currBID = -1;
                    }
                    return this._staticVBBuffer;
                }
                registerBufferAccessor(f892, g892) {
                    this._bufferAccessors.set(f892, g892);
                }
                updateBuffer(c892, d892) {
                    const e892 = this.switchBufferAccessor(c892);
                    this._currBID !== d892 && (this._currBID = d892, this._indexStart = e892.getMeshBuffer(d892).indexOffset);
                }
                commitComp(t891, u891, v891, w891, x891) {
                    let y891, z891 = 0, a892 = -1;
                    if (u891 && u891.chunk) {
                        if (!u891.isValid())
                            return;
                        z891 = u891.dataHash, y891 = u891.material, a892 = u891.chunk.bufferId;
                    }
                    t891.stencilStage === c189.ENTER_LEVEL || t891.stencilStage === c189.ENTER_LEVEL_INVERTED ? this._insertMaskBatch(t891) : t891.stencilStage = k189.sharedManager.stage;
                    const b892 = t891.stencilStage;
                    this._currHash === z891 && 0 !== z891 && this._currMaterial === y891 && this._currDepthStencilStateStage === b892 || (this.autoMergeBatches(this._currComponent), u891 && !u891._isMeshBuffer && this.updateBuffer(u891.vertexFormat, a892), this._currRenderData = u891, this._currHash = u891 ? u891.dataHash : 0, this._currComponent = t891, this._currTransform = x891, this._currMaterial = t891.getRenderMaterial(0), this._currDepthStencilStateStage = b892, this._currLayer = t891.node.layer, v891 ? (this._currTexture = v891.getGFXTexture(), this._currSampler = v891.getGFXSampler(), this._currTextureHash = v891.getHash(), this._currSamplerHash = this._currSampler.hash) : (this._currTexture = null, this._currSampler = null, this._currTextureHash = 0, this._currSamplerHash = 0)), w891.fillBuffers(t891, this);
                }
                commitIA(l891, m891, n891, o891, p891) {
                    let q891;
                    this._currMaterial !== this._emptyMaterial && (this.autoMergeBatches(this._currComponent), this.resetRenderStates());
                    let r891 = 0;
                    l891 && (l891.stencilStage = k189.sharedManager.stage, q891 = null !== l891.customMaterial ? k189.sharedManager.getStencilStage(l891.stencilStage, o891) : k189.sharedManager.getStencilStage(l891.stencilStage), r891 = k189.sharedManager.getStencilHash(l891.stencilStage));
                    const s891 = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
                    s891.visFlags = l891.node.layer, s891.inputAssembler = m891, s891.useLocalData = p891 || null, n891 && (s891.texture = n891.getGFXTexture(), s891.sampler = n891.getGFXSampler(), s891.textureHash = n891.getHash(), s891.samplerHash = s891.sampler.hash), s891.fillPasses(o891 || null, q891, r891, null), this._batches.push(s891);
                }
                commitMiddleware(d891, e891, f891, g891, h891, i891, j891) {
                    const k891 = h891.getGFXTexture();
                    j891 && this._middlewareEnableBatch && this._middlewareBuffer === e891 && this._currTexture === k891 && this._currMaterial.hash === i891.hash && this._middlewareIndexStart + this._middlewareIndexCount === f891 && this._currLayer === d891.node.layer ? this._middlewareIndexCount += g891 : (this.autoMergeBatches(this._currComponent), this.resetRenderStates(), this._currComponent = d891, this._currTexture = k891, this._currSampler = h891.getGFXSampler(), this._currTextureHash = h891.getHash(), this._currLayer = d891.node.layer, this._currSamplerHash = this._currSampler.hash, this._currHash = 0, this._currTransform = j891 ? null : d891.node, this._middlewareEnableBatch = j891, this._middlewareBuffer = e891, this._currMaterial = i891, this._middlewareIndexStart = f891, this._middlewareIndexCount = g891), this._currIsMiddleware = !0;
                }
                commitModel(u890, v890, w890) {
                    let x890;
                    this._currMaterial !== this._emptyMaterial && (this.autoMergeBatches(this._currComponent), this.resetRenderStates());
                    let y890 = 0;
                    w890 && (u890.stencilStage === c189.ENTER_LEVEL || u890.stencilStage === c189.ENTER_LEVEL_INVERTED ? this._insertMaskBatch(u890) : u890.stencilStage = k189.sharedManager.stage, x890 = k189.sharedManager.getStencilStage(u890.stencilStage, w890), y890 = k189.sharedManager.getStencilHash(u890.stencilStage));
                    const z890 = s143.director.getTotalFrames();
                    v890 && (v890.updateTransform(z890), v890.updateUBOs(z890));
                    for (let a891 = 0; a891 < v890.subModels.length; a891++) {
                        const b891 = this._drawBatchPool.alloc(), c891 = v890.subModels[a891];
                        b891.visFlags = u890.node.layer, b891.model = v890, b891.texture = null, b891.sampler = null, b891.useLocalData = null, x890 || (x890 = null), b891.fillPasses(w890, x890, y890, c891.patches), b891.inputAssembler = c891.inputAssembler, b891.model.visFlags = b891.visFlags, b891.descriptorSet = c891.descriptorSet, this._batches.push(b891);
                    }
                }
                setupStaticBatch(s890, t890) {
                    this.finishMergeBatches(), this._staticVBBuffer = t890, this.currStaticRoot = s890;
                }
                endStaticBatch() {
                    this.finishMergeBatches(), this.currStaticRoot = null, this._staticVBBuffer = null, this.switchBufferAccessor();
                }
                commitStaticBatch(r890) {
                    this._batches.concat(r890.drawBatchList), this.finishMergeBatches();
                }
                autoMergeBatches(g890) {
                    if (this._currIsMiddleware)
                        return void this.mergeBatchesForMiddleware(g890);
                    const h890 = this._currMaterial;
                    if (!h890)
                        return;
                    let i890;
                    const j890 = this._currRenderData, k890 = this._staticVBBuffer;
                    if (j890 && j890._isMeshBuffer)
                        i890 = j890.requestIA(this.device), -1 === this._meshDataArray.indexOf(j890) && this._meshDataArray.push(j890);
                    else if (k890) {
                        const o890 = this._currBID, p890 = k890.getMeshBuffer(o890);
                        if (!p890)
                            return;
                        const q890 = p890.indexOffset - this._indexStart;
                        if (q890 <= 0)
                            return;
                        this._indexStart, p890.indexOffset, p890.setDirty(), i890 = p890.requireFreeIA(this.device), i890.firstIndex = this._indexStart, i890.indexCount = q890, this._indexStart = p890.indexOffset;
                    }
                    if (this._currBID = -1, !i890 || !this._currTexture)
                        return;
                    let l890, m890 = 0;
                    g890 && (l890 = null !== g890.customMaterial ? k189.sharedManager.getStencilStage(g890.stencilStage, h890) : k189.sharedManager.getStencilStage(g890.stencilStage), m890 = k189.sharedManager.getStencilHash(g890.stencilStage));
                    const n890 = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
                    n890.visFlags = this._currLayer, n890.texture = this._currTexture, n890.sampler = this._currSampler, n890.inputAssembler = i890, n890.useLocalData = this._currTransform, n890.textureHash = this._currTextureHash, n890.samplerHash = this._currSamplerHash, n890.fillPasses(h890, l890, m890, null), this._batches.push(n890);
                }
                mergeBatchesForMiddleware(b890) {
                    let c890, d890 = 0;
                    b890.stencilStage = k189.sharedManager.stage, c890 = null !== b890.customMaterial ? k189.sharedManager.getStencilStage(b890.stencilStage, this._currMaterial) : k189.sharedManager.getStencilStage(b890.stencilStage), d890 = k189.sharedManager.getStencilHash(b890.stencilStage);
                    const e890 = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
                    e890.visFlags = b890.node.layer;
                    const f890 = this._middlewareBuffer.requireFreeIA(this.device);
                    f890.firstIndex = this._middlewareIndexStart, f890.indexCount = this._middlewareIndexCount, e890.inputAssembler = f890, e890.useLocalData = this._currTransform, e890.texture = this._currTexture, e890.sampler = this._currSampler, e890.textureHash = this._currTextureHash, e890.samplerHash = this._currSamplerHash, e890.fillPasses(this._currMaterial || null, c890, d890, null), this._batches.push(e890), this._currIsMiddleware = !1, this._middlewareBuffer = null;
                }
                forceMergeBatches(y889, z889, a890) {
                    this._currMaterial = y889, z889 ? (this._currTexture = z889.getGFXTexture(), this._currSampler = z889.getGFXSampler(), this._currTextureHash = z889.getHash(), this._currSamplerHash = this._currSampler.hash) : (this._currTexture = this._currSampler = null, this._currTextureHash = this._currSamplerHash = 0), this._currLayer = a890.node.layer, this.autoMergeBatches(a890);
                }
                resetRenderStates() {
                    this._currMaterial = this._emptyMaterial, this._currRenderData = null, this._currTexture = null, this._currComponent = null, this._currTransform = null, this._currTextureHash = 0, this._currSamplerHash = 0, this._currLayer = 0;
                }
                finishMergeBatches() {
                    this.autoMergeBatches(), this.resetRenderStates();
                }
                flushMaterial(x889) {
                    this._currMaterial = x889;
                }
                walk(z888, a889 = 0) {
                    if (!z888.activeInHierarchy)
                        return;
                    const b889 = z888.children, c889 = z888._uiProps, d889 = c889.uiComp, e889 = this._pOpacity;
                    let f889 = e889;
                    const g889 = d889 && d889.color ? d889.color.a / 255 : 1;
                    if (this._pOpacity = f889 *= g889 * c889.localOpacity, c889.setOpacity(f889), !w128(f889, 0, q146)) {
                        if (c889.colorDirty && this._opacityDirty++, d889 && d889.enabledInHierarchy && d889.fillBuffers(this), this._opacityDirty && d889 && !d889.useVertexOpacity && d889.renderData && d889.renderData.vertexCount > 0) {
                            !function (l889, m889) {
                                const n889 = l889.vertexFormat, o889 = l889.chunk.vb;
                                let p889, q889, r889, s889 = 0;
                                for (let t889 = 0; t889 < n889.length; ++t889) {
                                    if (p889 = n889[t889], q889 = n161[p889.format], q889.hasAlpha)
                                        if (r889 = l889.floatStride, q889.size / q889.count == 1) {
                                            const v889 = ~~x128(Math.round(255 * m889), 0, 255);
                                            for (let w889 = s889; w889 < o889.length; w889 += r889)
                                                o889[w889] = (4294967040 & o889[w889] | v889) >>> 0;
                                        }
                                        else if (q889.size / q889.count == 4)
                                            for (let u889 = s889 + 3; u889 < o889.length; u889 += r889)
                                                o889[u889] = m889;
                                    s889 += q889.size >> 2;
                                }
                            }(d889.renderData, f889);
                            const j889 = d889.renderData.getMeshBuffer();
                            j889 && j889.setDirty();
                        }
                        if (b889.length > 0 && !z888._static)
                            for (let h889 = 0; h889 < b889.length; ++h889) {
                                const i889 = b889[h889];
                                this.walk(i889, a889);
                            }
                        c889.colorDirty && (this._opacityDirty--, c889.colorDirty = !1);
                    }
                    this._pOpacity = e889, d889 && d889.enabledInHierarchy && (d889.postUpdateAssembler(this), (d889.stencilStage === c189.ENTER_LEVEL || d889.stencilStage === c189.ENTER_LEVEL_INVERTED) && k189.sharedManager.getMaskStackSize() > 0 && (this.autoMergeBatches(this._currComponent), this.resetRenderStates(), k189.sharedManager.exitMask())), a889 += 1;
                }
                _screenSort(x888, y888) {
                    return x888.node.getSiblingIndex() - y888.node.getSiblingIndex();
                }
                _releaseDescriptorSetCache(v888, w888 = null) {
                    this._nativeObj.releaseDescriptorSetCache(v888, w888);
                }
                _createClearModel() {
                    if (!this._maskClearModel) {
                        this._maskClearMtl = r185.get("default-clear-stencil"), this._maskClearModel = s143.director.root.createModel(b176);
                        const p888 = u137(j188), q888 = b162.gfxDevice, r888 = q888.createBuffer(new x159(w157.VERTEX | w157.TRANSFER_DST, z157.DEVICE, 4 * p888, p888)), s888 = new Float32Array([-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0]);
                        r888.update(s888);
                        const t888 = q888.createBuffer(new x159(w157.INDEX | w157.TRANSFER_DST, z157.DEVICE, 6 * Uint16Array.BYTES_PER_ELEMENT, Uint16Array.BYTES_PER_ELEMENT)), u888 = new Uint16Array([0, 1, 2, 2, 1, 3]);
                        t888.update(u888), this._maskModelMesh = new r186([r888], j188, t158.TRIANGLE_LIST, t888), this._maskModelMesh.subMeshIdx = 0, this._maskClearModel.initSubModel(0, this._maskModelMesh, this._maskClearMtl);
                    }
                }
                _insertMaskBatch(e888) {
                    this.autoMergeBatches(this._currComponent), this.resetRenderStates(), this._createClearModel(), this._maskClearModel.node = this._maskClearModel.transform = e888.node;
                    const f888 = k189.sharedManager;
                    f888.pushMask(1);
                    const g888 = f888.clear(e888);
                    let h888, i888 = 0;
                    const j888 = this._maskClearMtl;
                    j888 && (h888 = f888.getStencilStage(g888, j888), i888 = f888.getStencilHash(g888));
                    const k888 = this._maskClearModel, l888 = s143.director.getTotalFrames();
                    k888 && (k888.updateTransform(l888), k888.updateUBOs(l888));
                    for (let m888 = 0; m888 < k888.subModels.length; m888++) {
                        const n888 = this._drawBatchPool.alloc(), o888 = k888.subModels[m888];
                        n888.visFlags = e888.node.layer, n888.model = k888, n888.texture = null, n888.sampler = null, n888.useLocalData = null, h888 || (h888 = null), n888.fillPasses(j888, h888, i888, o888.patches), n888.inputAssembler = o888.inputAssembler, n888.model.visFlags = n888.visFlags, n888.descriptorSet = o888.descriptorSet, this._batches.push(n888);
                    }
                    f888.enableMask();
                }
                syncMeshBuffersToNative(z887, a888) {
                    {
                        const b888 = a888.map(d888 => d888.nativeObj);
                        this._nativeObj.syncMeshBuffersToNative(z887, b888);
                    }
                }
            }
            g125("UI", j206);
            class k206 {
                get descriptorSet() {
                    return this._descriptorSet;
                }
                constructor() {
                    this._descriptorSet = null, this._transform = null, this._textureHash = 0, this._samplerHash = 0, this._localBuffer = null, this._transformUpdate = !0;
                    const y887 = b162.gfxDevice;
                    this._localData = new Float32Array(o170.COUNT), this._localBuffer = y887.createBuffer(new x159(w157.UNIFORM | w157.TRANSFER_DST, z157.HOST | z157.DEVICE, o170.SIZE, o170.SIZE));
                }
                initialize(v887) {
                    const w887 = b162.gfxDevice;
                    this._transform = v887.useLocalData, this._textureHash = v887.textureHash, this._samplerHash = v887.samplerHash, h206.layout = v887.passes[0].localSetLayout, this._descriptorSet = w887.createDescriptorSet(h206), this._descriptorSet.bindBuffer(o170.BINDING, this._localBuffer);
                    const x887 = s169.SAMPLER_SPRITE;
                    this._descriptorSet.bindTexture(x887, v887.texture), this._descriptorSet.bindSampler(x887, v887.sampler), this._descriptorSet.update(), this._transformUpdate = !0;
                }
                updateTransform(u887) {
                    u887 !== this._transform && (this._transform = u887, this._transformUpdate = !0, this.uploadLocalData());
                }
                equals(r887, s887, t887) {
                    return this._transform === r887 && this._textureHash === s887 && this._samplerHash === t887;
                }
                reset() {
                    this._transform = null, this._textureHash = 0, this._samplerHash = 0;
                }
                destroy() {
                    this._localBuffer && (this._localBuffer.destroy(), this._localBuffer = null), this._descriptorSet && (this._descriptorSet.destroy(), this._descriptorSet = null), this._localData = null;
                }
                isValid() {
                    return this._transform && this._transform.isValid;
                }
                uploadLocalData() {
                    const p887 = this._transform;
                    if ((p887.hasChangedFlags || p887.isTransformDirty()) && (p887.updateWorldTransform(), this._transformUpdate = !0), this._transformUpdate) {
                        const q887 = p887.worldMatrix;
                        o147.toArray(this._localData, q887, o170.MAT_WORLD_OFFSET), o147.invert(i206, q887), o147.transpose(i206, i206), o147.toArray(this._localData, i206, o170.MAT_WORLD_IT_OFFSET), this._localBuffer.update(this._localData), this._transformUpdate = !1;
                    }
                }
            }
            class l206 {
                constructor() {
                    this._descriptorSetCache = new Map(), this._dsCacheHashByTexture = new Map(), this._localDescriptorSetCache = [], this._localCachePool = void 0, this._localCachePool = new x155(() => new k206(), 16, o887 => o887.destroy());
                }
                getDescriptorSet(d887) {
                    let e887;
                    if (s143.director.root, d887.useLocalData) {
                        const h887 = this._localDescriptorSetCache;
                        for (let j887 = 0, k887 = h887.length; j887 < k887; j887++) {
                            const l887 = h887[j887];
                            if (l887.equals(d887.useLocalData, d887.textureHash, d887.samplerHash))
                                return l887.descriptorSet;
                        }
                        const i887 = this._localCachePool.alloc();
                        return i887.initialize(d887), this._localDescriptorSetCache.push(i887), i887.descriptorSet;
                    }
                    if (e887 = d887.textureHash ^ d887.samplerHash, this._descriptorSetCache.has(e887))
                        return this._descriptorSetCache.get(e887);
                    {
                        h206.layout = d887.passes[0].localSetLayout;
                        const f887 = b162.gfxDevice.createDescriptorSet(h206), g887 = s169.SAMPLER_SPRITE;
                        return f887.bindTexture(g887, d887.texture), f887.bindSampler(g887, d887.sampler), f887.update(), this._descriptorSetCache.set(e887, f887), this._dsCacheHashByTexture.set(d887.textureHash, e887), f887;
                    }
                }
                update() {
                    const u886 = this._localDescriptorSetCache, v886 = u886.length;
                    if (0 === v886)
                        return;
                    const w886 = [];
                    for (let a887 = 0; a887 < v886; a887++) {
                        const b887 = u886[a887];
                        if (b887.isValid())
                            b887.uploadLocalData();
                        else {
                            b887.reset();
                            const c887 = u886.indexOf(b887);
                            w886.push(c887);
                        }
                    }
                    for (let x886 = w886.length - 1; x886 >= 0; x886--) {
                        const y886 = w886[x886], z886 = u886[y886];
                        u886.splice(y886, 1), this._localCachePool.free(z886);
                    }
                }
                reset() {
                    const q886 = this._localDescriptorSetCache, r886 = q886.length;
                    for (let s886 = 0; s886 < r886; s886++) {
                        const t886 = q886[s886];
                        this._localCachePool.free(t886);
                    }
                    this._localDescriptorSetCache.length = 0;
                }
                releaseDescriptorSetCache(o886) {
                    const p886 = this._dsCacheHashByTexture.get(o886);
                    p886 && this._descriptorSetCache.has(p886) && (this._descriptorSetCache.get(p886).destroy(), this._descriptorSetCache.delete(p886), this._dsCacheHashByTexture.delete(o886));
                }
                destroy() {
                    for (const n886 of this._descriptorSetCache.values())
                        n886.destroy();
                    this._descriptorSetCache.clear(), this._dsCacheHashByTexture.clear(), this._localDescriptorSetCache.length = 0, this._localCachePool.destroy();
                }
            }
            s143.internal.Batcher2D = j206, g125("UIDrawBatch", class extends x202 {
            }), m144(u188.prototype, "MeshBuffer", ["byteStart", "vertexStart", "indicesStart", "request"].map(m886 => ({
                name: m886,
                suggest: `please use meshBuffer.accessor.${m886} instead`
            }))), k144(u188.prototype, "MeshBuffer", [{
                    name: "indicesOffset",
                    newName: "indexOffset"
                }]), l144(u188.prototype, "MeshBuffer", [{
                    name: "vertexBuffers"
                }, {
                    name: "indexBuffer"
                }]), k144(j206.prototype, "Batcher2D", [{
                    name: "currBufferBatch",
                    newName: "currBufferAccessor"
                }, {
                    name: "acquireBufferBatch",
                    newName: "switchBufferAccessor"
                }]), l144(p189.prototype, "MeshRenderData", [{
                    name: "formatByte"
                }, {
                    name: "byteStart"
                }, {
                    name: "byteCount"
                }]), k144(p189.prototype, "MeshRenderData", [{
                    name: "indicesStart",
                    newName: "indexStart"
                }]), g125("QuadRenderData", class extends p189 {
                constructor(l886) {
                    super(l886), y125(9006);
                }
            });
            const m206 = u143.document;
            let n206 = null, o206 = -1;
            const p206 = "BES bswy:->@123丁ぁᄁ", q206 = Object.create(null), r206 = [], s206 = 3e3, t206 = (() => {
                let h886;
                return () => {
                    if (void 0 === h886)
                        if ("FontFace" in u143) {
                            const j886 = /Gecko.*Firefox\/(\d+)/.exec(u143.navigator.userAgent), k886 = /OS X.*Version\/10\..*Safari/.exec(u143.navigator.userAgent) && /Apple/.exec(u143.navigator.vendor);
                            h886 = j886 ? parseInt(j886[1], 10) > 42 : !k886;
                        }
                        else
                            h886 = !1;
                    return h886;
                };
            })();
            function g139() {
                let a886 = !0;
                const b886 = Date.now();
                for (let c886 = r206.length - 1; c886 >= 0; c886--) {
                    const d886 = r206[c886], e886 = d886.fontFamilyName;
                    if (b886 - d886.startTime > s206) {
                        y125(4933, e886), d886.onComplete(null, e886), r206.splice(c886, 1);
                        continue;
                    }
                    const f886 = d886.refWidth, g886 = `40px ${e886}`;
                    n206.font = g886, f886 !== o137(n206, p206, g886) ? (r206.splice(c886, 1), d886.onComplete(null, e886)) : a886 = !1;
                }
                a886 && (clearInterval(o206), o206 = -1);
            }
            function h139(q884, r884, s884) {
                const t884 = function (w885) {
                    const x885 = w885.lastIndexOf(".ttf");
                    if (-1 === x885)
                        return w885;
                    const y885 = w885.lastIndexOf("/");
                    let z885;
                    return z885 = -1 === y885 ? `${w885.substring(0, x885)}_LABEL` : `${w885.substring(y885 + 1, x885)}_LABEL`, -1 !== z885.indexOf(" ") && (z885 = `"${z885}"`), z885;
                }(q884);
                if (q206[t884])
                    return void s884(null, t884);
                if (!n206) {
                    const v885 = m206.createElement("canvas");
                    v885.width = 100, v885.height = 100, n206 = v885.getContext("2d");
                }
                const u884 = `40px ${t884}`, v884 = m206.createElement("style");
                v884.type = "text/css";
                let w884 = "";
                Number.isNaN(t884) ? w884 += `@font-face { font-family:${t884}; src:` : w884 += `@font-face { font-family:"${t884}"; src:`, w884 += `url("${q884}");`, v884.textContent = `${w884}}`, m206.body.appendChild(v884);
                const x884 = m206.createElement("div"), y884 = x884.style;
                if (y884.fontFamily = t884, x884.innerHTML = ".", y884.position = "absolute", y884.left = "-100px", y884.top = "-100px", m206.body.appendChild(x884), t206())
                    !function (c885, d885, e885) {
                        const f885 = new Promise((o885, p885) => {
                            const q885 = () => {
                                Date.now() - c885 >= s206 ? p885() : m206.fonts.load(`40px ${d885}`).then(u885 => {
                                    u885.length >= 1 ? o885() : setTimeout(q885, 100);
                                }, () => {
                                    p885();
                                });
                            };
                            q885();
                        });
                        let g885 = null;
                        const h885 = new Promise((m885, n885) => {
                            g885 = setTimeout(n885, s206);
                        });
                        Promise.race([h885, f885]).then(() => {
                            g885 && (clearTimeout(g885), g885 = null), e885(null, d885);
                        }, () => {
                            y125(4933, d885), e885(null, d885);
                        });
                    }(Date.now(), t884, s884);
                else {
                    const b885 = {
                        fontFamilyName: t884,
                        refWidth: o137(n206, p206, u884),
                        onComplete: s884,
                        startTime: Date.now()
                    };
                    r206.push(b885), -1 === o206 && (o206 = setInterval(g139, 100));
                }
                q206[t884] = v884;
            }
            function i139(l884, m884, n884, o884) {
                const p884 = new c187();
                p884._nativeUrl = l884, p884._nativeAsset = m884, o884(null, p884);
            }
            m184.register({
                ".font": h139,
                ".eot": h139,
                ".ttf": h139,
                ".woff": h139,
                ".svg": h139,
                ".ttc": h139
            }), t184.register({
                ".font": i139,
                ".eot": i139,
                ".ttf": i139,
                ".woff": i139,
                ".svg": i139,
                ".ttc": i139
            }), s143.UI = {
                MeshBuffer: u188,
                spriteAssembler: e206,
                graphicsAssembler: v203,
                labelAssembler: u204,
                RenderData: o189,
                MeshRenderData: p189
            }, e186.on(d186.EVENT_POST_SUBSYSTEM_INIT, () => {
                u206.init();
            });
            class u206 {
                static getSortingPriority(j884 = 0, k884 = 0) {
                    return (j884 + 32768 << 16 | k884 + 32768) >>> 0;
                }
                static getLayerIndex(h884 = 0) {
                    let i884 = 0;
                    return this.indexMap.has(h884) ? i884 = this.indexMap.get(h884) : z125(2105), i884;
                }
                static getLayerIndexByName(f884) {
                    const g884 = this.getLayerByName(f884);
                    return this.getLayerIndex(g884);
                }
                static getLayerName(d884 = 0) {
                    let e884 = "";
                    return this.nameMap.has(d884) ? e884 = this.nameMap.get(d884) : z125(2105), e884;
                }
                static getLayerByName(y883) {
                    const z883 = this.nameMap.size, a884 = this.nameMap.keys();
                    let b884 = 0;
                    for (let c884 = 0; c884 < z883; c884++)
                        if (b884 = a884.next().value, this.nameMap.get(b884) === y883)
                            return b884;
                    return z125(2106), 0;
                }
                static isLayerValid(x883) {
                    return !!this.indexMap.has(x883) || (z125(2105), !1);
                }
                static getBuiltinLayers() {
                    return [{
                            id: 0,
                            name: "default",
                            value: 0
                        }];
                }
                static init() {
                    let r883 = r145.querySettings(q145.Category.ENGINE, "sortingLayers");
                    r883 && 0 !== r883.length || (r883 = this.getBuiltinLayers()), u206.resetState();
                    for (let v883 = 0; v883 < r883.length; v883++) {
                        const w883 = r883[v883];
                        u206.setLayer(w883.id, w883.name, w883.value), u206.Enum[w883.name] = w883.id;
                    }
                    p127.update(u206.Enum), p127.sortList(u206.Enum, (t883, u883) => u206.getLayerIndex(t883.value) - u206.getLayerIndex(u883.value));
                }
                static setLayer(o883, p883, q883) {
                    this.nameMap.set(o883, p883), this.indexMap.set(o883, q883);
                }
                static resetState() {
                    const m883 = Object.keys(u206.Enum);
                    for (let n883 = 0; n883 < m883.length; n883++)
                        delete u206.Enum[u206.Enum[m883[n883]]], delete u206.Enum[m883[n883]];
                    u206.indexMap.clear(), u206.nameMap.clear();
                }
            }
            var v206, w206, x206, y206, z206, a207;
            g125("SortingLayers", u206), u206.nameMap = new Map(), u206.indexMap = new Map(), u206.Enum = p127({
                default: 0
            }), g125("Sorting", (v206 = e151("cc.Sorting"), w206 = a131(u206.Enum), v206(x206 = h151((i125((y206 = class extends a165 {
                constructor(...l883) {
                    super(...l883), this._sortingLayer = z206 && z206(), this._sortingOrder = a207 && a207(), this._modelRenderer = null;
                }
                get sortingLayer() {
                    return this._sortingLayer;
                }
                set sortingLayer(k883) {
                    k883 !== this._sortingLayer && u206.isLayerValid(k883) && (this._sortingLayer = k883, this._updateSortingPriority());
                }
                get sortingOrder() {
                    return this._sortingOrder;
                }
                set sortingOrder(j883) {
                    j883 !== this._sortingOrder && (this._sortingOrder = x128(j883, -32768, 32767), this._updateSortingPriority());
                }
                __preload() {
                    this._modelRenderer = this.getComponent("cc.ModelRenderer"), this._modelRenderer || y125(16301, this.node.name), this._updateSortingPriority();
                }
                _updateSortingPriority() {
                    const h883 = u206.getLayerIndex(this._sortingLayer), i883 = u206.getSortingPriority(h883, this._sortingOrder);
                    this._modelRenderer && this._modelRenderer.isValid && (this._modelRenderer.priority = i883);
                }
            }).prototype, "sortingLayer", [w206], Object.getOwnPropertyDescriptor(y206.prototype, "sortingLayer"), y206.prototype), z206 = p130(y206.prototype, "_sortingLayer", [j151], function () {
                return u206.Enum.default;
            }), a207 = p130(y206.prototype, "_sortingOrder", [j151], function () {
                return 0;
            }), x206 = y206)) || x206) || x206));
            const b207 = Symbol("CreateEval");
            var c207, d207, e207, f207, g207;
            e151("cc.animation.EmbeddedPlayer")((c207 = class extends j152 {
                constructor(...g883) {
                    super(...g883), this.begin = d207 && d207(), this.end = e207 && e207(), this.reconciledSpeed = f207 && f207(), this.playable = g207 && g207();
                }
            }, d207 = p130(c207.prototype, "begin", [j151], function () {
                return 0;
            }), e207 = p130(c207.prototype, "end", [j151], function () {
                return 0;
            }), f207 = p130(c207.prototype, "reconciledSpeed", [j151], function () {
                return !1;
            }), g207 = p130(c207.prototype, "playable", [j151], function () {
                return null;
            }), c207));
            class h207 {
            }
            class i207 {
                constructor(f883) {
                    this._randomAccess = f883;
                }
                get randomAccess() {
                    return this._randomAccess;
                }
                setTime(e883) { }
            }
            class j207 {
                constructor() {
                    this._isPlaying = !1, this._isPaused = !1, this._stepOnce = !1;
                }
                get isPlaying() {
                    return this._isPlaying;
                }
                get isPaused() {
                    return this._isPaused;
                }
                get isMotionless() {
                    return !this.isPlaying || this.isPaused;
                }
                play() {
                    this._isPlaying ? this._isPaused ? (this._isPaused = !1, this.onResume()) : this.onError(b126(3912)) : (this._isPlaying = !0, this.onPlay());
                }
                stop() {
                    this._isPlaying && (this._isPlaying = !1, this.onStop(), this._isPaused = !1);
                }
                pause() {
                    this._isPlaying && !this._isPaused && (this._isPaused = !0, this.onPause());
                }
                resume() {
                    this._isPlaying && this._isPaused && (this._isPaused = !1, this.onResume());
                }
                step() {
                    this.pause(), this._stepOnce = !0, this._isPlaying || this.play();
                }
                update(d883) { }
                onPlay() { }
                onPause() { }
                onResume() { }
                onStop() { }
                onError(c883) { }
            }
            let k207, l207;
            !function (b883) {
                b883[b883.Default = m155.Default] = "Default", b883[b883.Normal = m155.Normal] = "Normal", b883[b883.Reverse = m155.Reverse] = "Reverse", b883[b883.Loop = m155.Loop] = "Loop", b883[b883.LoopReverse = m155.Loop | m155.Reverse] = "LoopReverse", b883[b883.PingPong = m155.PingPong] = "PingPong", b883[b883.PingPongReverse = m155.PingPong | m155.Reverse] = "PingPongReverse";
            }(k207 || (k207 = {})), s127(k207);
            class m207 {
                constructor(a883) {
                    this.ratio = 0, this.time = 0, this.direction = 1, this.stopped = !0, this.iterations = 0, this.frameIndex = void 0, a883 && this.set(a883);
                }
                set(z882) {
                    this.ratio = z882.ratio, this.time = z882.time, this.direction = z882.direction, this.stopped = z882.stopped, this.iterations = z882.iterations, this.frameIndex = z882.frameIndex;
                }
            }
            class n207 {
                constructor(y882) {
                    this.weight = 0, this._pose = void 0, this._blendStateWriters = [], this._pose = y882;
                }
                destroy() {
                    for (let x882 = 0; x882 < this._blendStateWriters.length; ++x882)
                        this._pose.destroyWriter(this._blendStateWriters[x882]);
                    this._blendStateWriters.length = 0;
                }
                createPoseWriter(t882, u882, v882) {
                    const w882 = this._pose.createWriter(t882, u882, this, v882);
                    return this._blendStateWriters.push(w882), w882;
                }
            }
            function j139() {
                return s143.director.getAnimationManager();
            }
            !function (s882) {
                s882.PLAY = "play", s882.STOP = "stop", s882.PAUSE = "pause", s882.RESUME = "resume", s882.LASTFRAME = "lastframe", s882.FINISHED = "finished";
            }(l207 || (l207 = {})), s127(l207);
            class o207 extends j207 {
                get clip() {
                    return this._clip;
                }
                get name() {
                    return this._name;
                }
                get length() {
                    return this.duration;
                }
                get wrapMode() {
                    return this._wrapMode;
                }
                set wrapMode(q882) {
                    var r882;
                    this._wrapMode = q882, this.time = 0, q882 & m155.Loop ? this.repeatCount = 1 / 0 : this.repeatCount = 1, null === (r882 = this._clipEventEval) || void 0 === r882 || r882.setWrapMode(q882);
                }
                get repeatCount() {
                    return this._repeatCount;
                }
                set repeatCount(n882) {
                    this._repeatCount = n882;
                    const o882 = this._wrapMode & m155.ShouldWrap, p882 = (this.wrapMode & m155.Reverse) === m155.Reverse;
                    this._useSimpleProcess = n882 === 1 / 0 && !o882 && !p882;
                }
                get delay() {
                    return this._delay;
                }
                set delay(m882) {
                    this._delayTime = this._delay = m882;
                }
                get playbackRange() {
                    return this._playbackRange;
                }
                set playbackRange(l882) {
                    l882.max, l882.min, this._playbackRange.min = Math.max(l882.min, 0), this._playbackRange.max = Math.min(l882.max, this.duration), this._playbackDuration = this._playbackRange.max - this._playbackRange.min, this.setTime(0);
                }
                get speed() {
                    return this._speed;
                }
                set speed(j882) {
                    var k882;
                    this._speed = j882, null === (k882 = this._clipEmbeddedPlayerEval) || void 0 === k882 || k882.notifyHostSpeedChanged(j882);
                }
                get current() {
                    return this.getWrappedInfo(this.time).time;
                }
                get ratio() {
                    return 0 === this.duration ? 0 : this.current / this.duration;
                }
                get weight() {
                    return this._weight;
                }
                set weight(i882) {
                    this._weight = i882, this._poseOutput && (this._poseOutput.weight = i882);
                }
                constructor(g882, h882 = "") {
                    super(), this.duration = 1, this.time = 0, this.frameRate = 0, this._targetNode = null, this._curveLoaded = !1, this._clip = void 0, this._speed = 1, this._useSimpleProcess = !1, this._target = null, this._wrapMode = k207.Normal, this._repeatCount = 1, this._delay = 0, this._delayTime = 0, this._currentFramePlayed = !1, this._name = void 0, this._lastIterations = NaN, this._lastWrapInfo = null, this._wrappedInfo = new m207(), this._allowLastFrame = !1, this._blendStateWriterHost = {
                        weight: 0
                    }, this._playbackDuration = 0, this._invDuration = 1, this._poseOutput = null, this._weight = 1, this._clipEval = void 0, this._clipEventEval = void 0, this._clipEmbeddedPlayerEval = void 0, this._doNotCreateEval = !1, this._clip = g882, this._name = h882 || g882 && g882.name, this._playbackRange = {
                        min: 0,
                        max: g882.duration
                    }, this._playbackDuration = g882.duration, g882.duration || t125(`Clip ${g882.name} has zero duration.`);
                }
                get curveLoaded() {
                    return this._curveLoaded;
                }
                initialize(y881, z881, a882) {
                    if (this._curveLoaded)
                        return;
                    this._curveLoaded = !0, this._poseOutput && (this._poseOutput.destroy(), this._poseOutput = null), this._clipEval && (this._clipEval = void 0), this._clipEventEval && (this._clipEventEval = void 0), this._clipEmbeddedPlayerEval && (this._clipEmbeddedPlayerEval.destroy(), this._clipEmbeddedPlayerEval = void 0), this._targetNode = y881;
                    const b882 = this._clip;
                    if (this.duration = b882.duration, this._invDuration = 1 / this.duration, this._speed = b882.speed, this.wrapMode = b882.wrapMode, this.frameRate = b882.sample, this._playbackRange.min = 0, this._playbackRange.max = b882.duration, this._playbackDuration = b882.duration, (this.wrapMode & m155.Loop) === m155.Loop ? this.repeatCount = 1 / 0 : this.repeatCount = 1, !this._doNotCreateEval) {
                        var c882, d882, e882;
                        const f882 = null !== (c882 = null != z881 ? z881 : null === (d882 = j139()) || void 0 === d882 ? void 0 : d882.blendState) && void 0 !== c882 ? c882 : null;
                        f882 && (this._poseOutput = new n207(f882)), this._clipEval = b882.createEvaluator({
                            target: y881,
                            pose: null !== (e882 = this._poseOutput) && void 0 !== e882 ? e882 : void 0,
                            mask: a882
                        });
                    }
                    b882.containsAnyEvent() && (this._clipEventEval = b882.createEventEvaluator(this._targetNode)), b882.containsAnyEmbeddedPlayer() && (this._clipEmbeddedPlayerEval = b882.createEmbeddedPlayerEvaluator(this._targetNode), this._clipEmbeddedPlayerEval.notifyHostSpeedChanged(this._speed));
                }
                destroy() {
                    this.isMotionless || j139().removeAnimation(this), this._poseOutput && (this._poseOutput.destroy(), this._poseOutput = null), this._clipEval = void 0;
                }
                emit(...x881) {
                    j139().pushDelayEvent(this._emit, this, x881);
                }
                on(u881, v881, w881) {
                    return this._target && this._target.isValid ? this._target.on(u881, v881, w881) : null;
                }
                once(r881, s881, t881) {
                    return this._target && this._target.isValid ? this._target.once(r881, s881, t881) : null;
                }
                off(o881, p881, q881) {
                    this._target && this._target.isValid && this._target.off(o881, p881, q881);
                }
                allowLastFrameEvent(n881) {
                    this._allowLastFrame = n881;
                }
                _setEventTarget(m881) {
                    this._target = m881;
                }
                setTime(j881) {
                    this._currentFramePlayed = !1, this.time = j881 || 0;
                    {
                        var k881;
                        const l881 = this.getWrappedInfo(j881, this._wrappedInfo);
                        null === (k881 = this._clipEventEval) || void 0 === k881 || k881.ignore(l881.ratio, l881.direction);
                    }
                }
                update(i881) {
                    this._delayTime > 0 && (this._delayTime -= i881, this._delayTime > 0) || (this._currentFramePlayed ? this.time += i881 * this._speed : this._currentFramePlayed = !0, this._process());
                }
                sample() {
                    const h881 = this.getWrappedInfo(this.time, this._wrappedInfo);
                    return this._sampleCurves(h881.time), this._sampleEvents(h881), this._sampleEmbeddedPlayers(h881), h881;
                }
                onPlay() {
                    var g881;
                    this.setTime(this._getPlaybackStart()), this._delayTime = this._delay, this._onReplayOrResume(), this.emit(l207.PLAY, this), null === (g881 = this._clipEmbeddedPlayerEval) || void 0 === g881 || g881.notifyHostPlay(this.current);
                }
                onStop() {
                    var f881;
                    this.isPaused || this._onPauseOrStop(), this.emit(l207.STOP, this), null === (f881 = this._clipEmbeddedPlayerEval) || void 0 === f881 || f881.notifyHostStop();
                }
                onResume() {
                    var e881;
                    this._onReplayOrResume(), this.emit(l207.RESUME, this), null === (e881 = this._clipEmbeddedPlayerEval) || void 0 === e881 || e881.notifyHostPlay(this.current);
                }
                onPause() {
                    var d881;
                    this._onPauseOrStop(), this.emit(l207.PAUSE, this), null === (d881 = this._clipEmbeddedPlayerEval) || void 0 === d881 || d881.notifyHostPause(this.current);
                }
                _sampleCurves(a881) {
                    const { _poseOutput: b881, _clipEval: c881 } = this;
                    b881 && (b881.weight = this.weight), c881 && c881.evaluate(a881);
                }
                _process() {
                    this._useSimpleProcess ? this.simpleProcess() : this.process();
                }
                process() {
                    const y880 = this.sample();
                    if (this._allowLastFrame) {
                        let z880;
                        z880 = this._lastWrapInfo ? this._lastWrapInfo : this._lastWrapInfo = new m207(y880), this.repeatCount > 1 && (0 | y880.iterations) > (0 | z880.iterations) && this.emit(l207.LASTFRAME, this), z880.set(y880);
                    }
                    y880.stopped && (this.stop(), this.emit(l207.FINISHED, this));
                }
                simpleProcess() {
                    const t880 = this._playbackRange.min, u880 = this._playbackDuration;
                    let v880 = 0, w880 = 0;
                    if (0 !== u880 && (v880 = this.time % u880, v880 < 0 && (v880 += u880), w880 = (t880 + v880) * this._invDuration), this._sampleCurves(t880 + v880), this._clipEventEval || this._clipEmbeddedPlayerEval) {
                        const x880 = this.getWrappedInfo(this.time, this._wrappedInfo);
                        this._sampleEvents(x880), this._sampleEmbeddedPlayers(x880);
                    }
                    this._allowLastFrame && (Number.isNaN(this._lastIterations) && (this._lastIterations = w880), (this.time > 0 && this._lastIterations > w880 || this.time < 0 && this._lastIterations < w880) && this.emit(l207.LASTFRAME, this), this._lastIterations = w880);
                }
                _needReverse(q880) {
                    const r880 = this.wrapMode;
                    let s880 = !1;
                    return (r880 & m155.PingPong) === m155.PingPong && (q880 - (0 | q880) == 0 && q880 > 0 && (q880 -= 1), 1 & q880 && (s880 = !s880)), (r880 & m155.Reverse) === m155.Reverse && (s880 = !s880), s880;
                }
                getWrappedInfo(e880, f880) {
                    f880 = f880 || new m207();
                    const { _playbackRange: { min: g880 }, _playbackDuration: h880 } = this, i880 = this.repeatCount;
                    if (0 === h880)
                        return f880.time = 0, f880.ratio = 0, f880.direction = 1, f880.stopped = !!Number.isFinite(i880), f880.iterations = 0, f880;
                    let j880 = !1, k880 = (e880 -= g880) > 0 ? e880 / h880 : -e880 / h880;
                    if (k880 >= i880) {
                        k880 = i880, j880 = !0;
                        let p880 = i880 - (0 | i880);
                        0 === p880 && (p880 = 1), e880 = p880 * h880 * (e880 > 0 ? 1 : -1);
                    }
                    if (e880 > h880) {
                        const o880 = e880 % h880;
                        e880 = 0 === o880 ? h880 : o880;
                    }
                    else
                        e880 < 0 && 0 != (e880 %= h880) && (e880 += h880);
                    let l880 = !1;
                    const m880 = this._wrapMode & m155.ShouldWrap;
                    m880 && (l880 = this._needReverse(k880));
                    let n880 = l880 ? -1 : 1;
                    return this.speed < 0 && (n880 *= -1), m880 && l880 && (e880 = h880 - e880), f880.time = g880 + e880, f880.ratio = f880.time / this.duration, f880.direction = n880, f880.stopped = j880, f880.iterations = k880, f880;
                }
                _getPlaybackStart() {
                    return this._playbackRange.min;
                }
                _sampleEvents(c880) {
                    var d880;
                    null === (d880 = this._clipEventEval) || void 0 === d880 || d880.sample(c880.ratio, c880.direction, c880.iterations);
                }
                _sampleEmbeddedPlayers(a880) {
                    var b880;
                    null === (b880 = this._clipEmbeddedPlayerEval) || void 0 === b880 || b880.evaluate(a880.time, Math.trunc(a880.iterations));
                }
                _emit(y879, z879) {
                    this._target && this._target.isValid && this._target.emit(y879, y879, z879);
                }
                _onReplayOrResume() {
                    j139().addAnimation(this);
                }
                _onPauseOrStop() {
                    j139().removeAnimation(this);
                }
            }
            var p207, q207, r207, s207, t207, u207, v207, w207, x207, y207, z207;
            g125("AnimationState", o207), s143.AnimationState = o207, e151("cc.animation.EmbeddedAnimationClipPlayable")((p207 = class extends h207 {
                constructor(...x879) {
                    super(...x879), this.path = q207 && q207(), this.clip = r207 && r207();
                }
                instantiate(s879) {
                    const { clip: t879, path: u879 } = this;
                    if (!t879)
                        return null;
                    const v879 = s879.getChildByPath(u879);
                    if (!v879)
                        return z125(3938, u879, s879.getPathInHierarchy(), t879.name), null;
                    const w879 = new o207(t879);
                    return w879.initialize(v879), new a208(w879);
                }
            }, q207 = p130(p207.prototype, "path", [j151], function () {
                return "";
            }), r207 = p130(p207.prototype, "clip", [j151], function () {
                return null;
            }), p207));
            class a208 extends i207 {
                constructor(r879) {
                    super(!0), this._animationState = void 0, this._animationState = r879;
                }
                destroy() {
                    this._animationState.destroy();
                }
                play() {
                    this._animationState.play();
                }
                pause() {
                    this._animationState.pause();
                }
                stop() {
                    this._animationState.stop();
                }
                setSpeed(q879) {
                    this._animationState.speed = q879;
                }
                setTime(p879) {
                    this._animationState.time = p879;
                }
            }
            e151("cc.animation.EmbeddedParticleSystemPlayable")((s207 = class extends h207 {
                constructor(...o879) {
                    super(...o879), this.path = t207 && t207();
                }
                instantiate(k879) {
                    const l879 = k879.getChildByPath(this.path);
                    if (!l879)
                        return q125(`Hierarchy path ${this.path} does not exists.`), null;
                    const m879 = e127("cc.ParticleSystem");
                    if (!m879)
                        return q125("Particle system is required for embedded particle system player."), null;
                    const n879 = l879.getComponent(m879);
                    return n879 ? new b208(n879) : (q125(`${this.path} does not includes a particle system component.`), null);
                }
            }, t207 = p130(s207.prototype, "path", [j151], function () {
                return "";
            }), s207));
            class b208 extends i207 {
                constructor(j879) {
                    super(!1), this._particleSystem = void 0, this._particleSystem = j879;
                }
                destroy() { }
                play() {
                    this._particleSystem.play();
                }
                pause() {
                    this._particleSystem.stopEmitting();
                }
                stop() {
                    this._particleSystem.stopEmitting();
                }
                setSpeed(i879) {
                    this._particleSystem.simulationSpeed = i879;
                }
            }
            function k139(h879) {
                return "string" == typeof h879 || "number" == typeof h879;
            }
            let c208 = e151("cc.animation.HierarchyPath")((v207 = class {
                constructor(g879) {
                    this.path = w207 && w207(), this.path = g879 || "";
                }
                get(f879) {
                    if (!(f879 instanceof h175))
                        return y125(3925), null;
                    return f879.getChildByPath(this.path) || (y125(3926, f879.name, this.path), null);
                }
            }, w207 = p130(v207.prototype, "path", [j151], function () {
                return "";
            }), u207 = v207)) || u207, d208 = e151("cc.animation.ComponentPath")((y207 = class {
                constructor(e879) {
                    this.component = z207 && z207(), this.component = e879 || "";
                }
                get(d879) {
                    if (!(d879 instanceof h175))
                        return y125(3927), null;
                    return d879.getComponent(this.component) || (y125(3928, d879.name, this.component), null);
                }
            }, z207 = p130(y207.prototype, "component", [j151], function () {
                return "";
            }), x207 = y207)) || x207;
            var e208, f208, g208, h208, i208, j208, k208, l208, m208, n208, o208, p208, q208, r208, s208, t208, u208;
            const v208 = Symbol("NormalizedFollow"), w208 = Symbol("ConvertAsTrsPath"), x208 = Symbol("TrackBinding");
            let y208 = e151("cc.animation.TrackPath")((f208 = class t {
                constructor() {
                    this._paths = g208 && g208();
                }
                get length() {
                    return this._paths.length;
                }
                toProperty(c879) {
                    return this._paths.push(c879), this;
                }
                toElement(b879) {
                    return this._paths.push(b879), this;
                }
                toHierarchy(a879) {
                    return this._paths.push(new c208(a879)), this;
                }
                toComponent(y878) {
                    const z878 = new d208("string" == typeof y878 ? y878 : k126(y878));
                    return this._paths.push(z878), this;
                }
                toCustomized(x878) {
                    return this._paths.push(x878), this;
                }
                append(...t878) {
                    const u878 = this._paths.concat(...t878.map(w878 => w878._paths));
                    return this._paths = u878, this;
                }
                isPropertyAt(s878) {
                    return "string" == typeof this._paths[s878];
                }
                parsePropertyAt(r878) {
                    return this._paths[r878];
                }
                isElementAt(q878) {
                    return "number" == typeof this._paths[q878];
                }
                parseElementAt(p878) {
                    return this._paths[p878];
                }
                isHierarchyAt(o878) {
                    return this._paths[o878] instanceof c208;
                }
                parseHierarchyAt(n878) {
                    return this.isHierarchyAt(n878), this._paths[n878].path;
                }
                isComponentAt(m878) {
                    return this._paths[m878] instanceof d208;
                }
                parseComponentAt(l878) {
                    return this.isComponentAt(l878), this._paths[l878].component;
                }
                slice(i878, j878) {
                    const k878 = new t();
                    return k878._paths = this._paths.slice(i878, j878), k878;
                }
                trace(d878, e878, f878) {
                    var g878, h878;
                    return null !== (g878 = e878) && void 0 !== g878 || (e878 = 0), null !== (h878 = f878) && void 0 !== h878 || (f878 = this._paths.length), this[v208](d878, e878, f878);
                }
                [w208]() {
                    const { _paths: x877 } = this, y877 = x877.length;
                    let z877, a878 = 0, b878 = "";
                    for (; a878 < y877; ++a878) {
                        const c878 = x877[a878];
                        if (!(c878 instanceof c208))
                            break;
                        c878.path && (b878 ? b878 += `/${c878.path}` : b878 = c878.path);
                    }
                    if (a878 === y877)
                        return null;
                    if (a878 !== y877 - 1)
                        return null;
                    switch (x877[a878]) {
                        case "position":
                        case "scale":
                        case "rotation":
                        case "eulerAngles":
                            z877 = x877[a878];
                            break;
                        default:
                            return null;
                    }
                    return {
                        node: b878,
                        property: z877
                    };
                }
                [v208](q877, r877, s877) {
                    const { _paths: t877 } = this;
                    let u877 = q877;
                    for (let v877 = r877; v877 < s877; ++v877) {
                        const w877 = t877[v877];
                        if (k139(w877)) {
                            if (!(w877 in u877))
                                return y125(3929, w877), null;
                            u877 = u877[w877];
                        }
                        else
                            u877 = w877.get(u877);
                        if (null === u877)
                            break;
                    }
                    return u877;
                }
            }, g208 = p130(f208.prototype, "_paths", [j151], function () {
                return [];
            }), e208 = f208)) || e208, z208 = e151("cc.animation.TrackBinding")(h208 = l151(((l208 = class {
                constructor() {
                    this.path = j208 && j208(), this.proxy = k208 && k208();
                }
                parseTrsPath() {
                    return this.proxy ? null : this.path[w208]();
                }
                createRuntimeBinding(v876, w876, x876) {
                    const { path: y876, proxy: z876 } = this, a877 = y876.length, b877 = a877 - 1;
                    if (0 === a877 || !y876.isPropertyAt(b877) && !y876.isElementAt(b877) || z876) {
                        if (z876) {
                            const k877 = y876[v208](v876, 0, a877);
                            if (null === k877)
                                return null;
                            const l877 = z876.forTarget(k877);
                            if (!l877)
                                return null;
                            const m877 = {
                                setValue: p877 => {
                                    l877.set(p877);
                                }
                            }, n877 = l877.get;
                            return n877 && (m877.getValue = () => n877.call(l877)), m877;
                        }
                        return z125(3921), null;
                    }
                    {
                        const d877 = y876.isPropertyAt(b877) ? y876.parsePropertyAt(b877) : y876.parseElementAt(b877), e877 = y876[v208](v876, 0, a877 - 1);
                        if (null === e877)
                            return null;
                        if (w876 && e877 instanceof h175 && ("position" === (c877 = d877) || "rotation" === c877 || "scale" === c877 || "eulerAngles" === c877))
                            return w876.createPoseWriter(e877, d877, x876);
                        let f877, g877;
                        return f877 = j877 => {
                            e877[d877] = j877;
                        }, g877 = () => e877[d877], {
                            target: e877,
                            setValue: f877,
                            getValue: g877
                        };
                    }
                    var c877;
                }
                isMaskedOff(q876) {
                    const r876 = this.parseTrsPath();
                    if (!r876)
                        return !1;
                    const s876 = q876.joints[Symbol.iterator]();
                    for (let t876 = s876.next(); !t876.done; t876 = s876.next()) {
                        const { value: u876 } = t876;
                        if (u876.path === r876.node)
                            return !u876.enabled;
                    }
                    return !1;
                }
            })._animationFunctions = new WeakMap(), j208 = p130((i208 = l208).prototype, "path", [j151], function () {
                return new y208();
            }), k208 = p130(i208.prototype, "proxy", [j151], null), h208 = i208)) || h208) || h208, a209 = e151("cc.animation.Track")((n208 = class {
                constructor() {
                    this._binding = o208 && o208();
                }
                get path() {
                    return this._binding.path;
                }
                set path(p876) {
                    this._binding.path = p876;
                }
                get proxy() {
                    return this._binding.proxy;
                }
                set proxy(o876) {
                    this._binding.proxy = o876;
                }
                get [x208]() {
                    return this._binding;
                }
                channels() {
                    return [];
                }
                range() {
                    const m876 = {
                        min: 1 / 0,
                        max: -1 / 0
                    };
                    for (const n876 of this.channels())
                        m876.min = Math.min(m876.min, n876.curve.rangeMin), m876.max = Math.max(m876.max, n876.curve.rangeMax);
                    return m876;
                }
            }, o208 = p130(n208.prototype, "_binding", [j151], function () {
                return new z208();
            }), m208 = n208)) || m208, b209 = e151("cc.animation.Channel")((q208 = class {
                constructor(l876) {
                    this.name = "", this._curve = r208 && r208(), this._curve = l876;
                }
                get curve() {
                    return this._curve;
                }
            }, r208 = p130(q208.prototype, "_curve", [j151], null), p208 = q208)) || p208, c209 = e151("cc.animation.SingleChannelTrack")((t208 = class extends a209 {
                constructor() {
                    super(), this._channel = u208 && u208(), this._channel = new b209(this.createCurve());
                }
                get channel() {
                    return this._channel;
                }
                channels() {
                    return [this._channel];
                }
                createCurve() {
                    throw new Error("Not impl");
                }
                [b207]() {
                    const { curve: k876 } = this._channel;
                    return new d209(k876);
                }
            }, u208 = p130(t208.prototype, "_channel", [j151], null), s208 = t208)) || s208;
            class d209 {
                constructor(j876) {
                    this._curve = j876;
                }
                get requiresDefault() {
                    return !1;
                }
                evaluate(i876) {
                    return this._curve.evaluate(i876);
                }
            }
            var e209, f209;
            const { ccclass: g209, serializable: h209 } = k152;
            g209("cc.animation.RealArrayTrack")((e209 = class extends a209 {
                constructor(...h876) {
                    super(...h876), this._channels = f209 && f209();
                }
                get elementCount() {
                    return this._channels.length;
                }
                set elementCount(d876) {
                    const { _channels: e876 } = this, f876 = e876.length;
                    d876 < f876 ? this._channels.splice(d876) : d876 > f876 && this._channels.push(...Array.from({
                        length: d876 - f876
                    }, () => new b209(new s153())));
                }
                channels() {
                    return this._channels;
                }
                [b207]() {
                    return new i209(this._channels.map(({ curve: c876 }) => c876));
                }
            }, f209 = p130(e209.prototype, "_channels", [h209], function () {
                return [];
            }), e209));
            class i209 {
                constructor(a876) {
                    this._curves = a876, this._result = new Array(a876.length).fill(0);
                }
                get requiresDefault() {
                    return !1;
                }
                evaluate(w875) {
                    const { _result: x875 } = this, y875 = x875.length;
                    for (let z875 = 0; z875 < y875; ++z875)
                        x875[z875] = this._curves[z875].evaluate(w875);
                    return this._result;
                }
            }
            var j209, k209, l209, m209, n209;
            let o209 = e151("cc.animation.UniformProxyFactory")((k209 = class {
                constructor(r875, s875) {
                    var t875, u875, v875;
                    this.passIndex = l209 && l209(), this.uniformName = m209 && m209(), t875 = this, v875 = this, (u875 = n209) && Object.defineProperty(t875, "channelIndex", {
                        enumerable: u875.enumerable,
                        configurable: u875.configurable,
                        writable: u875.writable,
                        value: u875.initializer ? u875.initializer.call(v875) : void 0
                    }), this.passIndex = s875 || 0, this.uniformName = r875 || "";
                }
                forTarget(x874) {
                    if (!(x874 instanceof c178))
                        return void y125(3940, x874);
                    const { passIndex: y874, uniformName: z874, channelIndex: a875 } = this;
                    if (y874 < 0 || y874 >= x874.passes.length)
                        return void y125(3941, x874.name, y874);
                    const b875 = x874.passes[y874], c875 = b875.getHandle(z874);
                    if (c875) {
                        if (n193.getTypeFromHandle(c875) < v157.SAMPLER1D) {
                            const j875 = void 0 === a875 ? c875 : b875.getHandle(z874, a875, v157.FLOAT);
                            return j875 ? function (n875, o875) {
                                for (const p875 of n875.shaderInfo.blocks)
                                    for (const q875 of p875.members)
                                        if (q875.name === o875)
                                            return q875.count > 1;
                                return !1;
                            }(b875, z874) ? {
                                set: m875 => {
                                    b875.setUniformArray(j875, m875);
                                }
                            } : {
                                set: l875 => {
                                    b875.setUniform(j875, l875);
                                }
                            } : void y125(3943, x874.name, y874, z874, a875);
                        }
                        {
                            const d875 = n193.getBindingFromHandle(c875), e875 = b875.properties[z874], f875 = e875 && e875.value ? `${e875.value}${w137(e875.type)}` : v137(e875.type);
                            let g875 = r185.get(f875);
                            return g875 || (q125(`Illegal texture default value: ${f875}.`), g875 = r185.get("default-texture")), {
                                set: h875 => {
                                    h875 || (h875 = g875);
                                    const i875 = h875.getGFXTexture();
                                    i875 && i875.width && i875.height && (b875.bindTexture(d875, i875), h875 instanceof y165 && b875.bindSampler(d875, b162.gfxDevice.getSampler(h875.getSamplerInfo())));
                                }
                            };
                        }
                    }
                    y125(3942, x874.name, y874, z874);
                }
            }, l209 = p130(k209.prototype, "passIndex", [j151], function () {
                return 0;
            }), m209 = p130(k209.prototype, "uniformName", [j151], function () {
                return "";
            }), n209 = i125(k209.prototype, "channelIndex", [e152], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function () { }
            }), j209 = k209)) || j209;
            var p209, q209, r209, s209, t209, u209, v209, w209;
            let x209 = e151("cc.animation.MorphWeightValueProxy")((q209 = class {
                constructor() {
                    this.subMeshIndex = r209 && r209(), this.shapeIndex = s209 && s209();
                }
                forTarget(v874) {
                    return {
                        set: w874 => {
                            v874.setWeight(w874, this.subMeshIndex, this.shapeIndex);
                        }
                    };
                }
            }, r209 = p130(q209.prototype, "subMeshIndex", [j151], function () {
                return 0;
            }), s209 = p130(q209.prototype, "shapeIndex", [j151], function () {
                return 0;
            }), p209 = q209)) || p209, y209 = e151("cc.animation.MorphWeightsValueProxy")((u209 = class {
                constructor() {
                    this.subMeshIndex = v209 && v209();
                }
                forTarget(t874) {
                    return {
                        set: u874 => {
                            t874.setWeights(u874, this.subMeshIndex);
                        }
                    };
                }
            }, v209 = p130(u209.prototype, "subMeshIndex", [j151], function () {
                return 0;
            }), t209 = u209)) || t209, z209 = e151("cc.animation.MorphWeightsAllValueProxy")(w209 = class {
                forTarget(n874) {
                    return {
                        set: o874 => {
                            var p874, q874;
                            const r874 = null !== (p874 = null === (q874 = n874.mesh) || void 0 === q874 ? void 0 : q874.struct.primitives.length) && void 0 !== p874 ? p874 : 0;
                            for (let s874 = 0; s874 < r874; ++s874)
                                n874.setWeights(o874, s874);
                        }
                    };
                }
            }) || w209;
            var a210, b210, c210, d210, e210;
            function l139(e873, f873, g873, h873) {
                var i873, j873, k873, l873, m873;
                let n873 = new f873(), o873 = new f873(), p873 = new f873(), q873 = e151(e873)((j873 = class {
                    constructor(k874, l874, m874) {
                        this.dataPoint = k873 && k873(), this.inTangent = l873 && l873(), this.outTangent = m873 && m873(), this.dataPoint = k874 || new f873(), this.inTangent = l874 || new f873(), this.outTangent = m874 || new f873();
                    }
                    lerp(a874, b874, c874) {
                        const d874 = this.dataPoint, e874 = a874.dataPoint;
                        o873 = g873(o873, this.inTangent, c874), p873 = g873(p873, a874.outTangent, c874);
                        const f874 = b874 * b874 * b874, g874 = b874 * b874, h874 = f874 - 2 * g874 + b874, i874 = -2 * f874 + 3 * g874, j874 = f874 - g874;
                        return n873 = g873(n873, d874, 2 * f874 - 3 * g874 + 1), n873 = h873(n873, n873, o873, h874), n873 = h873(n873, n873, e874, i874), n873 = h873(n873, n873, p873, j874), n873;
                    }
                    getNoLerp() {
                        return this.dataPoint;
                    }
                }, k873 = p130(j873.prototype, "dataPoint", [j151], function () {
                    return new f873();
                }), l873 = p130(j873.prototype, "inTangent", [j151], function () {
                    return new f873();
                }), m873 = p130(j873.prototype, "outTangent", [j151], function () {
                    return new f873();
                }), i873 = j873)) || i873;
                if (f873 === g147) {
                    const u873 = q873.prototype.lerp;
                    q873.prototype.lerp = function (w873, x873, y873) {
                        const z873 = u873.call(this, w873, x873, y873);
                        return g147.normalize(z873, z873), z873;
                    };
                }
                return q873;
            }
            const f210 = l139("cc.CubicSplineVec2Value", s147, s147.multiplyScalar, s147.scaleAndAdd), g210 = l139("cc.CubicSplineVec3Value", w146, w146.multiplyScalar, w146.scaleAndAdd), h210 = l139("cc.CubicSplineVec4Value", v146, v146.multiplyScalar, v146.scaleAndAdd), i210 = l139("cc.CubicSplineQuatValue", g147, g147.multiplyScalar, g147.scaleAndAdd);
            let j210 = e151("cc.CubicSplineNumberValue")((b210 = class {
                constructor(b873, c873, d873) {
                    this.dataPoint = c210 && c210(), this.inTangent = d210 && d210(), this.outTangent = e210 && e210(), this.dataPoint = b873, this.inTangent = c873, this.outTangent = d873;
                }
                lerp(u872, v872, w872) {
                    const x872 = this.dataPoint, y872 = u872.dataPoint, z872 = v872 * v872 * v872, a873 = v872 * v872;
                    return x872 * (2 * z872 - 3 * a873 + 1) + this.outTangent * w872 * (z872 - 2 * a873 + v872) + y872 * (-2 * z872 + 3 * a873) + u872.inTangent * w872 * (z872 - a873);
                }
                getNoLerp() {
                    return this.dataPoint;
                }
            }, c210 = p130(b210.prototype, "dataPoint", [j151], function () {
                return 0;
            }), d210 = p130(b210.prototype, "inTangent", [j151], function () {
                return 0;
            }), e210 = p130(b210.prototype, "outTangent", [j151], function () {
                return 0;
            }), a210 = b210)) || a210;
            var k210;
            let l210 = e151("cc.animation.RealTrack")(k210 = class extends c209 {
                createCurve() {
                    return new s153();
                }
            }) || k210;
            function m139(t872) {
                return 0 === t872.keyFramesCount ? void 0 : t872;
            }
            var m210, n210, o210, p210;
            const q210 = ["X", "Y", "Z", "W"];
            let r210 = e151("cc.animation.VectorTrack")((n210 = class extends a209 {
                constructor() {
                    super(), this._channels = o210 && o210(), this._nComponents = p210 && p210(), this._channels = new Array(4);
                    for (let r872 = 0; r872 < this._channels.length; ++r872) {
                        const s872 = new b209(new s153());
                        s872.name = q210[r872], this._channels[r872] = s872;
                    }
                }
                get componentsCount() {
                    return this._nComponents;
                }
                set componentsCount(q872) {
                    this._nComponents = q872;
                }
                channels() {
                    return this._channels;
                }
                [b207]() {
                    switch (this._nComponents) {
                        default:
                        case 2:
                            return new s210(m139(this._channels[0].curve), m139(this._channels[1].curve));
                        case 3:
                            return new t210(m139(this._channels[0].curve), m139(this._channels[1].curve), m139(this._channels[2].curve));
                        case 4:
                            return new u210(m139(this._channels[0].curve), m139(this._channels[1].curve), m139(this._channels[2].curve), m139(this._channels[3].curve));
                    }
                }
            }, o210 = p130(n210.prototype, "_channels", [j151], null), p210 = p130(n210.prototype, "_nComponents", [j151], function () {
                return 4;
            }), m210 = n210)) || m210;
            class s210 {
                constructor(o872, p872) {
                    this._result = new s147(), this._x = o872, this._y = p872;
                }
                get requiresDefault() {
                    return !this._x || !this._y;
                }
                evaluate(m872, n872) {
                    return n872 && s147.copy(this._result, n872), this._x && (this._result.x = this._x.evaluate(m872)), this._y && (this._result.y = this._y.evaluate(m872)), this._result;
                }
            }
            class t210 {
                constructor(j872, k872, l872) {
                    this._result = new w146(), this._x = j872, this._y = k872, this._z = l872;
                }
                get requiresDefault() {
                    return !this._x || !this._y || !this._z;
                }
                evaluate(d872, e872) {
                    const { _x: f872, _y: g872, _z: h872, _result: i872 } = this;
                    return e872 && w146.copy(i872, e872), f872 && (i872.x = f872.evaluate(d872)), g872 && (i872.y = g872.evaluate(d872)), h872 && (i872.z = h872.evaluate(d872)), i872;
                }
            }
            class u210 {
                constructor(z871, a872, b872, c872) {
                    this._result = new v146(), this._x = z871, this._y = a872, this._z = b872, this._w = c872;
                }
                get requiresDefault() {
                    return !(this._x && this._y && this._z && this._w);
                }
                evaluate(x871, y871) {
                    return y871 && v146.copy(this._result, y871), this._x && (this._result.x = this._x.evaluate(x871)), this._y && (this._result.y = this._y.evaluate(x871)), this._z && (this._result.z = this._z.evaluate(x871)), this._w && (this._result.w = this._w.evaluate(x871)), this._result;
                }
            }
            var v210;
            let w210 = e151("cc.animation.QuatTrack")(v210 = class extends c209 {
                createCurve() {
                    return new t154();
                }
                [b207]() {
                    return new x210(this.channels()[0].curve);
                }
            }) || v210;
            class x210 {
                constructor(w871) {
                    this._result = new g147(), this._curve = w871;
                }
                get requiresDefault() {
                    return !1;
                }
                evaluate(v871) {
                    return this._curve.evaluate(v871, this._result), this._result;
                }
            }
            var y210, z210, a211;
            const b211 = ["Red", "Green", "Blue", "Alpha"];
            let c211 = e151("cc.animation.ColorTrack")((z210 = class extends a209 {
                constructor() {
                    super(), this._channels = a211 && a211(), this._channels = new Array(4);
                    for (let t871 = 0; t871 < this._channels.length; ++t871) {
                        const u871 = new b209(new s153());
                        u871.name = b211[t871], this._channels[t871] = u871;
                    }
                }
                channels() {
                    return this._channels;
                }
                [b207]() {
                    return new d211(m139(this._channels[0].curve), m139(this._channels[1].curve), m139(this._channels[2].curve), m139(this._channels[3].curve));
                }
            }, a211 = p130(z210.prototype, "_channels", [j151], null), y210 = z210)) || y210;
            class d211 {
                constructor(p871, q871, r871, s871) {
                    this._result = new a147(), this._x = p871, this._y = q871, this._z = r871, this._w = s871;
                }
                get requiresDefault() {
                    return !(this._x && this._y && this._z && this._w);
                }
                evaluate(n871, o871) {
                    return o871 && a147.copy(this._result, o871), this._x && (this._result.r = this._x.evaluate(n871)), this._y && (this._result.g = this._y.evaluate(n871)), this._z && (this._result.b = this._z.evaluate(n871)), this._w && (this._result.a = this._w.evaluate(n871)), this._result;
                }
            }
            var e211, f211, g211;
            const h211 = ["Width", "Height"];
            let i211 = e151("cc.animation.SizeTrack")((f211 = class extends a209 {
                constructor() {
                    super(), this._channels = g211 && g211(), this._channels = new Array(2);
                    for (let l871 = 0; l871 < this._channels.length; ++l871) {
                        const m871 = new b209(new s153());
                        m871.name = h211[l871], this._channels[l871] = m871;
                    }
                }
                channels() {
                    return this._channels;
                }
                [b207]() {
                    return new j211(m139(this._channels[0].curve), m139(this._channels[1].curve));
                }
            }, g211 = p130(f211.prototype, "_channels", [j151], null), e211 = f211)) || e211;
            class j211 {
                constructor(j871, k871) {
                    this._result = new x147(), this._width = j871, this._height = k871;
                }
                get requiresDefault() {
                    return !this._width || !this._height;
                }
                evaluate(h871, i871) {
                    return i871 && (this._result.x = i871.x, this._result.y = i871.y), this._width && (this._result.width = this._width.evaluate(h871)), this._height && (this._result.height = this._height.evaluate(h871)), this._result;
                }
            }
            var k211;
            let l211 = e151("cc.animation.ObjectTrack")(k211 = class extends c209 {
                createCurve() {
                    return new e155();
                }
            }) || k211;
            g125("animation", Object.freeze({
                __proto__: null,
                UniformProxyFactory: o209,
                MorphWeightValueProxy: x209,
                MorphWeightsValueProxy: y209,
                MorphWeightsAllValueProxy: z209,
                Track: a209,
                TrackPath: y208,
                RealTrack: l210,
                VectorTrack: r210,
                QuatTrack: w210,
                ColorTrack: c211,
                SizeTrack: i211,
                ObjectTrack: l211,
                isPropertyPath: k139,
                isCustomPath: function (f871, g871) {
                    return f871 instanceof g871;
                },
                HierarchyPath: c208,
                ComponentPath: d208,
                CubicSplineVec2Value: f210,
                CubicSplineVec3Value: g210,
                CubicSplineVec4Value: h210,
                CubicSplineQuatValue: i210,
                CubicSplineNumberValue: j210
            }));
            class m211 {
                constructor(z870) {
                    let a871, b871;
                    this.ratios = void 0, this._findRatio = void 0, this.ratios = z870;
                    let c871 = !0;
                    for (let d871 = 1, e871 = z870.length; d871 < e871; d871++)
                        if (a871 = z870[d871] - z870[d871 - 1], 1 === d871)
                            b871 = a871;
                        else if (Math.abs(a871 - b871) > 1e-6) {
                            c871 = !1;
                            break;
                        }
                    this._findRatio = c871 ? p139 : n130;
                }
                sample(y870) {
                    return this._findRatio(this.ratios, y870);
                }
            }
            g125("RatioSampler", m211), s143.RatioSampler = m211;
            class n211 {
                static Bezier(x870) {
                    return x870;
                }
                constructor(q870, r870) {
                    this.types = void 0, this.type = null, this._values = [], this._lerp = void 0, this._duration = void 0, this._array = void 0, this._duration = r870, this._values = q870.values;
                    const s870 = w870 => "string" == typeof w870 ? w870 : Array.isArray(w870) ? w870[0] === w870[1] && w870[2] === w870[3] ? n211.Linear : n211.Bezier(w870) : n211.Linear;
                    if (void 0 !== q870.easingMethod)
                        this.type = s870(q870.easingMethod);
                    else if (Array.isArray(q870.easingMethods))
                        this.types = q870.easingMethods.map(s870);
                    else if (void 0 !== q870.easingMethods) {
                        this.types = new Array(this._values.length).fill(null);
                        for (const v870 of Object.keys(q870.easingMethods))
                            this.types[v870] = s870(q870.easingMethods[v870]);
                    }
                    else
                        this.type = null;
                    const t870 = q870.values[0];
                    (void 0 === q870.interpolate || q870.interpolate) && (this._lerp = o211(t870)), void 0 !== q870._arrayLength && (this._array = new Array(q870._arrayLength));
                }
                hasLerp() {
                    return !!this._lerp;
                }
                valueAt(n870) {
                    if (void 0 === this._array) {
                        const p870 = this._values[n870];
                        return p870 && p870.getNoLerp ? p870.getNoLerp() : p870;
                    }
                    for (let o870 = 0; o870 < this._array.length; ++o870)
                        this._array[o870] = this._values[this._array.length * n870 + o870];
                    return this._array;
                }
                valueBetween(z869, a870, b870, c870, d870) {
                    if (this._lerp) {
                        const f870 = this.types ? this.types[a870] : this.type, g870 = d870 - b870;
                        let h870 = (z869 - b870) / g870;
                        if (f870 && (h870 = o139(h870, f870)), void 0 === this._array) {
                            const l870 = this._values[a870], m870 = this._values[c870];
                            return this._lerp(l870, m870, h870, g870 * this._duration);
                        }
                        for (let i870 = 0; i870 < this._array.length; ++i870) {
                            const j870 = this._values[this._array.length * a870 + i870], k870 = this._values[this._array.length * c870 + i870];
                            this._array[i870] = this._lerp(j870, k870, h870, g870 * this._duration);
                        }
                        return this._array;
                    }
                    if (void 0 === this._array)
                        return this.valueAt(a870);
                    for (let e870 = 0; e870 < this._array.length; ++e870)
                        this._array[e870] = this._values[this._array.length * a870 + e870];
                    return this._array;
                }
                empty() {
                    return 0 === this._values.length;
                }
                constant() {
                    return 1 === this._values.length;
                }
            }
            function n139(v869, w869, x869) {
                let y869 = w869.sample(x869);
                if (y869 < 0)
                    if (y869 = ~y869, y869 <= 0)
                        y869 = 0;
                    else {
                        if (!(y869 >= w869.ratios.length))
                            return v869.valueBetween(x869, y869 - 1, w869.ratios[y869 - 1], y869, w869.ratios[y869]);
                        y869 = w869.ratios.length - 1;
                    }
                return v869.valueAt(y869);
            }
            function o139(s869, t869) {
                if ("string" == typeof t869) {
                    const u869 = j153[t869];
                    u869 ? s869 = u869(s869) : z125(3906, t869);
                }
                else
                    Array.isArray(t869) && (s869 = z132(t869, s869));
                return s869;
            }
            function p139(k869, l869) {
                const m869 = k869.length - 1;
                if (0 === m869)
                    return 0;
                const n869 = k869[0];
                if (l869 < n869)
                    return 0;
                const o869 = k869[m869];
                if (l869 > o869)
                    return m869;
                const p869 = (l869 = (l869 - n869) / (o869 - n869)) / (1 / m869), q869 = 0 | p869, r869 = 1e-6;
                return p869 - q869 < r869 ? q869 : q869 + 1 - p869 < r869 ? q869 + 1 : ~(q869 + 1);
            }
            g125("AnimCurve", n211), n211.Linear = null, s143.AnimCurve = n211, g125("EventInfo", class {
                constructor() {
                    this.events = [];
                }
                add(i869, j869) {
                    this.events.push({
                        func: i869 || "",
                        params: j869 || []
                    });
                }
            }), s143.sampleAnimationCurve = n139;
            const o211 = (() => {
                function o868(e869, f869, g869, h869) {
                    return e869.lerp(f869, g869, h869);
                }
                return q868 => {
                    if (null !== q868) {
                        if ("number" == typeof q868)
                            return z128;
                        if ("object" == typeof q868 && q868.constructor) {
                            if (q868 instanceof g147)
                                return function () {
                                    const z868 = new g147();
                                    return (b869, c869, d869) => g147.slerp(z868, b869, c869, d869);
                                }();
                            if (q868 instanceof p145)
                                return function (t868) {
                                    const u868 = new t868();
                                    return (w868, x868, y868) => (t868.lerp(u868, w868, x868, y868), u868);
                                }(q868.constructor);
                            if (q868.constructor === Number)
                                return z128;
                            if ("function" == typeof q868.lerp)
                                return o868;
                        }
                    }
                };
            })(), p211 = Symbol("BakeNodeCurves");
            class q211 {
                static getOrExtract(k868) {
                    let l868 = q211.pool.get(k868);
                    if (!l868 || l868.samples !== k868.sample) {
                        l868 && s143.director.root.dataPoolManager.releaseAnimationClip(k868);
                        const m868 = Math.ceil(k868.sample * k868.duration) + 1, n868 = k868.sample;
                        l868 = k868[p211](0, n868, m868), q211.pool.set(k868, l868);
                    }
                    return l868;
                }
                static destroy(j868) {
                    q211.pool.delete(j868);
                }
            }
            var r211, s211, t211, u211, v211, w211;
            q211.pool = new Map();
            let x211 = e151("cc.animation.UntypedTrackChannel")((s211 = class extends b209 {
                constructor() {
                    super(new s153()), this.property = t211 && t211();
                }
            }, t211 = p130(s211.prototype, "property", [j151], function () {
                return "";
            }), r211 = s211)) || r211, y211 = e151("cc.animation.UntypedTrack")((v211 = class extends a209 {
                constructor(...i868) {
                    super(...i868), this._channels = w211 && w211();
                }
                channels() {
                    return this._channels;
                }
                [b207]() {
                    throw new Error("UntypedTrack should be handled specially. Please file an issue.");
                }
                createLegacyEval(b868) {
                    const c868 = e868 => {
                        var f868;
                        return null === (f868 = this._channels.find(h868 => h868.property === e868)) || void 0 === f868 ? void 0 : f868.curve;
                    };
                    switch (!0) {
                        default:
                            throw new Error(b126(3931));
                        case b868 instanceof s147:
                            return new s210(c868("x"), c868("y"));
                        case b868 instanceof w146:
                            return new t210(c868("x"), c868("y"), c868("z"));
                        case b868 instanceof v146:
                            return new u210(c868("x"), c868("y"), c868("z"), c868("w"));
                        case b868 instanceof a147:
                            return new d211(c868("r"), c868("g"), c868("b"), c868("a"));
                        case b868 instanceof x147:
                            return new j211(c868("width"), c868("height"));
                    }
                }
                addChannel(z867) {
                    const a868 = new x211();
                    return a868.property = z867, this._channels.push(a868), a868;
                }
                upgrade(g867) {
                    const h867 = (u867, v867) => {
                        const w867 = this.channels().find(y867 => y867.property === u867);
                        w867 && (v867.name = w867.name, v867.curve.assignSorted(Array.from(w867.curve.times()), Array.from(w867.curve.values())));
                    }, i867 = g867(this.path, this.proxy);
                    switch (i867) {
                        default:
                            break;
                        case "vec2":
                        case "vec3":
                        case "vec4":
                            {
                                const p867 = new r210();
                                p867.path = this.path, p867.proxy = this.proxy, p867.componentsCount = "vec2" === i867 ? 2 : "vec3" === i867 ? 3 : 4;
                                const [q867, r867, s867, t867] = p867.channels();
                                switch (i867) {
                                    case "vec4":
                                        h867("w", t867);
                                    case "vec3":
                                        h867("z", s867);
                                    default:
                                    case "vec2":
                                        h867("x", q867), h867("y", r867);
                                }
                                return p867;
                            }
                        case "color":
                            {
                                const k867 = new c211(), [l867, m867, n867, o867] = k867.channels();
                                return h867("r", l867), h867("g", m867), h867("b", n867), h867("a", o867), h867("x", l867), h867("y", m867), h867("z", n867), h867("w", o867), k867;
                            }
                        case "size":
                    }
                    return null;
                }
            }, w211 = p130(v211.prototype, "_channels", [j151], function () {
                return [];
            }), u211 = v211)) || u211;
            class z211 {
                constructor(f867) {
                    this._keys = [], this._curves = [], this._commonTargets = [], this._ratioSamplers = [], this._runtimeCurves = void 0, this._data = null, this._duration = void 0, this._duration = f867;
                }
                get keys() {
                    return this._keys;
                }
                set keys(e867) {
                    this._keys = e867;
                }
                get curves() {
                    return this._curves;
                }
                set curves(d867) {
                    this._curves = d867, delete this._runtimeCurves;
                }
                get commonTargets() {
                    return this._commonTargets;
                }
                set commonTargets(c867) {
                    this._commonTargets = c867;
                }
                get data() {
                    return this._data;
                }
                getPropertyCurves() {
                    return this._runtimeCurves || this._createPropertyCurves(), this._runtimeCurves;
                }
                toTracks() {
                    const p862 = [], { keys: q862, curves: r862, commonTargets: s862 } = this, t862 = (x866, y866, z866) => {
                        const a867 = new y208();
                        for (const b867 of y866)
                            "string" == typeof b867 ? a867.toProperty(b867) : "number" == typeof b867 ? a867.toElement(b867) : b867 instanceof c208 ? a867.toHierarchy(b867.path) : b867 instanceof d208 ? a867.toComponent(b867.component) : a867.toCustomized(b867);
                        x866.path = a867, x866.proxy = z866;
                    }, u862 = s862.map(v866 => {
                        const w866 = new y211();
                        return t862(w866, v866.modifiers, v866.valueAdapter), p862.push(w866), w866;
                    });
                    for (const y862 of r862) {
                        var v862;
                        const z862 = y862.data, a863 = z862.values;
                        if (0 === a863.length)
                            continue;
                        const b863 = z862.keys < 0 ? [0] : q862[z862.keys], c863 = a863[0], d863 = null === (v862 = z862.interpolate) || void 0 === v862 || v862;
                        z862._arrayLength;
                        const e863 = new a212(z862, b863.length), f863 = u866 => {
                            t862(u866, y862.modifiers, y862.valueAdapter);
                        };
                        let g863;
                        if ("number" == typeof y862.commonTarget) {
                            if (!a863.every(t866 => "number" == typeof t866)) {
                                y125(3932);
                                continue;
                            }
                            if (y862.valueAdapter || 1 !== y862.modifiers.length || "string" != typeof y862.modifiers[0]) {
                                y125(3933);
                                continue;
                            }
                            const p866 = y862.modifiers[0], q866 = u862[y862.commonTarget], { curve: r866 } = q866.addChannel(p866);
                            g863 = r866;
                        }
                        (() => {
                            if ("number" == typeof c863) {
                                if (!a863.every(o866 => "number" == typeof o866))
                                    return void y125(3934);
                                let i866;
                                if (g863)
                                    i866 = g863;
                                else {
                                    const n866 = new l210();
                                    f863(n866), p862.push(n866), i866 = n866.channel.curve;
                                }
                                const j866 = d863 ? w150.LINEAR : w150.CONSTANT;
                                return i866.assignSorted(b863, a863.map(m866 => ({
                                    value: m866,
                                    interpolationMode: j866
                                }))), void e863.convert(i866);
                            }
                            if ("object" == typeof c863)
                                switch (!0) {
                                    default:
                                        break;
                                    case q139(a863, s147):
                                    case q139(a863, w146):
                                    case q139(a863, v146):
                                        {
                                            const q865 = c863 instanceof s147 ? 2 : c863 instanceof w146 ? 3 : 4, r865 = new r210();
                                            f863(r865), r865.componentsCount = q865;
                                            const [{ curve: s865 }, { curve: t865 }, { curve: u865 }, { curve: v865 }] = r865.channels(), w865 = d863 ? w150.LINEAR : w150.CONSTANT, x865 = h866 => ({
                                                value: h866,
                                                interpolationMode: w865
                                            });
                                            switch (q865) {
                                                case 4:
                                                    v865.assignSorted(b863, a863.map(g866 => x865(g866.w))), e863.convert(v865);
                                                case 3:
                                                    u865.assignSorted(b863, a863.map(f866 => x865(f866.z))), e863.convert(u865);
                                                default:
                                                    s865.assignSorted(b863, a863.map(e866 => x865(e866.x))), e863.convert(s865), t865.assignSorted(b863, a863.map(d866 => x865(d866.y))), e863.convert(t865);
                                            }
                                            return void p862.push(r865);
                                        }
                                    case q139(a863, g147):
                                        {
                                            const m865 = new w210();
                                            f863(m865);
                                            const n865 = d863 ? r154.SLERP : r154.CONSTANT;
                                            return m865.channel.curve.assignSorted(b863, a863.map(p865 => ({
                                                value: g147.clone(p865),
                                                interpolationMode: n865
                                            }))), e863.convertQuatCurve(m865.channel.curve), void p862.push(m865);
                                        }
                                    case q139(a863, a147):
                                        {
                                            const v864 = new c211();
                                            f863(v864);
                                            const [{ curve: w864 }, { curve: x864 }, { curve: y864 }, { curve: z864 }] = v864.channels(), a865 = d863 ? w150.LINEAR : w150.CONSTANT, b865 = l865 => ({
                                                value: l865,
                                                interpolationMode: a865
                                            });
                                            return w864.assignSorted(b863, a863.map(k865 => b865(k865.r))), e863.convert(w864), x864.assignSorted(b863, a863.map(j865 => b865(j865.g))), e863.convert(x864), y864.assignSorted(b863, a863.map(i865 => b865(i865.b))), e863.convert(y864), z864.assignSorted(b863, a863.map(h865 => b865(h865.a))), e863.convert(z864), void p862.push(v864);
                                        }
                                    case q139(a863, x147):
                                        {
                                            const k864 = new i211();
                                            f863(k864);
                                            const [{ curve: l864 }, { curve: m864 }] = k864.channels(), n864 = d863 ? w150.LINEAR : w150.CONSTANT, o864 = u864 => ({
                                                value: u864,
                                                interpolationMode: n864
                                            });
                                            return l864.assignSorted(b863, a863.map(t864 => o864(t864.width))), e863.convert(l864), m864.assignSorted(b863, a863.map(s864 => o864(s864.height))), e863.convert(m864), void p862.push(k864);
                                        }
                                    case q139(a863, j210):
                                        {
                                            e863.nil;
                                            const g864 = new l210();
                                            f863(g864);
                                            const h864 = d863 ? w150.CUBIC : w150.CONSTANT;
                                            return g864.channel.curve.assignSorted(b863, a863.map(j864 => ({
                                                value: j864.dataPoint,
                                                leftTangent: j864.inTangent,
                                                rightTangent: j864.outTangent,
                                                interpolationMode: h864
                                            }))), void p862.push(g864);
                                        }
                                    case q139(a863, f210):
                                    case q139(a863, g210):
                                    case q139(a863, h210):
                                        {
                                            e863.nil;
                                            const m863 = c863 instanceof f210 ? 2 : c863 instanceof g210 ? 3 : 4, n863 = new r210();
                                            f863(n863), n863.componentsCount = m863;
                                            const [o863, p863, q863, r863] = n863.channels(), s863 = d863 ? w150.LINEAR : w150.CONSTANT, t863 = (d864, e864, f864) => ({
                                                value: d864,
                                                leftTangent: e864,
                                                rightTangent: f864,
                                                interpolationMode: s863
                                            });
                                            switch (m863) {
                                                case 4:
                                                    r863.curve.assignSorted(b863, a863.map(c864 => t863(c864.dataPoint.w, c864.inTangent.w, c864.outTangent.w)));
                                                case 3:
                                                    q863.curve.assignSorted(b863, a863.map(b864 => t863(b864.dataPoint.z, b864.inTangent.z, b864.outTangent.z)));
                                                default:
                                                    o863.curve.assignSorted(b863, a863.map(a864 => t863(a864.dataPoint.y, a864.inTangent.y, a864.outTangent.y))), p863.curve.assignSorted(b863, a863.map(z863 => t863(z863.dataPoint.x, z863.inTangent.x, z863.outTangent.x)));
                                            }
                                            return void p862.push(n863);
                                        }
                                    case a863.every(l863 => l863 instanceof i210):
                                        y125(3935);
                                }
                            const j863 = new l211();
                            f863(j863), j863.channel.curve.assignSorted(b863, a863), p862.push(j863);
                        })();
                    }
                    return p862;
                }
                _createPropertyCurves() {
                    this._ratioSamplers = this._keys.map(m862 => new m211(m862.map(o862 => o862 / this._duration))), this._runtimeCurves = this._curves.map(l862 => ({
                        curve: new n211(l862.data, this._duration),
                        modifiers: l862.modifiers,
                        valueAdapter: l862.valueAdapter,
                        sampler: this._ratioSamplers[l862.data.keys],
                        commonTarget: l862.commonTarget
                    }));
                }
            }
            function q139(f862, g862) {
                return f862.every(i862 => i862 instanceof g862);
            }
            class a212 {
                constructor(y861, z861) {
                    this._easingMethods = void 0;
                    const { easingMethods: a862 } = y861;
                    Array.isArray(a862) ? 0 === a862.length && 0 !== z861 ? this._easingMethods = new Array(z861).fill(null) : this._easingMethods = a862 : this._easingMethods = void 0 === a862 ? new Array(z861).fill(y861.easingMethod) : Array.from({
                        length: z861
                    }, (c862, d862) => {
                        var e862;
                        return null !== (e862 = a862[d862]) && void 0 !== e862 ? e862 : null;
                    });
                }
                get nil() {
                    return !this._easingMethods || this._easingMethods.every(x861 => null == x861);
                }
                convert(q861) {
                    const { _easingMethods: r861 } = this;
                    if (!r861)
                        return;
                    const s861 = q861.keyFramesCount;
                    if (q861.keyFramesCount < 2)
                        return;
                    Array.isArray(r861) && r861.length;
                    const t861 = s861 - 1;
                    for (let u861 = 0; u861 < t861; ++u861) {
                        const v861 = r861[u861];
                        v861 && (Array.isArray(v861) ? t139(v861, q861.getKeyframeTime(u861), q861.getKeyframeValue(u861), q861.getKeyframeTime(u861 + 1), q861.getKeyframeValue(u861 + 1)) : r139(v861, q861, u861));
                    }
                }
                convertQuatCurve(k861) {
                    const { _easingMethods: l861 } = this;
                    if (!l861)
                        return;
                    const m861 = k861.keyFramesCount;
                    if (k861.keyFramesCount < 2)
                        return;
                    Array.isArray(l861) && l861.length;
                    const n861 = m861 - 1;
                    for (let o861 = 0; o861 < n861; ++o861) {
                        const p861 = l861[o861];
                        p861 && (Array.isArray(p861) ? k861.getKeyframeValue(o861).easingMethod = p861.slice() : s139(p861, k861, o861));
                    }
                }
            }
            function r139(f861, g861, h861) {
                g861.keyFramesCount;
                const i861 = g861.getKeyframeValue(h861), j861 = b212[f861];
                j861 === k153.CONSTANT ? i861.interpolationMode = w150.CONSTANT : (i861.interpolationMode = w150.LINEAR, i861.easingMethod = j861);
            }
            function s139(a861, b861, c861) {
                b861.keyFramesCount;
                const d861 = b861.getKeyframeValue(c861), e861 = b212[a861];
                d861.easingMethod = e861;
            }
            const b212 = {
                constant: k153.CONSTANT,
                linear: k153.LINEAR,
                quadIn: k153.QUAD_IN,
                quadOut: k153.QUAD_OUT,
                quadInOut: k153.QUAD_IN_OUT,
                quadOutIn: k153.QUAD_OUT_IN,
                cubicIn: k153.CUBIC_IN,
                cubicOut: k153.CUBIC_OUT,
                cubicInOut: k153.CUBIC_IN_OUT,
                cubicOutIn: k153.CUBIC_OUT_IN,
                quartIn: k153.QUART_IN,
                quartOut: k153.QUART_OUT,
                quartInOut: k153.QUART_IN_OUT,
                quartOutIn: k153.QUART_OUT_IN,
                quintIn: k153.QUINT_IN,
                quintOut: k153.QUINT_OUT,
                quintInOut: k153.QUINT_IN_OUT,
                quintOutIn: k153.QUINT_OUT_IN,
                sineIn: k153.SINE_IN,
                sineOut: k153.SINE_OUT,
                sineInOut: k153.SINE_IN_OUT,
                sineOutIn: k153.SINE_OUT_IN,
                expoIn: k153.EXPO_IN,
                expoOut: k153.EXPO_OUT,
                expoInOut: k153.EXPO_IN_OUT,
                expoOutIn: k153.EXPO_OUT_IN,
                circIn: k153.CIRC_IN,
                circOut: k153.CIRC_OUT,
                circInOut: k153.CIRC_IN_OUT,
                circOutIn: k153.CIRC_OUT_IN,
                elasticIn: k153.ELASTIC_IN,
                elasticOut: k153.ELASTIC_OUT,
                elasticInOut: k153.ELASTIC_IN_OUT,
                elasticOutIn: k153.ELASTIC_OUT_IN,
                backIn: k153.BACK_IN,
                backOut: k153.BACK_OUT,
                backInOut: k153.BACK_IN_OUT,
                backOutIn: k153.BACK_OUT_IN,
                bounceIn: k153.BOUNCE_IN,
                bounceOut: k153.BOUNCE_OUT,
                bounceInOut: k153.BOUNCE_IN_OUT,
                bounceOutIn: k153.BOUNCE_OUT_IN,
                smooth: k153.SMOOTH,
                fade: k153.FADE
            };
            function t139(b860, c860, d860, e860, f860) {
                const [g860, h860, i860, j860] = b860, { value: k860 } = d860, { value: l860 } = f860, m860 = 3 * (e860 - c860), n860 = 3 * (l860 - k860), o860 = g860 * m860, p860 = h860 * n860, q860 = (1 - i860) * m860, r860 = (1 - j860) * n860, s860 = 1 / 3, t860 = p860 / o860, u860 = Math.sqrt(o860 * o860 + p860 * p860) * s860, v860 = r860 / q860, w860 = Math.sqrt(q860 * q860 + r860 * r860) * s860;
                var x860;
                d860.interpolationMode = w150.CUBIC, d860.tangentWeightMode = (x860 = d860.tangentWeightMode) === y150.NONE ? y150.RIGHT : x860 === y150.LEFT ? y150.BOTH : x860, d860.rightTangent = t860, d860.rightTangentWeight = u860, f860.tangentWeightMode = function (z860) {
                    return z860 === y150.NONE ? y150.LEFT : z860 === y150.RIGHT ? y150.BOTH : z860;
                }(f860.tangentWeightMode), f860.leftTangent = v860, f860.leftTangentWeight = w860;
            }
            var c212, d212, e212, f212, g212, h212, i212, j212, k212, l212, m212, n212, o212, p212, q212, r212, s212, t212, u212, v212, w212, x212, y212, z212;
            const { ccclass: a213, serializable: b213 } = k152;
            function u139() {
                throw new Error("split() only valid in Editor.");
            }
            a213("cc.animation.ExoticAnimation")((c212 = class {
                constructor() {
                    this._nodeAnimations = d212 && d212();
                }
                createEvaluator(a860) {
                    return new h213(this._nodeAnimations, a860);
                }
                createEvaluatorForAnimationGraph(z859) {
                    return new k213(this._nodeAnimations, z859);
                }
                addNodeAnimation(x859) {
                    const y859 = new c213(x859);
                    return this._nodeAnimations.push(y859), y859;
                }
                collectAnimatedJoints() {
                    return Array.from(new Set(this._nodeAnimations.map(({ path: w859 }) => w859)));
                }
                split(t859, u859) {
                    return u139();
                }
                toHashString() {
                    return this._nodeAnimations.map(s859 => s859.toHashString()).join("\n");
                }
            }, d212 = p130(c212.prototype, "_nodeAnimations", [b213], function () {
                return [];
            }), c212));
            let c213 = a213("cc.animation.ExoticNodeAnimation")((f212 = class {
                constructor(q859) {
                    this._path = g212 && g212(), this._position = h212 && h212(), this._rotation = i212 && i212(), this._scale = j212 && j212(), this._path = q859;
                }
                createPosition(o859, p859) {
                    this._position = new g213(o859, new e213(p859));
                }
                createRotation(m859, n859) {
                    this._rotation = new g213(m859, new f213(n859));
                }
                createScale(k859, l859) {
                    this._scale = new g213(k859, new e213(l859));
                }
                createEvaluator(j859) {
                    return new i213(this._path, this._position, this._rotation, this._scale, j859);
                }
                createEvaluatorForAnimationGraph(h859) {
                    const i859 = h859.bindTransform(this._path);
                    return i859 ? new l213(i859, this._position, this._rotation, this._scale) : null;
                }
                split(e859, f859, g859) {
                    return u139();
                }
                get path() {
                    return this._path;
                }
                toHashString() {
                    var y858, z858, a859, b859, c859, d859;
                    return `${this._path}\n${null !== (y858 = null === (z858 = this._position) || void 0 === z858 ? void 0 : z858.toHashString()) && void 0 !== y858 ? y858 : ""}${null !== (a859 = null === (b859 = this._scale) || void 0 === b859 ? void 0 : b859.toHashString()) && void 0 !== a859 ? a859 : ""}${null !== (c859 = null === (d859 = this._rotation) || void 0 === d859 ? void 0 : d859.toHashString()) && void 0 !== c859 ? c859 : ""}`;
                }
            }, g212 = p130(f212.prototype, "_path", [b213], function () {
                return "";
            }), h212 = p130(f212.prototype, "_position", [b213], function () {
                return null;
            }), i212 = p130(f212.prototype, "_rotation", [b213], function () {
                return null;
            }), j212 = p130(f212.prototype, "_scale", [b213], function () {
                return null;
            }), e212 = f212)) || e212;
            function v139(x858) {
                return x858.toPrecision(2);
            }
            function w139(u858) {
                return u858.map(w858 => Number.parseFloat(v139(w858))).join(" ");
            }
            let d213 = a213("cc.animation.ExoticVectorLikeTrackValues")((l212 = class {
                constructor(t858) {
                    this._values = m212 && m212(), this._isQuantized = n212 && n212(), this._values = t858;
                }
                get precision() {
                    return this._isQuantized ? this._values.originalPrecision : x139(this._values);
                }
                quantize(f858) {
                    this._isQuantized, this._values = function (h858, i858) {
                        const j858 = m213[i858], k858 = 1 << j858.BYTES_PER_ELEMENT;
                        let l858 = Number.POSITIVE_INFINITY, m858 = Number.NEGATIVE_INFINITY;
                        h858.forEach(s858 => {
                            l858 = Math.min(s858, l858), m858 = Math.max(s858, m858);
                        });
                        const n858 = m858 - l858, o858 = j858.from(h858, r858 => (r858 - l858) / n858 * k858);
                        return new o213(x139(h858), o858, n858, l858);
                    }(this._values, f858), this._isQuantized = !0;
                }
                toHashString() {
                    const { _isQuantized: d858, _values: e858 } = this;
                    return `${d858} ${d858 ? e858.toHashString() : w139(e858)}`;
                }
            }, m212 = p130(l212.prototype, "_values", [b213], null), n212 = p130(l212.prototype, "_isQuantized", [b213], function () {
                return !1;
            }), k212 = l212)) || k212, e213 = a213("cc.animation.ExoticVec3TrackValues")(o212 = class t extends d213 {
                static imitate(a858, b858) {
                    const c858 = new t(a858);
                    return b858._isQuantized && c858.quantize(b858._values.quantizationType), c858;
                }
                get(w857, x857) {
                    const { _values: y857, _isQuantized: z857 } = this;
                    z857 ? a140(y857, w857, x857) : w146.fromArray(x857, y857, 3 * w857);
                }
                lerp(o857, p857, q857, r857, s857, t857) {
                    const { _values: u857, _isQuantized: v857 } = this;
                    v857 ? (a140(u857, o857, r857), a140(u857, p857, s857)) : (w146.fromArray(r857, u857, 3 * o857), w146.fromArray(s857, u857, 3 * p857)), w146.lerp(t857, r857, s857, q857);
                }
            }) || o212, f213 = a213("cc.animation.ExoticQuatTrackValues")(p212 = class t extends d213 {
                static imitate(l857, m857) {
                    const n857 = new t(l857);
                    return m857._isQuantized && n857.quantize(m857._values.quantizationType), n857;
                }
                get(h857, i857) {
                    const { _values: j857, _isQuantized: k857 } = this;
                    k857 ? b140(j857, h857, i857) : g147.fromArray(i857, j857, 4 * h857);
                }
                lerp(z856, a857, b857, c857, d857, e857) {
                    const { _values: f857, _isQuantized: g857 } = this;
                    g857 ? (b140(f857, z856, c857), b140(f857, a857, d857)) : (g147.fromArray(c857, f857, 4 * z856), g147.fromArray(d857, f857, 4 * a857)), g147.slerp(e857, c857, d857, b857);
                }
            }) || p212, g213 = a213("cc.animation.ExoticTrack")((r212 = class {
                constructor(x856, y856) {
                    this.times = s212 && s212(), this.values = t212 && t212(), this.times = x856, this.values = y856;
                }
                toHashString() {
                    const { times: v856, values: w856 } = this;
                    return `times: ${w139(v856)}; values: ${w856.toHashString()}`;
                }
            }, s212 = p130(r212.prototype, "times", [b213], null), t212 = p130(r212.prototype, "values", [b213], null), q212 = r212)) || q212;
            class h213 {
                constructor(r856, s856) {
                    this._nodeEvaluations = void 0, this._nodeEvaluations = r856.map(u856 => u856.createEvaluator(s856));
                }
                evaluate(o856) {
                    this._nodeEvaluations.forEach(q856 => {
                        q856.evaluate(o856);
                    });
                }
            }
            class i213 {
                constructor(j856, k856, l856, m856, n856) {
                    this._position = null, this._rotation = null, this._scale = null, k856 && (this._position = z139(k856.times, k856.values, w146, j856, "position", n856)), l856 && (this._rotation = z139(l856.times, l856.values, g147, j856, "rotation", n856)), m856 && (this._scale = z139(m856.times, m856.values, w146, j856, "scale", n856));
                }
                evaluate(f856) {
                    if (this._position) {
                        const i856 = this._position.evaluator.evaluate(f856);
                        this._position.runtimeBinding.setValue(i856);
                    }
                    if (this._rotation) {
                        const h856 = this._rotation.evaluator.evaluate(f856);
                        this._rotation.runtimeBinding.setValue(h856);
                    }
                    if (this._scale) {
                        const g856 = this._scale.evaluator.evaluate(f856);
                        this._scale.runtimeBinding.setValue(g856);
                    }
                }
            }
            class j213 {
                constructor(c856, d856, e856) {
                    this._times = void 0, this._inputSampleResultCache = {
                        just: !1,
                        index: -1,
                        nextIndex: -1,
                        ratio: 0
                    }, this._values = void 0, this._prevValue = void 0, this._nextValue = void 0, this._resultValue = void 0, this._times = c856, this._values = d856, this._prevValue = new e856(), this._nextValue = new e856(), this._resultValue = new e856();
                }
                evaluate(k855) {
                    const { _times: l855, _values: m855, _resultValue: n855 } = this;
                    if (0 === l855.length)
                        return n855;
                    const o855 = function (q855, r855, s855) {
                        const t855 = q855.length, u855 = q855[0], v855 = q855[t855 - 1];
                        if (r855 < u855)
                            s855.just = !0, s855.index = 0;
                        else if (r855 > v855)
                            s855.just = !0, s855.index = t855 - 1;
                        else {
                            const w855 = n130(q855, r855);
                            if (w855 >= 0)
                                s855.just = !0, s855.index = w855;
                            else {
                                const x855 = ~w855, y855 = x855 - 1, z855 = q855[y855], a856 = q855[x855], b856 = (r855 - q855[y855]) / (a856 - z855);
                                s855.just = !1, s855.index = y855, s855.nextIndex = x855, s855.ratio = b856;
                            }
                        }
                        return s855;
                    }(l855, k855, this._inputSampleResultCache);
                    return o855.just ? m855.get(o855.index, n855) : m855.lerp(o855.index, o855.nextIndex, o855.ratio, this._prevValue, this._nextValue, n855), n855;
                }
            }
            class k213 {
                constructor(e855, f855) {
                    this._nodeEvaluations = void 0, this._nodeEvaluations = e855.map(j855 => j855.createEvaluatorForAnimationGraph(f855)).filter(i855 => !!i855);
                }
                destroy() {
                    const { _nodeEvaluations: b855 } = this, c855 = b855.length;
                    for (let d855 = 0; d855 < c855; ++d855)
                        b855[d855].destroy();
                }
                evaluate(w854, x854) {
                    const { _nodeEvaluations: y854 } = this, z854 = y854.length;
                    for (let a855 = 0; a855 < z854; ++a855)
                        y854[a855].evaluate(w854, x854);
                }
            }
            class l213 {
                constructor(s854, t854, u854, v854) {
                    this._position = null, this._rotation = null, this._scale = null, this._transformHandle = void 0, this._transformHandle = s854, t854 && (this._position = new j213(t854.times, t854.values, w146)), u854 && (this._rotation = new j213(u854.times, u854.values, g147)), v854 && (this._scale = new j213(v854.times, v854.values, w146));
                }
                destroy() {
                    this._transformHandle.destroy();
                }
                evaluate(i854, j854) {
                    const { _transformHandle: { index: k854 }, _position: l854, _rotation: m854, _scale: n854 } = this, { transforms: o854 } = j854;
                    if (l854) {
                        const r854 = l854.evaluate(i854);
                        o854.setPosition(k854, r854);
                    }
                    if (m854) {
                        const q854 = m854.evaluate(i854);
                        o854.setRotation(k854, q854);
                    }
                    if (n854) {
                        const p854 = n854.evaluate(i854);
                        o854.setScale(k854, p854);
                    }
                }
            }
            const m213 = {
                uint8: Uint8Array,
                uint16: Uint16Array
            };
            var n213;
            function x139(h854) {
                switch (h854.BYTES_PER_ELEMENT) {
                    default:
                    case 4:
                        return n213.FLOAT_32;
                    case 8:
                        return n213.FLOAT_64;
                }
            }
            !function (g854) {
                g854[g854.FLOAT_32 = 0] = "FLOAT_32", g854[g854.FLOAT_64 = 1] = "FLOAT_64";
            }(n213 || (n213 = {}));
            let o213 = a213("cc.animation.QuantizedFloatArray")((v212 = class {
                get quantizationType() {
                    switch (this.values.BYTES_PER_ELEMENT) {
                        default:
                        case 1:
                            return "uint8";
                        case 2:
                            return "uint16";
                    }
                }
                constructor(c854, d854, e854, f854 = 0) {
                    this.originalPrecision = w212 && w212(), this.min = x212 && x212(), this.extent = y212 && y212(), this.values = z212 && z212(), this.originalPrecision = c854, this.values = d854, this.extent = e854, this.min = f854;
                }
                toHashString() {
                    const { originalPrecision: y853, min: z853, extent: a854, values: b854 } = this;
                    return `${y853} ${v139(z853)} ${v139(a854)} ${b854.join(" ")}`;
                }
            }, w212 = p130(v212.prototype, "originalPrecision", [b213], null), x212 = p130(v212.prototype, "min", [b213], null), y212 = p130(v212.prototype, "extent", [b213], null), z212 = p130(v212.prototype, "values", [b213], null), u212 = v212)) || u212;
            function y139(w853, x853) {
                return w853.values[x853] / (1 << w853.values.BYTES_PER_ELEMENT) * w853.extent + w853.min;
            }
            function z139(o853, p853, q853, r853, s853, t853) {
                const u853 = new z208();
                u853.path = new y208().toHierarchy(r853).toProperty(s853);
                const v853 = t853(u853);
                return v853 ? {
                    runtimeBinding: v853,
                    evaluator: new j213(o853, p853, q853)
                } : null;
            }
            function a140(l853, m853, n853) {
                w146.set(n853, y139(l853, 3 * m853 + 0), y139(l853, 3 * m853 + 1), y139(l853, 3 * m853 + 2));
            }
            function b140(i853, j853, k853) {
                g147.set(k853, y139(i853, 4 * j853 + 0), y139(i853, 4 * j853 + 1), y139(i853, 4 * j853 + 2), y139(i853, 4 * j853 + 3));
            }
            var p213, q213, r213, s213;
            let t213 = e151("cc.animation.AuxiliaryCurveEntry")((q213 = class {
                constructor() {
                    this.name = r213 && r213(), this.curve = s213 && s213();
                }
            }, r213 = p130(q213.prototype, "name", [j151], function () {
                return "";
            }), s213 = p130(q213.prototype, "curve", [j151], function () {
                return new s153();
            }), p213 = q213)) || p213;
            function c140(a853, b853, c853) {
                const d853 = a853.components, e853 = d853.length;
                for (let f853 = 0; f853 < e853; ++f853) {
                    const g853 = d853[f853], h853 = g853[b853];
                    "function" == typeof h853 && h853.apply(g853, c853);
                }
            }
            var u213, v213, w213, x213, y213, z213, a214, b214, c214, d214, e214, f214, g214, h214, i214, j214, k214, l214, m214;
            const n214 = Symbol("SearchForRootBonePath"), o214 = Symbol("ExoticAnimation"), p214 = Symbol("[[EmbeddedPlayerCount]]"), q214 = Symbol("[[GetEmbeddedPlayers]]"), r214 = Symbol("[[AddEmbeddedPlayer]]"), s214 = Symbol("[[RemoveEmbeddedPlayer]]"), t214 = Symbol("[[ClearEmbeddedPlayers]]"), u214 = Symbol("[[Additive Settings]]");
            let v214 = g125("AnimationClip", e151("cc.AnimationClip")(((i214 = class t extends t163 {
                constructor(...z852) {
                    super(...z852), this.sample = w213 && w213(), this.speed = x213 && x213(), this.wrapMode = y213 && y213(), this.enableTrsBlending = z213 && z213(), this._duration = a214 && a214(), this._hash = b214 && b214(), this.frameRate = 0, this._tracks = c214 && c214(), this._exoticAnimation = d214 && d214(), this._legacyData = void 0, this._legacyDataDirty = !1, this._events = e214 && e214(), this._embeddedPlayers = f214 && f214(), this._additiveSettings = g214 && g214(), this._auxiliaryCurveEntries = h214 && h214(), this._runtimeEvents = {
                        ratios: [],
                        eventGroups: []
                    };
                }
                static createWithSpriteFrames(r852, s852) {
                    const t852 = new t();
                    t852.sample = s852 || t852.sample, t852.duration = r852.length / t852.sample;
                    const u852 = 1 / t852.sample, v852 = new l211();
                    return v852.path = new y208().toComponent("cc.Sprite").toProperty("spriteFrame"), v852.channels()[0].curve.assignSorted(r852.map((x852, y852) => [u852 * y852, x852])), t852.addTrack(v852), t852;
                }
                get duration() {
                    return this._duration;
                }
                set duration(q852) {
                    this._duration = q852;
                }
                get tracksCount() {
                    return this._tracks.length;
                }
                get tracks() {
                    return this._tracks;
                }
                get hash() {
                    var n852, o852;
                    if (this._hash)
                        return this._hash;
                    const p852 = `Exotic:${null !== (n852 = null === (o852 = this._exoticAnimation) || void 0 === o852 ? void 0 : o852.toHashString()) && void 0 !== n852 ? n852 : ""}`;
                    return this._hash = u133(p852, 666);
                }
                get events() {
                    return this._events;
                }
                set events(z851) {
                    this._events = z851;
                    const a852 = [], b852 = [], c852 = this.events.sort((l852, m852) => l852.frame - m852.frame), d852 = c852.length;
                    for (let f852 = 0; f852 < d852; ++f852) {
                        const g852 = c852[f852], h852 = g852.frame / this._duration;
                        let i852 = a852.findIndex(k852 => k852 === h852);
                        i852 < 0 && (i852 = a852.length, a852.push(h852), b852.push({
                            events: []
                        })), b852[i852].events.push({
                            functionName: g852.func,
                            parameters: g852.params
                        });
                    }
                    this._runtimeEvents = {
                        ratios: a852,
                        eventGroups: b852
                    };
                }
                get [o214]() {
                    return this._exoticAnimation;
                }
                set [o214](y851) {
                    this._exoticAnimation = y851;
                }
                get isAdditive_experimental() {
                    return this._additiveSettings.enabled;
                }
                get [u214]() {
                    return this._additiveSettings;
                }
                onLoaded() {
                    this.frameRate = this.sample, this.events = this._events;
                }
                range() {
                    const t851 = {
                        min: 1 / 0,
                        max: -1 / 0
                    }, { _tracks: u851 } = this, v851 = u851.length;
                    for (let w851 = 0; w851 < v851; ++w851) {
                        const x851 = u851[w851].range();
                        t851.min = Math.min(t851.min, x851.min), t851.max = Math.max(t851.max, x851.max);
                    }
                    return t851;
                }
                getTrack(s851) {
                    return this._tracks[s851];
                }
                addTrack(q851) {
                    const r851 = this._tracks.length;
                    return this._tracks.push(q851), r851;
                }
                removeTrack(p851) {
                    this._tracks.splice(p851, 1);
                }
                clearTracks() {
                    this._tracks.length = 0;
                }
                containsAnyEvent() {
                    return 0 !== this._events.length;
                }
                createEventEvaluator(o851) {
                    return new e215(o851, this._runtimeEvents.ratios, this._runtimeEvents.eventGroups, this.wrapMode);
                }
                containsAnyEmbeddedPlayer() {
                    return 0 !== this._embeddedPlayers.length;
                }
                createEmbeddedPlayerEvaluator(n851) {
                    return new y214(this._embeddedPlayers, n851);
                }
                createEvaluator(i851) {
                    const { target: j851 } = i851;
                    return this._createEvalWithBinder(j851, l851 => {
                        if (i851.mask && l851.isMaskedOff(i851.mask))
                            return;
                        const m851 = l851.createRuntimeBinding(j851, this.enableTrsBlending ? i851.pose : void 0, !1);
                        return null != m851 ? m851 : void 0;
                    }, i851.rootMotion);
                }
                destroy() {
                    var h851;
                    return null !== (h851 = s143.director.root) && void 0 !== h851 && h851.dataPoolManager && s143.director.root.dataPoolManager.releaseAnimationClip(this), q211.destroy(this), super.destroy();
                }
                [p211](f850, g850, h850) {
                    const i850 = 1 / g850, j850 = this._collectAnimatedJoints(), k850 = j850.length, l850 = {};
                    for (let g851 = 0; g851 < k850; ++g851)
                        l850[j850[g851]] = {
                            transforms: Array.from({
                                length: h850
                            }, () => new o147())
                        };
                    const m850 = j850.reduce((e851, f851) => (e851[f851] = new b215(), e851), {});
                    for (const z850 in m850) {
                        const a851 = m850[z850], b851 = z850.lastIndexOf("/");
                        if (b851 >= 0) {
                            const c851 = z850.substring(0, b851), d851 = m850[c851];
                            d851 && (a851.parent = d851);
                        }
                    }
                    const n850 = this._createEvalWithBinder(void 0, w850 => {
                        const x850 = w850.parseTrsPath();
                        if (!x850)
                            return;
                        const y850 = m850[x850.node];
                        return y850 ? e140(y850, x850.property) : void 0;
                    }, void 0);
                    for (let q850 = 0; q850 < h850; ++q850) {
                        const r850 = f850 + i850 * q850;
                        n850.evaluate(r850);
                        for (let u850 = 0; u850 < k850; ++u850) {
                            const v850 = j850[u850];
                            o147.copy(l850[v850].transforms[q850], m850[v850].globalTransform);
                        }
                        for (let s850 = 0; s850 < k850; ++s850) {
                            const t850 = j850[s850];
                            m850[t850].invalidate();
                        }
                    }
                    return {
                        samples: g850,
                        frames: h850,
                        joints: l850
                    };
                }
                upgradeUntypedTracks(v849) {
                    const w849 = [], x849 = [], { _tracks: y849 } = this, z849 = y849.length;
                    for (let c850 = 0; c850 < z849; ++c850) {
                        const d850 = y849[c850];
                        if (!(d850 instanceof y211))
                            continue;
                        const e850 = d850.upgrade(v849);
                        e850 && (w849.push(e850), x849.push(d850));
                    }
                    const a850 = x849.length;
                    for (let b850 = 0; b850 < a850; ++b850)
                        j127(y849, x849[b850]);
                    y849.push(...w849);
                }
                [n214]() {
                    return this._searchForRootBonePath();
                }
                get keys() {
                    return this._getLegacyData().keys;
                }
                set keys(u849) {
                    this._legacyDataDirty = !0, this._getLegacyData().keys = u849;
                }
                get curves() {
                    return this._legacyDataDirty = !0, this._getLegacyData().curves;
                }
                set curves(t849) {
                    this._getLegacyData().curves = t849;
                }
                get commonTargets() {
                    return this._getLegacyData().commonTargets;
                }
                set commonTargets(s849) {
                    this._legacyDataDirty = !0, this._getLegacyData().commonTargets = s849;
                }
                get data() {
                    return this._getLegacyData().data;
                }
                getPropertyCurves() {
                    return this._getLegacyData().getPropertyCurves();
                }
                get eventGroups() {
                    return this._runtimeEvents.eventGroups;
                }
                updateEventDatas() {
                    this.events = this._events;
                }
                hasEvents() {
                    return 0 !== this.events.length;
                }
                syncLegacyData() {
                    this._legacyData && (this._fromLegacy(this._legacyData), this._legacyData = void 0);
                }
                get [p214]() {
                    return this._embeddedPlayers.length;
                }
                [q214]() {
                    return this._embeddedPlayers;
                }
                [r214](r849) {
                    this._embeddedPlayers.push(r849);
                }
                [s214](p849) {
                    const q849 = this._embeddedPlayers.indexOf(p849);
                    q849 >= 0 && this._embeddedPlayers.splice(q849, 1);
                }
                [t214]() {
                    this._embeddedPlayers.length = 0;
                }
                get auxiliaryCurveCount_experimental() {
                    return this._auxiliaryCurveEntries.length;
                }
                getAuxiliaryCurveNames_experimental() {
                    return this._auxiliaryCurveEntries.map(o849 => o849.name);
                }
                hasAuxiliaryCurve_experimental(m849) {
                    return !!this._findAuxiliaryCurveEntry(m849);
                }
                addAuxiliaryCurve_experimental(k849) {
                    let l849 = this._findAuxiliaryCurveEntry(k849);
                    return l849 || (l849 = new t213(), l849.name = k849, this._auxiliaryCurveEntries.push(l849)), l849.curve;
                }
                getAuxiliaryCurve_experimental(j849) {
                    return this._findAuxiliaryCurveEntry(j849).curve;
                }
                renameAuxiliaryCurve_experimental(g849, h849) {
                    const i849 = this._findAuxiliaryCurveEntry(g849);
                    i849 && (i849.name = h849);
                }
                removeAuxiliaryCurve_experimental(d849) {
                    l127(this._auxiliaryCurveEntries, f849 => f849.name === d849);
                }
                _trySyncLegacyData() {
                    this._legacyDataDirty && (this._legacyDataDirty = !1, this.syncLegacyData());
                }
                _createEvalWithBinder(n848, o848, p848) {
                    this._legacyDataDirty && (this._legacyDataDirty = !1, this.syncLegacyData());
                    const q848 = [];
                    let r848;
                    p848 && (r848 = this._createRootMotionEvaluation(n848, p848, q848));
                    const s848 = [];
                    let t848;
                    const { _tracks: u848 } = this, v848 = u848.length;
                    for (let w848 = 0; w848 < v848; ++w848) {
                        const x848 = u848[w848];
                        if (q848.includes(x848))
                            continue;
                        if (Array.from(x848.channels()).every(({ curve: c849 }) => 0 === c849.keyFramesCount))
                            continue;
                        const y848 = o848(x848[x208]);
                        if (!y848)
                            continue;
                        let z848;
                        if (x848 instanceof y211) {
                            if (!y848.getValue) {
                                z125(3930);
                                continue;
                            }
                            const b849 = y848.getValue();
                            z848 = x848.createLegacyEval(b849);
                        }
                        else
                            z848 = x848[b207]();
                        s848.push(new x214(y848, z848));
                    }
                    return this._exoticAnimation && (t848 = this._exoticAnimation.createEvaluator(o848)), new z214(s848, t848, r848);
                }
                _createRootMotionEvaluation(y847, z847, a848) {
                    if (!(y847 instanceof h175))
                        return void z125(3920);
                    const b848 = this._searchForRootBonePath();
                    if (!b848)
                        return void y125(3923);
                    const c848 = y847.getChildByPath(b848);
                    if (!c848)
                        return void y125(3924);
                    const d848 = new a215(), e848 = [], { _tracks: f848 } = this, g848 = f848.length;
                    for (let h848 = 0; h848 < g848; ++h848) {
                        const i848 = f848[h848], { [x208]: j848 } = i848, k848 = j848.parseTrsPath();
                        if (!k848)
                            continue;
                        if (k848.node !== b848)
                            continue;
                        a848.push(i848);
                        const l848 = e140(d848, k848.property);
                        if (!l848)
                            continue;
                        const m848 = i848[b207]();
                        e848.push(new x214(l848, m848));
                    }
                    return new d215(c848, this._duration, d848, e848);
                }
                _searchForRootBonePath() {
                    const i847 = this._tracks.map(v847 => {
                        const w847 = v847[x208].parseTrsPath();
                        if (w847) {
                            const x847 = w847.node;
                            return {
                                path: x847,
                                rank: x847.split("/").length
                            };
                        }
                        return {
                            path: "",
                            rank: 0
                        };
                    });
                    i847.sort((t847, u847) => t847.rank - u847.rank);
                    const j847 = i847.findIndex(s847 => 0 !== s847.rank);
                    if (j847 < 0)
                        return "";
                    const k847 = i847.length, l847 = i847[j847];
                    let m847 = !0;
                    for (let q847 = j847 + 1; q847 < k847; ++q847) {
                        const r847 = i847[q847];
                        if (r847.rank !== l847.rank)
                            break;
                        if (r847.path !== l847.path) {
                            m847 = !1;
                            break;
                        }
                    }
                    return m847 ? l847.path : "";
                }
                _getLegacyData() {
                    return this._legacyData || (this._legacyData = this._toLegacy()), this._legacyData;
                }
                _toLegacy() {
                    const h847 = new z211(this._duration);
                    return h847.keys = [], h847.curves = [], h847.commonTargets = [], h847;
                }
                _fromLegacy(d847) {
                    const e847 = d847.toTracks(), f847 = e847.length;
                    for (let g847 = 0; g847 < f847; ++g847)
                        this.addTrack(e847[g847]);
                }
                _collectAnimatedJoints() {
                    const v846 = new Set(), { _tracks: w846 } = this, x846 = w846.length;
                    for (let b847 = 0; b847 < x846; ++b847) {
                        const c847 = w846[b847][x208].parseTrsPath();
                        c847 && v846.add(c847.node);
                    }
                    if (this._exoticAnimation) {
                        const y846 = this._exoticAnimation.collectAnimatedJoints(), z846 = y846.length;
                        for (let a847 = 0; a847 < z846; ++a847)
                            v846.add(y846[a847]);
                    }
                    return Array.from(v846);
                }
                _findAuxiliaryCurveEntry(s846) {
                    return this._auxiliaryCurveEntries.find(u846 => u846.name === s846);
                }
            }).WrapMode = k207, w213 = p130((v213 = i214).prototype, "sample", [j151], function () {
                return 60;
            }), x213 = p130(v213.prototype, "speed", [j151], function () {
                return 1;
            }), y213 = p130(v213.prototype, "wrapMode", [j151], function () {
                return k207.Normal;
            }), z213 = p130(v213.prototype, "enableTrsBlending", [j151], function () {
                return !1;
            }), a214 = p130(v213.prototype, "_duration", [j151], function () {
                return 0;
            }), b214 = p130(v213.prototype, "_hash", [j151], function () {
                return 0;
            }), c214 = p130(v213.prototype, "_tracks", [j151], function () {
                return [];
            }), d214 = p130(v213.prototype, "_exoticAnimation", [j151], function () {
                return null;
            }), e214 = p130(v213.prototype, "_events", [j151], function () {
                return [];
            }), f214 = p130(v213.prototype, "_embeddedPlayers", [j151], function () {
                return [];
            }), g214 = p130(v213.prototype, "_additiveSettings", [j151], function () {
                return new w214();
            }), h214 = p130(v213.prototype, "_auxiliaryCurveEntries", [j151], function () {
                return [];
            }), u213 = v213)) || u213), w214 = e151("cc.AnimationClipAdditiveSettings")((k214 = class {
                constructor() {
                    this.enabled = l214 && l214(), this.refClip = m214 && m214();
                }
            }, l214 = p130(k214.prototype, "enabled", [j151], function () {
                return !1;
            }), m214 = p130(k214.prototype, "refClip", [j151], function () {
                return null;
            }), j214 = k214)) || j214;
            s143.AnimationClip = v214;
            class x214 {
                constructor(q846, r846) {
                    this._binding = void 0, this._trackEval = void 0, this._shouldEvaluateDefault = !0, this._binding = q846, this._trackEval = r846, this._shouldEvaluateDefault = !!q846.getValue && r846.requiresDefault;
                }
                evaluate(l846) {
                    const { _binding: m846, _trackEval: n846 } = this, o846 = this._shouldEvaluateDefault ? m846.getValue() : void 0, p846 = n846.evaluate(l846, o846);
                    m846.setValue(p846);
                }
            }
            class y214 {
                constructor(f846, g846) {
                    this._embeddedPlayers = f846, this._embeddedPlayerEvaluationInfos = f846.map(i846 => {
                        const { playable: j846 } = i846;
                        if (!j846)
                            return null;
                        const k846 = j846.instantiate(g846);
                        return k846 ? {
                            instantiatedPlayer: k846,
                            entered: !1,
                            hostPauseTime: 0,
                            lastIterations: 0
                        } : null;
                    });
                }
                destroy() {
                    const { _embeddedPlayerEvaluationInfos: b846 } = this, c846 = b846.length;
                    for (let e846 = 0; e846 < c846; ++e846) {
                        var d846;
                        null === (d846 = b846[e846]) || void 0 === d846 || d846.instantiatedPlayer.destroy();
                    }
                    this._embeddedPlayerEvaluationInfos.length = 0;
                }
                evaluate(o845, p845) {
                    const { _embeddedPlayers: q845, _embeddedPlayerEvaluationInfos: r845 } = this, s845 = q845.length;
                    for (let t845 = 0; t845 < s845; ++t845) {
                        const u845 = r845[t845];
                        if (!u845)
                            continue;
                        const { entered: v845, instantiatedPlayer: w845, lastIterations: x845 } = u845, { begin: y845, end: z845 } = q845[t845];
                        if (o845 >= y845 && o845 <= z845 ? v845 ? p845 !== x845 && (w845.stop(), w845.play(), u845.entered = !0) : (w845.play(), u845.entered = !0) : v845 && (w845.stop(), u845.entered = !1), u845.lastIterations = p845, u845.entered) {
                            const a846 = o845 - y845;
                            u845.instantiatedPlayer.setTime(a846);
                        }
                    }
                }
                notifyHostSpeedChanged(g845) {
                    const { _embeddedPlayers: h845, _embeddedPlayerEvaluationInfos: i845 } = this, j845 = h845.length;
                    for (let k845 = 0; k845 < j845; ++k845) {
                        const l845 = i845[k845];
                        if (!l845)
                            continue;
                        const { instantiatedPlayer: m845 } = l845, { reconciledSpeed: n845 } = h845[k845];
                        n845 && m845.setSpeed(g845);
                    }
                }
                notifyHostPlay(u844) {
                    const { _embeddedPlayers: v844, _embeddedPlayerEvaluationInfos: w844 } = this, x844 = v844.length;
                    for (let y844 = 0; y844 < x844; ++y844) {
                        const z844 = w844[y844];
                        if (!z844)
                            continue;
                        const { begin: a845, end: b845 } = v844[y844], { instantiatedPlayer: c845, entered: d845 } = z844;
                        if (d845) {
                            const { hostPauseTime: e845 } = z844;
                            if (c845.randomAccess || w128(e845, u844, 1e-5)) {
                                const f845 = x128(u844, a845, b845);
                                c845.play(), c845.setTime(f845 - a845);
                            }
                            else
                                c845.stop();
                        }
                    }
                }
                notifyHostPause(m844) {
                    const { _embeddedPlayers: n844, _embeddedPlayerEvaluationInfos: o844 } = this, p844 = n844.length;
                    for (let q844 = 0; q844 < p844; ++q844) {
                        const r844 = o844[q844];
                        if (!r844)
                            continue;
                        const { instantiatedPlayer: s844, entered: t844 } = r844;
                        t844 && (s844.pause(), r844.hostPauseTime = m844);
                    }
                }
                notifyHostStop() {
                    const { _embeddedPlayers: f844, _embeddedPlayerEvaluationInfos: g844 } = this, h844 = f844.length;
                    for (let i844 = 0; i844 < h844; ++i844) {
                        const j844 = g844[i844];
                        if (!j844)
                            continue;
                        const { instantiatedPlayer: k844, entered: l844 } = j844;
                        l844 && (j844.entered = !1, k844.stop());
                    }
                }
            }
            class z214 {
                constructor(c844, d844, e844) {
                    this._exoticAnimationEvaluator = void 0, this._trackEvalStatues = [], this._rootMotionEvaluation = void 0, this._trackEvalStatues = c844, this._exoticAnimationEvaluator = d844, this._rootMotionEvaluation = e844;
                }
                evaluate(x843) {
                    const { _trackEvalStatues: y843, _exoticAnimationEvaluator: z843 } = this, a844 = y843.length;
                    for (let b844 = 0; b844 < a844; ++b844)
                        y843[b844].evaluate(x843);
                    z843 && z843.evaluate(x843);
                }
                evaluateRootMotion(u843, v843) {
                    const { _rootMotionEvaluation: w843 } = this;
                    w843 && w843.evaluate(u843, v843);
                }
            }
            class a215 {
                constructor() {
                    this.position = new w146(), this.scale = new w146(1, 1, 1), this.rotation = new g147(), this.eulerAngles = new w146();
                }
                getTransform(t843) {
                    o147.fromRTS(t843, this.rotation, this.position, this.scale);
                }
            }
            class b215 extends a215 {
                constructor(...s843) {
                    super(...s843), this.parent = null, this._dirty = !0, this._transform = new o147();
                }
                get globalTransform() {
                    const r843 = this._transform;
                    return this._dirty && (this._dirty = !1, o147.fromRTS(r843, this.rotation, this.position, this.scale), this.parent && o147.multiply(r843, this.parent.globalTransform, r843)), this._transform;
                }
                invalidate() {
                    this._dirty = !0;
                }
            }
            const c215 = new o147();
            class d215 {
                constructor(n843, o843, p843, q843) {
                    this._initialTransformCache = new o147(), this._clipEndTransformCache = new o147(), this._startTransformCache = new o147(), this._endTransformCache = new o147(), this._motionTransformCache = new o147(), this._translationMotionCache = new w146(), this._rotationMotionCache = new g147(), this._scaleMotionCache = new w146(), this._rootBone = n843, this._duration = o843, this._boneTransform = p843, this._trackEvalStatuses = q843;
                }
                evaluate(g843, h843) {
                    const i843 = this._calcMotionTransform(g843, h843, this._motionTransformCache), { _translationMotionCache: j843, _rotationMotionCache: k843, _scaleMotionCache: l843, _rootBone: m843 } = this;
                    o147.toRTS(i843, k843, j843, l843), w146.add(j843, j843, m843.position), m843.setPosition(j843), g147.multiply(k843, k843, m843.rotation), m843.setRotation(k843), w146.multiply(l843, l843, m843.scale), m843.setScale(l843);
                }
                _calcMotionTransform(o842, p842, q842) {
                    const { _duration: r842 } = this, s842 = r842 - o842, t842 = this._evaluateAt(o842, this._startTransformCache);
                    if (p842 < s842) {
                        const f843 = this._evaluateAt(o842 + p842, this._endTransformCache);
                        d140(q842, t842, f843);
                    }
                    else {
                        o147.identity(q842);
                        const u842 = (d843, e843) => {
                            d140(c215, d843, e843), o147.multiply(q842, q842, c215);
                        }, v842 = p842 - s842, w842 = Math.floor(v842 / r842), x842 = v842 - w842 * r842, y842 = this._evaluateAt(0, this._initialTransformCache), z842 = this._evaluateAt(r842, this._clipEndTransformCache), a843 = this._evaluateAt(x842, this._endTransformCache);
                        u842(t842, z842), d140(c215, y842, z842);
                        for (let c843 = 0; c843 < w842; ++c843)
                            o147.multiply(q842, q842, c215);
                        u842(y842, a843);
                    }
                    return q842;
                }
                _evaluateAt(j842, k842) {
                    const { _trackEvalStatuses: l842 } = this, m842 = l842.length;
                    for (let n842 = 0; n842 < m842; ++n842)
                        l842[n842].evaluate(j842);
                    return this._boneTransform.getTransform(k842), k842;
                }
            }
            function d140(g842, h842, i842) {
                o147.invert(g842, h842), o147.multiply(g842, i842, g842);
            }
            function e140(a842, b842) {
                switch (b842) {
                    default:
                        return;
                    case "position":
                        return {
                            setValue(f842) {
                                w146.copy(a842.position, f842);
                            }
                        };
                    case "rotation":
                        return {
                            setValue(e842) {
                                g147.copy(a842.rotation, e842);
                            }
                        };
                    case "scale":
                        return {
                            setValue(d842) {
                                w146.copy(a842.scale, d842);
                            }
                        };
                    case "eulerAngles":
                        return {
                            setValue(c842) {
                                w146.copy(a842.eulerAngles, c842);
                            }
                        };
                }
            }
            class e215 {
                constructor(w841, x841, y841, z841) {
                    this._lastFrameIndex = -1, this._lastIterations = 0, this._lastDirection = 0, this._ignoreIndex = -1, this._sampled = !1, this._targetNode = w841, this._ratios = x841, this._eventGroups = y841, this._wrapMode = z841;
                }
                setWrapMode(v841) {
                    this._wrapMode = v841;
                }
                ignore(s841, t841) {
                    this._ignoreIndex = -1, this._sampled = !1;
                    let u841 = g140(s841, this._ratios);
                    u841 < 0 && (u841 = ~u841 - 1, t841 < 0 && (u841 += 1), this._ignoreIndex = u841);
                }
                reset() {
                    this._lastFrameIndex = -1, this._lastIterations = 0, this._lastDirection = 0, this._ignoreIndex = -1, this._sampled = !1;
                }
                sample(h841, i841, j841) {
                    if (0 === this._eventGroups.length)
                        return;
                    const k841 = this._eventGroups.length;
                    let l841 = g140(h841, this._ratios);
                    if (l841 < 0 && (l841 = ~l841 - 1, i841 < 0 && (l841 += 1)), this._ignoreIndex !== l841 && (this._ignoreIndex = -1), !this._sampled)
                        return this._sampled = !0, this._doFire(l841, !1), this._lastFrameIndex = l841, this._lastIterations = j841, void (this._lastDirection = i841);
                    const m841 = this._wrapMode, n841 = f140(j841);
                    let o841 = f140(this._lastIterations), p841 = this._lastFrameIndex;
                    const q841 = this._lastDirection, r841 = -1 !== o841 && n841 !== o841;
                    if (p841 === l841 && r841 && 1 === k841)
                        this._doFire(0, !1);
                    else if (p841 !== l841 || r841) {
                        i841 = q841;
                        do {
                            if (p841 !== l841) {
                                if (-1 === i841 && 0 === p841 && l841 > 0 ? ((m841 & m155.PingPong) === m155.PingPong ? i841 *= -1 : p841 = k841, o841++) : 1 === i841 && p841 === k841 - 1 && l841 < k841 - 1 && ((m841 & m155.PingPong) === m155.PingPong ? i841 *= -1 : p841 = -1, o841++), p841 === l841)
                                    break;
                                if (o841 > n841)
                                    break;
                            }
                            p841 += i841, this._doFire(p841, !0);
                        } while (p841 !== l841 && p841 > -1 && p841 < k841);
                    }
                    this._lastFrameIndex = l841, this._lastIterations = j841, this._lastDirection = i841;
                }
                _doFire(f841, g841) {
                    g841 ? j139().pushDelayEvent(this._checkAndFire, this, [f841]) : this._checkAndFire(f841);
                }
                _checkAndFire(z840) {
                    if (!this._targetNode || !this._targetNode.isValid)
                        return;
                    const { _eventGroups: a841 } = this;
                    if (z840 < 0 || z840 >= a841.length || this._ignoreIndex === z840)
                        return;
                    const b841 = a841[z840], c841 = b841.events.length;
                    for (let d841 = 0; d841 < c841; ++d841) {
                        const e841 = b841.events[d841];
                        c140(this._targetNode, e841.functionName, e841.parameters);
                    }
                }
            }
            function f140(y840) {
                return y840 - (0 | y840) == 0 && (y840 -= 1), 0 | y840;
            }
            function g140(w840, x840) {
                return n130(x840, w840);
            }
            class f215 {
                constructor(r840, s840, t840, u840, v840) {
                    this._node = r840, this._property = s840, this._propertyBlendState = t840, this._host = u840, this._constants = v840;
                }
                get node() {
                    return this._node;
                }
                get property() {
                    return this._property;
                }
                getValue() {
                    return this._node[this._property];
                }
                setValue(n840) {
                    const { _propertyBlendState: o840, _host: p840 } = this, q840 = p840.weight;
                    o840.blend(n840, q840);
                }
            }
            var g215;
            !function (m840) {
                m840[m840.POSITION = 1] = "POSITION", m840[m840.ROTATION = 2] = "ROTATION", m840[m840.SCALE = 4] = "SCALE", m840[m840.EULER_ANGLES = 8] = "EULER_ANGLES";
            }(g215 || (g215 = {})), g215.POSITION, g215.ROTATION, g215.SCALE, g215.EULER_ANGLES;
            class h215 {
                constructor() {
                    this.refCount = 0, this.accumulatedWeight = 0, this.result = new w146();
                }
                blend(c840, d840) {
                    this.accumulatedWeight = function (f840, g840, h840, i840, j840) {
                        const k840 = h840 + j840;
                        if (1 !== j840 || h840) {
                            if (k840) {
                                const l840 = j840 / k840;
                                w146.lerp(f840, f840, i840, l840);
                            }
                        }
                        else
                            w146.copy(f840, i840);
                        return k840;
                    }(this.result, this.result, this.accumulatedWeight, c840, d840);
                }
                reset() {
                    this.accumulatedWeight = 0, w146.zero(this.result);
                }
            }
            class i215 {
                constructor() {
                    this.refCount = 0, this.accumulatedWeight = 0, this.result = new g147();
                }
                blend(s839, t839) {
                    this.accumulatedWeight = function (v839, w839, x839, y839, z839) {
                        const a840 = x839 + z839;
                        if (1 !== z839 || x839) {
                            if (a840) {
                                const b840 = z839 / a840;
                                g147.slerp(v839, w839, y839, b840);
                            }
                        }
                        else
                            g147.copy(v839, y839);
                        return a840;
                    }(this.result, this.result, this.accumulatedWeight, s839, t839);
                }
                reset() {
                    this.accumulatedWeight = 0, g147.identity(this.result);
                }
            }
            class j215 extends class {
                constructor() {
                    this._transformApplyFlags = 0, this._properties = {};
                }
                get empty() {
                    const { _properties: r839 } = this;
                    return !(r839.position || r839.rotation || r839.eulerAngles || r839.scale);
                }
                refProperty(l839, m839) {
                    var n839, o839;
                    const { _properties: p839 } = this;
                    let q839;
                    switch (m839) {
                        default:
                        case "position":
                        case "scale":
                        case "eulerAngles":
                            q839 = null !== (n839 = p839[m839]) && void 0 !== n839 ? n839 : p839[m839] = this._createVec3BlendState(l839[m839]);
                            break;
                        case "rotation":
                            q839 = null !== (o839 = p839[m839]) && void 0 !== o839 ? o839 : p839[m839] = this._createQuatBlendState(l839.rotation);
                    }
                    return ++q839.refCount, q839;
                }
                deRefProperty(i839) {
                    const { _properties: j839 } = this, k839 = j839[i839];
                    k839 && (--k839.refCount, k839.refCount > 0 || delete j839[i839]);
                }
                apply(z838) {
                    const { _transformApplyFlags: a839, _properties: { position: b839, scale: c839, rotation: d839, eulerAngles: e839 } } = this;
                    if (!a839)
                        return;
                    let f839, g839, h839;
                    b839 && a839 & g215.POSITION && (f839 = b839.result), c839 && a839 & g215.SCALE && (g839 = c839.result), e839 && a839 & g215.EULER_ANGLES && (h839 = e839.result), d839 && a839 & g215.ROTATION && (h839 = d839.result), (h839 || f839 || g839) && z838.setRTS(h839, f839, g839), this._transformApplyFlags = 0;
                }
            } {
                apply(u838) {
                    const { _properties: { position: v838, scale: w838, rotation: x838, eulerAngles: y838 } } = this;
                    v838 && v838.accumulatedWeight && (this._transformApplyFlags |= g215.POSITION, v838.accumulatedWeight < 1 && v838.blend(u838.position, 1 - v838.accumulatedWeight)), w838 && w838.accumulatedWeight && (this._transformApplyFlags |= g215.SCALE, w838.accumulatedWeight < 1 && w838.blend(u838.scale, 1 - w838.accumulatedWeight)), y838 && y838.accumulatedWeight && (this._transformApplyFlags |= g215.EULER_ANGLES, y838.accumulatedWeight < 1 && y838.blend(u838.eulerAngles, 1 - y838.accumulatedWeight)), x838 && x838.accumulatedWeight && (this._transformApplyFlags |= g215.ROTATION, x838.accumulatedWeight < 1 && x838.blend(u838.rotation, 1 - x838.accumulatedWeight)), super.apply(u838), null == v838 || v838.reset(), null == w838 || w838.reset(), null == x838 || x838.reset(), null == y838 || y838.reset();
                }
                _createVec3BlendState(t838) {
                    return new h215();
                }
                _createQuatBlendState(s838) {
                    return new i215();
                }
            }
            class k215 extends class {
                constructor() {
                    this._nodeBlendStates = new Map();
                }
                createWriter(n838, o838, p838, q838) {
                    const r838 = this.ref(n838, o838);
                    return new f215(n838, o838, r838, p838, q838);
                }
                destroyWriter(l838) {
                    const m838 = l838;
                    this.deRef(m838.node, m838.property);
                }
                ref(i838, j838) {
                    let k838 = this._nodeBlendStates.get(i838);
                    return k838 || (k838 = this.createNodeBlendState(), this._nodeBlendStates.set(i838, k838)), k838.refProperty(i838, j838);
                }
                deRef(f838, g838) {
                    const h838 = this._nodeBlendStates.get(f838);
                    h838 && (h838.deRefProperty(g838), h838.empty && this._nodeBlendStates.delete(f838));
                }
                apply() {
                    this._nodeBlendStates.forEach((d838, e838) => {
                        d838.apply(e838);
                    });
                }
            } {
                createNodeBlendState() {
                    return new j215();
                }
            }
            const l215 = [], m215 = new Map();
            function h140(x837, y837) {
                let z837 = 0, a838 = o147.IDENTITY;
                for (; x837;) {
                    if (x837.stamp === y837 || x837.stamp + 1 === y837 && !x837.node.hasChangedFlags) {
                        a838 = x837.world, x837.stamp = y837;
                        break;
                    }
                    x837.stamp = y837, l215[z837++] = x837, x837 = x837.parent;
                }
                for (; z837 > 0;) {
                    x837 = l215[--z837], l215[z837] = null;
                    const b838 = x837.node;
                    o147.fromRTS(x837.local, b838.rotation, b838.position, b838.scale), a838 = o147.multiply(x837.world, a838, x837.local);
                }
                return a838;
            }
            function i140(r837, s837) {
                let t837, u837 = null, v837 = 0;
                for (; r837 !== s837;) {
                    const w837 = r837.uuid;
                    if (m215.has(w837)) {
                        u837 = m215.get(w837);
                        break;
                    }
                    u837 = {
                        node: r837,
                        local: new o147(),
                        world: new o147(),
                        stamp: -1,
                        parent: null
                    }, m215.set(w837, u837), l215[v837++] = u837, r837 = r837.parent, u837 = null;
                }
                for (; v837 > 0;)
                    t837 = l215[--v837], l215[v837] = null, t837.parent = u837, u837 = t837;
                return u837;
            }
            function j140(p837) {
                let q837 = m215.get(p837.uuid) || null;
                for (; q837;)
                    m215.delete(q837.node.uuid), q837 = q837.parent;
            }
            var n215, o215;
            let p215 = g125("AnimationManager", e151(((o215 = class extends a156 {
                constructor(...o837) {
                    super(...o837), this._anims = new k145([]), this._crossFades = new k145([]), this._delayEvents = [], this._blendStateBuffer = new k215(), this._sockets = [];
                }
                get blendState() {
                    return this._blendStateBuffer;
                }
                addCrossFade(n837) {
                    -1 === this._crossFades.array.indexOf(n837) && this._crossFades.push(n837);
                }
                removeCrossFade(l837) {
                    const m837 = this._crossFades.array.indexOf(l837);
                    m837 >= 0 ? this._crossFades.fastRemoveAt(m837) : z125(3907);
                }
                update(v836) {
                    const { _delayEvents: w836, _crossFades: x836, _sockets: y836 } = this;
                    {
                        const k837 = x836.array;
                        for (x836.i = 0; x836.i < k837.length; ++x836.i)
                            k837[x836.i].update(v836);
                    }
                    const z836 = this._anims, a837 = z836.array;
                    for (z836.i = 0; z836.i < a837.length; ++z836.i) {
                        const j837 = a837[z836.i];
                        j837.isMotionless || j837.update(v836);
                    }
                    this._blendStateBuffer.apply();
                    const b837 = t185.getTotalFrames();
                    for (let f837 = 0, g837 = y836.length; f837 < g837; f837++) {
                        const { target: h837, transform: i837 } = y836[f837];
                        h837.matrix = h140(i837, b837);
                    }
                    for (let c837 = 0, d837 = w836.length; c837 < d837; c837++) {
                        const e837 = w836[c837];
                        e837.fn.apply(e837.thisArg, e837.args);
                    }
                    w836.length = 0;
                }
                destruct() { }
                addAnimation(u836) {
                    -1 === this._anims.array.indexOf(u836) && this._anims.push(u836);
                }
                removeAnimation(s836) {
                    const t836 = this._anims.array.indexOf(s836);
                    t836 >= 0 ? this._anims.fastRemoveAt(t836) : z125(3907);
                }
                pushDelayEvent(p836, q836, r836) {
                    this._delayEvents.push({
                        fn: p836,
                        thisArg: q836,
                        args: r836
                    });
                }
                addSockets(h836, i836) {
                    for (let j836 = 0; j836 < i836.length; ++j836) {
                        const k836 = i836[j836];
                        if (this._sockets.find(o836 => o836.target === k836.target))
                            continue;
                        const l836 = h836.getChildByPath(k836.path), m836 = k836.target && l836 && i140(l836, h836);
                        m836 && this._sockets.push({
                            target: k836.target,
                            transform: m836
                        });
                    }
                }
                removeSockets(b836, c836) {
                    for (let d836 = 0; d836 < c836.length; ++d836) {
                        const e836 = c836[d836];
                        for (let f836 = 0; f836 < this._sockets.length; ++f836) {
                            const g836 = this._sockets[f836];
                            if (g836.target === e836.target) {
                                j140(g836.transform.node), this._sockets[f836] = this._sockets[this._sockets.length - 1], this._sockets.length--;
                                break;
                            }
                        }
                    }
                }
            }).ID = "animation", n215 = o215)) || n215);
            t185.on(s185.EVENT_INIT, () => {
                const a836 = new p215();
                t185.registerSystem(p215.ID, a836, a156.Priority.HIGH);
            }), s143.AnimationManager = p215;
            class q215 extends j207 {
                constructor(z835) {
                    super(), this._managedStates = [], this._fadings = [], this._scheduled = !1, this._scheduler = null != z835 ? z835 : j139();
                }
                update(v835) {
                    if (this.isMotionless)
                        return;
                    const w835 = this._managedStates, x835 = this._fadings;
                    if (1 === w835.length && 1 === x835.length) {
                        const y835 = w835[0].state;
                        y835 && (y835.weight = 1);
                    }
                    else
                        this._calculateWeights(v835);
                    1 === w835.length && 1 === x835.length && this._unscheduleThis();
                }
                crossFade(p835, q835) {
                    var r835;
                    0 === this._managedStates.length && (q835 = 0), 0 === q835 && this.clear();
                    let s835 = this._managedStates.find(u835 => u835.state === p835);
                    s835 ? null !== (r835 = s835.state) && void 0 !== r835 && r835.isMotionless && s835.state.play() : (s835 = {
                        state: p835,
                        reference: 0
                    }, p835 && p835.play(), this._managedStates.push(s835)), ++s835.reference, this._fadings.unshift({
                        easeDuration: q835,
                        easeTime: 0,
                        target: s835
                    }), this.isMotionless || this._scheduleThis();
                }
                clear() {
                    for (let n835 = 0; n835 < this._managedStates.length; ++n835) {
                        const o835 = this._managedStates[n835].state;
                        o835 && o835.stop();
                    }
                    this._managedStates.length = 0, this._fadings.length = 0;
                }
                onPlay() {
                    super.onPlay(), this._scheduleThis();
                }
                onPause() {
                    super.onPause();
                    for (let l835 = 0; l835 < this._managedStates.length; ++l835) {
                        const m835 = this._managedStates[l835].state;
                        m835 && m835.pause();
                    }
                    this._unscheduleThis();
                }
                onResume() {
                    super.onResume();
                    for (let j835 = 0; j835 < this._managedStates.length; ++j835) {
                        const k835 = this._managedStates[j835].state;
                        k835 && k835.resume();
                    }
                    this._scheduleThis();
                }
                onStop() {
                    super.onStop(), this.clear();
                }
                _calculateWeights(w834) {
                    const x834 = this._managedStates, y834 = this._fadings;
                    for (let h835 = 0; h835 < x834.length; ++h835) {
                        const i835 = x834[h835].state;
                        i835 && (i835.weight = 0);
                    }
                    let z834 = 1, a835 = y834.length;
                    for (let d835 = 0; d835 < y834.length; ++d835) {
                        const e835 = y834[d835];
                        e835.easeTime += w834;
                        const f835 = 0 === e835.easeDuration ? 1 : y128(e835.easeTime / e835.easeDuration), g835 = f835 * z834;
                        if (z834 *= 1 - f835, e835.target.state && (e835.target.state.weight += g835), e835.easeTime >= e835.easeDuration) {
                            a835 = d835 + 1, e835.easeTime = e835.easeDuration;
                            break;
                        }
                    }
                    if (a835 !== y834.length) {
                        for (let b835 = a835; b835 < y834.length; ++b835) {
                            const c835 = y834[b835];
                            --c835.target.reference, c835.target.reference <= 0 && (c835.target.state && c835.target.state.stop(), j127(this._managedStates, c835.target));
                        }
                        y834.splice(a835);
                    }
                }
                _scheduleThis() {
                    this._scheduled || (this._scheduler.addCrossFade(this), this._scheduled = !0);
                }
                _unscheduleThis() {
                    this._scheduled && (this._scheduler.removeCrossFade(this), this._scheduled = !1);
                }
            }
            var r215, s215, t215, u215, v215, w215, x215, y215, z215, a216, b216;
            let c216 = (r215 = e151("cc.Animation"), s215 = g151(99), t215 = a131([v214]), u215 = a131(v214), v215 = a131([v214]), r215(w215 = s215(((b216 = class extends g133(a165) {
                constructor(...v834) {
                    super(...v834), this.playOnLoad = y215 && y215(), this._crossFade = new q215(), this._nameToState = j126(!0), this._clips = z215 && z215(), this._defaultClip = a216 && a216(), this._hasBeenPlayed = !1;
                }
                get clips() {
                    return this._clips;
                }
                set clips(p834) {
                    this._crossFade && this._crossFade.clear();
                    for (const u834 of this._clips)
                        u834 && this._removeStateOfAutomaticClip(u834);
                    for (const t834 of p834)
                        t834 && this.createState(t834);
                    const q834 = p834.find(s834 => k140(s834, this._defaultClip));
                    this._defaultClip = q834 || null, this._clips = p834;
                }
                get defaultClip() {
                    return this._defaultClip;
                }
                set defaultClip(m834) {
                    this._defaultClip = m834, m834 && (this._clips.findIndex(o834 => k140(o834, m834)) >= 0 || (this._clips.push(m834), this.createState(m834)));
                }
                onLoad() {
                    this.clips = this._clips;
                    for (const l834 in this._nameToState)
                        this._nameToState[l834].initialize(this.node);
                }
                start() {
                    this.playOnLoad && !this._hasBeenPlayed && this._defaultClip && this.crossFade(this._defaultClip.name, 0);
                }
                onEnable() {
                    this._crossFade.resume();
                }
                onDisable() {
                    this._crossFade.pause();
                }
                onDestroy() {
                    this._crossFade.stop();
                    for (const k834 in this._nameToState)
                        this._nameToState[k834].destroy();
                    this._nameToState = j126(!0);
                }
                play(j834) {
                    if (this._hasBeenPlayed = !0, !j834) {
                        if (!this._defaultClip)
                            return;
                        j834 = this._defaultClip.name;
                    }
                    this.crossFade(j834, 0);
                }
                crossFade(g834, h834 = .3) {
                    this._hasBeenPlayed = !0;
                    const i834 = this._nameToState[g834];
                    i834 && this.doPlayOrCrossFade(i834, h834);
                }
                pause() {
                    this._crossFade.pause();
                }
                resume() {
                    this._crossFade.resume();
                }
                stop() {
                    this._crossFade.stop();
                }
                getState(e834) {
                    const f834 = this._nameToState[e834];
                    return f834 && !f834.curveLoaded && f834.initialize(this.node), f834 || null;
                }
                createState(c834, d834) {
                    return d834 = d834 || c834.name, this.removeState(d834), this._doCreateState(c834, d834);
                }
                removeState(a834) {
                    const b834 = this._nameToState[a834];
                    b834 && (b834.allowLastFrameEvent(!1), b834.stop(), delete this._nameToState[a834]);
                }
                addClip(y833, z833) {
                    return m127(this._clips, y833) || this._clips.push(y833), this.createState(y833, z833);
                }
                removeClip(r833, s833) {
                    let t833;
                    for (const w833 in this._nameToState) {
                        const x833 = this._nameToState[w833];
                        if (x833.clip === r833) {
                            t833 = x833;
                            break;
                        }
                    }
                    if (r833 === this._defaultClip) {
                        if (!s833)
                            return void y125(3902);
                        this._defaultClip = null;
                    }
                    if (t833 && t833.isPlaying) {
                        if (!s833)
                            return void y125(3903);
                        t833.stop();
                    }
                    this._clips = this._clips.filter(v833 => v833 !== r833), t833 && delete this._nameToState[t833.name];
                }
                on(m833, n833, o833, p833) {
                    const q833 = super.on(m833, n833, o833, p833);
                    return m833 === l207.LASTFRAME && this._syncAllowLastFrameEvent(), q833;
                }
                once(i833, j833, k833) {
                    const l833 = super.once(i833, j833, k833);
                    return i833 === l207.LASTFRAME && this._syncAllowLastFrameEvent(), l833;
                }
                off(f833, g833, h833) {
                    super.off(f833, g833, h833), f833 === l207.LASTFRAME && this._syncDisallowLastFrameEvent();
                }
                _createState(d833, e833) {
                    return new o207(d833, e833);
                }
                _doCreateState(a833, b833) {
                    const c833 = this._createState(a833, b833);
                    return c833._setEventTarget(this), c833.allowLastFrameEvent(this.hasEventListener(l207.LASTFRAME)), this.node && c833.initialize(this.node), this._nameToState[c833.name] = c833, c833;
                }
                doPlayOrCrossFade(y832, z832) {
                    this._crossFade.play(), this._crossFade.crossFade(y832, z832);
                }
                _removeStateOfAutomaticClip(v832) {
                    for (const w832 in this._nameToState) {
                        const x832 = this._nameToState[w832];
                        k140(v832, x832.clip) && (x832.stop(), delete this._nameToState[w832]);
                    }
                }
                _syncAllowLastFrameEvent() {
                    if (this.hasEventListener(l207.LASTFRAME))
                        for (const u832 in this._nameToState)
                            this._nameToState[u832].allowLastFrameEvent(!0);
                }
                _syncDisallowLastFrameEvent() {
                    if (!this.hasEventListener(l207.LASTFRAME))
                        for (const t832 in this._nameToState)
                            this._nameToState[t832].allowLastFrameEvent(!1);
                }
            }).EventType = l207, i125((x215 = b216).prototype, "clips", [t215], Object.getOwnPropertyDescriptor(x215.prototype, "clips"), x215.prototype), i125(x215.prototype, "defaultClip", [u215], Object.getOwnPropertyDescriptor(x215.prototype, "defaultClip"), x215.prototype), y215 = p130(x215.prototype, "playOnLoad", [j151], function () {
                return !1;
            }), z215 = p130(x215.prototype, "_clips", [v215], function () {
                return [];
            }), a216 = p130(x215.prototype, "_defaultClip", [j151], function () {
                return null;
            }), w215 = x215)) || w215) || w215);
            function k140(r832, s832) {
                return r832 === s832 || !!r832 && !!s832 && r832._uuid === s832._uuid && r832._uuid;
            }
            g125({
                Animation: c216,
                AnimationComponent: c216
            }), s143.Animation = c216, s143.AnimationComponent = c216, a127(c216, "cc.AnimationComponent");
            const d216 = new o147();
            let e216, f216, g216;
            !function (q832) {
                q832.PLAYED = "play", q832.PAUSED = "pause", q832.STOPPED = "stop", q832.SEEKED = "seeked", q832.ENDED = "ended", q832.INTERRUPTION_BEGIN = "interruptionBegin", q832.INTERRUPTION_END = "interruptionEnd", q832.USER_GESTURE = "on_gesture";
            }(e216 || (e216 = {})), function (p832) {
                p832[p832.DOM_AUDIO = 0] = "DOM_AUDIO", p832[p832.WEB_AUDIO = 1] = "WEB_AUDIO", p832[p832.MINIGAME_AUDIO = 2] = "MINIGAME_AUDIO", p832[p832.NATIVE_AUDIO = 3] = "NATIVE_AUDIO", p832[p832.UNKNOWN_AUDIO = 4] = "UNKNOWN_AUDIO";
            }(f216 || (f216 = {})), function (o832) {
                o832[o832.INIT = 0] = "INIT", o832[o832.PLAYING = 1] = "PLAYING", o832[o832.PAUSED = 2] = "PAUSED", o832[o832.STOPPED = 3] = "STOPPED", o832[o832.INTERRUPTED = 4] = "INTERRUPTED";
            }(g216 || (g216 = {}));
            class h216 {
                constructor(...k832) {
                    if (this._bufferView = void 0, this._normalizeFactor = 1, 2 === k832.length)
                        this._bufferView = k832[0], this._normalizeFactor = k832[1];
                    else {
                        const l832 = k832[0], m832 = k832[1], n832 = k832[2];
                        this._bufferView = new m832(l832), this._normalizeFactor = n832;
                    }
                }
                get length() {
                    return this._bufferView.length;
                }
                getData(j832) {
                    return this._bufferView[j832] * this._normalizeFactor;
                }
            }
            g125("AudioPCMDataView", h216);
            let i216 = 0;
            function l140(w831, x831) {
                x831.invoking || (x831.invoking = !0, x831.func.call(w831, ...x831.args).then(() => {
                    x831.invoking = !1, w831._operationQueue.shift(), w831._eventTarget.emit(x831.id.toString()), function (c832) {
                        const d832 = c832._operationQueue.length, e832 = c832._operationQueue.slice(), f832 = [];
                        let g832 = !1;
                        for (let h832 = d832 - 1; h832 >= 0; h832--) {
                            const i832 = e832[h832];
                            if ("stop" === i832.op) {
                                f832.push(i832);
                                break;
                            }
                            if ("seek" === i832.op)
                                g832 || (f832.push(i832), g832 = !0);
                            else {
                                if (g832) {
                                    f832.push(i832);
                                    break;
                                }
                                0 === f832.length && f832.push(i832);
                            }
                        }
                        c832._operationQueue = f832.reverse();
                    }(w831);
                    const a832 = w831._operationQueue[0];
                    a832 && l140(w831, a832);
                }).catch(() => { }));
            }
            function m140(m831, n831, o831) {
                const p831 = o831.value;
                o831.value = function (...r831) {
                    return new Promise(t831 => {
                        const u831 = i216++, v831 = this;
                        v831._operationQueue.push({
                            op: n831,
                            id: u831,
                            func: p831,
                            args: r831,
                            invoking: !1
                        }), v831._eventTarget.once(u831.toString(), t831), l140(v831, v831._operationQueue[0]);
                    });
                };
            }
            var j216, k216;
            const l216 = {}, m216 = jsb.AudioEngine, n216 = -1;
            var o216;
            !function (l831) {
                l831[l831.UNKNOWN = 0] = "UNKNOWN", l831[l831.SIGNED_8 = 1] = "SIGNED_8", l831[l831.UNSIGNED_8 = 2] = "UNSIGNED_8", l831[l831.SIGNED_16 = 3] = "SIGNED_16", l831[l831.UNSIGNED_16 = 4] = "UNSIGNED_16", l831[l831.SIGNED_32 = 5] = "SIGNED_32", l831[l831.UNSIGNED_32 = 6] = "UNSIGNED_32", l831[l831.FLOAT_32 = 7] = "FLOAT_32", l831[l831.FLOAT_64 = 8] = "FLOAT_64";
            }(o216 || (o216 = {}));
            const p216 = {
                [o216.UNKNOWN]: void 0,
                [o216.SIGNED_8]: {
                    ctor: Int8Array,
                    maxValue: 127
                },
                [o216.UNSIGNED_8]: {
                    ctor: Uint8Array,
                    maxValue: 255
                },
                [o216.SIGNED_16]: {
                    ctor: Int16Array,
                    maxValue: 32767
                },
                [o216.UNSIGNED_16]: {
                    ctor: Uint16Array,
                    maxValue: 65535
                },
                [o216.SIGNED_32]: {
                    ctor: Int32Array,
                    maxValue: 2147483647
                },
                [o216.UNSIGNED_32]: {
                    ctor: Uint32Array,
                    maxValue: 4294967295
                },
                [o216.FLOAT_32]: {
                    ctor: Float32Array,
                    maxValue: 1
                },
                [o216.FLOAT_64]: {
                    ctor: Float64Array,
                    maxValue: 1
                }
            };
            class q216 {
                get onPlay() {
                    return this._onPlayCb;
                }
                set onPlay(k831) {
                    this._onPlayCb = k831;
                }
                get onEnd() {
                    return this._onEndCb;
                }
                set onEnd(j831) {
                    this._onEndCb = j831;
                }
                constructor(h831, i831) {
                    this._id = n216, this._url = void 0, this._volume = void 0, this._onPlayCb = void 0, this._onEndCb = void 0, this._url = h831, this._volume = i831;
                }
                play() {
                    var e831;
                    this._id = jsb.AudioEngine.play2d(this._url, !1, this._volume), jsb.AudioEngine.setFinishCallback(this._id, () => {
                        var g831;
                        null === (g831 = this.onEnd) || void 0 === g831 || g831.call(this);
                    }), null === (e831 = this.onPlay) || void 0 === e831 || e831.call(this);
                }
                stop() {
                    this._id !== n216 && jsb.AudioEngine.stop(this._id);
                }
            }
            let r216 = ((k216 = class t {
                constructor(d831) {
                    this._url = void 0, this._id = n216, this._state = g216.INIT, this._pcmHeader = void 0, this._eventTarget = new o156(), this._operationQueue = [], this._cachedState = {
                        duration: 1,
                        loop: !1,
                        currentTime: 0,
                        volume: 1
                    }, this._url = d831, this._pcmHeader = null, e186.on(d186.EVENT_PAUSE, this._onInterruptedBegin, this), e186.on(d186.EVENT_RESUME, this._onInterruptedEnd, this);
                }
                destroy() {
                    e186.off(d186.EVENT_PAUSE, this._onInterruptedBegin, this), e186.off(d186.EVENT_RESUME, this._onInterruptedEnd, this), --l216[this._url] <= 0 && m216.uncache(this._url);
                }
                _onInterruptedBegin() {
                    this._state === g216.PLAYING && this.pause().then(() => {
                        this._state = g216.INTERRUPTED, this._eventTarget.emit(e216.INTERRUPTION_BEGIN);
                    }).catch(() => { });
                }
                _onInterruptedEnd() {
                    this._state === g216.INTERRUPTED && this.play().then(() => {
                        this._eventTarget.emit(e216.INTERRUPTION_END);
                    }).catch(() => { });
                }
                static load(q830, r830) {
                    return new Promise((t830, u830) => {
                        t.loadNative(q830, r830).then(y830 => {
                            t830(new t(y830));
                        }).catch(x830 => u830(x830));
                    });
                }
                static loadNative(i830, j830) {
                    return new Promise((l830, m830) => {
                        y156.platform === u156.WIN32 ? (m216.preload(i830, () => {
                            console.debug("somehow preload success on windows");
                        }), l830(i830)) : m216.preload(i830, p830 => {
                            p830 ? l830(i830) : m830(new Error("load audio failed"));
                        });
                    });
                }
                static loadOneShotAudio(a830, b830, c830) {
                    return new Promise((e830, f830) => {
                        t.loadNative(a830, c830).then(h830 => {
                            e830(new q216(h830, b830));
                        }).catch(f830);
                    });
                }
                get _isValid() {
                    return this._id !== n216;
                }
                get src() {
                    return this._url;
                }
                get type() {
                    return f216.NATIVE_AUDIO;
                }
                get state() {
                    return this._state;
                }
                get loop() {
                    return this._isValid ? m216.isLoop(this._id) : this._cachedState.loop;
                }
                set loop(z829) {
                    this._isValid && m216.setLoop(this._id, z829), this._cachedState.loop = z829;
                }
                get volume() {
                    return this._isValid ? m216.getVolume(this._id) : this._cachedState.volume;
                }
                set volume(y829) {
                    y829 = y128(y829), this._isValid && m216.setVolume(this._id, y829), this._cachedState.volume = y829;
                }
                get duration() {
                    return this._isValid ? m216.getDuration(this._id) : this._cachedState.duration;
                }
                get currentTime() {
                    return this._isValid ? m216.getCurrentTime(this._id) : this._cachedState.currentTime;
                }
                get sampleRate() {
                    return null === this._pcmHeader && (this._pcmHeader = jsb.AudioEngine.getPCMHeader(this._url)), this._pcmHeader.sampleRate;
                }
                getPCMData(v829) {
                    const w829 = m216.getOriginalPCMBuffer(this._url, v829);
                    null === this._pcmHeader && (this._pcmHeader = jsb.AudioEngine.getPCMHeader(this._url));
                    const x829 = p216[this._pcmHeader.audioFormat];
                    if (w829 && x829)
                        return new h216(w829, x829.ctor, 1 / x829.maxValue);
                }
                seek(s829) {
                    return new Promise(u829 => (this._isValid && m216.setCurrentTime(this._id, s829), this._cachedState.currentTime = s829, u829()));
                }
                play() {
                    return new Promise(q829 => {
                        this._isValid ? this._state === g216.PAUSED || this._state === g216.INTERRUPTED ? m216.resume(this._id) : this._state === g216.PLAYING && (m216.pause(this._id), m216.setCurrentTime(this._id, 0), m216.resume(this._id)) : (this._id = m216.play2d(this._url, this._cachedState.loop, this._cachedState.volume), this._isValid && (0 !== this._cachedState.currentTime && (m216.setCurrentTime(this._id, this._cachedState.currentTime), this._cachedState.currentTime = 0), m216.setFinishCallback(this._id, () => {
                            this._cachedState.currentTime = 0, this._id = n216, this._state = g216.INIT, this._eventTarget.emit(e216.ENDED);
                        }))), this._state = g216.PLAYING, q829();
                    });
                }
                pause() {
                    return new Promise(o829 => {
                        this._isValid && m216.pause(this._id), this._state = g216.PAUSED, o829();
                    });
                }
                stop() {
                    return new Promise(m829 => {
                        this._isValid && m216.stop(this._id), this._state = g216.STOPPED, this._id = n216, this._cachedState.currentTime = 0, m829();
                    });
                }
                onInterruptionBegin(k829) {
                    this._eventTarget.on(e216.INTERRUPTION_BEGIN, k829);
                }
                offInterruptionBegin(j829) {
                    this._eventTarget.off(e216.INTERRUPTION_BEGIN, j829);
                }
                onInterruptionEnd(i829) {
                    this._eventTarget.on(e216.INTERRUPTION_END, i829);
                }
                offInterruptionEnd(h829) {
                    this._eventTarget.off(e216.INTERRUPTION_END, h829);
                }
                onEnded(g829) {
                    this._eventTarget.on(e216.ENDED, g829);
                }
                offEnded(f829) {
                    this._eventTarget.off(e216.ENDED, f829);
                }
            }).maxAudioChannel = m216.getMaxAudioInstance(), i125((j216 = k216).prototype, "seek", [m140], Object.getOwnPropertyDescriptor(j216.prototype, "seek"), j216.prototype), i125(j216.prototype, "play", [m140], Object.getOwnPropertyDescriptor(j216.prototype, "play"), j216.prototype), i125(j216.prototype, "pause", [m140], Object.getOwnPropertyDescriptor(j216.prototype, "pause"), j216.prototype), i125(j216.prototype, "stop", [m140], Object.getOwnPropertyDescriptor(j216.prototype, "stop"), j216.prototype), j216);
            var s216, t216, u216, v216;
            s143.AudioPlayer = r216;
            let w216 = g125("AudioClip", e151("cc.AudioClip")(((v216 = class extends t163 {
                constructor(...e829) {
                    super(...e829), this._duration = u216 && u216(), this._loadMode = f216.UNKNOWN_AUDIO, this._meta = null, this._player = null;
                }
                set duration(d829) {
                    this._duration = d829;
                }
                destroy() {
                    var b829;
                    const c829 = super.destroy();
                    return null === (b829 = this._player) || void 0 === b829 || b829.destroy(), this._player = null, this._meta && (this._meta.player = null), c829;
                }
                set _nativeAsset(a829) {
                    this._meta = a829, a829 ? (this._loadMode = a829.type, this._player = a829.player) : (this._meta = null, this._loadMode = f216.UNKNOWN_AUDIO, this._duration = 0);
                }
                get _nativeAsset() {
                    return this._meta;
                }
                get _nativeDep() {
                    return {
                        uuid: this._uuid,
                        audioLoadMode: this.loadMode,
                        ext: this._native,
                        __isNative__: !0
                    };
                }
                get loadMode() {
                    return this._loadMode;
                }
                validate() {
                    return !!this._meta;
                }
                getDuration() {
                    return this._duration ? this._duration : this._meta ? this._meta.duration : 0;
                }
                get state() {
                    return this._player ? this._player.state : g216.INIT;
                }
                getCurrentTime() {
                    return this._player ? this._player.currentTime : 0;
                }
                getVolume() {
                    return this._player ? this._player.volume : 0;
                }
                getLoop() {
                    return !!this._player && this._player.loop;
                }
                setCurrentTime(x828) {
                    var y828;
                    null === (y828 = this._player) || void 0 === y828 || y828.seek(x828).catch(() => { });
                }
                setVolume(w828) {
                    this._player && (this._player.volume = w828);
                }
                setLoop(v828) {
                    this._player && (this._player.loop = v828);
                }
                play() {
                    var t828;
                    null === (t828 = this._player) || void 0 === t828 || t828.play().catch(() => { });
                }
                pause() {
                    var r828;
                    null === (r828 = this._player) || void 0 === r828 || r828.pause().catch(() => { });
                }
                stop() {
                    var p828;
                    null === (p828 = this._player) || void 0 === p828 || p828.stop().catch(() => { });
                }
                playOneShot(l828 = 1) {
                    this._nativeAsset && r216.loadOneShotAudio(this._nativeAsset.url, l828).then(o828 => {
                        o828.play();
                    }).catch(() => { });
                }
            }).AudioType = f216, u216 = p130((t216 = v216).prototype, "_duration", [j151], function () {
                return 0;
            }), i125(t216.prototype, "_nativeDep", [h152], Object.getOwnPropertyDescriptor(t216.prototype, "_nativeDep"), t216.prototype), s216 = t216)) || s216);
            function n140(d828, e828, f828) {
                r216.load(d828, {
                    audioLoadMode: e828.audioLoadMode
                }).then(j828 => {
                    const k828 = {
                        player: j828,
                        url: d828,
                        duration: j828.duration,
                        type: j828.type
                    };
                    f828(null, k828);
                }).catch(i828 => {
                    f828(i828);
                });
            }
            function o140(y827, z827, a828, b828) {
                const c828 = new w216();
                c828._nativeUrl = y827, c828._nativeAsset = z827, c828.duration = z827.duration, b828(null, c828);
            }
            s143.AudioClip = w216, m184.register({
                ".mp3": n140,
                ".ogg": n140,
                ".wav": n140,
                ".m4a": n140
            }), t184.register({
                ".mp3": o140,
                ".ogg": o140,
                ".wav": o140,
                ".m4a": o140
            });
            const x216 = new class {
                constructor() {
                    this._oneShotAudioInfoList = [], this._audioPlayerInfoList = [];
                }
                _findIndex(u827, v827) {
                    return u827.findIndex(x827 => x827.audio === v827);
                }
                _tryAddPlaying(r827, s827) {
                    const t827 = this._findIndex(r827, s827);
                    return t827 > -1 ? (r827[t827].playTime = performance.now(), !1) : (r827.push({
                        audio: s827,
                        playTime: performance.now()
                    }), !0);
                }
                addPlaying(q827) {
                    q827 instanceof r216 ? this._tryAddPlaying(this._audioPlayerInfoList, q827) : this._tryAddPlaying(this._oneShotAudioInfoList, q827);
                }
                _tryRemovePlaying(n827, o827) {
                    const p827 = this._findIndex(n827, o827);
                    return -1 !== p827 && (i127(n827, p827), !0);
                }
                removePlaying(m827) {
                    m827 instanceof r216 ? this._tryRemovePlaying(this._audioPlayerInfoList, m827) : this._tryRemovePlaying(this._oneShotAudioInfoList, m827);
                }
                discardOnePlayingIfNeeded() {
                    if (this._audioPlayerInfoList.length + this._oneShotAudioInfoList.length < r216.maxAudioChannel)
                        return;
                    let h827;
                    this._oneShotAudioInfoList.length > 0 ? this._oneShotAudioInfoList.forEach(l827 => {
                        (!h827 || l827.playTime < h827.playTime) && (h827 = l827);
                    }) : this._audioPlayerInfoList.forEach(k827 => {
                        (!h827 || k827.playTime < h827.playTime) && (h827 = k827);
                    }), h827 && (h827.audio.stop(), this.removePlaying(h827.audio));
                }
                pause() {
                    this._oneShotAudioInfoList.forEach(g827 => {
                        g827.audio.stop();
                    }), this._audioPlayerInfoList.forEach(e827 => {
                        e827.audio.pause().catch(() => { });
                    });
                }
                resume() {
                    this._audioPlayerInfoList.forEach(a827 => {
                        a827.audio.play().catch(() => { });
                    });
                }
            }();
            var y216, z216, a217, b217, c217, d217, e217, f217, g217, h217;
            const i217 = "audiosource-loaded";
            var j217, k217;
            !function (y826) {
                y826.STARTED = "started", y826.ENDED = "ended";
            }(j217 || (j217 = {})), function (x826) {
                x826.PLAY = "play", x826.STOP = "stop", x826.PAUSE = "pause", x826.SEEK = "seek";
            }(k217 || (k217 = {}));
            let l217, m217, n217, o217, p217, q217, r217, s217, t217, u217, v217, w217, x217, y217, z217, a218 = (y216 = e151("cc.AudioSource"), z216 = a131(w216), a217 = a131(w216), y216(((h217 = class t extends a165 {
                constructor(...w826) {
                    super(...w826), this._clip = d217 && d217(), this._player = null, this._hasRegisterListener = !1, this._loop = e217 && e217(), this._playOnAwake = f217 && f217(), this._volume = g217 && g217(), this._cachedCurrentTime = -1, this._operationsBeforeLoading = [], this._isLoaded = !1, this._lastSetClip = null;
                }
                static get maxAudioChannel() {
                    return r216.maxAudioChannel;
                }
                _resetPlayer() {
                    this._player && (x216.removePlaying(this._player), this._unregisterListener(), this._player.destroy(), this._player = null);
                }
                set clip(v826) {
                    v826 !== this._clip && (this._clip = v826, this._syncPlayer());
                }
                get clip() {
                    return this._clip;
                }
                _syncPlayer() {
                    const q826 = this._clip;
                    if (this._lastSetClip !== q826)
                        return q826 ? void (q826._nativeAsset ? (this._isLoaded = !1, this._lastSetClip = q826, this._operationsBeforeLoading.length = 0, r216.load(q826._nativeAsset.url, {
                            audioLoadMode: q826.loadMode
                        }).then(t826 => {
                            var u826;
                            this._lastSetClip === q826 ? (this._isLoaded = !0, this._resetPlayer(), this._player = t826, this._syncStates(), null === (u826 = this.node) || void 0 === u826 || u826.emit(i217)) : t826.destroy();
                        }).catch(() => { })) : console.error("Invalid audio clip")) : (this._lastSetClip = null, void this._resetPlayer());
                }
                _registerListener() {
                    if (!this._hasRegisterListener && this._player) {
                        const l826 = this._player;
                        l826.onEnded(() => {
                            var p826;
                            x216.removePlaying(l826), null === (p826 = this.node) || void 0 === p826 || p826.emit(j217.ENDED, this);
                        }), l826.onInterruptionBegin(() => {
                            x216.removePlaying(l826);
                        }), l826.onInterruptionEnd(() => {
                            this._player === l826 && x216.addPlaying(l826);
                        }), this._hasRegisterListener = !0;
                    }
                }
                _unregisterListener() {
                    this._player && this._hasRegisterListener && (this._player.offEnded(), this._player.offInterruptionBegin(), this._player.offInterruptionEnd(), this._hasRegisterListener = !1);
                }
                set loop(k826) {
                    this._loop = k826, this._player && (this._player.loop = k826);
                }
                get loop() {
                    return this._loop;
                }
                set playOnAwake(j826) {
                    this._playOnAwake = j826;
                }
                get playOnAwake() {
                    return this._playOnAwake;
                }
                set volume(i826) {
                    Number.isNaN(i826) ? console.warn("illegal audio volume!") : (i826 = x128(i826, 0, 1), this._player ? (this._player.volume = i826, this._volume = this._player.volume) : this._volume = i826);
                }
                get volume() {
                    return this._volume;
                }
                onLoad() {
                    this._syncPlayer();
                }
                onEnable() {
                    this._playOnAwake && !this.playing && this.play();
                }
                onDisable() {
                    const h826 = this._getRootNode();
                    null != h826 && h826._persistNode || this.pause();
                }
                onDestroy() {
                    this.stop(), this.clip = null;
                }
                getPCMData(b826) {
                    return new Promise(d826 => {
                        if (0 !== b826 && 1 !== b826)
                            return console.warn("Only support channel index 0 or 1 to get buffer"), void d826(void 0);
                        var e826;
                        this._player ? d826(this._player.getPCMData(b826)) : null === (e826 = this.node) || void 0 === e826 || e826.once(i217, () => {
                            var g826;
                            d826(null === (g826 = this._player) || void 0 === g826 ? void 0 : g826.getPCMData(b826));
                        });
                    });
                }
                getSampleRate() {
                    return new Promise(y825 => {
                        var z825;
                        this._player ? y825(this._player.sampleRate) : null === (z825 = this.node) || void 0 === z825 || z825.once(i217, () => {
                            y825(this._player.sampleRate);
                        });
                    });
                }
                _getRootNode() {
                    var q825, r825;
                    let s825 = this.node, t825 = null === (q825 = s825) || void 0 === q825 || null === (r825 = q825.parent) || void 0 === r825 ? void 0 : r825.parent;
                    for (; t825;) {
                        var u825, v825, w825;
                        s825 = null === (u825 = s825) || void 0 === u825 ? void 0 : u825.parent, t825 = null === (v825 = s825) || void 0 === v825 || null === (w825 = v825.parent) || void 0 === w825 ? void 0 : w825.parent;
                    }
                    return s825;
                }
                play() {
                    if (!this._isLoaded && this.clip)
                        return void this._operationsBeforeLoading.push({
                            op: k217.PLAY,
                            params: null
                        });
                    var k825;
                    this._registerListener(), x216.discardOnePlayingIfNeeded(), this.state === g216.PLAYING && (null === (k825 = this._player) || void 0 === k825 || k825.stop().catch(() => { }));
                    const l825 = this._player;
                    l825 && (l825.play().then(() => {
                        var p825;
                        null === (p825 = this.node) || void 0 === p825 || p825.emit(j217.STARTED, this);
                    }).catch(() => {
                        x216.removePlaying(l825);
                    }), x216.addPlaying(l825));
                }
                pause() {
                    var i825;
                    this._isLoaded || !this.clip ? null === (i825 = this._player) || void 0 === i825 || i825.pause().catch(() => { }) : this._operationsBeforeLoading.push({
                        op: k217.PAUSE,
                        params: null
                    });
                }
                stop() {
                    this._isLoaded || !this.clip ? this._player && (this._player.stop().catch(() => { }), x216.removePlaying(this._player)) : this._operationsBeforeLoading.push({
                        op: k217.STOP,
                        params: null
                    });
                }
                playOneShot(a825, b825 = 1) {
                    if (!a825._nativeAsset)
                        return void console.error("Invalid audio clip");
                    let c825;
                    r216.loadOneShotAudio(a825._nativeAsset.url, this._volume * b825, {
                        audioLoadMode: a825.loadMode
                    }).then(f825 => {
                        c825 = f825, x216.discardOnePlayingIfNeeded(), f825.onEnd = () => {
                            x216.removePlaying(f825);
                        }, f825.play(), x216.addPlaying(f825);
                    }).catch(() => {
                        c825 && x216.removePlaying(c825);
                    });
                }
                _syncStates() {
                    this._player && (this._player.loop = this._loop, this._player.volume = this._volume, this._operationsBeforeLoading.forEach(x824 => {
                        var y824;
                        x824.op === k217.SEEK ? (this._cachedCurrentTime = x824.params && x824.params[0], this._player && this._player.seek(this._cachedCurrentTime).catch(() => { })) : null === (y824 = this[x824.op]) || void 0 === y824 || y824.call(this);
                    }), this._operationsBeforeLoading.length = 0);
                }
                set currentTime(t824) {
                    var u824;
                    Number.isNaN(t824) ? console.warn("illegal audio time!") : (t824 = x128(t824, 0, this.duration), this._isLoaded || !this.clip ? (this._cachedCurrentTime = t824, null === (u824 = this._player) || void 0 === u824 || u824.seek(this._cachedCurrentTime).catch(() => { })) : this._operationsBeforeLoading.push({
                        op: k217.SEEK,
                        params: [t824]
                    }));
                }
                get currentTime() {
                    return this._player ? this._player.currentTime : this._cachedCurrentTime < 0 ? 0 : this._cachedCurrentTime;
                }
                get duration() {
                    var r824, s824;
                    return null !== (r824 = null === (s824 = this._clip) || void 0 === s824 ? void 0 : s824.getDuration()) && void 0 !== r824 ? r824 : this._player ? this._player.duration : 0;
                }
                get state() {
                    return this._player ? this._player.state : g216.INIT;
                }
                get playing() {
                    return this.state === t.AudioState.PLAYING;
                }
            }).AudioState = g216, h217.EventType = j217, d217 = p130((c217 = h217).prototype, "_clip", [z216], function () {
                return null;
            }), e217 = p130(c217.prototype, "_loop", [j151], function () {
                return !1;
            }), f217 = p130(c217.prototype, "_playOnAwake", [j151], function () {
                return !0;
            }), g217 = p130(c217.prototype, "_volume", [j151], function () {
                return 1;
            }), i125(c217.prototype, "clip", [a217], Object.getOwnPropertyDescriptor(c217.prototype, "clip"), c217.prototype), b217 = c217)) || b217);
            g125({
                AudioSource: a218,
                AudioSourceComponent: a218
            }), k144(w216, "AudioClip", [{
                    name: "PlayingState",
                    newName: "AudioState",
                    target: a218,
                    targetName: "AudioSource"
                }]), m144(w216.prototype, "AudioClip.prototype", ["state", "play", "pause", "stop", "playOneShot", "setCurrentTime", "setVolume", "setLoop", "getCurrentTime", "getVolume", "getLoop"].map(q824 => ({
                name: q824,
                suggest: `please use AudioSource.prototype.${q824} instead`
            }))), s143.AudioSourceComponent = a218, a127(a218, "cc.AudioSourceComponent"), s143.log = p125, s143.warn = q125, s143.error = r125, s143.assert = s125, s143._throw = v125, s143.logID = x125, s143.warnID = y125, s143.errorID = z125, s143.assertID = a126, s143.debug = j144, s143.path = {
                join: h133,
                extname: i133,
                mainFileName: j133,
                basename: k133,
                dirname: l133,
                changeExtname: m133,
                changeBasename: n133,
                _normalize: o133,
                stripSep: p133,
                get sep() {
                    return q133();
                }
            }, function (p824) {
                p824[p824.DIRECTIONAL = 0] = "DIRECTIONAL", p824[p824.SPHERE = 1] = "SPHERE", p824[p824.SPOT = 2] = "SPOT", p824[p824.POINT = 3] = "POINT", p824[p824.RANGED_DIRECTIONAL = 4] = "RANGED_DIRECTIONAL", p824[p824.UNKNOWN = 5] = "UNKNOWN";
            }(l217 || (l217 = {})), function (o824) {
                o824[o824.PER_INSTANCE = 0] = "PER_INSTANCE", o824[o824.PER_BATCH = 1] = "PER_BATCH", o824[o824.PER_PHASE = 2] = "PER_PHASE", o824[o824.PER_PASS = 3] = "PER_PASS", o824[o824.COUNT = 4] = "COUNT";
            }(m217 || (m217 = {})), function (n824) {
                n824[n824.CONSTANTS = 0] = "CONSTANTS", n824[n824.CBV = 1] = "CBV", n824[n824.UAV = 2] = "UAV", n824[n824.SRV = 3] = "SRV", n824[n824.TABLE = 4] = "TABLE", n824[n824.SSV = 5] = "SSV";
            }(n217 || (n217 = {})), function (m824) {
                m824[m824.MANAGED = 0] = "MANAGED", m824[m824.MEMORYLESS = 1] = "MEMORYLESS", m824[m824.PERSISTENT = 2] = "PERSISTENT", m824[m824.EXTERNAL = 3] = "EXTERNAL", m824[m824.BACKBUFFER = 4] = "BACKBUFFER";
            }(o217 || (o217 = {})), function (l824) {
                l824[l824.NONE = 0] = "NONE", l824[l824.OPAQUE = 1] = "OPAQUE", l824[l824.MASK = 2] = "MASK", l824[l824.BLEND = 3] = "BLEND", l824[l824.RENDER_OPAQUE = 1] = "RENDER_OPAQUE", l824[l824.RENDER_CUTOUT = 2] = "RENDER_CUTOUT", l824[l824.RENDER_TRANSPARENT = 3] = "RENDER_TRANSPARENT";
            }(p217 || (p217 = {})), function (k824) {
                k824[k824.BUFFER = 0] = "BUFFER", k824[k824.TEXTURE1D = 1] = "TEXTURE1D", k824[k824.TEXTURE2D = 2] = "TEXTURE2D", k824[k824.TEXTURE3D = 3] = "TEXTURE3D";
            }(q217 || (q217 = {})), function (j824) {
                j824[j824.NONE = 0] = "NONE", j824[j824.UNIFORM = 1] = "UNIFORM", j824[j824.INDIRECT = 2] = "INDIRECT", j824[j824.STORAGE = 4] = "STORAGE", j824[j824.SAMPLED = 8] = "SAMPLED", j824[j824.COLOR_ATTACHMENT = 16] = "COLOR_ATTACHMENT", j824[j824.DEPTH_STENCIL_ATTACHMENT = 32] = "DEPTH_STENCIL_ATTACHMENT", j824[j824.INPUT_ATTACHMENT = 64] = "INPUT_ATTACHMENT", j824[j824.SHADING_RATE = 128] = "SHADING_RATE", j824[j824.TRANSFER_SRC = 256] = "TRANSFER_SRC", j824[j824.TRANSFER_DST = 512] = "TRANSFER_DST";
            }(r217 || (r217 = {})), function (i824) {
                i824[i824.SYNC = 0] = "SYNC", i824[i824.ASYNC = 1] = "ASYNC";
            }(s217 || (s217 = {})), function (h824) {
                h824[h824.NONE = 0] = "NONE", h824[h824.OPAQUE = 1] = "OPAQUE", h824[h824.MASK = 2] = "MASK", h824[h824.BLEND = 4] = "BLEND", h824[h824.OPAQUE_OBJECT = 1] = "OPAQUE_OBJECT", h824[h824.CUTOUT_OBJECT = 2] = "CUTOUT_OBJECT", h824[h824.TRANSPARENT_OBJECT = 4] = "TRANSPARENT_OBJECT", h824[h824.SHADOW_CASTER = 8] = "SHADOW_CASTER", h824[h824.UI = 16] = "UI", h824[h824.DEFAULT_LIGHTING = 32] = "DEFAULT_LIGHTING", h824[h824.VOLUMETRIC_LIGHTING = 64] = "VOLUMETRIC_LIGHTING", h824[h824.CLUSTERED_LIGHTING = 128] = "CLUSTERED_LIGHTING", h824[h824.PLANAR_SHADOW = 256] = "PLANAR_SHADOW", h824[h824.GEOMETRY = 512] = "GEOMETRY", h824[h824.PROFILER = 1024] = "PROFILER", h824[h824.DRAW_INSTANCING = 2048] = "DRAW_INSTANCING", h824[h824.DRAW_NON_INSTANCING = 4096] = "DRAW_NON_INSTANCING", h824[h824.REFLECTION_PROBE = 8192] = "REFLECTION_PROBE", h824[h824.GPU_DRIVEN = 16384] = "GPU_DRIVEN", h824[h824.NON_BUILTIN = 32768] = "NON_BUILTIN", h824[h824.ALL = 4294967295] = "ALL";
            }(t217 || (t217 = {})), function (g824) {
                g824[g824.NONE = 0] = "NONE", g824[g824.DEFAULT = 1] = "DEFAULT", g824[g824.CLUSTERED = 2] = "CLUSTERED";
            }(u217 || (u217 = {})), function (f824) {
                f824[f824.RENDER_TARGET = 0] = "RENDER_TARGET", f824[f824.DEPTH_STENCIL = 1] = "DEPTH_STENCIL", f824[f824.SHADING_RATE = 2] = "SHADING_RATE";
            }(v217 || (v217 = {})), function (e824) {
                e824[e824.READ = 0] = "READ", e824[e824.READ_WRITE = 1] = "READ_WRITE", e824[e824.WRITE = 2] = "WRITE";
            }(w217 || (w217 = {})), function (d824) {
                d824[d824.NONE = 0] = "NONE", d824[d824.FLOAT_TYPE = 1] = "FLOAT_TYPE", d824[d824.INT_TYPE = 2] = "INT_TYPE";
            }(x217 || (x217 = {}));
            class b218 {
                constructor(z823 = null, a824 = 0, b824 = !1, c824 = null) {
                    this.light = void 0, this.probe = void 0, this.level = void 0, this.culledByLight = void 0, this.light = z823, this.probe = c824, this.level = a824, this.culledByLight = b824;
                }
                reset(v823 = null, w823 = 0, x823 = !1, y823 = null) {
                    this.light = v823, this.probe = y823, this.level = w823, this.culledByLight = x823;
                }
            }
            !function (u823) {
                u823[u823.UNIFORM_BUFFER = 0] = "UNIFORM_BUFFER", u823[u823.DYNAMIC_UNIFORM_BUFFER = 1] = "DYNAMIC_UNIFORM_BUFFER", u823[u823.SAMPLER_TEXTURE = 2] = "SAMPLER_TEXTURE", u823[u823.SAMPLER = 3] = "SAMPLER", u823[u823.TEXTURE = 4] = "TEXTURE", u823[u823.STORAGE_BUFFER = 5] = "STORAGE_BUFFER", u823[u823.DYNAMIC_STORAGE_BUFFER = 6] = "DYNAMIC_STORAGE_BUFFER", u823[u823.STORAGE_IMAGE = 7] = "STORAGE_IMAGE", u823[u823.INPUT_ATTACHMENT = 8] = "INPUT_ATTACHMENT";
            }(y217 || (y217 = {})), function (t823) {
                t823[t823.NONE = 0] = "NONE", t823[t823.COLOR = 1] = "COLOR", t823[t823.DEPTH = 2] = "DEPTH", t823[t823.STENCIL = 4] = "STENCIL";
            }(z217 || (z217 = {}));
            class c218 {
                constructor(m823 = new Uint8Array(0), n823 = "", o823 = 4294967295, p823 = 4294967295, q823 = 0, r823 = 0, s823 = 0) {
                    this.source = void 0, this.target = void 0, this.mipLevels = void 0, this.numSlices = void 0, this.targetMostDetailedMip = void 0, this.targetFirstSlice = void 0, this.targetPlaneSlice = void 0, this.source = m823, this.target = n823, this.mipLevels = o823, this.numSlices = p823, this.targetMostDetailedMip = q823, this.targetFirstSlice = r823, this.targetPlaneSlice = s823;
                }
                reset(g823 = "", h823 = 4294967295, i823 = 4294967295, j823 = 0, k823 = 0, l823 = 0) {
                    this.target = g823, this.mipLevels = h823, this.numSlices = i823, this.targetMostDetailedMip = j823, this.targetFirstSlice = k823, this.targetPlaneSlice = l823;
                }
            }
            new s159(), new l159();
            const d218 = new i150(0, 0, 0, .5, .5, .5), e218 = new i150();
            let f218;
            function p140(p822, q822) {
                const r822 = p822.pipelineSceneData, s822 = r822.validPunctualLights;
                s822.length = 0;
                const t822 = s148.create(0, 0, 0, 1), { spotLights: u822 } = q822.scene;
                for (let e823 = 0; e823 < u822.length; e823++) {
                    const f823 = u822[e823];
                    f823.baked && !q822.node.scene.globals.disableLightmap || (s148.set(t822, f823.position.x, f823.position.y, f823.position.z, f823.range), v149.sphereFrustum(t822, q822.frustum) && s822.push(f823));
                }
                const { sphereLights: v822 } = q822.scene;
                for (let c823 = 0; c823 < v822.length; c823++) {
                    const d823 = v822[c823];
                    d823.baked && !q822.node.scene.globals.disableLightmap || (s148.set(t822, d823.position.x, d823.position.y, d823.position.z, d823.range), v149.sphereFrustum(t822, q822.frustum) && s822.push(d823));
                }
                const { pointLights: w822 } = q822.scene;
                for (let a823 = 0; a823 < w822.length; a823++) {
                    const b823 = w822[a823];
                    b823.baked || (s148.set(t822, b823.position.x, b823.position.y, b823.position.z, b823.range), v149.sphereFrustum(t822, q822.frustum) && s822.push(b823));
                }
                const { rangedDirLights: x822 } = q822.scene;
                for (let y822 = 0; y822 < x822.length; y822++) {
                    const z822 = x822[y822];
                    i150.transform(e218, d218, z822.node.getWorldMatrix()), v149.aabbFrustum(e218, q822.frustum) && s822.push(z822);
                }
                r822.validPunctualLights = s822;
            }
            !function (o822) {
                o822[o822.NONE = 0] = "NONE", o822[o822.FXAA = 1] = "FXAA", o822[o822.FXAAHQ = 2] = "FXAAHQ";
            }(f218 || (f218 = {}));
            const g218 = [];
            function q140(n822) {
                return g218.includes(n822) || g218.push(n822), g218.indexOf(n822);
            }
            function r140(k822, l822) {
                let m822 = o158.CLEAR;
                return k822 & d159.COLOR || l822 !== v217.RENDER_TARGET || (m822 = k822 & n176 ? o158.CLEAR : o158.LOAD), (k822 & d159.DEPTH_STENCIL) !== d159.DEPTH_STENCIL && l822 === v217.DEPTH_STENCIL && (k822 & d159.DEPTH || (m822 = o158.LOAD), k822 & d159.STENCIL || (m822 = o158.LOAD)), m822;
            }
            function s140(z821, a822, b822, c822 = null, d822 = 0, e822) {
                e822 = e822 || new l159();
                const f822 = z821 ? z821.viewport : new l159(0, 0, 1, 1), g822 = a822, h822 = b822;
                if (e822.x = f822.x * g822, e822.y = f822.y * h822, e822.width = f822.width * g822, e822.height = f822.height * h822, c822)
                    switch (c822.type) {
                        case l217.DIRECTIONAL:
                            {
                                const i822 = c822;
                                if (i822.shadowFixedArea || i822.csmLevel === m194.LEVEL_1)
                                    e822.x = 0, e822.y = 0, e822.width = g822, e822.height = h822;
                                else {
                                    const j822 = s143.director.root.device.capabilities.screenSpaceSignY;
                                    e822.x = d822 % 2 * .5 * g822, e822.y = j822 > 0 ? .5 * (1 - Math.floor(d822 / 2)) * h822 : .5 * Math.floor(d822 / 2) * h822, e822.width = .5 * g822, e822.height = .5 * h822;
                                }
                                break;
                            }
                        case l217.SPOT:
                            e822.x = 0, e822.y = 0, e822.width = g822, e822.height = h822;
                    }
                return e822;
            }
            class h218 {
                _init() {
                    this.postMaterial = new c178(), this.postMaterial.name = "builtin-post-process-material", this.postMaterial.initialize({
                        effectName: "pipeline/post-process",
                        defines: {
                            ANTIALIAS_TYPE: this.antiAliasing
                        }
                    });
                    for (let y821 = 0; y821 < this.postMaterial.passes.length; ++y821)
                        this.postMaterial.passes[y821].tryCompile();
                }
                constructor(x821 = f218.NONE) {
                    this.antiAliasing = f218.NONE, this.antiAliasing = x821, this._init();
                }
            }
            class i218 {
                constructor() {
                    this.shadowEnabled = !1, this.mainLightShadowNames = new Array(), this.spotLightShadowNames = new Array(), this.validLights = [];
                }
                reset() {
                    this.shadowEnabled = !1, this.mainLightShadowNames.length = 0, this.spotLightShadowNames.length = 0, this.validLights.length = 0;
                }
            }
            new i218();
            class j218 {
                _init() {
                    this.deferredLightingMaterial = new c178(), this.deferredLightingMaterial.name = "builtin-deferred-material", this.deferredLightingMaterial.initialize({
                        effectName: "pipeline/deferred-lighting",
                        defines: {
                            CC_ENABLE_CLUSTERED_LIGHT_CULLING: this.enableCluster,
                            CC_RECEIVE_SHADOW: 1
                        }
                    });
                    for (let w821 = 0; w821 < this.deferredLightingMaterial.passes.length; ++w821)
                        this.deferredLightingMaterial.passes[w821].tryCompile();
                }
                constructor(v821) {
                    this.enableCluster = void 0, this.enableCluster = v821 ? 1 : 0, this._init();
                }
            }
            new w146(), new w146(), new v146(), new v146(), new s147();
            class k218 {
                _initMaterial(r821, s821) {
                    const t821 = new c178();
                    t821.name = r821, t821.initialize({
                        effectName: s821
                    });
                    for (let u821 = 0; u821 < t821.passes.length; ++u821)
                        t821.passes[u821].tryCompile();
                    return t821;
                }
                _init() {
                    this.clusterBuildCS = this._initMaterial("builtin-cluster-build-cs-material", "pipeline/cluster-build"), this.clusterLightCullingCS = this._initMaterial("builtin-cluster-culling-cs-material", "pipeline/cluster-culling"), this.dispatchX = 16 / this.clusters_x_threads, this.dispatchY = 8 / this.clusters_y_threads, this.dispatchZ = 24 / this.clusters_z_threads;
                }
                constructor() {
                    this.clusters_x_threads = 16, this.clusters_y_threads = 8, this.clusters_z_threads = 1, this.dispatchX = 1, this.dispatchY = 1, this.dispatchZ = 1, this._init();
                }
            }
            let l218 = null;
            function t140(c819, d819) {
                !function (b820, c820) {
                    p140(c820, b820);
                    const d820 = c820.pipelineSceneData, e820 = 80 * j129(Math.max(d820.validPunctualLights.length, 1)), f820 = q140(b820), g820 = `clusterLightBuffer${f820}`, h820 = `globalIndexBuffer${f820}`, i820 = c820;
                    i820.containsResource(h820) || i820.addStorageBuffer(h820, t157.UNKNOWN, 4, o217.PERSISTENT), i820.containsResource(g820) || i820.addStorageBuffer(g820, t157.UNKNOWN, e820, o217.PERSISTENT), i820.updateStorageBuffer(g820, e820);
                    const j820 = function (o820, p820, q820, r820) {
                        const s820 = new ArrayBuffer(o820), t820 = new Float32Array(s820), u820 = r820.pipelineSceneData, v820 = q820.exposure;
                        let w820 = 0;
                        for (const x820 of u820.validPunctualLights) {
                            const y820 = 20 * w820, z820 = y820 + 0, a821 = y820 + 4, b821 = y820 + 8, c821 = y820 + 12, d821 = y820 + 16;
                            let e821, f821 = 0, g821 = 0;
                            if (x820.type === l217.POINT) {
                                const q821 = x820;
                                e821 = q821.position, g821 = q821.luminanceLDR, f821 = q821.luminanceHDR, t820[b821] = 0, t820[b821 + 1] = q821.range, t820[b821 + 2] = 0, t820[b821 + 3] = 0;
                            }
                            else if (x820.type === l217.SPHERE) {
                                const p821 = x820;
                                e821 = p821.position, g821 = p821.luminanceLDR, f821 = p821.luminanceHDR, t820[b821] = p821.size, t820[b821 + 1] = p821.range, t820[b821 + 2] = 0, t820[b821 + 3] = 0;
                            }
                            else if (x820.type === l217.SPOT) {
                                const n821 = x820;
                                e821 = n821.position, g821 = n821.luminanceLDR, f821 = n821.luminanceHDR, t820[b821] = n821.size, t820[b821 + 1] = n821.range, t820[b821 + 2] = n821.spotAngle, t820[b821 + 3] = 0;
                                const o821 = n821.direction;
                                t820[c821] = o821.x, t820[c821 + 1] = o821.y, t820[c821 + 2] = o821.z, t820[c821 + 3] = 0;
                            }
                            else if (x820.type === l217.RANGED_DIRECTIONAL) {
                                const j821 = x820;
                                e821 = j821.position, g821 = j821.illuminanceLDR, f821 = j821.illuminanceHDR;
                                const k821 = j821.right;
                                t820[b821] = k821.x, t820[b821 + 1] = k821.y, t820[b821 + 2] = k821.z, t820[b821 + 3] = 0;
                                const l821 = j821.direction;
                                t820[c821] = l821.x, t820[c821 + 1] = l821.y, t820[c821 + 2] = l821.z, t820[c821 + 3] = 0;
                                const m821 = j821.scale;
                                t820[d821] = .5 * m821.x, t820[d821 + 1] = .5 * m821.y, t820[d821 + 2] = .5 * m821.z, t820[d821 + 3] = 0;
                            }
                            t820[z820] = e821.x, t820[z820 + 1] = e821.y, t820[z820 + 2] = e821.z, t820[z820 + 3] = x820.type;
                            const h821 = x820.color;
                            if (x820.useColorTemperature) {
                                const i821 = x820.colorTemperatureRGB;
                                t820[a821] = h821.x * i821.x, t820[a821 + 1] = h821.y * i821.y, t820[a821 + 2] = h821.z * i821.z;
                            }
                            else
                                t820[a821] = h821.x, t820[a821 + 1] = h821.y, t820[a821 + 2] = h821.z;
                            t820[a821 + 3] = u820.isHDR ? f821 * v820 * 1e4 : g821, w820++;
                        }
                        return t820[15] = u820.validPunctualLights.length, s820;
                    }(e820, 0, b820, c820), k820 = new ArrayBuffer(4);
                    new Uint32Array(k820)[0] = 0;
                    const l820 = new c218(new Uint8Array(j820), g820), m820 = new c218(new Uint8Array(k820), h820);
                    i820.addUploadPass([l820, m820]);
                }(c819, d819);
                const e819 = d819;
                l218 || (l218 = new k218()), function (u819, v819, w819) {
                    const x819 = `clusterBuffer${q140(u819)}`;
                    w819.containsResource(x819) || w819.addStorageBuffer(x819, t157.UNKNOWN, 98304, o217.MANAGED), w819.updateStorageBuffer(x819, 98304);
                    const y819 = w819.addComputePass("cluster-build-cs");
                    y819.addStorageBuffer(x819, w217.WRITE, "b_clustersBuffer"), y819.addQueue().addDispatch(v819.dispatchX, v819.dispatchY, v819.dispatchZ, v819.clusterBuildCS, 0);
                    const z819 = u819.width * w819.pipelineSceneData.shadingScale, a820 = u819.height * w819.pipelineSceneData.shadingScale;
                    "setCurrConstant" in y819 && y819.addConstant("CCConst", "cluster-build-cs"), y819.setVec4("cc_nearFar", new v146(u819.nearClip, u819.farClip, u819.getClipSpaceMinz(), 0)), y819.setVec4("cc_viewPort", new v146(0, 0, z819, a820)), y819.setVec4("cc_workGroup", new v146(16, 8, 24, 0)), y819.setMat4("cc_matView", u819.matView), y819.setMat4("cc_matProjInv", u819.matProjInv);
                }(c819, l218, e819), function (i819, j819, k819) {
                    const l819 = q140(i819), m819 = `clusterBuffer${l819}`, n819 = `clusterLightBuffer${l819}`, o819 = `globalIndexBuffer${l819}`, p819 = `clusterLightIndicesBuffer${l819}`, q819 = `clusterLightGridBuffer${l819}`;
                    k819.containsResource(p819) || k819.addStorageBuffer(p819, t157.UNKNOWN, 2457600, o217.MANAGED), k819.containsResource(q819) || k819.addStorageBuffer(q819, t157.UNKNOWN, 49152, o217.MANAGED);
                    const r819 = k819.addComputePass("cluster-culling-cs");
                    r819.addStorageBuffer(n819, w217.READ, "b_ccLightsBuffer"), r819.addStorageBuffer(m819, w217.READ, "b_clustersBuffer"), r819.addStorageBuffer(p819, w217.WRITE, "b_clusterLightIndicesBuffer"), r819.addStorageBuffer(q819, w217.WRITE, "b_clusterLightGridBuffer"), r819.addStorageBuffer(o819, w217.WRITE, "b_globalIndexBuffer"), r819.addQueue().addDispatch(j819.dispatchX, j819.dispatchY, j819.dispatchZ, j819.clusterLightCullingCS, 0);
                    const s819 = i819.width * k819.pipelineSceneData.shadingScale, t819 = i819.height * k819.pipelineSceneData.shadingScale;
                    "setCurrConstant" in r819 && r819.addConstant("CCConst", "cluster-build-cs"), r819.setVec4("cc_nearFar", new v146(i819.nearClip, i819.farClip, i819.getClipSpaceMinz(), 0)), r819.setVec4("cc_viewPort", new v146(s819, t819, s819, t819)), r819.setVec4("cc_workGroup", new v146(16, 8, 24, 0)), r819.setMat4("cc_matView", i819.matView), r819.setMat4("cc_matProjInv", i819.matProjInv);
                }(c819, l218, e819);
            }
            function u140(y818) {
                const z818 = y818.scene.batches;
                for (let a819 = 0; z818 && a819 < z818.length; a819++) {
                    const b819 = z818[a819];
                    if (y818.visibility & b819.visFlags)
                        return !0;
                }
                return !1;
            }
            class m218 {
                constructor(t818, u818, v818, w818, x818) {
                    this.camera = void 0, this.id = 4294967295, this.windowID = 4294967295, this.width = 0, this.height = 0, this.camera = t818, this.id = u818, this.windowID = v818, this.width = w818, this.height = x818;
                }
            }
            const n218 = new Map(), o218 = new Map();
            function v140(r818) {
                let s818 = o218.get(r818.window);
                return void 0 === s818 && (s818 = o218.size, o218.set(r818.window, s818)), s818;
            }
            function w140(i818, j818, k818, l818) {
                let m818 = n218.get(j818);
                if (void 0 !== m818) {
                    let o818 = j818.window.width, p818 = j818.window.height;
                    0 === o818 && (o818 = 1), 0 === p818 && (p818 = 1);
                    const q818 = v140(j818);
                    return m818.width = o818, m818.height = p818, m818.windowID = q818, l818(i818, m818), m818;
                }
                const n818 = v140(j818);
                return m818 = new m218(j818, n218.size, n818, j818.window.width ? j818.window.width : 1, j818.window.height ? j818.window.height : 1), k818(i818, m818), n218.set(j818, m818), m818;
            }
            function x140(z817, a818, b818, c818) {
                const d818 = b818, e818 = c818, f818 = a818, g818 = z817.device;
                if (!z817.containsResource(f818)) {
                    const h818 = i135(g818) ? t157.R32F : t157.RGBA8;
                    z817.addRenderTarget(f818, h818, d818, e818, o217.MANAGED), z817.addDepthStencil(`${f818}Depth`, t157.DEPTH_STENCIL, d818, e818, o217.MANAGED);
                }
                z817.updateRenderTarget(f818, d818, e818), z817.updateDepthStencil(`${f818}Depth`, d818, e818);
            }
            const p218 = new i218();
            function y140(h817, i817) {
                const j817 = i817.camera;
                p140(h817, j817);
                const k817 = h817, l817 = k817.pipelineSceneData.shadows, m817 = h817.pipelineSceneData.validPunctualLights, n817 = h817.pipelineSceneData.shadows;
                if (p218.reset(), !l817.enabled || l817.type !== n177.ShadowMap)
                    return p218;
                p218.shadowEnabled = !0;
                const o817 = p218.validLights;
                let p817 = 0, q817 = 0;
                for (; p817 < l817.maxReceived && q817 < m817.length;) {
                    const y817 = m817[q817];
                    y817.type === b177.SPOT && y817.shadowEnabled && (o817.push(y817), p817++), q817++;
                }
                const { mainLight: r817 } = j817.scene, s817 = n817.size.x, t817 = n817.size.y;
                if (r817 && r817.shadowEnabled)
                    if (p218.mainLightShadowNames[0] = `MainLightShadow${i817.id}`, r817.shadowFixedArea)
                        x140(h817, p218.mainLightShadowNames[0], s817, t817);
                    else {
                        const w817 = k817.pipelineSceneData.csmSupported ? r817.csmLevel : 1;
                        p218.mainLightShadowNames[0] = `MainLightShadow${i817.id}`;
                        for (let x817 = 0; x817 < w817; x817++)
                            x140(h817, p218.mainLightShadowNames[0], s817, t817);
                    }
                for (let u817 = 0; u817 < o817.length; u817++) {
                    o817[u817];
                    const v817 = `SpotLightShadow${u817.toString()}${i817.id}`;
                    p218.spotLightShadowNames[u817] = v817, x140(h817, p218.spotLightShadowNames[u817], s817, t817);
                }
                return p218;
            }
            const q218 = y140;
            let r218;
            function z140(v816, w816, x816, y816, z816, a817, b817) {
                const c817 = a817, d817 = b817, e817 = s140(x816, a817, b817, y816, z816);
                a817 = e817.width, b817 = e817.height;
                const f817 = v816;
                z816 || (r218 = w816.addRenderPass(a817, b817, "default"), r218.name = v816, r218.setViewport(new s159(0, 0, c817, d817)), r218.addRenderTarget(f817, o158.CLEAR, p158.STORE, new t159(1, 1, 1, x816.clearColor.w)), r218.addDepthStencil(`${f817}Depth`, o158.CLEAR, p158.DISCARD, x816.clearDepth, x816.clearStencil, d159.DEPTH_STENCIL));
                const g817 = r218.addQueue(p217.RENDER_OPAQUE, "shadow-caster");
                g817.addSceneOfCamera(x816, new b218(y816, z816), t217.SHADOW_CASTER), g817.setViewport(new s159(e817.x, e817.y, e817.width, e817.height));
            }
            function a141(j816, k816) {
                if (!p218.shadowEnabled)
                    return;
                const l816 = k816.camera, m816 = j816.pipelineSceneData.shadows, n816 = m816.size.x, o816 = m816.size.y, { mainLight: p816 } = l816.scene;
                if (p816 && p816.shadowEnabled)
                    if (p218.mainLightShadowNames[0] = `MainLightShadow${k816.id}`, p816.shadowFixedArea)
                        z140(p218.mainLightShadowNames[0], j816, l816, p816, 0, n816, o816);
                    else {
                        const t816 = j816.pipelineSceneData.csmSupported ? p816.csmLevel : 1;
                        p218.mainLightShadowNames[0] = `MainLightShadow${k816.id}`;
                        for (let u816 = 0; u816 < t816; u816++)
                            z140(p218.mainLightShadowNames[0], j816, l816, p816, u816, n816, o816);
                    }
                for (let q816 = 0; q816 < p218.validLights.length; q816++) {
                    const r816 = p218.validLights[q816], s816 = `SpotLightShadow${q816.toString()}${k816.id}`;
                    p218.spotLightShadowNames[q816] = s816, z140(s816, j816, l816, r816, 0, n816, o816);
                }
            }
            function b141(x815, y815, z815, a816) {
                const b816 = s140(y815.camera, y815.camera.window.width, y815.camera.window.height), c816 = b816.width, d816 = b816.height, e816 = x815.addRenderPass(c816, d816, "default"), f816 = y815.camera;
                e816.addRenderTarget(z815, o158.LOAD, p158.STORE), e816.addDepthStencil(s218.ds, o158.LOAD, p158.DISCARD);
                for (const i816 of p218.mainLightShadowNames)
                    x815.containsResource(i816) && e816.addTexture(i816, "cc_shadowMap");
                for (const h816 of p218.spotLightShadowNames)
                    x815.containsResource(h816) && e816.addTexture(h816, "cc_spotShadowMap");
                let g816 = t217.OPAQUE_OBJECT | t217.PLANAR_SHADOW | t217.CUTOUT_OBJECT | t217.DRAW_INSTANCING;
                g816 |= a816 ? t217.CLUSTERED_LIGHTING : t217.DEFAULT_LIGHTING, e816.addQueue(p217.RENDER_OPAQUE, "deferred-forward").addSceneOfCamera(f816, new b218(), g816), e816.addQueue(p217.RENDER_TRANSPARENT, "deferred-forward").addSceneOfCamera(f816, new b218(), t217.TRANSPARENT_OBJECT | t217.GEOMETRY);
            }
            function c141(k815, l815, m815 = !1, n815 = !0) {
                a141(k815, l815);
                const o815 = l815.id, p815 = s140(l815.camera, l815.camera.window.width, l815.camera.window.height), q815 = p815.width, r815 = p815.height, s815 = k815.addRenderPass(q815, r815, "default");
                s815.name = `ForwardPass${o815}`, s815.setViewport(new s159(p815.x, p815.y, q815, r815));
                for (const w815 of p218.mainLightShadowNames)
                    k815.containsResource(w815) && s815.addTexture(w815, "cc_shadowMap");
                for (const v815 of p218.spotLightShadowNames)
                    k815.containsResource(v815) && s815.addTexture(v815, "cc_spotShadowMap");
                const t815 = l815.camera;
                s815.addRenderTarget(`ForwardColor${l815.id}`, m815 ? o158.CLEAR : r140(t815.clearFlag, v217.RENDER_TARGET), p158.STORE, new t159(t815.clearColor.x, t815.clearColor.y, t815.clearColor.z, t815.clearColor.w)), s815.addDepthStencil(`ForwardDepthStencil${l815.id}`, m815 ? o158.CLEAR : r140(t815.clearFlag, v217.DEPTH_STENCIL), m815 ? p158.DISCARD : p158.STORE, t815.clearDepth, t815.clearStencil, t815.clearFlag), s815.addQueue(p217.RENDER_OPAQUE).addSceneOfCamera(t815, new b218(), t217.OPAQUE_OBJECT | t217.PLANAR_SHADOW | t217.CUTOUT_OBJECT | t217.DEFAULT_LIGHTING | t217.DRAW_INSTANCING);
                let u815 = t217.TRANSPARENT_OBJECT | t217.GEOMETRY;
                return m815 || (u815 |= t217.UI, s815.showStatistics = !0), n815 && s815.addQueue(p217.RENDER_TRANSPARENT).addSceneOfCamera(t815, new b218(), u815), {
                    rtName: `ForwardColor${l815.id}`,
                    dsName: `ForwardDepthStencil${l815.id}`
                };
            }
            const s218 = new class {
                constructor() {
                    this.color = void 0, this.normal = void 0, this.emissive = void 0, this.ds = void 0;
                }
            }();
            function d141(w814, x814) {
                const y814 = x814.camera, z814 = s140(y814, y814.window.width, y814.window.height), a815 = z814.width, b815 = z814.height, c815 = s218.color, d815 = s218.normal, e815 = s218.emissive, f815 = s218.ds, g815 = w814.addRenderPass(a815, b815, "gbuffer");
                g815.name = `CameraGBufferPass${x814.id}`, g815.setViewport(new s159(z814.x, z814.y, a815, b815));
                const h815 = new t159(0, 0, 0, 0);
                var i815, j815;
                return y814.clearFlag & d159.COLOR && (w814.pipelineSceneData.isHDR ? (i815 = h815, j815 = y814.clearColor, i815.x = j815.x * j815.x, i815.y = j815.y * j815.y, i815.z = j815.z * j815.z) : (h815.x = y814.clearColor.x, h815.y = y814.clearColor.y, h815.z = y814.clearColor.z)), g815.addRenderTarget(c815, o158.CLEAR, p158.STORE, h815), g815.addRenderTarget(e815, o158.CLEAR, p158.STORE, new t159(0, 0, 0, 0)), g815.addRenderTarget(d815, o158.CLEAR, p158.STORE, new t159(0, 0, 0, 0)), g815.addDepthStencil(f815, o158.CLEAR, p158.STORE, y814.clearDepth, y814.clearStencil, y814.clearFlag), g815.addQueue(p217.RENDER_OPAQUE, "gbuffer").addSceneOfCamera(y814, new b218(), t217.OPAQUE_OBJECT | t217.CUTOUT_OBJECT), g815;
            }
            let t218, u218;
            function e141(f814, g814, h814) {
                a141(f814, g814), t218 || (t218 = new j218(h814));
                const i814 = f814, j814 = g814.camera, k814 = s140(j814, j814.window.width, j814.window.height), l814 = k814.width, m814 = k814.height, n814 = q140(j814), o814 = `deferredLightingPassRTName${g814.id}`, p814 = i814.addRenderPass(l814, m814, "deferred-lighting");
                p814.name = `CameraLightingPass${g814.id}`, p814.setViewport(new s159(k814.x, k814.y, l814, m814));
                for (const v814 of p218.mainLightShadowNames)
                    i814.containsResource(v814) && p814.addTexture(v814, "cc_shadowMap");
                for (const u814 of p218.spotLightShadowNames)
                    i814.containsResource(u814) && p814.addTexture(u814, "cc_spotShadowMap");
                i814.containsResource(s218.color) && (p814.addTexture(s218.color, "albedoMap"), p814.addTexture(s218.normal, "normalMap"), p814.addTexture(s218.emissive, "emissiveMap"), p814.addTexture(s218.ds, "depthStencil"));
                const q814 = `clusterLightBuffer${n814}`, r814 = `clusterLightIndicesBuffer${n814}`, s814 = `clusterLightGridBuffer${n814}`;
                i814.containsResource(q814) && (p814.addStorageBuffer(q814, w217.READ, "b_ccLightsBuffer"), p814.addStorageBuffer(r814, w217.READ, "b_clusterLightIndicesBuffer"), p814.addStorageBuffer(s814, w217.READ, "b_clusterLightGridBuffer"));
                const t814 = new t159(0, 0, 0, 0);
                return j814.clearFlag & d159.COLOR && (t814.x = j814.clearColor.x, t814.y = j814.clearColor.y, t814.z = j814.clearColor.z), t814.w = 0, p814.addRenderTarget(o814, o158.CLEAR, p158.STORE, t814), p814.addQueue(p217.RENDER_TRANSPARENT).addCameraQuad(j814, t218.deferredLightingMaterial, 0, t217.VOLUMETRIC_LIGHTING), {
                    rtName: o814
                };
            }
            function f141(t813, u813, v813) {
                u218 || (u218 = new h218());
                const w813 = u813.id, x813 = u813.camera, y813 = s140(x813, x813.window.width, x813.window.height), z813 = y813.width, a814 = y813.height, b814 = `postprocessPassRTName${w813}`, c814 = `postprocessPassDS${w813}`, d814 = t813.addRenderPass(z813, a814, "post-process");
                d814.name = `CameraPostprocessPass${w813}`, d814.setViewport(new s159(y813.x, y813.y, y813.width, y813.height)), t813.containsResource(v813) && d814.addTexture(v813, "outputResultMap");
                const e814 = new t159(0, 0, 0, x813.clearColor.w);
                return x813.clearFlag & d159.COLOR && (e814.x = x813.clearColor.x, e814.y = x813.clearColor.y, e814.z = x813.clearColor.z), d814.addRenderTarget(b814, r140(x813.clearFlag, v217.RENDER_TARGET), p158.STORE, e814), d814.addDepthStencil(c814, r140(x813.clearFlag, v217.DEPTH_STENCIL), p158.STORE, x813.clearDepth, x813.clearStencil, x813.clearFlag), d814.addQueue(p217.NONE).addCameraQuad(x813, u218.postMaterial, 0, t217.NONE), null === x813 && (d814.showStatistics = !0), {
                    rtName: b814,
                    dsName: c814
                };
            }
            function g141(j813, k813) {
                const l813 = k813.camera, m813 = s140(l813, l813.window.width, l813.window.height), n813 = m813.width, o813 = m813.height, p813 = `dsUIAndProfilerPassColor${k813.id}`, q813 = `dsUIAndProfilerPassDS${k813.id}`, r813 = j813.addRenderPass(n813, o813, "default");
                r813.name = `CameraUIAndProfilerPass${k813.id}`, r813.setViewport(new s159(m813.x, m813.y, n813, o813)), r813.addRenderTarget(p813, r140(l813.clearFlag, v217.RENDER_TARGET), p158.STORE, new t159(l813.clearColor.x, l813.clearColor.y, l813.clearColor.z, l813.clearColor.w)), r813.addDepthStencil(q813, r140(l813.clearFlag, v217.DEPTH_STENCIL), p158.STORE, l813.clearDepth, l813.clearStencil, l813.clearFlag);
                const s813 = t217.UI;
                r813.addQueue(p217.RENDER_TRANSPARENT).addSceneOfCamera(l813, new b218(), s813), null === l813 && (r813.showStatistics = !0);
            }
            new t159(0, 0, 0, 0), g125("ForwardPipelineBuilder", class {
                setup(f813, g813) {
                    for (let h813 = 0; h813 < f813.length; h813++) {
                        const i813 = f813[h813];
                        null !== i813.scene && (g813.update(i813), c141(g813, w140(g813, i813, this.initResource, this.updateResource)));
                    }
                }
                initResource(s812, t812) {
                    !function (v812, w812, x812 = !1) {
                        const y812 = w812.camera, z812 = s140(y812, y812.window.width, y812.window.height), a813 = z812.width, b813 = z812.height;
                        y140(v812, w812), x812 ? v812.addRenderTarget(`ForwardColor${w812.id}`, function (d813) {
                            const e813 = d813.getMacroBool("CC_USE_FLOAT_OUTPUT");
                            return d813.pipelineSceneData.isHDR && e813 && j135(d813.device) ? t157.RGBA16F : t157.RGBA8;
                        }(v812), a813, b813, o217.PERSISTENT) : v812.addRenderWindow(`ForwardColor${w812.id}`, t157.BGRA8, a813, b813, w812.camera.window), v812.addDepthStencil(`ForwardDepthStencil${w812.id}`, t157.DEPTH_STENCIL, a813, b813);
                    }(s812, t812);
                }
                updateResource(i812, j812) {
                    !function (l812, m812, n812 = !1) {
                        const o812 = m812.camera, p812 = s140(o812, o812.window.width, o812.window.height), q812 = p812.width, r812 = p812.height;
                        q218(l812, m812), n812 ? l812.updateRenderTarget(`ForwardColor${m812.id}`, q812, r812) : l812.updateRenderWindow(`ForwardColor${m812.id}`, m812.camera.window), l812.updateDepthStencil(`ForwardDepthStencil${m812.id}`, q812, r812);
                    }(i812, j812);
                }
            }), g125("DeferredPipelineBuilder", class {
                setup(a812, b812) {
                    for (let c812 = 0; c812 < a812.length; ++c812) {
                        const d812 = a812[c812];
                        if (!d812.scene)
                            continue;
                        b812.update(d812);
                        const e812 = b812.device.hasFeature(s157.COMPUTE_SHADER), f812 = d812.cameraUsage === m176.GAME || d812.cameraUsage === m176.GAME_VIEW, g812 = w140(b812, d812, this.initResource, this.updateResource);
                        if (f812) {
                            if (u140(d812))
                                g141(b812, g812);
                            else {
                                e812 && t140(d812, b812), d141(b812, g812);
                                const h812 = e141(b812, g812, e812);
                                b141(b812, g812, h812.rtName, e812), f141(b812, g812, h812.rtName);
                            }
                        }
                        else
                            c141(b812, g812);
                    }
                }
                initResource(l810, m810) {
                    u140(m810.camera) ? function (s811, t811) {
                        const u811 = t811.camera, v811 = s140(u811, u811.window.width, u811.window.height), w811 = v811.width, x811 = v811.height, y811 = `dsUIAndProfilerPassColor${t811.id}`, z811 = `dsUIAndProfilerPassDS${t811.id}`;
                        s811.addRenderWindow(y811, t157.BGRA8, w811, x811, u811.window), s811.addDepthStencil(z811, t157.DEPTH_STENCIL, w811, x811, o217.MANAGED);
                    }(l810, m810) : (function (h811, i811) {
                        const j811 = i811.camera, k811 = s140(j811, j811.window.width, j811.window.height), l811 = k811.width, m811 = k811.height, n811 = `gBufferPassColorCamera${i811.id}`, o811 = `gBufferPassNormal${i811.id}`, p811 = `gBufferPassEmissive${i811.id}`, q811 = `gBufferPassDSCamera${i811.id}`, r811 = t157.RGBA16F;
                        h811.addRenderTarget(n811, r811, l811, m811, o217.MANAGED), h811.addRenderTarget(p811, r811, l811, m811, o217.MANAGED), h811.addRenderTarget(o811, r811, l811, m811, o217.MANAGED), h811.addDepthStencil(q811, t157.DEPTH_STENCIL, l811, m811, o217.MANAGED), s218.color = n811, s218.normal = o811, s218.emissive = p811, s218.ds = q811;
                    }(l810, m810), function (a811, b811) {
                        y140(a811, b811);
                        const c811 = b811.camera, d811 = s140(c811, c811.window.width, c811.window.height), e811 = d811.width, f811 = d811.height, g811 = `deferredLightingPassRTName${b811.id}`;
                        a811.addRenderTarget(g811, t157.RGBA8, e811, f811, o217.MANAGED);
                    }(l810, m810), function (r810, s810) {
                        const t810 = s810.id, u810 = s810.camera, v810 = s140(u810, u810.window.width, u810.window.height), w810 = v810.width, x810 = v810.height, y810 = `postprocessPassRTName${t810}`, z810 = `postprocessPassDS${t810}`;
                        r810.addRenderWindow(y810, t157.BGRA8, w810, x810, u810.window), r810.addDepthStencil(z810, t157.DEPTH_STENCIL, w810, x810, o217.MANAGED);
                    }(l810, m810));
                }
                updateResource(x808, y808) {
                    u140(y808.camera) ? function (d810, e810) {
                        const f810 = e810.camera, g810 = s140(f810, f810.window.width, f810.window.height), h810 = g810.width, i810 = g810.height, j810 = `dsUIAndProfilerPassColor${e810.id}`, k810 = `dsUIAndProfilerPassDS${e810.id}`;
                        d810.updateRenderWindow(j810, f810.window), d810.updateDepthStencil(k810, h810, i810);
                    }(x808, y808) : (function (t809, u809) {
                        const v809 = u809.camera, w809 = s140(v809, v809.window.width, v809.window.height), x809 = w809.width, y809 = w809.height, z809 = `gBufferPassColorCamera${u809.id}`, a810 = `gBufferPassNormal${u809.id}`, b810 = `gBufferPassEmissive${u809.id}`, c810 = `gBufferPassDSCamera${u809.id}`;
                        t809.updateRenderTarget(z809, x809, y809), t809.updateRenderTarget(b810, x809, y809), t809.updateRenderTarget(a810, x809, y809), t809.updateDepthStencil(c810, x809, y809);
                    }(x808, y808), function (m809, n809) {
                        q218(m809, n809);
                        const o809 = n809.camera, p809 = s140(o809, o809.window.width, o809.window.height), q809 = p809.width, r809 = p809.height, s809 = `deferredLightingPassRTName${n809.id}`;
                        m809.updateRenderTarget(s809, q809, r809);
                    }(x808, y808), function (d809, e809) {
                        const f809 = e809.id, g809 = e809.camera, h809 = s140(g809, g809.window.width, g809.window.height), i809 = h809.width, j809 = h809.height, k809 = `postprocessPassRTName${f809}`, l809 = `postprocessPassDS${f809}`;
                        d809.updateRenderWindow(k809, g809.window), d809.updateDepthStencil(l809, i809, j809);
                    }(x808, y808));
                }
            });
            const v218 = m152.Flags.Destroyed, w218 = m152.Flags.PersistentMask, x218 = [];
            function h141(t808) {
                let u808;
                if (b131(t808)) {
                    if (function (w808) {
                        return "function" == typeof w808._instantiate;
                    }(t808))
                        return s143.game._isCloning = !0, u808 = t808._instantiate(null, !0), s143.game._isCloning = !1, w133(u808), u808;
                    if (t808 instanceof s143.Asset)
                        throw new TypeError(b126(6903));
                }
                return s143.game._isCloning = !0, u808 = i141(t808), s143.game._isCloning = !1, w133(u808), u808;
            }
            function i141(o808, p808) {
                let q808;
                q808 = o808._iN$t ? o808._iN$t : o808.constructor ? new (0, o808.constructor)() : Object.create(null), j141(o808, q808, p808);
                for (let r808 = 0, s808 = x218.length; r808 < s808; ++r808)
                    x218[r808]._iN$t = null;
                return x218.length = 0, q808;
            }
            function j141(y807, z807, a808) {
                z144(y807, "_iN$t", z807, !0), x218.push(y807);
                const b808 = y807.constructor;
                if (t128(b808))
                    !function (f808, g808, h808, i808) {
                        const j808 = f808.__values__;
                        for (let k808 = 0; k808 < j808.length; k808++) {
                            const l808 = j808[k808], m808 = g808[l808];
                            if ("object" == typeof m808 && m808) {
                                const n808 = h808[l808];
                                n808 instanceof p145 && n808.constructor === m808.constructor ? n808.set(m808) : h808[l808] = m808._iN$t || k141(m808, i808);
                            }
                            else
                                h808[l808] = m808;
                        }
                    }(b808, y807, z807, a808);
                else
                    for (const d808 in y807) {
                        if (!y807.hasOwnProperty(d808) || 95 === d808.charCodeAt(0) && 95 === d808.charCodeAt(1) && "__type__" !== d808 && "__prefab" !== d808)
                            continue;
                        const e808 = y807[d808];
                        if ("object" == typeof e808 && e808) {
                            if (e808 === z807)
                                continue;
                            z807[d808] = e808._iN$t || k141(e808, a808);
                        }
                        else
                            z807[d808] = e808;
                    }
                b131(y807) && (z807._objFlags &= w218);
            }
            function k141(p807, q807) {
                if (p807 instanceof p145)
                    return p807.clone();
                if (p807 instanceof s143.Asset)
                    return p807;
                let r807;
                if (ArrayBuffer.isView(p807)) {
                    const w807 = p807.length;
                    r807 = new p807.constructor(w807), p807._iN$t = r807, x218.push(p807);
                    for (let x807 = 0; x807 < w807; ++x807)
                        r807[x807] = p807[x807];
                    return r807;
                }
                if (Array.isArray(p807)) {
                    const t807 = p807.length;
                    r807 = new Array(t807), p807._iN$t = r807, x218.push(p807);
                    for (let u807 = 0; u807 < t807; ++u807) {
                        const v807 = p807[u807];
                        r807[u807] = "object" == typeof v807 && v807 ? v807._iN$t || k141(v807, q807) : v807;
                    }
                    return r807;
                }
                if (p807._objFlags & v218)
                    return null;
                const s807 = p807.constructor;
                if (t128(s807)) {
                    if (q807)
                        if (q807 instanceof a165) {
                            if (p807 instanceof h175 || p807 instanceof a165)
                                return p807;
                        }
                        else if (q807 instanceof h175)
                            if (p807 instanceof h175) {
                                if (!p807.isChildOf(q807))
                                    return p807;
                            }
                            else if (p807 instanceof a165 && p807.node && !p807.node.isChildOf(q807))
                                return p807;
                    r807 = new s807();
                }
                else if (s807 === Object)
                    r807 = {};
                else {
                    if (s807)
                        return p807;
                    r807 = Object.create(null);
                }
                return j141(p807, r807, q807), r807;
            }
            h141._clone = i141, s143.instantiate = h141;
            class y218 {
                constructor(o807) {
                    this.poolHandlerComp = void 0, this._pool = void 0, this.poolHandlerComp = o807, this._pool = [];
                }
                size() {
                    return this._pool.length;
                }
                clear() {
                    const m807 = this._pool.length;
                    for (let n807 = 0; n807 < m807; ++n807)
                        this._pool[n807].destroy();
                    this._pool.length = 0;
                }
                put(k807) {
                    if (k807 && -1 === this._pool.indexOf(k807)) {
                        k807.removeFromParent();
                        const l807 = this.poolHandlerComp ? k807.getComponent(this.poolHandlerComp) : null;
                        l807 && l807.unuse && l807.unuse(), this._pool.push(k807);
                    }
                }
                get(...g807) {
                    const h807 = this._pool.length - 1;
                    if (h807 < 0)
                        return null;
                    {
                        const i807 = this._pool[h807];
                        this._pool.length = h807;
                        const j807 = this.poolHandlerComp ? i807.getComponent(this.poolHandlerComp) : null;
                        return j807 && j807.reuse && j807.reuse(arguments), i807;
                    }
                }
            }
            var z218, a219;
            g125("NodePool", y218), s143.NodePool = y218;
            const b219 = null !== (z218 = globalThis.jsb) && void 0 !== z218 ? z218 : {};
            {
                Object.defineProperty(b219, "reflection", {
                    get: () => (void 0 !== b219.__bridge || (!globalThis.JavascriptJavaBridge || i157.os !== i157.OS.ANDROID && i157.os !== i157.OS.OHOS ? !globalThis.JavaScriptObjCBridge || i157.os !== i157.OS.IOS && i157.os !== i157.OS.OSX ? b219.__bridge = null : b219.__bridge = new globalThis.JavaScriptObjCBridge() : b219.__bridge = new globalThis.JavascriptJavaBridge()), b219.__bridge),
                    enumerable: !0,
                    configurable: !0,
                    set(f807) {
                        b219.__bridge = f807;
                    }
                }), Object.defineProperty(b219, "bridge", {
                    get: () => (void 0 !== b219.__ccbridge || (globalThis.ScriptNativeBridge && i157.os === i157.OS.ANDROID || i157.os === i157.OS.IOS || i157.os === i157.OS.OSX || i157.os === i157.OS.OHOS ? b219.__ccbridge = new ScriptNativeBridge() : b219.__ccbridge = null), b219.__ccbridge),
                    enumerable: !0,
                    configurable: !0,
                    set(e807) {
                        b219.__ccbridge = e807;
                    }
                });
                const y805 = {
                    eventMap: new Map(),
                    addNativeEventListener(b807, c807) {
                        this.eventMap.get(b807) || this.eventMap.set(b807, []);
                        const d807 = this.eventMap.get(b807);
                        d807.find(c807) || d807.push(c807);
                    },
                    dispatchEventToNative(z806, a807) {
                        b219.bridge.sendToNative(z806, a807);
                    },
                    removeAllListenersForEvent(y806) {
                        return this.eventMap.delete(y806);
                    },
                    removeNativeEventListener(t806, u806) {
                        const v806 = this.eventMap.get(t806);
                        if (!v806)
                            return !1;
                        for (let w806 = 0, x806 = v806.length; w806 < x806; w806++)
                            if (v806[w806] === u806)
                                return v806.splice(w806, 1), !0;
                        return !0;
                    },
                    removeAllListeners() {
                        this.eventMap.clear();
                    },
                    triggerEvent(o806, p806) {
                        const q806 = this.eventMap.get(o806);
                        q806 ? q806.map(s806 => s806.call(null, p806)) : console.error(`${o806} does not exist`);
                    }
                };
                Object.defineProperty(b219, "jsbBridgeWrapper", {
                    get: () => (void 0 !== b219.__JsbBridgeWrapper || (globalThis.ScriptNativeBridge && i157.os === i157.OS.ANDROID || i157.os === i157.OS.IOS || i157.os === i157.OS.OSX || i157.os === i157.OS.OHOS ? (b219.__JsbBridgeWrapper = y805, b219.bridge.onNative = (m806, n806) => {
                        b219.__JsbBridgeWrapper.triggerEvent(m806, n806);
                    }) : b219.__JsbBridgeWrapper = null), b219.__JsbBridgeWrapper),
                    enumerable: !0,
                    configurable: !0,
                    set(k806) {
                        b219.__JsbBridgeWrapper = k806;
                    }
                });
                const z805 = b219.saveImageData;
                b219.saveImageData = (b806, c806, d806, e806) => new Promise((g806, h806) => {
                    z805(b806, c806, d806, e806, j806 => {
                        j806 ? g806() : h806();
                    });
                });
            }
            g125("native", {
                DownloaderHints: b219.DownloaderHints,
                Downloader: b219.Downloader,
                zipUtils: b219.zipUtils,
                fileUtils: b219.fileUtils,
                DebugRenderer: b219.DebugRenderer,
                copyTextToClipboard: null === (a219 = b219.copyTextToClipboard) || void 0 === a219 ? void 0 : a219.bind(b219),
                garbageCollect: b219.garbageCollect,
                reflection: b219.reflection,
                bridge: b219.bridge,
                jsbBridgeWrapper: b219.jsbBridgeWrapper,
                AssetsManager: b219.AssetsManager,
                EventAssetsManager: b219.EventAssetsManager,
                Manifest: b219.Manifest,
                saveImageData: b219.saveImageData,
                process: b219.process,
                adpf: b219.adpf
            }), s143.renderer = s194;
            var c219 = Object.setPrototypeOf;
            let d219 = {};
            d219 || (d219 = {}), function (i805) {
                var j805 = function () {
                    function l805(x805) {
                        this._clock = new i805.WorldClock(), this._events = [], this._objects = [], this._eventManager = null, this._eventManager = x805, console.info("DragonBones: " + l805.VERSION + "\nWebsite: http://dragonbones.com/\nSource and Demo: https://github.com/DragonBones/");
                    }
                    return l805.prototype.advanceTime = function (r805) {
                        if (this._objects.length > 0) {
                            for (var s805 = 0, t805 = this._objects; s805 < t805.length; s805++)
                                t805[s805].returnToPool();
                            this._objects.length = 0;
                        }
                        if (this._clock.advanceTime(r805), this._events.length > 0) {
                            for (var u805 = 0; u805 < this._events.length; ++u805) {
                                var v805 = this._events[u805], w805 = v805.armature;
                                null !== w805._armatureData && (w805.eventDispatcher.dispatchDBEvent(v805.type, v805), v805.type === i805.EventObject.SOUND_EVENT && this._eventManager.dispatchDBEvent(v805.type, v805)), this.bufferObject(v805);
                            }
                            this._events.length = 0;
                        }
                    }, l805.prototype.bufferEvent = function (q805) {
                        this._events.indexOf(q805) < 0 && this._events.push(q805);
                    }, l805.prototype.bufferObject = function (p805) {
                        this._objects.indexOf(p805) < 0 && this._objects.push(p805);
                    }, Object.defineProperty(l805.prototype, "clock", {
                        get: function () {
                            return this._clock;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(l805.prototype, "eventManager", {
                        get: function () {
                            return this._eventManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), l805.VERSION = "5.6.300", l805.yDown = !1, l805.debug = !1, l805.debugDraw = !1, l805.webAssembly = !1, l805;
                }();
                i805.DragonBones = j805;
            }(d219 || (d219 = {})), console.warn || (console.warn = function () { }), console.assert || (console.assert = function () { }), Date.now || (Date.now = function () {
                return new Date().getTime();
            }), c219 = function (e805, f805) {
                function g805() {
                    this.constructor = e805;
                }
                for (var h805 in f805)
                    f805.hasOwnProperty(h805) && (e805[h805] = f805[h805]);
                g805.prototype = f805.prototype, e805.prototype = new g805();
            }, function (d804) {
                var e804 = function () {
                    function g804() {
                        this.hashCode = g804._hashCode++, this._isInPool = !1;
                    }
                    return g804._returnObject = function (a805) {
                        var b805 = String(a805.constructor), c805 = b805 in g804._maxCountMap ? g804._maxCountMap[b805] : g804._defaultMaxCount, d805 = g804._poolsMap[b805] = g804._poolsMap[b805] || [];
                        d805.length < c805 && (a805._isInPool ? console.warn("The object is already in the pool.") : (a805._isInPool = !0, d805.push(a805)));
                    }, g804.toString = function () {
                        throw new Error();
                    }, g804.setMaxCount = function (w804, x804) {
                        if ((x804 < 0 || x804 != x804) && (x804 = 0), null !== w804)
                            null !== (z804 = (y804 = String(w804)) in g804._poolsMap ? g804._poolsMap[y804] : null) && z804.length > x804 && (z804.length = x804), g804._maxCountMap[y804] = x804;
                        else
                            for (var y804 in g804._defaultMaxCount = x804, g804._poolsMap) {
                                var z804;
                                (z804 = g804._poolsMap[y804]).length > x804 && (z804.length = x804), y804 in g804._maxCountMap && (g804._maxCountMap[y804] = x804);
                            }
                    }, g804.clearPool = function (s804) {
                        if (void 0 === s804 && (s804 = null), null !== s804) {
                            var t804 = String(s804);
                            null !== (v804 = t804 in g804._poolsMap ? g804._poolsMap[t804] : null) && v804.length > 0 && (v804.length = 0);
                        }
                        else
                            for (var u804 in g804._poolsMap) {
                                var v804;
                                (v804 = g804._poolsMap[u804]).length = 0;
                            }
                    }, g804.borrowObject = function (n804) {
                        var o804 = String(n804), p804 = o804 in g804._poolsMap ? g804._poolsMap[o804] : null;
                        if (null !== p804 && p804.length > 0) {
                            var q804 = p804.pop();
                            return q804._isInPool = !1, q804;
                        }
                        var r804 = new n804();
                        return r804._onClear(), r804;
                    }, g804.prototype.returnToPool = function () {
                        this._onClear(), g804._returnObject(this);
                    }, g804._hashCode = 0, g804._defaultMaxCount = 3e3, g804._maxCountMap = {}, g804._poolsMap = {}, g804;
                }();
                d804.BaseObject = e804;
            }(d219 || (d219 = {})), function (u801) {
                var v801 = function () {
                    function x801(x803, y803, z803, a804, b804, c804) {
                        void 0 === x803 && (x803 = 1), void 0 === y803 && (y803 = 0), void 0 === z803 && (z803 = 0), void 0 === a804 && (a804 = 1), void 0 === b804 && (b804 = 0), void 0 === c804 && (c804 = 0), this.a = x803, this.b = y803, this.c = z803, this.d = a804, this.tx = b804, this.ty = c804;
                    }
                    return x801.prototype.toString = function () {
                        return "[object dragonBones.Matrix] a:" + this.a + " b:" + this.b + " c:" + this.c + " d:" + this.d + " tx:" + this.tx + " ty:" + this.ty;
                    }, x801.prototype.copyFrom = function (w803) {
                        return this.a = w803.a, this.b = w803.b, this.c = w803.c, this.d = w803.d, this.tx = w803.tx, this.ty = w803.ty, this;
                    }, x801.prototype.copyFromArray = function (u803, v803) {
                        return void 0 === v803 && (v803 = 0), this.a = u803[v803], this.b = u803[v803 + 1], this.c = u803[v803 + 2], this.d = u803[v803 + 3], this.tx = u803[v803 + 4], this.ty = u803[v803 + 5], this;
                    }, x801.prototype.identity = function () {
                        return this.a = this.d = 1, this.b = this.c = 0, this.tx = this.ty = 0, this;
                    }, x801.prototype.concat = function (n803) {
                        var o803 = this.a * n803.a, p803 = 0, q803 = 0, r803 = this.d * n803.d, s803 = this.tx * n803.a + n803.tx, t803 = this.ty * n803.d + n803.ty;
                        return 0 === this.b && 0 === this.c || (o803 += this.b * n803.c, p803 += this.b * n803.d, q803 += this.c * n803.a, r803 += this.c * n803.b), 0 === n803.b && 0 === n803.c || (p803 += this.a * n803.b, q803 += this.d * n803.c, s803 += this.ty * n803.c, t803 += this.tx * n803.b), this.a = o803, this.b = p803, this.c = q803, this.d = r803, this.tx = s803, this.ty = t803, this;
                    }, x801.prototype.invert = function () {
                        var f803 = this.a, g803 = this.b, h803 = this.c, i803 = this.d, j803 = this.tx, k803 = this.ty;
                        if (0 === g803 && 0 === h803)
                            return this.b = this.c = 0, 0 === f803 || 0 === i803 ? this.a = this.b = this.tx = this.ty = 0 : (f803 = this.a = 1 / f803, i803 = this.d = 1 / i803, this.tx = -f803 * j803, this.ty = -i803 * k803), this;
                        var l803 = f803 * i803 - g803 * h803;
                        if (0 === l803)
                            return this.a = this.d = 1, this.b = this.c = 0, this.tx = this.ty = 0, this;
                        l803 = 1 / l803;
                        var m803 = this.a = i803 * l803;
                        return g803 = this.b = -g803 * l803, h803 = this.c = -h803 * l803, i803 = this.d = f803 * l803, this.tx = -(m803 * j803 + h803 * k803), this.ty = -(g803 * j803 + i803 * k803), this;
                    }, x801.prototype.transformPoint = function (b803, c803, d803, e803) {
                        void 0 === e803 && (e803 = !1), d803.x = this.a * b803 + this.c * c803, d803.y = this.b * b803 + this.d * c803, e803 || (d803.x += this.tx, d803.y += this.ty);
                    }, x801.prototype.transformRectangle = function (g802, h802) {
                        void 0 === h802 && (h802 = !1);
                        var i802 = this.a, j802 = this.b, k802 = this.c, l802 = this.d, m802 = h802 ? 0 : this.tx, n802 = h802 ? 0 : this.ty, o802 = g802.x, p802 = g802.y, q802 = o802 + g802.width, r802 = p802 + g802.height, s802 = i802 * o802 + k802 * p802 + m802, t802 = j802 * o802 + l802 * p802 + n802, u802 = i802 * q802 + k802 * p802 + m802, v802 = j802 * q802 + l802 * p802 + n802, w802 = i802 * q802 + k802 * r802 + m802, x802 = j802 * q802 + l802 * r802 + n802, y802 = i802 * o802 + k802 * r802 + m802, z802 = j802 * o802 + l802 * r802 + n802, a803 = 0;
                        s802 > u802 && (a803 = s802, s802 = u802, u802 = a803), w802 > y802 && (a803 = w802, w802 = y802, y802 = a803), g802.x = Math.floor(s802 < w802 ? s802 : w802), g802.width = Math.ceil((u802 > y802 ? u802 : y802) - g802.x), t802 > v802 && (a803 = t802, t802 = v802, v802 = a803), x802 > z802 && (a803 = x802, x802 = z802, z802 = a803), g802.y = Math.floor(t802 < x802 ? t802 : x802), g802.height = Math.ceil((v802 > z802 ? v802 : z802) - g802.y);
                    }, x801;
                }();
                u801.Matrix = v801;
            }(d219 || (d219 = {})), function (s800) {
                var t800 = function () {
                    function v800(o801, p801, q801, r801, s801, t801) {
                        void 0 === o801 && (o801 = 0), void 0 === p801 && (p801 = 0), void 0 === q801 && (q801 = 0), void 0 === r801 && (r801 = 0), void 0 === s801 && (s801 = 1), void 0 === t801 && (t801 = 1), this.x = o801, this.y = p801, this.skew = q801, this.rotation = r801, this.scaleX = s801, this.scaleY = t801;
                    }
                    return v800.normalizeRadian = function (n801) {
                        return (n801 = (n801 + Math.PI) % (2 * Math.PI)) + (n801 > 0 ? -Math.PI : Math.PI);
                    }, v800.prototype.toString = function () {
                        return "[object dragonBones.Transform] x:" + this.x + " y:" + this.y + " skewX:" + 180 * this.skew / Math.PI + " skewY:" + 180 * this.rotation / Math.PI + " scaleX:" + this.scaleX + " scaleY:" + this.scaleY;
                    }, v800.prototype.copyFrom = function (m801) {
                        return this.x = m801.x, this.y = m801.y, this.skew = m801.skew, this.rotation = m801.rotation, this.scaleX = m801.scaleX, this.scaleY = m801.scaleY, this;
                    }, v800.prototype.identity = function () {
                        return this.x = this.y = 0, this.skew = this.rotation = 0, this.scaleX = this.scaleY = 1, this;
                    }, v800.prototype.add = function (l801) {
                        return this.x += l801.x, this.y += l801.y, this.skew += l801.skew, this.rotation += l801.rotation, this.scaleX *= l801.scaleX, this.scaleY *= l801.scaleY, this;
                    }, v800.prototype.minus = function (k801) {
                        return this.x -= k801.x, this.y -= k801.y, this.skew -= k801.skew, this.rotation -= k801.rotation, this.scaleX /= k801.scaleX, this.scaleY /= k801.scaleY, this;
                    }, v800.prototype.fromMatrix = function (f801) {
                        var g801 = this.scaleX, h801 = this.scaleY, i801 = v800.PI_Q;
                        this.x = f801.tx, this.y = f801.ty, this.rotation = Math.atan(f801.b / f801.a);
                        var j801 = Math.atan(-f801.c / f801.d);
                        return this.scaleX = this.rotation > -i801 && this.rotation < i801 ? f801.a / Math.cos(this.rotation) : f801.b / Math.sin(this.rotation), this.scaleY = j801 > -i801 && j801 < i801 ? f801.d / Math.cos(j801) : -f801.c / Math.sin(j801), g801 >= 0 && this.scaleX < 0 && (this.scaleX = -this.scaleX, this.rotation = this.rotation - Math.PI), h801 >= 0 && this.scaleY < 0 && (this.scaleY = -this.scaleY, j801 -= Math.PI), this.skew = j801 - this.rotation, this;
                    }, v800.prototype.toMatrix = function (e801) {
                        return 0 === this.rotation ? (e801.a = 1, e801.b = 0) : (e801.a = Math.cos(this.rotation), e801.b = Math.sin(this.rotation)), 0 === this.skew ? (e801.c = -e801.b, e801.d = e801.a) : (e801.c = -Math.sin(this.skew + this.rotation), e801.d = Math.cos(this.skew + this.rotation)), 1 !== this.scaleX && (e801.a *= this.scaleX, e801.b *= this.scaleX), 1 !== this.scaleY && (e801.c *= this.scaleY, e801.d *= this.scaleY), e801.tx = this.x, e801.ty = this.y, this;
                    }, v800.PI = Math.PI, v800.PI_D = 2 * Math.PI, v800.PI_H = Math.PI / 2, v800.PI_Q = Math.PI / 4, v800.RAD_DEG = 180 / Math.PI, v800.DEG_RAD = Math.PI / 180, v800;
                }();
                s800.Transform = t800;
            }(d219 || (d219 = {})), function (d800) {
                var e800 = function () {
                    function g800(k800, l800, m800, n800, o800, p800, q800, r800) {
                        void 0 === k800 && (k800 = 1), void 0 === l800 && (l800 = 1), void 0 === m800 && (m800 = 1), void 0 === n800 && (n800 = 1), void 0 === o800 && (o800 = 0), void 0 === p800 && (p800 = 0), void 0 === q800 && (q800 = 0), void 0 === r800 && (r800 = 0), this.alphaMultiplier = k800, this.redMultiplier = l800, this.greenMultiplier = m800, this.blueMultiplier = n800, this.alphaOffset = o800, this.redOffset = p800, this.greenOffset = q800, this.blueOffset = r800;
                    }
                    return g800.prototype.copyFrom = function (j800) {
                        this.alphaMultiplier = j800.alphaMultiplier, this.redMultiplier = j800.redMultiplier, this.greenMultiplier = j800.greenMultiplier, this.blueMultiplier = j800.blueMultiplier, this.alphaOffset = j800.alphaOffset, this.redOffset = j800.redOffset, this.greenOffset = j800.greenOffset, this.blueOffset = j800.blueOffset;
                    }, g800.prototype.identity = function () {
                        this.alphaMultiplier = this.redMultiplier = this.greenMultiplier = this.blueMultiplier = 1, this.alphaOffset = this.redOffset = this.greenOffset = this.blueOffset = 0;
                    }, g800;
                }();
                d800.ColorTransform = e800;
            }(d219 || (d219 = {})), function (u799) {
                var v799 = function () {
                    function x799(b800, c800) {
                        void 0 === b800 && (b800 = 0), void 0 === c800 && (c800 = 0), this.x = b800, this.y = c800;
                    }
                    return x799.prototype.copyFrom = function (a800) {
                        this.x = a800.x, this.y = a800.y;
                    }, x799.prototype.clear = function () {
                        this.x = this.y = 0;
                    }, x799;
                }();
                u799.Point = v799;
            }(d219 || (d219 = {})), function (j799) {
                var k799 = function () {
                    function m799(q799, r799, s799, t799) {
                        void 0 === q799 && (q799 = 0), void 0 === r799 && (r799 = 0), void 0 === s799 && (s799 = 0), void 0 === t799 && (t799 = 0), this.x = q799, this.y = r799, this.width = s799, this.height = t799;
                    }
                    return m799.prototype.copyFrom = function (p799) {
                        this.x = p799.x, this.y = p799.y, this.width = p799.width, this.height = p799.height;
                    }, m799.prototype.clear = function () {
                        this.x = this.y = 0, this.width = this.height = 0;
                    }, m799;
                }();
                j799.Rectangle = k799;
            }(d219 || (d219 = {})), function (i798) {
                var j798 = function (s798) {
                    function t798() {
                        var i799 = null !== s798 && s798.apply(this, arguments) || this;
                        return i799.ints = [], i799.floats = [], i799.strings = [], i799;
                    }
                    return c219(t798, s798), t798.toString = function () {
                        return "[class dragonBones.UserData]";
                    }, t798.prototype._onClear = function () {
                        this.ints.length = 0, this.floats.length = 0, this.strings.length = 0;
                    }, t798.prototype.addInt = function (h799) {
                        this.ints.push(h799);
                    }, t798.prototype.addFloat = function (g799) {
                        this.floats.push(g799);
                    }, t798.prototype.addString = function (f799) {
                        this.strings.push(f799);
                    }, t798.prototype.getInt = function (e799) {
                        return void 0 === e799 && (e799 = 0), e799 >= 0 && e799 < this.ints.length ? this.ints[e799] : 0;
                    }, t798.prototype.getFloat = function (d799) {
                        return void 0 === d799 && (d799 = 0), d799 >= 0 && d799 < this.floats.length ? this.floats[d799] : 0;
                    }, t798.prototype.getString = function (c799) {
                        return void 0 === c799 && (c799 = 0), c799 >= 0 && c799 < this.strings.length ? this.strings[c799] : "";
                    }, t798;
                }(i798.BaseObject);
                i798.UserData = j798;
                var k798 = function (n798) {
                    function o798() {
                        var r798 = null !== n798 && n798.apply(this, arguments) || this;
                        return r798.data = null, r798;
                    }
                    return c219(o798, n798), o798.toString = function () {
                        return "[class dragonBones.ActionData]";
                    }, o798.prototype._onClear = function () {
                        null !== this.data && this.data.returnToPool(), this.type = 0, this.name = "", this.bone = null, this.slot = null, this.data = null;
                    }, o798;
                }(i798.BaseObject);
                i798.ActionData = k798;
            }(d219 || (d219 = {})), function (u797) {
                var v797 = function (x797) {
                    function y797() {
                        var h798 = null !== x797 && x797.apply(this, arguments) || this;
                        return h798.frameIndices = [], h798.cachedFrames = [], h798.armatureNames = [], h798.armatures = {}, h798.userData = null, h798;
                    }
                    return c219(y797, x797), y797.toString = function () {
                        return "[class dragonBones.DragonBonesData]";
                    }, y797.prototype._onClear = function () {
                        for (var g798 in this.armatures)
                            this.armatures[g798].returnToPool(), delete this.armatures[g798];
                        null !== this.userData && this.userData.returnToPool(), this.autoSearch = !1, this.frameRate = 0, this.version = "", this.name = "", this.stage = null, this.frameIndices.length = 0, this.cachedFrames.length = 0, this.armatureNames.length = 0, this.binary = null, this.intArray = null, this.floatArray = null, this.frameIntArray = null, this.frameFloatArray = null, this.frameArray = null, this.timelineArray = null, this.userData = null;
                    }, y797.prototype.addArmature = function (f798) {
                        f798.name in this.armatures ? console.warn("Same armature: " + f798.name) : (f798.parent = this, this.armatures[f798.name] = f798, this.armatureNames.push(f798.name));
                    }, y797.prototype.getArmature = function (e798) {
                        return e798 in this.armatures ? this.armatures[e798] : null;
                    }, y797.prototype.dispose = function () {
                        console.warn("已废弃"), this.returnToPool();
                    }, y797;
                }(u797.BaseObject);
                u797.DragonBonesData = v797;
            }(d219 || (d219 = {})), function (n794) {
                var o794 = function (m795) {
                    function n795() {
                        var t797 = null !== m795 && m795.apply(this, arguments) || this;
                        return t797.aabb = new n794.Rectangle(), t797.animationNames = [], t797.sortedBones = [], t797.sortedSlots = [], t797.defaultActions = [], t797.actions = [], t797.bones = {}, t797.slots = {}, t797.constraints = {}, t797.skins = {}, t797.animations = {}, t797.canvas = null, t797.userData = null, t797;
                    }
                    return c219(n795, m795), n795.toString = function () {
                        return "[class dragonBones.ArmatureData]";
                    }, n795.prototype._onClear = function () {
                        for (var o797 = 0, p797 = this.defaultActions; o797 < p797.length; o797++)
                            p797[o797].returnToPool();
                        for (var q797 = 0, r797 = this.actions; q797 < r797.length; q797++)
                            r797[q797].returnToPool();
                        for (var s797 in this.bones)
                            this.bones[s797].returnToPool(), delete this.bones[s797];
                        for (var s797 in this.slots)
                            this.slots[s797].returnToPool(), delete this.slots[s797];
                        for (var s797 in this.constraints)
                            this.constraints[s797].returnToPool(), delete this.constraints[s797];
                        for (var s797 in this.skins)
                            this.skins[s797].returnToPool(), delete this.skins[s797];
                        for (var s797 in this.animations)
                            this.animations[s797].returnToPool(), delete this.animations[s797];
                        null !== this.canvas && this.canvas.returnToPool(), null !== this.userData && this.userData.returnToPool(), this.type = 0, this.frameRate = 0, this.cacheFrameRate = 0, this.scale = 1, this.name = "", this.aabb.clear(), this.animationNames.length = 0, this.sortedBones.length = 0, this.sortedSlots.length = 0, this.defaultActions.length = 0, this.actions.length = 0, this.defaultSkin = null, this.defaultAnimation = null, this.canvas = null, this.userData = null, this.parent = null;
                    }, n795.prototype.sortBones = function () {
                        var g797 = this.sortedBones.length;
                        if (!(g797 <= 0)) {
                            var h797 = this.sortedBones.concat(), i797 = 0, j797 = 0;
                            for (this.sortedBones.length = 0; j797 < g797;) {
                                var k797 = h797[i797++];
                                if (i797 >= g797 && (i797 = 0), !(this.sortedBones.indexOf(k797) >= 0)) {
                                    var l797 = !1;
                                    for (var m797 in this.constraints) {
                                        var n797 = this.constraints[m797];
                                        if (n797.root === k797 && this.sortedBones.indexOf(n797.target) < 0) {
                                            l797 = !0;
                                            break;
                                        }
                                    }
                                    l797 || null !== k797.parent && this.sortedBones.indexOf(k797.parent) < 0 || (this.sortedBones.push(k797), j797++);
                                }
                            }
                        }
                    }, n795.prototype.cacheFrames = function (e797) {
                        if (!(this.cacheFrameRate > 0))
                            for (var f797 in this.cacheFrameRate = e797, this.animations)
                                this.animations[f797].cacheFrames(this.cacheFrameRate);
                    }, n795.prototype.setCacheFrame = function (a797, b797) {
                        var c797 = this.parent.cachedFrames, d797 = c797.length;
                        return c797.length += 10, c797[d797] = a797.a, c797[d797 + 1] = a797.b, c797[d797 + 2] = a797.c, c797[d797 + 3] = a797.d, c797[d797 + 4] = a797.tx, c797[d797 + 5] = a797.ty, c797[d797 + 6] = b797.rotation, c797[d797 + 7] = b797.skew, c797[d797 + 8] = b797.scaleX, c797[d797 + 9] = b797.scaleY, d797;
                    }, n795.prototype.getCacheFrame = function (w796, x796, y796) {
                        var z796 = this.parent.cachedFrames;
                        w796.a = z796[y796], w796.b = z796[y796 + 1], w796.c = z796[y796 + 2], w796.d = z796[y796 + 3], w796.tx = z796[y796 + 4], w796.ty = z796[y796 + 5], x796.rotation = z796[y796 + 6], x796.skew = z796[y796 + 7], x796.scaleX = z796[y796 + 8], x796.scaleY = z796[y796 + 9], x796.x = w796.tx, x796.y = w796.ty;
                    }, n795.prototype.addBone = function (v796) {
                        v796.name in this.bones ? console.warn("Same bone: " + v796.name) : (this.bones[v796.name] = v796, this.sortedBones.push(v796));
                    }, n795.prototype.addSlot = function (u796) {
                        u796.name in this.slots ? console.warn("Same slot: " + u796.name) : (this.slots[u796.name] = u796, this.sortedSlots.push(u796));
                    }, n795.prototype.addConstraint = function (t796) {
                        t796.name in this.constraints ? console.warn("Same constraint: " + t796.name) : this.constraints[t796.name] = t796;
                    }, n795.prototype.addSkin = function (s796) {
                        s796.name in this.skins ? console.warn("Same skin: " + s796.name) : (s796.parent = this, this.skins[s796.name] = s796, null === this.defaultSkin && (this.defaultSkin = s796), "default" === s796.name && (this.defaultSkin = s796));
                    }, n795.prototype.addAnimation = function (r796) {
                        r796.name in this.animations ? console.warn("Same animation: " + r796.name) : (r796.parent = this, this.animations[r796.name] = r796, this.animationNames.push(r796.name), null === this.defaultAnimation && (this.defaultAnimation = r796));
                    }, n795.prototype.addAction = function (p796, q796) {
                        q796 ? this.defaultActions.push(p796) : this.actions.push(p796);
                    }, n795.prototype.getBone = function (o796) {
                        return o796 in this.bones ? this.bones[o796] : null;
                    }, n795.prototype.getSlot = function (n796) {
                        return n796 in this.slots ? this.slots[n796] : null;
                    }, n795.prototype.getConstraint = function (m796) {
                        return m796 in this.constraints ? this.constraints[m796] : null;
                    }, n795.prototype.getSkin = function (l796) {
                        return l796 in this.skins ? this.skins[l796] : null;
                    }, n795.prototype.getMesh = function (h796, i796, j796) {
                        var k796 = this.getSkin(h796);
                        return null === k796 ? null : k796.getDisplay(i796, j796);
                    }, n795.prototype.getAnimation = function (g796) {
                        return g796 in this.animations ? this.animations[g796] : null;
                    }, n795;
                }(n794.BaseObject);
                n794.ArmatureData = o794;
                var p794 = function (h795) {
                    function i795() {
                        var l795 = null !== h795 && h795.apply(this, arguments) || this;
                        return l795.transform = new n794.Transform(), l795.userData = null, l795;
                    }
                    return c219(i795, h795), i795.toString = function () {
                        return "[class dragonBones.BoneData]";
                    }, i795.prototype._onClear = function () {
                        null !== this.userData && this.userData.returnToPool(), this.inheritTranslation = !1, this.inheritRotation = !1, this.inheritScale = !1, this.inheritReflection = !1, this.type = 0, this.length = 0, this.name = "", this.transform.identity(), this.userData = null, this.parent = null;
                    }, i795;
                }(n794.BaseObject);
                n794.BoneData = p794;
                var q794 = function (c795) {
                    function d795() {
                        var g795 = null !== c795 && c795.apply(this, arguments) || this;
                        return g795.vertices = [], g795;
                    }
                    return c219(d795, c795), d795.toString = function () {
                        return "[class dragonBones.SurfaceData]";
                    }, d795.prototype._onClear = function () {
                        c795.prototype._onClear.call(this), this.type = 1, this.segmentX = 0, this.segmentY = 0, this.vertices.length = 0;
                    }, d795;
                }(p794);
                n794.SurfaceData = q794;
                var r794 = function (w794) {
                    function x794() {
                        var b795 = null !== w794 && w794.apply(this, arguments) || this;
                        return b795.color = null, b795.userData = null, b795;
                    }
                    return c219(x794, w794), x794.createColor = function () {
                        return new n794.ColorTransform();
                    }, x794.toString = function () {
                        return "[class dragonBones.SlotData]";
                    }, x794.prototype._onClear = function () {
                        null !== this.userData && this.userData.returnToPool(), this.blendMode = 0, this.displayIndex = 0, this.zOrder = 0, this.name = "", this.color = null, this.userData = null, this.parent = null;
                    }, x794.DEFAULT_COLOR = new n794.ColorTransform(), x794;
                }(n794.BaseObject);
                n794.SlotData = r794;
            }(d219 || (d219 = {})), function (s793) {
                var t793 = function (k794) {
                    function l794() {
                        return null !== k794 && k794.apply(this, arguments) || this;
                    }
                    return c219(l794, k794), l794.prototype._onClear = function () {
                        this.order = 0, this.name = "", this.type = 0, this.target = null, this.root = null, this.bone = null;
                    }, l794;
                }(s793.BaseObject);
                s793.ConstraintData = t793;
                var u793 = function (g794) {
                    function h794() {
                        return null !== g794 && g794.apply(this, arguments) || this;
                    }
                    return c219(h794, g794), h794.toString = function () {
                        return "[class dragonBones.IKConstraintData]";
                    }, h794.prototype._onClear = function () {
                        g794.prototype._onClear.call(this), this.scaleEnabled = !1, this.bendPositive = !1, this.weight = 1;
                    }, h794;
                }(t793);
                s793.IKConstraintData = u793;
                var v793 = function (z793) {
                    function a794() {
                        var f794 = null !== z793 && z793.apply(this, arguments) || this;
                        return f794.bones = [], f794;
                    }
                    return c219(a794, z793), a794.toString = function () {
                        return "[class dragonBones.PathConstraintData]";
                    }, a794.prototype._onClear = function () {
                        z793.prototype._onClear.call(this), this.pathSlot = null, this.pathDisplayData = null, this.bones.length = 0, this.positionMode = 0, this.spacingMode = 1, this.rotateMode = 1, this.position = 0, this.spacing = 0, this.rotateOffset = 0, this.rotateMix = 0, this.translateMix = 0;
                    }, a794.prototype.AddBone = function (e794) {
                        this.bones.push(e794);
                    }, a794;
                }(t793);
                s793.PathConstraintData = v793;
            }(d219 || (d219 = {})), function (l793) {
                var m793 = function (o793) {
                    function p793() {
                        return null !== o793 && o793.apply(this, arguments) || this;
                    }
                    return c219(p793, o793), p793.toString = function () {
                        return "[class dragonBones.CanvasData]";
                    }, p793.prototype._onClear = function () {
                        this.hasBackground = !1, this.color = 0, this.x = 0, this.y = 0, this.width = 0, this.height = 0;
                    }, p793;
                }(l793.BaseObject);
                l793.CanvasData = m793;
            }(d219 || (d219 = {})), function (n792) {
                var o792 = function (q792) {
                    function r792() {
                        var k793 = null !== q792 && q792.apply(this, arguments) || this;
                        return k793.displays = {}, k793;
                    }
                    return c219(r792, q792), r792.toString = function () {
                        return "[class dragonBones.SkinData]";
                    }, r792.prototype._onClear = function () {
                        for (var g793 in this.displays) {
                            for (var h793 = 0, i793 = this.displays[g793]; h793 < i793.length; h793++) {
                                var j793 = i793[h793];
                                null !== j793 && j793.returnToPool();
                            }
                            delete this.displays[g793];
                        }
                        this.name = "", this.parent = null;
                    }, r792.prototype.addDisplay = function (e793, f793) {
                        e793 in this.displays || (this.displays[e793] = []), null !== f793 && (f793.parent = this), this.displays[e793].push(f793);
                    }, r792.prototype.getDisplay = function (y792, z792) {
                        var a793 = this.getDisplays(y792);
                        if (null !== a793)
                            for (var b793 = 0, c793 = a793; b793 < c793.length; b793++) {
                                var d793 = c793[b793];
                                if (null !== d793 && d793.name === z792)
                                    return d793;
                            }
                        return null;
                    }, r792.prototype.getDisplays = function (x792) {
                        return x792 in this.displays ? this.displays[x792] : null;
                    }, r792;
                }(n792.BaseObject);
                n792.SkinData = o792;
            }(d219 || (d219 = {})), function (e790) {
                var f790 = function () {
                    function j792() {
                        this.weight = null;
                    }
                    return j792.prototype.clear = function () {
                        this.isShared || null === this.weight || this.weight.returnToPool(), this.isShared = !1, this.inheritDeform = !1, this.offset = 0, this.data = null, this.weight = null;
                    }, j792.prototype.shareFrom = function (m792) {
                        this.isShared = !0, this.offset = m792.offset, this.weight = m792.weight;
                    }, j792;
                }();
                e790.VerticesData = f790;
                var g790 = function (f792) {
                    function g792() {
                        var i792 = null !== f792 && f792.apply(this, arguments) || this;
                        return i792.transform = new e790.Transform(), i792;
                    }
                    return c219(g792, f792), g792.prototype._onClear = function () {
                        this.name = "", this.path = "", this.transform.identity(), this.parent = null;
                    }, g792;
                }(e790.BaseObject);
                e790.DisplayData = g790;
                var h790 = function (a792) {
                    function b792() {
                        var e792 = null !== a792 && a792.apply(this, arguments) || this;
                        return e792.pivot = new e790.Point(), e792;
                    }
                    return c219(b792, a792), b792.toString = function () {
                        return "[class dragonBones.ImageDisplayData]";
                    }, b792.prototype._onClear = function () {
                        a792.prototype._onClear.call(this), this.type = 0, this.pivot.clear(), this.texture = null;
                    }, b792;
                }(g790);
                e790.ImageDisplayData = h790;
                var i790 = function (r791) {
                    function s791() {
                        var z791 = null !== r791 && r791.apply(this, arguments) || this;
                        return z791.actions = [], z791;
                    }
                    return c219(s791, r791), s791.toString = function () {
                        return "[class dragonBones.ArmatureDisplayData]";
                    }, s791.prototype._onClear = function () {
                        r791.prototype._onClear.call(this);
                        for (var x791 = 0, y791 = this.actions; x791 < y791.length; x791++)
                            y791[x791].returnToPool();
                        this.type = 1, this.inheritAnimation = !1, this.actions.length = 0, this.armature = null;
                    }, s791.prototype.addAction = function (w791) {
                        this.actions.push(w791);
                    }, s791;
                }(g790);
                e790.ArmatureDisplayData = i790;
                var j790 = function (m791) {
                    function n791() {
                        var q791 = null !== m791 && m791.apply(this, arguments) || this;
                        return q791.vertices = new f790(), q791;
                    }
                    return c219(n791, m791), n791.toString = function () {
                        return "[class dragonBones.MeshDisplayData]";
                    }, n791.prototype._onClear = function () {
                        m791.prototype._onClear.call(this), this.type = 2, this.vertices.clear(), this.texture = null;
                    }, n791;
                }(g790);
                e790.MeshDisplayData = j790;
                var k790 = function (h791) {
                    function i791() {
                        var l791 = null !== h791 && h791.apply(this, arguments) || this;
                        return l791.boundingBox = null, l791;
                    }
                    return c219(i791, h791), i791.toString = function () {
                        return "[class dragonBones.BoundingBoxDisplayData]";
                    }, i791.prototype._onClear = function () {
                        h791.prototype._onClear.call(this), null !== this.boundingBox && this.boundingBox.returnToPool(), this.type = 3, this.boundingBox = null;
                    }, i791;
                }(g790);
                e790.BoundingBoxDisplayData = k790;
                var l790 = function (c791) {
                    function d791() {
                        var g791 = null !== c791 && c791.apply(this, arguments) || this;
                        return g791.vertices = new f790(), g791.curveLengths = [], g791;
                    }
                    return c219(d791, c791), d791.toString = function () {
                        return "[class dragonBones.PathDisplayData]";
                    }, d791.prototype._onClear = function () {
                        c791.prototype._onClear.call(this), this.type = 4, this.closed = !1, this.constantSpeed = !1, this.vertices.clear(), this.curveLengths.length = 0;
                    }, d791;
                }(g790);
                e790.PathDisplayData = l790;
                var m790 = function (v790) {
                    function w790() {
                        var b791 = null !== v790 && v790.apply(this, arguments) || this;
                        return b791.bones = [], b791;
                    }
                    return c219(w790, v790), w790.toString = function () {
                        return "[class dragonBones.WeightData]";
                    }, w790.prototype._onClear = function () {
                        this.count = 0, this.offset = 0, this.bones.length = 0;
                    }, w790.prototype.addBone = function (a791) {
                        this.bones.push(a791);
                    }, w790;
                }(e790.BaseObject);
                e790.WeightData = m790;
            }(d219 || (d219 = {})), function (x783) {
                var y783 = function (b790) {
                    function c790() {
                        return null !== b790 && b790.apply(this, arguments) || this;
                    }
                    return c219(c790, b790), c790.prototype._onClear = function () {
                        this.color = 0, this.width = 0, this.height = 0;
                    }, c790;
                }(x783.BaseObject);
                x783.BoundingBoxData = y783;
                var z783 = function (f788) {
                    function g788() {
                        return null !== f788 && f788.apply(this, arguments) || this;
                    }
                    return c219(g788, f788), g788.toString = function () {
                        return "[class dragonBones.RectangleBoundingBoxData]";
                    }, g788._computeOutCode = function (u789, v789, w789, x789, y789, z789) {
                        var a790 = 0;
                        return u789 < w789 ? a790 |= 1 : u789 > y789 && (a790 |= 2), v789 < x789 ? a790 |= 4 : v789 > z789 && (a790 |= 8), a790;
                    }, g788.rectangleIntersectsSegment = function (a789, b789, c789, d789, e789, f789, g789, h789, i789, j789, k789) {
                        void 0 === i789 && (i789 = null), void 0 === j789 && (j789 = null), void 0 === k789 && (k789 = null);
                        var l789 = a789 > e789 && a789 < g789 && b789 > f789 && b789 < h789, m789 = c789 > e789 && c789 < g789 && d789 > f789 && d789 < h789;
                        if (l789 && m789)
                            return -1;
                        for (var n789 = 0, o789 = g788._computeOutCode(a789, b789, e789, f789, g789, h789), p789 = g788._computeOutCode(c789, d789, e789, f789, g789, h789);;) {
                            if (0 == (o789 | p789)) {
                                n789 = 2;
                                break;
                            }
                            if (0 != (o789 & p789))
                                break;
                            var q789 = 0, r789 = 0, s789 = 0, t789 = 0 !== o789 ? o789 : p789;
                            0 != (4 & t789) ? (q789 = a789 + (c789 - a789) * (f789 - b789) / (d789 - b789), r789 = f789, null !== k789 && (s789 = .5 * -Math.PI)) : 0 != (8 & t789) ? (q789 = a789 + (c789 - a789) * (h789 - b789) / (d789 - b789), r789 = h789, null !== k789 && (s789 = .5 * Math.PI)) : 0 != (2 & t789) ? (r789 = b789 + (d789 - b789) * (g789 - a789) / (c789 - a789), q789 = g789, null !== k789 && (s789 = 0)) : 0 != (1 & t789) && (r789 = b789 + (d789 - b789) * (e789 - a789) / (c789 - a789), q789 = e789, null !== k789 && (s789 = Math.PI)), t789 === o789 ? (a789 = q789, b789 = r789, o789 = g788._computeOutCode(a789, b789, e789, f789, g789, h789), null !== k789 && (k789.x = s789)) : (c789 = q789, d789 = r789, p789 = g788._computeOutCode(c789, d789, e789, f789, g789, h789), null !== k789 && (k789.y = s789));
                        }
                        return n789 && (l789 ? (n789 = 2, null !== i789 && (i789.x = c789, i789.y = d789), null !== j789 && (j789.x = c789, j789.y = c789), null !== k789 && (k789.x = k789.y + Math.PI)) : m789 ? (n789 = 1, null !== i789 && (i789.x = a789, i789.y = b789), null !== j789 && (j789.x = a789, j789.y = b789), null !== k789 && (k789.y = k789.x + Math.PI)) : (n789 = 3, null !== i789 && (i789.x = a789, i789.y = b789), null !== j789 && (j789.x = c789, j789.y = d789))), n789;
                    }, g788.prototype._onClear = function () {
                        f788.prototype._onClear.call(this), this.type = 0;
                    }, g788.prototype.containsPoint = function (w788, x788) {
                        var y788 = .5 * this.width;
                        if (w788 >= -y788 && w788 <= y788) {
                            var z788 = .5 * this.height;
                            if (x788 >= -z788 && x788 <= z788)
                                return !0;
                        }
                        return !1;
                    }, g788.prototype.intersectsSegment = function (n788, o788, p788, q788, r788, s788, t788) {
                        void 0 === r788 && (r788 = null), void 0 === s788 && (s788 = null), void 0 === t788 && (t788 = null);
                        var u788 = .5 * this.width, v788 = .5 * this.height;
                        return g788.rectangleIntersectsSegment(n788, o788, p788, q788, -u788, -v788, u788, v788, r788, s788, t788);
                    }, g788;
                }(y783);
                x783.RectangleBoundingBoxData = z783;
                var a784 = function (l786) {
                    function m786() {
                        return null !== l786 && l786.apply(this, arguments) || this;
                    }
                    return c219(m786, l786), m786.toString = function () {
                        return "[class dragonBones.EllipseData]";
                    }, m786.ellipseIntersectsSegment = function (d787, e787, f787, g787, h787, i787, j787, k787, l787, m787, n787) {
                        void 0 === l787 && (l787 = null), void 0 === m787 && (m787 = null), void 0 === n787 && (n787 = null);
                        var o787 = j787 / k787, p787 = o787 * o787, q787 = f787 - d787, r787 = (g787 *= o787) - (e787 *= o787), s787 = Math.sqrt(q787 * q787 + r787 * r787), t787 = q787 / s787, u787 = r787 / s787, v787 = (h787 - d787) * t787 + (i787 - e787) * u787, w787 = j787 * j787, x787 = w787 - (d787 * d787 + e787 * e787) + v787 * v787, y787 = 0;
                        if (x787 >= 0) {
                            var z787 = Math.sqrt(x787), a788 = v787 - z787, b788 = v787 + z787, c788 = a788 < 0 ? -1 : a788 <= s787 ? 0 : 1, d788 = b788 < 0 ? -1 : b788 <= s787 ? 0 : 1, e788 = c788 * d788;
                            if (e788 < 0)
                                return -1;
                            0 === e788 && (-1 === c788 ? (y787 = 2, f787 = d787 + b788 * t787, g787 = (e787 + b788 * u787) / o787, null !== l787 && (l787.x = f787, l787.y = g787), null !== m787 && (m787.x = f787, m787.y = g787), null !== n787 && (n787.x = Math.atan2(g787 / w787 * p787, f787 / w787), n787.y = n787.x + Math.PI)) : 1 === d788 ? (y787 = 1, d787 += a788 * t787, e787 = (e787 + a788 * u787) / o787, null !== l787 && (l787.x = d787, l787.y = e787), null !== m787 && (m787.x = d787, m787.y = e787), null !== n787 && (n787.x = Math.atan2(e787 / w787 * p787, d787 / w787), n787.y = n787.x + Math.PI)) : (y787 = 3, null !== l787 && (l787.x = d787 + a788 * t787, l787.y = (e787 + a788 * u787) / o787, null !== n787 && (n787.x = Math.atan2(l787.y / w787 * p787, l787.x / w787))), null !== m787 && (m787.x = d787 + b788 * t787, m787.y = (e787 + b788 * u787) / o787, null !== n787 && (n787.y = Math.atan2(m787.y / w787 * p787, m787.x / w787)))));
                        }
                        return y787;
                    }, m786.prototype._onClear = function () {
                        l786.prototype._onClear.call(this), this.type = 1;
                    }, m786.prototype.containsPoint = function (z786, a787) {
                        var b787 = .5 * this.width;
                        if (z786 >= -b787 && z786 <= b787) {
                            var c787 = .5 * this.height;
                            if (a787 >= -c787 && a787 <= c787)
                                return a787 *= b787 / c787, Math.sqrt(z786 * z786 + a787 * a787) <= b787;
                        }
                        return !1;
                    }, m786.prototype.intersectsSegment = function (s786, t786, u786, v786, w786, x786, y786) {
                        return void 0 === w786 && (w786 = null), void 0 === x786 && (x786 = null), void 0 === y786 && (y786 = null), m786.ellipseIntersectsSegment(s786, t786, u786, v786, 0, 0, .5 * this.width, .5 * this.height, w786, x786, y786);
                    }, m786;
                }(y783);
                x783.EllipseBoundingBoxData = a784;
                var b784 = function (g784) {
                    function h784() {
                        var k786 = null !== g784 && g784.apply(this, arguments) || this;
                        return k786.vertices = [], k786;
                    }
                    return c219(h784, g784), h784.toString = function () {
                        return "[class dragonBones.PolygonBoundingBoxData]";
                    }, h784.polygonIntersectsSegment = function (f785, g785, h785, i785, j785, k785, l785, m785) {
                        void 0 === k785 && (k785 = null), void 0 === l785 && (l785 = null), void 0 === m785 && (m785 = null), f785 === h785 && (f785 = h785 + 1e-6), g785 === i785 && (g785 = i785 + 1e-6);
                        for (var n785 = j785.length, o785 = f785 - h785, p785 = g785 - i785, q785 = f785 * i785 - g785 * h785, r785 = 0, s785 = j785[n785 - 2], t785 = j785[n785 - 1], u785 = 0, v785 = 0, w785 = 0, x785 = 0, y785 = 0, z785 = 0, a786 = 0; a786 < n785; a786 += 2) {
                            var b786 = j785[a786], c786 = j785[a786 + 1];
                            s785 === b786 && (s785 = b786 + 1e-4), t785 === c786 && (t785 = c786 + 1e-4);
                            var d786 = s785 - b786, e786 = t785 - c786, f786 = s785 * c786 - t785 * b786, g786 = o785 * e786 - p785 * d786, h786 = (q785 * d786 - o785 * f786) / g786;
                            if ((h786 >= s785 && h786 <= b786 || h786 >= b786 && h786 <= s785) && (0 === o785 || h786 >= f785 && h786 <= h785 || h786 >= h785 && h786 <= f785)) {
                                var i786 = (q785 * e786 - p785 * f786) / g786;
                                if ((i786 >= t785 && i786 <= c786 || i786 >= c786 && i786 <= t785) && (0 === p785 || i786 >= g785 && i786 <= i785 || i786 >= i785 && i786 <= g785)) {
                                    if (null === l785) {
                                        w785 = h786, x785 = i786, y785 = h786, z785 = i786, r785++, null !== m785 && (m785.x = Math.atan2(c786 - t785, b786 - s785) - .5 * Math.PI, m785.y = m785.x);
                                        break;
                                    }
                                    var j786 = h786 - f785;
                                    j786 < 0 && (j786 = -j786), 0 === r785 ? (u785 = j786, v785 = j786, w785 = h786, x785 = i786, y785 = h786, z785 = i786, null !== m785 && (m785.x = Math.atan2(c786 - t785, b786 - s785) - .5 * Math.PI, m785.y = m785.x)) : (j786 < u785 && (u785 = j786, w785 = h786, x785 = i786, null !== m785 && (m785.x = Math.atan2(c786 - t785, b786 - s785) - .5 * Math.PI)), j786 > v785 && (v785 = j786, y785 = h786, z785 = i786, null !== m785 && (m785.y = Math.atan2(c786 - t785, b786 - s785) - .5 * Math.PI))), r785++;
                                }
                            }
                            s785 = b786, t785 = c786;
                        }
                        return 1 === r785 ? (null !== k785 && (k785.x = w785, k785.y = x785), null !== l785 && (l785.x = w785, l785.y = x785), null !== m785 && (m785.y = m785.x + Math.PI)) : r785 > 1 && (r785++, null !== k785 && (k785.x = w785, k785.y = x785), null !== l785 && (l785.x = y785, l785.y = z785)), r785;
                    }, h784.prototype._onClear = function () {
                        g784.prototype._onClear.call(this), this.type = 2, this.x = 0, this.y = 0, this.vertices.length = 0;
                    }, h784.prototype.containsPoint = function (v784, w784) {
                        var x784 = !1;
                        if (v784 >= this.x && v784 <= this.width && w784 >= this.y && w784 <= this.height)
                            for (var y784 = 0, z784 = this.vertices.length, a785 = z784 - 2; y784 < z784; y784 += 2) {
                                var b785 = this.vertices[a785 + 1], c785 = this.vertices[y784 + 1];
                                if (c785 < w784 && b785 >= w784 || b785 < w784 && c785 >= w784) {
                                    var d785 = this.vertices[a785], e785 = this.vertices[y784];
                                    (w784 - c785) * (d785 - e785) / (b785 - c785) + e785 < v784 && (x784 = !x784);
                                }
                                a785 = y784;
                            }
                        return x784;
                    }, h784.prototype.intersectsSegment = function (n784, o784, p784, q784, r784, s784, t784) {
                        void 0 === r784 && (r784 = null), void 0 === s784 && (s784 = null), void 0 === t784 && (t784 = null);
                        var u784 = 0;
                        return 0 !== z783.rectangleIntersectsSegment(n784, o784, p784, q784, this.x, this.y, this.x + this.width, this.y + this.height, null, null, null) && (u784 = h784.polygonIntersectsSegment(n784, o784, p784, q784, this.vertices, r784, s784, t784)), u784;
                    }, h784;
                }(y783);
                x783.PolygonBoundingBoxData = b784;
            }(d219 || (d219 = {})), function (e781) {
                var f781 = function (n781) {
                    function o781() {
                        var w783 = null !== n781 && n781.apply(this, arguments) || this;
                        return w783.cachedFrames = [], w783.boneTimelines = {}, w783.surfaceTimelines = {}, w783.slotTimelines = {}, w783.constraintTimelines = {}, w783.animationTimelines = {}, w783.boneCachedFrameIndices = {}, w783.slotCachedFrameIndices = {}, w783.actionTimeline = null, w783.zOrderTimeline = null, w783;
                    }
                    return c219(o781, n781), o781.toString = function () {
                        return "[class dragonBones.AnimationData]";
                    }, o781.prototype._onClear = function () {
                        for (var l783 in this.boneTimelines) {
                            for (var m783 = 0, n783 = this.boneTimelines[l783]; m783 < n783.length; m783++)
                                n783[m783].returnToPool();
                            delete this.boneTimelines[l783];
                        }
                        for (var l783 in this.surfaceTimelines) {
                            for (var o783 = 0, p783 = this.surfaceTimelines[l783]; o783 < p783.length; o783++)
                                p783[o783].returnToPool();
                            delete this.surfaceTimelines[l783];
                        }
                        for (var l783 in this.slotTimelines) {
                            for (var q783 = 0, r783 = this.slotTimelines[l783]; q783 < r783.length; q783++)
                                r783[q783].returnToPool();
                            delete this.slotTimelines[l783];
                        }
                        for (var l783 in this.constraintTimelines) {
                            for (var s783 = 0, t783 = this.constraintTimelines[l783]; s783 < t783.length; s783++)
                                t783[s783].returnToPool();
                            delete this.constraintTimelines[l783];
                        }
                        for (var l783 in this.animationTimelines) {
                            for (var u783 = 0, v783 = this.animationTimelines[l783]; u783 < v783.length; u783++)
                                v783[u783].returnToPool();
                            delete this.animationTimelines[l783];
                        }
                        for (var l783 in this.boneCachedFrameIndices)
                            delete this.boneCachedFrameIndices[l783];
                        for (var l783 in this.slotCachedFrameIndices)
                            delete this.slotCachedFrameIndices[l783];
                        null !== this.actionTimeline && this.actionTimeline.returnToPool(), null !== this.zOrderTimeline && this.zOrderTimeline.returnToPool(), this.frameIntOffset = 0, this.frameFloatOffset = 0, this.frameOffset = 0, this.frameCount = 0, this.playTimes = 0, this.duration = 0, this.scale = 1, this.fadeInTime = 0, this.cacheFrameRate = 0, this.name = "", this.cachedFrames.length = 0, this.actionTimeline = null, this.zOrderTimeline = null, this.parent = null;
                    }, o781.prototype.cacheFrames = function (a783) {
                        if (!(this.cacheFrameRate > 0)) {
                            this.cacheFrameRate = Math.max(Math.ceil(a783 * this.scale), 1);
                            var b783 = Math.ceil(this.cacheFrameRate * this.duration) + 1;
                            this.cachedFrames.length = b783;
                            for (var c783 = 0, d783 = this.cacheFrames.length; c783 < d783; ++c783)
                                this.cachedFrames[c783] = !1;
                            for (var e783 = 0, f783 = this.parent.sortedBones; e783 < f783.length; e783++) {
                                var g783 = f783[e783];
                                for (c783 = 0, d783 = (j783 = new Array(b783)).length; c783 < d783; ++c783)
                                    j783[c783] = -1;
                                this.boneCachedFrameIndices[g783.name] = j783;
                            }
                            for (var h783 = 0, i783 = this.parent.sortedSlots; h783 < i783.length; h783++) {
                                var j783, k783 = i783[h783];
                                for (c783 = 0, d783 = (j783 = new Array(b783)).length; c783 < d783; ++c783)
                                    j783[c783] = -1;
                                this.slotCachedFrameIndices[k783.name] = j783;
                            }
                        }
                    }, o781.prototype.addBoneTimeline = function (x782, y782) {
                        var z782 = x782.name in this.boneTimelines ? this.boneTimelines[x782.name] : this.boneTimelines[x782.name] = [];
                        z782.indexOf(y782) < 0 && z782.push(y782);
                    }, o781.prototype.addSurfaceTimeline = function (u782, v782) {
                        var w782 = u782.name in this.surfaceTimelines ? this.surfaceTimelines[u782.name] : this.surfaceTimelines[u782.name] = [];
                        w782.indexOf(v782) < 0 && w782.push(v782);
                    }, o781.prototype.addSlotTimeline = function (r782, s782) {
                        var t782 = r782.name in this.slotTimelines ? this.slotTimelines[r782.name] : this.slotTimelines[r782.name] = [];
                        t782.indexOf(s782) < 0 && t782.push(s782);
                    }, o781.prototype.addConstraintTimeline = function (o782, p782) {
                        var q782 = o782.name in this.constraintTimelines ? this.constraintTimelines[o782.name] : this.constraintTimelines[o782.name] = [];
                        q782.indexOf(p782) < 0 && q782.push(p782);
                    }, o781.prototype.addAnimationTimeline = function (l782, m782) {
                        var n782 = l782 in this.animationTimelines ? this.animationTimelines[l782] : this.animationTimelines[l782] = [];
                        n782.indexOf(m782) < 0 && n782.push(m782);
                    }, o781.prototype.getBoneTimelines = function (k782) {
                        return k782 in this.boneTimelines ? this.boneTimelines[k782] : null;
                    }, o781.prototype.getSurfaceTimelines = function (j782) {
                        return j782 in this.surfaceTimelines ? this.surfaceTimelines[j782] : null;
                    }, o781.prototype.getSlotTimelines = function (i782) {
                        return i782 in this.slotTimelines ? this.slotTimelines[i782] : null;
                    }, o781.prototype.getConstraintTimelines = function (h782) {
                        return h782 in this.constraintTimelines ? this.constraintTimelines[h782] : null;
                    }, o781.prototype.getAnimationTimelines = function (g782) {
                        return g782 in this.animationTimelines ? this.animationTimelines[g782] : null;
                    }, o781.prototype.getBoneCachedFrameIndices = function (f782) {
                        return f782 in this.boneCachedFrameIndices ? this.boneCachedFrameIndices[f782] : null;
                    }, o781.prototype.getSlotCachedFrameIndices = function (e782) {
                        return e782 in this.slotCachedFrameIndices ? this.slotCachedFrameIndices[e782] : null;
                    }, o781;
                }(e781.BaseObject);
                e781.AnimationData = f781;
                var g781 = function (j781) {
                    function k781() {
                        return null !== j781 && j781.apply(this, arguments) || this;
                    }
                    return c219(k781, j781), k781.toString = function () {
                        return "[class dragonBones.TimelineData]";
                    }, k781.prototype._onClear = function () {
                        this.type = 10, this.offset = 0, this.frameIndicesOffset = -1;
                    }, k781;
                }(e781.BaseObject);
                e781.TimelineData = g781;
            }(d219 || (d219 = {})), function (v779) {
                var w779 = function (y779) {
                    function z779() {
                        var d781 = null !== y779 && y779.apply(this, arguments) || this;
                        return d781.boneMask = [], d781;
                    }
                    return c219(z779, y779), z779.toString = function () {
                        return "[class dragonBones.AnimationConfig]";
                    }, z779.prototype._onClear = function () {
                        this.pauseFadeOut = !0, this.fadeOutMode = 4, this.fadeOutTweenType = 1, this.fadeOutTime = -1, this.actionEnabled = !0, this.additiveBlending = !1, this.displayControl = !0, this.pauseFadeIn = !0, this.resetToPose = !0, this.fadeInTweenType = 1, this.playTimes = -1, this.layer = 0, this.position = 0, this.duration = -1, this.timeScale = -100, this.weight = 1, this.fadeInTime = -1, this.autoFadeOutTime = -1, this.name = "", this.animation = "", this.group = "", this.boneMask.length = 0;
                    }, z779.prototype.clear = function () {
                        this._onClear();
                    }, z779.prototype.copyFrom = function (a781) {
                        this.pauseFadeOut = a781.pauseFadeOut, this.fadeOutMode = a781.fadeOutMode, this.autoFadeOutTime = a781.autoFadeOutTime, this.fadeOutTweenType = a781.fadeOutTweenType, this.actionEnabled = a781.actionEnabled, this.additiveBlending = a781.additiveBlending, this.displayControl = a781.displayControl, this.pauseFadeIn = a781.pauseFadeIn, this.resetToPose = a781.resetToPose, this.playTimes = a781.playTimes, this.layer = a781.layer, this.position = a781.position, this.duration = a781.duration, this.timeScale = a781.timeScale, this.fadeInTime = a781.fadeInTime, this.fadeOutTime = a781.fadeOutTime, this.fadeInTweenType = a781.fadeInTweenType, this.weight = a781.weight, this.name = a781.name, this.animation = a781.animation, this.group = a781.group, this.boneMask.length = a781.boneMask.length;
                        for (var b781 = 0, c781 = this.boneMask.length; b781 < c781; ++b781)
                            this.boneMask[b781] = a781.boneMask[b781];
                    }, z779.prototype.containsBoneMask = function (z780) {
                        return 0 === this.boneMask.length || this.boneMask.indexOf(z780) >= 0;
                    }, z779.prototype.addBoneMask = function (s780, t780, u780) {
                        void 0 === u780 && (u780 = !0);
                        var v780 = s780.getBone(t780);
                        if (null !== v780 && (this.boneMask.indexOf(t780) < 0 && this.boneMask.push(t780), u780))
                            for (var w780 = 0, x780 = s780.getBones(); w780 < x780.length; w780++) {
                                var y780 = x780[w780];
                                this.boneMask.indexOf(y780.name) < 0 && v780.contains(y780) && this.boneMask.push(y780.name);
                            }
                    }, z779.prototype.removeBoneMask = function (h780, i780, j780) {
                        void 0 === j780 && (j780 = !0);
                        var k780 = this.boneMask.indexOf(i780);
                        if (k780 >= 0 && this.boneMask.splice(k780, 1), j780) {
                            var l780 = h780.getBone(i780);
                            if (null !== l780)
                                if (this.boneMask.length > 0)
                                    for (var m780 = 0, n780 = h780.getBones(); m780 < n780.length; m780++) {
                                        var o780 = n780[m780], p780 = this.boneMask.indexOf(o780.name);
                                        p780 >= 0 && l780.contains(o780) && this.boneMask.splice(p780, 1);
                                    }
                                else
                                    for (var q780 = 0, r780 = h780.getBones(); q780 < r780.length; q780++)
                                        (o780 = r780[q780]) !== l780 && (l780.contains(o780) || this.boneMask.push(o780.name));
                        }
                    }, z779;
                }(v779.BaseObject);
                v779.AnimationConfig = w779;
            }(d219 || (d219 = {})), function (w778) {
                var x778 = function (i779) {
                    function j779() {
                        var u779 = null !== i779 && i779.apply(this, arguments) || this;
                        return u779.textures = {}, u779;
                    }
                    return c219(j779, i779), j779.prototype._onClear = function () {
                        for (var t779 in this.textures)
                            this.textures[t779].returnToPool(), delete this.textures[t779];
                        this.autoSearch = !1, this.width = 0, this.height = 0, this.scale = 1, this.name = "", this.imagePath = "";
                    }, j779.prototype.copyFrom = function (q779) {
                        for (var r779 in this.autoSearch = q779.autoSearch, this.scale = q779.scale, this.width = q779.width, this.height = q779.height, this.name = q779.name, this.imagePath = q779.imagePath, this.textures)
                            this.textures[r779].returnToPool(), delete this.textures[r779];
                        for (var r779 in q779.textures) {
                            var s779 = this.createTexture();
                            s779.copyFrom(q779.textures[r779]), this.textures[r779] = s779;
                        }
                    }, j779.prototype.addTexture = function (p779) {
                        p779.name in this.textures ? console.warn("Same texture: " + p779.name) : (p779.parent = this, this.textures[p779.name] = p779);
                    }, j779.prototype.getTexture = function (o779) {
                        return o779 in this.textures ? this.textures[o779] : null;
                    }, j779;
                }(w778.BaseObject);
                w778.TextureAtlasData = x778;
                var y778 = function (b779) {
                    function c779() {
                        var h779 = null !== b779 && b779.apply(this, arguments) || this;
                        return h779.region = new w778.Rectangle(), h779.frame = null, h779;
                    }
                    return c219(c779, b779), c779.createRectangle = function () {
                        return new w778.Rectangle();
                    }, c779.prototype._onClear = function () {
                        this.rotated = !1, this.name = "", this.region.clear(), this.parent = null, this.frame = null;
                    }, c779.prototype.copyFrom = function (g779) {
                        this.rotated = g779.rotated, this.name = g779.name, this.region.copyFrom(g779.region), this.parent = g779.parent, null === this.frame && null !== g779.frame ? this.frame = c779.createRectangle() : null !== this.frame && null === g779.frame && (this.frame = null), null !== this.frame && null !== g779.frame && this.frame.copyFrom(g779.frame);
                    }, c779;
                }(w778.BaseObject);
                w778.TextureData = y778;
            }(d219 || (d219 = {})), function (d778) {
                var e778 = function (g778) {
                    function h778() {
                        var v778 = null !== g778 && g778.apply(this, arguments) || this;
                        return v778.vertices = [], v778.bones = [], v778;
                    }
                    return c219(h778, g778), h778.toString = function () {
                        return "[class dragonBones.DeformVertices]";
                    }, h778.prototype._onClear = function () {
                        this.verticesDirty = !1, this.vertices.length = 0, this.bones.length = 0, this.verticesData = null;
                    }, h778.prototype.init = function (p778, q778) {
                        if (this.verticesData = p778, null !== this.verticesData) {
                            var r778;
                            r778 = null !== this.verticesData.weight ? 2 * this.verticesData.weight.count : 2 * this.verticesData.data.intArray[this.verticesData.offset + 0], this.verticesDirty = !0, this.vertices.length = r778, this.bones.length = 0;
                            for (var s778 = 0, t778 = this.vertices.length; s778 < t778; ++s778)
                                this.vertices[s778] = 0;
                            if (null !== this.verticesData.weight)
                                for (s778 = 0, t778 = this.verticesData.weight.bones.length; s778 < t778; ++s778) {
                                    var u778 = q778.getBone(this.verticesData.weight.bones[s778].name);
                                    this.bones.push(u778);
                                }
                        }
                        else
                            this.verticesDirty = !1, this.vertices.length = 0, this.bones.length = 0, this.verticesData = null;
                    }, h778.prototype.isBonesUpdate = function () {
                        for (var m778 = 0, n778 = this.bones; m778 < n778.length; m778++) {
                            var o778 = n778[m778];
                            if (null !== o778 && o778._childrenTransformDirty)
                                return !0;
                        }
                        return !1;
                    }, h778;
                }(d778.BaseObject);
                d778.DeformVertices = e778;
            }(d219 || (d219 = {})), function (n772) {
                var o772 = function (q772) {
                    function r772() {
                        var c778 = null !== q772 && q772.apply(this, arguments) || this;
                        return c778._bones = [], c778._slots = [], c778._constraints = [], c778._actions = [], c778._animation = null, c778._proxy = null, c778._replaceTextureAtlasData = null, c778._clock = null, c778;
                    }
                    return c219(r772, q772), r772.toString = function () {
                        return "[class dragonBones.Armature]";
                    }, r772._onSortSlots = function (a778, b778) {
                        return a778._zOrder > b778._zOrder ? 1 : -1;
                    }, r772.prototype._onClear = function () {
                        null !== this._clock && this._clock.remove(this);
                        for (var s777 = 0, t777 = this._bones; s777 < t777.length; s777++)
                            t777[s777].returnToPool();
                        for (var u777 = 0, v777 = this._slots; u777 < v777.length; u777++)
                            v777[u777].returnToPool();
                        for (var w777 = 0, x777 = this._constraints; w777 < x777.length; w777++)
                            x777[w777].returnToPool();
                        for (var y777 = 0, z777 = this._actions; y777 < z777.length; y777++)
                            z777[y777].returnToPool();
                        null !== this._animation && this._animation.returnToPool(), null !== this._proxy && this._proxy.dbClear(), null !== this._replaceTextureAtlasData && this._replaceTextureAtlasData.returnToPool(), this.inheritAnimation = !0, this.userData = null, this._lockUpdate = !1, this._slotsDirty = !0, this._zOrderDirty = !1, this._flipX = !1, this._flipY = !1, this._cacheFrameIndex = -1, this._bones.length = 0, this._slots.length = 0, this._constraints.length = 0, this._actions.length = 0, this._armatureData = null, this._animation = null, this._proxy = null, this._display = null, this._replaceTextureAtlasData = null, this._replacedTexture = null, this._dragonBones = null, this._clock = null, this._parent = null;
                    }, r772.prototype._sortZOrder = function (j777, k777) {
                        var l777 = this._armatureData.sortedSlots, m777 = null === j777;
                        if (this._zOrderDirty || !m777) {
                            for (var n777 = 0, o777 = l777.length; n777 < o777; ++n777) {
                                var p777 = m777 ? n777 : j777[k777 + n777];
                                if (!(p777 < 0 || p777 >= o777)) {
                                    var q777 = l777[p777], r777 = this.getSlot(q777.name);
                                    null !== r777 && r777._setZorder(n777);
                                }
                            }
                            this._slotsDirty = !0, this._zOrderDirty = !m777;
                        }
                    }, r772.prototype._addBone = function (i777) {
                        this._bones.indexOf(i777) < 0 && this._bones.push(i777);
                    }, r772.prototype._addSlot = function (h777) {
                        this._slots.indexOf(h777) < 0 && this._slots.push(h777);
                    }, r772.prototype._addConstraint = function (g777) {
                        this._constraints.indexOf(g777) < 0 && this._constraints.push(g777);
                    }, r772.prototype._bufferAction = function (e777, f777) {
                        this._actions.indexOf(e777) < 0 && (f777 ? this._actions.push(e777) : this._actions.unshift(e777));
                    }, r772.prototype.dispose = function () {
                        null !== this._armatureData && (this._lockUpdate = !0, this._dragonBones.bufferObject(this));
                    }, r772.prototype.init = function (a777, b777, c777, d777) {
                        null === this._armatureData && (this._armatureData = a777, this._animation = n772.BaseObject.borrowObject(n772.Animation), this._proxy = b777, this._display = c777, this._dragonBones = d777, this._proxy.dbInit(this), this._animation.init(this), this._animation.animations = this._armatureData.animations);
                    }, r772.prototype.advanceTime = function (o776) {
                        if (!this._lockUpdate)
                            if (null !== this._armatureData) {
                                if (null !== this._armatureData.parent) {
                                    var p776 = this._cacheFrameIndex;
                                    if (this._animation.advanceTime(o776), this._slotsDirty && (this._slotsDirty = !1, this._slots.sort(r772._onSortSlots)), this._cacheFrameIndex < 0 || this._cacheFrameIndex !== p776) {
                                        var q776 = 0, r776 = 0;
                                        for (q776 = 0, r776 = this._bones.length; q776 < r776; ++q776)
                                            this._bones[q776].update(this._cacheFrameIndex);
                                        for (q776 = 0, r776 = this._slots.length; q776 < r776; ++q776)
                                            this._slots[q776].update(this._cacheFrameIndex);
                                    }
                                    if (this._actions.length > 0) {
                                        this._lockUpdate = !0;
                                        for (var s776 = 0, t776 = this._actions; s776 < t776.length; s776++) {
                                            var u776 = t776[s776], v776 = u776.actionData;
                                            if (null !== v776 && 0 === v776.type)
                                                if (null !== u776.slot)
                                                    null !== (y776 = u776.slot.childArmature) && y776.animation.fadeIn(v776.name);
                                                else if (null !== u776.bone)
                                                    for (var w776 = 0, x776 = this.getSlots(); w776 < x776.length; w776++) {
                                                        var y776, z776 = x776[w776];
                                                        z776.parent === u776.bone && null !== (y776 = z776.childArmature) && y776.animation.fadeIn(v776.name);
                                                    }
                                                else
                                                    this._animation.fadeIn(v776.name);
                                            u776.returnToPool();
                                        }
                                        this._actions.length = 0, this._lockUpdate = !1;
                                    }
                                    this._proxy.dbUpdate();
                                }
                                else
                                    console.warn("The armature data has been disposed.\nPlease make sure dispose armature before call factory.clear().");
                            }
                            else
                                console.warn("The armature has been disposed.");
                    }, r772.prototype.invalidUpdate = function (e776, f776) {
                        if (void 0 === e776 && (e776 = null), void 0 === f776 && (f776 = !1), null !== e776 && e776.length > 0) {
                            if (null !== (k776 = this.getBone(e776)) && (k776.invalidUpdate(), f776))
                                for (var g776 = 0, h776 = this._slots; g776 < h776.length; g776++)
                                    (n776 = h776[g776]).parent === k776 && n776.invalidUpdate();
                        }
                        else {
                            for (var i776 = 0, j776 = this._bones; i776 < j776.length; i776++) {
                                var k776;
                                (k776 = j776[i776]).invalidUpdate();
                            }
                            if (f776)
                                for (var l776 = 0, m776 = this._slots; l776 < m776.length; l776++) {
                                    var n776;
                                    (n776 = m776[l776]).invalidUpdate();
                                }
                        }
                    }, r772.prototype.containsPoint = function (z775, a776) {
                        for (var b776 = 0, c776 = this._slots; b776 < c776.length; b776++) {
                            var d776 = c776[b776];
                            if (d776.containsPoint(z775, a776))
                                return d776;
                        }
                        return null;
                    }, r772.prototype.intersectsSegment = function (d775, e775, f775, g775, h775, i775, j775) {
                        void 0 === h775 && (h775 = null), void 0 === i775 && (i775 = null), void 0 === j775 && (j775 = null);
                        for (var k775 = d775 === f775, l775 = 0, m775 = 0, n775 = 0, o775 = 0, p775 = 0, q775 = 0, r775 = 0, s775 = 0, t775 = null, u775 = null, v775 = 0, w775 = this._slots; v775 < w775.length; v775++) {
                            var x775 = w775[v775];
                            if (x775.intersectsSegment(d775, e775, f775, g775, h775, i775, j775) > 0) {
                                if (null === h775 && null === i775) {
                                    t775 = x775;
                                    break;
                                }
                                var y775;
                                null !== h775 && ((y775 = k775 ? h775.y - e775 : h775.x - d775) < 0 && (y775 = -y775), (null === t775 || y775 < l775) && (l775 = y775, n775 = h775.x, o775 = h775.y, t775 = x775, j775 && (r775 = j775.x))), null !== i775 && ((y775 = i775.x - d775) < 0 && (y775 = -y775), (null === u775 || y775 > m775) && (m775 = y775, p775 = i775.x, q775 = i775.y, u775 = x775, null !== j775 && (s775 = j775.y)));
                            }
                        }
                        return null !== t775 && null !== h775 && (h775.x = n775, h775.y = o775, null !== j775 && (j775.x = r775)), null !== u775 && null !== i775 && (i775.x = p775, i775.y = q775, null !== j775 && (j775.y = s775)), t775;
                    }, r772.prototype.getBone = function (z774) {
                        for (var a775 = 0, b775 = this._bones; a775 < b775.length; a775++) {
                            var c775 = b775[a775];
                            if (c775.name === z774)
                                return c775;
                        }
                        return null;
                    }, r772.prototype.getBoneByDisplay = function (x774) {
                        var y774 = this.getSlotByDisplay(x774);
                        return null !== y774 ? y774.parent : null;
                    }, r772.prototype.getSlot = function (t774) {
                        for (var u774 = 0, v774 = this._slots; u774 < v774.length; u774++) {
                            var w774 = v774[u774];
                            if (w774.name === t774)
                                return w774;
                        }
                        return null;
                    }, r772.prototype.getSlotByDisplay = function (p774) {
                        if (null !== p774)
                            for (var q774 = 0, r774 = this._slots; q774 < r774.length; q774++) {
                                var s774 = r774[q774];
                                if (s774.display === p774)
                                    return s774;
                            }
                        return null;
                    }, r772.prototype.getBones = function () {
                        return this._bones;
                    }, r772.prototype.getSlots = function () {
                        return this._slots;
                    }, Object.defineProperty(r772.prototype, "flipX", {
                        get: function () {
                            return this._flipX;
                        },
                        set: function (o774) {
                            this._flipX !== o774 && (this._flipX = o774, this.invalidUpdate());
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "flipY", {
                        get: function () {
                            return this._flipY;
                        },
                        set: function (n774) {
                            this._flipY !== n774 && (this._flipY = n774, this.invalidUpdate());
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "cacheFrameRate", {
                        get: function () {
                            return this._armatureData.cacheFrameRate;
                        },
                        set: function (j774) {
                            if (this._armatureData.cacheFrameRate !== j774) {
                                this._armatureData.cacheFrames(j774);
                                for (var k774 = 0, l774 = this._slots; k774 < l774.length; k774++) {
                                    var m774 = l774[k774].childArmature;
                                    null !== m774 && (m774.cacheFrameRate = j774);
                                }
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "name", {
                        get: function () {
                            return this._armatureData.name;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "armatureData", {
                        get: function () {
                            return this._armatureData;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "animation", {
                        get: function () {
                            return this._animation;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "proxy", {
                        get: function () {
                            return this._proxy;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "eventDispatcher", {
                        get: function () {
                            return this._proxy;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "display", {
                        get: function () {
                            return this._display;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "replacedTexture", {
                        get: function () {
                            return this._replacedTexture;
                        },
                        set: function (f774) {
                            if (this._replacedTexture !== f774) {
                                null !== this._replaceTextureAtlasData && (this._replaceTextureAtlasData.returnToPool(), this._replaceTextureAtlasData = null), this._replacedTexture = f774;
                                for (var g774 = 0, h774 = this._slots; g774 < h774.length; g774++) {
                                    var i774 = h774[g774];
                                    i774.invalidUpdate(), i774.update(-1);
                                }
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "clock", {
                        get: function () {
                            return this._clock;
                        },
                        set: function (b774) {
                            if (this._clock !== b774) {
                                null !== this._clock && this._clock.remove(this), this._clock = b774, this._clock && this._clock.add(this);
                                for (var c774 = 0, d774 = this._slots; c774 < d774.length; c774++) {
                                    var e774 = d774[c774].childArmature;
                                    null !== e774 && (e774.clock = this._clock);
                                }
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(r772.prototype, "parent", {
                        get: function () {
                            return this._parent;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), r772.prototype.replaceTexture = function (a774) {
                        this.replacedTexture = a774;
                    }, r772.prototype.hasEventListener = function (z773) {
                        return this._proxy.hasDBEventListener(z773);
                    }, r772.prototype.addEventListener = function (w773, x773, y773) {
                        this._proxy.addDBEventListener(w773, x773, y773);
                    }, r772.prototype.removeEventListener = function (t773, u773, v773) {
                        this._proxy.removeDBEventListener(t773, u773, v773);
                    }, r772.prototype.enableAnimationCache = function (s773) {
                        console.warn("Deprecated."), this.cacheFrameRate = s773;
                    }, r772.prototype.getDisplay = function () {
                        return this._display;
                    }, r772;
                }(n772.BaseObject);
                n772.Armature = o772;
            }(d219 || (d219 = {})), function (f772) {
                var g772 = function (i772) {
                    function j772() {
                        var m772 = null !== i772 && i772.apply(this, arguments) || this;
                        return m772.globalTransformMatrix = new f772.Matrix(), m772.global = new f772.Transform(), m772.offset = new f772.Transform(), m772;
                    }
                    return c219(j772, i772), j772.prototype._onClear = function () {
                        this.globalTransformMatrix.identity(), this.global.identity(), this.offset.identity(), this.origin = null, this.userData = null, this._globalDirty = !1, this._armature = null;
                    }, j772.prototype.updateGlobalTransform = function () {
                        this._globalDirty && (this._globalDirty = !1, this.global.fromMatrix(this.globalTransformMatrix));
                    }, Object.defineProperty(j772.prototype, "armature", {
                        get: function () {
                            return this._armature;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), j772._helpMatrix = new f772.Matrix(), j772._helpTransform = new f772.Transform(), j772._helpPoint = new f772.Point(), j772;
                }(f772.BaseObject);
                f772.TransformObject = g772;
            }(d219 || (d219 = {})), function (z769) {
                var a770 = function (c770) {
                    function d770() {
                        var e772 = null !== c770 && c770.apply(this, arguments) || this;
                        return e772.animationPose = new z769.Transform(), e772._blendState = new z769.BlendState(), e772;
                    }
                    return c219(d770, c770), d770.toString = function () {
                        return "[class dragonBones.Bone]";
                    }, d770.prototype._onClear = function () {
                        c770.prototype._onClear.call(this), this.offsetMode = 1, this.animationPose.identity(), this._transformDirty = !1, this._childrenTransformDirty = !1, this._localDirty = !0, this._hasConstraint = !1, this._visible = !0, this._cachedFrameIndex = -1, this._blendState.clear(), this._boneData = null, this._parent = null, this._cachedFrameIndices = null;
                    }, d770.prototype._updateGlobalTransformMatrix = function (p771) {
                        var q771 = this._boneData, r771 = this.global, s771 = this.globalTransformMatrix, t771 = this.origin, u771 = this.offset, v771 = this.animationPose, w771 = this._parent, x771 = this._armature.flipX, y771 = this._armature.flipY === z769.DragonBones.yDown, z771 = null !== w771, a772 = 0;
                        if (1 === this.offsetMode ? null !== t771 ? (r771.x = t771.x + u771.x + v771.x, r771.scaleX = t771.scaleX * u771.scaleX * v771.scaleX, r771.scaleY = t771.scaleY * u771.scaleY * v771.scaleY, z769.DragonBones.yDown ? (r771.y = t771.y + u771.y + v771.y, r771.skew = t771.skew + u771.skew + v771.skew, r771.rotation = t771.rotation + u771.rotation + v771.rotation) : (r771.y = t771.y - u771.y + v771.y, r771.skew = t771.skew - u771.skew + v771.skew, r771.rotation = t771.rotation - u771.rotation + v771.rotation)) : (r771.copyFrom(u771), z769.DragonBones.yDown || (r771.y = -r771.y, r771.skew = -r771.skew, r771.rotation = -r771.rotation), r771.add(v771)) : 0 === this.offsetMode ? null !== t771 ? r771.copyFrom(t771).add(v771) : r771.copyFrom(v771) : (z771 = !1, r771.copyFrom(u771), z769.DragonBones.yDown || (r771.y = -r771.y, r771.skew = -r771.skew, r771.rotation = -r771.rotation)), z771) {
                            var b772 = 0 === w771._boneData.type ? w771.globalTransformMatrix : w771._getGlobalTransformMatrix(r771.x, r771.y);
                            if (q771.inheritScale)
                                q771.inheritRotation || (w771.updateGlobalTransform(), a772 = x771 && y771 ? r771.rotation - (w771.global.rotation + Math.PI) : x771 ? r771.rotation + w771.global.rotation + Math.PI : y771 ? r771.rotation + w771.global.rotation : r771.rotation - w771.global.rotation, r771.rotation = a772), r771.toMatrix(s771), s771.concat(b772), q771.inheritTranslation ? (r771.x = s771.tx, r771.y = s771.ty) : (s771.tx = r771.x, s771.ty = r771.y), p771 ? r771.fromMatrix(s771) : this._globalDirty = !0;
                            else {
                                if (q771.inheritTranslation) {
                                    var c772 = r771.x, d772 = r771.y;
                                    r771.x = b772.a * c772 + b772.c * d772 + b772.tx, r771.y = b772.b * c772 + b772.d * d772 + b772.ty;
                                }
                                else
                                    x771 && (r771.x = -r771.x), y771 && (r771.y = -r771.y);
                                q771.inheritRotation ? (w771.updateGlobalTransform(), a772 = w771.global.scaleX < 0 ? r771.rotation + w771.global.rotation + Math.PI : r771.rotation + w771.global.rotation, b772.a * b772.d - b772.b * b772.c < 0 && (a772 -= 2 * r771.rotation, (x771 !== y771 || q771.inheritReflection) && (r771.skew += Math.PI), z769.DragonBones.yDown || (r771.skew = -r771.skew)), r771.rotation = a772) : (x771 || y771) && (x771 && y771 ? a772 = r771.rotation + Math.PI : (a772 = x771 ? Math.PI - r771.rotation : -r771.rotation, r771.skew += Math.PI), r771.rotation = a772), r771.toMatrix(s771);
                            }
                        }
                        else
                            (x771 || y771) && (x771 && (r771.x = -r771.x), y771 && (r771.y = -r771.y), x771 && y771 ? a772 = r771.rotation + Math.PI : (a772 = x771 ? Math.PI - r771.rotation : -r771.rotation, r771.skew += Math.PI), r771.rotation = a772), r771.toMatrix(s771);
                    }, d770.prototype.init = function (n771, o771) {
                        null === this._boneData && (this._boneData = n771, this._armature = o771, null !== this._boneData.parent && (this._parent = this._armature.getBone(this._boneData.parent.name)), this._armature._addBone(this), this.origin = this._boneData.transform);
                    }, d770.prototype.update = function (f771) {
                        if (this._blendState.dirty = !1, f771 >= 0 && null !== this._cachedFrameIndices) {
                            var g771 = this._cachedFrameIndices[f771];
                            if (g771 >= 0 && this._cachedFrameIndex === g771)
                                this._transformDirty = !1;
                            else if (g771 >= 0)
                                this._transformDirty = !0, this._cachedFrameIndex = g771;
                            else {
                                if (this._hasConstraint)
                                    for (var h771 = 0, i771 = this._armature._constraints; h771 < i771.length; h771++)
                                        (l771 = i771[h771])._root === this && l771.update();
                                this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty ? (this._transformDirty = !0, this._cachedFrameIndex = -1) : this._cachedFrameIndex >= 0 ? (this._transformDirty = !1, this._cachedFrameIndices[f771] = this._cachedFrameIndex) : (this._transformDirty = !0, this._cachedFrameIndex = -1);
                            }
                        }
                        else {
                            if (this._hasConstraint)
                                for (var j771 = 0, k771 = this._armature._constraints; j771 < k771.length; j771++) {
                                    var l771;
                                    (l771 = k771[j771])._root === this && l771.update();
                                }
                            (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) && (f771 = -1, this._transformDirty = !0, this._cachedFrameIndex = -1);
                        }
                        if (this._transformDirty) {
                            if (this._transformDirty = !1, this._childrenTransformDirty = !0, this._cachedFrameIndex < 0) {
                                var m771 = f771 >= 0;
                                this._localDirty && this._updateGlobalTransformMatrix(m771), m771 && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[f771] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
                            }
                            else
                                this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
                        }
                        else
                            this._childrenTransformDirty && (this._childrenTransformDirty = !1);
                        this._localDirty = !0;
                    }, d770.prototype.updateByConstraint = function () {
                        this._localDirty && (this._localDirty = !1, (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) && this._updateGlobalTransformMatrix(!0), this._transformDirty = !0);
                    }, d770.prototype.invalidUpdate = function () {
                        this._transformDirty = !0;
                    }, d770.prototype.contains = function (d771) {
                        if (d771 === this)
                            return !1;
                        for (var e771 = d771; e771 !== this && null !== e771;)
                            e771 = e771.parent;
                        return e771 === this;
                    }, Object.defineProperty(d770.prototype, "boneData", {
                        get: function () {
                            return this._boneData;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d770.prototype, "visible", {
                        get: function () {
                            return this._visible;
                        },
                        set: function (z770) {
                            if (this._visible !== z770) {
                                this._visible = z770;
                                for (var a771 = 0, b771 = this._armature.getSlots(); a771 < b771.length; a771++) {
                                    var c771 = b771[a771];
                                    c771.parent === this && c771._updateVisible();
                                }
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d770.prototype, "name", {
                        get: function () {
                            return this._boneData.name;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d770.prototype, "parent", {
                        get: function () {
                            return this._parent;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), d770.prototype.getBones = function () {
                        console.warn("Deprecated.");
                        for (var v770 = new Array(), w770 = 0, x770 = this._armature.getBones(); w770 < x770.length; w770++) {
                            var y770 = x770[w770];
                            y770.parent === this && v770.push(y770);
                        }
                        return v770;
                    }, d770.prototype.getSlots = function () {
                        console.warn("Deprecated.");
                        for (var r770 = new Array(), s770 = 0, t770 = this._armature.getSlots(); s770 < t770.length; s770++) {
                            var u770 = t770[s770];
                            u770.parent === this && r770.push(u770);
                        }
                        return r770;
                    }, Object.defineProperty(d770.prototype, "slot", {
                        get: function () {
                            console.warn("Deprecated.");
                            for (var o770 = 0, p770 = this._armature.getSlots(); o770 < p770.length; o770++) {
                                var q770 = p770[o770];
                                if (q770.parent === this)
                                    return q770;
                            }
                            return null;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), d770;
                }(z769.TransformObject);
                z769.Bone = a770;
            }(d219 || (d219 = {})), function (c766) {
                var d766 = function (f766) {
                    function g766() {
                        var y769 = null !== f766 && f766.apply(this, arguments) || this;
                        return y769._vertices = [], y769._deformVertices = [], y769._hullCache = [], y769._matrixCahce = [], y769;
                    }
                    return c219(g766, f766), g766.toString = function () {
                        return "[class dragonBones.Surface]";
                    }, g766.prototype._onClear = function () {
                        f766.prototype._onClear.call(this), this._dX = 0, this._dY = 0, this._k = 0, this._kX = 0, this._kY = 0, this._vertices.length = 0, this._deformVertices.length = 0, this._matrixCahce.length = 0, this._hullCache.length = 0;
                    }, g766.prototype._getAffineTransform = function (h769, i769, j769, k769, l769, m769, n769, o769, p769, q769, r769, s769, t769) {
                        var u769 = n769 - l769, v769 = o769 - m769, w769 = p769 - l769, x769 = q769 - m769;
                        r769.rotation = Math.atan2(v769, u769), r769.skew = Math.atan2(x769, w769) - .5 * Math.PI - r769.rotation, t769 && (r769.rotation += Math.PI), r769.scaleX = Math.sqrt(u769 * u769 + v769 * v769) / j769, r769.scaleY = Math.sqrt(w769 * w769 + x769 * x769) / k769, r769.toMatrix(s769), r769.x = s769.tx = l769 - (s769.a * h769 + s769.c * i769), r769.y = s769.ty = m769 - (s769.b * h769 + s769.d * i769);
                    }, g766.prototype._updateVertices = function () {
                        var y768 = this._boneData.vertices, z768 = this._vertices, a769 = this._deformVertices;
                        if (null !== this._parent) {
                            if (1 === this._parent._boneData.type)
                                for (var b769 = 0, c769 = y768.length; b769 < c769; b769 += 2) {
                                    var d769 = y768[b769] + a769[b769], e769 = y768[b769 + 1] + a769[b769], f769 = this._parent._getGlobalTransformMatrix(d769, e769);
                                    z768[b769] = f769.a * d769 + f769.c * e769 + f769.tx, z768[b769 + 1] = f769.b * d769 + f769.d * e769 + f769.ty;
                                }
                            else {
                                var g769 = this._parent.globalTransformMatrix;
                                for (b769 = 0, c769 = y768.length; b769 < c769; b769 += 2)
                                    d769 = y768[b769] + a769[b769], e769 = y768[b769 + 1] + a769[b769 + 1], z768[b769] = g769.a * d769 + g769.c * e769 + g769.tx, z768[b769 + 1] = g769.b * d769 + g769.d * e769 + g769.ty;
                            }
                        }
                        else
                            for (b769 = 0, c769 = y768.length; b769 < c769; b769 += 2)
                                z768[b769] = y768[b769] + a769[b769], z768[b769 + 1] = y768[b769 + 1] + a769[b769 + 1];
                    }, g766.prototype._updateGlobalTransformMatrix = function () {
                        var g768 = 2 * this._boneData.segmentX, h768 = this._vertices.length - 2, i768 = this._vertices[0], j768 = this._vertices[1], k768 = this._vertices[g768], l768 = this._vertices[g768 + 1], m768 = this._vertices[h768], n768 = this._vertices[h768 + 1], o768 = this._vertices[h768 - g768], p768 = this._vertices[h768 - g768 + 1], q768 = i768 + .5 * (m768 - i768), r768 = j768 + .5 * (n768 - j768), s768 = q768 + .5 * (k768 + .5 * (o768 - k768) - q768), t768 = r768 + .5 * (l768 + .5 * (p768 - l768) - r768), u768 = k768 + .5 * (m768 - k768), v768 = l768 + .5 * (n768 - l768), w768 = o768 + .5 * (m768 - o768), x768 = p768 + .5 * (n768 - p768);
                        this._globalDirty = !1, this._getAffineTransform(0, 0, 200, 200, s768, t768, u768, v768, w768, x768, this.global, this.globalTransformMatrix, !1);
                    }, g766.prototype._getGlobalTransformMatrix = function (i767, j767) {
                        var k767 = 1e3;
                        if (i767 < -k767 || k767 < i767 || j767 < -k767 || k767 < j767)
                            return this.globalTransformMatrix;
                        var l767 = !1, m767 = 200, n767 = this._boneData, o767 = n767.segmentX, p767 = n767.segmentY, q767 = 2 * n767.segmentX, r767 = this._dX, s767 = this._dY, t767 = Math.floor((i767 + m767) / r767), u767 = Math.floor((j767 + m767) / s767), v767 = 0, w767 = t767 * r767 - m767, x767 = u767 * s767 - m767, y767 = this._matrixCahce, z767 = g766._helpMatrix;
                        if (i767 < -m767) {
                            if (j767 < -m767 || j767 >= m767)
                                return this.globalTransformMatrix;
                            if (v767 = 7 * (2 * (o767 * (p767 + 1) + 2 * o767 + p767 + u767) + ((l767 = j767 > this._kX * (i767 + m767) + x767) ? 1 : 0)), this._matrixCahce[v767] > 0)
                                z767.copyFromArray(y767, v767 + 1);
                            else {
                                var a768 = u767 * (q767 + 2), b768 = this._hullCache[4], c768 = this._hullCache[5], d768 = this._hullCache[2] - (p767 - u767) * b768, e768 = this._hullCache[3] - (p767 - u767) * c768, f768 = this._vertices;
                                l767 ? this._getAffineTransform(-m767, x767 + s767, 800, s767, f768[a768 + q767 + 2], f768[a768 + q767 + 3], d768 + b768, e768 + c768, f768[a768], f768[a768 + 1], g766._helpTransform, z767, !0) : this._getAffineTransform(-k767, x767, 800, s767, d768, e768, f768[a768], f768[a768 + 1], d768 + b768, e768 + c768, g766._helpTransform, z767, !1), y767[v767] = 1, y767[v767 + 1] = z767.a, y767[v767 + 2] = z767.b, y767[v767 + 3] = z767.c, y767[v767 + 4] = z767.d, y767[v767 + 5] = z767.tx, y767[v767 + 6] = z767.ty;
                            }
                        }
                        else if (i767 >= m767) {
                            if (j767 < -m767 || j767 >= m767)
                                return this.globalTransformMatrix;
                            v767 = 7 * (2 * (o767 * (p767 + 1) + o767 + u767) + ((l767 = j767 > this._kX * (i767 - k767) + x767) ? 1 : 0)), this._matrixCahce[v767] > 0 ? z767.copyFromArray(y767, v767 + 1) : (a768 = (u767 + 1) * (q767 + 2) - 2, b768 = this._hullCache[4], c768 = this._hullCache[5], d768 = this._hullCache[0] + u767 * b768, e768 = this._hullCache[1] + u767 * c768, f768 = this._vertices, l767 ? this._getAffineTransform(k767, x767 + s767, 800, s767, d768 + b768, e768 + c768, f768[a768 + q767 + 2], f768[a768 + q767 + 3], d768, e768, g766._helpTransform, z767, !0) : this._getAffineTransform(m767, x767, 800, s767, f768[a768], f768[a768 + 1], d768, e768, f768[a768 + q767 + 2], f768[a768 + q767 + 3], g766._helpTransform, z767, !1), y767[v767] = 1, y767[v767 + 1] = z767.a, y767[v767 + 2] = z767.b, y767[v767 + 3] = z767.c, y767[v767 + 4] = z767.d, y767[v767 + 5] = z767.tx, y767[v767 + 6] = z767.ty);
                        }
                        else if (j767 < -m767) {
                            if (i767 < -m767 || i767 >= m767)
                                return this.globalTransformMatrix;
                            v767 = 7 * (o767 * (p767 + 1) + 2 * t767 + ((l767 = j767 > this._kY * (i767 - w767 - r767) - k767) ? 1 : 0)), this._matrixCahce[v767] > 0 ? z767.copyFromArray(y767, v767 + 1) : (a768 = 2 * t767, b768 = this._hullCache[10], c768 = this._hullCache[11], d768 = this._hullCache[8] + t767 * b768, e768 = this._hullCache[9] + t767 * c768, f768 = this._vertices, l767 ? this._getAffineTransform(w767 + r767, -m767, r767, 800, f768[a768 + 2], f768[a768 + 3], f768[a768], f768[a768 + 1], d768 + b768, e768 + c768, g766._helpTransform, z767, !0) : this._getAffineTransform(w767, -k767, r767, 800, d768, e768, d768 + b768, e768 + c768, f768[a768], f768[a768 + 1], g766._helpTransform, z767, !1), y767[v767] = 1, y767[v767 + 1] = z767.a, y767[v767 + 2] = z767.b, y767[v767 + 3] = z767.c, y767[v767 + 4] = z767.d, y767[v767 + 5] = z767.tx, y767[v767 + 6] = z767.ty);
                        }
                        else if (j767 >= m767) {
                            if (i767 < -m767 || i767 >= m767)
                                return this.globalTransformMatrix;
                            v767 = 7 * (2 * (o767 * (p767 + 1) + o767 + p767 + u767) + ((l767 = j767 > this._kY * (i767 - w767 - r767) + m767) ? 1 : 0)), this._matrixCahce[v767] > 0 ? z767.copyFromArray(y767, v767 + 1) : (a768 = p767 * (q767 + 2) + 2 * t767, b768 = this._hullCache[10], c768 = this._hullCache[11], d768 = this._hullCache[6] - (o767 - t767) * b768, e768 = this._hullCache[7] - (o767 - t767) * c768, f768 = this._vertices, l767 ? this._getAffineTransform(w767 + r767, k767, r767, 800, d768 + b768, e768 + c768, d768, e768, f768[a768 + 2], f768[a768 + 3], g766._helpTransform, z767, !0) : this._getAffineTransform(w767, m767, r767, 800, f768[a768], f768[a768 + 1], f768[a768 + 2], f768[a768 + 3], d768, e768, g766._helpTransform, z767, !1), y767[v767] = 1, y767[v767 + 1] = z767.a, y767[v767 + 2] = z767.b, y767[v767 + 3] = z767.c, y767[v767 + 4] = z767.d, y767[v767 + 5] = z767.tx, y767[v767 + 6] = z767.ty);
                        }
                        else
                            v767 = 7 * (2 * (o767 * u767 + t767) + ((l767 = j767 > this._k * (i767 - w767 - r767) + x767) ? 1 : 0)), this._matrixCahce[v767] > 0 ? z767.copyFromArray(y767, v767 + 1) : (a768 = 2 * t767 + u767 * (q767 + 2), f768 = this._vertices, l767 ? this._getAffineTransform(w767 + r767, x767 + s767, r767, s767, f768[a768 + q767 + 4], f768[a768 + q767 + 5], f768[a768 + q767 + 2], f768[a768 + q767 + 3], f768[a768 + 2], f768[a768 + 3], g766._helpTransform, z767, !0) : this._getAffineTransform(w767, x767, r767, s767, f768[a768], f768[a768 + 1], f768[a768 + 2], f768[a768 + 3], f768[a768 + q767 + 2], f768[a768 + q767 + 3], g766._helpTransform, z767, !1), y767[v767] = 1, y767[v767 + 1] = z767.a, y767[v767 + 2] = z767.b, y767[v767 + 3] = z767.c, y767[v767 + 4] = z767.d, y767[v767 + 5] = z767.tx, y767[v767 + 6] = z767.ty);
                        return z767;
                    }, g766.prototype.init = function (c767, d767) {
                        if (null === this._boneData) {
                            f766.prototype.init.call(this, c767, d767);
                            var e767 = c767.segmentX, f767 = c767.segmentY, g767 = c767.vertices.length;
                            this._dX = 400 / e767, this._dY = 400 / f767, this._k = -this._dY / this._dX, this._kX = -this._dY / 800, this._kY = -800 / this._dX, this._vertices.length = g767, this._deformVertices.length = g767, this._matrixCahce.length = 14 * (e767 * f767 + 2 * e767 + 2 * f767), this._hullCache.length = 10;
                            for (var h767 = 0; h767 < g767; ++h767)
                                this._deformVertices[h767] = 0;
                        }
                    }, g766.prototype.update = function (p766) {
                        if (this._blendState.dirty = !1, p766 >= 0 && null !== this._cachedFrameIndices) {
                            var q766 = this._cachedFrameIndices[p766];
                            if (q766 >= 0 && this._cachedFrameIndex === q766)
                                this._transformDirty = !1;
                            else if (q766 >= 0)
                                this._transformDirty = !0, this._cachedFrameIndex = q766;
                            else {
                                if (this._hasConstraint)
                                    for (var r766 = 0, s766 = this._armature._constraints; r766 < s766.length; r766++)
                                        (v766 = s766[r766])._root === this && v766.update();
                                this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty ? (this._transformDirty = !0, this._cachedFrameIndex = -1) : this._cachedFrameIndex >= 0 ? (this._transformDirty = !1, this._cachedFrameIndices[p766] = this._cachedFrameIndex) : (this._transformDirty = !0, this._cachedFrameIndex = -1);
                            }
                        }
                        else {
                            if (this._hasConstraint)
                                for (var t766 = 0, u766 = this._armature._constraints; t766 < u766.length; t766++) {
                                    var v766;
                                    (v766 = u766[t766])._root === this && v766.update();
                                }
                            (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) && (p766 = -1, this._transformDirty = !0, this._cachedFrameIndex = -1);
                        }
                        if (this._transformDirty) {
                            this._transformDirty = !1, this._childrenTransformDirty = !0;
                            for (var w766 = 0, x766 = this._matrixCahce.length; w766 < x766; w766 += 7)
                                this._matrixCahce[w766] = -1;
                            if (this._updateVertices(), this._cachedFrameIndex < 0) {
                                var y766 = p766 >= 0;
                                this._localDirty && this._updateGlobalTransformMatrix(y766), y766 && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[p766] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
                            }
                            else
                                this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
                            var z766 = 2 * this.global.x, a767 = 2 * this.global.y, b767 = g766._helpPoint;
                            this.globalTransformMatrix.transformPoint(1e3, -200, b767), this._hullCache[0] = b767.x, this._hullCache[1] = b767.y, this._hullCache[2] = z766 - b767.x, this._hullCache[3] = a767 - b767.y, this.globalTransformMatrix.transformPoint(0, this._dY, b767, !0), this._hullCache[4] = b767.x, this._hullCache[5] = b767.y, this.globalTransformMatrix.transformPoint(200, 1e3, b767), this._hullCache[6] = b767.x, this._hullCache[7] = b767.y, this._hullCache[8] = z766 - b767.x, this._hullCache[9] = a767 - b767.y, this.globalTransformMatrix.transformPoint(this._dX, 0, b767, !0), this._hullCache[10] = b767.x, this._hullCache[11] = b767.y;
                        }
                        else
                            this._childrenTransformDirty && (this._childrenTransformDirty = !1);
                        this._localDirty = !0;
                    }, g766;
                }(c766.Bone);
                c766.Surface = d766;
            }(d219 || (d219 = {})), function (z761) {
                var a762 = function (c762) {
                    function d762() {
                        var b766 = null !== c762 && c762.apply(this, arguments) || this;
                        return b766._localMatrix = new z761.Matrix(), b766._colorTransform = new z761.ColorTransform(), b766._displayDatas = [], b766._displayList = [], b766._deformVertices = null, b766._rawDisplay = null, b766._meshDisplay = null, b766;
                    }
                    return c219(d762, c762), d762.prototype._onClear = function () {
                        c762.prototype._onClear.call(this);
                        for (var v765 = [], w765 = 0, x765 = this._displayList; w765 < x765.length; w765++)
                            null !== (a766 = x765[w765]) && a766 !== this._rawDisplay && a766 !== this._meshDisplay && v765.indexOf(a766) < 0 && v765.push(a766);
                        for (var y765 = 0, z765 = v765; y765 < z765.length; y765++) {
                            var a766;
                            (a766 = z765[y765]) instanceof z761.Armature ? a766.dispose() : this._disposeDisplay(a766, !0);
                        }
                        null !== this._deformVertices && this._deformVertices.returnToPool(), null !== this._meshDisplay && this._meshDisplay !== this._rawDisplay && this._disposeDisplay(this._meshDisplay, !1), null !== this._rawDisplay && this._disposeDisplay(this._rawDisplay, !1), this.displayController = null, this._displayDirty = !1, this._zOrderDirty = !1, this._blendModeDirty = !1, this._colorDirty = !1, this._transformDirty = !1, this._visible = !0, this._blendMode = 0, this._displayIndex = -1, this._animationDisplayIndex = -1, this._zOrder = 0, this._cachedFrameIndex = -1, this._pivotX = 0, this._pivotY = 0, this._localMatrix.identity(), this._colorTransform.identity(), this._displayList.length = 0, this._displayDatas.length = 0, this._slotData = null, this._rawDisplayDatas = null, this._displayData = null, this._boundingBoxData = null, this._textureData = null, this._deformVertices = null, this._rawDisplay = null, this._meshDisplay = null, this._display = null, this._childArmature = null, this._parent = null, this._cachedFrameIndices = null;
                    }, d762.prototype._getDefaultRawDisplayData = function (s765) {
                        var t765 = this._armature._armatureData.defaultSkin;
                        if (null !== t765) {
                            var u765 = t765.getDisplays(this._slotData.name);
                            if (null !== u765)
                                return s765 < u765.length ? u765[s765] : null;
                        }
                        return null;
                    }, d762.prototype._updateDisplayData = function () {
                        var h765 = this._displayData, i765 = null !== this._deformVertices ? this._deformVertices.verticesData : null, j765 = this._textureData, k765 = null, l765 = null;
                        if (this._displayData = null, this._boundingBoxData = null, this._textureData = null, this._displayIndex >= 0 && (null !== this._rawDisplayDatas && (k765 = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null), null === k765 && (k765 = this._getDefaultRawDisplayData(this._displayIndex)), this._displayIndex < this._displayDatas.length && (this._displayData = this._displayDatas[this._displayIndex])), null !== this._displayData && (2 === this._displayData.type || 4 === this._displayData.type ? l765 = this._displayData.vertices : null !== k765 && (2 === k765.type || 4 === k765.type) && (l765 = k765.vertices), 3 === this._displayData.type ? this._boundingBoxData = this._displayData.boundingBox : null !== k765 && 3 === k765.type && (this._boundingBoxData = k765.boundingBox), (0 === this._displayData.type || 2 === this._displayData.type) && (this._textureData = this._displayData.texture)), this._displayData !== h765 || l765 !== i765 || this._textureData !== j765) {
                            if (null === l765 && null !== this._textureData) {
                                var m765 = this._displayData, n765 = this._textureData.parent.scale * this._armature._armatureData.scale, o765 = this._textureData.frame;
                                this._pivotX = m765.pivot.x, this._pivotY = m765.pivot.y;
                                var p765 = null !== o765 ? o765 : this._textureData.region, q765 = p765.width, r765 = p765.height;
                                this._textureData.rotated && null === o765 && (q765 = p765.height, r765 = p765.width), this._pivotX *= q765 * n765, this._pivotY *= r765 * n765, null !== o765 && (this._pivotX += o765.x * n765, this._pivotY += o765.y * n765), null !== this._displayData && null !== k765 && this._displayData !== k765 && (k765.transform.toMatrix(d762._helpMatrix), d762._helpMatrix.invert(), d762._helpMatrix.transformPoint(0, 0, d762._helpPoint), this._pivotX -= d762._helpPoint.x, this._pivotY -= d762._helpPoint.y, this._displayData.transform.toMatrix(d762._helpMatrix), d762._helpMatrix.invert(), d762._helpMatrix.transformPoint(0, 0, d762._helpPoint), this._pivotX += d762._helpPoint.x, this._pivotY += d762._helpPoint.y), z761.DragonBones.yDown || (this._pivotY = (this._textureData.rotated ? this._textureData.region.width : this._textureData.region.height) * n765 - this._pivotY);
                            }
                            else
                                this._pivotX = 0, this._pivotY = 0;
                            null !== k765 ? this.origin = k765.transform : null !== this._displayData ? this.origin = this._displayData.transform : this.origin = null, l765 !== i765 ? (null === this._deformVertices && (this._deformVertices = z761.BaseObject.borrowObject(z761.DeformVertices)), this._deformVertices.init(l765, this._armature)) : null !== this._deformVertices && this._textureData !== j765 && (this._deformVertices.verticesDirty = !0), this._displayDirty = !0, this._transformDirty = !0;
                        }
                    }, d762.prototype._updateDisplay = function () {
                        var x764 = null !== this._display ? this._display : this._rawDisplay, y764 = this._childArmature;
                        this._displayIndex >= 0 && this._displayIndex < this._displayList.length ? (this._display = this._displayList[this._displayIndex], null !== this._display && this._display instanceof z761.Armature ? (this._childArmature = this._display, this._display = this._childArmature.display) : this._childArmature = null) : (this._display = null, this._childArmature = null);
                        var z764 = null !== this._display ? this._display : this._rawDisplay;
                        if (z764 !== x764 && (this._onUpdateDisplay(), this._replaceDisplay(x764), this._transformDirty = !0, this._visibleDirty = !0, this._blendModeDirty = !0, this._colorDirty = !0), z764 !== this._rawDisplay && z764 !== this._meshDisplay || this._updateFrame(), this._childArmature !== y764 && (null !== y764 && (y764._parent = null, y764.clock = null, y764.inheritAnimation && y764.animation.reset()), null !== this._childArmature && (this._childArmature._parent = this, this._childArmature.clock = this._armature.clock, this._childArmature.inheritAnimation))) {
                            if (0 === this._childArmature.cacheFrameRate) {
                                var a765 = this._armature.cacheFrameRate;
                                0 !== a765 && (this._childArmature.cacheFrameRate = a765);
                            }
                            var b765 = null;
                            if (null !== this._displayData && 1 === this._displayData.type)
                                b765 = this._displayData.actions;
                            else if (this._displayIndex >= 0 && null !== this._rawDisplayDatas) {
                                var c765 = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null;
                                null === c765 && (c765 = this._getDefaultRawDisplayData(this._displayIndex)), null !== c765 && 1 === c765.type && (b765 = c765.actions);
                            }
                            if (null !== b765 && b765.length > 0)
                                for (var d765 = 0, e765 = b765; d765 < e765.length; d765++) {
                                    var f765 = e765[d765], g765 = z761.BaseObject.borrowObject(z761.EventObject);
                                    z761.EventObject.actionDataToInstance(f765, g765, this._armature), g765.slot = this, this._armature._bufferAction(g765, !1);
                                }
                            else
                                this._childArmature.animation.play();
                        }
                    }, d762.prototype._updateGlobalTransformMatrix = function (v764) {
                        var w764 = 0 === this._parent._boneData.type ? this._parent.globalTransformMatrix : this._parent._getGlobalTransformMatrix(this.global.x, this.global.y);
                        this.globalTransformMatrix.copyFrom(this._localMatrix), this.globalTransformMatrix.concat(w764), v764 ? this.global.fromMatrix(this.globalTransformMatrix) : this._globalDirty = !0;
                    }, d762.prototype._setDisplayIndex = function (t764, u764) {
                        if (void 0 === u764 && (u764 = !1), u764) {
                            if (this._animationDisplayIndex === t764)
                                return !1;
                            this._animationDisplayIndex = t764;
                        }
                        return this._displayIndex !== t764 && (this._displayIndex = t764, this._displayDirty = !0, this._updateDisplayData(), this._displayDirty);
                    }, d762.prototype._setZorder = function (s764) {
                        return this._zOrder, this._zOrder = s764, this._zOrderDirty = !0, this._zOrderDirty;
                    }, d762.prototype._setColor = function (r764) {
                        return this._colorTransform.copyFrom(r764), this._colorDirty = !0, this._colorDirty;
                    }, d762.prototype._setDisplayList = function (n764) {
                        if (null !== n764 && n764.length > 0) {
                            this._displayList.length !== n764.length && (this._displayList.length = n764.length);
                            for (var o764 = 0, p764 = n764.length; o764 < p764; ++o764) {
                                var q764 = n764[o764];
                                null !== q764 && q764 !== this._rawDisplay && q764 !== this._meshDisplay && !(q764 instanceof z761.Armature) && this._displayList.indexOf(q764) < 0 && this._initDisplay(q764, !0), this._displayList[o764] = q764;
                            }
                        }
                        else
                            this._displayList.length > 0 && (this._displayList.length = 0);
                        return this._displayIndex >= 0 && this._displayIndex < this._displayList.length ? this._displayDirty = this._display !== this._displayList[this._displayIndex] : this._displayDirty = null !== this._display, this._updateDisplayData(), this._displayDirty;
                    }, d762.prototype.init = function (i764, j764, k764, l764) {
                        if (null === this._slotData) {
                            this._slotData = i764, this._isFromCache = !1, this._visibleDirty = !0, this._blendModeDirty = !0, this._colorDirty = !0, this._blendMode = this._slotData.blendMode, this._zOrder = this._slotData.zOrder, this._colorTransform.copyFrom(this._slotData.color), this._rawDisplay = k764, this._meshDisplay = l764, this._armature = j764;
                            var m764 = this._armature.getBone(this._slotData.parent.name);
                            null !== m764 && (this._parent = m764), this._armature._addSlot(this), this._initDisplay(this._rawDisplay, !1), this._rawDisplay !== this._meshDisplay && this._initDisplay(this._meshDisplay, !1), this._onUpdateDisplay(), this._addDisplay();
                        }
                    }, d762.prototype.update = function (d764) {
                        if (this._isFromCache = !1, this._displayDirty && (this._displayDirty = !1, this._updateDisplay(), this._transformDirty && (null !== this.origin ? this.global.copyFrom(this.origin).add(this.offset).toMatrix(this._localMatrix) : this.global.copyFrom(this.offset).toMatrix(this._localMatrix))), this._zOrderDirty && (this._zOrderDirty = !1, this._updateZOrder()), d764 >= 0 && null !== this._cachedFrameIndices) {
                            var e764 = this._cachedFrameIndices[d764];
                            e764 >= 0 && this._cachedFrameIndex === e764 ? this._transformDirty = !1 : e764 >= 0 ? (this._transformDirty = !0, this._cachedFrameIndex = e764) : this._transformDirty || this._parent._childrenTransformDirty ? (this._transformDirty = !0, this._cachedFrameIndex = -1) : this._cachedFrameIndex >= 0 ? (this._transformDirty = !1, this._cachedFrameIndices[d764] = this._cachedFrameIndex) : (this._transformDirty = !0, this._cachedFrameIndex = -1);
                        }
                        else
                            (this._transformDirty || this._parent._childrenTransformDirty) && (d764 = -1, this._transformDirty = !0, this._cachedFrameIndex = -1);
                        if (null !== this._display) {
                            if (this._visibleDirty && (this._visibleDirty = !1, this._updateVisible()), this._blendModeDirty && (this._blendModeDirty = !1, this._updateBlendMode()), this._colorDirty && (this._colorDirty = !1, this._updateColor()), null !== this._deformVertices && null !== this._deformVertices.verticesData && this._display === this._meshDisplay) {
                                var f764 = null !== this._deformVertices.verticesData.weight, g764 = 0 !== this._parent._boneData.type;
                                if ((this._deformVertices.verticesDirty || f764 && this._deformVertices.isBonesUpdate() || g764 && this._parent._childrenTransformDirty) && (this._deformVertices.verticesDirty = !1, this._updateMesh()), f764 || g764)
                                    return;
                            }
                            if (this._transformDirty) {
                                if (this._transformDirty = !1, this._cachedFrameIndex < 0) {
                                    var h764 = d764 >= 0;
                                    this._updateGlobalTransformMatrix(h764), h764 && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[d764] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
                                }
                                else
                                    this._isFromCache = !0, this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
                                this._updateTransform();
                            }
                        }
                    }, d762.prototype.updateTransformAndMatrix = function () {
                        this._transformDirty && (this._transformDirty = !1, this._updateGlobalTransformMatrix(!1));
                    }, d762.prototype.replaceDisplayData = function (z763, a764) {
                        if (void 0 === a764 && (a764 = -1), a764 < 0 && (a764 = this._displayIndex < 0 ? 0 : this._displayIndex), this._displayDatas.length <= a764) {
                            this._displayDatas.length = a764 + 1;
                            for (var b764 = 0, c764 = this._displayDatas.length; b764 < c764; ++b764)
                                this._displayDatas[b764] || (this._displayDatas[b764] = null);
                        }
                        this._displayDatas[a764] = z763;
                    }, d762.prototype.containsPoint = function (x763, y763) {
                        return null !== this._boundingBoxData && (this.updateTransformAndMatrix(), d762._helpMatrix.copyFrom(this.globalTransformMatrix), d762._helpMatrix.invert(), d762._helpMatrix.transformPoint(x763, y763, d762._helpPoint), this._boundingBoxData.containsPoint(d762._helpPoint.x, d762._helpPoint.y));
                    }, d762.prototype.intersectsSegment = function (p763, q763, r763, s763, t763, u763, v763) {
                        if (void 0 === t763 && (t763 = null), void 0 === u763 && (u763 = null), void 0 === v763 && (v763 = null), null === this._boundingBoxData)
                            return 0;
                        this.updateTransformAndMatrix(), d762._helpMatrix.copyFrom(this.globalTransformMatrix), d762._helpMatrix.invert(), d762._helpMatrix.transformPoint(p763, q763, d762._helpPoint), p763 = d762._helpPoint.x, q763 = d762._helpPoint.y, d762._helpMatrix.transformPoint(r763, s763, d762._helpPoint), r763 = d762._helpPoint.x, s763 = d762._helpPoint.y;
                        var w763 = this._boundingBoxData.intersectsSegment(p763, q763, r763, s763, t763, u763, v763);
                        return w763 > 0 && (1 === w763 || 2 === w763 ? null !== t763 ? (this.globalTransformMatrix.transformPoint(t763.x, t763.y, t763), null !== u763 && (u763.x = t763.x, u763.y = t763.y)) : null !== u763 && this.globalTransformMatrix.transformPoint(u763.x, u763.y, u763) : (null !== t763 && this.globalTransformMatrix.transformPoint(t763.x, t763.y, t763), null !== u763 && this.globalTransformMatrix.transformPoint(u763.x, u763.y, u763)), null !== v763 && (this.globalTransformMatrix.transformPoint(Math.cos(v763.x), Math.sin(v763.x), d762._helpPoint, !0), v763.x = Math.atan2(d762._helpPoint.y, d762._helpPoint.x), this.globalTransformMatrix.transformPoint(Math.cos(v763.y), Math.sin(v763.y), d762._helpPoint, !0), v763.y = Math.atan2(d762._helpPoint.y, d762._helpPoint.x))), w763;
                    }, d762.prototype.invalidUpdate = function () {
                        this._displayDirty = !0, this._transformDirty = !0;
                    }, Object.defineProperty(d762.prototype, "visible", {
                        get: function () {
                            return this._visible;
                        },
                        set: function (o763) {
                            this._visible !== o763 && (this._visible = o763, this._updateVisible());
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "displayIndex", {
                        get: function () {
                            return this._displayIndex;
                        },
                        set: function (n763) {
                            this._setDisplayIndex(n763) && this.update(-1);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "name", {
                        get: function () {
                            return this._slotData.name;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "displayList", {
                        get: function () {
                            return this._displayList.concat();
                        },
                        set: function (f763) {
                            var g763 = this._displayList.concat(), h763 = new Array();
                            this._setDisplayList(f763) && this.update(-1);
                            for (var i763 = 0, j763 = g763; i763 < j763.length; i763++)
                                null !== (m763 = j763[i763]) && m763 !== this._rawDisplay && m763 !== this._meshDisplay && this._displayList.indexOf(m763) < 0 && h763.indexOf(m763) < 0 && h763.push(m763);
                            for (var k763 = 0, l763 = h763; k763 < l763.length; k763++) {
                                var m763;
                                (m763 = l763[k763]) instanceof z761.Armature || this._disposeDisplay(m763, !0);
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "slotData", {
                        get: function () {
                            return this._slotData;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "rawDisplayDatas", {
                        get: function () {
                            return this._rawDisplayDatas;
                        },
                        set: function (b763) {
                            if (this._rawDisplayDatas !== b763)
                                if (this._displayDirty = !0, this._rawDisplayDatas = b763, null !== this._rawDisplayDatas) {
                                    this._displayDatas.length = this._rawDisplayDatas.length;
                                    for (var c763 = 0, d763 = this._displayDatas.length; c763 < d763; ++c763) {
                                        var e763 = this._rawDisplayDatas[c763];
                                        null === e763 && (e763 = this._getDefaultRawDisplayData(c763)), this._displayDatas[c763] = e763;
                                    }
                                }
                                else
                                    this._displayDatas.length = 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "displayData", {
                        get: function () {
                            return this._displayData;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "boundingBoxData", {
                        get: function () {
                            return this._boundingBoxData;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "rawDisplay", {
                        get: function () {
                            return this._rawDisplay;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "meshDisplay", {
                        get: function () {
                            return this._meshDisplay;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "display", {
                        get: function () {
                            return this._display;
                        },
                        set: function (y762) {
                            if (this._display !== y762) {
                                var z762 = this._displayList.length;
                                if (this._displayIndex < 0 && 0 === z762 && (this._displayIndex = 0), !(this._displayIndex < 0)) {
                                    var a763 = this.displayList;
                                    z762 <= this._displayIndex && (a763.length = this._displayIndex + 1), a763[this._displayIndex] = y762, this.displayList = a763;
                                }
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "childArmature", {
                        get: function () {
                            return this._childArmature;
                        },
                        set: function (x762) {
                            this._childArmature !== x762 && (this.display = x762);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(d762.prototype, "parent", {
                        get: function () {
                            return this._parent;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), d762.prototype.getDisplay = function () {
                        return this._display;
                    }, d762.prototype.setDisplay = function (w762) {
                        this.display = w762;
                    }, d762;
                }(z761.TransformObject);
                z761.Slot = a762;
            }(d219 || (d219 = {})), function (i753) {
                var j753 = function (w761) {
                    function x761() {
                        return null !== w761 && w761.apply(this, arguments) || this;
                    }
                    return c219(x761, w761), x761.prototype._onClear = function () {
                        this._armature = null, this._target = null, this._root = null, this._bone = null;
                    }, Object.defineProperty(x761.prototype, "name", {
                        get: function () {
                            return this._constraintData.name;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), x761._helpMatrix = new i753.Matrix(), x761._helpTransform = new i753.Transform(), x761._helpPoint = new i753.Point(), x761;
                }(i753.BaseObject);
                i753.Constraint = j753;
                var k753 = function (a760) {
                    function b760() {
                        return null !== a760 && a760.apply(this, arguments) || this;
                    }
                    return c219(b760, a760), b760.toString = function () {
                        return "[class dragonBones.IKConstraint]";
                    }, b760.prototype._onClear = function () {
                        a760.prototype._onClear.call(this), this._scaleEnabled = !1, this._bendPositive = !1, this._weight = 1, this._constraintData = null;
                    }, b760.prototype._computeA = function () {
                        var s761 = this._target.global, t761 = this._root.global, u761 = this._root.globalTransformMatrix, v761 = Math.atan2(s761.y - t761.y, s761.x - t761.x);
                        t761.scaleX < 0 && (v761 += Math.PI), t761.rotation += i753.Transform.normalizeRadian(v761 - t761.rotation) * this._weight, t761.toMatrix(u761);
                    }, b760.prototype._computeB = function () {
                        var m760 = this._bone._boneData.length, n760 = this._root, o760 = this._target.global, p760 = n760.global, q760 = this._bone.global, r760 = this._bone.globalTransformMatrix, s760 = r760.a * m760, t760 = r760.b * m760, u760 = s760 * s760 + t760 * t760, v760 = Math.sqrt(u760), w760 = q760.x - p760.x, x760 = q760.y - p760.y, y760 = w760 * w760 + x760 * x760, z760 = Math.sqrt(y760), a761 = q760.rotation, b761 = p760.rotation, c761 = Math.atan2(x760, w760), d761 = (w760 = o760.x - p760.x) * w760 + (x760 = o760.y - p760.y) * x760, e761 = Math.sqrt(d761), f761 = 0;
                        if (v760 + z760 <= e761 || e761 + v760 <= z760 || e761 + z760 <= v760)
                            f761 = Math.atan2(o760.y - p760.y, o760.x - p760.x), v760 + z760 <= e761 || z760 < v760 && (f761 += Math.PI);
                        else {
                            var g761 = (y760 - u760 + d761) / (2 * d761), h761 = Math.sqrt(y760 - g761 * g761 * d761) / e761, i761 = p760.x + w760 * g761, j761 = p760.y + x760 * g761, k761 = -x760 * h761, l761 = w760 * h761, m761 = !1, n761 = n760.parent;
                            if (null !== n761) {
                                var o761 = n761.globalTransformMatrix;
                                m761 = o761.a * o761.d - o761.b * o761.c < 0;
                            }
                            m761 !== this._bendPositive ? (q760.x = i761 - k761, q760.y = j761 - l761) : (q760.x = i761 + k761, q760.y = j761 + l761), f761 = Math.atan2(q760.y - p760.y, q760.x - p760.x);
                        }
                        var p761 = i753.Transform.normalizeRadian(f761 - c761);
                        p760.rotation = b761 + p761 * this._weight, p760.toMatrix(n760.globalTransformMatrix);
                        var q761 = c761 + p761 * this._weight;
                        q760.x = p760.x + Math.cos(q761) * z760, q760.y = p760.y + Math.sin(q761) * z760;
                        var r761 = Math.atan2(o760.y - q760.y, o760.x - q760.x);
                        q760.scaleX < 0 && (r761 += Math.PI), q760.rotation = p760.rotation + a761 - b761 + i753.Transform.normalizeRadian(r761 - p761 - a761) * this._weight, q760.toMatrix(r760);
                    }, b760.prototype.init = function (j760, k760) {
                        if (null === this._constraintData) {
                            this._constraintData = j760, this._armature = k760, this._target = this._armature.getBone(this._constraintData.target.name), this._root = this._armature.getBone(this._constraintData.root.name), this._bone = null !== this._constraintData.bone ? this._armature.getBone(this._constraintData.bone.name) : null;
                            var l760 = this._constraintData;
                            this._scaleEnabled = l760.scaleEnabled, this._bendPositive = l760.bendPositive, this._weight = l760.weight, this._root._hasConstraint = !0;
                        }
                    }, b760.prototype.update = function () {
                        this._root.updateByConstraint(), null !== this._bone ? (this._bone.updateByConstraint(), this._computeB()) : this._computeA();
                    }, b760.prototype.invalidUpdate = function () {
                        this._root.invalidUpdate(), null !== this._bone && this._bone.invalidUpdate();
                    }, b760;
                }(j753);
                i753.IKConstraint = k753;
                var l753 = function (p753) {
                    function q753() {
                        var z759 = null !== p753 && p753.apply(this, arguments) || this;
                        return z759._bones = [], z759._spaces = [], z759._positions = [], z759._curves = [], z759._boneLengths = [], z759._pathGlobalVertices = [], z759._segments = [10], z759;
                    }
                    return c219(q753, p753), q753.toString = function () {
                        return "[class dragonBones.PathConstraint]";
                    }, q753.prototype._onClear = function () {
                        p753.prototype._onClear.call(this), this.dirty = !1, this.pathOffset = 0, this.position = 0, this.spacing = 0, this.rotateOffset = 0, this.rotateMix = 1, this.translateMix = 1, this._pathSlot = null, this._bones.length = 0, this._spaces.length = 0, this._positions.length = 0, this._curves.length = 0, this._boneLengths.length = 0, this._pathGlobalVertices.length = 0;
                    }, q753.prototype._updatePathVertices = function (v758) {
                        var w758 = this._armature, x758 = w758.armatureData.parent, y758 = w758.armatureData.scale, z758 = x758.intArray, a759 = x758.floatArray, b759 = v758.offset, c759 = z758[b759 + 0], d759 = z758[b759 + 2];
                        this._pathGlobalVertices.length = 2 * c759;
                        var e759 = v758.weight;
                        if (null !== e759)
                            for (var f759 = this._pathSlot._deformVertices.bones, g759 = e759.bones.length, h759 = e759.offset, i759 = z758[h759 + 1], j759 = h759 + 2 + g759, k759 = (t759 = 0, 0); t759 < c759; t759++) {
                                for (var l759 = 0, m759 = 0, n759 = 0, o759 = z758[j759++]; n759 < o759; n759++) {
                                    var p759 = f759[z758[j759++]];
                                    if (null !== p759) {
                                        p759.updateByConstraint(), s759 = p759.globalTransformMatrix;
                                        var q759 = a759[i759++];
                                        v759 = a759[i759++] * y758, w759 = a759[i759++] * y758, l759 += (s759.a * v759 + s759.c * w759 + s759.tx) * q759, m759 += (s759.b * v759 + s759.d * w759 + s759.ty) * q759;
                                    }
                                }
                                this._pathGlobalVertices[k759++] = l759, this._pathGlobalVertices[k759++] = m759;
                            }
                        else {
                            var r759 = this._pathSlot.parent;
                            r759.updateByConstraint();
                            for (var s759 = r759.globalTransformMatrix, t759 = 0, u759 = d759; t759 < c759; t759 += 2) {
                                var v759 = a759[u759++] * y758, w759 = a759[u759++] * y758, x759 = s759.a * v759 + s759.c * w759 + s759.tx, y759 = s759.b * v759 + s759.d * w759 + s759.ty;
                                this._pathGlobalVertices[t759] = x759, this._pathGlobalVertices[t759 + 1] = y759;
                            }
                        }
                    }, q753.prototype._computeVertices = function (p758, q758, r758, s758) {
                        for (var t758 = r758, u758 = p758; t758 < q758; t758 += 2)
                            s758[t758] = this._pathGlobalVertices[u758++], s758[t758 + 1] = this._pathGlobalVertices[u758++];
                    }, q753.prototype._computeBezierCurve = function (t756, u756, v756, w756, x756) {
                        var y756 = this._armature.armatureData.parent.intArray[t756.vertices.offset + 0], z756 = this._positions, a757 = this._spaces, b757 = t756.closed, c757 = Array(), d757 = 2 * y756, e757 = d757 / 6, f757 = -1, g757 = this.position;
                        z756.length = 3 * u756 + 2;
                        var h757 = 0;
                        if (t756.constantSpeed) {
                            b757 ? (d757 += 2, c757.length = y756, this._computeVertices(2, d757 - 4, 0, c757), this._computeVertices(0, 2, d757 - 4, c757), c757[d757 - 2] = c757[0], c757[d757 - 1] = c757[1]) : (e757--, d757 -= 4, c757.length = d757, this._computeVertices(2, d757, 0, c757));
                            var i757 = new Array(e757);
                            h757 = 0;
                            for (var j757, k757, l757, m757, n757, o757, p757, q757, r757 = c757[0], s757 = c757[1], t757 = 0, u757 = 0, v757 = 0, w757 = 0, x757 = 0, y757 = 0, z757 = (j758 = 0, 2); j758 < e757; j758++, z757 += 6)
                                t757 = c757[z757], u757 = c757[z757 + 1], v757 = c757[z757 + 2], w757 = c757[z757 + 3], n757 = 2 * (j757 = .1875 * (r757 - 2 * t757 + v757)) + (l757 = .09375 * (3 * (t757 - v757) - r757 + (x757 = c757[z757 + 4]))), o757 = 2 * (k757 = .1875 * (s757 - 2 * u757 + w757)) + (m757 = .09375 * (3 * (u757 - w757) - s757 + (y757 = c757[z757 + 5]))), p757 = .75 * (t757 - r757) + j757 + .16666667 * l757, q757 = .75 * (u757 - s757) + k757 + .16666667 * m757, h757 += Math.sqrt(p757 * p757 + q757 * q757), p757 += n757, q757 += o757, n757 += l757, o757 += m757, h757 += Math.sqrt(p757 * p757 + q757 * q757), p757 += n757, q757 += o757, h757 += Math.sqrt(p757 * p757 + q757 * q757), p757 += n757 + l757, q757 += o757 + m757, h757 += Math.sqrt(p757 * p757 + q757 * q757), i757[j758] = h757, r757 = x757, s757 = y757;
                            if (w756 && (g757 *= h757), x756)
                                for (j758 = 0; j758 < u756; j758++)
                                    a757[j758] *= h757;
                            for (var a758 = this._segments, b758 = 0, c758 = (j758 = 0, k758 = 0, l758 = 0, 0); j758 < u756; j758++, k758 += 3) {
                                var d758 = g757 += a757[j758];
                                if (b757)
                                    (d758 %= h757) < 0 && (d758 += h757), l758 = 0;
                                else {
                                    if (d758 < 0)
                                        continue;
                                    if (d758 > h757)
                                        continue;
                                }
                                for (;; l758++) {
                                    var e758 = i757[l758];
                                    if (!(d758 > e758)) {
                                        0 === l758 ? d758 /= e758 : d758 = (d758 - (h758 = i757[l758 - 1])) / (e758 - h758);
                                        break;
                                    }
                                }
                                if (l758 !== f757) {
                                    f757 = l758;
                                    var f758 = 6 * l758;
                                    for (r757 = c757[f758], s757 = c757[f758 + 1], t757 = c757[f758 + 2], u757 = c757[f758 + 3], v757 = c757[f758 + 4], w757 = c757[f758 + 5], n757 = 2 * (j757 = .03 * (r757 - 2 * t757 + v757)) + (l757 = .006 * (3 * (t757 - v757) - r757 + (x757 = c757[f758 + 6]))), o757 = 2 * (k757 = .03 * (s757 - 2 * u757 + w757)) + (m757 = .006 * (3 * (u757 - w757) - s757 + (y757 = c757[f758 + 7]))), p757 = .3 * (t757 - r757) + j757 + .16666667 * l757, q757 = .3 * (u757 - s757) + k757 + .16666667 * m757, b758 = Math.sqrt(p757 * p757 + q757 * q757), a758[0] = b758, f758 = 1; f758 < 8; f758++)
                                        p757 += n757, q757 += o757, n757 += l757, o757 += m757, b758 += Math.sqrt(p757 * p757 + q757 * q757), a758[f758] = b758;
                                    p757 += n757, q757 += o757, b758 += Math.sqrt(p757 * p757 + q757 * q757), a758[8] = b758, p757 += n757 + l757, q757 += o757 + m757, b758 += Math.sqrt(p757 * p757 + q757 * q757), a758[9] = b758, c758 = 0;
                                }
                                for (d758 *= b758;; c758++) {
                                    var g758 = a758[c758];
                                    if (!(d758 > g758)) {
                                        var h758;
                                        0 === c758 ? d758 /= g758 : d758 = c758 + (d758 - (h758 = a758[c758 - 1])) / (g758 - h758);
                                        break;
                                    }
                                }
                                this.addCurvePosition(.1 * d758, r757, s757, t757, u757, v757, w757, x757, y757, z756, k758, v756);
                            }
                        }
                        else {
                            var i758 = t756.curveLengths;
                            if (h757 = i758[e757 -= b757 ? 1 : 2], w756 && (g757 *= h757), x756)
                                for (var j758 = 0; j758 < u756; j758++)
                                    a757[j758] *= h757;
                            c757.length = 8;
                            j758 = 0;
                            for (var k758 = 0, l758 = 0; j758 < u756; j758++, k758 += 3) {
                                if (g757 += a757[j758], b757)
                                    (g757 %= h757) < 0 && (g757 += h757), l758 = 0;
                                else {
                                    if (g757 < 0)
                                        continue;
                                    if (g757 > h757)
                                        continue;
                                }
                                for (var m758 = 0;; l758++) {
                                    var n758 = i758[l758];
                                    if (!(g757 > n758)) {
                                        if (0 === l758)
                                            m758 = g757 / n758;
                                        else {
                                            var o758 = i758[l758 - 1];
                                            m758 = (g757 - o758) / (n758 - o758);
                                        }
                                        break;
                                    }
                                }
                                l758 !== f757 && (f757 = l758, b757 && l758 === e757 ? (this._computeVertices(d757 - 4, 4, 0, c757), this._computeVertices(0, 4, 4, c757)) : this._computeVertices(6 * l758 + 2, 8, 0, c757)), this.addCurvePosition(m758, c757[0], c757[1], c757[2], c757[3], c757[4], c757[5], c757[6], c757[7], z756, k758, v756);
                            }
                        }
                    }, q753.prototype.addCurvePosition = function (y755, z755, a756, b756, c756, d756, e756, f756, g756, h756, i756, j756) {
                        if (0 === y755)
                            return h756[i756] = z755, h756[i756 + 1] = a756, void (h756[i756 + 2] = 0);
                        if (1 === y755)
                            return h756[i756] = f756, h756[i756 + 1] = g756, void (h756[i756 + 2] = 0);
                        var k756 = 1 - y755, l756 = k756 * k756, m756 = y755 * y755, n756 = l756 * k756, o756 = l756 * y755 * 3, p756 = k756 * m756 * 3, q756 = y755 * m756, r756 = n756 * z755 + o756 * b756 + p756 * d756 + q756 * f756, s756 = n756 * a756 + o756 * c756 + p756 * e756 + q756 * g756;
                        h756[i756] = r756, h756[i756 + 1] = s756, h756[i756 + 2] = j756 ? Math.atan2(s756 - (n756 * a756 + o756 * c756 + p756 * e756), r756 - (n756 * z755 + o756 * b756 + p756 * d756)) : 0;
                    }, q753.prototype.init = function (s755, t755) {
                        this._constraintData = s755, this._armature = t755;
                        var u755 = s755;
                        this.pathOffset = u755.pathDisplayData.vertices.offset, this.position = u755.position, this.spacing = u755.spacing, this.rotateOffset = u755.rotateOffset, this.rotateMix = u755.rotateMix, this.translateMix = u755.translateMix, this._root = this._armature.getBone(u755.root.name), this._target = this._armature.getBone(u755.target.name), this._pathSlot = this._armature.getSlot(u755.pathSlot.name);
                        for (var v755 = 0, w755 = u755.bones.length; v755 < w755; v755++) {
                            var x755 = this._armature.getBone(u755.bones[v755].name);
                            null !== x755 && this._bones.push(x755);
                        }
                        2 === u755.rotateMode && (this._boneLengths.length = this._bones.length), this._root._hasConstraint = !0;
                    }, q753.prototype.update = function () {
                        var a754 = this._pathSlot;
                        if (null !== a754._deformVertices && null !== a754._deformVertices.verticesData && a754._deformVertices.verticesData.offset === this.pathOffset) {
                            var b754 = this._constraintData, c754 = a754._displayData, d754 = !1, e754 = a754._deformVertices;
                            if (this._root._childrenTransformDirty ? (this._updatePathVertices(c754.vertices), d754 = !0) : null !== e754 && (e754.verticesDirty || e754.isBonesUpdate()) && (this._updatePathVertices(c754.vertices), e754.verticesDirty = !1, d754 = !0), d754 || this.dirty) {
                                var f754 = b754.positionMode, g754 = b754.spacingMode, h754 = b754.rotateMode, i754 = this._bones, j754 = 0 === g754, k754 = 2 === h754, l754 = 0 === h754, m754 = i754.length, n754 = l754 ? m754 : m754 + 1, o754 = this.spacing, p754 = this._spaces;
                                if (p754.length = n754, k754 || j754) {
                                    p754[0] = 0;
                                    for (var q754 = 0, r754 = n754 - 1; q754 < r754; q754++) {
                                        (e755 = i754[q754]).updateByConstraint();
                                        var s754 = e755._boneData.length, t754 = s754 * (f755 = e755.globalTransformMatrix).a, u754 = s754 * f755.b, v754 = Math.sqrt(t754 * t754 + u754 * u754);
                                        k754 && (this._boneLengths[q754] = v754), p754[q754 + 1] = (s754 + o754) * v754 / s754;
                                    }
                                }
                                else
                                    for (q754 = 0; q754 < n754; q754++)
                                        p754[q754] = o754;
                                this._computeBezierCurve(c754, n754, l754, 1 === f754, 2 === g754);
                                var w754, x754 = this._positions, y754 = this.rotateOffset, z754 = x754[0], a755 = x754[1];
                                0 === y754 ? w754 = 1 === h754 : (w754 = !1, null !== (e755 = a754.parent) && (y754 *= (f755 = e755.globalTransformMatrix).a * f755.d - f755.b * f755.c > 0 ? i753.Transform.DEG_RAD : -i753.Transform.DEG_RAD));
                                for (var b755 = this.rotateMix, c755 = this.translateMix, d755 = (q754 = 0, 3); q754 < m754; q754++, d755 += 3) {
                                    var e755, f755;
                                    (e755 = i754[q754]).updateByConstraint(), (f755 = e755.globalTransformMatrix).tx += (z754 - f755.tx) * c755, f755.ty += (a755 - f755.ty) * c755;
                                    var g755 = (t754 = x754[d755]) - z754, h755 = (u754 = x754[d755 + 1]) - a755;
                                    if (k754) {
                                        var i755 = this._boneLengths[q754], j755 = (Math.sqrt(g755 * g755 + h755 * h755) / i755 - 1) * b755 + 1;
                                        f755.a *= j755, f755.b *= j755;
                                    }
                                    if (z754 = t754, a755 = u754, b755 > 0) {
                                        var k755 = f755.a, l755 = f755.b, m755 = f755.c, n755 = f755.d, o755 = void 0, p755 = void 0, q755 = void 0;
                                        if (o755 = l754 ? x754[d755 - 1] : Math.atan2(h755, g755), o755 -= Math.atan2(l755, k755), w754) {
                                            p755 = Math.cos(o755), q755 = Math.sin(o755);
                                            var r755 = e755._boneData.length;
                                            z754 += (r755 * (p755 * k755 - q755 * l755) - g755) * b755, a755 += (r755 * (q755 * k755 + p755 * l755) - h755) * b755;
                                        }
                                        else
                                            o755 += y754;
                                        o755 > i753.Transform.PI ? o755 -= i753.Transform.PI_D : o755 < -i753.Transform.PI && (o755 += i753.Transform.PI_D), o755 *= b755, p755 = Math.cos(o755), q755 = Math.sin(o755), f755.a = p755 * k755 - q755 * l755, f755.b = q755 * k755 + p755 * l755, f755.c = p755 * m755 - q755 * n755, f755.d = q755 * m755 + p755 * n755;
                                    }
                                    e755.global.fromMatrix(f755);
                                }
                                this.dirty = !1;
                            }
                        }
                    }, q753.prototype.invalidUpdate = function () { }, q753;
                }(j753);
                i753.PathConstraint = l753;
            }(d219 || (d219 = {})), function (i752) {
                var j752 = function () {
                    function l752(h753) {
                        void 0 === h753 && (h753 = 0), this.time = 0, this.timeScale = 1, this._systemTime = 0, this._animatebles = [], this._clock = null, this.time = h753, this._systemTime = .001 * new Date().getTime();
                    }
                    return l752.prototype.advanceTime = function (a753) {
                        a753 != a753 && (a753 = 0);
                        var b753 = .001 * Date.now();
                        if (a753 < 0 && (a753 = b753 - this._systemTime), this._systemTime = b753, 1 !== this.timeScale && (a753 *= this.timeScale), 0 !== a753) {
                            a753 < 0 ? this.time -= a753 : this.time += a753;
                            for (var c753 = 0, d753 = 0, e753 = this._animatebles.length; c753 < e753; ++c753) {
                                var f753 = this._animatebles[c753];
                                null !== f753 ? (d753 > 0 && (this._animatebles[c753 - d753] = f753, this._animatebles[c753] = null), f753.advanceTime(a753)) : d753++;
                            }
                            if (d753 > 0) {
                                for (e753 = this._animatebles.length; c753 < e753; ++c753) {
                                    var g753 = this._animatebles[c753];
                                    null !== g753 ? this._animatebles[c753 - d753] = g753 : d753++;
                                }
                                this._animatebles.length -= d753;
                            }
                        }
                    }, l752.prototype.contains = function (y752) {
                        if (y752 === this)
                            return !1;
                        for (var z752 = y752; z752 !== this && null !== z752;)
                            z752 = z752.clock;
                        return z752 === this;
                    }, l752.prototype.add = function (x752) {
                        this._animatebles.indexOf(x752) < 0 && (this._animatebles.push(x752), x752.clock = this);
                    }, l752.prototype.remove = function (v752) {
                        var w752 = this._animatebles.indexOf(v752);
                        w752 >= 0 && (this._animatebles[w752] = null, v752.clock = null);
                    }, l752.prototype.clear = function () {
                        for (var s752 = 0, t752 = this._animatebles; s752 < t752.length; s752++) {
                            var u752 = t752[s752];
                            null !== u752 && (u752.clock = null);
                        }
                    }, Object.defineProperty(l752.prototype, "clock", {
                        get: function () {
                            return this._clock;
                        },
                        set: function (r752) {
                            this._clock !== r752 && (null !== this._clock && this._clock.remove(this), this._clock = r752, null !== this._clock && this._clock.add(this));
                        },
                        enumerable: !0,
                        configurable: !0
                    }), l752.clock = new l752(), l752;
                }();
                i752.WorldClock = j752;
            }(d219 || (d219 = {})), function (i747) {
                var j747 = function (l747) {
                    function m747() {
                        var h752 = null !== l747 && l747.apply(this, arguments) || this;
                        return h752._animationNames = [], h752._animationStates = [], h752._animations = {}, h752._animationConfig = null, h752;
                    }
                    return c219(m747, l747), m747.toString = function () {
                        return "[class dragonBones.Animation]";
                    }, m747.prototype._onClear = function () {
                        for (var e752 = 0, f752 = this._animationStates; e752 < f752.length; e752++)
                            f752[e752].returnToPool();
                        for (var g752 in this._animations)
                            delete this._animations[g752];
                        null !== this._animationConfig && this._animationConfig.returnToPool(), this.timeScale = 1, this._lockUpdate = !1, this._animationDirty = !1, this._inheritTimeScale = 1, this._animationNames.length = 0, this._animationStates.length = 0, this._armature = null, this._animationConfig = null, this._lastAnimationState = null;
                    }, m747.prototype._fadeOut = function (u751) {
                        switch (u751.fadeOutMode) {
                            case 1:
                                for (var v751 = 0, w751 = this._animationStates; v751 < w751.length; v751++)
                                    null === (d752 = w751[v751])._parent && d752.layer === u751.layer && d752.fadeOut(u751.fadeOutTime, u751.pauseFadeOut);
                                break;
                            case 2:
                                for (var x751 = 0, y751 = this._animationStates; x751 < y751.length; x751++)
                                    null === (d752 = y751[x751])._parent && d752.group === u751.group && d752.fadeOut(u751.fadeOutTime, u751.pauseFadeOut);
                                break;
                            case 3:
                                for (var z751 = 0, a752 = this._animationStates; z751 < a752.length; z751++)
                                    null === (d752 = a752[z751])._parent && d752.layer === u751.layer && d752.group === u751.group && d752.fadeOut(u751.fadeOutTime, u751.pauseFadeOut);
                                break;
                            case 4:
                                for (var b752 = 0, c752 = this._animationStates; b752 < c752.length; b752++) {
                                    var d752;
                                    null === (d752 = c752[b752])._parent && d752.fadeOut(u751.fadeOutTime, u751.pauseFadeOut);
                                }
                        }
                    }, m747.prototype.init = function (t751) {
                        null === this._armature && (this._armature = t751, this._animationConfig = i747.BaseObject.borrowObject(i747.AnimationConfig));
                    }, m747.prototype.advanceTime = function (e751) {
                        e751 < 0 && (e751 = -e751), this._armature.inheritAnimation && null !== this._armature._parent ? this._inheritTimeScale = this._armature._parent._armature.animation._inheritTimeScale * this.timeScale : this._inheritTimeScale = this.timeScale, 1 !== this._inheritTimeScale && (e751 *= this._inheritTimeScale);
                        var f751 = this._animationStates.length;
                        if (1 === f751) {
                            if ((s751 = this._animationStates[0])._fadeState > 0 && s751._subFadeState > 0)
                                this._armature._dragonBones.bufferObject(s751), this._animationStates.length = 0, this._lastAnimationState = null;
                            else {
                                var g751 = s751._animationData, h751 = g751.cacheFrameRate;
                                if (this._animationDirty && h751 > 0) {
                                    this._animationDirty = !1;
                                    for (var i751 = 0, j751 = this._armature.getBones(); i751 < j751.length; i751++) {
                                        var k751 = j751[i751];
                                        k751._cachedFrameIndices = g751.getBoneCachedFrameIndices(k751.name);
                                    }
                                    for (var l751 = 0, m751 = this._armature.getSlots(); l751 < m751.length; l751++) {
                                        var n751 = m751[l751], o751 = n751.rawDisplayDatas;
                                        if (null !== o751 && o751.length > 0) {
                                            var p751 = o751[0];
                                            if (null !== p751 && p751.parent === this._armature.armatureData.defaultSkin) {
                                                n751._cachedFrameIndices = g751.getSlotCachedFrameIndices(n751.name);
                                                continue;
                                            }
                                        }
                                        n751._cachedFrameIndices = null;
                                    }
                                }
                                s751.advanceTime(e751, h751);
                            }
                        }
                        else if (f751 > 1) {
                            for (var q751 = 0, r751 = 0; q751 < f751; ++q751) {
                                var s751;
                                (s751 = this._animationStates[q751])._fadeState > 0 && s751._subFadeState > 0 ? (r751++, this._armature._dragonBones.bufferObject(s751), this._animationDirty = !0, this._lastAnimationState === s751 && (this._lastAnimationState = null)) : (r751 > 0 && (this._animationStates[q751 - r751] = s751), s751.advanceTime(e751, 0)), q751 === f751 - 1 && r751 > 0 && (this._animationStates.length -= r751, null === this._lastAnimationState && this._animationStates.length > 0 && (this._lastAnimationState = this._animationStates[this._animationStates.length - 1]));
                            }
                            this._armature._cacheFrameIndex = -1;
                        }
                        else
                            this._armature._cacheFrameIndex = -1;
                    }, m747.prototype.reset = function () {
                        for (var c751 = 0, d751 = this._animationStates; c751 < d751.length; c751++)
                            d751[c751].returnToPool();
                        this._animationDirty = !1, this._animationConfig.clear(), this._animationStates.length = 0, this._lastAnimationState = null;
                    }, m747.prototype.stop = function (y750) {
                        if (void 0 === y750 && (y750 = null), null !== y750)
                            null !== (b751 = this.getState(y750)) && b751.stop();
                        else
                            for (var z750 = 0, a751 = this._animationStates; z750 < a751.length; z750++) {
                                var b751;
                                (b751 = a751[z750]).stop();
                            }
                    }, m747.prototype.playConfig = function (i750) {
                        var j750 = i750.animation;
                        if (!(j750 in this._animations))
                            return console.warn("Non-existent animation.\n", "DragonBones name: " + this._armature.armatureData.parent.name, "Armature name: " + this._armature.name, "Animation name: " + j750), null;
                        var k750 = this._animations[j750];
                        if (5 === i750.fadeOutMode)
                            for (var l750 = 0, m750 = this._animationStates; l750 < m750.length; l750++) {
                                var n750 = m750[l750];
                                if (n750._animationData === k750)
                                    return n750;
                            }
                        0 === this._animationStates.length ? i750.fadeInTime = 0 : i750.fadeInTime < 0 && (i750.fadeInTime = k750.fadeInTime), i750.fadeOutTime < 0 && (i750.fadeOutTime = i750.fadeInTime), i750.timeScale <= -100 && (i750.timeScale = 1 / k750.scale), k750.frameCount > 1 ? (i750.position < 0 ? (i750.position %= k750.duration, i750.position = k750.duration - i750.position) : i750.position === k750.duration ? i750.position -= 1e-6 : i750.position > k750.duration && (i750.position %= k750.duration), i750.duration > 0 && i750.position + i750.duration > k750.duration && (i750.duration = k750.duration - i750.position), i750.playTimes < 0 && (i750.playTimes = k750.playTimes)) : (i750.playTimes = 1, i750.position = 0, i750.duration > 0 && (i750.duration = 0)), 0 === i750.duration && (i750.duration = -1), this._fadeOut(i750);
                        var o750 = i747.BaseObject.borrowObject(i747.AnimationState);
                        if (o750.init(this._armature, k750, i750), this._animationDirty = !0, this._armature._cacheFrameIndex = -1, this._animationStates.length > 0) {
                            for (var p750 = !1, q750 = 0, r750 = this._animationStates.length; q750 < r750; ++q750) {
                                if (o750.layer > this._animationStates[q750].layer) {
                                    p750 = !0, this._animationStates.splice(q750, 0, o750);
                                    break;
                                }
                                if (q750 !== r750 - 1 && o750.layer > this._animationStates[q750 + 1].layer) {
                                    p750 = !0, this._animationStates.splice(q750 + 1, 0, o750);
                                    break;
                                }
                            }
                            p750 || this._animationStates.push(o750);
                        }
                        else
                            this._animationStates.push(o750);
                        for (var s750 = 0, t750 = this._armature.getSlots(); s750 < t750.length; s750++) {
                            var u750 = t750[s750].childArmature;
                            null !== u750 && u750.inheritAnimation && u750.animation.hasAnimation(j750) && null === u750.animation.getState(j750) && u750.animation.fadeIn(j750);
                        }
                        var v750 = !1;
                        for (var w750 in k750.animationTimelines) {
                            this._lockUpdate || (v750 = !0, this._lockUpdate = !0);
                            var x750 = this.fadeIn(w750, i750.fadeInTime, 1, o750.layer, null, 0);
                            null !== x750 && (x750.resetToPose = !1, x750._parent = o750, x750.stop());
                        }
                        return v750 && (this._lockUpdate = !1), this._lockUpdate || (i750.fadeInTime <= 0 && this._armature.advanceTime(0), this._lastAnimationState = o750), o750;
                    }, m747.prototype.play = function (f750, g750) {
                        if (void 0 === f750 && (f750 = null), void 0 === g750 && (g750 = -1), this._animationConfig.clear(), this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = g750, this._animationConfig.fadeInTime = 0, this._animationConfig.animation = null !== f750 ? f750 : "", null !== f750 && f750.length > 0)
                            this.playConfig(this._animationConfig);
                        else if (null === this._lastAnimationState) {
                            var h750 = this._armature.armatureData.defaultAnimation;
                            null !== h750 && (this._animationConfig.animation = h750.name, this.playConfig(this._animationConfig));
                        }
                        else
                            this._lastAnimationState.isPlaying || this._lastAnimationState.isCompleted ? (this._animationConfig.animation = this._lastAnimationState.name, this.playConfig(this._animationConfig)) : this._lastAnimationState.play();
                        return this._lastAnimationState;
                    }, m747.prototype.fadeIn = function (z749, a750, b750, c750, d750, e750) {
                        return void 0 === a750 && (a750 = -1), void 0 === b750 && (b750 = -1), void 0 === c750 && (c750 = 0), void 0 === d750 && (d750 = null), void 0 === e750 && (e750 = 3), this._animationConfig.clear(), this._animationConfig.fadeOutMode = e750, this._animationConfig.playTimes = b750, this._animationConfig.layer = c750, this._animationConfig.fadeInTime = a750, this._animationConfig.animation = z749, this._animationConfig.group = null !== d750 ? d750 : "", this.playConfig(this._animationConfig);
                    }, m747.prototype.gotoAndPlayByTime = function (w749, x749, y749) {
                        return void 0 === x749 && (x749 = 0), void 0 === y749 && (y749 = -1), this._animationConfig.clear(), this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = y749, this._animationConfig.position = x749, this._animationConfig.fadeInTime = 0, this._animationConfig.animation = w749, this.playConfig(this._animationConfig);
                    }, m747.prototype.gotoAndPlayByFrame = function (s749, t749, u749) {
                        void 0 === t749 && (t749 = 0), void 0 === u749 && (u749 = -1), this._animationConfig.clear(), this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = u749, this._animationConfig.fadeInTime = 0, this._animationConfig.animation = s749;
                        var v749 = s749 in this._animations ? this._animations[s749] : null;
                        return null !== v749 && (this._animationConfig.position = v749.duration * t749 / v749.frameCount), this.playConfig(this._animationConfig);
                    }, m747.prototype.gotoAndPlayByProgress = function (o749, p749, q749) {
                        void 0 === p749 && (p749 = 0), void 0 === q749 && (q749 = -1), this._animationConfig.clear(), this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = q749, this._animationConfig.fadeInTime = 0, this._animationConfig.animation = o749;
                        var r749 = o749 in this._animations ? this._animations[o749] : null;
                        return null !== r749 && (this._animationConfig.position = r749.duration * (p749 > 0 ? p749 : 0)), this.playConfig(this._animationConfig);
                    }, m747.prototype.gotoAndStopByTime = function (l749, m749) {
                        void 0 === m749 && (m749 = 0);
                        var n749 = this.gotoAndPlayByTime(l749, m749, 1);
                        return null !== n749 && n749.stop(), n749;
                    }, m747.prototype.gotoAndStopByFrame = function (i749, j749) {
                        void 0 === j749 && (j749 = 0);
                        var k749 = this.gotoAndPlayByFrame(i749, j749, 1);
                        return null !== k749 && k749.stop(), k749;
                    }, m747.prototype.gotoAndStopByProgress = function (f749, g749) {
                        void 0 === g749 && (g749 = 0);
                        var h749 = this.gotoAndPlayByProgress(f749, g749, 1);
                        return null !== h749 && h749.stop(), h749;
                    }, m747.prototype.getState = function (c749) {
                        for (var d749 = this._animationStates.length; d749--;) {
                            var e749 = this._animationStates[d749];
                            if (e749.name === c749)
                                return e749;
                        }
                        return null;
                    }, m747.prototype.hasAnimation = function (b749) {
                        return b749 in this._animations;
                    }, m747.prototype.getStates = function () {
                        return this._animationStates;
                    }, Object.defineProperty(m747.prototype, "isPlaying", {
                        get: function () {
                            for (var z748 = 0, a749 = this._animationStates; z748 < a749.length; z748++)
                                if (a749[z748].isPlaying)
                                    return !0;
                            return !1;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m747.prototype, "isCompleted", {
                        get: function () {
                            for (var x748 = 0, y748 = this._animationStates; x748 < y748.length; x748++)
                                if (!y748[x748].isCompleted)
                                    return !1;
                            return this._animationStates.length > 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m747.prototype, "lastAnimationName", {
                        get: function () {
                            return null !== this._lastAnimationState ? this._lastAnimationState.name : "";
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m747.prototype, "animationNames", {
                        get: function () {
                            return this._animationNames;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m747.prototype, "animations", {
                        get: function () {
                            return this._animations;
                        },
                        set: function (v748) {
                            if (this._animations !== v748) {
                                for (var w748 in this._animationNames.length = 0, this._animations)
                                    delete this._animations[w748];
                                for (var w748 in v748)
                                    this._animationNames.push(w748), this._animations[w748] = v748[w748];
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m747.prototype, "animationConfig", {
                        get: function () {
                            return this._animationConfig.clear(), this._animationConfig;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m747.prototype, "lastAnimationState", {
                        get: function () {
                            return this._lastAnimationState;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), m747.prototype.gotoAndPlay = function (n748, o748, p748, q748, r748, s748, t748) {
                        void 0 === o748 && (o748 = -1), void 0 === p748 && (p748 = -1), void 0 === q748 && (q748 = -1), void 0 === r748 && (r748 = 0), void 0 === s748 && (s748 = null), void 0 === t748 && (t748 = 3), console.warn("Deprecated."), this._animationConfig.clear(), this._animationConfig.resetToPose = !0, this._animationConfig.fadeOutMode = t748, this._animationConfig.playTimes = q748, this._animationConfig.layer = r748, this._animationConfig.fadeInTime = o748, this._animationConfig.animation = n748, this._animationConfig.group = null !== s748 ? s748 : "";
                        var u748 = this._animations[n748];
                        return u748 && p748 > 0 && (this._animationConfig.timeScale = u748.duration / p748), this.playConfig(this._animationConfig);
                    }, m747.prototype.gotoAndStop = function (l748, m748) {
                        return void 0 === m748 && (m748 = 0), console.warn("Deprecated."), this.gotoAndStopByTime(l748, m748);
                    }, Object.defineProperty(m747.prototype, "animationList", {
                        get: function () {
                            return console.warn("Deprecated."), this._animationNames;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m747.prototype, "animationDataList", {
                        get: function () {
                            console.warn("Deprecated.");
                            for (var i748 = [], j748 = 0, k748 = this._animationNames.length; j748 < k748; ++j748)
                                i748.push(this._animations[this._animationNames[j748]]);
                            return i748;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), m747;
                }(i747.BaseObject);
                i747.Animation = j747;
            }(d219 || (d219 = {})), function (j741) {
                var k741 = function (a742) {
                    function b742() {
                        var h747 = null !== a742 && a742.apply(this, arguments) || this;
                        return h747._blendState = new m741(), h747._boneMask = [], h747._boneTimelines = [], h747._surfaceTimelines = [], h747._slotTimelines = [], h747._constraintTimelines = [], h747._animationTimelines = [], h747._poseTimelines = [], h747._bonePoses = {}, h747._actionTimeline = null, h747._zOrderTimeline = null, h747._parent = null, h747;
                    }
                    return c219(b742, a742), b742.toString = function () {
                        return "[class dragonBones.AnimationState]";
                    }, b742.prototype._onClear = function () {
                        for (var w746 = 0, x746 = this._boneTimelines; w746 < x746.length; w746++)
                            x746[w746].returnToPool();
                        for (var y746 = 0, z746 = this._surfaceTimelines; y746 < z746.length; y746++)
                            z746[y746].returnToPool();
                        for (var a747 = 0, b747 = this._slotTimelines; a747 < b747.length; a747++)
                            b747[a747].returnToPool();
                        for (var c747 = 0, d747 = this._constraintTimelines; c747 < d747.length; c747++)
                            d747[c747].returnToPool();
                        for (var e747 = 0, f747 = this._animationTimelines; e747 < f747.length; e747++)
                            f747[e747].returnToPool();
                        for (var g747 in this._bonePoses)
                            this._bonePoses[g747].returnToPool(), delete this._bonePoses[g747];
                        null !== this._actionTimeline && this._actionTimeline.returnToPool(), null !== this._zOrderTimeline && this._zOrderTimeline.returnToPool(), this.actionEnabled = !1, this.additiveBlending = !1, this.displayControl = !1, this.resetToPose = !1, this.playTimes = 1, this.layer = 0, this.timeScale = 1, this.weight = 1, this.autoFadeOutTime = 0, this.fadeTotalTime = 0, this.name = "", this.group = "", this._timelineDirty = 2, this._playheadState = 0, this._fadeState = -1, this._subFadeState = -1, this._position = 0, this._duration = 0, this._fadeTime = 0, this._time = 0, this._fadeProgress = 0, this._weightResult = 0, this._blendState.clear(), this._boneMask.length = 0, this._boneTimelines.length = 0, this._surfaceTimelines.length = 0, this._slotTimelines.length = 0, this._constraintTimelines.length = 0, this._animationTimelines.length = 0, this._poseTimelines.length = 0, this._animationData = null, this._armature = null, this._actionTimeline = null, this._zOrderTimeline = null, this._parent = null;
                    }, b742.prototype._updateTimelines = function () {
                        for (var j746 = 0, k746 = this._armature._constraints; j746 < k746.length; j746++) {
                            var l746 = k746[j746];
                            if (null !== (q746 = this._animationData.getConstraintTimelines(l746.name)))
                                for (var m746 = 0, n746 = q746; m746 < n746.length; m746++)
                                    switch ((u746 = n746[m746]).type) {
                                        case 30:
                                            (v746 = j741.BaseObject.borrowObject(j741.IKConstraintTimelineState)).constraint = l746, v746.init(this._armature, this, u746), this._constraintTimelines.push(v746);
                                    }
                            else
                                this.resetToPose && ((v746 = j741.BaseObject.borrowObject(j741.IKConstraintTimelineState)).constraint = l746, v746.init(this._armature, this, null), this._constraintTimelines.push(v746), this._poseTimelines.push(v746));
                        }
                        for (var o746 = 0, p746 = this._armature.animation.getStates(); o746 < p746.length; o746++) {
                            var q746, r746 = p746[o746];
                            if (r746._parent === this && null !== (q746 = this._animationData.getAnimationTimelines(r746.name)))
                                for (var s746 = 0, t746 = q746; s746 < t746.length; s746++) {
                                    var u746;
                                    switch ((u746 = t746[s746]).type) {
                                        case 40:
                                            var v746;
                                            (v746 = j741.BaseObject.borrowObject(j741.AnimationTimelineState)).animationState = r746, v746.init(this._armature, this, u746), this._animationTimelines.push(v746);
                                    }
                                }
                        }
                    }, b742.prototype._updateBoneAndSlotTimelines = function () {
                        for (var z744 = {}, a745 = 0, b745 = this._boneTimelines; a745 < b745.length; a745++)
                            (f745 = (p745 = b745[a745]).bone.name) in z744 || (z744[f745] = []), z744[f745].push(p745);
                        for (var c745 = 0, d745 = this._armature.getBones(); c745 < d745.length; c745++) {
                            var e745 = d745[c745], f745 = e745.name;
                            if (this.containsBoneMask(f745))
                                if (f745 in z744)
                                    delete z744[f745];
                                else if (0 === e745._boneData.type) {
                                    var g745 = this._animationData.getBoneTimelines(f745), h745 = f745 in this._bonePoses ? this._bonePoses[f745] : this._bonePoses[f745] = j741.BaseObject.borrowObject(l741);
                                    if (null !== g745)
                                        for (var i745 = 0, j745 = g745; i745 < j745.length; i745++)
                                            switch ((c746 = j745[i745]).type) {
                                                case 10:
                                                    (p745 = j741.BaseObject.borrowObject(j741.BoneAllTimelineState)).bone = e745, p745.bonePose = h745, p745.init(this._armature, this, c746), this._boneTimelines.push(p745);
                                                    break;
                                                case 11:
                                                    (p745 = j741.BaseObject.borrowObject(j741.BoneTranslateTimelineState)).bone = e745, p745.bonePose = h745, p745.init(this._armature, this, c746), this._boneTimelines.push(p745);
                                                    break;
                                                case 12:
                                                    (p745 = j741.BaseObject.borrowObject(j741.BoneRotateTimelineState)).bone = e745, p745.bonePose = h745, p745.init(this._armature, this, c746), this._boneTimelines.push(p745);
                                                    break;
                                                case 13:
                                                    (p745 = j741.BaseObject.borrowObject(j741.BoneScaleTimelineState)).bone = e745, p745.bonePose = h745, p745.init(this._armature, this, c746), this._boneTimelines.push(p745);
                                            }
                                    else
                                        this.resetToPose && ((p745 = j741.BaseObject.borrowObject(j741.BoneAllTimelineState)).bone = e745, p745.bonePose = h745, p745.init(this._armature, this, null), this._boneTimelines.push(p745), this._poseTimelines.push(p745));
                                }
                                else if (1 === e745._boneData.type)
                                    if (null !== (g745 = this._animationData.getSurfaceTimelines(f745)))
                                        for (var k745 = 0, l745 = g745; k745 < l745.length; k745++)
                                            switch ((c746 = l745[k745]).type) {
                                                case 50:
                                                    (p745 = j741.BaseObject.borrowObject(j741.SurfaceTimelineState)).surface = e745, p745.init(this._armature, this, c746), this._surfaceTimelines.push(p745);
                                            }
                                    else
                                        this.resetToPose && ((p745 = j741.BaseObject.borrowObject(j741.SurfaceTimelineState)).surface = e745, p745.init(this._armature, this, null), this._surfaceTimelines.push(p745), this._poseTimelines.push(p745));
                        }
                        for (var m745 in z744)
                            for (var n745 = 0, o745 = z744[m745]; n745 < o745.length; n745++) {
                                var p745 = o745[n745];
                                this._boneTimelines.splice(this._boneTimelines.indexOf(p745), 1), p745.returnToPool();
                            }
                        for (var q745 = {}, r745 = [], s745 = 0, t745 = this._slotTimelines; s745 < t745.length; s745++)
                            (f745 = (p745 = t745[s745]).slot.name) in q745 || (q745[f745] = []), q745[f745].push(p745);
                        for (var u745 = 0, v745 = this._armature.getSlots(); u745 < v745.length; u745++) {
                            var w745 = v745[u745], x745 = w745.parent.name;
                            if (this.containsBoneMask(x745))
                                if (f745 = w745.name, g745 = this._animationData.getSlotTimelines(f745), f745 in q745)
                                    delete q745[f745];
                                else {
                                    var y745 = !1, z745 = !1;
                                    if (r745.length = 0, null !== g745)
                                        for (var a746 = 0, b746 = g745; a746 < b746.length; a746++) {
                                            var c746;
                                            switch ((c746 = b746[a746]).type) {
                                                case 20:
                                                    (p745 = j741.BaseObject.borrowObject(j741.SlotDislayTimelineState)).slot = w745, p745.init(this._armature, this, c746), this._slotTimelines.push(p745), y745 = !0;
                                                    break;
                                                case 21:
                                                    (p745 = j741.BaseObject.borrowObject(j741.SlotColorTimelineState)).slot = w745, p745.init(this._armature, this, c746), this._slotTimelines.push(p745), z745 = !0;
                                                    break;
                                                case 22:
                                                    (p745 = j741.BaseObject.borrowObject(j741.DeformTimelineState)).slot = w745, p745.init(this._armature, this, c746), this._slotTimelines.push(p745), r745.push(p745.vertexOffset);
                                            }
                                        }
                                    if (this.resetToPose && (y745 || ((p745 = j741.BaseObject.borrowObject(j741.SlotDislayTimelineState)).slot = w745, p745.init(this._armature, this, null), this._slotTimelines.push(p745), this._poseTimelines.push(p745)), z745 || ((p745 = j741.BaseObject.borrowObject(j741.SlotColorTimelineState)).slot = w745, p745.init(this._armature, this, null), this._slotTimelines.push(p745), this._poseTimelines.push(p745)), null !== w745.rawDisplayDatas))
                                        for (var d746 = 0, e746 = w745.rawDisplayDatas; d746 < e746.length; d746++) {
                                            var f746 = e746[d746];
                                            if (null !== f746 && 2 === f746.type) {
                                                var g746 = f746.vertices.offset;
                                                r745.indexOf(g746) < 0 && ((p745 = j741.BaseObject.borrowObject(j741.DeformTimelineState)).vertexOffset = g746, p745.slot = w745, p745.init(this._armature, this, null), this._slotTimelines.push(p745), this._poseTimelines.push(p745));
                                            }
                                        }
                                }
                        }
                        for (var m745 in q745)
                            for (var h746 = 0, i746 = q745[m745]; h746 < i746.length; h746++)
                                p745 = i746[h746], this._slotTimelines.splice(this._slotTimelines.indexOf(p745), 1), p745.returnToPool();
                    }, b742.prototype._advanceFadeTime = function (v744) {
                        var w744, x744 = this._fadeState > 0;
                        if (this._subFadeState < 0) {
                            this._subFadeState = 0;
                            var y744 = x744 ? j741.EventObject.FADE_OUT : j741.EventObject.FADE_IN;
                            this._armature.eventDispatcher.hasDBEventListener(y744) && ((w744 = j741.BaseObject.borrowObject(j741.EventObject)).type = y744, w744.armature = this._armature, w744.animationState = this, this._armature._dragonBones.bufferEvent(w744));
                        }
                        (v744 < 0 && (v744 = -v744), this._fadeTime += v744, this._fadeTime >= this.fadeTotalTime ? (this._subFadeState = 1, this._fadeProgress = x744 ? 0 : 1) : this._fadeTime > 0 ? this._fadeProgress = x744 ? 1 - this._fadeTime / this.fadeTotalTime : this._fadeTime / this.fadeTotalTime : this._fadeProgress = x744 ? 1 : 0, this._subFadeState > 0) && (x744 || (this._playheadState |= 1, this._fadeState = 0), y744 = x744 ? j741.EventObject.FADE_OUT_COMPLETE : j741.EventObject.FADE_IN_COMPLETE, this._armature.eventDispatcher.hasDBEventListener(y744) && ((w744 = j741.BaseObject.borrowObject(j741.EventObject)).type = y744, w744.armature = this._armature, w744.animationState = this, this._armature._dragonBones.bufferEvent(w744)));
                    }, b742.prototype.init = function (q744, r744, s744) {
                        if (null === this._armature) {
                            if (this._armature = q744, this._animationData = r744, this.resetToPose = s744.resetToPose, this.additiveBlending = s744.additiveBlending, this.displayControl = s744.displayControl, this.actionEnabled = s744.actionEnabled, this.layer = s744.layer, this.playTimes = s744.playTimes, this.timeScale = s744.timeScale, this.fadeTotalTime = s744.fadeInTime, this.autoFadeOutTime = s744.autoFadeOutTime, this.weight = s744.weight, this.name = s744.name.length > 0 ? s744.name : s744.animation, this.group = s744.group, s744.pauseFadeIn ? this._playheadState = 2 : this._playheadState = 3, s744.duration < 0 ? (this._position = 0, this._duration = this._animationData.duration, 0 !== s744.position ? this.timeScale >= 0 ? this._time = s744.position : this._time = s744.position - this._duration : this._time = 0) : (this._position = s744.position, this._duration = s744.duration, this._time = 0), this.timeScale < 0 && 0 === this._time && (this._time = -1e-6), this.fadeTotalTime <= 0 && (this._fadeProgress = .999999), s744.boneMask.length > 0) {
                                this._boneMask.length = s744.boneMask.length;
                                for (var t744 = 0, u744 = this._boneMask.length; t744 < u744; ++t744)
                                    this._boneMask[t744] = s744.boneMask[t744];
                            }
                            this._actionTimeline = j741.BaseObject.borrowObject(j741.ActionTimelineState), this._actionTimeline.init(this._armature, this, this._animationData.actionTimeline), this._actionTimeline.currentTime = this._time, this._actionTimeline.currentTime < 0 && (this._actionTimeline.currentTime = this._duration - this._actionTimeline.currentTime), null !== this._animationData.zOrderTimeline && (this._zOrderTimeline = j741.BaseObject.borrowObject(j741.ZOrderTimelineState), this._zOrderTimeline.init(this._armature, this, this._animationData.zOrderTimeline));
                        }
                    }, b742.prototype.advanceTime = function (b744, c744) {
                        if (this._blendState.dirty = !1, 0 === this._fadeState && 0 === this._subFadeState || this._advanceFadeTime(b744), 3 === this._playheadState && (1 !== this.timeScale && (b744 *= this.timeScale), this._time += b744), 0 !== this._timelineDirty && (2 === this._timelineDirty && this._updateTimelines(), this._timelineDirty = 0, this._updateBoneAndSlotTimelines()), 0 !== this.weight) {
                            var d744 = 0 === this._fadeState && c744 > 0, e744 = !0, f744 = !0, g744 = this._time;
                            if (this._weightResult = this.weight * this._fadeProgress, null !== this._parent && (this._weightResult *= this._parent._weightResult / this._parent._fadeProgress), this._actionTimeline.playState <= 0 && this._actionTimeline.update(g744), d744) {
                                var h744 = 2 * c744;
                                this._actionTimeline.currentTime = Math.floor(this._actionTimeline.currentTime * h744) / h744;
                            }
                            if (null !== this._zOrderTimeline && this._zOrderTimeline.playState <= 0 && this._zOrderTimeline.update(g744), d744) {
                                var i744 = Math.floor(this._actionTimeline.currentTime * c744);
                                this._armature._cacheFrameIndex === i744 ? (e744 = !1, f744 = !1) : (this._armature._cacheFrameIndex = i744, this._animationData.cachedFrames[i744] ? f744 = !1 : this._animationData.cachedFrames[i744] = !0);
                            }
                            if (e744) {
                                if (f744)
                                    for (var j744 = 0, k744 = this._boneTimelines.length; j744 < k744; ++j744)
                                        (p744 = this._boneTimelines[j744]).playState <= 0 && p744.update(g744), (j744 === k744 - 1 || p744.bone !== this._boneTimelines[j744 + 1].bone) && 0 !== (l744 = p744.bone._blendState.update(this._weightResult, this.layer)) && p744.blend(l744);
                                for (j744 = 0, k744 = this._surfaceTimelines.length; j744 < k744; ++j744) {
                                    var l744 = (p744 = this._surfaceTimelines[j744]).surface._blendState.update(this._weightResult, this.layer);
                                    p744.playState <= 0 && p744.update(g744), 0 !== l744 && p744.blend(l744);
                                }
                                if (this.displayControl)
                                    for (j744 = 0, k744 = this._slotTimelines.length; j744 < k744; ++j744) {
                                        var m744 = (p744 = this._slotTimelines[j744]).slot.displayController;
                                        null !== m744 && m744 !== this.name && m744 !== this.group || p744.playState <= 0 && p744.update(g744);
                                    }
                                for (j744 = 0, k744 = this._constraintTimelines.length; j744 < k744; ++j744)
                                    (p744 = this._constraintTimelines[j744]).playState <= 0 && p744.update(g744);
                                for (j744 = 0, k744 = this._animationTimelines.length; j744 < k744; ++j744)
                                    l744 = (p744 = this._animationTimelines[j744]).animationState._blendState.update(this._weightResult, this.layer), p744.playState <= 0 && p744.update(g744), 0 !== l744 && p744.blend(l744);
                            }
                            if (0 === this._fadeState) {
                                if (this._subFadeState > 0 && (this._subFadeState = 0, this._poseTimelines.length > 0)) {
                                    for (var n744 = 0, o744 = this._poseTimelines; n744 < o744.length; n744++) {
                                        var p744;
                                        (p744 = o744[n744]) instanceof j741.BoneTimelineState ? this._boneTimelines.splice(this._boneTimelines.indexOf(p744), 1) : p744 instanceof j741.SurfaceTimelineState ? this._surfaceTimelines.splice(this._surfaceTimelines.indexOf(p744), 1) : p744 instanceof j741.SlotTimelineState ? this._slotTimelines.splice(this._slotTimelines.indexOf(p744), 1) : p744 instanceof j741.ConstraintTimelineState && this._constraintTimelines.splice(this._constraintTimelines.indexOf(p744), 1), p744.returnToPool();
                                    }
                                    this._poseTimelines.length = 0;
                                }
                                this._actionTimeline.playState > 0 && this.autoFadeOutTime >= 0 && this.fadeOut(this.autoFadeOutTime);
                            }
                        }
                    }, b742.prototype.play = function () {
                        this._playheadState = 3;
                    }, b742.prototype.stop = function () {
                        this._playheadState &= 1;
                    }, b742.prototype.fadeOut = function (o743, p743) {
                        if (void 0 === p743 && (p743 = !0), o743 < 0 && (o743 = 0), p743 && (this._playheadState &= 2), this._fadeState > 0) {
                            if (o743 > this.fadeTotalTime - this._fadeTime)
                                return;
                        }
                        else {
                            this._fadeState = 1, this._subFadeState = -1, (o743 <= 0 || this._fadeProgress <= 0) && (this._fadeProgress = 1e-6);
                            for (var q743 = 0, r743 = this._boneTimelines; q743 < r743.length; q743++)
                                (a744 = r743[q743]).fadeOut();
                            for (var s743 = 0, t743 = this._surfaceTimelines; s743 < t743.length; s743++)
                                (a744 = t743[s743]).fadeOut();
                            for (var u743 = 0, v743 = this._slotTimelines; u743 < v743.length; u743++)
                                (a744 = v743[u743]).fadeOut();
                            for (var w743 = 0, x743 = this._constraintTimelines; w743 < x743.length; w743++)
                                (a744 = x743[w743]).fadeOut();
                            for (var y743 = 0, z743 = this._animationTimelines; y743 < z743.length; y743++) {
                                var a744;
                                (a744 = z743[y743]).animationState.fadeOut(o743, p743), a744.fadeOut();
                            }
                        }
                        this.displayControl = !1, this.fadeTotalTime = this._fadeProgress > 1e-6 ? o743 / this._fadeProgress : 0, this._fadeTime = this.fadeTotalTime * (1 - this._fadeProgress);
                    }, b742.prototype.containsBoneMask = function (n743) {
                        return 0 === this._boneMask.length || this._boneMask.indexOf(n743) >= 0;
                    }, b742.prototype.addBoneMask = function (h743, i743) {
                        void 0 === i743 && (i743 = !0);
                        var j743 = this._armature.getBone(h743);
                        if (null !== j743) {
                            if (this._boneMask.indexOf(h743) < 0 && this._boneMask.push(h743), i743)
                                for (var k743 = 0, l743 = this._armature.getBones(); k743 < l743.length; k743++) {
                                    var m743 = l743[k743];
                                    this._boneMask.indexOf(m743.name) < 0 && j743.contains(m743) && this._boneMask.push(m743.name);
                                }
                            this._timelineDirty = 1;
                        }
                    }, b742.prototype.removeBoneMask = function (w742, x742) {
                        void 0 === x742 && (x742 = !0);
                        var y742 = this._boneMask.indexOf(w742);
                        if (y742 >= 0 && this._boneMask.splice(y742, 1), x742) {
                            var z742 = this._armature.getBone(w742);
                            if (null !== z742) {
                                var a743 = this._armature.getBones();
                                if (this._boneMask.length > 0)
                                    for (var b743 = 0, c743 = a743; b743 < c743.length; b743++) {
                                        var d743 = c743[b743], e743 = this._boneMask.indexOf(d743.name);
                                        e743 >= 0 && z742.contains(d743) && this._boneMask.splice(e743, 1);
                                    }
                                else
                                    for (var f743 = 0, g743 = a743; f743 < g743.length; f743++)
                                        (d743 = g743[f743]) !== z742 && (z742.contains(d743) || this._boneMask.push(d743.name));
                            }
                        }
                        this._timelineDirty = 1;
                    }, b742.prototype.removeAllBoneMask = function () {
                        this._boneMask.length = 0, this._timelineDirty = 1;
                    }, Object.defineProperty(b742.prototype, "isFadeIn", {
                        get: function () {
                            return this._fadeState < 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "isFadeOut", {
                        get: function () {
                            return this._fadeState > 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "isFadeComplete", {
                        get: function () {
                            return 0 === this._fadeState;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "isPlaying", {
                        get: function () {
                            return 0 != (2 & this._playheadState) && this._actionTimeline.playState <= 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "isCompleted", {
                        get: function () {
                            return this._actionTimeline.playState > 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "currentPlayTimes", {
                        get: function () {
                            return this._actionTimeline.currentPlayTimes;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "totalTime", {
                        get: function () {
                            return this._duration;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "currentTime", {
                        get: function () {
                            return this._actionTimeline.currentTime;
                        },
                        set: function (q742) {
                            var r742 = this._actionTimeline.currentPlayTimes - (this._actionTimeline.playState > 0 ? 1 : 0);
                            if ((q742 < 0 || this._duration < q742) && (q742 = q742 % this._duration + r742 * this._duration) < 0 && (q742 += this._duration), this.playTimes > 0 && r742 === this.playTimes - 1 && q742 === this._duration && (q742 = this._duration - 1e-6), this._time !== q742) {
                                this._time = q742, this._actionTimeline.setCurrentTime(this._time), null !== this._zOrderTimeline && (this._zOrderTimeline.playState = -1);
                                for (var s742 = 0, t742 = this._boneTimelines; s742 < t742.length; s742++)
                                    t742[s742].playState = -1;
                                for (var u742 = 0, v742 = this._slotTimelines; u742 < v742.length; u742++)
                                    v742[u742].playState = -1;
                            }
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b742.prototype, "animationData", {
                        get: function () {
                            return this._animationData;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b742;
                }(j741.BaseObject);
                j741.AnimationState = k741;
                var l741 = function (v741) {
                    function w741() {
                        var z741 = null !== v741 && v741.apply(this, arguments) || this;
                        return z741.current = new j741.Transform(), z741.delta = new j741.Transform(), z741.result = new j741.Transform(), z741;
                    }
                    return c219(w741, v741), w741.toString = function () {
                        return "[class dragonBones.BonePose]";
                    }, w741.prototype._onClear = function () {
                        this.current.identity(), this.delta.identity(), this.result.identity();
                    }, w741;
                }(j741.BaseObject);
                j741.BonePose = l741;
                var m741 = function () {
                    function q741() { }
                    return q741.prototype.update = function (t741, u741) {
                        if (this.dirty) {
                            if (!(this.leftWeight > 0))
                                return 0;
                            if (this.layer !== u741) {
                                if (this.layerWeight >= this.leftWeight)
                                    return this.leftWeight = 0, 0;
                                this.layer = u741, this.leftWeight -= this.layerWeight, this.layerWeight = 0;
                            }
                            return t741 *= this.leftWeight, this.layerWeight += t741, this.blendWeight = t741, 2;
                        }
                        return this.dirty = !0, this.layer = u741, this.layerWeight = t741, this.leftWeight = 1, this.blendWeight = t741, 1;
                    }, q741.prototype.clear = function () {
                        this.dirty = !1, this.layer = 0, this.leftWeight = 0, this.layerWeight = 0, this.blendWeight = 0;
                    }, q741;
                }();
                j741.BlendState = m741;
            }(d219 || (d219 = {})), function (x738) {
                var y738 = function (q740) {
                    function r740() {
                        return null !== q740 && q740.apply(this, arguments) || this;
                    }
                    return c219(r740, q740), r740.prototype._onClear = function () {
                        this.playState = -1, this.currentPlayTimes = -1, this.currentTime = -1, this._tweenState = 0, this._frameRate = 0, this._frameValueOffset = 0, this._frameCount = 0, this._frameOffset = 0, this._frameIndex = -1, this._frameRateR = 0, this._position = 0, this._duration = 0, this._timeScale = 1, this._timeOffset = 0, this._dragonBonesData = null, this._animationData = null, this._timelineData = null, this._armature = null, this._animationState = null, this._actionTimeline = null, this._frameArray = null, this._frameIntArray = null, this._frameFloatArray = null, this._timelineArray = null, this._frameIndices = null;
                    }, r740.prototype._setCurrentTime = function (d741) {
                        var e741 = this.playState, f741 = this.currentPlayTimes, g741 = this.currentTime;
                        if (null !== this._actionTimeline && this._frameCount <= 1)
                            this.playState = this._actionTimeline.playState >= 0 ? 1 : -1, this.currentPlayTimes = 1, this.currentTime = this._actionTimeline.currentTime;
                        else if (null === this._actionTimeline || 1 !== this._timeScale || 0 !== this._timeOffset) {
                            var h741 = this._animationState.playTimes, i741 = h741 * this._duration;
                            d741 *= this._timeScale, 0 !== this._timeOffset && (d741 += this._timeOffset * this._animationData.duration), h741 > 0 && (d741 >= i741 || d741 <= -i741) ? (this.playState <= 0 && 3 === this._animationState._playheadState && (this.playState = 1), this.currentPlayTimes = h741, this.currentTime = d741 < 0 ? 0 : this._duration + 1e-6) : (0 !== this.playState && 3 === this._animationState._playheadState && (this.playState = 0), d741 < 0 ? (d741 = -d741, this.currentPlayTimes = Math.floor(d741 / this._duration), this.currentTime = this._duration - d741 % this._duration) : (this.currentPlayTimes = Math.floor(d741 / this._duration), this.currentTime = d741 % this._duration)), this.currentTime += this._position;
                        }
                        else
                            this.playState = this._actionTimeline.playState, this.currentPlayTimes = this._actionTimeline.currentPlayTimes, this.currentTime = this._actionTimeline.currentTime;
                        return (this.currentPlayTimes !== f741 || this.currentTime !== g741) && ((e741 < 0 && this.playState !== e741 || this.playState <= 0 && this.currentPlayTimes !== f741) && (this._frameIndex = -1), !0);
                    }, r740.prototype.init = function (a741, b741, c741) {
                        this._armature = a741, this._animationState = b741, this._timelineData = c741, this._actionTimeline = this._animationState._actionTimeline, this === this._actionTimeline && (this._actionTimeline = null), this._animationData = this._animationState._animationData, this._frameRate = this._animationData.parent.frameRate, this._frameRateR = 1 / this._frameRate, this._position = this._animationState._position, this._duration = this._animationState._duration, this._dragonBonesData = this._animationData.parent.parent, null !== this._timelineData && (this._frameIntArray = this._dragonBonesData.frameIntArray, this._frameFloatArray = this._dragonBonesData.frameFloatArray, this._frameArray = this._dragonBonesData.frameArray, this._timelineArray = this._dragonBonesData.timelineArray, this._frameIndices = this._dragonBonesData.frameIndices, this._frameCount = this._timelineArray[this._timelineData.offset + 2], this._frameValueOffset = this._timelineArray[this._timelineData.offset + 4], this._timeScale = 100 / this._timelineArray[this._timelineData.offset + 0], this._timeOffset = .01 * this._timelineArray[this._timelineData.offset + 1]);
                    }, r740.prototype.fadeOut = function () { }, r740.prototype.update = function (x740) {
                        if (this._setCurrentTime(x740)) {
                            if (this._frameCount > 1) {
                                var y740 = Math.floor(this.currentTime * this._frameRate), z740 = this._frameIndices[this._timelineData.frameIndicesOffset + y740];
                                this._frameIndex !== z740 && (this._frameIndex = z740, this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + this._frameIndex], this._onArriveAtFrame());
                            }
                            else
                                this._frameIndex < 0 && (this._frameIndex = 0, null !== this._timelineData && (this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5]), this._onArriveAtFrame());
                            0 !== this._tweenState && this._onUpdateFrame();
                        }
                    }, r740;
                }(x738.BaseObject);
                x738.TimelineState = y738;
                var z738 = function (w739) {
                    function x739() {
                        return null !== w739 && w739.apply(this, arguments) || this;
                    }
                    return c219(x739, w739), x739._getEasingValue = function (m740, n740, o740) {
                        var p740 = n740;
                        switch (m740) {
                            case 3:
                                p740 = Math.pow(n740, 2);
                                break;
                            case 4:
                                p740 = 1 - Math.pow(1 - n740, 2);
                                break;
                            case 5:
                                p740 = .5 * (1 - Math.cos(n740 * Math.PI));
                        }
                        return (p740 - n740) * o740 + n740;
                    }, x739._getEasingCurveValue = function (f740, g740, h740, i740) {
                        if (f740 <= 0)
                            return 0;
                        if (f740 >= 1)
                            return 1;
                        var j740 = h740 + 1, k740 = Math.floor(f740 * j740), l740 = 0 === k740 ? 0 : g740[i740 + k740 - 1];
                        return 1e-4 * (l740 + ((k740 === j740 - 1 ? 1e4 : g740[i740 + k740]) - l740) * (f740 * j740 - k740));
                    }, x739.prototype._onClear = function () {
                        w739.prototype._onClear.call(this), this._tweenType = 0, this._curveCount = 0, this._framePosition = 0, this._frameDurationR = 0, this._tweenProgress = 0, this._tweenEasing = 0;
                    }, x739.prototype._onArriveAtFrame = function () {
                        if (this._frameCount > 1 && (this._frameIndex !== this._frameCount - 1 || 0 === this._animationState.playTimes || this._animationState.currentPlayTimes < this._animationState.playTimes - 1)) {
                            if (this._tweenType = this._frameArray[this._frameOffset + 1], this._tweenState = 0 === this._tweenType ? 1 : 2, 2 === this._tweenType ? this._curveCount = this._frameArray[this._frameOffset + 2] : 0 !== this._tweenType && 1 !== this._tweenType && (this._tweenEasing = .01 * this._frameArray[this._frameOffset + 2]), this._framePosition = this._frameArray[this._frameOffset] * this._frameRateR, this._frameIndex === this._frameCount - 1)
                                this._frameDurationR = 1 / (this._animationData.duration - this._framePosition);
                            else {
                                var d740 = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + this._frameIndex + 1], e740 = this._frameArray[d740] * this._frameRateR - this._framePosition;
                                this._frameDurationR = e740 > 0 ? 1 / e740 : 0;
                            }
                        }
                        else
                            this._tweenState = 1;
                    }, x739.prototype._onUpdateFrame = function () {
                        2 === this._tweenState ? (this._tweenProgress = (this.currentTime - this._framePosition) * this._frameDurationR, 2 === this._tweenType ? this._tweenProgress = x739._getEasingCurveValue(this._tweenProgress, this._frameArray, this._curveCount, this._frameOffset + 3) : 1 !== this._tweenType && (this._tweenProgress = x739._getEasingValue(this._tweenType, this._tweenProgress, this._tweenEasing))) : this._tweenProgress = 0;
                    }, x739;
                }(y738);
                x738.TweenTimelineState = z738;
                var a739 = function (o739) {
                    function p739() {
                        return null !== o739 && o739.apply(this, arguments) || this;
                    }
                    return c219(p739, o739), p739.prototype._onClear = function () {
                        o739.prototype._onClear.call(this), this.bone = null, this.bonePose = null;
                    }, p739.prototype.blend = function (s739) {
                        var t739 = this.bone._blendState.blendWeight, u739 = this.bone.animationPose, v739 = this.bonePose.result;
                        2 === s739 ? (u739.x += v739.x * t739, u739.y += v739.y * t739, u739.rotation += v739.rotation * t739, u739.skew += v739.skew * t739, u739.scaleX += (v739.scaleX - 1) * t739, u739.scaleY += (v739.scaleY - 1) * t739) : 1 !== t739 ? (u739.x = v739.x * t739, u739.y = v739.y * t739, u739.rotation = v739.rotation * t739, u739.skew = v739.skew * t739, u739.scaleX = (v739.scaleX - 1) * t739 + 1, u739.scaleY = (v739.scaleY - 1) * t739 + 1) : (u739.x = v739.x, u739.y = v739.y, u739.rotation = v739.rotation, u739.skew = v739.skew, u739.scaleX = v739.scaleX, u739.scaleY = v739.scaleY), 0 === this._animationState._fadeState && 0 === this._animationState._subFadeState || (this.bone._transformDirty = !0);
                    }, p739;
                }(z738);
                x738.BoneTimelineState = a739;
                var b739 = function (l739) {
                    function m739() {
                        return null !== l739 && l739.apply(this, arguments) || this;
                    }
                    return c219(m739, l739), m739.prototype._onClear = function () {
                        l739.prototype._onClear.call(this), this.slot = null;
                    }, m739;
                }(z738);
                x738.SlotTimelineState = b739;
                var c739 = function (i739) {
                    function j739() {
                        return null !== i739 && i739.apply(this, arguments) || this;
                    }
                    return c219(j739, i739), j739.prototype._onClear = function () {
                        i739.prototype._onClear.call(this), this.constraint = null;
                    }, j739;
                }(z738);
                x738.ConstraintTimelineState = c739;
            }(d219 || (d219 = {})), function (n730) {
                var o730 = function (p737) {
                    function q737() {
                        return null !== p737 && p737.apply(this, arguments) || this;
                    }
                    return c219(q737, p737), q737.toString = function () {
                        return "[class dragonBones.ActionTimelineState]";
                    }, q737.prototype._onCrossFrame = function (o738) {
                        var p738 = this._armature.eventDispatcher;
                        if (this._animationState.actionEnabled)
                            for (var q738 = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + o738], r738 = this._frameArray[q738 + 1], s738 = this._animationData.parent.actions, t738 = 0; t738 < r738; ++t738) {
                                var u738 = s738[this._frameArray[q738 + 2 + t738]];
                                if (0 === u738.type)
                                    (v738 = n730.BaseObject.borrowObject(n730.EventObject)).time = this._frameArray[q738] / this._frameRate, v738.animationState = this._animationState, n730.EventObject.actionDataToInstance(u738, v738, this._armature), this._armature._bufferAction(v738, !0);
                                else {
                                    var v738, w738 = 10 === u738.type ? n730.EventObject.FRAME_EVENT : n730.EventObject.SOUND_EVENT;
                                    (11 === u738.type || p738.hasDBEventListener(w738)) && ((v738 = n730.BaseObject.borrowObject(n730.EventObject)).time = this._frameArray[q738] / this._frameRate, v738.animationState = this._animationState, n730.EventObject.actionDataToInstance(u738, v738, this._armature), this._armature._dragonBones.bufferEvent(v738));
                                }
                            }
                    }, q737.prototype._onArriveAtFrame = function () { }, q737.prototype._onUpdateFrame = function () { }, q737.prototype.update = function (y737) {
                        var z737 = this.playState, a738 = this.currentPlayTimes, b738 = this.currentTime;
                        if (this._setCurrentTime(y737)) {
                            var c738 = this._armature.eventDispatcher;
                            if (z737 < 0) {
                                if (this.playState === z737)
                                    return;
                                if (this._animationState.displayControl && this._animationState.resetToPose && this._armature._sortZOrder(null, 0), a738 = this.currentPlayTimes, c738.hasDBEventListener(n730.EventObject.START)) {
                                    var d738 = n730.BaseObject.borrowObject(n730.EventObject);
                                    d738.type = n730.EventObject.START, d738.armature = this._armature, d738.animationState = this._animationState, this._armature._dragonBones.bufferEvent(d738);
                                }
                            }
                            var e738 = this._animationState.timeScale < 0, f738 = null, g738 = null;
                            if (this.currentPlayTimes !== a738 && (c738.hasDBEventListener(n730.EventObject.LOOP_COMPLETE) && ((f738 = n730.BaseObject.borrowObject(n730.EventObject)).type = n730.EventObject.LOOP_COMPLETE, f738.armature = this._armature, f738.animationState = this._animationState), this.playState > 0 && c738.hasDBEventListener(n730.EventObject.COMPLETE) && ((g738 = n730.BaseObject.borrowObject(n730.EventObject)).type = n730.EventObject.COMPLETE, g738.armature = this._armature, g738.animationState = this._animationState)), this._frameCount > 1) {
                                var h738 = this._timelineData, i738 = Math.floor(this.currentTime * this._frameRate), j738 = this._frameIndices[h738.frameIndicesOffset + i738];
                                if (this._frameIndex !== j738) {
                                    var k738 = this._frameIndex;
                                    if (this._frameIndex = j738, null !== this._timelineArray)
                                        if (this._frameOffset = this._animationData.frameOffset + this._timelineArray[h738.offset + 5 + this._frameIndex], e738) {
                                            if (k738 < 0) {
                                                var l738 = Math.floor(b738 * this._frameRate);
                                                k738 = this._frameIndices[h738.frameIndicesOffset + l738], this.currentPlayTimes === a738 && k738 === j738 && (k738 = -1);
                                            }
                                            for (; k738 >= 0;) {
                                                var m738 = this._animationData.frameOffset + this._timelineArray[h738.offset + 5 + k738], n738 = this._frameArray[m738] / this._frameRate;
                                                if (this._position <= n738 && n738 <= this._position + this._duration && this._onCrossFrame(k738), null !== f738 && 0 === k738 && (this._armature._dragonBones.bufferEvent(f738), f738 = null), k738 > 0 ? k738-- : k738 = this._frameCount - 1, k738 === j738)
                                                    break;
                                            }
                                        }
                                        else
                                            for (k738 < 0 && (l738 = Math.floor(b738 * this._frameRate), k738 = this._frameIndices[h738.frameIndicesOffset + l738], m738 = this._animationData.frameOffset + this._timelineArray[h738.offset + 5 + k738], n738 = this._frameArray[m738] / this._frameRate, this.currentPlayTimes === a738 && (b738 <= n738 ? k738 > 0 ? k738-- : k738 = this._frameCount - 1 : k738 === j738 && (k738 = -1))); k738 >= 0 && (k738 < this._frameCount - 1 ? k738++ : k738 = 0, m738 = this._animationData.frameOffset + this._timelineArray[h738.offset + 5 + k738], n738 = this._frameArray[m738] / this._frameRate, this._position <= n738 && n738 <= this._position + this._duration && this._onCrossFrame(k738), null !== f738 && 0 === k738 && (this._armature._dragonBones.bufferEvent(f738), f738 = null), k738 !== j738);)
                                                ;
                                }
                            }
                            else
                                this._frameIndex < 0 && (this._frameIndex = 0, null !== this._timelineData) && (this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5], n738 = this._frameArray[this._frameOffset] / this._frameRate, this.currentPlayTimes === a738 ? b738 <= n738 && this._onCrossFrame(this._frameIndex) : this._position <= n738 && (e738 || null === f738 || (this._armature._dragonBones.bufferEvent(f738), f738 = null), this._onCrossFrame(this._frameIndex)));
                            null !== f738 && this._armature._dragonBones.bufferEvent(f738), null !== g738 && this._armature._dragonBones.bufferEvent(g738);
                        }
                    }, q737.prototype.setCurrentTime = function (x737) {
                        this._setCurrentTime(x737), this._frameIndex = -1;
                    }, q737;
                }(n730.TimelineState);
                n730.ActionTimelineState = o730;
                var p730 = function (k737) {
                    function l737() {
                        return null !== k737 && k737.apply(this, arguments) || this;
                    }
                    return c219(l737, k737), l737.toString = function () {
                        return "[class dragonBones.ZOrderTimelineState]";
                    }, l737.prototype._onArriveAtFrame = function () {
                        this.playState >= 0 && (this._frameArray[this._frameOffset + 1] > 0 ? this._armature._sortZOrder(this._frameArray, this._frameOffset + 2) : this._armature._sortZOrder(null, 0));
                    }, l737.prototype._onUpdateFrame = function () { }, l737;
                }(n730.TimelineState);
                n730.ZOrderTimelineState = p730;
                var q730 = function (v736) {
                    function w736() {
                        return null !== v736 && v736.apply(this, arguments) || this;
                    }
                    return c219(w736, v736), w736.toString = function () {
                        return "[class dragonBones.BoneAllTimelineState]";
                    }, w736.prototype._onArriveAtFrame = function () {
                        if (v736.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var f737 = this._animationData.frameFloatOffset + this._frameValueOffset + 6 * this._frameIndex, g737 = this._armature._armatureData.scale, h737 = this._frameFloatArray, i737 = this.bonePose.current, j737 = this.bonePose.delta;
                            i737.x = h737[f737++] * g737, i737.y = h737[f737++] * g737, i737.rotation = h737[f737++], i737.skew = h737[f737++], i737.scaleX = h737[f737++], i737.scaleY = h737[f737++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (f737 = this._animationData.frameFloatOffset + this._frameValueOffset), j737.x = h737[f737++] * g737 - i737.x, j737.y = h737[f737++] * g737 - i737.y, j737.rotation = h737[f737++] - i737.rotation, j737.skew = h737[f737++] - i737.skew, j737.scaleX = h737[f737++] - i737.scaleX, j737.scaleY = h737[f737++] - i737.scaleY) : (j737.x = 0, j737.y = 0, j737.rotation = 0, j737.skew = 0, j737.scaleX = 0, j737.scaleY = 0);
                        }
                        else
                            i737 = this.bonePose.current, j737 = this.bonePose.delta, i737.x = 0, i737.y = 0, i737.rotation = 0, i737.skew = 0, i737.scaleX = 1, i737.scaleY = 1, j737.x = 0, j737.y = 0, j737.rotation = 0, j737.skew = 0, j737.scaleX = 0, j737.scaleY = 0;
                    }, w736.prototype._onUpdateFrame = function () {
                        v736.prototype._onUpdateFrame.call(this);
                        var c737 = this.bonePose.current, d737 = this.bonePose.delta, e737 = this.bonePose.result;
                        this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), e737.x = c737.x + d737.x * this._tweenProgress, e737.y = c737.y + d737.y * this._tweenProgress, e737.rotation = c737.rotation + d737.rotation * this._tweenProgress, e737.skew = c737.skew + d737.skew * this._tweenProgress, e737.scaleX = c737.scaleX + d737.scaleX * this._tweenProgress, e737.scaleY = c737.scaleY + d737.scaleY * this._tweenProgress;
                    }, w736.prototype.fadeOut = function () {
                        var b737 = this.bonePose.result;
                        b737.rotation = n730.Transform.normalizeRadian(b737.rotation), b737.skew = n730.Transform.normalizeRadian(b737.skew);
                    }, w736;
                }(n730.BoneTimelineState);
                n730.BoneAllTimelineState = q730;
                var r730 = function (i736) {
                    function j736() {
                        return null !== i736 && i736.apply(this, arguments) || this;
                    }
                    return c219(j736, i736), j736.toString = function () {
                        return "[class dragonBones.BoneTranslateTimelineState]";
                    }, j736.prototype._onArriveAtFrame = function () {
                        if (i736.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var q736 = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, r736 = this._armature._armatureData.scale, s736 = this._frameFloatArray, t736 = this.bonePose.current, u736 = this.bonePose.delta;
                            t736.x = s736[q736++] * r736, t736.y = s736[q736++] * r736, 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (q736 = this._animationData.frameFloatOffset + this._frameValueOffset), u736.x = s736[q736++] * r736 - t736.x, u736.y = s736[q736++] * r736 - t736.y) : (u736.x = 0, u736.y = 0);
                        }
                        else
                            t736 = this.bonePose.current, u736 = this.bonePose.delta, t736.x = 0, t736.y = 0, u736.x = 0, u736.y = 0;
                    }, j736.prototype._onUpdateFrame = function () {
                        i736.prototype._onUpdateFrame.call(this);
                        var n736 = this.bonePose.current, o736 = this.bonePose.delta, p736 = this.bonePose.result;
                        this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), p736.x = n736.x + o736.x * this._tweenProgress, p736.y = n736.y + o736.y * this._tweenProgress;
                    }, j736;
                }(n730.BoneTimelineState);
                n730.BoneTranslateTimelineState = r730;
                var s730 = function (u735) {
                    function v735() {
                        return null !== u735 && u735.apply(this, arguments) || this;
                    }
                    return c219(v735, u735), v735.toString = function () {
                        return "[class dragonBones.BoneRotateTimelineState]";
                    }, v735.prototype._onArriveAtFrame = function () {
                        if (u735.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var e736 = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, f736 = this._frameFloatArray, g736 = this.bonePose.current, h736 = this.bonePose.delta;
                            g736.rotation = f736[e736++], g736.skew = f736[e736++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 ? (e736 = this._animationData.frameFloatOffset + this._frameValueOffset, h736.rotation = n730.Transform.normalizeRadian(f736[e736++] - g736.rotation)) : h736.rotation = f736[e736++] - g736.rotation, h736.skew = f736[e736++] - g736.skew) : (h736.rotation = 0, h736.skew = 0);
                        }
                        else
                            g736 = this.bonePose.current, h736 = this.bonePose.delta, g736.rotation = 0, g736.skew = 0, h736.rotation = 0, h736.skew = 0;
                    }, v735.prototype._onUpdateFrame = function () {
                        u735.prototype._onUpdateFrame.call(this);
                        var b736 = this.bonePose.current, c736 = this.bonePose.delta, d736 = this.bonePose.result;
                        this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), d736.rotation = b736.rotation + c736.rotation * this._tweenProgress, d736.skew = b736.skew + c736.skew * this._tweenProgress;
                    }, v735.prototype.fadeOut = function () {
                        var a736 = this.bonePose.result;
                        a736.rotation = n730.Transform.normalizeRadian(a736.rotation), a736.skew = n730.Transform.normalizeRadian(a736.skew);
                    }, v735;
                }(n730.BoneTimelineState);
                n730.BoneRotateTimelineState = s730;
                var t730 = function (i735) {
                    function j735() {
                        return null !== i735 && i735.apply(this, arguments) || this;
                    }
                    return c219(j735, i735), j735.toString = function () {
                        return "[class dragonBones.BoneScaleTimelineState]";
                    }, j735.prototype._onArriveAtFrame = function () {
                        if (i735.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var q735 = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, r735 = this._frameFloatArray, s735 = this.bonePose.current, t735 = this.bonePose.delta;
                            s735.scaleX = r735[q735++], s735.scaleY = r735[q735++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (q735 = this._animationData.frameFloatOffset + this._frameValueOffset), t735.scaleX = r735[q735++] - s735.scaleX, t735.scaleY = r735[q735++] - s735.scaleY) : (t735.scaleX = 0, t735.scaleY = 0);
                        }
                        else
                            s735 = this.bonePose.current, t735 = this.bonePose.delta, s735.scaleX = 1, s735.scaleY = 1, t735.scaleX = 0, t735.scaleY = 0;
                    }, j735.prototype._onUpdateFrame = function () {
                        i735.prototype._onUpdateFrame.call(this);
                        var n735 = this.bonePose.current, o735 = this.bonePose.delta, p735 = this.bonePose.result;
                        this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), p735.scaleX = n735.scaleX + o735.scaleX * this._tweenProgress, p735.scaleY = n735.scaleY + o735.scaleY * this._tweenProgress;
                    }, j735;
                }(n730.BoneTimelineState);
                n730.BoneScaleTimelineState = t730;
                var u730 = function (j734) {
                    function k734() {
                        var h735 = null !== j734 && j734.apply(this, arguments) || this;
                        return h735._current = [], h735._delta = [], h735._result = [], h735;
                    }
                    return c219(k734, j734), k734.toString = function () {
                        return "[class dragonBones.SurfaceTimelineState]";
                    }, k734.prototype._onClear = function () {
                        j734.prototype._onClear.call(this), this.surface = null, this._frameFloatOffset = 0, this._valueCount = 0, this._deformCount = 0, this._valueOffset = 0, this._current.length = 0, this._delta.length = 0, this._result.length = 0;
                    }, k734.prototype._onArriveAtFrame = function () {
                        if (j734.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var c735 = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount, d735 = this._armature._armatureData.scale, e735 = this._frameFloatArray;
                            if (2 === this._tweenState) {
                                var f735 = c735 + this._valueCount;
                                this._frameIndex === this._frameCount - 1 && (f735 = this._animationData.frameFloatOffset + this._frameValueOffset);
                                for (var g735 = 0; g735 < this._valueCount; ++g735)
                                    this._delta[g735] = e735[f735 + g735] * d735 - (this._current[g735] = e735[c735 + g735] * d735);
                            }
                            else
                                for (g735 = 0; g735 < this._valueCount; ++g735)
                                    this._current[g735] = e735[c735 + g735] * d735;
                        }
                        else
                            for (g735 = 0; g735 < this._valueCount; ++g735)
                                this._current[g735] = 0;
                    }, k734.prototype._onUpdateFrame = function () {
                        j734.prototype._onUpdateFrame.call(this), this.surface._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0);
                        for (var b735 = 0; b735 < this._valueCount; ++b735)
                            this._result[b735] = this._current[b735] + this._delta[b735] * this._tweenProgress;
                    }, k734.prototype.init = function (w734, x734, y734) {
                        if (j734.prototype.init.call(this, w734, x734, y734), null !== this._timelineData) {
                            var z734 = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3];
                            this._deformCount = this._frameIntArray[z734 + 1], this._valueCount = this._frameIntArray[z734 + 2], this._valueOffset = this._frameIntArray[z734 + 3], this._frameFloatOffset = this._frameIntArray[z734 + 4] + this._animationData.frameFloatOffset;
                        }
                        else
                            this._deformCount = this.surface._deformVertices.length, this._valueCount = this._deformCount, this._valueOffset = 0, this._frameFloatOffset = 0;
                        this._current.length = this._valueCount, this._delta.length = this._valueCount, this._result.length = this._valueCount;
                        for (var a735 = 0; a735 < this._valueCount; ++a735)
                            this._delta[a735] = 0;
                    }, k734.prototype.blend = function (r734) {
                        for (var s734 = this.surface._blendState.blendWeight, t734 = this.surface._deformVertices, u734 = 0; u734 < this._deformCount; ++u734) {
                            var v734;
                            v734 = u734 < this._valueOffset ? this._frameFloatArray[this._frameFloatOffset + u734] : u734 < this._valueOffset + this._valueCount ? this._result[u734 - this._valueOffset] : this._frameFloatArray[this._frameFloatOffset + u734 - this._valueCount], 2 === r734 ? t734[u734] += v734 * s734 : t734[u734] = 1 !== s734 ? v734 * s734 : v734;
                        }
                        0 === this._animationState._fadeState && 0 === this._animationState._subFadeState || (this.surface._transformDirty = !0);
                    }, k734;
                }(n730.TweenTimelineState);
                n730.SurfaceTimelineState = u730;
                var v730 = function (e734) {
                    function f734() {
                        return null !== e734 && e734.apply(this, arguments) || this;
                    }
                    return c219(f734, e734), f734.toString = function () {
                        return "[class dragonBones.SlotDislayTimelineState]";
                    }, f734.prototype._onArriveAtFrame = function () {
                        if (this.playState >= 0) {
                            var i734 = null !== this._timelineData ? this._frameArray[this._frameOffset + 1] : this.slot._slotData.displayIndex;
                            this.slot.displayIndex !== i734 && this.slot._setDisplayIndex(i734, !0);
                        }
                    }, f734;
                }(n730.SlotTimelineState);
                n730.SlotDislayTimelineState = v730;
                var w730 = function (n733) {
                    function o733() {
                        var d734 = null !== n733 && n733.apply(this, arguments) || this;
                        return d734._current = [0, 0, 0, 0, 0, 0, 0, 0], d734._delta = [0, 0, 0, 0, 0, 0, 0, 0], d734._result = [0, 0, 0, 0, 0, 0, 0, 0], d734;
                    }
                    return c219(o733, n733), o733.toString = function () {
                        return "[class dragonBones.SlotColorTimelineState]";
                    }, o733.prototype._onClear = function () {
                        n733.prototype._onClear.call(this), this._dirty = !1;
                    }, o733.prototype._onArriveAtFrame = function () {
                        if (n733.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var y733 = this._dragonBonesData.intArray, z733 = this._frameIntArray, a734 = this._animationData.frameIntOffset + this._frameValueOffset + 1 * this._frameIndex, b734 = z733[a734];
                            b734 < 0 && (b734 += 65536), this._current[0] = y733[b734++], this._current[1] = y733[b734++], this._current[2] = y733[b734++], this._current[3] = y733[b734++], this._current[4] = y733[b734++], this._current[5] = y733[b734++], this._current[6] = y733[b734++], this._current[7] = y733[b734++], 2 === this._tweenState && ((b734 = this._frameIndex === this._frameCount - 1 ? z733[this._animationData.frameIntOffset + this._frameValueOffset] : z733[a734 + 1]) < 0 && (b734 += 65536), this._delta[0] = y733[b734++] - this._current[0], this._delta[1] = y733[b734++] - this._current[1], this._delta[2] = y733[b734++] - this._current[2], this._delta[3] = y733[b734++] - this._current[3], this._delta[4] = y733[b734++] - this._current[4], this._delta[5] = y733[b734++] - this._current[5], this._delta[6] = y733[b734++] - this._current[6], this._delta[7] = y733[b734++] - this._current[7]);
                        }
                        else {
                            var c734 = this.slot._slotData.color;
                            this._current[0] = 100 * c734.alphaMultiplier, this._current[1] = 100 * c734.redMultiplier, this._current[2] = 100 * c734.greenMultiplier, this._current[3] = 100 * c734.blueMultiplier, this._current[4] = c734.alphaOffset, this._current[5] = c734.redOffset, this._current[6] = c734.greenOffset, this._current[7] = c734.blueOffset;
                        }
                    }, o733.prototype._onUpdateFrame = function () {
                        n733.prototype._onUpdateFrame.call(this), this._dirty = !0, 2 !== this._tweenState && (this._tweenState = 0), this._result[0] = .01 * (this._current[0] + this._delta[0] * this._tweenProgress), this._result[1] = .01 * (this._current[1] + this._delta[1] * this._tweenProgress), this._result[2] = .01 * (this._current[2] + this._delta[2] * this._tweenProgress), this._result[3] = .01 * (this._current[3] + this._delta[3] * this._tweenProgress), this._result[4] = this._current[4] + this._delta[4] * this._tweenProgress, this._result[5] = this._current[5] + this._delta[5] * this._tweenProgress, this._result[6] = this._current[6] + this._delta[6] * this._tweenProgress, this._result[7] = this._current[7] + this._delta[7] * this._tweenProgress;
                    }, o733.prototype.fadeOut = function () {
                        this._tweenState = 0, this._dirty = !1;
                    }, o733.prototype.update = function (v733) {
                        if (n733.prototype.update.call(this, v733), 0 !== this._tweenState || this._dirty) {
                            var w733 = this.slot._colorTransform;
                            if (0 !== this._animationState._fadeState || 0 !== this._animationState._subFadeState) {
                                if (w733.alphaMultiplier !== this._result[0] || w733.redMultiplier !== this._result[1] || w733.greenMultiplier !== this._result[2] || w733.blueMultiplier !== this._result[3] || w733.alphaOffset !== this._result[4] || w733.redOffset !== this._result[5] || w733.greenOffset !== this._result[6] || w733.blueOffset !== this._result[7]) {
                                    var x733 = Math.pow(this._animationState._fadeProgress, 4);
                                    w733.alphaMultiplier += (this._result[0] - w733.alphaMultiplier) * x733, w733.redMultiplier += (this._result[1] - w733.redMultiplier) * x733, w733.greenMultiplier += (this._result[2] - w733.greenMultiplier) * x733, w733.blueMultiplier += (this._result[3] - w733.blueMultiplier) * x733, w733.alphaOffset += (this._result[4] - w733.alphaOffset) * x733, w733.redOffset += (this._result[5] - w733.redOffset) * x733, w733.greenOffset += (this._result[6] - w733.greenOffset) * x733, w733.blueOffset += (this._result[7] - w733.blueOffset) * x733, this.slot._colorDirty = !0;
                                }
                            }
                            else
                                this._dirty && (this._dirty = !1, w733.alphaMultiplier === this._result[0] && w733.redMultiplier === this._result[1] && w733.greenMultiplier === this._result[2] && w733.blueMultiplier === this._result[3] && w733.alphaOffset === this._result[4] && w733.redOffset === this._result[5] && w733.greenOffset === this._result[6] && w733.blueOffset === this._result[7] || (w733.alphaMultiplier = this._result[0], w733.redMultiplier = this._result[1], w733.greenMultiplier = this._result[2], w733.blueMultiplier = this._result[3], w733.alphaOffset = this._result[4], w733.redOffset = this._result[5], w733.greenOffset = this._result[6], w733.blueOffset = this._result[7], this.slot._colorDirty = !0));
                        }
                    }, o733;
                }(n730.SlotTimelineState);
                n730.SlotColorTimelineState = w730;
                var x730 = function (m732) {
                    function n732() {
                        var m733 = null !== m732 && m732.apply(this, arguments) || this;
                        return m733._current = [], m733._delta = [], m733._result = [], m733;
                    }
                    return c219(n732, m732), n732.toString = function () {
                        return "[class dragonBones.DeformTimelineState]";
                    }, n732.prototype._onClear = function () {
                        m732.prototype._onClear.call(this), this.vertexOffset = 0, this._dirty = !1, this._frameFloatOffset = 0, this._valueCount = 0, this._deformCount = 0, this._valueOffset = 0, this._current.length = 0, this._delta.length = 0, this._result.length = 0;
                    }, n732.prototype._onArriveAtFrame = function () {
                        if (m732.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var h733 = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount, i733 = this._armature._armatureData.scale, j733 = this._frameFloatArray;
                            if (2 === this._tweenState) {
                                var k733 = h733 + this._valueCount;
                                this._frameIndex === this._frameCount - 1 && (k733 = this._animationData.frameFloatOffset + this._frameValueOffset);
                                for (var l733 = 0; l733 < this._valueCount; ++l733)
                                    this._delta[l733] = j733[k733 + l733] * i733 - (this._current[l733] = j733[h733 + l733] * i733);
                            }
                            else
                                for (l733 = 0; l733 < this._valueCount; ++l733)
                                    this._current[l733] = j733[h733 + l733] * i733;
                        }
                        else
                            for (l733 = 0; l733 < this._valueCount; ++l733)
                                this._current[l733] = 0;
                    }, n732.prototype._onUpdateFrame = function () {
                        m732.prototype._onUpdateFrame.call(this), this._dirty = !0, 2 !== this._tweenState && (this._tweenState = 0);
                        for (var g733 = 0; g733 < this._valueCount; ++g733)
                            this._result[g733] = this._current[g733] + this._delta[g733] * this._tweenProgress;
                    }, n732.prototype.init = function (a733, b733, c733) {
                        if (m732.prototype.init.call(this, a733, b733, c733), null !== this._timelineData) {
                            var d733 = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3];
                            this.vertexOffset = this._frameIntArray[d733 + 0], this.vertexOffset < 0 && (this.vertexOffset += 65536), this._deformCount = this._frameIntArray[d733 + 1], this._valueCount = this._frameIntArray[d733 + 2], this._valueOffset = this._frameIntArray[d733 + 3], this._frameFloatOffset = this._frameIntArray[d733 + 4] + this._animationData.frameFloatOffset;
                        }
                        else {
                            var e733 = this.slot._deformVertices;
                            this._deformCount = null !== e733 ? e733.vertices.length : 0, this._valueCount = this._deformCount, this._valueOffset = 0, this._frameFloatOffset = 0;
                        }
                        this._current.length = this._valueCount, this._delta.length = this._valueCount, this._result.length = this._valueCount;
                        for (var f733 = 0; f733 < this._valueCount; ++f733)
                            this._delta[f733] = 0;
                    }, n732.prototype.fadeOut = function () {
                        this._tweenState = 0, this._dirty = !1;
                    }, n732.prototype.update = function (v732) {
                        var w732 = this.slot._deformVertices;
                        if (null !== w732 && null !== w732.verticesData && w732.verticesData.offset === this.vertexOffset && (m732.prototype.update.call(this, v732), 0 !== this._tweenState || this._dirty)) {
                            var x732 = w732.vertices;
                            if (0 !== this._animationState._fadeState || 0 !== this._animationState._subFadeState) {
                                for (var y732 = Math.pow(this._animationState._fadeProgress, 2), z732 = 0; z732 < this._deformCount; ++z732)
                                    z732 < this._valueOffset ? x732[z732] += (this._frameFloatArray[this._frameFloatOffset + z732] - x732[z732]) * y732 : z732 < this._valueOffset + this._valueCount ? x732[z732] += (this._result[z732 - this._valueOffset] - x732[z732]) * y732 : x732[z732] += (this._frameFloatArray[this._frameFloatOffset + z732 - this._valueCount] - x732[z732]) * y732;
                                w732.verticesDirty = !0;
                            }
                            else if (this._dirty) {
                                for (this._dirty = !1, z732 = 0; z732 < this._deformCount; ++z732)
                                    z732 < this._valueOffset ? x732[z732] = this._frameFloatArray[this._frameFloatOffset + z732] : z732 < this._valueOffset + this._valueCount ? x732[z732] = this._result[z732 - this._valueOffset] : x732[z732] = this._frameFloatArray[this._frameFloatOffset + z732 - this._valueCount];
                                w732.verticesDirty = !0;
                            }
                        }
                    }, n732;
                }(n730.SlotTimelineState);
                n730.DeformTimelineState = x730;
                var y730 = function (a732) {
                    function b732() {
                        return null !== a732 && a732.apply(this, arguments) || this;
                    }
                    return c219(b732, a732), b732.toString = function () {
                        return "[class dragonBones.IKConstraintTimelineState]";
                    }, b732.prototype._onClear = function () {
                        a732.prototype._onClear.call(this), this._current = 0, this._delta = 0;
                    }, b732.prototype._onArriveAtFrame = function () {
                        a732.prototype._onArriveAtFrame.call(this);
                        var h732 = this.constraint;
                        if (null !== this._timelineData) {
                            var i732 = this._animationData.frameIntOffset + this._frameValueOffset + 2 * this._frameIndex, j732 = this._frameIntArray, k732 = 0 !== j732[i732++];
                            this._current = .01 * j732[i732++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (i732 = this._animationData.frameIntOffset + this._frameValueOffset), this._delta = .01 * j732[i732 + 1] - this._current) : this._delta = 0, h732._bendPositive = k732;
                        }
                        else {
                            var l732 = h732._constraintData;
                            this._current = l732.weight, this._delta = 0, h732._bendPositive = l732.bendPositive;
                        }
                        h732.invalidUpdate();
                    }, b732.prototype._onUpdateFrame = function () {
                        a732.prototype._onUpdateFrame.call(this), 2 !== this._tweenState && (this._tweenState = 0);
                        var g732 = this.constraint;
                        g732._weight = this._current + this._delta * this._tweenProgress, g732.invalidUpdate();
                    }, b732;
                }(n730.ConstraintTimelineState);
                n730.IKConstraintTimelineState = y730;
                var z730 = function (m731) {
                    function n731() {
                        var z731 = null !== m731 && m731.apply(this, arguments) || this;
                        return z731._floats = [0, 0, 0, 0, 0, 0], z731;
                    }
                    return c219(n731, m731), n731.toString = function () {
                        return "[class dragonBones.AnimationTimelineState]";
                    }, n731.prototype._onClear = function () {
                        m731.prototype._onClear.call(this), this.animationState = null;
                    }, n731.prototype._onArriveAtFrame = function () {
                        if (m731.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                            var w731 = this._animationData.frameIntOffset + this._frameValueOffset + 2 * this._frameIndex, x731 = 1 / this.animationState._animationData.parent.frameRate, y731 = this._frameIntArray;
                            this._floats[0] = y731[w731++] * x731, this._floats[3] = .01 * y731[w731++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (w731 = this._animationData.frameIntOffset + this._frameValueOffset), this._floats[1] = y731[w731++] * x731 - this._floats[0], this._floats[4] = .01 * y731[w731++] - this._floats[3]) : (this._floats[1] = 0, this._floats[4] = 0);
                        }
                    }, n731.prototype._onUpdateFrame = function () {
                        m731.prototype._onUpdateFrame.call(this), 2 !== this._tweenState && (this._tweenState = 0), this._floats[0] >= 0 && (this._floats[2] = this._floats[0] + this._floats[1] * this._tweenProgress), this._floats[5] = this._floats[3] + this._floats[4] * this._tweenProgress;
                    }, n731.prototype.blend = function (t731) {
                        var u731 = this.animationState, v731 = u731._blendState.blendWeight;
                        2 === t731 ? (u731.weight += this._floats[5] * v731, u731.currentTime += this._floats[2] * v731) : (u731.weight = this._floats[5] * v731, u731.currentTime = this._floats[2] * v731);
                    }, n731;
                }(n730.TweenTimelineState);
                n730.AnimationTimelineState = z730;
            }(d219 || (d219 = {})), function (c730) {
                var d730 = function (f730) {
                    function g730() {
                        return null !== f730 && f730.apply(this, arguments) || this;
                    }
                    return c219(g730, f730), g730.actionDataToInstance = function (k730, l730, m730) {
                        0 === k730.type ? l730.type = g730.FRAME_EVENT : l730.type = 10 === k730.type ? g730.FRAME_EVENT : g730.SOUND_EVENT, l730.name = k730.name, l730.armature = m730, l730.actionData = k730, l730.data = k730.data, null !== k730.bone && (l730.bone = m730.getBone(k730.bone.name)), null !== k730.slot && (l730.slot = m730.getSlot(k730.slot.name));
                    }, g730.toString = function () {
                        return "[class dragonBones.EventObject]";
                    }, g730.prototype._onClear = function () {
                        this.time = 0, this.type = "", this.name = "", this.armature = null, this.bone = null, this.slot = null, this.animationState = null, this.actionData = null, this.data = null;
                    }, g730.START = "start", g730.LOOP_COMPLETE = "loopComplete", g730.COMPLETE = "complete", g730.FADE_IN = "fadeIn", g730.FADE_IN_COMPLETE = "fadeInComplete", g730.FADE_OUT = "fadeOut", g730.FADE_OUT_COMPLETE = "fadeOutComplete", g730.FRAME_EVENT = "frameEvent", g730.SOUND_EVENT = "soundEvent", g730;
                }(c730.BaseObject);
                c730.EventObject = d730;
            }(d219 || (d219 = {})), function (t728) {
                var u728 = function () {
                    function w728() { }
                    return w728._getArmatureType = function (b730) {
                        switch (b730.toLowerCase()) {
                            case "stage":
                                return 2;
                            case "armature":
                                return 0;
                            case "movieclip":
                                return 1;
                            default:
                                return 0;
                        }
                    }, w728._getBoneType = function (a730) {
                        switch (a730.toLowerCase()) {
                            case "bone":
                                return 0;
                            case "surface":
                                return 1;
                            default:
                                return 0;
                        }
                    }, w728._getDisplayType = function (z729) {
                        switch (z729.toLowerCase()) {
                            case "image":
                                return 0;
                            case "mesh":
                                return 2;
                            case "armature":
                                return 1;
                            case "boundingbox":
                                return 3;
                            case "path":
                                return 4;
                            default:
                                return 0;
                        }
                    }, w728._getBoundingBoxType = function (y729) {
                        switch (y729.toLowerCase()) {
                            case "rectangle":
                                return 0;
                            case "ellipse":
                                return 1;
                            case "polygon":
                                return 2;
                            default:
                                return 0;
                        }
                    }, w728._getActionType = function (x729) {
                        switch (x729.toLowerCase()) {
                            case "play":
                                return 0;
                            case "frame":
                                return 10;
                            case "sound":
                                return 11;
                            default:
                                return 0;
                        }
                    }, w728._getBlendMode = function (w729) {
                        switch (w729.toLowerCase()) {
                            case "normal":
                                return 0;
                            case "add":
                                return 1;
                            case "alpha":
                                return 2;
                            case "darken":
                                return 3;
                            case "difference":
                                return 4;
                            case "erase":
                                return 5;
                            case "hardlight":
                                return 6;
                            case "invert":
                                return 7;
                            case "layer":
                                return 8;
                            case "lighten":
                                return 9;
                            case "multiply":
                                return 10;
                            case "overlay":
                                return 11;
                            case "screen":
                                return 12;
                            case "subtract":
                                return 13;
                            default:
                                return 0;
                        }
                    }, w728._getPositionMode = function (v729) {
                        switch (v729.toLocaleLowerCase()) {
                            case "percent":
                                return 1;
                            case "fixed":
                                return 0;
                            default:
                                return 1;
                        }
                    }, w728._getSpacingMode = function (u729) {
                        switch (u729.toLocaleLowerCase()) {
                            case "length":
                                return 0;
                            case "percent":
                                return 2;
                            case "fixed":
                                return 1;
                            default:
                                return 0;
                        }
                    }, w728._getRotateMode = function (t729) {
                        switch (t729.toLocaleLowerCase()) {
                            case "tangent":
                                return 0;
                            case "chain":
                                return 1;
                            case "chainscale":
                                return 2;
                            default:
                                return 0;
                        }
                    }, w728.parseDragonBonesData = function (s729) {
                        return console.warn("Deprecated."), s729 instanceof ArrayBuffer ? t728.BinaryDataParser.getInstance().parseDragonBonesData(s729) : t728.ObjectDataParser.getInstance().parseDragonBonesData(s729);
                    }, w728.parseTextureAtlasData = function (i729, j729) {
                        void 0 === j729 && (j729 = 1), console.warn("已废弃");
                        for (var k729 = {}, l729 = i729[w728.SUB_TEXTURE], m729 = 0, n729 = l729.length; m729 < n729; m729++) {
                            var o729 = l729[m729], p729 = o729[w728.NAME], q729 = new t728.Rectangle(), r729 = null;
                            q729.x = o729[w728.X] / j729, q729.y = o729[w728.Y] / j729, q729.width = o729[w728.WIDTH] / j729, q729.height = o729[w728.HEIGHT] / j729, w728.FRAME_WIDTH in o729 && ((r729 = new t728.Rectangle()).x = o729[w728.FRAME_X] / j729, r729.y = o729[w728.FRAME_Y] / j729, r729.width = o729[w728.FRAME_WIDTH] / j729, r729.height = o729[w728.FRAME_HEIGHT] / j729), k729[p729] = {
                                region: q729,
                                frame: r729,
                                rotated: !1
                            };
                        }
                        return k729;
                    }, w728.DATA_VERSION_2_3 = "2.3", w728.DATA_VERSION_3_0 = "3.0", w728.DATA_VERSION_4_0 = "4.0", w728.DATA_VERSION_4_5 = "4.5", w728.DATA_VERSION_5_0 = "5.0", w728.DATA_VERSION_5_5 = "5.5", w728.DATA_VERSION = w728.DATA_VERSION_5_5, w728.DATA_VERSIONS = [w728.DATA_VERSION_4_0, w728.DATA_VERSION_4_5, w728.DATA_VERSION_5_0, w728.DATA_VERSION_5_5], w728.TEXTURE_ATLAS = "textureAtlas", w728.SUB_TEXTURE = "SubTexture", w728.FORMAT = "format", w728.IMAGE_PATH = "imagePath", w728.WIDTH = "width", w728.HEIGHT = "height", w728.ROTATED = "rotated", w728.FRAME_X = "frameX", w728.FRAME_Y = "frameY", w728.FRAME_WIDTH = "frameWidth", w728.FRAME_HEIGHT = "frameHeight", w728.DRADON_BONES = "dragonBones", w728.USER_DATA = "userData", w728.ARMATURE = "armature", w728.BONE = "bone", w728.SURFACE = "surface", w728.SLOT = "slot", w728.CONSTRAINT = "constraint", w728.IK = "ik", w728.PATH_CONSTRAINT = "path", w728.SKIN = "skin", w728.DISPLAY = "display", w728.ANIMATION = "animation", w728.Z_ORDER = "zOrder", w728.FFD = "ffd", w728.FRAME = "frame", w728.TRANSLATE_FRAME = "translateFrame", w728.ROTATE_FRAME = "rotateFrame", w728.SCALE_FRAME = "scaleFrame", w728.DISPLAY_FRAME = "displayFrame", w728.COLOR_FRAME = "colorFrame", w728.DEFAULT_ACTIONS = "defaultActions", w728.ACTIONS = "actions", w728.EVENTS = "events", w728.INTS = "ints", w728.FLOATS = "floats", w728.STRINGS = "strings", w728.CANVAS = "canvas", w728.TRANSFORM = "transform", w728.PIVOT = "pivot", w728.AABB = "aabb", w728.COLOR = "color", w728.VERSION = "version", w728.COMPATIBLE_VERSION = "compatibleVersion", w728.FRAME_RATE = "frameRate", w728.TYPE = "type", w728.SUB_TYPE = "subType", w728.NAME = "name", w728.PARENT = "parent", w728.TARGET = "target", w728.STAGE = "stage", w728.SHARE = "share", w728.PATH = "path", w728.LENGTH = "length", w728.DISPLAY_INDEX = "displayIndex", w728.BLEND_MODE = "blendMode", w728.INHERIT_TRANSLATION = "inheritTranslation", w728.INHERIT_ROTATION = "inheritRotation", w728.INHERIT_SCALE = "inheritScale", w728.INHERIT_REFLECTION = "inheritReflection", w728.INHERIT_ANIMATION = "inheritAnimation", w728.INHERIT_DEFORM = "inheritDeform", w728.SEGMENT_X = "segmentX", w728.SEGMENT_Y = "segmentY", w728.BEND_POSITIVE = "bendPositive", w728.CHAIN = "chain", w728.WEIGHT = "weight", w728.FADE_IN_TIME = "fadeInTime", w728.PLAY_TIMES = "playTimes", w728.SCALE = "scale", w728.OFFSET = "offset", w728.POSITION = "position", w728.DURATION = "duration", w728.TWEEN_EASING = "tweenEasing", w728.TWEEN_ROTATE = "tweenRotate", w728.TWEEN_SCALE = "tweenScale", w728.CLOCK_WISE = "clockwise", w728.CURVE = "curve", w728.SOUND = "sound", w728.EVENT = "event", w728.ACTION = "action", w728.X = "x", w728.Y = "y", w728.SKEW_X = "skX", w728.SKEW_Y = "skY", w728.SCALE_X = "scX", w728.SCALE_Y = "scY", w728.VALUE = "value", w728.ROTATE = "rotate", w728.SKEW = "skew", w728.ALPHA_OFFSET = "aO", w728.RED_OFFSET = "rO", w728.GREEN_OFFSET = "gO", w728.BLUE_OFFSET = "bO", w728.ALPHA_MULTIPLIER = "aM", w728.RED_MULTIPLIER = "rM", w728.GREEN_MULTIPLIER = "gM", w728.BLUE_MULTIPLIER = "bM", w728.UVS = "uvs", w728.VERTICES = "vertices", w728.TRIANGLES = "triangles", w728.WEIGHTS = "weights", w728.SLOT_POSE = "slotPose", w728.BONE_POSE = "bonePose", w728.GLUE_WEIGHTS = "glueWeights", w728.GLUE_MESHES = "glueMeshes", w728.BONES = "bones", w728.POSITION_MODE = "positionMode", w728.SPACING_MODE = "spacingMode", w728.ROTATE_MODE = "rotateMode", w728.SPACING = "spacing", w728.ROTATE_OFFSET = "rotateOffset", w728.ROTATE_MIX = "rotateMix", w728.TRANSLATE_MIX = "translateMix", w728.TARGET_DISPLAY = "targetDisplay", w728.CLOSED = "closed", w728.CONSTANT_SPEED = "constantSpeed", w728.VERTEX_COUNT = "vertexCount", w728.LENGTHS = "lengths", w728.GOTO_AND_PLAY = "gotoAndPlay", w728.DEFAULT_NAME = "default", w728;
                }();
                t728.DataParser = u728;
            }(d219 || (d219 = {})), function (l708) {
                var m708 = function (q708) {
                    function r708() {
                        var s728 = null !== q708 && q708.apply(this, arguments) || this;
                        return s728._rawTextureAtlasIndex = 0, s728._rawBones = [], s728._data = null, s728._armature = null, s728._bone = null, s728._surface = null, s728._slot = null, s728._skin = null, s728._mesh = null, s728._animation = null, s728._timeline = null, s728._rawTextureAtlases = null, s728._defaultColorOffset = -1, s728._prevClockwise = 0, s728._prevRotation = 0, s728._helpMatrixA = new l708.Matrix(), s728._helpMatrixB = new l708.Matrix(), s728._helpTransform = new l708.Transform(), s728._helpColorTransform = new l708.ColorTransform(), s728._helpPoint = new l708.Point(), s728._helpArray = [], s728._intArray = [], s728._floatArray = [], s728._frameIntArray = [], s728._frameFloatArray = [], s728._frameArray = [], s728._timelineArray = [], s728._cacheRawMeshes = [], s728._cacheMeshes = [], s728._actionFrames = [], s728._weightSlotPose = {}, s728._weightBonePoses = {}, s728._cacheBones = {}, s728._slotChildActions = {}, s728;
                    }
                    return c219(r708, q708), r708._getBoolean = function (n728, o728, p728) {
                        if (o728 in n728) {
                            var q728 = n728[o728], r728 = typeof q728;
                            if ("boolean" === r728)
                                return q728;
                            if ("string" !== r728)
                                return !!q728;
                            switch (q728) {
                                case "0":
                                case "NaN":
                                case "":
                                case "false":
                                case "null":
                                case "undefined":
                                    return !1;
                                default:
                                    return !0;
                            }
                        }
                        return p728;
                    }, r708._getNumber = function (j728, k728, l728) {
                        if (k728 in j728) {
                            var m728 = j728[k728];
                            return null === m728 || "NaN" === m728 ? l728 : +m728 || 0;
                        }
                        return l728;
                    }, r708._getString = function (d728, e728, f728) {
                        if (e728 in d728) {
                            var g728 = d728[e728];
                            if ("string" == typeof g728) {
                                if (l708.DragonBones.webAssembly)
                                    for (var h728 = 0, i728 = g728.length; h728 < i728; ++h728)
                                        if (g728.charCodeAt(h728) > 255)
                                            return encodeURI(g728);
                                return g728;
                            }
                            return String(g728);
                        }
                        return f728;
                    }, r708.prototype._getCurvePoint = function (m727, n727, o727, p727, q727, r727, s727, t727, u727, v727) {
                        var w727 = 1 - u727, x727 = w727 * w727, y727 = u727 * u727, z727 = w727 * x727, a728 = 3 * u727 * x727, b728 = 3 * w727 * y727, c728 = u727 * y727;
                        v727.x = z727 * m727 + a728 * o727 + b728 * q727 + c728 * s727, v727.y = z727 * n727 + a728 * p727 + b728 * r727 + c728 * t727;
                    }, r708.prototype._samplingEasingCurve = function (t726, u726) {
                        for (var v726 = t726.length, w726 = -2, x726 = 0, y726 = u726.length; x726 < y726; ++x726) {
                            for (var z726 = (x726 + 1) / (y726 + 1); (w726 + 6 < v726 ? t726[w726 + 6] : 1) < z726;)
                                w726 += 6;
                            for (var a727 = w726 >= 0 && w726 + 6 < v726, b727 = a727 ? t726[w726] : 0, c727 = a727 ? t726[w726 + 1] : 0, d727 = t726[w726 + 2], e727 = t726[w726 + 3], f727 = t726[w726 + 4], g727 = t726[w726 + 5], h727 = a727 ? t726[w726 + 6] : 1, i727 = a727 ? t726[w726 + 7] : 1, j727 = 0, k727 = 1; k727 - j727 > 1e-4;) {
                                var l727 = .5 * (k727 + j727);
                                this._getCurvePoint(b727, c727, d727, e727, f727, g727, h727, i727, l727, this._helpPoint), z726 - this._helpPoint.x > 0 ? j727 = l727 : k727 = l727;
                            }
                            u726[x726] = this._helpPoint.y;
                        }
                    }, r708.prototype._parseActionDataInFrame = function (p726, q726, r726, s726) {
                        l708.DataParser.EVENT in p726 && this._mergeActionFrame(p726[l708.DataParser.EVENT], q726, 10, r726, s726), l708.DataParser.SOUND in p726 && this._mergeActionFrame(p726[l708.DataParser.SOUND], q726, 11, r726, s726), l708.DataParser.ACTION in p726 && this._mergeActionFrame(p726[l708.DataParser.ACTION], q726, 0, r726, s726), l708.DataParser.EVENTS in p726 && this._mergeActionFrame(p726[l708.DataParser.EVENTS], q726, 10, r726, s726), l708.DataParser.ACTIONS in p726 && this._mergeActionFrame(p726[l708.DataParser.ACTIONS], q726, 0, r726, s726);
                    }, r708.prototype._mergeActionFrame = function (z725, a726, b726, c726, d726) {
                        for (var e726 = l708.DragonBones.webAssembly ? this._armature.actions.size() : this._armature.actions.length, f726 = this._parseActionData(z725, b726, c726, d726), g726 = 0, h726 = null, i726 = 0, j726 = f726; i726 < j726.length; i726++) {
                            var k726 = j726[i726];
                            this._armature.addAction(k726, !1);
                        }
                        0 === this._actionFrames.length && ((h726 = new n708()).frameStart = 0, this._actionFrames.push(h726), h726 = null);
                        for (var l726 = 0, m726 = this._actionFrames; l726 < m726.length; l726++) {
                            var n726 = m726[l726];
                            if (n726.frameStart === a726) {
                                h726 = n726;
                                break;
                            }
                            if (n726.frameStart > a726)
                                break;
                            g726++;
                        }
                        null === h726 && ((h726 = new n708()).frameStart = a726, this._actionFrames.splice(g726 + 1, 0, h726));
                        for (var o726 = 0; o726 < f726.length; ++o726)
                            h726.actions.push(e726 + o726);
                    }, r708.prototype._parseArmature = function (g724, h724) {
                        var i724 = l708.BaseObject.borrowObject(l708.ArmatureData);
                        if (i724.name = r708._getString(g724, l708.DataParser.NAME, ""), i724.frameRate = r708._getNumber(g724, l708.DataParser.FRAME_RATE, this._data.frameRate), i724.scale = h724, l708.DataParser.TYPE in g724 && "string" == typeof g724[l708.DataParser.TYPE] ? i724.type = l708.DataParser._getArmatureType(g724[l708.DataParser.TYPE]) : i724.type = r708._getNumber(g724, l708.DataParser.TYPE, 0), 0 === i724.frameRate && (i724.frameRate = 24), this._armature = i724, l708.DataParser.CANVAS in g724) {
                            var j724 = g724[l708.DataParser.CANVAS], k724 = l708.BaseObject.borrowObject(l708.CanvasData);
                            l708.DataParser.COLOR in j724 ? k724.hasBackground = !0 : k724.hasBackground = !1, k724.color = r708._getNumber(j724, l708.DataParser.COLOR, 0), k724.x = r708._getNumber(j724, l708.DataParser.X, 0) * i724.scale, k724.y = r708._getNumber(j724, l708.DataParser.Y, 0) * i724.scale, k724.width = r708._getNumber(j724, l708.DataParser.WIDTH, 0) * i724.scale, k724.height = r708._getNumber(j724, l708.DataParser.HEIGHT, 0) * i724.scale, i724.canvas = k724;
                        }
                        if (l708.DataParser.AABB in g724) {
                            var l724 = g724[l708.DataParser.AABB];
                            i724.aabb.x = r708._getNumber(l724, l708.DataParser.X, 0) * i724.scale, i724.aabb.y = r708._getNumber(l724, l708.DataParser.Y, 0) * i724.scale, i724.aabb.width = r708._getNumber(l724, l708.DataParser.WIDTH, 0) * i724.scale, i724.aabb.height = r708._getNumber(l724, l708.DataParser.HEIGHT, 0) * i724.scale;
                        }
                        if (l708.DataParser.BONE in g724)
                            for (var m724 = 0, n724 = g724[l708.DataParser.BONE]; m724 < n724.length; m724++) {
                                var o724 = n724[m724], p724 = r708._getString(o724, l708.DataParser.PARENT, ""), q724 = this._parseBone(o724);
                                if (p724.length > 0) {
                                    var r724 = i724.getBone(p724);
                                    null !== r724 ? q724.parent = r724 : (p724 in this._cacheBones || (this._cacheBones[p724] = []), this._cacheBones[p724].push(q724));
                                }
                                if (q724.name in this._cacheBones) {
                                    for (var s724 = 0, t724 = this._cacheBones[q724.name]; s724 < t724.length; s724++)
                                        t724[s724].parent = q724;
                                    delete this._cacheBones[q724.name];
                                }
                                i724.addBone(q724), this._rawBones.push(q724);
                            }
                        if (l708.DataParser.IK in g724)
                            for (var u724 = 0, v724 = g724[l708.DataParser.IK]; u724 < v724.length; u724++) {
                                var w724 = v724[u724];
                                (g725 = this._parseIKConstraint(w724)) && i724.addConstraint(g725);
                            }
                        if (i724.sortBones(), l708.DataParser.SLOT in g724)
                            for (var x724 = 0, y724 = 0, z724 = g724[l708.DataParser.SLOT]; y724 < z724.length; y724++) {
                                var a725 = z724[y724];
                                i724.addSlot(this._parseSlot(a725, x724++));
                            }
                        if (l708.DataParser.SKIN in g724)
                            for (var b725 = 0, c725 = g724[l708.DataParser.SKIN]; b725 < c725.length; b725++) {
                                var d725 = c725[b725];
                                i724.addSkin(this._parseSkin(d725));
                            }
                        if (l708.DataParser.PATH_CONSTRAINT in g724)
                            for (var e725 = 0, f725 = g724[l708.DataParser.PATH_CONSTRAINT]; e725 < f725.length; e725++) {
                                var g725, h725 = f725[e725];
                                (g725 = this._parsePathConstraint(h725)) && i724.addConstraint(g725);
                            }
                        for (var i725 = 0, j725 = this._cacheRawMeshes.length; i725 < j725; ++i725) {
                            var k725 = this._cacheRawMeshes[i725];
                            l708.DataParser.GLUE_WEIGHTS in k725 && l708.DataParser.GLUE_MESHES in k725 && this._parseMeshGlue(k725, this._cacheMeshes[i725]);
                        }
                        for (i725 = 0, j725 = this._cacheRawMeshes.length; i725 < j725; ++i725) {
                            var l725 = this._cacheRawMeshes[i725], m725 = r708._getString(l725, l708.DataParser.SHARE, "");
                            if (0 !== m725.length) {
                                var n725 = r708._getString(l725, l708.DataParser.SKIN, l708.DataParser.DEFAULT_NAME);
                                0 === n725.length && (n725 = l708.DataParser.DEFAULT_NAME);
                                var o725 = i724.getMesh(n725, "", m725);
                                null !== o725 && this._cacheMeshes[i725].vertices.shareFrom(o725.vertices);
                            }
                        }
                        if (l708.DataParser.ANIMATION in g724)
                            for (var p725 = 0, q725 = g724[l708.DataParser.ANIMATION]; p725 < q725.length; p725++) {
                                var r725 = q725[p725], s725 = this._parseAnimation(r725);
                                i724.addAnimation(s725);
                            }
                        if (l708.DataParser.DEFAULT_ACTIONS in g724)
                            for (var t725 = 0, u725 = this._parseActionData(g724[l708.DataParser.DEFAULT_ACTIONS], 0, null, null); t725 < u725.length; t725++) {
                                var v725 = u725[t725];
                                i724.addAction(v725, !0), 0 === v725.type && null !== (s725 = i724.getAnimation(v725.name)) && (i724.defaultAnimation = s725);
                            }
                        if (l708.DataParser.ACTIONS in g724)
                            for (var w725 = 0, x725 = this._parseActionData(g724[l708.DataParser.ACTIONS], 0, null, null); w725 < x725.length; w725++)
                                v725 = x725[w725], i724.addAction(v725, !1);
                        for (var y725 in this._rawBones.length = 0, this._cacheRawMeshes.length = 0, this._cacheMeshes.length = 0, this._armature = null, this._weightSlotPose)
                            delete this._weightSlotPose[y725];
                        for (var y725 in this._weightBonePoses)
                            delete this._weightBonePoses[y725];
                        for (var y725 in this._cacheBones)
                            delete this._cacheBones[y725];
                        for (var y725 in this._slotChildActions)
                            delete this._slotChildActions[y725];
                        return i724;
                    }, r708.prototype._parseBone = function (z723) {
                        var a724 = this._armature.scale;
                        if (0 === (l708.DataParser.TYPE in z723 && "string" == typeof z723[l708.DataParser.TYPE] ? l708.DataParser._getBoneType(z723[l708.DataParser.TYPE]) : r708._getNumber(z723, l708.DataParser.TYPE, 0))) {
                            var b724 = l708.BaseObject.borrowObject(l708.BoneData);
                            return b724.inheritTranslation = r708._getBoolean(z723, l708.DataParser.INHERIT_TRANSLATION, !0), b724.inheritRotation = r708._getBoolean(z723, l708.DataParser.INHERIT_ROTATION, !0), b724.inheritScale = r708._getBoolean(z723, l708.DataParser.INHERIT_SCALE, !0), b724.inheritReflection = r708._getBoolean(z723, l708.DataParser.INHERIT_REFLECTION, !0), b724.length = r708._getNumber(z723, l708.DataParser.LENGTH, 0) * a724, b724.name = r708._getString(z723, l708.DataParser.NAME, ""), l708.DataParser.TRANSFORM in z723 && this._parseTransform(z723[l708.DataParser.TRANSFORM], b724.transform, a724), b724;
                        }
                        var c724 = l708.BaseObject.borrowObject(l708.SurfaceData);
                        if (c724.name = r708._getString(z723, l708.DataParser.NAME, ""), c724.segmentX = r708._getNumber(z723, l708.DataParser.SEGMENT_X, 0), c724.segmentY = r708._getNumber(z723, l708.DataParser.SEGMENT_Y, 0), c724.vertices.length = (c724.segmentX + 1) * (c724.segmentY + 1) * 2, l708.DataParser.VERTICES in z723)
                            for (var d724 = z723[l708.DataParser.VERTICES], e724 = 0, f724 = c724.vertices.length; e724 < f724; ++e724)
                                e724 < d724.length ? c724.vertices[e724] = d724[e724] * a724 : c724.vertices[e724] = 0;
                        return c724;
                    }, r708.prototype._parseIKConstraint = function (v723) {
                        var w723 = this._armature.getBone(r708._getString(v723, l708.DataParser.BONE, ""));
                        if (null === w723)
                            return null;
                        var x723 = this._armature.getBone(r708._getString(v723, l708.DataParser.TARGET, ""));
                        if (null === x723)
                            return null;
                        var y723 = l708.BaseObject.borrowObject(l708.IKConstraintData);
                        return y723.scaleEnabled = r708._getBoolean(v723, l708.DataParser.SCALE, !1), y723.bendPositive = r708._getBoolean(v723, l708.DataParser.BEND_POSITIVE, !0), y723.weight = r708._getNumber(v723, l708.DataParser.WEIGHT, 1), y723.name = r708._getString(v723, l708.DataParser.NAME, ""), y723.type = 0, y723.target = x723, r708._getNumber(v723, l708.DataParser.CHAIN, 0) > 0 && null !== w723.parent ? (y723.root = w723.parent, y723.bone = w723) : (y723.root = w723, y723.bone = null), y723;
                    }, r708.prototype._parsePathConstraint = function (l723) {
                        var m723 = this._armature.getSlot(r708._getString(l723, l708.DataParser.TARGET, ""));
                        if (null === m723)
                            return null;
                        var n723 = this._armature.defaultSkin;
                        if (null === n723)
                            return null;
                        var o723 = n723.getDisplay(m723.name, r708._getString(l723, l708.DataParser.TARGET_DISPLAY, m723.name));
                        if (null === o723 || !(o723 instanceof l708.PathDisplayData))
                            return null;
                        var p723 = l723[l708.DataParser.BONES];
                        if (null === p723 || 0 === p723.length)
                            return null;
                        var q723 = l708.BaseObject.borrowObject(l708.PathConstraintData);
                        q723.name = r708._getString(l723, l708.DataParser.NAME, ""), q723.type = 1, q723.pathSlot = m723, q723.pathDisplayData = o723, q723.target = m723.parent, q723.positionMode = l708.DataParser._getPositionMode(r708._getString(l723, l708.DataParser.POSITION_MODE, "")), q723.spacingMode = l708.DataParser._getSpacingMode(r708._getString(l723, l708.DataParser.SPACING_MODE, "")), q723.rotateMode = l708.DataParser._getRotateMode(r708._getString(l723, l708.DataParser.ROTATE_MODE, "")), q723.position = r708._getNumber(l723, l708.DataParser.POSITION, 0), q723.spacing = r708._getNumber(l723, l708.DataParser.SPACING, 0), q723.rotateOffset = r708._getNumber(l723, l708.DataParser.ROTATE_OFFSET, 0), q723.rotateMix = r708._getNumber(l723, l708.DataParser.ROTATE_MIX, 1), q723.translateMix = r708._getNumber(l723, l708.DataParser.TRANSLATE_MIX, 1);
                        for (var r723 = 0, s723 = p723; r723 < s723.length; r723++) {
                            var t723 = s723[r723], u723 = this._armature.getBone(t723);
                            null !== u723 && (q723.AddBone(u723), null === q723.root && (q723.root = u723));
                        }
                        return q723;
                    }, r708.prototype._parseSlot = function (i723, j723) {
                        var k723 = l708.BaseObject.borrowObject(l708.SlotData);
                        return k723.displayIndex = r708._getNumber(i723, l708.DataParser.DISPLAY_INDEX, 0), k723.zOrder = j723, k723.name = r708._getString(i723, l708.DataParser.NAME, ""), k723.parent = this._armature.getBone(r708._getString(i723, l708.DataParser.PARENT, "")), l708.DataParser.BLEND_MODE in i723 && "string" == typeof i723[l708.DataParser.BLEND_MODE] ? k723.blendMode = l708.DataParser._getBlendMode(i723[l708.DataParser.BLEND_MODE]) : k723.blendMode = r708._getNumber(i723, l708.DataParser.BLEND_MODE, 0), l708.DataParser.COLOR in i723 ? (k723.color = l708.SlotData.createColor(), this._parseColorTransform(i723[l708.DataParser.COLOR], k723.color)) : k723.color = l708.SlotData.DEFAULT_COLOR, l708.DataParser.ACTIONS in i723 && (this._slotChildActions[k723.name] = this._parseActionData(i723[l708.DataParser.ACTIONS], 0, null, null)), k723;
                    }, r708.prototype._parseSkin = function (x722) {
                        var y722 = l708.BaseObject.borrowObject(l708.SkinData);
                        if (y722.name = r708._getString(x722, l708.DataParser.NAME, l708.DataParser.DEFAULT_NAME), 0 === y722.name.length && (y722.name = l708.DataParser.DEFAULT_NAME), l708.DataParser.SLOT in x722) {
                            var z722 = x722[l708.DataParser.SLOT];
                            this._skin = y722;
                            for (var a723 = 0, b723 = z722; a723 < b723.length; a723++) {
                                var c723 = b723[a723], d723 = r708._getString(c723, l708.DataParser.NAME, ""), e723 = this._armature.getSlot(d723);
                                if (null !== e723) {
                                    if (this._slot = e723, l708.DataParser.DISPLAY in c723)
                                        for (var f723 = 0, g723 = c723[l708.DataParser.DISPLAY]; f723 < g723.length; f723++) {
                                            var h723 = g723[f723];
                                            h723 ? y722.addDisplay(d723, this._parseDisplay(h723)) : y722.addDisplay(d723, null);
                                        }
                                    this._slot = null;
                                }
                            }
                            this._skin = null;
                        }
                        return y722;
                    }, r708.prototype._parseDisplay = function (d722) {
                        var e722 = r708._getString(d722, l708.DataParser.NAME, ""), f722 = r708._getString(d722, l708.DataParser.PATH, ""), g722 = 0, h722 = null;
                        switch (g722 = l708.DataParser.TYPE in d722 && "string" == typeof d722[l708.DataParser.TYPE] ? l708.DataParser._getDisplayType(d722[l708.DataParser.TYPE]) : r708._getNumber(d722, l708.DataParser.TYPE, g722)) {
                            case 0:
                                var i722 = h722 = l708.BaseObject.borrowObject(l708.ImageDisplayData);
                                i722.name = e722, i722.path = f722.length > 0 ? f722 : e722, this._parsePivot(d722, i722);
                                break;
                            case 1:
                                var j722 = h722 = l708.BaseObject.borrowObject(l708.ArmatureDisplayData);
                                if (j722.name = e722, j722.path = f722.length > 0 ? f722 : e722, j722.inheritAnimation = !0, l708.DataParser.ACTIONS in d722)
                                    for (var k722 = 0, l722 = this._parseActionData(d722[l708.DataParser.ACTIONS], 0, null, null); k722 < l722.length; k722++) {
                                        var m722 = l722[k722];
                                        j722.addAction(m722);
                                    }
                                else if (this._slot.name in this._slotChildActions) {
                                    var n722 = this._skin.getDisplays(this._slot.name);
                                    if (null === n722 ? 0 === this._slot.displayIndex : this._slot.displayIndex === n722.length) {
                                        for (var o722 = 0, p722 = this._slotChildActions[this._slot.name]; o722 < p722.length; o722++)
                                            m722 = p722[o722], j722.addAction(m722);
                                        delete this._slotChildActions[this._slot.name];
                                    }
                                }
                                break;
                            case 2:
                                var q722 = h722 = l708.BaseObject.borrowObject(l708.MeshDisplayData);
                                q722.vertices.inheritDeform = r708._getBoolean(d722, l708.DataParser.INHERIT_DEFORM, !0), q722.name = e722, q722.path = f722.length > 0 ? f722 : e722, q722.vertices.data = this._data, l708.DataParser.SHARE in d722 ? (this._cacheRawMeshes.push(d722), this._cacheMeshes.push(q722)) : this._parseMesh(d722, q722), l708.DataParser.GLUE_WEIGHTS in d722 && l708.DataParser.GLUE_MESHES in d722 && (this._cacheRawMeshes.push(d722), this._cacheMeshes.push(q722));
                                break;
                            case 3:
                                var r722 = this._parseBoundingBox(d722);
                                if (null !== r722) {
                                    var s722 = h722 = l708.BaseObject.borrowObject(l708.BoundingBoxDisplayData);
                                    s722.name = e722, s722.path = f722.length > 0 ? f722 : e722, s722.boundingBox = r722;
                                }
                                break;
                            case 4:
                                var t722 = d722[l708.DataParser.LENGTHS], u722 = h722 = l708.BaseObject.borrowObject(l708.PathDisplayData);
                                u722.closed = r708._getBoolean(d722, l708.DataParser.CLOSED, !1), u722.constantSpeed = r708._getBoolean(d722, l708.DataParser.CONSTANT_SPEED, !1), u722.name = e722, u722.path = f722.length > 0 ? f722 : e722, u722.vertices.data = this._data, u722.curveLengths.length = t722.length;
                                for (var v722 = 0, w722 = t722.length; v722 < w722; ++v722)
                                    u722.curveLengths[v722] = t722[v722];
                                this._parsePath(d722, u722);
                        }
                        return null !== h722 && l708.DataParser.TRANSFORM in d722 && this._parseTransform(d722[l708.DataParser.TRANSFORM], h722.transform, this._armature.scale), h722;
                    }, r708.prototype._parsePath = function (b721, c721) {
                        var d721 = b721[l708.DataParser.VERTICES], e721 = r708._getNumber(b721, l708.DataParser.VERTEX_COUNT, 0), f721 = this._floatArray.length, g721 = this._intArray.length;
                        if (c721.vertices.offset = g721, this._intArray.length += 2, this._intArray[g721 + 0] = e721, this._intArray[g721 + 2] = f721, l708.DataParser.WEIGHTS in b721) {
                            var h721 = b721[l708.DataParser.WEIGHTS], i721 = b721[l708.DataParser.BONES], j721 = i721.length, k721 = Math.floor(h721.length - e721) / 2, l721 = this._intArray.length, m721 = this._floatArray.length, n721 = this._armature.sortedBones, o721 = l708.BaseObject.borrowObject(l708.WeightData);
                            for (o721.count = k721, o721.offset = l721, this._intArray.length += 2 + j721 + e721 + k721, this._intArray[l721 + 0] = j721, this._intArray[l721 + 1] = m721, b722 = 0; b722 < j721; b722++) {
                                var p721 = i721[b722], q721 = this._rawBones[p721];
                                o721.addBone(q721), this._intArray[l721 + 2 + b722] = n721.indexOf(q721);
                            }
                            this._floatArray.length += 3 * k721, b722 = 0;
                            for (var r721 = 0, s721 = 0, t721 = l721 + 2 + j721, u721 = m721; b722 < k721; b722++) {
                                var v721 = h721[r721++];
                                this._intArray[t721++] = v721;
                                for (var w721 = 0; w721 < v721; w721++) {
                                    var x721 = h721[r721++], y721 = h721[r721++], z721 = d721[s721++], a722 = d721[s721++];
                                    this._intArray[t721++] = i721.indexOf(x721), this._floatArray[u721++] = y721, this._floatArray[u721++] = z721, this._floatArray[u721++] = a722;
                                }
                            }
                            c721.vertices.weight = o721;
                        }
                        else {
                            this._floatArray.length += d721.length;
                            for (var b722 = 0, c722 = d721.length; b722 < c722; ++b722)
                                this._floatArray[f721 + b722] = d721[b722];
                        }
                    }, r708.prototype._parsePivot = function (y720, z720) {
                        if (l708.DataParser.PIVOT in y720) {
                            var a721 = y720[l708.DataParser.PIVOT];
                            z720.pivot.x = r708._getNumber(a721, l708.DataParser.X, 0), z720.pivot.y = r708._getNumber(a721, l708.DataParser.Y, 0);
                        }
                        else
                            z720.pivot.x = .5, z720.pivot.y = .5;
                    }, r708.prototype._parseMesh = function (q719, r719) {
                        var s719 = q719[l708.DataParser.VERTICES], t719 = q719[l708.DataParser.UVS], u719 = q719[l708.DataParser.TRIANGLES], v719 = Math.floor(s719.length / 2), w719 = Math.floor(u719.length / 3), x719 = this._floatArray.length, y719 = x719 + 2 * v719, z719 = this._intArray.length, a720 = this._skin.name + "_" + this._slot.name + "_" + r719.name;
                        r719.vertices.offset = z719, this._intArray.length += 4 + 3 * w719, this._intArray[z719 + 0] = v719, this._intArray[z719 + 1] = w719, this._intArray[z719 + 2] = x719;
                        for (var b720 = 0, c720 = 3 * w719; b720 < c720; ++b720)
                            this._intArray[z719 + 4 + b720] = u719[b720];
                        for (this._floatArray.length += 2 * v719 + 2 * v719, b720 = 0, c720 = 2 * v719; b720 < c720; ++b720)
                            this._floatArray[x719 + b720] = s719[b720], this._floatArray[y719 + b720] = t719[b720];
                        if (l708.DataParser.WEIGHTS in q719) {
                            var d720 = q719[l708.DataParser.WEIGHTS], e720 = q719[l708.DataParser.SLOT_POSE], f720 = q719[l708.DataParser.BONE_POSE], g720 = this._armature.sortedBones, h720 = new Array(), i720 = Math.floor(f720.length / 7), j720 = this._floatArray.length, k720 = Math.floor(d720.length - v719) / 2, l720 = this._intArray.length, m720 = l708.BaseObject.borrowObject(l708.WeightData);
                            for (m720.count = k720, m720.offset = l720, h720.length = i720, this._intArray.length += 2 + i720 + v719 + k720, this._intArray[l720 + 1] = j720, b720 = 0; b720 < i720; ++b720) {
                                var n720 = f720[7 * b720], o720 = this._rawBones[n720];
                                m720.addBone(o720), h720[b720] = n720, this._intArray[l720 + 2 + b720] = g720.indexOf(o720);
                            }
                            this._floatArray.length += 3 * k720, this._helpMatrixA.copyFromArray(e720, 0), b720 = 0;
                            for (var p720 = 0, q720 = l720 + 2 + i720, r720 = j720; b720 < v719; ++b720) {
                                var s720 = 2 * b720, t720 = this._intArray[q720++] = d720[p720++], u720 = this._floatArray[x719 + s720], v720 = this._floatArray[x719 + s720 + 1];
                                this._helpMatrixA.transformPoint(u720, v720, this._helpPoint), u720 = this._helpPoint.x, v720 = this._helpPoint.y;
                                for (var w720 = 0; w720 < t720; ++w720) {
                                    n720 = d720[p720++];
                                    var x720 = h720.indexOf(n720);
                                    this._helpMatrixB.copyFromArray(f720, 7 * x720 + 1), this._helpMatrixB.invert(), this._helpMatrixB.transformPoint(u720, v720, this._helpPoint), this._intArray[q720++] = x720, this._floatArray[r720++] = d720[p720++], this._floatArray[r720++] = this._helpPoint.x, this._floatArray[r720++] = this._helpPoint.y;
                                }
                            }
                            r719.vertices.weight = m720, this._weightSlotPose[a720] = e720, this._weightBonePoses[a720] = f720;
                        }
                    }, r708.prototype._parseMeshGlue = function () { }, r708.prototype._parseBoundingBox = function (n719) {
                        var o719 = null, p719 = 0;
                        switch (p719 = l708.DataParser.SUB_TYPE in n719 && "string" == typeof n719[l708.DataParser.SUB_TYPE] ? l708.DataParser._getBoundingBoxType(n719[l708.DataParser.SUB_TYPE]) : r708._getNumber(n719, l708.DataParser.SUB_TYPE, p719)) {
                            case 0:
                                o719 = l708.BaseObject.borrowObject(l708.RectangleBoundingBoxData);
                                break;
                            case 1:
                                o719 = l708.BaseObject.borrowObject(l708.EllipseBoundingBoxData);
                                break;
                            case 2:
                                o719 = this._parsePolygonBoundingBox(n719);
                        }
                        return null !== o719 && (o719.color = r708._getNumber(n719, l708.DataParser.COLOR, 0), 0 !== o719.type && 1 !== o719.type || (o719.width = r708._getNumber(n719, l708.DataParser.WIDTH, 0), o719.height = r708._getNumber(n719, l708.DataParser.HEIGHT, 0))), o719;
                    }, r708.prototype._parsePolygonBoundingBox = function (e719) {
                        var f719 = l708.BaseObject.borrowObject(l708.PolygonBoundingBoxData);
                        if (l708.DataParser.VERTICES in e719) {
                            var g719 = this._armature.scale, h719 = e719[l708.DataParser.VERTICES], i719 = f719.vertices;
                            l708.DragonBones.webAssembly ? i719.resize(h719.length, 0) : i719.length = h719.length;
                            for (var j719 = 0, k719 = h719.length; j719 < k719; j719 += 2) {
                                var l719 = h719[j719] * g719, m719 = h719[j719 + 1] * g719;
                                l708.DragonBones.webAssembly ? (i719.set(j719, l719), i719.set(j719 + 1, m719)) : (i719[j719] = l719, i719[j719 + 1] = m719), 0 === j719 ? (f719.x = l719, f719.y = m719, f719.width = l719, f719.height = m719) : (l719 < f719.x ? f719.x = l719 : l719 > f719.width && (f719.width = l719), m719 < f719.y ? f719.y = m719 : m719 > f719.height && (f719.height = m719));
                            }
                            f719.width -= f719.x, f719.height -= f719.y;
                        }
                        else
                            console.warn("Data error.\n Please reexport DragonBones Data to fixed the bug.");
                        return f719;
                    }, r708.prototype._parseAnimation = function (c718) {
                        var d718 = l708.BaseObject.borrowObject(l708.AnimationData);
                        if (d718.frameCount = Math.max(r708._getNumber(c718, l708.DataParser.DURATION, 1), 1), d718.playTimes = r708._getNumber(c718, l708.DataParser.PLAY_TIMES, 1), d718.duration = d718.frameCount / this._armature.frameRate, d718.fadeInTime = r708._getNumber(c718, l708.DataParser.FADE_IN_TIME, 0), d718.scale = r708._getNumber(c718, l708.DataParser.SCALE, 1), d718.name = r708._getString(c718, l708.DataParser.NAME, l708.DataParser.DEFAULT_NAME), 0 === d718.name.length && (d718.name = l708.DataParser.DEFAULT_NAME), d718.frameIntOffset = this._frameIntArray.length, d718.frameFloatOffset = this._frameFloatArray.length, d718.frameOffset = this._frameArray.length, this._animation = d718, l708.DataParser.FRAME in c718) {
                            var e718 = c718[l708.DataParser.FRAME], f718 = e718.length;
                            if (f718 > 0)
                                for (var g718 = 0, h718 = 0; g718 < f718; ++g718) {
                                    var i718 = e718[g718];
                                    this._parseActionDataInFrame(i718, h718, null, null), h718 += r708._getNumber(i718, l708.DataParser.DURATION, 1);
                                }
                        }
                        if (l708.DataParser.Z_ORDER in c718 && (this._animation.zOrderTimeline = this._parseTimeline(c718[l708.DataParser.Z_ORDER], null, l708.DataParser.FRAME, 1, !1, !1, 0, this._parseZOrderFrame)), l708.DataParser.BONE in c718)
                            for (var j718 = 0, k718 = c718[l708.DataParser.BONE]; j718 < k718.length; j718++) {
                                var l718 = k718[j718];
                                this._parseBoneTimeline(l718);
                            }
                        if (l708.DataParser.SURFACE in c718)
                            for (var m718 = 0, n718 = c718[l708.DataParser.SURFACE]; m718 < n718.length; m718++) {
                                l718 = n718[m718];
                                var o718 = r708._getString(l718, l708.DataParser.NAME, "");
                                this._surface = this._armature.getBone(o718), null !== this._surface && (null !== (c719 = this._parseTimeline(l718, null, l708.DataParser.FRAME, 50, !1, !0, 0, this._parseSurfaceFrame)) && this._animation.addSurfaceTimeline(this._surface, c719), this._surface = null);
                            }
                        if (l708.DataParser.SLOT in c718)
                            for (var p718 = 0, q718 = c718[l708.DataParser.SLOT]; p718 < q718.length; p718++)
                                l718 = q718[p718], this._parseSlotTimeline(l718);
                        if (l708.DataParser.FFD in c718)
                            for (var r718 = 0, s718 = c718[l708.DataParser.FFD]; r718 < s718.length; r718++) {
                                l718 = s718[r718];
                                var t718 = r708._getString(l718, l708.DataParser.SKIN, l708.DataParser.DEFAULT_NAME), u718 = r708._getString(l718, l708.DataParser.SLOT, ""), v718 = r708._getString(l718, l708.DataParser.NAME, "");
                                0 === t718.length && (t718 = l708.DataParser.DEFAULT_NAME), this._slot = this._armature.getSlot(u718), this._mesh = this._armature.getMesh(t718, u718, v718), null !== this._slot && null !== this._mesh && (null !== (c719 = this._parseTimeline(l718, null, l708.DataParser.FRAME, 22, !1, !0, 0, this._parseSlotFFDFrame)) && this._animation.addSlotTimeline(this._slot, c719), this._slot = null, this._mesh = null);
                            }
                        if (l708.DataParser.IK in c718)
                            for (var w718 = 0, x718 = c718[l708.DataParser.IK]; w718 < x718.length; w718++) {
                                l718 = x718[w718];
                                var y718 = r708._getString(l718, l708.DataParser.NAME, ""), z718 = this._armature.getConstraint(y718);
                                null !== z718 && null !== (c719 = this._parseTimeline(l718, null, l708.DataParser.FRAME, 30, !0, !1, 2, this._parseIKConstraintFrame)) && this._animation.addConstraintTimeline(z718, c719);
                            }
                        if (l708.DataParser.ANIMATION in c718)
                            for (var a719 = 0, b719 = c718[l708.DataParser.ANIMATION]; a719 < b719.length; a719++) {
                                l718 = b719[a719];
                                var c719, d719 = r708._getString(l718, l708.DataParser.NAME, "");
                                null !== (c719 = this._parseTimeline(l718, null, l708.DataParser.FRAME, 40, !0, !1, 2, this._parseAnimationFrame)) && this._animation.addAnimationTimeline(d719, c719);
                            }
                        return this._actionFrames.length > 0 && (this._animation.actionTimeline = this._parseTimeline(null, this._actionFrames, "", 0, !1, !1, 0, this._parseActionFrame), this._actionFrames.length = 0), this._animation = null, d718;
                    }, r708.prototype._parseTimeline = function (h717, i717, j717, k717, l717, m717, n717, o717) {
                        if (null !== h717 && j717.length > 0 && j717 in h717 && (i717 = h717[j717]), null === i717)
                            return null;
                        var p717 = i717.length;
                        if (0 === p717)
                            return null;
                        var q717 = this._frameIntArray.length, r717 = this._frameFloatArray.length, s717 = l708.BaseObject.borrowObject(l708.TimelineData), t717 = this._timelineArray.length;
                        if (this._timelineArray.length += 5 + p717, null !== h717 ? (this._timelineArray[t717 + 0] = Math.round(100 * r708._getNumber(h717, l708.DataParser.SCALE, 1)), this._timelineArray[t717 + 1] = Math.round(100 * r708._getNumber(h717, l708.DataParser.OFFSET, 0))) : (this._timelineArray[t717 + 0] = 100, this._timelineArray[t717 + 1] = 0), this._timelineArray[t717 + 2] = p717, this._timelineArray[t717 + 3] = n717, this._timelineArray[t717 + 4] = l717 ? q717 - this._animation.frameIntOffset : m717 ? r717 - this._animation.frameFloatOffset : 0, this._timeline = s717, s717.type = k717, s717.offset = t717, 1 === p717)
                            s717.frameIndicesOffset = -1, this._timelineArray[t717 + 5 + 0] = o717.call(this, i717[0], 0, 0) - this._animation.frameOffset;
                        else {
                            var u717 = this._animation.frameCount + 1, v717 = this._data.frameIndices, w717 = 0;
                            l708.DragonBones.webAssembly ? (w717 = v717.size(), v717.resize(w717 + u717, 0)) : (w717 = v717.length, v717.length += u717), s717.frameIndicesOffset = w717;
                            for (var x717 = 0, y717 = 0, z717 = 0, a718 = 0; x717 < u717; ++x717) {
                                if (z717 + a718 <= x717 && y717 < p717) {
                                    var b718 = i717[y717];
                                    z717 = x717, a718 = y717 === p717 - 1 ? this._animation.frameCount - z717 : b718 instanceof n708 ? this._actionFrames[y717 + 1].frameStart - z717 : r708._getNumber(b718, l708.DataParser.DURATION, 1), this._timelineArray[t717 + 5 + y717] = o717.call(this, b718, z717, a718) - this._animation.frameOffset, y717++;
                                }
                                l708.DragonBones.webAssembly ? v717.set(w717 + x717, y717 - 1) : v717[w717 + x717] = y717 - 1;
                            }
                        }
                        return this._timeline = null, s717;
                    }, r708.prototype._parseBoneTimeline = function (e717) {
                        var f717, g717 = this._armature.getBone(r708._getString(e717, l708.DataParser.NAME, ""));
                        null !== g717 && (this._bone = g717, this._slot = this._armature.getSlot(this._bone.name), l708.DataParser.TRANSLATE_FRAME in e717 && null !== (f717 = this._parseTimeline(e717, null, l708.DataParser.TRANSLATE_FRAME, 11, !1, !0, 2, this._parseBoneTranslateFrame)) && this._animation.addBoneTimeline(g717, f717), l708.DataParser.ROTATE_FRAME in e717 && null !== (f717 = this._parseTimeline(e717, null, l708.DataParser.ROTATE_FRAME, 12, !1, !0, 2, this._parseBoneRotateFrame)) && this._animation.addBoneTimeline(g717, f717), l708.DataParser.SCALE_FRAME in e717 && null !== (f717 = this._parseTimeline(e717, null, l708.DataParser.SCALE_FRAME, 13, !1, !0, 2, this._parseBoneScaleFrame)) && this._animation.addBoneTimeline(g717, f717), l708.DataParser.FRAME in e717 && null !== (f717 = this._parseTimeline(e717, null, l708.DataParser.FRAME, 10, !1, !0, 6, this._parseBoneAllFrame)) && this._animation.addBoneTimeline(g717, f717), this._bone = null, this._slot = null);
                    }, r708.prototype._parseSlotTimeline = function (a717) {
                        var b717 = this._armature.getSlot(r708._getString(a717, l708.DataParser.NAME, ""));
                        if (null !== b717) {
                            this._slot = b717;
                            var c717;
                            null !== (c717 = l708.DataParser.DISPLAY_FRAME in a717 ? this._parseTimeline(a717, null, l708.DataParser.DISPLAY_FRAME, 20, !1, !1, 0, this._parseSlotDisplayFrame) : this._parseTimeline(a717, null, l708.DataParser.FRAME, 20, !1, !1, 0, this._parseSlotDisplayFrame)) && this._animation.addSlotTimeline(b717, c717);
                            var d717;
                            null !== (d717 = l708.DataParser.COLOR_FRAME in a717 ? this._parseTimeline(a717, null, l708.DataParser.COLOR_FRAME, 21, !0, !1, 1, this._parseSlotColorFrame) : this._parseTimeline(a717, null, l708.DataParser.FRAME, 21, !0, !1, 1, this._parseSlotColorFrame)) && this._animation.addSlotTimeline(b717, d717), this._slot = null;
                        }
                    }, r708.prototype._parseFrame = function (x716, y716) {
                        var z716 = this._frameArray.length;
                        return this._frameArray.length += 1, this._frameArray[z716 + 0] = y716, z716;
                    }, r708.prototype._parseTweenFrame = function (q716, r716, s716) {
                        var t716 = this._parseFrame(q716, r716, s716);
                        if (s716 > 0) {
                            if (l708.DataParser.CURVE in q716) {
                                var u716 = s716 + 1;
                                this._helpArray.length = u716, this._samplingEasingCurve(q716[l708.DataParser.CURVE], this._helpArray), this._frameArray.length += 2 + this._helpArray.length, this._frameArray[t716 + 1] = 2, this._frameArray[t716 + 2] = u716;
                                for (var v716 = 0; v716 < u716; ++v716)
                                    this._frameArray[t716 + 3 + v716] = Math.round(1e4 * this._helpArray[v716]);
                            }
                            else {
                                var w716 = -2;
                                l708.DataParser.TWEEN_EASING in q716 && (w716 = r708._getNumber(q716, l708.DataParser.TWEEN_EASING, -2)), -2 === w716 ? (this._frameArray.length += 1, this._frameArray[t716 + 1] = 0) : 0 === w716 ? (this._frameArray.length += 1, this._frameArray[t716 + 1] = 1) : w716 < 0 ? (this._frameArray.length += 2, this._frameArray[t716 + 1] = 3, this._frameArray[t716 + 2] = Math.round(100 * -w716)) : w716 <= 1 ? (this._frameArray.length += 2, this._frameArray[t716 + 1] = 4, this._frameArray[t716 + 2] = Math.round(100 * w716)) : (this._frameArray.length += 2, this._frameArray[t716 + 1] = 5, this._frameArray[t716 + 2] = Math.round(100 * w716 - 100));
                            }
                        }
                        else
                            this._frameArray.length += 1, this._frameArray[t716 + 1] = 0;
                        return t716;
                    }, r708.prototype._parseActionFrame = function (l716, m716) {
                        var n716 = this._frameArray.length, o716 = l716.actions.length;
                        this._frameArray.length += 2 + o716, this._frameArray[n716 + 0] = m716, this._frameArray[n716 + 0 + 1] = o716;
                        for (var p716 = 0; p716 < o716; ++p716)
                            this._frameArray[n716 + 0 + 2 + p716] = l716.actions[p716];
                        return n716;
                    }, r708.prototype._parseZOrderFrame = function (u715, v715, w715) {
                        var x715 = this._parseFrame(u715, v715, w715);
                        if (l708.DataParser.Z_ORDER in u715) {
                            var y715 = u715[l708.DataParser.Z_ORDER];
                            if (y715.length > 0) {
                                for (var z715 = this._armature.sortedSlots.length, a716 = new Array(z715 - y715.length / 2), b716 = new Array(z715), c716 = 0; c716 < a716.length; ++c716)
                                    a716[c716] = 0;
                                for (var d716 = 0; d716 < z715; ++d716)
                                    b716[d716] = -1;
                                for (var e716 = 0, f716 = 0, g716 = 0, h716 = y715.length; g716 < h716; g716 += 2) {
                                    for (var i716 = y715[g716], j716 = y715[g716 + 1]; e716 !== i716;)
                                        a716[f716++] = e716++;
                                    b716[e716 + j716] = e716++;
                                }
                                for (; e716 < z715;)
                                    a716[f716++] = e716++;
                                this._frameArray.length += 1 + z715, this._frameArray[x715 + 1] = z715;
                                for (var k716 = z715; k716--;)
                                    -1 === b716[k716] ? this._frameArray[x715 + 2 + k716] = a716[--f716] || 0 : this._frameArray[x715 + 2 + k716] = b716[k716] || 0;
                                return x715;
                            }
                        }
                        return this._frameArray.length += 1, this._frameArray[x715 + 1] = 0, x715;
                    }, r708.prototype._parseBoneAllFrame = function (o715, p715, q715) {
                        this._helpTransform.identity(), l708.DataParser.TRANSFORM in o715 && this._parseTransform(o715[l708.DataParser.TRANSFORM], this._helpTransform, 1);
                        var r715 = this._helpTransform.rotation;
                        0 !== p715 && (0 === this._prevClockwise ? r715 = this._prevRotation + l708.Transform.normalizeRadian(r715 - this._prevRotation) : ((this._prevClockwise > 0 ? r715 >= this._prevRotation : r715 <= this._prevRotation) && (this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1), r715 = this._prevRotation + r715 - this._prevRotation + l708.Transform.PI_D * this._prevClockwise)), this._prevClockwise = r708._getNumber(o715, l708.DataParser.TWEEN_ROTATE, 0), this._prevRotation = r715;
                        var s715 = this._parseTweenFrame(o715, p715, q715), t715 = this._frameFloatArray.length;
                        return this._frameFloatArray.length += 6, this._frameFloatArray[t715++] = this._helpTransform.x, this._frameFloatArray[t715++] = this._helpTransform.y, this._frameFloatArray[t715++] = r715, this._frameFloatArray[t715++] = this._helpTransform.skew, this._frameFloatArray[t715++] = this._helpTransform.scaleX, this._frameFloatArray[t715++] = this._helpTransform.scaleY, this._parseActionDataInFrame(o715, p715, this._bone, this._slot), s715;
                    }, r708.prototype._parseBoneTranslateFrame = function (j715, k715, l715) {
                        var m715 = this._parseTweenFrame(j715, k715, l715), n715 = this._frameFloatArray.length;
                        return this._frameFloatArray.length += 2, this._frameFloatArray[n715++] = r708._getNumber(j715, l708.DataParser.X, 0), this._frameFloatArray[n715++] = r708._getNumber(j715, l708.DataParser.Y, 0), m715;
                    }, r708.prototype._parseBoneRotateFrame = function (d715, e715, f715) {
                        var g715 = r708._getNumber(d715, l708.DataParser.ROTATE, 0) * l708.Transform.DEG_RAD;
                        0 !== e715 && (0 === this._prevClockwise ? g715 = this._prevRotation + l708.Transform.normalizeRadian(g715 - this._prevRotation) : ((this._prevClockwise > 0 ? g715 >= this._prevRotation : g715 <= this._prevRotation) && (this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1), g715 = this._prevRotation + g715 - this._prevRotation + l708.Transform.PI_D * this._prevClockwise)), this._prevClockwise = r708._getNumber(d715, l708.DataParser.CLOCK_WISE, 0), this._prevRotation = g715;
                        var h715 = this._parseTweenFrame(d715, e715, f715), i715 = this._frameFloatArray.length;
                        return this._frameFloatArray.length += 2, this._frameFloatArray[i715++] = g715, this._frameFloatArray[i715++] = r708._getNumber(d715, l708.DataParser.SKEW, 0) * l708.Transform.DEG_RAD, h715;
                    }, r708.prototype._parseBoneScaleFrame = function (y714, z714, a715) {
                        var b715 = this._parseTweenFrame(y714, z714, a715), c715 = this._frameFloatArray.length;
                        return this._frameFloatArray.length += 2, this._frameFloatArray[c715++] = r708._getNumber(y714, l708.DataParser.X, 1), this._frameFloatArray[c715++] = r708._getNumber(y714, l708.DataParser.Y, 1), b715;
                    }, r708.prototype._parseSurfaceFrame = function (m714, n714, o714) {
                        var p714 = this._frameFloatArray.length, q714 = this._parseTweenFrame(m714, n714, o714), r714 = m714[l708.DataParser.VERTICES], s714 = r708._getNumber(m714, l708.DataParser.OFFSET, 0), t714 = this._surface.vertices.length / 2, u714 = 0, v714 = 0;
                        this._frameFloatArray.length += 2 * t714;
                        for (var w714 = 0; w714 < 2 * t714; w714 += 2)
                            u714 = w714 < s714 || w714 - s714 >= r714.length ? 0 : r714[w714 - s714], v714 = w714 + 1 < s714 || w714 + 1 - s714 >= r714.length ? 0 : r714[w714 + 1 - s714], this._frameFloatArray[p714 + w714] = u714, this._frameFloatArray[p714 + w714 + 1] = v714;
                        if (0 === n714) {
                            var x714 = this._frameIntArray.length;
                            this._frameIntArray.length += 5, this._frameIntArray[x714 + 0] = 0, this._frameIntArray[x714 + 1] = this._frameFloatArray.length - p714, this._frameIntArray[x714 + 2] = this._frameFloatArray.length - p714, this._frameIntArray[x714 + 3] = 0, this._frameIntArray[x714 + 4] = p714 - this._animation.frameFloatOffset, this._timelineArray[this._timeline.offset + 3] = x714 - this._animation.frameIntOffset;
                        }
                        return q714;
                    }, r708.prototype._parseSlotDisplayFrame = function (i714, j714, k714) {
                        var l714 = this._parseFrame(i714, j714, k714);
                        return this._frameArray.length += 1, l708.DataParser.VALUE in i714 ? this._frameArray[l714 + 1] = r708._getNumber(i714, l708.DataParser.VALUE, 0) : this._frameArray[l714 + 1] = r708._getNumber(i714, l708.DataParser.DISPLAY_INDEX, 0), this._parseActionDataInFrame(i714, j714, this._slot.parent, this._slot), l714;
                    }, r708.prototype._parseSlotColorFrame = function (a714, b714, c714) {
                        var d714 = this._parseTweenFrame(a714, b714, c714), e714 = -1;
                        if (l708.DataParser.VALUE in a714 || l708.DataParser.COLOR in a714) {
                            var f714 = l708.DataParser.VALUE in a714 ? a714[l708.DataParser.VALUE] : a714[l708.DataParser.COLOR];
                            for (var g714 in f714) {
                                this._parseColorTransform(f714, this._helpColorTransform), e714 = this._intArray.length, this._intArray.length += 8, this._intArray[e714++] = Math.round(100 * this._helpColorTransform.alphaMultiplier), this._intArray[e714++] = Math.round(100 * this._helpColorTransform.redMultiplier), this._intArray[e714++] = Math.round(100 * this._helpColorTransform.greenMultiplier), this._intArray[e714++] = Math.round(100 * this._helpColorTransform.blueMultiplier), this._intArray[e714++] = Math.round(this._helpColorTransform.alphaOffset), this._intArray[e714++] = Math.round(this._helpColorTransform.redOffset), this._intArray[e714++] = Math.round(this._helpColorTransform.greenOffset), this._intArray[e714++] = Math.round(this._helpColorTransform.blueOffset), e714 -= 8;
                                break;
                            }
                        }
                        e714 < 0 && (this._defaultColorOffset < 0 && (this._defaultColorOffset = e714 = this._intArray.length, this._intArray.length += 8, this._intArray[e714++] = 100, this._intArray[e714++] = 100, this._intArray[e714++] = 100, this._intArray[e714++] = 100, this._intArray[e714++] = 0, this._intArray[e714++] = 0, this._intArray[e714++] = 0, this._intArray[e714++] = 0), e714 = this._defaultColorOffset);
                        var h714 = this._frameIntArray.length;
                        return this._frameIntArray.length += 1, this._frameIntArray[h714] = e714, d714;
                    }, r708.prototype._parseSlotFFDFrame = function (f713, g713, h713) {
                        var i713 = this._frameFloatArray.length, j713 = this._parseTweenFrame(f713, g713, h713), k713 = l708.DataParser.VERTICES in f713 ? f713[l708.DataParser.VERTICES] : null, l713 = r708._getNumber(f713, l708.DataParser.OFFSET, 0), m713 = this._intArray[this._mesh.vertices.offset + 0], n713 = this._mesh.parent.name + "_" + this._slot.name + "_" + this._mesh.name, o713 = this._mesh.vertices.weight, p713 = 0, q713 = 0, r713 = 0, s713 = 0;
                        if (null !== o713) {
                            var t713 = this._weightSlotPose[n713];
                            this._helpMatrixA.copyFromArray(t713, 0), this._frameFloatArray.length += 2 * o713.count, r713 = o713.offset + 2 + o713.bones.length;
                        }
                        else
                            this._frameFloatArray.length += 2 * m713;
                        for (var u713 = 0; u713 < 2 * m713; u713 += 2)
                            if (null === k713 ? (p713 = 0, q713 = 0) : (p713 = u713 < l713 || u713 - l713 >= k713.length ? 0 : k713[u713 - l713], q713 = u713 + 1 < l713 || u713 + 1 - l713 >= k713.length ? 0 : k713[u713 + 1 - l713]), null !== o713) {
                                var v713 = this._weightBonePoses[n713], w713 = this._intArray[r713++];
                                this._helpMatrixA.transformPoint(p713, q713, this._helpPoint, !0), p713 = this._helpPoint.x, q713 = this._helpPoint.y;
                                for (var x713 = 0; x713 < w713; ++x713) {
                                    var y713 = this._intArray[r713++];
                                    this._helpMatrixB.copyFromArray(v713, 7 * y713 + 1), this._helpMatrixB.invert(), this._helpMatrixB.transformPoint(p713, q713, this._helpPoint, !0), this._frameFloatArray[i713 + s713++] = this._helpPoint.x, this._frameFloatArray[i713 + s713++] = this._helpPoint.y;
                                }
                            }
                            else
                                this._frameFloatArray[i713 + u713] = p713, this._frameFloatArray[i713 + u713 + 1] = q713;
                        if (0 === g713) {
                            var z713 = this._frameIntArray.length;
                            this._frameIntArray.length += 5, this._frameIntArray[z713 + 0] = this._mesh.vertices.offset, this._frameIntArray[z713 + 1] = this._frameFloatArray.length - i713, this._frameIntArray[z713 + 2] = this._frameFloatArray.length - i713, this._frameIntArray[z713 + 3] = 0, this._frameIntArray[z713 + 4] = i713 - this._animation.frameFloatOffset, this._timelineArray[this._timeline.offset + 3] = z713 - this._animation.frameIntOffset;
                        }
                        return j713;
                    }, r708.prototype._parseIKConstraintFrame = function (a713, b713, c713) {
                        var d713 = this._parseTweenFrame(a713, b713, c713), e713 = this._frameIntArray.length;
                        return this._frameIntArray.length += 2, this._frameIntArray[e713++] = r708._getBoolean(a713, l708.DataParser.BEND_POSITIVE, !0) ? 1 : 0, this._frameIntArray[e713++] = Math.round(100 * r708._getNumber(a713, l708.DataParser.WEIGHT, 1)), d713;
                    }, r708.prototype._parseAnimationFrame = function (v712, w712, x712) {
                        var y712 = this._parseTweenFrame(v712, w712, x712), z712 = this._frameIntArray.length;
                        return this._frameIntArray.length += 2, this._frameIntArray[z712++] = r708._getNumber(v712, l708.DataParser.VALUE, 0), this._frameIntArray[z712++] = Math.round(100 * r708._getNumber(v712, l708.DataParser.WEIGHT, 1)), y712;
                    }, r708.prototype._parseActionData = function (c712, d712, e712, f712) {
                        var g712 = new Array();
                        if ("string" == typeof c712)
                            (k712 = l708.BaseObject.borrowObject(l708.ActionData)).type = d712, k712.name = c712, k712.bone = e712, k712.slot = f712, g712.push(k712);
                        else if (c712 instanceof Array)
                            for (var h712 = 0, i712 = c712; h712 < i712.length; h712++) {
                                var j712 = i712[h712], k712 = l708.BaseObject.borrowObject(l708.ActionData);
                                if (l708.DataParser.GOTO_AND_PLAY in j712 ? (k712.type = 0, k712.name = r708._getString(j712, l708.DataParser.GOTO_AND_PLAY, "")) : (l708.DataParser.TYPE in j712 && "string" == typeof j712[l708.DataParser.TYPE] ? k712.type = l708.DataParser._getActionType(j712[l708.DataParser.TYPE]) : k712.type = r708._getNumber(j712, l708.DataParser.TYPE, d712), k712.name = r708._getString(j712, l708.DataParser.NAME, "")), l708.DataParser.BONE in j712) {
                                    var l712 = r708._getString(j712, l708.DataParser.BONE, "");
                                    k712.bone = this._armature.getBone(l712);
                                }
                                else
                                    k712.bone = e712;
                                if (l708.DataParser.SLOT in j712) {
                                    var m712 = r708._getString(j712, l708.DataParser.SLOT, "");
                                    k712.slot = this._armature.getSlot(m712);
                                }
                                else
                                    k712.slot = f712;
                                var n712 = null;
                                if (l708.DataParser.INTS in j712) {
                                    null === n712 && (n712 = l708.BaseObject.borrowObject(l708.UserData));
                                    for (var o712 = 0, p712 = j712[l708.DataParser.INTS]; o712 < p712.length; o712++) {
                                        var q712 = p712[o712];
                                        n712.addInt(q712);
                                    }
                                }
                                if (l708.DataParser.FLOATS in j712) {
                                    null === n712 && (n712 = l708.BaseObject.borrowObject(l708.UserData));
                                    for (var r712 = 0, s712 = j712[l708.DataParser.FLOATS]; r712 < s712.length; r712++)
                                        q712 = s712[r712], n712.addFloat(q712);
                                }
                                if (l708.DataParser.STRINGS in j712) {
                                    null === n712 && (n712 = l708.BaseObject.borrowObject(l708.UserData));
                                    for (var t712 = 0, u712 = j712[l708.DataParser.STRINGS]; t712 < u712.length; t712++)
                                        q712 = u712[t712], n712.addString(q712);
                                }
                                k712.data = n712, g712.push(k712);
                            }
                        return g712;
                    }, r708.prototype._parseTransform = function (z711, a712, b712) {
                        a712.x = r708._getNumber(z711, l708.DataParser.X, 0) * b712, a712.y = r708._getNumber(z711, l708.DataParser.Y, 0) * b712, l708.DataParser.ROTATE in z711 || l708.DataParser.SKEW in z711 ? (a712.rotation = l708.Transform.normalizeRadian(r708._getNumber(z711, l708.DataParser.ROTATE, 0) * l708.Transform.DEG_RAD), a712.skew = l708.Transform.normalizeRadian(r708._getNumber(z711, l708.DataParser.SKEW, 0) * l708.Transform.DEG_RAD)) : (l708.DataParser.SKEW_X in z711 || l708.DataParser.SKEW_Y in z711) && (a712.rotation = l708.Transform.normalizeRadian(r708._getNumber(z711, l708.DataParser.SKEW_Y, 0) * l708.Transform.DEG_RAD), a712.skew = l708.Transform.normalizeRadian(r708._getNumber(z711, l708.DataParser.SKEW_X, 0) * l708.Transform.DEG_RAD) - a712.rotation), a712.scaleX = r708._getNumber(z711, l708.DataParser.SCALE_X, 1), a712.scaleY = r708._getNumber(z711, l708.DataParser.SCALE_Y, 1);
                    }, r708.prototype._parseColorTransform = function (x711, y711) {
                        y711.alphaMultiplier = .01 * r708._getNumber(x711, l708.DataParser.ALPHA_MULTIPLIER, 100), y711.redMultiplier = .01 * r708._getNumber(x711, l708.DataParser.RED_MULTIPLIER, 100), y711.greenMultiplier = .01 * r708._getNumber(x711, l708.DataParser.GREEN_MULTIPLIER, 100), y711.blueMultiplier = .01 * r708._getNumber(x711, l708.DataParser.BLUE_MULTIPLIER, 100), y711.alphaOffset = r708._getNumber(x711, l708.DataParser.ALPHA_OFFSET, 0), y711.redOffset = r708._getNumber(x711, l708.DataParser.RED_OFFSET, 0), y711.greenOffset = r708._getNumber(x711, l708.DataParser.GREEN_OFFSET, 0), y711.blueOffset = r708._getNumber(x711, l708.DataParser.BLUE_OFFSET, 0);
                    }, r708.prototype._parseArray = function () {
                        this._intArray.length = 0, this._floatArray.length = 0, this._frameIntArray.length = 0, this._frameFloatArray.length = 0, this._frameArray.length = 0, this._timelineArray.length = 0;
                    }, r708.prototype._modifyArray = function () {
                        this._intArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._intArray.push(0), this._frameIntArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._frameIntArray.push(0), this._frameArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._frameArray.push(0), this._timelineArray.length % Uint16Array.BYTES_PER_ELEMENT != 0 && this._timelineArray.push(0);
                        var f711 = this._intArray.length * Int16Array.BYTES_PER_ELEMENT, g711 = this._floatArray.length * Float32Array.BYTES_PER_ELEMENT, h711 = this._frameIntArray.length * Int16Array.BYTES_PER_ELEMENT, i711 = this._frameFloatArray.length * Float32Array.BYTES_PER_ELEMENT, j711 = this._frameArray.length * Int16Array.BYTES_PER_ELEMENT, k711 = this._timelineArray.length * Uint16Array.BYTES_PER_ELEMENT, l711 = f711 + g711 + h711 + i711 + j711 + k711;
                        if (l708.DragonBones.webAssembly) {
                            for (var m711 = l708.webAssemblyModule.HEAP16.buffer, n711 = l708.webAssemblyModule._malloc(l711), o711 = new Int16Array(m711, n711, this._intArray.length), p711 = new Float32Array(m711, n711 + f711, this._floatArray.length), q711 = new Int16Array(m711, n711 + f711 + g711, this._frameIntArray.length), r711 = new Float32Array(m711, n711 + f711 + g711 + h711, this._frameFloatArray.length), s711 = new Int16Array(m711, n711 + f711 + g711 + h711 + i711, this._frameArray.length), t711 = new Uint16Array(m711, n711 + f711 + g711 + h711 + i711 + j711, this._timelineArray.length), u711 = 0, v711 = this._intArray.length; u711 < v711; ++u711)
                                o711[u711] = this._intArray[u711];
                            for (u711 = 0, v711 = this._floatArray.length; u711 < v711; ++u711)
                                p711[u711] = this._floatArray[u711];
                            for (u711 = 0, v711 = this._frameIntArray.length; u711 < v711; ++u711)
                                q711[u711] = this._frameIntArray[u711];
                            for (u711 = 0, v711 = this._frameFloatArray.length; u711 < v711; ++u711)
                                r711[u711] = this._frameFloatArray[u711];
                            for (u711 = 0, v711 = this._frameArray.length; u711 < v711; ++u711)
                                s711[u711] = this._frameArray[u711];
                            for (u711 = 0, v711 = this._timelineArray.length; u711 < v711; ++u711)
                                t711[u711] = this._timelineArray[u711];
                            l708.webAssemblyModule.setDataBinary(this._data, n711, f711, g711, h711, i711, j711, k711);
                        }
                        else {
                            var w711 = new ArrayBuffer(l711);
                            for (o711 = new Int16Array(w711, 0, this._intArray.length), p711 = new Float32Array(w711, f711, this._floatArray.length), q711 = new Int16Array(w711, f711 + g711, this._frameIntArray.length), r711 = new Float32Array(w711, f711 + g711 + h711, this._frameFloatArray.length), s711 = new Int16Array(w711, f711 + g711 + h711 + i711, this._frameArray.length), t711 = new Uint16Array(w711, f711 + g711 + h711 + i711 + j711, this._timelineArray.length), u711 = 0, v711 = this._intArray.length; u711 < v711; ++u711)
                                o711[u711] = this._intArray[u711];
                            for (u711 = 0, v711 = this._floatArray.length; u711 < v711; ++u711)
                                p711[u711] = this._floatArray[u711];
                            for (u711 = 0, v711 = this._frameIntArray.length; u711 < v711; ++u711)
                                q711[u711] = this._frameIntArray[u711];
                            for (u711 = 0, v711 = this._frameFloatArray.length; u711 < v711; ++u711)
                                r711[u711] = this._frameFloatArray[u711];
                            for (u711 = 0, v711 = this._frameArray.length; u711 < v711; ++u711)
                                s711[u711] = this._frameArray[u711];
                            for (u711 = 0, v711 = this._timelineArray.length; u711 < v711; ++u711)
                                t711[u711] = this._timelineArray[u711];
                            this._data.binary = w711, this._data.intArray = o711, this._data.floatArray = p711, this._data.frameIntArray = q711, this._data.frameFloatArray = r711, this._data.frameArray = s711, this._data.timelineArray = t711;
                        }
                        this._defaultColorOffset = -1;
                    }, r708.prototype.parseDragonBonesData = function (x710, y710) {
                        void 0 === y710 && (y710 = 1), console.assert(null != x710, "Data error.");
                        var z710 = r708._getString(x710, l708.DataParser.VERSION, ""), a711 = r708._getString(x710, l708.DataParser.COMPATIBLE_VERSION, "");
                        if (l708.DataParser.DATA_VERSIONS.indexOf(z710) >= 0 || l708.DataParser.DATA_VERSIONS.indexOf(a711) >= 0) {
                            var b711 = l708.BaseObject.borrowObject(l708.DragonBonesData);
                            if (b711.version = z710, b711.name = r708._getString(x710, l708.DataParser.NAME, ""), b711.frameRate = r708._getNumber(x710, l708.DataParser.FRAME_RATE, 24), 0 === b711.frameRate && (b711.frameRate = 24), l708.DataParser.ARMATURE in x710) {
                                this._data = b711, this._parseArray(x710);
                                for (var c711 = 0, d711 = x710[l708.DataParser.ARMATURE]; c711 < d711.length; c711++) {
                                    var e711 = d711[c711];
                                    b711.addArmature(this._parseArmature(e711, y710));
                                }
                                this._data.binary || this._modifyArray(), l708.DataParser.STAGE in x710 ? b711.stage = b711.getArmature(r708._getString(x710, l708.DataParser.STAGE, "")) : b711.armatureNames.length > 0 && (b711.stage = b711.getArmature(b711.armatureNames[0])), this._data = null;
                            }
                            return l708.DataParser.TEXTURE_ATLAS in x710 && (this._rawTextureAtlases = x710[l708.DataParser.TEXTURE_ATLAS]), b711;
                        }
                        return console.assert(!1, "Nonsupport data version: " + z710 + "\nPlease convert DragonBones data to support version.\nRead more: https://github.com/DragonBones/Tools/"), null;
                    }, r708.prototype.parseTextureAtlasData = function (m710, n710, o710) {
                        if (void 0 === o710 && (o710 = 1), console.assert(void 0 !== m710), null === m710) {
                            if (null === this._rawTextureAtlases || 0 === this._rawTextureAtlases.length)
                                return !1;
                            var p710 = this._rawTextureAtlases[this._rawTextureAtlasIndex++];
                            return this.parseTextureAtlasData(p710, n710, o710), this._rawTextureAtlasIndex >= this._rawTextureAtlases.length && (this._rawTextureAtlasIndex = 0, this._rawTextureAtlases = null), !0;
                        }
                        if (n710.width = r708._getNumber(m710, l708.DataParser.WIDTH, 0), n710.height = r708._getNumber(m710, l708.DataParser.HEIGHT, 0), n710.scale = 1 === o710 ? 1 / r708._getNumber(m710, l708.DataParser.SCALE, 1) : o710, n710.name = r708._getString(m710, l708.DataParser.NAME, ""), n710.imagePath = r708._getString(m710, l708.DataParser.IMAGE_PATH, ""), l708.DataParser.SUB_TEXTURE in m710)
                            for (var q710 = m710[l708.DataParser.SUB_TEXTURE], r710 = 0, s710 = q710.length; r710 < s710; ++r710) {
                                var t710 = q710[r710], u710 = n710.createTexture();
                                u710.rotated = r708._getBoolean(t710, l708.DataParser.ROTATED, !1), u710.name = r708._getString(t710, l708.DataParser.NAME, ""), u710.region.x = r708._getNumber(t710, l708.DataParser.X, 0), u710.region.y = r708._getNumber(t710, l708.DataParser.Y, 0), u710.region.width = r708._getNumber(t710, l708.DataParser.WIDTH, 0), u710.region.height = r708._getNumber(t710, l708.DataParser.HEIGHT, 0);
                                var v710 = r708._getNumber(t710, l708.DataParser.FRAME_WIDTH, -1), w710 = r708._getNumber(t710, l708.DataParser.FRAME_HEIGHT, -1);
                                v710 > 0 && w710 > 0 && (u710.frame = l708.TextureData.createRectangle(), u710.frame.x = r708._getNumber(t710, l708.DataParser.FRAME_X, 0), u710.frame.y = r708._getNumber(t710, l708.DataParser.FRAME_Y, 0), u710.frame.width = v710, u710.frame.height = w710), n710.addTexture(u710);
                            }
                        return !0;
                    }, r708.getInstance = function () {
                        return null === r708._objectDataParserInstance && (r708._objectDataParserInstance = new r708()), r708._objectDataParserInstance;
                    }, r708._objectDataParserInstance = null, r708;
                }(l708.DataParser);
                l708.ObjectDataParser = m708;
                var n708 = function () {
                    this.frameStart = 0, this.actions = [];
                };
                l708.ActionFrame = n708;
            }(d219 || (d219 = {})), function (m704) {
                var n704 = function (p704) {
                    function q704() {
                        return null !== p704 && p704.apply(this, arguments) || this;
                    }
                    return c219(q704, p704), q704.prototype._inRange = function (i708, j708, k708) {
                        return j708 <= i708 && i708 <= k708;
                    }, q704.prototype._decodeUTF8 = function (x707) {
                        for (var y707, z707 = 0, a708 = "", b708 = 0, c708 = 0, d708 = 0, e708 = 0; x707.length > z707;) {
                            var f708 = x707[z707++];
                            if (-1 === f708)
                                y707 = 0 !== c708 ? 65533 : -1;
                            else if (0 === c708)
                                this._inRange(f708, 0, 127) ? y707 = f708 : (this._inRange(f708, 194, 223) ? (c708 = 1, e708 = 128, b708 = f708 - 192) : this._inRange(f708, 224, 239) ? (c708 = 2, e708 = 2048, b708 = f708 - 224) : this._inRange(f708, 240, 244) && (c708 = 3, e708 = 65536, b708 = f708 - 240), b708 *= Math.pow(64, c708), y707 = null);
                            else if (this._inRange(f708, 128, 191)) {
                                if (d708 += 1, b708 += (f708 - 128) * Math.pow(64, c708 - d708), d708 !== c708)
                                    y707 = null;
                                else {
                                    var g708 = b708, h708 = e708;
                                    b708 = 0, c708 = 0, d708 = 0, e708 = 0, y707 = this._inRange(g708, h708, 1114111) && !this._inRange(g708, 55296, 57343) ? g708 : f708;
                                }
                            }
                            else
                                b708 = 0, c708 = 0, d708 = 0, e708 = 0, z707--, y707 = f708;
                            null !== y707 && -1 !== y707 && (y707 <= 65535 ? y707 > 0 && (a708 += String.fromCharCode(y707)) : (y707 -= 65536, a708 += String.fromCharCode(55296 + (y707 >> 10 & 1023)), a708 += String.fromCharCode(56320 + (1023 & y707))));
                        }
                        return a708;
                    }, q704.prototype._getUTF16Key = function (u707) {
                        for (var v707 = 0, w707 = u707.length; v707 < w707; ++v707)
                            if (u707.charCodeAt(v707) > 255)
                                return encodeURI(u707);
                        return u707;
                    }, q704.prototype._parseBinaryTimeline = function (i707, j707, k707) {
                        void 0 === k707 && (k707 = null);
                        var l707 = null !== k707 ? k707 : m704.BaseObject.borrowObject(m704.TimelineData);
                        l707.type = i707, l707.offset = j707, this._timeline = l707;
                        var m707 = this._timelineArrayBuffer[l707.offset + 2];
                        if (1 === m707)
                            l707.frameIndicesOffset = -1;
                        else {
                            var n707 = 0, o707 = this._animation.frameCount + 1, p707 = this._data.frameIndices;
                            m704.DragonBones.webAssembly ? (n707 = p707.size(), p707.resize(n707 + o707, 0)) : (n707 = p707.length, p707.length += o707), l707.frameIndicesOffset = n707;
                            for (var q707 = 0, r707 = 0, s707 = 0, t707 = 0; q707 < o707; ++q707)
                                s707 + t707 <= q707 && r707 < m707 && (s707 = this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[l707.offset + 5 + r707]], t707 = r707 === m707 - 1 ? this._animation.frameCount - s707 : this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[l707.offset + 5 + r707 + 1]] - s707, r707++), m704.DragonBones.webAssembly ? p707.set(n707 + q707, r707 - 1) : p707[n707 + q707] = r707 - 1;
                        }
                        return this._timeline = null, l707;
                    }, q704.prototype._parseVertices = function (w706, x706) {
                        x706.offset = w706[m704.DataParser.OFFSET];
                        var y706 = this._intArrayBuffer[x706.offset + 3];
                        if (y706 >= 0) {
                            var z706 = m704.BaseObject.borrowObject(m704.WeightData), a707 = this._intArrayBuffer[x706.offset + 0], b707 = this._intArrayBuffer[y706 + 0];
                            z706.offset = y706;
                            for (var c707 = 0; c707 < b707; ++c707) {
                                var d707 = this._intArrayBuffer[y706 + 2 + c707];
                                z706.addBone(this._rawBones[d707]);
                            }
                            for (var e707 = y706 + 2 + b707, f707 = 0, g707 = (c707 = 0, a707); c707 < g707; ++c707) {
                                var h707 = this._intArrayBuffer[e707++];
                                f707 += h707, e707 += h707;
                            }
                            z706.count = f707, x706.weight = z706;
                        }
                    }, q704.prototype._parseMesh = function (u706, v706) {
                        this._parseVertices(u706, v706.vertices);
                    }, q704.prototype._parsePath = function (s706, t706) {
                        this._parseVertices(s706, t706.vertices);
                    }, q704.prototype._parseAnimation = function (d706) {
                        var e706 = m704.BaseObject.borrowObject(m704.AnimationData);
                        e706.frameCount = Math.max(m704.ObjectDataParser._getNumber(d706, m704.DataParser.DURATION, 1), 1), e706.playTimes = m704.ObjectDataParser._getNumber(d706, m704.DataParser.PLAY_TIMES, 1), e706.duration = e706.frameCount / this._armature.frameRate, e706.fadeInTime = m704.ObjectDataParser._getNumber(d706, m704.DataParser.FADE_IN_TIME, 0), e706.scale = m704.ObjectDataParser._getNumber(d706, m704.DataParser.SCALE, 1), e706.name = m704.ObjectDataParser._getString(d706, m704.DataParser.NAME, m704.DataParser.DEFAULT_NAME), 0 === e706.name.length && (e706.name = m704.DataParser.DEFAULT_NAME);
                        var f706 = d706[m704.DataParser.OFFSET];
                        if (e706.frameIntOffset = f706[0], e706.frameFloatOffset = f706[1], e706.frameOffset = f706[2], this._animation = e706, m704.DataParser.ACTION in d706 && (e706.actionTimeline = this._parseBinaryTimeline(0, d706[m704.DataParser.ACTION])), m704.DataParser.Z_ORDER in d706 && (e706.zOrderTimeline = this._parseBinaryTimeline(1, d706[m704.DataParser.Z_ORDER])), m704.DataParser.BONE in d706) {
                            var g706 = d706[m704.DataParser.BONE];
                            for (var h706 in g706) {
                                var i706 = g706[h706];
                                m704.DragonBones.webAssembly && (h706 = this._getUTF16Key(h706));
                                var j706 = this._armature.getBone(h706);
                                if (null !== j706)
                                    for (var k706 = 0, l706 = i706.length; k706 < l706; k706 += 2) {
                                        var m706 = i706[k706], n706 = i706[k706 + 1], o706 = this._parseBinaryTimeline(m706, n706);
                                        this._animation.addBoneTimeline(j706, o706);
                                    }
                            }
                        }
                        if (m704.DataParser.SURFACE in d706)
                            for (var h706 in g706 = d706[m704.DataParser.SURFACE]) {
                                i706 = g706[h706], m704.DragonBones.webAssembly && (h706 = this._getUTF16Key(h706));
                                var p706 = this._armature.getBone(h706);
                                if (null !== p706)
                                    for (k706 = 0, l706 = i706.length; k706 < l706; k706 += 2)
                                        m706 = i706[k706], n706 = i706[k706 + 1], o706 = this._parseBinaryTimeline(m706, n706), this._animation.addSurfaceTimeline(p706, o706);
                            }
                        if (m704.DataParser.SLOT in d706)
                            for (var h706 in g706 = d706[m704.DataParser.SLOT]) {
                                i706 = g706[h706], m704.DragonBones.webAssembly && (h706 = this._getUTF16Key(h706));
                                var q706 = this._armature.getSlot(h706);
                                if (null !== q706)
                                    for (k706 = 0, l706 = i706.length; k706 < l706; k706 += 2)
                                        m706 = i706[k706], n706 = i706[k706 + 1], o706 = this._parseBinaryTimeline(m706, n706), this._animation.addSlotTimeline(q706, o706);
                            }
                        if (m704.DataParser.CONSTRAINT in d706)
                            for (var h706 in g706 = d706[m704.DataParser.CONSTRAINT]) {
                                i706 = g706[h706], m704.DragonBones.webAssembly && (h706 = this._getUTF16Key(h706));
                                var r706 = this._armature.getConstraint(h706);
                                if (null !== r706)
                                    for (k706 = 0, l706 = i706.length; k706 < l706; k706 += 2)
                                        m706 = i706[k706], n706 = i706[k706 + 1], o706 = this._parseBinaryTimeline(m706, n706), this._animation.addConstraintTimeline(r706, o706);
                            }
                        if (m704.DataParser.ANIMATION in d706)
                            for (var h706 in g706 = d706[m704.DataParser.ANIMATION])
                                for (i706 = g706[h706], m704.DragonBones.webAssembly && (h706 = this._getUTF16Key(h706)), k706 = 0, l706 = i706.length; k706 < l706; k706 += 2)
                                    m706 = i706[k706], n706 = i706[k706 + 1], o706 = this._parseBinaryTimeline(m706, n706), this._animation.addAnimationTimeline(h706, o706);
                        return this._animation = null, e706;
                    }, q704.prototype._parseArray = function (j705) {
                        var k705 = j705[m704.DataParser.OFFSET], l705 = k705[1], m705 = k705[3], n705 = k705[5], o705 = k705[7], p705 = k705[9], q705 = k705[11], r705 = new Int16Array(this._binary, this._binaryOffset + k705[0], l705 / Int16Array.BYTES_PER_ELEMENT), s705 = new Float32Array(this._binary, this._binaryOffset + k705[2], m705 / Float32Array.BYTES_PER_ELEMENT), t705 = new Int16Array(this._binary, this._binaryOffset + k705[4], n705 / Int16Array.BYTES_PER_ELEMENT), u705 = new Float32Array(this._binary, this._binaryOffset + k705[6], o705 / Float32Array.BYTES_PER_ELEMENT), v705 = new Int16Array(this._binary, this._binaryOffset + k705[8], p705 / Int16Array.BYTES_PER_ELEMENT), w705 = new Uint16Array(this._binary, this._binaryOffset + k705[10], q705 / Uint16Array.BYTES_PER_ELEMENT);
                        if (m704.DragonBones.webAssembly) {
                            for (var x705 = l705 + m705 + n705 + o705 + p705 + q705, y705 = m704.webAssemblyModule._malloc(x705), z705 = new Uint8Array(this._binary, this._binaryOffset, x705 / Uint8Array.BYTES_PER_ELEMENT), a706 = new Uint8Array(m704.webAssemblyModule.HEAP16.buffer, y705, z705.length), b706 = 0, c706 = z705.length; b706 < c706; ++b706)
                                a706[b706] = z705[b706];
                            m704.webAssemblyModule.setDataBinary(this._data, y705, l705, m705, n705, o705, p705, q705), this._intArrayBuffer = r705, this._floatArrayBuffer = s705, this._frameIntArrayBuffer = t705, this._frameFloatArrayBuffer = u705, this._frameArrayBuffer = v705, this._timelineArrayBuffer = w705;
                        }
                        else
                            this._data.binary = this._binary, this._data.intArray = this._intArrayBuffer = r705, this._data.floatArray = this._floatArrayBuffer = s705, this._data.frameIntArray = this._frameIntArrayBuffer = t705, this._data.frameFloatArray = this._frameFloatArrayBuffer = u705, this._data.frameArray = this._frameArrayBuffer = v705, this._data.timelineArray = this._timelineArrayBuffer = w705;
                    }, q704.prototype.parseDragonBonesData = function (c705, d705) {
                        void 0 === d705 && (d705 = 1), console.assert(null != c705 && c705 instanceof ArrayBuffer, "Data error.");
                        var e705 = new Uint8Array(c705, 0, 8);
                        if (e705[0] !== "D".charCodeAt(0) || e705[1] !== "B".charCodeAt(0) || e705[2] !== "D".charCodeAt(0) || e705[3] !== "T".charCodeAt(0))
                            return console.assert(!1, "Nonsupport data."), null;
                        var f705 = new Uint32Array(c705, 8, 1)[0], g705 = new Uint8Array(c705, 12, f705), h705 = this._decodeUTF8(g705), i705 = JSON.parse(h705);
                        return this._binaryOffset = 12 + f705, this._binary = c705, p704.prototype.parseDragonBonesData.call(this, i705, d705);
                    }, q704.getInstance = function () {
                        return null === q704._binaryDataParserInstance && (q704._binaryDataParserInstance = new q704()), q704._binaryDataParserInstance;
                    }, q704._binaryDataParserInstance = null, q704;
                }(m704.ObjectDataParser);
                m704.BinaryDataParser = n704;
            }(d219 || (d219 = {})), function (h696) {
                var i696 = function () {
                    function m696(l704) {
                        void 0 === l704 && (l704 = null), this.autoSearch = !1, this._dragonBonesDataMap = {}, this._textureAtlasDataMap = {}, this._dragonBones = null, this._dataParser = null, null === m696._objectParser && (m696._objectParser = new h696.ObjectDataParser()), null === m696._binaryParser && (m696._binaryParser = new h696.BinaryDataParser()), this._dataParser = null !== l704 ? l704 : m696._objectParser;
                    }
                    return m696.prototype._isSupportMesh = function () {
                        return !0;
                    }, m696.prototype._getTextureData = function (c704, d704) {
                        if (c704 in this._textureAtlasDataMap)
                            for (var e704 = 0, f704 = this._textureAtlasDataMap[c704]; e704 < f704.length; e704++)
                                if (null !== (k704 = (j704 = f704[e704]).getTexture(d704)))
                                    return k704;
                        if (this.autoSearch)
                            for (var g704 in this._textureAtlasDataMap)
                                for (var h704 = 0, i704 = this._textureAtlasDataMap[g704]; h704 < i704.length; h704++) {
                                    var j704, k704;
                                    if ((j704 = i704[h704]).autoSearch && null !== (k704 = j704.getTexture(d704)))
                                        return k704;
                                }
                        return null;
                    }, m696.prototype._fillBuildArmaturePackage = function (t703, u703, v703, w703, x703) {
                        var y703 = null, z703 = null;
                        if (u703.length > 0 && u703 in this._dragonBonesDataMap && (z703 = (y703 = this._dragonBonesDataMap[u703]).getArmature(v703)), null === z703 && (0 === u703.length || this.autoSearch))
                            for (var a704 in this._dragonBonesDataMap)
                                if (y703 = this._dragonBonesDataMap[a704], (0 === u703.length || y703.autoSearch) && null !== (z703 = y703.getArmature(v703))) {
                                    u703 = a704;
                                    break;
                                }
                        if (null !== z703) {
                            if (t703.dataName = u703, t703.textureAtlasName = x703, t703.data = y703, t703.armature = z703, t703.skin = null, w703.length > 0 && (t703.skin = z703.getSkin(w703), null === t703.skin && this.autoSearch))
                                for (var a704 in this._dragonBonesDataMap) {
                                    var b704 = this._dragonBonesDataMap[a704].getArmature(w703);
                                    if (null !== b704) {
                                        t703.skin = b704.defaultSkin;
                                        break;
                                    }
                                }
                            return null === t703.skin && (t703.skin = z703.defaultSkin), !0;
                        }
                        return !1;
                    }, m696.prototype._buildBones = function (o703, p703) {
                        for (var q703 = 0, r703 = o703.armature.sortedBones; q703 < r703.length; q703++) {
                            var s703 = r703[q703];
                            h696.BaseObject.borrowObject(0 === s703.type ? h696.Bone : h696.Surface).init(s703, p703);
                        }
                    }, m696.prototype._buildSlots = function (y702, z702) {
                        var a703 = y702.skin, b703 = y702.armature.defaultSkin;
                        if (null !== a703 && null !== b703) {
                            var c703 = {};
                            for (var d703 in b703.displays) {
                                var e703 = b703.getDisplays(d703);
                                c703[d703] = e703;
                            }
                            if (a703 !== b703)
                                for (var d703 in a703.displays)
                                    e703 = a703.getDisplays(d703), c703[d703] = e703;
                            for (var f703 = 0, g703 = y702.armature.sortedSlots; f703 < g703.length; f703++) {
                                var h703 = g703[f703], i703 = h703.name in c703 ? c703[h703.name] : null, j703 = this._buildSlot(y702, h703, z702);
                                if (j703.rawDisplayDatas = i703, null !== i703) {
                                    for (var k703 = new Array(), l703 = 0, m703 = h696.DragonBones.webAssembly ? i703.size() : i703.length; l703 < m703; ++l703) {
                                        var n703 = h696.DragonBones.webAssembly ? i703.get(l703) : i703[l703];
                                        null !== n703 ? k703.push(this._getSlotDisplay(y702, n703, null, j703)) : k703.push(null);
                                    }
                                    j703._setDisplayList(k703);
                                }
                                j703._setDisplayIndex(h703.displayIndex, !0);
                            }
                        }
                    }, m696.prototype._buildConstraints = function (q702, r702) {
                        var s702 = q702.armature.constraints;
                        for (var t702 in s702) {
                            var u702 = s702[t702];
                            switch (u702.type) {
                                case 0:
                                    var v702 = h696.BaseObject.borrowObject(h696.IKConstraint);
                                    v702.init(u702, r702), r702._addConstraint(v702);
                                    break;
                                case 1:
                                    var w702 = h696.BaseObject.borrowObject(h696.PathConstraint);
                                    w702.init(u702, r702), r702._addConstraint(w702);
                                    break;
                                default:
                                    var x702 = h696.BaseObject.borrowObject(h696.IKConstraint);
                                    x702.init(u702, r702), r702._addConstraint(x702);
                            }
                        }
                    }, m696.prototype._buildChildArmature = function (n702, o702, p702) {
                        return this.buildArmature(p702.path, null !== n702 ? n702.dataName : "", "", null !== n702 ? n702.textureAtlasName : "");
                    }, m696.prototype._getSlotDisplay = function (y701, z701, a702, b702) {
                        var c702 = null !== y701 ? y701.dataName : z701.parent.parent.parent.name, d702 = null;
                        switch (z701.type) {
                            case 0:
                                var e702 = z701;
                                null !== y701 && y701.textureAtlasName.length > 0 && (e702.texture = this._getTextureData(y701.textureAtlasName, z701.path)), null === e702.texture && (e702.texture = this._getTextureData(c702, z701.path)), d702 = null !== a702 && 2 === a702.type && this._isSupportMesh() ? b702.meshDisplay : b702.rawDisplay;
                                break;
                            case 2:
                                var f702 = z701;
                                null !== y701 && y701.textureAtlasName.length > 0 && (f702.texture = this._getTextureData(y701.textureAtlasName, f702.path)), null === f702.texture && (f702.texture = this._getTextureData(c702, f702.path)), d702 = this._isSupportMesh() ? b702.meshDisplay : b702.rawDisplay;
                                break;
                            case 1:
                                var g702 = z701, h702 = this._buildChildArmature(y701, b702, z701);
                                if (null !== h702) {
                                    if (h702.inheritAnimation = g702.inheritAnimation, !h702.inheritAnimation) {
                                        var i702 = g702.actions.length > 0 ? g702.actions : h702.armatureData.defaultActions;
                                        if (i702.length > 0)
                                            for (var j702 = 0, k702 = i702; j702 < k702.length; j702++) {
                                                var l702 = k702[j702], m702 = h696.BaseObject.borrowObject(h696.EventObject);
                                                h696.EventObject.actionDataToInstance(l702, m702, b702.armature), m702.slot = b702, b702.armature._bufferAction(m702, !1);
                                            }
                                        else
                                            h702.animation.play();
                                    }
                                    g702.armature = h702.armatureData;
                                }
                                d702 = h702;
                        }
                        return d702;
                    }, m696.prototype.parseDragonBonesData = function (s701, t701, u701) {
                        void 0 === t701 && (t701 = null), void 0 === u701 && (u701 = 1);
                        for (var v701 = s701 instanceof ArrayBuffer ? m696._binaryParser : this._dataParser, w701 = v701.parseDragonBonesData(s701, u701);;) {
                            var x701 = this._buildTextureAtlasData(null, null);
                            if (!v701.parseTextureAtlasData(null, x701, u701)) {
                                x701.returnToPool();
                                break;
                            }
                            this.addTextureAtlasData(x701, t701);
                        }
                        return null !== w701 && this.addDragonBonesData(w701, t701), w701;
                    }, m696.prototype.parseTextureAtlasData = function (n701, o701, p701, q701) {
                        void 0 === p701 && (p701 = null), void 0 === q701 && (q701 = 1);
                        var r701 = this._buildTextureAtlasData(null, null);
                        return this._dataParser.parseTextureAtlasData(n701, r701, q701), this._buildTextureAtlasData(r701, o701 || null), this.addTextureAtlasData(r701, p701), r701;
                    }, m696.prototype.updateTextureAtlasData = function (i701, j701) {
                        var k701 = this.getTextureAtlasData(i701);
                        if (null !== k701)
                            for (var l701 = 0, m701 = k701.length; l701 < m701; ++l701)
                                l701 < j701.length && this._buildTextureAtlasData(k701[l701], j701[l701]);
                    }, m696.prototype.getDragonBonesData = function (h701) {
                        return h701 in this._dragonBonesDataMap ? this._dragonBonesDataMap[h701] : null;
                    }, m696.prototype.addDragonBonesData = function (f701, g701) {
                        if (void 0 === g701 && (g701 = null), (g701 = null !== g701 ? g701 : f701.name) in this._dragonBonesDataMap) {
                            if (this._dragonBonesDataMap[g701] === f701)
                                return;
                            console.warn("Can not add same name data: " + g701);
                        }
                        else
                            this._dragonBonesDataMap[g701] = f701;
                    }, m696.prototype.removeDragonBonesData = function (d701, e701) {
                        void 0 === e701 && (e701 = !0), d701 in this._dragonBonesDataMap && (e701 && this._dragonBones.bufferObject(this._dragonBonesDataMap[d701]), delete this._dragonBonesDataMap[d701]);
                    }, m696.prototype.getTextureAtlasData = function (c701) {
                        return c701 in this._textureAtlasDataMap ? this._textureAtlasDataMap[c701] : null;
                    }, m696.prototype.addTextureAtlasData = function (z700, a701) {
                        void 0 === a701 && (a701 = null);
                        var b701 = (a701 = null !== a701 ? a701 : z700.name) in this._textureAtlasDataMap ? this._textureAtlasDataMap[a701] : this._textureAtlasDataMap[a701] = [];
                        b701.indexOf(z700) < 0 && b701.push(z700);
                    }, m696.prototype.removeTextureAtlasData = function (t700, u700) {
                        if (void 0 === u700 && (u700 = !0), t700 in this._textureAtlasDataMap) {
                            var v700 = this._textureAtlasDataMap[t700];
                            if (u700)
                                for (var w700 = 0, x700 = v700; w700 < x700.length; w700++) {
                                    var y700 = x700[w700];
                                    this._dragonBones.bufferObject(y700);
                                }
                            delete this._textureAtlasDataMap[t700];
                        }
                    }, m696.prototype.getArmatureData = function (q700, r700) {
                        void 0 === r700 && (r700 = "");
                        var s700 = new j696();
                        return this._fillBuildArmaturePackage(s700, r700, q700, "", "") ? s700.armature : null;
                    }, m696.prototype.clear = function (l700) {
                        for (var m700 in void 0 === l700 && (l700 = !0), this._dragonBonesDataMap)
                            l700 && this._dragonBones.bufferObject(this._dragonBonesDataMap[m700]), delete this._dragonBonesDataMap[m700];
                        for (var m700 in this._textureAtlasDataMap) {
                            if (l700)
                                for (var n700 = 0, o700 = this._textureAtlasDataMap[m700]; n700 < o700.length; n700++) {
                                    var p700 = o700[n700];
                                    this._dragonBones.bufferObject(p700);
                                }
                            delete this._textureAtlasDataMap[m700];
                        }
                    }, m696.prototype.buildArmature = function (f700, g700, h700, i700) {
                        void 0 === g700 && (g700 = ""), void 0 === h700 && (h700 = ""), void 0 === i700 && (i700 = "");
                        var j700 = new j696();
                        if (!this._fillBuildArmaturePackage(j700, g700 || "", f700, h700 || "", i700 || ""))
                            return console.warn("No armature data: " + f700 + ", " + (null !== g700 ? g700 : "")), null;
                        var k700 = this._buildArmature(j700);
                        return this._buildBones(j700, k700), this._buildSlots(j700, k700), this._buildConstraints(j700, k700), k700.invalidUpdate(null, !0), k700.advanceTime(0), k700;
                    }, m696.prototype.replaceDisplay = function (x699, y699, z699) {
                        void 0 === z699 && (z699 = -1), z699 < 0 && (z699 = x699.displayIndex), z699 < 0 && (z699 = 0), x699.replaceDisplayData(y699, z699);
                        var a700 = x699.displayList;
                        if (a700.length <= z699) {
                            a700.length = z699 + 1;
                            for (var b700 = 0, c700 = a700.length; b700 < c700; ++b700)
                                a700[b700] || (a700[b700] = null);
                        }
                        if (null !== y699) {
                            var d700 = x699.rawDisplayDatas, e700 = null;
                            d700 && (h696.DragonBones.webAssembly ? z699 < d700.size() && (e700 = d700.get(z699)) : z699 < d700.length && (e700 = d700[z699])), a700[z699] = this._getSlotDisplay(null, y699, e700, x699);
                        }
                        else
                            a700[z699] = null;
                        x699.displayList = a700;
                    }, m696.prototype.replaceSlotDisplay = function (p699, q699, r699, s699, t699, u699) {
                        void 0 === u699 && (u699 = -1);
                        var v699 = this.getArmatureData(q699, p699 || "");
                        if (!v699 || !v699.defaultSkin)
                            return !1;
                        var w699 = v699.defaultSkin.getDisplay(r699, s699);
                        return !!w699 && (this.replaceDisplay(t699, w699, u699), !0);
                    }, m696.prototype.replaceSlotDisplayList = function (f699, g699, h699, i699) {
                        var j699 = this.getArmatureData(g699, f699 || "");
                        if (!j699 || !j699.defaultSkin)
                            return !1;
                        var k699 = j699.defaultSkin.getDisplays(h699);
                        if (!k699)
                            return !1;
                        for (var l699 = 0, m699 = 0, n699 = h696.DragonBones.webAssembly ? k699.size() : k699.length; m699 < n699; ++m699) {
                            var o699 = h696.DragonBones.webAssembly ? k699.get(m699) : k699[m699];
                            this.replaceDisplay(i699, o699, l699++);
                        }
                        return !0;
                    }, m696.prototype.replaceSkin = function (q698, r698, s698, t698) {
                        void 0 === s698 && (s698 = !1), void 0 === t698 && (t698 = null);
                        for (var u698 = !1, v698 = r698.parent.defaultSkin, w698 = 0, x698 = q698.getSlots(); w698 < x698.length; w698++) {
                            var y698 = x698[w698];
                            if (!(null !== t698 && t698.indexOf(y698.name) >= 0)) {
                                var z698 = r698.getDisplays(y698.name);
                                if (z698 || (null !== v698 && r698 !== v698 && (z698 = v698.getDisplays(y698.name)), z698)) {
                                    var a699 = h696.DragonBones.webAssembly ? z698.size() : z698.length, b699 = y698.displayList;
                                    b699.length = a699;
                                    for (var c699 = 0, d699 = a699; c699 < d699; ++c699) {
                                        var e699 = h696.DragonBones.webAssembly ? z698.get(c699) : z698[c699];
                                        b699[c699] = null !== e699 ? this._getSlotDisplay(null, e699, null, y698) : null;
                                    }
                                    u698 = !0, y698.rawDisplayDatas = z698, y698.displayList = b699;
                                }
                                else
                                    s698 && (y698.rawDisplayDatas = null, y698.displayList = []);
                            }
                        }
                        return u698;
                    }, m696.prototype.replaceAnimation = function (z697, a698, b698) {
                        void 0 === b698 && (b698 = !0);
                        var c698 = a698.defaultSkin;
                        if (null === c698)
                            return !1;
                        if (b698)
                            z697.animation.animations = a698.animations;
                        else {
                            var d698 = z697.animation.animations, e698 = {};
                            for (var f698 in d698)
                                e698[f698] = d698[f698];
                            for (var f698 in a698.animations)
                                e698[f698] = a698.animations[f698];
                            z697.animation.animations = e698;
                        }
                        for (var g698 = 0, h698 = z697.getSlots(); g698 < h698.length; g698++)
                            for (var i698 = h698[g698], j698 = 0, k698 = 0, l698 = i698.displayList; k698 < l698.length; k698++) {
                                var m698 = l698[k698];
                                if (m698 instanceof h696.Armature) {
                                    var n698 = c698.getDisplays(i698.name);
                                    if (null !== n698 && j698 < (h696.DragonBones.webAssembly ? n698.size() : n698.length)) {
                                        var o698 = h696.DragonBones.webAssembly ? n698.get(j698) : n698[j698];
                                        if (null !== o698 && 1 === o698.type) {
                                            var p698 = this.getArmatureData(o698.path, o698.parent.parent.parent.name);
                                            p698 && this.replaceAnimation(m698, p698, b698);
                                        }
                                    }
                                }
                                j698++;
                            }
                        return !0;
                    }, m696.prototype.getAllDragonBonesData = function () {
                        return this._dragonBonesDataMap;
                    }, m696.prototype.getAllTextureAtlasData = function () {
                        return this._textureAtlasDataMap;
                    }, Object.defineProperty(m696.prototype, "clock", {
                        get: function () {
                            return this._dragonBones.clock;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(m696.prototype, "dragonBones", {
                        get: function () {
                            return this._dragonBones;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), m696.prototype.changeSkin = function (w697, x697, y697) {
                        return void 0 === y697 && (y697 = null), this.replaceSkin(w697, x697, !1, y697);
                    }, m696.prototype.copyAnimationsToArmature = function (q697, r697, s697, t697, u697) {
                        void 0 === t697 && (t697 = ""), void 0 === u697 && (u697 = !0);
                        var v697 = this.getArmatureData(r697, t697);
                        return !!v697 && this.replaceAnimation(q697, v697, u697);
                    }, m696._objectParser = null, m696._binaryParser = null, m696;
                }();
                h696.BaseFactory = i696;
                var j696 = function () {
                    this.dataName = "", this.textureAtlasName = "", this.skin = null;
                };
                h696.BuildArmaturePackage = j696;
            }(d219 || (d219 = {})), function (g696) {
                g696.BinaryOffset = {
                    WeigthBoneCount: 0,
                    WeigthFloatOffset: 1,
                    WeigthBoneIndices: 2,
                    MeshVertexCount: 0,
                    MeshTriangleCount: 1,
                    MeshFloatOffset: 2,
                    MeshWeightOffset: 3,
                    MeshVertexIndices: 4,
                    TimelineScale: 0,
                    TimelineOffset: 1,
                    TimelineKeyFrameCount: 2,
                    TimelineFrameValueCount: 3,
                    TimelineFrameValueOffset: 4,
                    TimelineFrameOffset: 5,
                    FramePosition: 0,
                    FrameTweenType: 1,
                    FrameTweenEasingOrCurveSampleCount: 2,
                    FrameCurveSamples: 3,
                    DeformMeshOffset: 0,
                    DeformCount: 1,
                    DeformValueCount: 2,
                    DeformValueOffset: 3,
                    DeformFloatOffset: 4
                }, g696.ArmatureType = {
                    Armature: 0,
                    MovieClip: 1,
                    Stage: 2
                }, g696.BoneType = {
                    Bone: 0,
                    Surface: 1
                }, g696.DisplayType = {
                    Image: 0,
                    Armature: 1,
                    Mesh: 2,
                    BoundingBox: 3
                }, g696.BoundingBoxType = {
                    Rectangle: 0,
                    Ellipse: 1,
                    Polygon: 2
                }, g696.ActionType = {
                    Play: 0,
                    Stop: 1,
                    GotoAndPlay: 2,
                    GotoAndStop: 3,
                    FadeIn: 4,
                    FadeOut: 5,
                    Frame: 10,
                    Sound: 11
                }, g696.BlendMode = {
                    Normal: 0,
                    Add: 1,
                    Alpha: 2,
                    Darken: 3,
                    Difference: 4,
                    Erase: 5,
                    HardLight: 6,
                    Invert: 7,
                    Layer: 8,
                    Lighten: 9,
                    Multiply: 10,
                    Overlay: 11,
                    Screen: 12,
                    Subtract: 13
                }, g696.TweenType = {
                    None: 0,
                    Line: 1,
                    Curve: 2,
                    QuadIn: 3,
                    QuadOut: 4,
                    QuadInOut: 5
                }, g696.TimelineType = {
                    Action: 0,
                    ZOrder: 1,
                    BoneAll: 10,
                    BoneTranslate: 11,
                    BoneRotate: 12,
                    BoneScale: 13,
                    Surface: 50,
                    SlotDisplay: 20,
                    SlotColor: 21,
                    SlotFFD: 22,
                    IKConstraint: 30,
                    AnimationTime: 40,
                    AnimationWeight: 41
                };
            }(d219 || (d219 = {}));
            const e219 = d219.DragonBones, f219 = d219.BaseObject, g219 = d219.Matrix;
            d219.Transform, d219.ColorTransform, d219.Point, d219.Rectangle, d219.UserData, d219.ActionData, d219.DragonBonesData, d219.ArmatureData, d219.BoneData, d219.SurfaceData, d219.SlotData, d219.ConstraintData, d219.IKConstraintData, d219.PathConstraintData, d219.CanvasData, d219.SkinData, d219.VerticesData;
            const h219 = d219.DisplayData;
            d219.ImageDisplayData, d219.ArmatureDisplayData, d219.MeshDisplayData, d219.BoundingBoxDisplayData, d219.PathDisplayData, d219.WeightData, d219.BoundingBoxData, d219.RectangleBoundingBoxData, d219.EllipseBoundingBoxData, d219.PolygonBoundingBoxData, d219.AnimationData, d219.TimelineData, d219.AnimationConfig;
            const i219 = d219.TextureAtlasData, j219 = d219.TextureData;
            d219.DeformVertices;
            const k219 = d219.Armature;
            d219.TransformObject, d219.Bone, d219.Surface;
            const l219 = d219.Slot;
            d219.Constraint, d219.IKConstraint, d219.PathConstraint, d219.WorldClock;
            const m219 = d219.Animation;
            d219.AnimationState, d219.BonePose, d219.BlendState, d219.TimelineState, d219.TweenTimelineState, d219.BoneTimelineState, d219.SlotTimelineState, d219.ConstraintTimelineState, d219.ActionTimelineState, d219.ZOrderTimelineState, d219.BoneAllTimelineState, d219.BoneTranslateTimelineState, d219.BoneRotateTimelineState, d219.BoneScaleTimelineState, d219.SurfaceTimelineState, d219.SlotDislayTimelineState, d219.SlotColorTimelineState, d219.DeformTimelineState, d219.IKConstraintTimelineState, d219.AnimationTimelineState;
            const n219 = d219.EventObject;
            d219.DataParser, d219.ObjectDataParser, d219.ActionFrame, d219.BinaryDataParser;
            const o219 = d219.BaseFactory;
            d219.BuildArmaturePackage;
            const p219 = d219.BinaryOffset;
            d219.ArmatureType;
            const q219 = d219.BoneType;
            var r219, s219;
            d219.DisplayType, d219.BoundingBoxType, d219.ActionType, d219.BlendMode, d219.TweenType, d219.TimelineType;
            const { ccclass: t219 } = k152;
            let u219 = t219("dragonBones.CCTextureAtlasData")(r219 = class extends i219 {
                constructor(...f696) {
                    super(...f696), this._renderTexture = null;
                }
                get renderTexture() {
                    return this._renderTexture;
                }
                set renderTexture(a696) {
                    if (this._renderTexture = a696, a696)
                        for (const c696 in this.textures) {
                            const d696 = this.textures[c696];
                            if (!d696.spriteFrame) {
                                let e696 = null;
                                d696.rotated ? e696 = new y147(d696.region.x, d696.region.y, d696.region.height, d696.region.width) : (e696 = new y147(d696.region.x, d696.region.y, d696.region.width, d696.region.height), d696.spriteFrame = new q186(), d696.spriteFrame.texture = a696, d696.spriteFrame.rect = e696);
                            }
                        }
                    else
                        for (const b696 in this.textures)
                            this.textures[b696].spriteFrame = null;
                }
                static toString() {
                    return "[class dragonBones.CCTextureAtlasData]";
                }
                createTexture() {
                    return f219.borrowObject(v219);
                }
                _onClear() {
                    super._onClear(), this.renderTexture = null;
                }
            }) || r219, v219 = t219("dragonBones.CCTextureData")(s219 = class extends j219 {
                constructor(...z695) {
                    super(...z695), this.spriteFrame = null;
                }
                static toString() {
                    return "[class dragonBones.CCTextureData]";
                }
                _onClear() {
                    super._onClear(), this.spriteFrame = null;
                }
            }) || s219;
            var w219;
            const { ccclass: x219 } = k152;
            let y219 = x219("dragonBones.CCSlot")(w219 = class extends l219 {
                static toString() {
                    return "[class dragonBones.CCSlot]";
                }
                constructor() {
                    super(), this._localVertices = void 0, this._indices = void 0, this._matrix = void 0, this._worldMatrix = void 0, this._worldMatrixDirty = void 0, this._color = void 0, this._localVertices = [], this._indices = [], this._matrix = new o147(), this._worldMatrix = new o147(), this._worldMatrixDirty = !0, this._visible = !1, this._color = new a147();
                }
                getTexture() {
                    return this._textureData ? this._textureData.spriteFrame.texture : null;
                }
                calculWorldMatrix() {
                    const y695 = this._armature._parent;
                    y695 ? this._mulMat(this._worldMatrix, y695._worldMatrix, this._matrix) : o147.copy(this._worldMatrix, this._matrix), this._worldMatrixDirty = !1;
                }
                _onClear() {
                    super._onClear(), this._localVertices.length = 0, this._indices.length = 0, o147.identity(this._matrix), o147.identity(this._worldMatrix), this._worldMatrixDirty = !0, this._color = new a147(), this._visible = !1;
                }
                _onUpdateDisplay() { }
                _initDisplay(x695) { }
                _addDisplay() {
                    this._visible = !0;
                }
                _replaceDisplay(w695) { }
                _removeDisplay() {
                    this._visible = !1;
                }
                _disposeDisplay(v695) { }
                _updateVisible() {
                    this._visible = this.parent.visible;
                }
                _updateGlueMesh() { }
                _updateZOrder() { }
                _updateBlendMode() {
                    if (this._childArmature) {
                        const r695 = this._childArmature.getSlots();
                        for (let s695 = 0, t695 = r695.length; s695 < t695; s695++) {
                            const u695 = r695[s695];
                            u695._blendMode = this._blendMode, u695._updateBlendMode();
                        }
                    }
                }
                _updateColor() {
                    const q695 = this._color;
                    q695.r = 255 * this._colorTransform.redMultiplier, q695.g = 255 * this._colorTransform.greenMultiplier, q695.b = 255 * this._colorTransform.blueMultiplier, q695.a = 255 * this._colorTransform.alphaMultiplier;
                }
                _updateFrame() {
                    this._indices.length = 0;
                    const r694 = this._indices, s694 = this._localVertices;
                    let t694 = 0, u694 = 0;
                    const v694 = this._textureData;
                    if (!this._display || this._displayIndex < 0 || !v694 || !v694.spriteFrame)
                        return;
                    const w694 = v694.spriteFrame.texture, x694 = w694.width, y694 = w694.height, z694 = v694.region;
                    if (0 === x694 || 0 === y694)
                        return void console.error(`SpriteFrame ${v694.spriteFrame.name} incorrect size ${x694} x ${y694}`);
                    const a695 = null !== this._deformVertices && this._display === this._meshDisplay ? this._deformVertices.verticesData : null;
                    if (a695) {
                        const f695 = a695.data, g695 = f695.intArray, h695 = f695.floatArray, i695 = g695[a695.offset + p219.MeshVertexCount], j695 = g695[a695.offset + p219.MeshTriangleCount];
                        let k695 = g695[a695.offset + p219.MeshFloatOffset];
                        k695 < 0 && (k695 += 65536);
                        const l695 = k695 + 2 * i695, m695 = this._armature._armatureData.scale;
                        for (let o695 = 0, p695 = 2 * i695; o695 < p695; o695 += 2)
                            s694[u694++] = h695[k695 + o695] * m695, s694[u694++] = -h695[k695 + o695 + 1] * m695, a695.rotated ? (s694[u694++] = (z694.x + (1 - h695[l695 + o695]) * z694.width) / x694, s694[u694++] = (z694.y + h695[l695 + o695 + 1] * z694.height) / y694) : (s694[u694++] = (z694.x + h695[l695 + o695] * z694.width) / x694, s694[u694++] = (z694.y + h695[l695 + o695 + 1] * z694.height) / y694);
                        for (let n695 = 0; n695 < 3 * j695; ++n695)
                            r694[t694++] = g695[a695.offset + p219.MeshVertexIndices + n695];
                        s694.length = u694, r694.length = t694, a695.weight && this._identityTransform();
                    }
                    else {
                        const b695 = z694.x / x694, c695 = (z694.y + z694.height) / y694, d695 = (z694.x + z694.width) / x694, e695 = z694.y / y694;
                        s694[u694++] = 0, s694[u694++] = 0, s694[u694++] = b695, s694[u694++] = c695, s694[u694++] = z694.width, s694[u694++] = 0, s694[u694++] = d695, s694[u694++] = c695, s694[u694++] = 0, s694[u694++] = z694.height, s694[u694++] = b695, s694[u694++] = e695, s694[u694++] = z694.width, s694[u694++] = z694.height, s694[u694++] = d695, s694[u694++] = e695, r694[0] = 0, r694[1] = 1, r694[2] = 2, r694[3] = 1, r694[4] = 3, r694[5] = 2, s694.length = u694, r694.length = 6;
                    }
                    this._visibleDirty = !0, this._blendModeDirty = !0, this._colorDirty = !0;
                }
                _updateMesh() {
                    const f693 = this._armature._armatureData.scale, g693 = this._deformVertices.vertices, h693 = this._deformVertices.bones, i693 = this._deformVertices.verticesData, j693 = i693.weight, k693 = g693.length > 0 && i693.inheritDeform, l693 = this._localVertices;
                    if (j693) {
                        const y693 = i693.data, z693 = y693.intArray, a694 = y693.floatArray, b694 = z693[i693.offset + p219.MeshVertexCount];
                        let c694 = z693[j693.offset + p219.WeigthFloatOffset];
                        c694 < 0 && (c694 += 65536);
                        for (let d694 = 0, e694 = j693.offset + p219.WeigthBoneIndices + h693.length, f694 = c694, g694 = 0, h694 = 0; d694 < b694; d694++, h694 += 4) {
                            const i694 = z693[e694++];
                            let j694 = 0, k694 = 0;
                            for (let l694 = 0; l694 < i694; ++l694) {
                                const m694 = h693[z693[e694++]];
                                if (null !== m694) {
                                    const n694 = m694.globalTransformMatrix, o694 = a694[f694++];
                                    let p694 = a694[f694++] * f693, q694 = a694[f694++] * f693;
                                    k693 && (p694 += g693[g694++], q694 += g693[g694++]), j694 += (n694.a * p694 + n694.c * q694 + n694.tx) * o694, k694 += (n694.b * p694 + n694.d * q694 + n694.ty) * o694;
                                }
                            }
                            l693[h694] = j694, l693[h694 + 1] = -k694;
                        }
                    }
                    else if (k693) {
                        const m693 = this._parent._boneData.type !== q219.Bone, n693 = i693.data, o693 = n693.intArray, p693 = n693.floatArray, q693 = o693[i693.offset + p219.MeshVertexCount];
                        let r693 = o693[i693.offset + p219.MeshFloatOffset];
                        r693 < 0 && (r693 += 65536);
                        for (let s693 = 0, t693 = q693, u693 = 0; s693 < t693; s693++, u693 += 4) {
                            const v693 = p693[r693 + 2 * s693] * f693 + g693[2 * s693], w693 = p693[r693 + 2 * s693 + 1] * f693 + g693[2 * s693 + 1];
                            if (m693) {
                                const x693 = this._parent._getGlobalTransformMatrix(v693, w693);
                                l693[u693] = x693.a * v693 + x693.c * w693 + x693.tx, l693[u693 + 1] = -x693.b * v693 + x693.d * w693 + x693.ty;
                            }
                            else
                                l693[u693] = v693, l693[u693 + 1] = -w693;
                        }
                    }
                    j693 && this._identityTransform();
                }
                _identityTransform() {
                    const e693 = this._matrix;
                    e693.m00 = 1, e693.m01 = 0, e693.m04 = -0, e693.m05 = -1, e693.m12 = 0, e693.m13 = 0, this._worldMatrixDirty = !0;
                }
                _updateTransform() {
                    const d693 = this._matrix;
                    d693.m00 = this.globalTransformMatrix.a, d693.m01 = this.globalTransformMatrix.b, d693.m04 = -this.globalTransformMatrix.c, d693.m05 = -this.globalTransformMatrix.d, this._childArmature ? (d693.m12 = this.globalTransformMatrix.tx, d693.m13 = this.globalTransformMatrix.ty) : (d693.m12 = this.globalTransformMatrix.tx - (this.globalTransformMatrix.a * this._pivotX - this.globalTransformMatrix.c * this._pivotY), d693.m13 = this.globalTransformMatrix.ty - (this.globalTransformMatrix.b * this._pivotX - this.globalTransformMatrix.d * this._pivotY)), this._worldMatrixDirty = !0;
                }
                updateWorldMatrix() {
                    if (!this._armature)
                        return;
                    const x692 = this._armature._parent;
                    if (x692 && x692.updateWorldMatrix(), this._worldMatrixDirty) {
                        this.calculWorldMatrix();
                        const y692 = this.childArmature;
                        if (!y692)
                            return;
                        const z692 = y692.getSlots();
                        for (let a693 = 0, b693 = z692.length; a693 < b693; a693++) {
                            const c693 = z692[a693];
                            c693 && (c693._worldMatrixDirty = !0);
                        }
                    }
                }
                _mulMat(i692, j692, k692) {
                    const l692 = j692.m00, m692 = j692.m01, n692 = j692.m04, o692 = j692.m05, p692 = j692.m12, q692 = j692.m13, r692 = k692.m00, s692 = k692.m01, t692 = k692.m04, u692 = k692.m05, v692 = k692.m12, w692 = k692.m13;
                    0 !== m692 || 0 !== n692 ? (i692.m00 = r692 * l692 + s692 * n692, i692.m01 = r692 * m692 + s692 * o692, i692.m04 = t692 * l692 + u692 * n692, i692.m05 = t692 * m692 + u692 * o692, i692.m12 = l692 * v692 + n692 * w692 + p692, i692.m13 = m692 * v692 + o692 * w692 + q692) : (i692.m00 = r692 * l692, i692.m01 = s692 * o692, i692.m04 = t692 * l692, i692.m05 = u692 * o692, i692.m12 = l692 * v692 + p692, i692.m13 = o692 * w692 + q692);
                }
            }) || w219;
            var z219;
            const { ccclass: a220 } = k152;
            let b220 = a220("dragonBones.CCArmatureDisplay")(z219 = class extends h219 {
                get node() {
                    return this;
                }
                constructor() {
                    super(), this.shouldAdvanced = !1, this._ccNode = null, this._ccComponent = null, this._eventTarget = void 0, this._armature = null, this._eventTarget = new o156();
                }
                hasEvent(h692) {
                    return console.warn("Method not implemented."), !1;
                }
                addEvent(e692, f692, g692) {
                    console.warn("Method not implemented.");
                }
                removeEvent(b692, c692, d692) {
                    console.warn("Method not implemented.");
                }
                setEventTarget(a692) {
                    this._eventTarget = a692;
                }
                getRootDisplay() {
                    let y691, z691 = this._armature._parent;
                    if (!z691)
                        return this;
                    for (; z691;)
                        y691 = z691, z691 = z691._armature._parent;
                    return y691._armature.display;
                }
                convertToRootSpace(u691) {
                    const v691 = this._armature._parent;
                    if (!v691)
                        return u691;
                    v691.updateWorldMatrix();
                    const w691 = v691._worldMatrix, x691 = new w146(0, 0);
                    return x691.x = u691.x * w691.m00 + u691.y * w691.m04 + w691.m12, x691.y = u691.x * w691.m01 + u691.y * w691.m05 + w691.m13, x691;
                }
                convertToWorldSpace(q691) {
                    var r691;
                    const s691 = this.convertToRootSpace(q691), t691 = this.getRootNode();
                    return null == t691 || null === (r691 = t691._uiProps.uiTransformComp) || void 0 === r691 ? void 0 : r691.convertToWorldSpaceAR(s691);
                }
                getRootNode() {
                    const p691 = this.getRootDisplay();
                    return p691 && p691._ccNode;
                }
                dbInit(o691) {
                    this._armature = o691;
                }
                dbClear() {
                    this._armature = null;
                }
                dbUpdate() {
                    this._ccComponent && this._ccComponent.markForUpdateRenderData();
                }
                advanceTimeBySelf(n691) {
                    this.shouldAdvanced = !!n691;
                }
                hasDBEventListener(m691) {
                    return this._eventTarget.hasEventListener(m691);
                }
                addDBEventListener(j691, k691, l691) {
                    this._eventTarget.on(j691, k691, l691);
                }
                removeDBEventListener(g691, h691, i691) {
                    this._eventTarget.off(g691, h691, i691);
                }
                dispatchDBEvent(e691, f691) {
                    this._eventTarget.emit(e691, f691);
                }
            }) || z219;
            var c220, d220;
            const { ccclass: e220 } = k152;
            let f220 = e220("CCFactory")(((d220 = class t extends o219 {
                static getInstance() {
                    return t._factory || (t._factory = new t()), t._factory;
                }
                constructor() {
                    super(), this.id = void 0, this.uuid = void 0, this._slots = void 0;
                    const d691 = new b220();
                    this._dragonBones = new e219(d691), t185.getScheduler() && (e186.on(d186.EVENT_RESTART, this.onRestart, this), this.initUpdate()), this.id = this.uuid = "CCFactory";
                }
                onRestart() {
                    t._factory = null;
                }
                initUpdate(c691) {
                    g156.enableForTarget(this), t185.getScheduler().scheduleUpdate(this, a156.Priority.HIGH, !1);
                }
                update(b691) {
                    this._dragonBones.advanceTime(b691);
                }
                getDragonBonesDataByRawData(a691) {
                    return (a691 instanceof ArrayBuffer ? o219._binaryParser : this._dataParser).parseDragonBonesData(a691, 1);
                }
                buildArmatureDisplay(v690, w690, x690, y690) {
                    const z690 = this.buildArmature(v690, w690, x690, y690);
                    return z690 ? z690._display : null;
                }
                createArmatureNode(r690, s690, t690) {
                    let u690 = (t690 = t690 || new h175()).getComponent("dragonBones.ArmatureDisplay");
                    return u690 || (u690 = t690.addComponent("dragonBones.ArmatureDisplay")), t690.name = s690, u690._armatureName = s690, u690._dragonAsset = r690.dragonAsset, u690._dragonAtlasAsset = r690.dragonAtlasAsset, u690._init(), u690;
                }
                _buildTextureAtlasData(p690, q690) {
                    return p690 ? p690.renderTexture = q690 : p690 = f219.borrowObject(u219), p690;
                }
                _sortSlots() {
                    const h690 = this._slots, i690 = [];
                    for (let j690 = 0, k690 = h690.length; j690 < k690; j690++) {
                        const l690 = h690[j690], m690 = l690._zOrder;
                        let n690 = !1;
                        for (let o690 = i690.length - 1; o690 >= 0; o690--)
                            if (m690 >= i690[o690]._zOrder) {
                                i690.splice(o690 + 1, 0, l690), n690 = !0;
                                break;
                            }
                        n690 || i690.unshift(l690);
                    }
                    this._slots = i690;
                }
                _buildArmature(e690) {
                    const f690 = f219.borrowObject(k219);
                    f690._skinData = e690.skin, f690._animation = f219.borrowObject(m219), f690._animation._armature = f690, f690._animation.animations = e690.armature.animations, f690._isChildArmature = !1;
                    const g690 = new b220();
                    return f690.init(e690.armature, g690, g690, this._dragonBones), f690;
                }
                _buildSlot(z689, a690, b690) {
                    const c690 = f219.borrowObject(y219), d690 = c690;
                    return c690.init(a690, b690, d690, d690), c690;
                }
                getDragonBonesDataByUUID(x689) {
                    for (const y689 in this._dragonBonesDataMap)
                        if (-1 !== y689.indexOf(x689))
                            return this._dragonBonesDataMap[y689];
                    return null;
                }
                removeDragonBonesDataByUUID(u689, v689) {
                    void 0 === v689 && (v689 = !0);
                    for (const w689 in this._dragonBonesDataMap)
                        -1 !== w689.indexOf(u689) && (v689 && this._dragonBones.bufferObject(this._dragonBonesDataMap[w689]), delete this._dragonBonesDataMap[w689]);
                }
            })._factory = null, c220 = d220)) || c220;
            var g220;
            const h220 = 1 / 60, i220 = [], j220 = [];
            let k220, l220, m220 = 0, n220 = 0, o220 = 0, p220 = null, q220 = null, r220 = 0, s220 = 0, t220 = 0, u220 = 0, v220 = 0;
            class w220 {
                constructor() {
                    this.maxVertexCount = 0, this.maxIndexCount = 0, this._privateMode = !1, this._inited = !1, this._invalid = !0, this._enableCacheAttachedInfo = !1, this.frames = [], this.totalTime = 0, this.isCompleted = !1, this._frameIdx = -1, this._armatureInfo = null, this._animationName = null, this._tempSegments = null, this._tempColors = null, this._tempBoneInfos = null;
                }
                init(s689, t689) {
                    this._inited = !0, this._armatureInfo = s689, this._animationName = t689;
                }
                clear() {
                    this._inited = !1;
                    for (let q689 = 0, r689 = this.frames.length; q689 < r689; q689++)
                        this.frames[q689].segments.length = 0;
                    this.invalidAllFrame();
                }
                begin() {
                    if (!this._invalid)
                        return;
                    const o689 = this._armatureInfo, p689 = o689.curAnimationCache;
                    p689 && p689 !== this && (this._privateMode ? p689.invalidAllFrame() : p689.updateToFrame()), o689.armature.animation.play(this._animationName, 1), o689.curAnimationCache = this, this._invalid = !1, this._frameIdx = -1, this.totalTime = 0, this.isCompleted = !1;
                }
                end() {
                    this._needToUpdate() || (this._armatureInfo.curAnimationCache = null, this.frames.length = this._frameIdx + 1, this.isCompleted = !0);
                }
                _needToUpdate(n689) {
                    return !this._armatureInfo.armature.animation.isCompleted && this.totalTime < 30 && (void 0 === n689 || this._frameIdx < n689);
                }
                updateToFrame(l689) {
                    if (!this._inited)
                        return;
                    if (this.begin(), !this._needToUpdate(l689))
                        return;
                    const m689 = this._armatureInfo.armature;
                    do {
                        m689.advanceTime(h220), this._frameIdx++, this.updateFrame(m689, this._frameIdx), this.totalTime += h220;
                    } while (this._needToUpdate(l689));
                    this.end();
                }
                isInited() {
                    return this._inited;
                }
                isInvalid() {
                    return this._invalid;
                }
                invalidAllFrame() {
                    this.isCompleted = !1, this._invalid = !0;
                }
                updateAllFrame() {
                    this.invalidAllFrame(), this.updateToFrame();
                }
                enableCacheAttachedInfo() {
                    this._enableCacheAttachedInfo || (this._enableCacheAttachedInfo = !0, this.invalidAllFrame());
                }
                updateFrame(v688, w688) {
                    o220 = 0, m220 = 0, n220 = 0, p220 = null, q220 = null, r220 = 0, s220 = 0, t220 = 0, u220 = 0, v220 = 0, this.frames[w688] = this.frames[w688] || {
                        segments: [],
                        colors: [],
                        boneInfos: [],
                        vertices: new Float32Array(),
                        uintVert: new Uint32Array(),
                        indices: new Uint16Array()
                    };
                    const x688 = this.frames[w688], y688 = this._tempSegments = x688.segments, z688 = this._tempColors = x688.colors, a689 = this._tempBoneInfos = x688.boneInfos;
                    this._traverseArmature(v688, 1), u220 > 0 && (z688[u220 - 1].vfOffset = o220), z688.length = u220, a689.length = m220;
                    const b689 = t220 - 1;
                    if (b689 >= 0)
                        if (s220 > 0) {
                            const k689 = y688[b689];
                            k689.indexCount = s220, k689.vfCount = 9 * r220, k689.vertexCount = r220, y688.length = t220;
                        }
                        else
                            y688.length = t220 - 1;
                    if (0 === y688.length)
                        return;
                    let c689 = x688.vertices;
                    const d689 = o220 / 5, e689 = 9 * d689;
                    let f689;
                    (!c689 || c689.length < o220) && (c689 = x688.vertices = new Float32Array(e689));
                    for (let i689 = 0, j689 = 0; i689 < e689;)
                        c689[i689] = i220[j689++], c689[i689 + 1] = i220[j689++], c689[i689 + 3] = i220[j689++], c689[i689 + 4] = i220[j689++], f689 = i220[j689++], c689[i689 + 5] = (255 & f689) / 255, c689[i689 + 6] = (f689 >> 8 & 255) / 255, c689[i689 + 7] = (f689 >> 16 & 255) / 255, c689[i689 + 8] = (f689 >> 24 & 255) / 255, i689 += 9;
                    let g689 = x688.indices;
                    (!g689 || g689.length < n220) && (g689 = x688.indices = new Uint16Array(n220));
                    for (let h689 = 0; h689 < n220; h689++)
                        g689[h689] = j220[h689];
                    x688.vertices = c689, x688.indices = g689, this.maxVertexCount = d689 > this.maxVertexCount ? d689 : this.maxVertexCount, this.maxIndexCount = g689.length > this.maxIndexCount ? g689.length : this.maxIndexCount;
                }
                _traverseArmature(u687, v687) {
                    const w687 = this._tempColors, x687 = this._tempSegments, y687 = this._tempBoneInfos, z687 = u687._slots;
                    let a688, b688, c688, d688, e688, f688, g688, h688, i688;
                    const j688 = u687._bones;
                    if (this._enableCacheAttachedInfo)
                        for (let q688 = 0, r688 = j688.length; q688 < r688; q688++, m220++) {
                            const s688 = j688[q688];
                            let t688 = y687[m220];
                            t688 || (t688 = y687[m220] = {
                                globalTransformMatrix: new g219()
                            });
                            const u688 = s688.globalTransformMatrix;
                            t688.globalTransformMatrix.copyFrom(u688);
                        }
                    for (let k688 = 0, l688 = z687.length; k688 < l688; k688++)
                        if (c688 = z687[k688], c688._visible && c688._displayData)
                            if (c688.updateWorldMatrix(), e688 = c688._color, c688.childArmature)
                                this._traverseArmature(c688.childArmature, v687 * e688.a / 255);
                            else if (g688 = c688.getTexture(), g688) {
                                p220 === g688.nativeUrl && q220 === c688._blendMode || (p220 = g688.nativeUrl, q220 = c688._blendMode, h688 = t220 - 1, h688 >= 0 && (s220 > 0 ? (i688 = x687[h688], i688.indexCount = s220, i688.vertexCount = r220, i688.vfCount = 9 * r220) : t220--), x687[t220] = {
                                    tex: g688,
                                    blendMode: c688._blendMode,
                                    indexCount: 0,
                                    vertexCount: 0,
                                    vfCount: 0
                                }, t220++, s220 = 0, r220 = 0), f688 = (e688.a * v687 << 24 >>> 0) + (e688.b << 16) + (e688.g << 8) + e688.r, v220 !== f688 && (v220 = f688, u220 > 0 && (w687[u220 - 1].vfOffset = o220), w687[u220++] = {
                                    r: e688.r,
                                    g: e688.g,
                                    b: e688.b,
                                    a: e688.a * v687,
                                    vfOffset: 0
                                }), a688 = c688._localVertices, b688 = c688._indices, d688 = c688._worldMatrix;
                                for (let o688 = 0, p688 = a688.length; o688 < p688;)
                                    k220 = a688[o688++], l220 = a688[o688++], i220[o220++] = k220 * d688.m00 + l220 * d688.m04 + d688.m12, i220[o220++] = k220 * d688.m01 + l220 * d688.m05 + d688.m13, i220[o220++] = a688[o688++], i220[o220++] = a688[o688++], i220[o220++] = f688;
                                for (let m688 = 0, n688 = b688.length; m688 < n688; m688++)
                                    j220[n220++] = r220 + b688[m688];
                                s220 += b688.length, r220 += a688.length / 4;
                            }
                }
            }
            class x220 {
                constructor() {
                    this._privateMode = !1, this._animationPool = {}, this._armatureCache = {};
                }
                enablePrivateMode() {
                    this._privateMode = !0;
                }
                dispose() {
                    for (const r687 in this._armatureCache) {
                        const s687 = this._armatureCache[r687];
                        if (s687) {
                            const t687 = s687.armature;
                            t687 && t687.dispose();
                        }
                    }
                    this._armatureCache = {}, this._animationPool = {};
                }
                _removeArmature(l687) {
                    const m687 = this._armatureCache[l687], n687 = m687.animationsCache;
                    for (const p687 in n687) {
                        const q687 = n687[p687];
                        q687 && (this._animationPool[`${l687}#${p687}`] = q687, q687.clear());
                    }
                    const o687 = m687.armature;
                    o687 && o687.dispose(), delete this._armatureCache[l687];
                }
                resetArmature(j687) {
                    for (const k687 in this._armatureCache)
                        -1 !== k687.indexOf(j687) && this._removeArmature(k687);
                }
                getArmatureCache(d687, e687, f687) {
                    const g687 = this._armatureCache[e687];
                    let h687;
                    if (g687)
                        h687 = g687.armature;
                    else {
                        const i687 = f220.getInstance().buildArmatureDisplay(d687, e687, "", f687);
                        if (!i687 || !i687._armature)
                            return null;
                        if (h687 = i687._armature, !x220.canCache(h687))
                            return h687.dispose(), null;
                        this._armatureCache[e687] = {
                            armature: h687,
                            animationsCache: {},
                            curAnimationCache: null
                        };
                    }
                    return h687;
                }
                getAnimationCache(a687, b687) {
                    const c687 = this._armatureCache[a687];
                    return c687 ? c687.animationsCache[b687] : null;
                }
                initAnimationCache(t686, u686) {
                    if (!u686)
                        return null;
                    const v686 = this._armatureCache[t686], w686 = v686 && v686.armature;
                    if (!w686)
                        return null;
                    if (!w686.animation.hasAnimation(u686))
                        return null;
                    const x686 = v686.animationsCache;
                    let y686 = x686[u686];
                    if (!y686) {
                        const z686 = `${t686}#${u686}`;
                        y686 = this._animationPool[z686], y686 ? delete this._animationPool[z686] : (y686 = new w220(), y686._privateMode = this._privateMode), y686.init(v686, u686), x686[u686] = y686;
                    }
                    return y686;
                }
                invalidAnimationCache(p686) {
                    const q686 = this._armatureCache[p686];
                    if (!q686 || !q686.armature)
                        return;
                    const r686 = q686.animationsCache;
                    for (const s686 in r686)
                        r686[s686].invalidAllFrame();
                }
                updateAnimationCache(j686, k686) {
                    if (k686) {
                        const o686 = this.initAnimationCache(j686, k686);
                        if (!o686)
                            return;
                        o686.updateAllFrame();
                    }
                    else {
                        const l686 = this._armatureCache[j686];
                        if (!l686 || !l686.armature)
                            return;
                        const m686 = l686.animationsCache;
                        for (const n686 in m686)
                            m686[n686].updateAllFrame();
                    }
                }
                static canCache(f686) {
                    const g686 = f686._slots;
                    for (let h686 = 0, i686 = g686.length; h686 < i686; h686++)
                        if (g686[h686].childArmature)
                            return !1;
                    return !0;
                }
            }
            var y220, z220, a221;
            g220 = x220, x220.FrameTime = h220, x220.sharedCache = new g220();
            const { ccclass: b221, serializable: c221 } = k152;
            let d221 = b221("dragonBones.DragonBonesAsset")((z220 = class extends t163 {
                constructor(...e686) {
                    super(...e686), this._dragonBonesJson = a221 && a221(), this._factory = null, this._dragonBonesJsonData = void 0, this._armaturesEnum = null;
                }
                get dragonBonesJson() {
                    return this._dragonBonesJson;
                }
                set dragonBonesJson(d686) {
                    this._dragonBonesJson = d686, this._dragonBonesJsonData = JSON.parse(d686), this.reset();
                }
                constructctor() {
                    this.reset();
                }
                createNode(b686) {
                    const c686 = new h175(this.name);
                    return c686.addComponent("dragonBones.ArmatureDisplay").dragonAsset = this, b686(null, c686);
                }
                reset() {
                    this._clear();
                }
                init(w685, x685) {
                    this._factory = w685 || f220.getInstance(), !this._dragonBonesJsonData && this.dragonBonesJson && (this._dragonBonesJsonData = JSON.parse(this.dragonBonesJson));
                    let y685 = null;
                    if (y685 = this._dragonBonesJsonData ? this._dragonBonesJsonData : this._nativeAsset, !this._uuid) {
                        const a686 = this._factory.getDragonBonesDataByRawData(y685);
                        a686 ? this._uuid = a686.name : console.warn("dragonbones name is empty");
                    }
                    const z685 = `${this._uuid}#${x685}`;
                    return this._factory.getDragonBonesData(z685) || this._factory.parseDragonBonesData(y685 instanceof ArrayBuffer ? y685 : y685.buffer instanceof ArrayBuffer ? y685.buffer : y685, z685), z685;
                }
                getArmatureEnum() {
                    if (this._armaturesEnum)
                        return this._armaturesEnum;
                    this.init();
                    const s685 = this._factory.getDragonBonesDataByUUID(this._uuid);
                    if (s685) {
                        const t685 = s685.armatureNames, u685 = {};
                        for (let v685 = 0; v685 < t685.length; v685++)
                            u685[t685[v685]] = v685;
                        return this._armaturesEnum = p127(u685);
                    }
                    return null;
                }
                getAnimsEnum(l685) {
                    this.init();
                    const m685 = this._factory.getDragonBonesDataByUUID(this._uuid);
                    if (m685) {
                        const n685 = m685.getArmature(l685);
                        if (!n685)
                            return null;
                        const o685 = {
                            "<None>": 0
                        }, p685 = n685.animations;
                        let q685 = 0;
                        for (const r685 in p685)
                            p685.hasOwnProperty(r685) && (o685[r685] = q685 + 1, q685++);
                        return p127(o685);
                    }
                    return null;
                }
                destroy() {
                    return this._clear(), super.destroy();
                }
                _clear() {
                    this._factory && (x220.sharedCache.resetArmature(this._uuid), this._factory.removeDragonBonesDataByUUID(this._uuid, !0));
                }
            }, a221 = p130(z220.prototype, "_dragonBonesJson", [c221], function () {
                return "";
            }), y220 = z220)) || y220;
            var e221, f221, g221, h221, i221, j221, k221, l221;
            s143.internal.DragonBonesAsset = d221;
            const { ccclass: m221, serializable: n221, type: o221 } = k152;
            let p221 = (e221 = m221("dragonBones.DragonBonesAtlasAsset"), f221 = o221(j166), e221((h221 = class extends t163 {
                constructor() {
                    super(), this._atlasJson = i221 && i221(), this._texture = j221 && j221(), this._atlasJsonData = k221 && k221(), this._factory = null, this._textureAtlasData = l221 && l221(), this._clear();
                }
                get atlasJson() {
                    return this._atlasJson;
                }
                set atlasJson(k685) {
                    this._atlasJson = k685, this._atlasJsonData = JSON.parse(this.atlasJson), this._clear();
                }
                get texture() {
                    return this._texture;
                }
                set texture(j685) {
                    this._texture = j685, this._clear();
                }
                createNode(h685) {
                    const i685 = new h175(this.name);
                    return i685.addComponent("dragonBones.ArmatureDisplay").dragonAtlasAsset = this, h685(null, i685);
                }
                init(f685) {
                    this._factory = f685, this._atlasJsonData || (this._atlasJsonData = JSON.parse(this.atlasJson));
                    const g685 = this._atlasJsonData;
                    this._uuid = this._uuid || g685.name, this._textureAtlasData ? f685.addTextureAtlasData(this._textureAtlasData, this._uuid) : this._textureAtlasData = f685.parseTextureAtlasData(g685, this.texture, this._uuid);
                }
                destroy() {
                    return this._clear(), super.destroy();
                }
                _clear() { }
            }, i221 = p130(h221.prototype, "_atlasJson", [n221], function () {
                return "";
            }), j221 = p130(h221.prototype, "_texture", [n221, f221], function () {
                return null;
            }), k221 = p130(h221.prototype, "_atlasJsonData", [n221], function () {
                return {};
            }), l221 = p130(h221.prototype, "_textureAtlasData", [n221], function () {
                return null;
            }), g221 = h221)) || g221);
            var q221;
            s143.internal.DragonBonesAtlasAsset = p221;
            const r221 = new o147(), { ccclass: s221 } = k152;
            let t221 = s221("dragonBones.AttachUtil")(q221 = class {
                constructor() {
                    this._inited = !1, this._armature = null, this._armatureNode = null, this._armatureDisplay = null;
                }
                init(e685) {
                    this._inited = !0, this._armature = e685._armature, this._armatureNode = e685.node, this._armatureDisplay = e685;
                }
                reset() {
                    this._inited = !1, this._armature = null, this._armatureNode = null, this._armatureDisplay = null;
                }
                _syncAttachedNode() {
                    if (!this._inited)
                        return;
                    this._armatureNode.worldMatrix;
                    let q684 = null;
                    const r684 = this._armatureDisplay.isAnimationCached();
                    if (r684 && this._armatureDisplay && (q684 = this._armatureDisplay._curFrame && this._armatureDisplay._curFrame.boneInfos, !q684))
                        return;
                    const s684 = this._armatureDisplay.sockets, t684 = this._armatureDisplay.socketNodes, u684 = (b685, c685) => {
                        const d685 = r221;
                        d685.m00 = c685.a, d685.m01 = c685.b, d685.m04 = -c685.c, d685.m05 = -c685.d, d685.m12 = c685.tx, d685.m13 = c685.ty, b685.matrix = r221;
                    }, v684 = this._armature.getBones();
                    for (let x684 = s684.length - 1; x684 >= 0; x684--) {
                        const y684 = s684[x684], z684 = y684.target;
                        if (!z684)
                            continue;
                        if (!z684.isValid) {
                            t684.delete(y684.path), s684.splice(x684, 1);
                            continue;
                        }
                        const a685 = r684 ? q684[y684.boneIndex] : v684[y684.boneIndex];
                        a685 && u684(z684, a685.globalTransformMatrix);
                    }
                }
            }) || q221;
            class u221 extends a156 {
                constructor() {
                    super(), this._armatures = new Set();
                }
                static getInstance() {
                    return u221._instance || (u221._instance = new u221(), t185.registerSystem(u221.ID, u221._instance, a156.Priority.HIGH)), u221._instance;
                }
                add(p684) {
                    p684 && (this._armatures.has(p684) || this._armatures.add(p684));
                }
                remove(o684) {
                    o684 && this._armatures.has(o684) && this._armatures.delete(o684);
                }
                postUpdate(l684) {
                    this._armatures && this._armatures.forEach(n684 => {
                        n684.updateAnimation(l684), n684.syncAttachedNode();
                    });
                }
                prepareRenderData() {
                    this._armatures && this._armatures.forEach(k684 => {
                        k684.markForUpdateRenderData();
                    });
                }
            }
            var v221, w221, x221, y221, z221, a222, b222, c222, d222, e222, f222, g222, h222, i222, j222, k222, l222, m222, n222, o222, p222, q222, r222, s222, t222, u222, v222, w222, x222, y222, z222, a223, b223;
            let c223;
            u221.ID = "ARMATURE", u221._instance = void 0, s143.internal.ArmatureSystem = u221, function (i684) {
                i684[i684.default = -1] = "default";
            }(z222 || (z222 = {})), s127(z222), function (h684) {
                h684[h684["<None>"] = 0] = "<None>";
            }(a223 || (a223 = {})), s127(a223), function (g684) {
                g684[g684.REALTIME = 0] = "REALTIME";
            }(b223 || (b223 = {})), s127(a223), function (f684) {
                f684[f684.REALTIME = 0] = "REALTIME", f684[f684.SHARED_CACHE = 1] = "SHARED_CACHE", f684[f684.PRIVATE_CACHE = 2] = "PRIVATE_CACHE";
            }(c223 || (c223 = {})), s127(c223);
            const { ccclass: d223, serializable: e223, editable: f223, type: g223, help: h223, menu: i223, tooltip: j223, visible: k223, displayName: l223, override: m223, displayOrder: n223, executeInEditMode: o223 } = k152;
            let p223 = (v221 = d223("dragonBones.ArmatureDisplay.DragonBoneSocket"), w221 = g223(h175), v221((y221 = class {
                constructor(d684 = "", e684 = null) {
                    this.path = z221 && z221(), this.target = a222 && a222(), this.boneIndex = null, this.path = d684, this.target = e684;
                }
            }, z221 = p130(y221.prototype, "path", [e223], function () {
                return "";
            }), a222 = p130(y221.prototype, "target", [w221, e223], function () {
                return null;
            }), x221 = y221)) || x221);
            a127(p223, "dragonBones.ArmatureDisplay.DragonBoneSocket");
            let q223 = (b222 = d223("dragonBones.ArmatureDisplay"), c222 = g223(d221), d222 = g223(p221), e222 = g223(z222), f222 = g223(a223), g222 = g223([p223]), h222 = g223(c178), b222(((y222 = class t extends h191 {
                get dragonAsset() {
                    return this._dragonAsset;
                }
                set dragonAsset(c684) {
                    this._dragonAsset = c684, this.destroyRenderData(), this._refresh();
                }
                get dragonAtlasAsset() {
                    return this._dragonAtlasAsset;
                }
                set dragonAtlasAsset(b684) {
                    this._dragonAtlasAsset = b684, this._parseDragonAtlasAsset(), this._refresh();
                }
                get armatureName() {
                    return this._armatureName;
                }
                set armatureName(z683) {
                    this._armatureName = z683;
                    const a684 = this.getAnimationNames(this._armatureName);
                    (!this.animationName || a684.indexOf(this.animationName) < 0) && (this.animationName = ""), this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.remove(this._armature), this._refresh(), this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.add(this._armature);
                }
                get animationName() {
                    return this._animationName;
                }
                set animationName(y683) {
                    this._animationName = y683;
                }
                get _defaultArmatureIndex() {
                    return this._defaultArmatureIndexValue;
                }
                set _defaultArmatureIndex(v683) {
                    this._defaultArmatureIndexValue = v683;
                    let w683 = "";
                    if (this.dragonAsset) {
                        let x683;
                        if (this.dragonAsset && (x683 = this.dragonAsset.getArmatureEnum()), !x683)
                            return void z125(7400, this.name);
                        w683 = x683[this._defaultArmatureIndex];
                    }
                    void 0 !== w683 ? this.armatureName = w683 : z125(7401, this.name), this.markForUpdateRenderData();
                }
                get _animationIndex() {
                    return this._animationIndexValue;
                }
                set _animationIndex(s683) {
                    if (this._animationIndexValue = s683, 0 === this._animationIndex)
                        return void (this.animationName = "");
                    let t683;
                    if (this.dragonAsset && (t683 = this.dragonAsset.getAnimsEnum(this.armatureName)), !t683)
                        return;
                    const u683 = t683[this._animationIndex];
                    void 0 !== u683 ? this.playAnimation(u683, this.playTimes) : z125(7402, this.name);
                }
                get _defaultCacheMode() {
                    return this._defaultCacheModeValue;
                }
                set _defaultCacheMode(r683) {
                    if (this._defaultCacheModeValue = r683, this._defaultCacheMode !== c223.REALTIME && this._armature && !x220.canCache(this._armature))
                        return this._defaultCacheMode = c223.REALTIME, void console.warn("Animation cache mode doesn't support skeletal nesting");
                    this.setAnimationCacheMode(this._defaultCacheMode);
                }
                get timeScale() {
                    return this._timeScale;
                }
                set timeScale(q683) {
                    this._timeScale = q683, this._armature && !this.isAnimationCached() && (this._armature.animation.timeScale = this.timeScale);
                }
                get debugBones() {
                    return this._debugBones;
                }
                set debugBones(p683) {
                    this._debugBones = p683, this._updateDebugDraw();
                }
                get enableBatch() {
                    return this._enableBatch;
                }
                set enableBatch(o683) {
                    o683 !== this._enableBatch && (this._enableBatch = o683, this._updateBatch());
                }
                get sockets() {
                    return this._sockets;
                }
                set sockets(n683) {
                    this._verifySockets(n683), this._sockets = n683, this._updateSocketBindings(), n683.length > 0 && this._frameCache && this._frameCache.enableCacheAttachedInfo();
                }
                get socketNodes() {
                    return this._socketNodes;
                }
                get drawList() {
                    return this._drawList;
                }
                requestDrawInfo(m683) {
                    return this._drawInfoList[m683] || (this._drawInfoList[m683] = new j189()), this._drawInfoList[m683];
                }
                constructor() {
                    super(), this.playTimes = k222 && k222(), this.premultipliedAlpha = l222 && l222(), this._armature = null, this.attachUtil = void 0, this._defaultArmatureIndexValue = m222 && m222(), this._dragonAsset = n222 && n222(), this._dragonAtlasAsset = o222 && o222(), this._armatureName = p222 && p222(), this._animationName = q222 && q222(), this._animationIndexValue = r222 && r222(), this._preCacheMode = -1, this._cacheMode = c223.REALTIME, this._defaultCacheModeValue = s222 && s222(), this._timeScale = t222 && t222(), this._playTimes = u222 && u222(), this._debugBones = v222 && v222(), this._enableBatch = w222 && w222(), this._debugDraw = null, this._armatureKey = "", this._accTime = 0, this._playCount = 0, this._frameCache = null, this._curFrame = null, this._playing = !1, this._armatureCache = null, this._eventTarget = void 0, this._factory = null, this._displayProxy = null, this._drawIdx = 0, this._drawList = new y155(() => ({
                        material: null,
                        texture: null,
                        indexOffset: 0,
                        indexCount: 0
                    }), 1), this.maxVertexCount = 0, this.maxIndexCount = 0, this._materialCache = {}, this._enumArmatures = p127({}), this._enumAnimations = p127({}), this._socketNodes = new Map(), this._cachedSockets = new Map(), this._sockets = x222 && x222(), this._inited = void 0, this._drawInfoList = [], this._cacheModeEnum = void 0, this._eventTarget = new o156(), this._inited = !1, this.attachUtil = new t221(), this.initFactory(), n128(this, "_animationIndex", this._enumAnimations), n128(this, "_defaultArmatureIndex", this._enumArmatures), this._useVertexOpacity = !0;
                }
                initFactory() {
                    this._factory = f220.getInstance();
                }
                onLoad() {
                    super.onLoad();
                }
                _requestDrawData(g683, h683, i683, j683) {
                    const k683 = this._drawList.add();
                    return k683.material = g683, k683.texture = h683, k683.indexOffset = i683, k683.indexCount = j683, k683;
                }
                destroyRenderData() {
                    this._drawList.reset(), super.destroyRenderData();
                }
                getMaterialTemplate() {
                    return null !== this.customMaterial ? this.customMaterial : (this.material || this.updateMaterial(), this.material);
                }
                getMaterialForBlend(b683, c683) {
                    const d683 = `${b683}/${c683}`;
                    let e683 = this._materialCache[d683];
                    if (e683)
                        return e683;
                    const f683 = this.getMaterialTemplate();
                    return e683 = new e190({
                        parent: f683,
                        subModelIdx: 0,
                        owner: this
                    }), e683.recompileShaders({
                        TWO_COLORED: !1,
                        USE_LOCAL: !1
                    }), this._materialCache[d683] = e683, e683.overridePipelineStates({
                        blendState: {
                            targets: [{
                                    blendSrc: b683,
                                    blendDst: c683
                                }]
                        }
                    }), e683;
                }
                _updateBuiltinMaterial() {
                    return r185.get("default-spine-material");
                }
                get customMaterial() {
                    return this._customMaterial;
                }
                set customMaterial(a683) {
                    this._customMaterial = a683, this.updateMaterial(), this.markForUpdateRenderData();
                }
                updateMaterial() {
                    let z682;
                    z682 = this._customMaterial ? this._customMaterial : this._updateBuiltinMaterial(), this.setSharedMaterial(z682, 0), this._cleanMaterialCache();
                }
                _render(p682) {
                    let q682 = 0;
                    if (this.renderData && this._drawList) {
                        const r682 = this.renderData, s682 = r682.chunk, t682 = s682.vertexAccessor, u682 = r682.getMeshBuffer(), v682 = u682.indexOffset;
                        for (let x682 = 0; x682 < this._drawList.length; x682++) {
                            this._drawIdx = x682;
                            const y682 = this._drawList.data[x682];
                            y682.texture && p682.commitMiddleware(this, u682, v682 + y682.indexOffset, y682.indexCount, y682.texture, y682.material, this._enableBatch), q682 += y682.indexCount;
                        }
                        const w682 = r682.indices.subarray(0, q682);
                        t682.appendIndices(s682.bufferId, w682);
                    }
                }
                __preload() {
                    super.__preload(), this._init();
                }
                _init() {
                    if (this._cacheMode = this._defaultCacheMode, this._inited)
                        return;
                    this._inited = !0, this._parseDragonAtlasAsset(), this._refresh();
                    const l682 = this.node.children;
                    for (let m682 = 0, n682 = l682.length; m682 < n682; m682++) {
                        const o682 = l682[m682];
                        o682 && "DEBUG_DRAW_NODE" === o682.name && o682.destroy();
                    }
                    this._updateDebugDraw(), this._indexBoneSockets(), this._updateSocketBindings();
                }
                getArmatureKey() {
                    return this._armatureKey;
                }
                setAnimationCacheMode(k682) {
                    this._preCacheMode !== k682 && (this._cacheMode = k682, this._buildArmature(), this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.add(this._armature), this._updateSocketBindings(), this.markForUpdateRenderData());
                }
                isAnimationCached() {
                    return this._cacheMode !== c223.REALTIME;
                }
                onEnable() {
                    super.onEnable(), this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.add(this._armature), this._flushAssembler(), u221.getInstance().add(this);
                }
                onDisable() {
                    super.onDisable(), this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.remove(this._armature), u221.getInstance().remove(this);
                }
                _emitCacheCompleteEvent() {
                    this._eventTarget.emit(n219.LOOP_COMPLETE), this._eventTarget.emit(n219.COMPLETE);
                }
                updateAnimation(f682) {
                    if (this.markForUpdateRenderData(), !this.isAnimationCached())
                        return;
                    if (!this._frameCache)
                        return;
                    const g682 = this._frameCache;
                    if (!g682.isInited())
                        return;
                    const h682 = g682.frames;
                    if (!this._playing)
                        return void (g682.isInvalid() && (g682.updateToFrame(), this._curFrame = h682[h682.length - 1], this.renderData && (this.renderData.vertexCount < g682.maxVertexCount || this.renderData.indexCount < g682.maxIndexCount) && (this.maxVertexCount = g682.maxVertexCount > this.maxVertexCount ? g682.maxVertexCount : this.maxVertexCount, this.maxIndexCount = g682.maxIndexCount > this.maxIndexCount ? g682.maxIndexCount : this.maxIndexCount, this.renderData.resize(this.maxVertexCount, this.maxIndexCount), (!this.renderData.indices || this.maxIndexCount > this.renderData.indices.length) && (this.renderData.indices = new Uint16Array(this.maxIndexCount)))));
                    const i682 = x220.FrameTime;
                    0 === this._accTime && 0 === this._playCount && this._eventTarget.emit(n219.START), this._accTime += f682 * this.timeScale * 1;
                    let j682 = Math.floor(this._accTime / i682);
                    if (g682.isCompleted || (g682.updateToFrame(j682), this.renderData && (this.renderData.vertexCount < g682.maxVertexCount || this.renderData.indexCount < g682.maxIndexCount) && (this.maxVertexCount = g682.maxVertexCount > this.maxVertexCount ? g682.maxVertexCount : this.maxVertexCount, this.maxIndexCount = g682.maxIndexCount > this.maxIndexCount ? g682.maxIndexCount : this.maxIndexCount, this.renderData.resize(this.maxVertexCount, this.maxIndexCount), (!this.renderData.indices || this.maxIndexCount > this.renderData.indices.length) && (this.renderData.indices = new Uint16Array(this.maxIndexCount)))), g682.isCompleted && j682 >= h682.length) {
                        if (this._playCount++, this.playTimes > 0 && this._playCount >= this.playTimes)
                            return this._curFrame = h682[h682.length - 1], this._accTime = 0, this._playing = !1, this._playCount = 0, this._emitCacheCompleteEvent(), void this.attachUtil._syncAttachedNode();
                        this._accTime = 0, j682 = 0, this._emitCacheCompleteEvent();
                    }
                    this._curFrame = h682[j682], this.attachUtil._syncAttachedNode();
                }
                onDestroy() {
                    this._materialInstances = this._materialInstances.filter(e682 => !!e682), this._inited = !1, this._cacheMode === c223.PRIVATE_CACHE ? (this._armatureCache.dispose(), this._armatureCache = null, this._armature = null) : this._cacheMode === c223.SHARED_CACHE ? (this._armatureCache = null, this._armature = null) : this._armature && (this._armature.dispose(), this._armature = null), this._drawList.destroy(), super.onDestroy();
                }
                _updateDebugDraw() {
                    if (this.debugBones) {
                        if (!this._debugDraw) {
                            const b682 = new h175("DEBUG_DRAW_NODE");
                            b682.hideFlags |= m152.Flags.DontSave | m152.Flags.HideInHierarchy;
                            const c682 = b682.addComponent(x195);
                            c682.lineWidth = 1, c682.strokeColor = new a147(255, 0, 0, 255), this._debugDraw = c682;
                        }
                        this._debugDraw.node.parent = this.node;
                    }
                    else
                        this._debugDraw && (this._debugDraw.node.parent = null);
                    this.markForUpdateRenderData();
                }
                _updateBatch() {
                    this._cleanMaterialCache(), this.markForUpdateRenderData();
                }
                _buildArmature() {
                    if (!this.dragonAsset || !this.dragonAtlasAsset || !this.armatureName)
                        return;
                    this._armature && (this._preCacheMode === c223.PRIVATE_CACHE ? this._armatureCache.dispose() : this._preCacheMode === c223.REALTIME && this._armature.dispose(), this._armatureCache = null, this._armature = null, this._displayProxy = null, this._frameCache = null, this._curFrame = null, this._playing = !1, this._preCacheMode = -1), this._cacheMode === c223.SHARED_CACHE ? this._armatureCache = x220.sharedCache : this._cacheMode === c223.PRIVATE_CACHE && (this._armatureCache = new x220(), this._armatureCache.enablePrivateMode());
                    const z681 = this.dragonAtlasAsset._uuid;
                    if (this._armatureKey = this.dragonAsset.init(this._factory, z681), this.isAnimationCached() && (this._armature = this._armatureCache.getArmatureCache(this.armatureName, this._armatureKey, z681), this._armature || (this._cacheMode = c223.REALTIME)), this._preCacheMode = this._cacheMode, this._cacheMode === c223.REALTIME) {
                        if (this._displayProxy = this._factory.buildArmatureDisplay(this.armatureName, this._armatureKey, "", z681), !this._displayProxy)
                            return;
                        this._displayProxy._ccNode = this.node, this._displayProxy._ccComponent = this, this._displayProxy.setEventTarget(this._eventTarget), this._armature = this._displayProxy._armature, this._armature.animation.timeScale = this.timeScale;
                    }
                    if (this._cacheMode !== c223.REALTIME && this.debugBones && console.warn("Debug bones is invalid in cached mode"), this._armature) {
                        const a682 = this._armature.armatureData.aabb;
                        this.node._uiProps.uiTransformComp.setContentSize(a682.width, a682.height);
                    }
                    this.attachUtil.init(this), this.animationName && this.playAnimation(this.animationName, this.playTimes), this._flushAssembler();
                }
                querySockets() {
                    return this._armature ? (0 === this._cachedSockets.size && this._indexBoneSockets(), Array.from(this._cachedSockets.keys()).sort()) : [];
                }
                querySocketPathByName(w681) {
                    const x681 = [];
                    for (const y681 of this._cachedSockets.keys())
                        y681.endsWith(w681) && x681.push(y681);
                    return x681;
                }
                _parseDragonAtlasAsset() {
                    this.dragonAtlasAsset && this.dragonAtlasAsset.init(this._factory);
                }
                _refresh() {
                    this._buildArmature(), this._indexBoneSockets(), this.markForUpdateRenderData();
                }
                _updateCacheModeEnum() {
                    this._cacheModeEnum = p127({}), this._armature ? Object.assign(this._cacheModeEnum, c223) : Object.assign(this._cacheModeEnum, b223), n128(this, "_defaultCacheMode", this._cacheModeEnum);
                }
                _updateAnimEnum() {
                    let v681;
                    v681 = this.dragonAsset ? this.dragonAsset.getAnimsEnum(this.armatureName) : a223, this._enumAnimations = p127({}), Object.assign(this._enumAnimations, v681 || a223), p127.update(this._enumAnimations), n128(this, "_animationIndex", this._enumAnimations);
                }
                _updateArmatureEnum() {
                    let u681;
                    u681 = this.dragonAsset ? this.dragonAsset.getArmatureEnum() : z222, this._enumArmatures = p127({}), Object.assign(this._enumArmatures, u681 || z222), p127.update(this._enumArmatures), n128(this, "_defaultArmatureIndex", this._enumArmatures);
                }
                _indexBoneSockets() {
                    if (!this._armature)
                        return;
                    this._cachedSockets.clear();
                    const b681 = this._cachedSockets, c681 = (p681, q681, r681) => {
                        if (r681.has(p681))
                            return r681.get(p681);
                        const s681 = q681[p681];
                        if (!s681.parent)
                            return r681.set(p681, s681.name), s681.path = s681.name, s681.name;
                        const t681 = `${c681(s681.parent._boneIndex, q681, r681)}/${s681.name}`;
                        return r681.set(p681, t681), s681.path = t681, t681;
                    }, d681 = (g681, h681) => {
                        const i681 = h681.getBones(), j681 = new Map();
                        for (let o681 = 0; o681 < i681.length; o681++)
                            i681[o681]._boneIndex = o681;
                        for (let n681 = 0; n681 < i681.length; n681++)
                            c681(n681, i681, j681);
                        for (const m681 of j681.keys())
                            b681.set(`${g681}${j681.get(m681)}`, m681);
                        const k681 = h681.getSlots();
                        for (let l681 = 0; l681 < k681.length; l681++)
                            k681[l681].childArmature && d681(k681[l681].name, k681[l681].childArmature);
                    };
                    d681("", this._armature);
                }
                playAnimation(y680, z680) {
                    if (this.playTimes = void 0 === z680 ? -1 : z680, this.animationName = y680, this.isAnimationCached()) {
                        let a681 = this._armatureCache.getAnimationCache(this._armatureKey, y680);
                        a681 || (a681 = this._armatureCache.initAnimationCache(this._armatureKey, y680)), a681 && (this._accTime = 0, this._playCount = 0, this._frameCache = a681, this._sockets.length > 0 && this._frameCache.enableCacheAttachedInfo(), this._frameCache.updateToFrame(0), this._playing = !0, this._curFrame = this._frameCache.frames[0]);
                    }
                    else if (this._armature)
                        return this._armature.animation.play(y680, this.playTimes);
                    return this.markForUpdateRenderData(), null;
                }
                updateAnimationCache(x680) {
                    this.isAnimationCached() && this._armatureCache.updateAnimationCache(this._armatureKey, x680);
                }
                invalidAnimationCache() {
                    this.isAnimationCached() && this._armatureCache.invalidAnimationCache(this._armatureKey);
                }
                getArmatureNames() {
                    const w680 = this._factory.getDragonBonesData(this._armatureKey);
                    return w680 && w680.armatureNames || [];
                }
                getAnimationNames(r680) {
                    const s680 = [], t680 = this._factory.getDragonBonesData(this._armatureKey);
                    if (t680) {
                        const u680 = t680.getArmature(r680);
                        if (u680)
                            for (const v680 in u680.animations)
                                u680.animations.hasOwnProperty(v680) && s680.push(v680);
                    }
                    return s680;
                }
                on(o680, p680, q680) {
                    this.addEventListener(o680, p680, q680);
                }
                off(l680, m680, n680) {
                    this.removeEventListener(l680, m680, n680);
                }
                once(i680, j680, k680) {
                    this._eventTarget.once(i680, j680, k680);
                }
                addEventListener(f680, g680, h680) {
                    this._eventTarget.on(f680, g680, h680);
                }
                removeEventListener(c680, d680, e680) {
                    this._eventTarget.off(c680, d680, e680);
                }
                buildArmature(a680, b680) {
                    return this._factory.createArmatureNode(this, a680, b680);
                }
                armature() {
                    return this._armature;
                }
                _flushAssembler() {
                    const z679 = t.Assembler.getAssembler(this);
                    this._assembler !== z679 && (this._assembler = z679), this._armature && this._assembler && (this._renderData = this._assembler.createData(this), this._renderData && (this.maxVertexCount = this._renderData.vertexCount, this.maxIndexCount = this._renderData.indexCount), this.markForUpdateRenderData(), this._updateColor());
                }
                _updateSocketBindings() {
                    if (this._armature) {
                        this._socketNodes.clear();
                        for (let v679 = 0, w679 = this._sockets.length; v679 < w679; v679++) {
                            const x679 = this._sockets[v679];
                            if (x679.path && x679.target) {
                                const y679 = this._cachedSockets.get(x679.path);
                                if (!y679) {
                                    console.error(`Skeleton data does not contain path ${x679.path}`);
                                    continue;
                                }
                                x679.boneIndex = y679, this._socketNodes.set(x679.path, x679.target);
                            }
                        }
                    }
                }
                _verifySockets(r679) {
                    for (let s679 = 0, t679 = r679.length; s679 < t679; s679++) {
                        const u679 = r679[s679].target;
                        !u679 || u679.parent && u679.parent === this.node || console.error(`Target node ${u679.name} is expected to be a direct child of ${this.node.name}`);
                    }
                }
                _cleanMaterialCache() {
                    for (const q679 in this._materialCache)
                        this._materialCache[q679].destroy();
                    this._materialCache = {};
                }
                createRenderEntity() {
                    const p679 = new l189(e189.DYNAMIC);
                    return p679.setUseLocal(!1), p679;
                }
                markForUpdateRenderData(o679 = !0) {
                    super.markForUpdateRenderData(o679), this._debugDraw && this._debugDraw.markForUpdateRenderData(o679);
                }
                syncAttachedNode() {
                    this.attachUtil._syncAttachedNode();
                }
            }).AnimationCacheMode = c223, i125((j222 = y222).prototype, "dragonAsset", [c222], Object.getOwnPropertyDescriptor(j222.prototype, "dragonAsset"), j222.prototype), i125(j222.prototype, "dragonAtlasAsset", [d222], Object.getOwnPropertyDescriptor(j222.prototype, "dragonAtlasAsset"), j222.prototype), i125(j222.prototype, "_defaultArmatureIndex", [e222], Object.getOwnPropertyDescriptor(j222.prototype, "_defaultArmatureIndex"), j222.prototype), i125(j222.prototype, "_animationIndex", [f222], Object.getOwnPropertyDescriptor(j222.prototype, "_animationIndex"), j222.prototype), i125(j222.prototype, "timeScale", [e223], Object.getOwnPropertyDescriptor(j222.prototype, "timeScale"), j222.prototype), k222 = p130(j222.prototype, "playTimes", [e223], function () {
                return -1;
            }), l222 = p130(j222.prototype, "premultipliedAlpha", [e223], function () {
                return !1;
            }), i125(j222.prototype, "sockets", [g222], Object.getOwnPropertyDescriptor(j222.prototype, "sockets"), j222.prototype), m222 = p130(j222.prototype, "_defaultArmatureIndexValue", [e223], function () {
                return z222.default;
            }), n222 = p130(j222.prototype, "_dragonAsset", [e223], function () {
                return null;
            }), o222 = p130(j222.prototype, "_dragonAtlasAsset", [e223], function () {
                return null;
            }), p222 = p130(j222.prototype, "_armatureName", [e223], function () {
                return "";
            }), q222 = p130(j222.prototype, "_animationName", [e223], function () {
                return "";
            }), r222 = p130(j222.prototype, "_animationIndexValue", [e223], function () {
                return 0;
            }), s222 = p130(j222.prototype, "_defaultCacheModeValue", [e223], function () {
                return c223.REALTIME;
            }), t222 = p130(j222.prototype, "_timeScale", [e223], function () {
                return 1;
            }), u222 = p130(j222.prototype, "_playTimes", [e223], function () {
                return -1;
            }), v222 = p130(j222.prototype, "_debugBones", [e223], function () {
                return !1;
            }), w222 = p130(j222.prototype, "_enableBatch", [e223], function () {
                return !1;
            }), x222 = p130(j222.prototype, "_sockets", [e223], function () {
                return [];
            }), i125(j222.prototype, "customMaterial", [m223, h222], Object.getOwnPropertyDescriptor(j222.prototype, "customMaterial"), j222.prototype), i222 = j222)) || i222);
            s143.internal.ArmatureDisplay = q223;
            const r223 = new a147(255, 0, 0, 255), s223 = new a147(0, 0, 255, 255), t223 = new a147(0, 255, 0, 255);
            let u223, v223, w223, x223, y223, z223, a224, b224, c224, d224, e224 = 0, f224 = 0, g224 = 0, h224 = 0, i224 = 0, j224 = 0, k224 = 0, l224 = 0, m224 = 0;
            const n224 = new Float32Array(4);
            let o224;
            const p224 = new w146(0, 0, 0), q224 = new o147();
            let r224 = null, s224 = null;
            function l141(k679, l679) {
                if (!k679)
                    return null;
                let m679, n679;
                switch (l679) {
                    case 1:
                        m679 = y223 ? k158.ONE : k158.SRC_ALPHA, n679 = k158.ONE;
                        break;
                    case 10:
                        m679 = k158.DST_COLOR, n679 = k158.ONE_MINUS_SRC_ALPHA;
                        break;
                    case 12:
                        m679 = k158.ONE, n679 = k158.ONE_MINUS_SRC_COLOR;
                        break;
                    case 0:
                    default:
                        m679 = y223 ? k158.ONE : k158.SRC_ALPHA, n679 = k158.ONE_MINUS_SRC_ALPHA;
                }
                return d224.getMaterialForBlend(m679, n679);
            }
            function m141(d679, e679) {
                const f679 = d679.a * e679 * x223, g679 = y223 ? f679 / 255 : 1, h679 = d679.r * u223 * g679 / 255, i679 = d679.g * v223 * g679 / 255, j679 = d679.b * w223 * g679 / 255;
                n224[0] = h679, n224[1] = i679, n224[2] = j679, n224[3] = y223 ? 1 : f679 / 255;
            }
            let t224 = null;
            const u224 = {
                accessor: t224,
                vCount: 32767,
                ensureAccessor() {
                    if (!t224) {
                        const a679 = t185.root.device, b679 = t185.root.batcher2D, c679 = l188;
                        this.accessor = t224 = new x188(a679, c679, this.vCount), b679.registerBufferAccessor(Number.parseInt("DRAGONBONES", 36), t224);
                    }
                    return this.accessor;
                },
                createData(s678) {
                    let t678 = s678.renderData;
                    if (!t678) {
                        this.ensureAccessor();
                        const u678 = s678._armature._slots;
                        let v678 = 0, w678 = 0;
                        for (let x678 = 0; x678 < u678.length; ++x678) {
                            const y678 = u678[x678], z678 = y678._localVertices.length % 4;
                            v678 += 0 === z678 ? y678._localVertices.length / 4 : (y678._localVertices.length - z678) / 4 + 1, w678 += y678._indices.length;
                        }
                        t678 = o189.add(l188, this.accessor), t678.resize(v678, w678), t678.indices && w678 === t678.indices.length || (t678.indices = new Uint16Array(w678));
                    }
                    return t678;
                },
                updateRenderData(v676, w676) {
                    d224 = v676, v676._armature && function (y676) {
                        const z676 = y676._armature;
                        if (!z676 || null === y676.renderData)
                            return;
                        z223 = !0, y223 = y676.premultipliedAlpha, y676.drawList.reset(), d224 = y676, y676.node, a224 = y676.renderData, d224 = y676, o224 = 0, r224 = null;
                        const a677 = y676.color;
                        u223 = a677.r / 255, v223 = a677.g / 255, w223 = a677.b / 255, x223 = y676.node._uiProps.opacity, 4294967295 !== a677._val && (o224 |= 1);
                        const b677 = y676.node.getWorldMatrix();
                        if (e224 = 0, g224 = 0, h224 = 0, i224 = 0, j224 = 0, m224 = 0, k224 = d224.maxVertexCount, l224 = d224.maxIndexCount, y676.isAnimationCached())
                            !function (n677, o677) {
                                if (!n677)
                                    return;
                                const p677 = n677.segments;
                                if (0 === p677.length)
                                    return;
                                let q677 = null;
                                const r677 = n677.vertices, s677 = n677.indices;
                                let t677 = 0, u677 = 0, v677 = 0, w677 = 0, x677 = 0;
                                const y677 = n677.colors;
                                let z677 = y677[x677++], a678 = z677.vfOffset;
                                m141(z677, 1);
                                const b678 = a224, c678 = b678.chunk.vb, d678 = b678.indices;
                                for (let f678 = 0, g678 = p677.length; f678 < g678; f678++) {
                                    const h678 = p677[f678];
                                    if (q677 = l141(h678.tex, h678.blendMode), !q677)
                                        continue;
                                    if (r224 || (r224 = q677), z223 || q677.hash !== r224.hash || h678.tex && h678.tex !== s224) {
                                        z223 = !1;
                                        const r678 = j224 - m224;
                                        r678 > 0 && (d224._requestDrawData(r224, s224, m224, r678), m224 = j224), r224 = q677, s224 = h678.tex;
                                    }
                                    f224 = h678.vertexCount, i224 = h678.indexCount, t677 = b678.chunk.vertexOffset;
                                    for (let p678 = j224, q678 = j224 + i224; p678 < q678; p678++)
                                        d678[p678] = t677 + g224 + s677[v677++];
                                    w677 = h678.vfCount;
                                    const i678 = r677.subarray(u677, w677);
                                    c678.set(i678, u677);
                                    let j678 = 0;
                                    if (o677)
                                        for (let n678 = 0, o678 = f224; n678 < o678; n678++)
                                            p224.x = c678[j678], p224.y = c678[j678 + 1], p224.z = 0, p224.transformMat4(o677), c678[j678] = p224.x, c678[j678 + 1] = p224.y, c678[j678 + 2] = p224.z, j678 += 9;
                                    if (1 & o224) {
                                        let k678 = u677 / 9 * 5;
                                        for (let l678 = u677, m678 = u677 + w677; l678 < m678; l678 += 9, k678 += 5)
                                            k678 >= a678 && (z677 = y677[x677++], m141(z677, 1), a678 = z677.vfOffset), c678.set(n224, l678 + 5);
                                    }
                                    u677 += w677, g224 += f224, j224 += i224, f224 = 0, i224 = 0;
                                }
                                const e678 = j224 - m224;
                                s224 && e678 > 0 && d224._requestDrawData(r224, s224, m224, e678);
                            }(y676._curFrame, b677);
                        else {
                            n141(z676, 1, b677);
                            const d677 = y676._debugDraw;
                            if (y676.debugBones && d677) {
                                d677.clear(), d677.lineWidth = 5, d677.strokeColor = r223, d677.fillColor = s223;
                                const e677 = z676.getBones();
                                for (let f677 = 0, g677 = e677.length; f677 < g677; f677++) {
                                    const h677 = e677[f677], i677 = Math.max(h677.boneData.length, 5), j677 = h677.globalTransformMatrix.tx, k677 = h677.globalTransformMatrix.ty, l677 = j677 + h677.globalTransformMatrix.a * i677, m677 = k677 + h677.globalTransformMatrix.b * i677;
                                    d677.moveTo(j677, k677), d677.lineTo(l677, m677), d677.stroke(), d677.circle(j677, k677, 2 * Math.PI), d677.fill(), 0 === f677 && (d677.fillColor = t223);
                                }
                            }
                        }
                        t224.getMeshBuffer(a224.chunk.bufferId).setDirty(), d224 = void 0;
                    }(v676);
                },
                updateColor(u676) {
                    u676 && (d224 = u676, d224.markForUpdateRenderData());
                }
            };
            function n141(t675, u675, v675) {
                const w675 = a224;
                c224 = w675.chunk.vb, b224 = w675.indices;
                const x675 = t675._slots;
                let y675, z675, a676, b676, c676, d676 = 0;
                for (let e676 = 0, f676 = x675.length; e676 < f676; e676++) {
                    if (c676 = x675[e676], b676 = c676._color, !c676._visible || !c676._displayData)
                        continue;
                    if (v675 ? o147.multiply(c676._worldMatrix, v675, c676._matrix) : o147.copy(c676._worldMatrix, c676._matrix), c676.childArmature) {
                        n141(c676.childArmature, b676.a / 255, c676._worldMatrix);
                        continue;
                    }
                    if (y675 = l141(c676.getTexture(), c676._blendMode), !y675)
                        continue;
                    r224 || (r224 = y675);
                    const g676 = c676.getTexture();
                    if (z223 || y675.hash !== r224.hash || g676 && s224 !== g676) {
                        z223 = !1;
                        const t676 = j224 - m224;
                        t676 > 0 && (d224._requestDrawData(r224, s224, m224, t676), m224 = j224), s224 = g676, r224 = y675;
                    }
                    m141(b676, u675), q224.set(c676._worldMatrix), z675 = c676._localVertices, f224 = z675.length / 4, e224 = 9 * f224, a676 = c676._indices, i224 = a676.length;
                    let h676 = !1;
                    if (g224 + f224 > k224 && (k224 = g224 + f224, h676 = !0), j224 + i224 > l224 && (l224 = j224 + i224, h676 = !0), h676) {
                        const p676 = b224, q676 = w675.chunk.vertexOffset;
                        w675.resizeAndCopy(k224, l224 > w675.indexCount ? l224 : w675.indexCount), c224 = w675.chunk.vb, l224 > b224.length && (b224 = w675.indices = new Uint16Array(l224));
                        const r676 = w675.chunk.vertexOffset - q676;
                        for (let s676 = 0; s676 < j224; ++s676)
                            b224[s676] = p676[s676] + r676;
                    }
                    for (let m676 = 0, n676 = z675.length, o676 = h224; m676 < n676; o676 += 9)
                        p224.x = z675[m676++], p224.y = z675[m676++], p224.z = 0, p224.transformMat4(q224), c224[o676] = p224.x, c224[o676 + 1] = p224.y, c224[o676 + 2] = p224.z, c224[o676 + 3] = z675[m676++], c224[o676 + 4] = z675[m676++], c224.set(n224, o676 + 5);
                    const i676 = w675.chunk.vertexOffset;
                    for (let j676 = 0, k676 = a676.length, l676 = j224; j676 < k676; j676++, l676++)
                        b224[l676] = g224 + a676[j676] + i676;
                    h224 += e224, g224 += f224, j224 += i224, f224 = 0, i224 = 0;
                }
                d676 = j224 - m224, s224 && d676 > 0 && (d224._requestDrawData(r224, s224, m224, d676), m224 = j224), d224.maxIndexCount < l224 && (d224.maxIndexCount = l224), d224.maxVertexCount < k224 && (d224.maxVertexCount = k224);
            }
            s143.internal.DragonBonesAssembler = u224;
            const v224 = {
                getAssembler: () => u224
            };
            let w224, x224, y224;
            q223.Assembler = v224, function (s675) {
                s675[s675.FFD = 0] = "FFD", s675[s675.AdjustColor = 10] = "AdjustColor", s675[s675.BevelFilter = 11] = "BevelFilter", s675[s675.BlurFilter = 12] = "BlurFilter", s675[s675.DropShadowFilter = 13] = "DropShadowFilter", s675[s675.GlowFilter = 14] = "GlowFilter", s675[s675.GradientBevelFilter = 15] = "GradientBevelFilter", s675[s675.GradientGlowFilter = 16] = "GradientGlowFilter";
            }(w224 || (w224 = {})), function (r675) {
                r675[r675.Frame = 0] = "Frame", r675[r675.Sound = 1] = "Sound";
            }(x224 || (x224 = {})), function (q675) {
                q675[q675.None = 0] = "None", q675[q675.SameLayer = 1] = "SameLayer", q675[q675.SameGroup = 2] = "SameGroup", q675[q675.SameLayerAndGroup = 3] = "SameLayerAndGroup", q675[q675.All = 4] = "All";
            }(y224 || (y224 = {}));
            const z224 = globalThis.dragonBones, a225 = z224.Slot, b225 = z224.Matrix, c225 = z224.BaseObject, d225 = z224.BoundingBoxData, e225 = z224.PolygonBoundingBoxData, f225 = z224.Transform, g225 = z224.Animation, h225 = z224.TextureData, i225 = z224.CCTextureData, j225 = z224.BaseFactory, k225 = z224.CCFactory, l225 = z224.WorldClock, m225 = z224.TextureAtlasData, n225 = z224.CCArmatureDisplay, o225 = z224.AnimationState, p225 = z224.BoneData, q225 = z224.EllipseBoundingBoxData, r225 = z224.ArmatureData, s225 = z224.CCTextureAtlasData, t225 = z224.TransformObject, u225 = z224.CCSlot, v225 = z224.Armature, w225 = z224.Bone, x225 = z224.RectangleBoundingBoxData, y225 = z224.ArmatureCacheMgr, z225 = z224.SkinData, a226 = z224.EventObject, b226 = z224.SlotData, c226 = z224.DragonBonesData, d226 = z224.AnimationData, e226 = z224.CCArmatureCacheDisplay;
            function o141(h675, i675, j675, k675) {
                const l675 = (k675.x - j675.x) * (h675.y - j675.y) - (k675.y - j675.y) * (h675.x - j675.x), m675 = (i675.x - h675.x) * (h675.y - j675.y) - (i675.y - h675.y) * (h675.x - j675.x), n675 = (k675.y - j675.y) * (i675.x - h675.x) - (k675.x - j675.x) * (i675.y - h675.y);
                if (0 !== n675) {
                    const o675 = l675 / n675, p675 = m675 / n675;
                    if (o675 >= 0 && o675 <= 1 && p675 >= 0 && p675 <= 1)
                        return !0;
                }
                return !1;
            }
            g125("dragonBones", Object.freeze({
                __proto__: null,
                DragonBonesAsset: d221,
                DragonBonesAtlasAsset: p221,
                timeScale: 1,
                get AnimationCacheMode() {
                    return c223;
                },
                DragonBoneSocket: p223,
                ArmatureDisplay: q223,
                AttachUtil: t221,
                simpleDragonBoneAssembler: v224,
                get ExtensionType() {
                    return w224;
                },
                get EventType() {
                    return x224;
                },
                get AnimationFadeOutMode() {
                    return y224;
                },
                Slot: a225,
                Matrix: b225,
                BaseObject: c225,
                BoundingBoxData: d225,
                PolygonBoundingBoxData: e225,
                Transform: f225,
                Animation: g225,
                TextureData: h225,
                CCTextureData: i225,
                BaseFactory: j225,
                CCFactory: k225,
                WorldClock: l225,
                TextureAtlasData: m225,
                CCArmatureDisplay: n225,
                AnimationState: o225,
                BoneData: p225,
                EllipseBoundingBoxData: q225,
                ArmatureData: r225,
                CCTextureAtlasData: s225,
                TransformObject: t225,
                CCSlot: u225,
                Armature: v225,
                Bone: w225,
                RectangleBoundingBoxData: x225,
                ArmatureCacheMgr: y225,
                SkinData: z225,
                EventObject: a226,
                SlotData: b226,
                DragonBonesData: c226,
                AnimationData: d226,
                CCArmatureCacheDisplay: e226
            }));
            const f226 = new s147(), g226 = new s147(), h226 = new s147(), i226 = new s147();
            function p141(c675, d675, e675) {
                const f675 = e675.length;
                for (let g675 = 0; g675 < f675; ++g675)
                    if (o141(c675, d675, e675[g675], e675[(g675 + 1) % f675]))
                        return !0;
                return !1;
            }
            function q141(q674, r674) {
                let s674 = !1;
                const t674 = q674.x, u674 = q674.y, v674 = r674.length;
                for (let w674 = 0, x674 = v674 - 1; w674 < v674; x674 = w674++) {
                    const y674 = r674[w674].x, z674 = r674[w674].y, a675 = r674[x674].x, b675 = r674[x674].y;
                    z674 > u674 != b675 > u674 && t674 < (a675 - y674) * (u674 - z674) / (b675 - z674) + y674 && (s674 = !s674);
                }
                return s674;
            }
            function r141(h674, i674, j674, k674) {
                let l674 = j674.x - i674.x, m674 = j674.y - i674.y;
                const n674 = l674 * l674 + m674 * m674, o674 = ((h674.x - i674.x) * l674 + (h674.y - i674.y) * m674) / n674;
                let p674;
                return p674 = k674 ? n674 ? o674 < 0 ? i674 : o674 > 1 ? j674 : f226.set(i674.x + o674 * l674, i674.y + o674 * m674) : i674 : f226.set(i674.x + o674 * l674, i674.y + o674 * m674), l674 = h674.x - p674.x, m674 = h674.y - p674.y, Math.sqrt(l674 * l674 + m674 * m674);
            }
            class j226 {
            }
            g125("Intersection2D", j226), j226.lineLine = o141, j226.lineRect = function (a674, b674, c674) {
                const d674 = f226.set(c674.x, c674.y), e674 = g226.set(c674.x, c674.yMax), f674 = h226.set(c674.xMax, c674.yMax), g674 = i226.set(c674.xMax, c674.y);
                return !!(o141(a674, b674, d674, e674) || o141(a674, b674, e674, f674) || o141(a674, b674, f674, g674) || o141(a674, b674, g674, d674));
            }, j226.linePolygon = p141, j226.rectRect = function (q673, r673) {
                const s673 = q673.x, t673 = q673.y, u673 = q673.x + q673.width, v673 = q673.y + q673.height, w673 = r673.x, x673 = r673.y, y673 = r673.x + r673.width, z673 = r673.y + r673.height;
                return s673 <= y673 && u673 >= w673 && t673 <= z673 && v673 >= x673;
            }, j226.rectPolygon = function (i673, j673) {
                const k673 = f226.set(i673.x, i673.y), l673 = g226.set(i673.x, i673.yMax), m673 = h226.set(i673.xMax, i673.yMax), n673 = i226.set(i673.xMax, i673.y);
                if (p141(k673, l673, j673))
                    return !0;
                if (p141(l673, m673, j673))
                    return !0;
                if (p141(m673, n673, j673))
                    return !0;
                if (p141(n673, k673, j673))
                    return !0;
                for (let o673 = 0, p673 = j673.length; o673 < p673; ++o673)
                    if (i673.contains(j673[o673]))
                        return !0;
                return !!(q141(k673, j673) || q141(l673, j673) || q141(m673, j673) || q141(n673, j673));
            }, j226.rectCircle = function (v672, w672, x672) {
                const y672 = w672.x, z672 = w672.y, a673 = v672.x, b673 = v672.y, c673 = v672.width, d673 = v672.height;
                let e673 = y672, f673 = z672;
                y672 < a673 ? e673 = a673 : y672 > a673 + c673 && (e673 = a673 + c673), z672 < b673 ? f673 = b673 : z672 > b673 + d673 && (f673 = b673 + d673);
                const g673 = y672 - e673, h673 = z672 - f673;
                return Math.sqrt(g673 * g673 + h673 * h673) <= x672;
            }, j226.polygonPolygon = function (r672, s672) {
                let t672, u672;
                for (t672 = 0, u672 = r672.length; t672 < u672; ++t672)
                    if (p141(r672[t672], r672[(t672 + 1) % u672], s672))
                        return !0;
                for (t672 = 0, u672 = s672.length; t672 < u672; ++t672)
                    if (q141(s672[t672], r672))
                        return !0;
                for (t672 = 0, u672 = r672.length; t672 < u672; ++t672)
                    if (q141(r672[t672], s672))
                        return !0;
                return !1;
            }, j226.circleCircle = function (n672, o672, p672, q672) {
                return s147.distance(n672, p672) < o672 + q672;
            }, j226.polygonCircle = function (h672, i672, j672) {
                const k672 = i672;
                if (q141(k672, h672))
                    return !0;
                for (let l672 = 0, m672 = h672.length; l672 < m672; l672++)
                    if (r141(k672, 0 === l672 ? h672[h672.length - 1] : h672[l672 - 1], h672[l672], !0) < j672)
                        return !0;
                return !1;
            }, j226.pointInPolygon = q141, j226.pointLineDistance = r141;
            const k226 = p127({
                GRAVITY: 0,
                RADIUS: 1
            }), l226 = p127({
                FREE: 0,
                RELATIVE: 1,
                GROUPED: 2
            }), m226 = new s147(0, 0), n226 = new s147(), o226 = new s147(), p226 = new s147(), q226 = new s147(), r226 = t137(l188);
            class s226 {
                constructor() {
                    this.pos = new s147(0, 0), this.startPos = new s147(0, 0), this.color = new a147(0, 0, 0, 255), this.deltaColor = {
                        r: 0,
                        g: 0,
                        b: 0,
                        a: 255
                    }, this.size = 0, this.deltaSize = 0, this.rotation = 0, this.deltaRotation = 0, this.timeToLive = 0, this.drawPos = new s147(0, 0), this.aspectRatio = 1, this.dir = new s147(0, 0), this.radialAccel = 0, this.tangentialAccel = 0, this.angle = 0, this.degreesPerSecond = 0, this.radius = 0, this.deltaRadius = 0;
                }
            }
            const t226 = new class extends j145 {
                get() {
                    return this._get() || new s226();
                }
            }(g672 => {
                g672.pos.set(m226), g672.startPos.set(m226), g672.color._val = 4278190080, g672.deltaColor.r = g672.deltaColor.g = g672.deltaColor.b = 0, g672.deltaColor.a = 255, g672.size = 0, g672.deltaSize = 0, g672.rotation = 0, g672.deltaRotation = 0, g672.timeToLive = 0, g672.drawPos.set(m226), g672.aspectRatio = 1, g672.dir.set(m226), g672.radialAccel = 0, g672.tangentialAccel = 0, g672.angle = 0, g672.degreesPerSecond = 0, g672.radius = 0, g672.deltaRadius = 0;
            }, 1024);
            class u226 {
                constructor(f672) {
                    this.particles = [], this.active = !1, this.uvFilled = 0, this.finished = !1, this.readyToPlay = !0, this.elapsed = 0, this.emitCounter = 0, this._worldRotation = 0, this.sys = f672, this.particles = [], this.active = !1, this.readyToPlay = !0, this.finished = !1, this.elapsed = 0, this.emitCounter = 0, this.uvFilled = 0, this._worldRotation = 0;
                }
                stop() {
                    this.active = !1, this.readyToPlay = !1, this.elapsed = this.sys.duration, this.emitCounter = 0;
                }
                reset() {
                    this.active = !0, this.readyToPlay = !0, this.elapsed = 0, this.emitCounter = 0, this.finished = !1;
                    const d672 = this.particles;
                    for (let e672 = 0; e672 < d672.length; ++e672)
                        t226.put(d672[e672]);
                    d672.length = 0, this.renderData.resize(0, 0);
                }
                emitParticle(j671) {
                    const k671 = this.sys, l671 = t226.get();
                    this.particles.push(l671), l671.timeToLive = k671.life + k671.lifeVar * (c129() - .5) * 2;
                    const m671 = l671.timeToLive = Math.max(0, l671.timeToLive);
                    l671.pos.x = k671.sourcePos.x + k671.posVar.x * (c129() - .5) * 2, l671.pos.y = k671.sourcePos.y + k671.posVar.y * (c129() - .5) * 2;
                    let n671 = 0, o671 = 0, p671 = 0, q671 = 0;
                    const r671 = k671.startColor, s671 = k671.startColorVar, t671 = k671.endColor, u671 = k671.endColorVar;
                    l671.color.r = n671 = z127(r671.r + s671.r * (c129() - .5) * 2, 0, 255), l671.color.g = o671 = z127(r671.g + s671.g * (c129() - .5) * 2, 0, 255), l671.color.b = p671 = z127(r671.b + s671.b * (c129() - .5) * 2, 0, 255), l671.color.a = q671 = z127(r671.a + s671.a * (c129() - .5) * 2, 0, 255), l671.deltaColor.r = (z127(t671.r + u671.r * (c129() - .5) * 2, 0, 255) - n671) / m671, l671.deltaColor.g = (z127(t671.g + u671.g * (c129() - .5) * 2, 0, 255) - o671) / m671, l671.deltaColor.b = (z127(t671.b + u671.b * (c129() - .5) * 2, 0, 255) - p671) / m671, l671.deltaColor.a = (z127(t671.a + u671.a * (c129() - .5) * 2, 0, 255) - q671) / m671;
                    let v671 = k671.startSize + k671.startSizeVar * (c129() - .5) * 2;
                    if (v671 = Math.max(0, v671), l671.size = v671, -1 === k671.endSize)
                        l671.deltaSize = 0;
                    else {
                        let c672 = k671.endSize + k671.endSizeVar * (c129() - .5) * 2;
                        c672 = Math.max(0, c672), l671.deltaSize = (c672 - v671) / m671;
                    }
                    const w671 = k671.startSpin + k671.startSpinVar * (c129() - .5) * 2, x671 = k671.endSpin + k671.endSpinVar * (c129() - .5) * 2;
                    l671.rotation = w671, l671.deltaRotation = (x671 - w671) / m671, l671.startPos.x = j671.x, l671.startPos.y = j671.y, l671.aspectRatio = k671.aspectRatio || 1;
                    const y671 = a128(k671.angle + this._worldRotation + k671.angleVar * (c129() - .5) * 2);
                    if (k671.emitterMode === k226.GRAVITY) {
                        const b672 = k671.speed + k671.speedVar * (c129() - .5) * 2;
                        l671.dir.x = Math.cos(y671), l671.dir.y = Math.sin(y671), l671.dir.multiplyScalar(b672), l671.radialAccel = k671.radialAccel + k671.radialAccelVar * (c129() - .5) * 2, l671.tangentialAccel = k671.tangentialAccel + k671.tangentialAccelVar * (c129() - .5) * 2, k671.rotationIsDir && (l671.rotation = -b128(Math.atan2(l671.dir.y, l671.dir.x)));
                    }
                    else {
                        const z671 = k671.startRadius + k671.startRadiusVar * (c129() - .5) * 2, a672 = k671.endRadius + k671.endRadiusVar * (c129() - .5) * 2;
                        l671.radius = z671, l671.deltaRadius = -1 === k671.endRadius ? 0 : (a672 - z671) / m671, l671.angle = y671, l671.degreesPerSecond = a128(k671.rotatePerS + k671.rotatePerSVar * (c129() - .5) * 2);
                    }
                }
                updateUVs(b671) {
                    const c671 = this.renderData;
                    if (c671 && this.sys._renderSpriteFrame) {
                        const d671 = c671.vData, e671 = this.sys._renderSpriteFrame.uv, f671 = b671 ? 0 : this.uvFilled, g671 = this.particles.length;
                        for (let h671 = f671; h671 < g671; h671++) {
                            const i671 = h671 * r226 * 4;
                            d671[i671 + 3] = e671[0], d671[i671 + 4] = e671[1], d671[i671 + 12] = e671[2], d671[i671 + 13] = e671[3], d671[i671 + 21] = e671[4], d671[i671 + 22] = e671[5], d671[i671 + 30] = e671[6], d671[i671 + 31] = e671[7];
                        }
                        this.uvFilled = g671;
                    }
                }
                updateParticleBuffer(i670, j670, k670, l670) {
                    const m670 = k670.vData, n670 = j670.x, o670 = j670.y;
                    let p670 = i670.size, q670 = p670;
                    const r670 = i670.aspectRatio;
                    r670 > 1 ? q670 = p670 / r670 : p670 = q670 * r670;
                    const s670 = p670 / 2, t670 = q670 / 2;
                    if (i670.rotation) {
                        const u670 = -s670, v670 = -t670, w670 = s670, x670 = t670, y670 = -a128(i670.rotation), z670 = Math.cos(y670), a671 = Math.sin(y670);
                        m670[l670] = u670 * z670 - v670 * a671 + n670, m670[l670 + 1] = u670 * a671 + v670 * z670 + o670, m670[l670 + 2] = 0, m670[l670 + 9] = w670 * z670 - v670 * a671 + n670, m670[l670 + 10] = w670 * a671 + v670 * z670 + o670, m670[l670 + 11] = 0, m670[l670 + 18] = u670 * z670 - x670 * a671 + n670, m670[l670 + 19] = u670 * a671 + x670 * z670 + o670, m670[l670 + 20] = 0, m670[l670 + 27] = w670 * z670 - x670 * a671 + n670, m670[l670 + 28] = w670 * a671 + x670 * z670 + o670, m670[l670 + 29] = 0;
                    }
                    else
                        m670[l670] = n670 - s670, m670[l670 + 1] = o670 - t670, m670[l670 + 2] = 0, m670[l670 + 9] = n670 + s670, m670[l670 + 10] = o670 - t670, m670[l670 + 11] = 0, m670[l670 + 18] = n670 - s670, m670[l670 + 19] = o670 + t670, m670[l670 + 20] = 0, m670[l670 + 27] = n670 + s670, m670[l670 + 28] = o670 + t670, m670[l670 + 29] = 0;
                    a147.toArray(m670, i670.color, l670 + 5), a147.toArray(m670, i670.color, l670 + 14), a147.toArray(m670, i670.color, l670 + 23), a147.toArray(m670, i670.color, l670 + 32);
                }
                step(m669) {
                    const n669 = this.sys.assembler, o669 = this.sys, p669 = o669.node, q669 = this.particles;
                    if (m669 = m669 > n669.maxParticleDeltaTime ? n669.maxParticleDeltaTime : m669, p669.updateWorldTransform(), o669.positionType === l226.FREE) {
                        this._worldRotation = function (f670) {
                            let g670 = 0, h670 = f670;
                            for (; h670;)
                                g670 += h670.eulerAngles.z, h670 = h670.parent;
                            return g670;
                        }(p669);
                        const d670 = p669.worldMatrix;
                        n226.x = d670.m12, n226.y = d670.m13;
                    }
                    else
                        o669.positionType === l226.RELATIVE ? (this._worldRotation = p669.eulerAngles.z, n226.x = p669.position.x, n226.y = p669.position.y) : this._worldRotation = 0;
                    if (this.active && o669.emissionRate) {
                        const c670 = 1 / o669.emissionRate;
                        for (q669.length < o669.totalParticles && (this.emitCounter += m669); q669.length < o669.totalParticles && this.emitCounter > c670;)
                            this.emitParticle(n226), this.emitCounter -= c670;
                        this.elapsed += m669, -1 !== o669.duration && o669.duration < this.elapsed && o669.stopSystem();
                    }
                    const r669 = this.renderData, s669 = q669.length;
                    r669.reset(), this.requestData(4 * s669, 6 * s669), s669 > this.uvFilled && this.updateUVs();
                    let t669 = 0;
                    for (; t669 < q669.length;) {
                        o226.x = o226.y = p226.x = p226.y = q226.x = q226.y = 0;
                        const u669 = q669[t669];
                        if (u669.timeToLive -= m669, u669.timeToLive > 0) {
                            if (o669.emitterMode === k226.GRAVITY) {
                                const y669 = q226, z669 = o226, a670 = p226;
                                (u669.pos.x || u669.pos.y) && (z669.set(u669.pos), z669.normalize()), a670.set(z669), z669.multiplyScalar(u669.radialAccel);
                                const b670 = a670.x;
                                a670.x = -a670.y, a670.y = b670, a670.multiplyScalar(u669.tangentialAccel), y669.set(z669), y669.add(a670), y669.add(o669.gravity), y669.multiplyScalar(m669), u669.dir.add(y669), y669.set(u669.dir), y669.multiplyScalar(m669), u669.pos.add(y669);
                            }
                            else
                                u669.angle += u669.degreesPerSecond * m669, u669.radius += u669.deltaRadius * m669, u669.pos.x = -Math.cos(u669.angle) * u669.radius, u669.pos.y = -Math.sin(u669.angle) * u669.radius;
                            u669.color.r += u669.deltaColor.r * m669, u669.color.g += u669.deltaColor.g * m669, u669.color.b += u669.deltaColor.b * m669, u669.color.a += u669.deltaColor.a * m669, u669.size += u669.deltaSize * m669, u669.size < 0 && (u669.size = 0), u669.rotation += u669.deltaRotation * m669;
                            const w669 = o226;
                            w669.set(u669.pos), o669.positionType !== l226.GROUPED && w669.add(u669.startPos);
                            const x669 = r226 * t669 * 4;
                            this.updateParticleBuffer(u669, w669, r669, x669), ++t669;
                        }
                        else {
                            const v669 = q669[t669];
                            t669 !== q669.length - 1 && (q669[t669] = q669[q669.length - 1]), t226.put(v669), q669.length--, r669.resize(r669.vertexCount - 4, r669.indexCount - 6);
                        }
                    }
                    this.renderData.material = this.sys.getRenderMaterial(0), this.renderData.frame = this.sys._renderSpriteFrame, r669.setRenderDrawInfoAttributes(), 0 !== q669.length || this.active || this.readyToPlay || (this.finished = !0, o669._finishedSimulation());
                }
                requestData(f669, g669) {
                    let h669 = this.renderData.indexCount;
                    this.renderData.request(f669, g669);
                    const i669 = this.renderData.indexCount / 6, j669 = this.renderData.iData;
                    for (let k669 = h669; k669 < i669; k669++) {
                        const l669 = 4 * k669;
                        j669[h669++] = l669, j669[h669++] = l669 + 1, j669[h669++] = l669 + 2, j669[h669++] = l669 + 1, j669[h669++] = l669 + 3, j669[h669++] = l669 + 2;
                    }
                }
                initDrawInfo() {
                    this.renderData.setRenderDrawInfoAttributes();
                }
            }
            var v226, w226, x226;
            const { ccclass: y226, serializable: z226, editable: a227 } = k152;
            let b227 = g125("ParticleAsset", y226("cc.ParticleAsset")((w226 = class extends t163 {
                constructor(...e669) {
                    super(...e669), this.spriteFrame = x226 && x226();
                }
            }, x226 = p130(w226.prototype, "spriteFrame", [z226], function () {
                return null;
            }), v226 = w226)) || v226);
            s143.ParticleAsset = b227;
            var c227 = {};
            (function () {
                function j654(d669) {
                    throw d669;
                }
                var b655 = void 0, c655 = !0, d655 = this;
                function k654(y668, z668) {
                    var a669, b669 = y668.split("."), c669 = d655;
                    !(b669[0] in c669) && c669.execScript && c669.execScript("var " + b669[0]);
                    for (; b669.length && (a669 = b669.shift());)
                        b669.length || z668 === b655 ? c669 = c669[a669] ? c669[a669] : c669[a669] = {} : c669[a669] = z668;
                }
                var e655 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array;
                function l654(p668) {
                    if ("string" == typeof p668) {
                        var q668, r668, s668 = p668.split("");
                        for (q668 = 0, r668 = s668.length; q668 < r668; q668++)
                            s668[q668] = (255 & s668[q668].charCodeAt(0)) >>> 0;
                        p668 = s668;
                    }
                    for (var t668, u668 = 1, v668 = 0, w668 = p668.length, x668 = 0; 0 < w668;) {
                        w668 -= t668 = 1024 < w668 ? 1024 : w668;
                        do {
                            v668 += u668 += p668[x668++];
                        } while (--t668);
                        u668 %= 65521, v668 %= 65521;
                    }
                    return (v668 << 16 | u668) >>> 0;
                }
                function m654(n668, o668) {
                    this.index = "number" == typeof o668 ? o668 : 0, this.i = 0, this.buffer = n668 instanceof (e655 ? Uint8Array : Array) ? n668 : new (e655 ? Uint8Array : Array)(32768), 2 * this.buffer.length <= this.index && j654(Error("invalid index")), this.buffer.length <= this.index && this.f();
                }
                m654.prototype.f = function () {
                    var j668, k668 = this.buffer, l668 = k668.length, m668 = new (e655 ? Uint8Array : Array)(l668 << 1);
                    if (e655)
                        m668.set(k668);
                    else
                        for (j668 = 0; j668 < l668; ++j668)
                            m668[j668] = k668[j668];
                    return this.buffer = m668;
                }, m654.prototype.d = function (b668, c668, d668) {
                    var e668, f668 = this.buffer, g668 = this.index, h668 = this.i, i668 = f668[g668];
                    if (d668 && 1 < c668 && (b668 = 8 < c668 ? (k655[255 & b668] << 24 | k655[b668 >>> 8 & 255] << 16 | k655[b668 >>> 16 & 255] << 8 | k655[b668 >>> 24 & 255]) >> 32 - c668 : k655[b668] >> 8 - c668), 8 > c668 + h668)
                        i668 = i668 << c668 | b668, h668 += c668;
                    else
                        for (e668 = 0; e668 < c668; ++e668)
                            i668 = i668 << 1 | b668 >> c668 - e668 - 1 & 1, 8 == ++h668 && (h668 = 0, f668[g668++] = k655[i668], i668 = 0, g668 === f668.length && (f668 = this.f()));
                    f668[g668] = i668, this.buffer = f668, this.i = h668, this.index = g668;
                }, m654.prototype.finish = function () {
                    var y667, z667 = this.buffer, a668 = this.index;
                    return 0 < this.i && (z667[a668] <<= 8 - this.i, z667[a668] = k655[z667[a668]], a668++), e655 ? y667 = z667.subarray(0, a668) : (z667.length = a668, y667 = z667), y667;
                };
                var f655, g655 = new (e655 ? Uint8Array : Array)(256);
                for (f655 = 0; 256 > f655; ++f655) {
                    for (var h655 = j655 = f655, i655 = 7, j655 = j655 >>> 1; j655; j655 >>>= 1)
                        h655 <<= 1, h655 |= 1 & j655, --i655;
                    g655[f655] = (h655 << i655 & 255) >>> 0;
                }
                var k655 = g655;
                function n654(x667) {
                    this.buffer = new (e655 ? Uint16Array : Array)(2 * x667), this.length = 0;
                }
                function o654(k667) {
                    var l667, m667, n667, o667, p667, q667, r667, s667, t667, u667 = k667.length, v667 = 0, w667 = Number.POSITIVE_INFINITY;
                    for (s667 = 0; s667 < u667; ++s667)
                        k667[s667] > v667 && (v667 = k667[s667]), k667[s667] < w667 && (w667 = k667[s667]);
                    for (l667 = 1 << v667, m667 = new (e655 ? Uint32Array : Array)(l667), n667 = 1, o667 = 0, p667 = 2; n667 <= v667;) {
                        for (s667 = 0; s667 < u667; ++s667)
                            if (k667[s667] === n667) {
                                for (q667 = 0, r667 = o667, t667 = 0; t667 < n667; ++t667)
                                    q667 = q667 << 1 | 1 & r667, r667 >>= 1;
                                for (t667 = q667; t667 < l667; t667 += p667)
                                    m667[t667] = n667 << 16 | s667;
                                ++o667;
                            }
                        ++n667, o667 <<= 1, p667 <<= 1;
                    }
                    return [m667, v667, w667];
                }
                function p654(i667, j667) {
                    this.h = m655, this.w = 0, this.input = i667, this.b = 0, j667 && (j667.lazy && (this.w = j667.lazy), "number" == typeof j667.compressionType && (this.h = j667.compressionType), j667.outputBuffer && (this.a = e655 && j667.outputBuffer instanceof Array ? new Uint8Array(j667.outputBuffer) : j667.outputBuffer), "number" == typeof j667.outputIndex && (this.b = j667.outputIndex)), this.a || (this.a = new (e655 ? Uint8Array : Array)(32768));
                }
                n654.prototype.getParent = function (h667) {
                    return 2 * ((h667 - 2) / 4 | 0);
                }, n654.prototype.push = function (b667, c667) {
                    var d667, e667, f667, g667 = this.buffer;
                    for (d667 = this.length, g667[this.length++] = c667, g667[this.length++] = b667; 0 < d667 && (e667 = this.getParent(d667), g667[d667] > g667[e667]);)
                        f667 = g667[d667], g667[d667] = g667[e667], g667[e667] = f667, f667 = g667[d667 + 1], g667[d667 + 1] = g667[e667 + 1], g667[e667 + 1] = f667, d667 = e667;
                    return this.length;
                }, n654.prototype.pop = function () {
                    var v666, w666, x666, y666, z666, a667 = this.buffer;
                    for (w666 = a667[0], v666 = a667[1], this.length -= 2, a667[0] = a667[this.length], a667[1] = a667[this.length + 1], z666 = 0; !((y666 = 2 * z666 + 2) >= this.length) && (y666 + 2 < this.length && a667[y666 + 2] > a667[y666] && (y666 += 2), a667[y666] > a667[z666]);)
                        x666 = a667[z666], a667[z666] = a667[y666], a667[y666] = x666, x666 = a667[z666 + 1], a667[z666 + 1] = a667[y666 + 1], a667[y666 + 1] = x666, z666 = y666;
                    return {
                        index: v666,
                        value: w666,
                        length: this.length
                    };
                };
                var l655, m655 = 2, n655 = {
                    NONE: 0,
                    r: 1,
                    j: m655,
                    N: 3
                }, o655 = [];
                for (l655 = 0; 288 > l655; l655++)
                    switch (c655) {
                        case 143 >= l655:
                            o655.push([l655 + 48, 8]);
                            break;
                        case 255 >= l655:
                            o655.push([l655 - 144 + 400, 9]);
                            break;
                        case 279 >= l655:
                            o655.push([l655 - 256 + 0, 7]);
                            break;
                        case 287 >= l655:
                            o655.push([l655 - 280 + 192, 8]);
                            break;
                        default:
                            j654("invalid literal: " + l655);
                    }
                function q654(t666, u666) {
                    this.length = t666, this.G = u666;
                }
                function r654() {
                    var s666 = p655;
                    switch (c655) {
                        case 3 === s666:
                            return [257, s666 - 3, 0];
                        case 4 === s666:
                            return [258, s666 - 4, 0];
                        case 5 === s666:
                            return [259, s666 - 5, 0];
                        case 6 === s666:
                            return [260, s666 - 6, 0];
                        case 7 === s666:
                            return [261, s666 - 7, 0];
                        case 8 === s666:
                            return [262, s666 - 8, 0];
                        case 9 === s666:
                            return [263, s666 - 9, 0];
                        case 10 === s666:
                            return [264, s666 - 10, 0];
                        case 12 >= s666:
                            return [265, s666 - 11, 1];
                        case 14 >= s666:
                            return [266, s666 - 13, 1];
                        case 16 >= s666:
                            return [267, s666 - 15, 1];
                        case 18 >= s666:
                            return [268, s666 - 17, 1];
                        case 22 >= s666:
                            return [269, s666 - 19, 2];
                        case 26 >= s666:
                            return [270, s666 - 23, 2];
                        case 30 >= s666:
                            return [271, s666 - 27, 2];
                        case 34 >= s666:
                            return [272, s666 - 31, 2];
                        case 42 >= s666:
                            return [273, s666 - 35, 3];
                        case 50 >= s666:
                            return [274, s666 - 43, 3];
                        case 58 >= s666:
                            return [275, s666 - 51, 3];
                        case 66 >= s666:
                            return [276, s666 - 59, 3];
                        case 82 >= s666:
                            return [277, s666 - 67, 4];
                        case 98 >= s666:
                            return [278, s666 - 83, 4];
                        case 114 >= s666:
                            return [279, s666 - 99, 4];
                        case 130 >= s666:
                            return [280, s666 - 115, 4];
                        case 162 >= s666:
                            return [281, s666 - 131, 5];
                        case 194 >= s666:
                            return [282, s666 - 163, 5];
                        case 226 >= s666:
                            return [283, s666 - 195, 5];
                        case 257 >= s666:
                            return [284, s666 - 227, 5];
                        case 258 === s666:
                            return [285, s666 - 258, 0];
                        default:
                            j654("invalid length: " + s666);
                    }
                }
                p654.prototype.n = function () {
                    var m664, n664, o664, p664, q664 = this.input;
                    switch (this.h) {
                        case 0:
                            for (o664 = 0, p664 = q664.length; o664 < p664;) {
                                var r664, s664, t664, u664 = n664 = e655 ? q664.subarray(o664, o664 + 65535) : q664.slice(o664, o664 + 65535), v664 = (o664 += n664.length) === p664, w664 = b655, x664 = b655, y664 = this.a, z664 = this.b;
                                if (e655) {
                                    for (y664 = new Uint8Array(this.a.buffer); y664.length <= z664 + u664.length + 5;)
                                        y664 = new Uint8Array(y664.length << 1);
                                    y664.set(this.a);
                                }
                                if (r664 = v664 ? 1 : 0, y664[z664++] = 0 | r664, t664 = 65536 + ~(s664 = u664.length) & 65535, y664[z664++] = 255 & s664, y664[z664++] = s664 >>> 8 & 255, y664[z664++] = 255 & t664, y664[z664++] = t664 >>> 8 & 255, e655)
                                    y664.set(u664, z664), z664 += u664.length, y664 = y664.subarray(0, z664);
                                else {
                                    for (w664 = 0, x664 = u664.length; w664 < x664; ++w664)
                                        y664[z664++] = u664[w664];
                                    y664.length = z664;
                                }
                                this.b = z664, this.a = y664;
                            }
                            break;
                        case 1:
                            var a665 = new m654(new Uint8Array(this.a.buffer), this.b);
                            a665.d(1, 1, c655), a665.d(1, 2, c655);
                            var b665, c665, d665, e665 = s654(this, q664);
                            for (b665 = 0, c665 = e665.length; b665 < c665; b665++)
                                if (d665 = e665[b665], m654.prototype.d.apply(a665, o655[d665]), 256 < d665)
                                    a665.d(e665[++b665], e665[++b665], c655), a665.d(e665[++b665], 5), a665.d(e665[++b665], e665[++b665], c655);
                                else if (256 === d665)
                                    break;
                            this.a = a665.finish(), this.b = this.a.length;
                            break;
                        case m655:
                            var f665, g665, h665, i665, j665, k665, l665, m665, n665, o665, p665, q665, r665, s665, t665, u665 = new m654(new Uint8Array(this.a), this.b), v665 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], w665 = Array(19);
                            for (f665 = m655, u665.d(1, 1, c655), u665.d(f665, 2, c655), g665 = s654(this, q664), l665 = u654(k665 = t654(this.L, 15)), n665 = u654(m665 = t654(this.K, 7)), h665 = 286; 257 < h665 && 0 === k665[h665 - 1]; h665--)
                                ;
                            for (i665 = 30; 1 < i665 && 0 === m665[i665 - 1]; i665--)
                                ;
                            var x665, y665, z665, a666, b666, c666, d666 = h665, e666 = i665, f666 = new (e655 ? Uint32Array : Array)(d666 + e666), g666 = new (e655 ? Uint32Array : Array)(316), h666 = new (e655 ? Uint8Array : Array)(19);
                            for (x665 = y665 = 0; x665 < d666; x665++)
                                f666[y665++] = k665[x665];
                            for (x665 = 0; x665 < e666; x665++)
                                f666[y665++] = m665[x665];
                            if (!e655)
                                for (x665 = 0, a666 = h666.length; x665 < a666; ++x665)
                                    h666[x665] = 0;
                            for (x665 = b666 = 0, a666 = f666.length; x665 < a666; x665 += y665) {
                                for (y665 = 1; x665 + y665 < a666 && f666[x665 + y665] === f666[x665]; ++y665)
                                    ;
                                if (z665 = y665, 0 === f666[x665]) {
                                    if (3 > z665)
                                        for (; 0 < z665--;)
                                            g666[b666++] = 0, h666[0]++;
                                    else
                                        for (; 0 < z665;)
                                            (c666 = 138 > z665 ? z665 : 138) > z665 - 3 && c666 < z665 && (c666 = z665 - 3), 10 >= c666 ? (g666[b666++] = 17, g666[b666++] = c666 - 3, h666[17]++) : (g666[b666++] = 18, g666[b666++] = c666 - 11, h666[18]++), z665 -= c666;
                                }
                                else if (g666[b666++] = f666[x665], h666[f666[x665]]++, 3 > --z665)
                                    for (; 0 < z665--;)
                                        g666[b666++] = f666[x665], h666[f666[x665]]++;
                                else
                                    for (; 0 < z665;)
                                        (c666 = 6 > z665 ? z665 : 6) > z665 - 3 && c666 < z665 && (c666 = z665 - 3), g666[b666++] = 16, g666[b666++] = c666 - 3, h666[16]++, z665 -= c666;
                            }
                            for (m664 = e655 ? g666.subarray(0, b666) : g666.slice(0, b666), o665 = t654(h666, 7), s665 = 0; 19 > s665; s665++)
                                w665[s665] = o665[v665[s665]];
                            for (j665 = 19; 4 < j665 && 0 === w665[j665 - 1]; j665--)
                                ;
                            for (p665 = u654(o665), u665.d(h665 - 257, 5, c655), u665.d(i665 - 1, 5, c655), u665.d(j665 - 4, 4, c655), s665 = 0; s665 < j665; s665++)
                                u665.d(w665[s665], 3, c655);
                            for (s665 = 0, t665 = m664.length; s665 < t665; s665++)
                                if (q665 = m664[s665], u665.d(p665[q665], o665[q665], c655), 16 <= q665) {
                                    switch ((s665++, q665)) {
                                        case 16:
                                            r665 = 2;
                                            break;
                                        case 17:
                                            r665 = 3;
                                            break;
                                        case 18:
                                            r665 = 7;
                                            break;
                                        default:
                                            j654("invalid code: " + q665);
                                    }
                                    u665.d(m664[s665], r665, c655);
                                }
                            var i666, j666, k666, l666, m666, n666, o666, p666, q666 = [l665, k665], r666 = [n665, m665];
                            for (m666 = q666[0], n666 = q666[1], o666 = r666[0], p666 = r666[1], i666 = 0, j666 = g665.length; i666 < j666; ++i666)
                                if (k666 = g665[i666], u665.d(m666[k666], n666[k666], c655), 256 < k666)
                                    u665.d(g665[++i666], g665[++i666], c655), l666 = g665[++i666], u665.d(o666[l666], p666[l666], c655), u665.d(g665[++i666], g665[++i666], c655);
                                else if (256 === k666)
                                    break;
                            this.a = u665.finish(), this.b = this.a.length;
                            break;
                        default:
                            j654("invalid compression type");
                    }
                    return this.a;
                };
                var p655, q655, r655 = [];
                for (p655 = 3; 258 >= p655; p655++)
                    q655 = r654(), r655[p655] = q655[2] << 24 | q655[1] << 16 | q655[0];
                var s655 = e655 ? new Uint32Array(r655) : r655;
                function s654(b663, c663) {
                    function d663(d664, e664) {
                        var f664, g664, h664, i664, j664 = d664.G, k664 = [], l664 = 0;
                        switch ((f664 = s655[d664.length], k664[l664++] = 65535 & f664, k664[l664++] = f664 >> 16 & 255, k664[l664++] = f664 >> 24, c655)) {
                            case 1 === j664:
                                g664 = [0, j664 - 1, 0];
                                break;
                            case 2 === j664:
                                g664 = [1, j664 - 2, 0];
                                break;
                            case 3 === j664:
                                g664 = [2, j664 - 3, 0];
                                break;
                            case 4 === j664:
                                g664 = [3, j664 - 4, 0];
                                break;
                            case 6 >= j664:
                                g664 = [4, j664 - 5, 1];
                                break;
                            case 8 >= j664:
                                g664 = [5, j664 - 7, 1];
                                break;
                            case 12 >= j664:
                                g664 = [6, j664 - 9, 2];
                                break;
                            case 16 >= j664:
                                g664 = [7, j664 - 13, 2];
                                break;
                            case 24 >= j664:
                                g664 = [8, j664 - 17, 3];
                                break;
                            case 32 >= j664:
                                g664 = [9, j664 - 25, 3];
                                break;
                            case 48 >= j664:
                                g664 = [10, j664 - 33, 4];
                                break;
                            case 64 >= j664:
                                g664 = [11, j664 - 49, 4];
                                break;
                            case 96 >= j664:
                                g664 = [12, j664 - 65, 5];
                                break;
                            case 128 >= j664:
                                g664 = [13, j664 - 97, 5];
                                break;
                            case 192 >= j664:
                                g664 = [14, j664 - 129, 6];
                                break;
                            case 256 >= j664:
                                g664 = [15, j664 - 193, 6];
                                break;
                            case 384 >= j664:
                                g664 = [16, j664 - 257, 7];
                                break;
                            case 512 >= j664:
                                g664 = [17, j664 - 385, 7];
                                break;
                            case 768 >= j664:
                                g664 = [18, j664 - 513, 8];
                                break;
                            case 1024 >= j664:
                                g664 = [19, j664 - 769, 8];
                                break;
                            case 1536 >= j664:
                                g664 = [20, j664 - 1025, 9];
                                break;
                            case 2048 >= j664:
                                g664 = [21, j664 - 1537, 9];
                                break;
                            case 3072 >= j664:
                                g664 = [22, j664 - 2049, 10];
                                break;
                            case 4096 >= j664:
                                g664 = [23, j664 - 3073, 10];
                                break;
                            case 6144 >= j664:
                                g664 = [24, j664 - 4097, 11];
                                break;
                            case 8192 >= j664:
                                g664 = [25, j664 - 6145, 11];
                                break;
                            case 12288 >= j664:
                                g664 = [26, j664 - 8193, 12];
                                break;
                            case 16384 >= j664:
                                g664 = [27, j664 - 12289, 12];
                                break;
                            case 24576 >= j664:
                                g664 = [28, j664 - 16385, 13];
                                break;
                            case 32768 >= j664:
                                g664 = [29, j664 - 24577, 13];
                                break;
                            default:
                                j654("invalid distance");
                        }
                        for (f664 = g664, k664[l664++] = f664[0], k664[l664++] = f664[1], k664[l664++] = f664[2], h664 = 0, i664 = k664.length; h664 < i664; ++h664)
                            o663[p663++] = k664[h664];
                        r663[k664[0]]++, s663[k664[3]]++, q663 = d664.length + e664 - 1, l663 = null;
                    }
                    var e663, f663, g663, h663, i663, j663, k663, l663, m663, n663 = {}, o663 = e655 ? new Uint16Array(2 * c663.length) : [], p663 = 0, q663 = 0, r663 = new (e655 ? Uint32Array : Array)(286), s663 = new (e655 ? Uint32Array : Array)(30), t663 = b663.w;
                    if (!e655) {
                        for (g663 = 0; 285 >= g663;)
                            r663[g663++] = 0;
                        for (g663 = 0; 29 >= g663;)
                            s663[g663++] = 0;
                    }
                    for (r663[256] = 1, e663 = 0, f663 = c663.length; e663 < f663; ++e663) {
                        for (g663 = i663 = 0, h663 = 3; g663 < h663 && e663 + g663 !== f663; ++g663)
                            i663 = i663 << 8 | c663[e663 + g663];
                        if (n663[i663] === b655 && (n663[i663] = []), j663 = n663[i663], !(0 < q663--)) {
                            for (; 0 < j663.length && 32768 < e663 - j663[0];)
                                j663.shift();
                            if (e663 + 3 >= f663) {
                                for (l663 && d663(l663, -1), g663 = 0, h663 = f663 - e663; g663 < h663; ++g663)
                                    m663 = c663[e663 + g663], o663[p663++] = m663, ++r663[m663];
                                break;
                            }
                            if (0 < j663.length) {
                                var u663 = b655, v663 = b655, w663 = 0, x663 = b655, y663 = b655, z663 = b655, a664 = c663.length, b664 = (y663 = 0, j663.length);
                                c664: for (; y663 < b664; y663++) {
                                    if (u663 = j663[b664 - y663 - 1], x663 = 3, 3 < w663) {
                                        for (z663 = w663; 3 < z663; z663--)
                                            if (c663[u663 + z663 - 1] !== c663[e663 + z663 - 1])
                                                continue c664;
                                        x663 = w663;
                                    }
                                    for (; 258 > x663 && e663 + x663 < a664 && c663[u663 + x663] === c663[e663 + x663];)
                                        ++x663;
                                    if (x663 > w663 && (v663 = u663, w663 = x663), 258 === x663)
                                        break;
                                }
                                k663 = new q654(w663, e663 - v663), l663 ? l663.length < k663.length ? (m663 = c663[e663 - 1], o663[p663++] = m663, ++r663[m663], d663(k663, 0)) : d663(l663, -1) : k663.length < t663 ? l663 = k663 : d663(k663, 0);
                            }
                            else
                                l663 ? d663(l663, -1) : (m663 = c663[e663], o663[p663++] = m663, ++r663[m663]);
                        }
                        j663.push(e663);
                    }
                    return o663[p663++] = 256, r663[256]++, b663.L = r663, b663.K = s663, e655 ? o663.subarray(0, p663) : o663;
                }
                function t654(a662, b662) {
                    function c662(z662) {
                        var a663 = v662[z662][w662[z662]];
                        a663 === q662 ? (c662(z662 + 1), c662(z662 + 1)) : --t662[a663], ++w662[z662];
                    }
                    var d662, e662, f662, g662, h662, i662 = a662.length, j662 = new n654(572), k662 = new (e655 ? Uint8Array : Array)(i662);
                    if (!e655)
                        for (g662 = 0; g662 < i662; g662++)
                            k662[g662] = 0;
                    for (g662 = 0; g662 < i662; ++g662)
                        0 < a662[g662] && j662.push(g662, a662[g662]);
                    if (d662 = Array(j662.length / 2), e662 = new (e655 ? Uint32Array : Array)(j662.length / 2), 1 === d662.length)
                        return k662[j662.pop().index] = 1, k662;
                    for (g662 = 0, h662 = j662.length / 2; g662 < h662; ++g662)
                        d662[g662] = j662.pop(), e662[g662] = d662[g662].value;
                    var l662, m662, n662, o662, p662, q662 = e662.length, r662 = new (e655 ? Uint16Array : Array)(b662), s662 = new (e655 ? Uint8Array : Array)(b662), t662 = new (e655 ? Uint8Array : Array)(q662), u662 = Array(b662), v662 = Array(b662), w662 = Array(b662), x662 = (1 << b662) - q662, y662 = 1 << b662 - 1;
                    for (r662[b662 - 1] = q662, m662 = 0; m662 < b662; ++m662)
                        x662 < y662 ? s662[m662] = 0 : (s662[m662] = 1, x662 -= y662), x662 <<= 1, r662[b662 - 2 - m662] = (r662[b662 - 1 - m662] / 2 | 0) + q662;
                    for (r662[0] = s662[0], u662[0] = Array(r662[0]), v662[0] = Array(r662[0]), m662 = 1; m662 < b662; ++m662)
                        r662[m662] > 2 * r662[m662 - 1] + s662[m662] && (r662[m662] = 2 * r662[m662 - 1] + s662[m662]), u662[m662] = Array(r662[m662]), v662[m662] = Array(r662[m662]);
                    for (l662 = 0; l662 < q662; ++l662)
                        t662[l662] = b662;
                    for (n662 = 0; n662 < r662[b662 - 1]; ++n662)
                        u662[b662 - 1][n662] = e662[n662], v662[b662 - 1][n662] = n662;
                    for (l662 = 0; l662 < b662; ++l662)
                        w662[l662] = 0;
                    for (1 === s662[b662 - 1] && (--t662[0], ++w662[b662 - 1]), m662 = b662 - 2; 0 <= m662; --m662) {
                        for (o662 = l662 = 0, p662 = w662[m662 + 1], n662 = 0; n662 < r662[m662]; n662++)
                            (o662 = u662[m662 + 1][p662] + u662[m662 + 1][p662 + 1]) > e662[l662] ? (u662[m662][n662] = o662, v662[m662][n662] = q662, p662 += 2) : (u662[m662][n662] = e662[l662], v662[m662][n662] = l662, ++l662);
                        w662[m662] = 0, 1 === s662[m662] && c662(m662);
                    }
                    for (f662 = t662, g662 = 0, h662 = d662.length; g662 < h662; ++g662)
                        k662[d662[g662].index] = f662[g662];
                    return k662;
                }
                function u654(r661) {
                    var s661, t661, u661, v661, w661 = new (e655 ? Uint16Array : Array)(r661.length), x661 = [], y661 = [], z661 = 0;
                    for (s661 = 0, t661 = r661.length; s661 < t661; s661++)
                        x661[r661[s661]] = 1 + (0 | x661[r661[s661]]);
                    for (s661 = 1, t661 = 16; s661 <= t661; s661++)
                        y661[s661] = z661, (z661 += 0 | x661[s661]) > 1 << s661 && j654("overcommitted"), z661 <<= 1;
                    for (65536 > z661 && j654("undercommitted"), s661 = 0, t661 = r661.length; s661 < t661; s661++)
                        for (z661 = y661[r661[s661]], y661[r661[s661]] += 1, u661 = w661[s661] = 0, v661 = r661[s661]; u661 < v661; u661++)
                            w661[s661] = w661[s661] << 1 | 1 & z661, z661 >>>= 1;
                    return w661;
                }
                function v654(n661, o661) {
                    this.input = n661, this.a = new (e655 ? Uint8Array : Array)(32768), this.h = t655.j;
                    var p661, q661 = {};
                    for (p661 in !o661 && (o661 = {}) || "number" != typeof o661.compressionType || (this.h = o661.compressionType), o661)
                        q661[p661] = o661[p661];
                    q661.outputBuffer = this.a, this.z = new p654(this.input, q661);
                }
                var t655 = n655;
                function w654(l661, m661) {
                    switch ((this.k = [], this.l = 32768, this.e = this.g = this.c = this.q = 0, this.input = e655 ? new Uint8Array(l661) : l661, this.s = !1, this.m = v655, this.B = !1, !m661 && (m661 = {}) || (m661.index && (this.c = m661.index), m661.bufferSize && (this.l = m661.bufferSize), m661.bufferType && (this.m = m661.bufferType), m661.resize && (this.B = m661.resize)), this.m)) {
                        case u655:
                            this.b = 32768, this.a = new (e655 ? Uint8Array : Array)(32768 + this.l + 258);
                            break;
                        case v655:
                            this.b = 0, this.a = new (e655 ? Uint8Array : Array)(this.l), this.f = this.J, this.t = this.H, this.o = this.I;
                            break;
                        default:
                            j654(Error("invalid inflate mode"));
                    }
                }
                v654.prototype.n = function () {
                    var d661, e661, f661, g661, h661, i661, j661, k661 = 0;
                    switch ((j661 = this.a, d661 = v656)) {
                        case v656:
                            e661 = Math.LOG2E * Math.log(32768) - 8;
                            break;
                        default:
                            j654(Error("invalid compression method"));
                    }
                    switch ((f661 = e661 << 4 | d661, j661[k661++] = f661, d661)) {
                        case v656:
                            switch (this.h) {
                                case t655.NONE:
                                    h661 = 0;
                                    break;
                                case t655.r:
                                    h661 = 1;
                                    break;
                                case t655.j:
                                    h661 = 2;
                                    break;
                                default:
                                    j654(Error("unsupported compression type"));
                            }
                            break;
                        default:
                            j654(Error("invalid compression method"));
                    }
                    return g661 = h661 << 6 | 0, j661[k661++] = g661 | 31 - (256 * f661 + g661) % 31, i661 = l654(this.input), this.z.b = k661, k661 = (j661 = this.z.n()).length, e655 && ((j661 = new Uint8Array(j661.buffer)).length <= k661 + 4 && (this.a = new Uint8Array(j661.length + 4), this.a.set(j661), j661 = this.a), j661 = j661.subarray(0, k661 + 4)), j661[k661++] = i661 >> 24 & 255, j661[k661++] = i661 >> 16 & 255, j661[k661++] = i661 >> 8 & 255, j661[k661++] = 255 & i661, j661;
                }, k654("Zlib.Deflate", v654), k654("Zlib.Deflate.compress", function (b661, c661) {
                    return new v654(b661, c661).n();
                }), k654("Zlib.Deflate.CompressionType", t655), k654("Zlib.Deflate.CompressionType.NONE", t655.NONE), k654("Zlib.Deflate.CompressionType.FIXED", t655.r), k654("Zlib.Deflate.CompressionType.DYNAMIC", t655.j);
                var u655 = 0, v655 = 1, w655 = {
                    D: u655,
                    C: v655
                };
                w654.prototype.p = function () {
                    for (; !this.s;) {
                        var r660 = x654(this, 3);
                        switch ((1 & r660 && (this.s = c655), r660 >>>= 1)) {
                            case 0:
                                var s660 = this.input, t660 = this.c, u660 = this.a, v660 = this.b, w660 = b655, x660 = b655, y660 = b655, z660 = u660.length, a661 = b655;
                                switch ((this.e = this.g = 0, (w660 = s660[t660++]) === b655 && j654(Error("invalid uncompressed block header: LEN (first byte)")), x660 = w660, (w660 = s660[t660++]) === b655 && j654(Error("invalid uncompressed block header: LEN (second byte)")), x660 |= w660 << 8, (w660 = s660[t660++]) === b655 && j654(Error("invalid uncompressed block header: NLEN (first byte)")), y660 = w660, (w660 = s660[t660++]) === b655 && j654(Error("invalid uncompressed block header: NLEN (second byte)")), x660 === ~(y660 |= w660 << 8) && j654(Error("invalid uncompressed block header: length verify")), t660 + x660 > s660.length && j654(Error("input buffer is broken")), this.m)) {
                                    case u655:
                                        for (; v660 + x660 > u660.length;) {
                                            if (x660 -= a661 = z660 - v660, e655)
                                                u660.set(s660.subarray(t660, t660 + a661), v660), v660 += a661, t660 += a661;
                                            else
                                                for (; a661--;)
                                                    u660[v660++] = s660[t660++];
                                            this.b = v660, u660 = this.f(), v660 = this.b;
                                        }
                                        break;
                                    case v655:
                                        for (; v660 + x660 > u660.length;)
                                            u660 = this.f({
                                                v: 2
                                            });
                                        break;
                                    default:
                                        j654(Error("invalid inflate mode"));
                                }
                                if (e655)
                                    u660.set(s660.subarray(t660, t660 + x660), v660), v660 += x660, t660 += x660;
                                else
                                    for (; x660--;)
                                        u660[v660++] = s660[t660++];
                                this.c = t660, this.b = v660, this.a = u660;
                                break;
                            case 1:
                                this.o(m656, o656);
                                break;
                            case 2:
                                z654(this);
                                break;
                            default:
                                j654(Error("unknown BTYPE: " + r660));
                        }
                    }
                    return this.t();
                };
                var x655, y655, z655 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], a656 = e655 ? new Uint16Array(z655) : z655, b656 = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258], c656 = e655 ? new Uint16Array(b656) : b656, d656 = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0], e656 = e655 ? new Uint8Array(d656) : d656, f656 = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577], g656 = e655 ? new Uint16Array(f656) : f656, h656 = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], i656 = e655 ? new Uint8Array(h656) : h656, j656 = new (e655 ? Uint8Array : Array)(288);
                for (x655 = 0, y655 = j656.length; x655 < y655; ++x655)
                    j656[x655] = 143 >= x655 ? 8 : 255 >= x655 ? 9 : 279 >= x655 ? 7 : 8;
                var k656, l656, m656 = o654(j656), n656 = new (e655 ? Uint8Array : Array)(30);
                for (k656 = 0, l656 = n656.length; k656 < l656; ++k656)
                    n656[k656] = 5;
                var o656 = o654(n656);
                function x654(k660, l660) {
                    for (var m660, n660 = k660.g, o660 = k660.e, p660 = k660.input, q660 = k660.c; o660 < l660;)
                        (m660 = p660[q660++]) === b655 && j654(Error("input buffer is broken")), n660 |= m660 << o660, o660 += 8;
                    return m660 = n660 & (1 << l660) - 1, k660.g = n660 >>> l660, k660.e = o660 - l660, k660.c = q660, m660;
                }
                function y654(z659, a660) {
                    for (var b660, c660, d660, e660 = z659.g, f660 = z659.e, g660 = z659.input, h660 = z659.c, i660 = a660[0], j660 = a660[1]; f660 < j660;)
                        (b660 = g660[h660++]) === b655 && j654(Error("input buffer is broken")), e660 |= b660 << f660, f660 += 8;
                    return d660 = (c660 = i660[e660 & (1 << j660) - 1]) >>> 16, z659.g = e660 >> d660, z659.e = f660 - d660, z659.c = h660, 65535 & c660;
                }
                function z654(i659) {
                    function j659(s659, t659, u659) {
                        var v659, w659, x659, y659;
                        for (y659 = 0; y659 < s659;)
                            switch ((v659 = y654(this, t659), v659)) {
                                case 16:
                                    for (x659 = 3 + x654(this, 2); x659--;)
                                        u659[y659++] = w659;
                                    break;
                                case 17:
                                    for (x659 = 3 + x654(this, 3); x659--;)
                                        u659[y659++] = 0;
                                    w659 = 0;
                                    break;
                                case 18:
                                    for (x659 = 11 + x654(this, 7); x659--;)
                                        u659[y659++] = 0;
                                    w659 = 0;
                                    break;
                                default:
                                    w659 = u659[y659++] = v659;
                            }
                        return u659;
                    }
                    var k659, l659, m659, n659, o659 = x654(i659, 5) + 257, p659 = x654(i659, 5) + 1, q659 = x654(i659, 4) + 4, r659 = new (e655 ? Uint8Array : Array)(a656.length);
                    for (n659 = 0; n659 < q659; ++n659)
                        r659[a656[n659]] = x654(i659, 3);
                    k659 = o654(r659), l659 = new (e655 ? Uint8Array : Array)(o659), m659 = new (e655 ? Uint8Array : Array)(p659), i659.o(o654(j659.call(i659, o659, k659, l659)), o654(j659.call(i659, p659, k659, m659)));
                }
                function a655(e659, f659) {
                    var g659, h659;
                    switch ((this.input = e659, this.c = 0, !f659 && (f659 = {}) || (f659.index && (this.c = f659.index), f659.verify && (this.M = f659.verify)), g659 = e659[this.c++], h659 = e659[this.c++], 15 & g659)) {
                        case v656:
                            this.method = v656;
                            break;
                        default:
                            j654(Error("unsupported compression method"));
                    }
                    0 != ((g659 << 8) + h659) % 31 && j654(Error("invalid fcheck flag:" + ((g659 << 8) + h659) % 31)), 32 & h659 && j654(Error("fdict flag is not supported")), this.A = new w654(e659, {
                        index: this.c,
                        bufferSize: f659.bufferSize,
                        bufferType: f659.bufferType,
                        resize: f659.resize
                    });
                }
                w654.prototype.o = function (v658, w658) {
                    var x658 = this.a, y658 = this.b;
                    this.u = v658;
                    for (var z658, a659, b659, c659, d659 = x658.length - 258; 256 !== (z658 = y654(this, v658));)
                        if (256 > z658)
                            y658 >= d659 && (this.b = y658, x658 = this.f(), y658 = this.b), x658[y658++] = z658;
                        else
                            for (c659 = c656[a659 = z658 - 257], 0 < e656[a659] && (c659 += x654(this, e656[a659])), z658 = y654(this, w658), b659 = g656[z658], 0 < i656[z658] && (b659 += x654(this, i656[z658])), y658 >= d659 && (this.b = y658, x658 = this.f(), y658 = this.b); c659--;)
                                x658[y658] = x658[y658++ - b659];
                    for (; 8 <= this.e;)
                        this.e -= 8, this.c--;
                    this.b = y658;
                }, w654.prototype.I = function (m658, n658) {
                    var o658 = this.a, p658 = this.b;
                    this.u = m658;
                    for (var q658, r658, s658, t658, u658 = o658.length; 256 !== (q658 = y654(this, m658));)
                        if (256 > q658)
                            p658 >= u658 && (u658 = (o658 = this.f()).length), o658[p658++] = q658;
                        else
                            for (t658 = c656[r658 = q658 - 257], 0 < e656[r658] && (t658 += x654(this, e656[r658])), q658 = y654(this, n658), s658 = g656[q658], 0 < i656[q658] && (s658 += x654(this, i656[q658])), p658 + t658 > u658 && (u658 = (o658 = this.f()).length); t658--;)
                                o658[p658] = o658[p658++ - s658];
                    for (; 8 <= this.e;)
                        this.e -= 8, this.c--;
                    this.b = p658;
                }, w654.prototype.f = function () {
                    var h658, i658, j658 = new (e655 ? Uint8Array : Array)(this.b - 32768), k658 = this.b - 32768, l658 = this.a;
                    if (e655)
                        j658.set(l658.subarray(32768, j658.length));
                    else
                        for (h658 = 0, i658 = j658.length; h658 < i658; ++h658)
                            j658[h658] = l658[h658 + 32768];
                    if (this.k.push(j658), this.q += j658.length, e655)
                        l658.set(l658.subarray(k658, k658 + 32768));
                    else
                        for (h658 = 0; 32768 > h658; ++h658)
                            l658[h658] = l658[k658 + h658];
                    return this.b = 32768, l658;
                }, w654.prototype.J = function (a658) {
                    var b658, c658, d658, e658 = this.input.length / this.c + 1 | 0, f658 = this.input, g658 = this.a;
                    return a658 && ("number" == typeof a658.v && (e658 = a658.v), "number" == typeof a658.F && (e658 += a658.F)), c658 = 2 > e658 ? (d658 = (f658.length - this.c) / this.u[2] / 2 * 258 | 0) < g658.length ? g658.length + d658 : g658.length << 1 : g658.length * e658, e655 ? (b658 = new Uint8Array(c658)).set(g658) : b658 = g658, this.a = b658;
                }, w654.prototype.t = function () {
                    var r657, s657, t657, u657, v657, w657 = 0, x657 = this.a, y657 = this.k, z657 = new (e655 ? Uint8Array : Array)(this.q + (this.b - 32768));
                    if (0 === y657.length)
                        return e655 ? this.a.subarray(32768, this.b) : this.a.slice(32768, this.b);
                    for (s657 = 0, t657 = y657.length; s657 < t657; ++s657)
                        for (u657 = 0, v657 = (r657 = y657[s657]).length; u657 < v657; ++u657)
                            z657[w657++] = r657[u657];
                    for (s657 = 32768, t657 = this.b; s657 < t657; ++s657)
                        z657[w657++] = x657[s657];
                    return this.k = [], this.buffer = z657;
                }, w654.prototype.H = function () {
                    var p657, q657 = this.b;
                    return e655 ? this.B ? (p657 = new Uint8Array(q657)).set(this.a.subarray(0, q657)) : p657 = this.a.subarray(0, q657) : (this.a.length > q657 && (this.a.length = q657), p657 = this.a), this.buffer = p657;
                }, a655.prototype.p = function () {
                    var n657, o657 = this.input;
                    return n657 = this.A.p(), this.c = this.A.c, this.M && (o657[this.c++] << 24 | o657[this.c++] << 16 | o657[this.c++] << 8 | o657[this.c++]) >>> 0 !== l654(n657) && j654(Error("invalid adler-32 checksum")), n657;
                }, k654("Zlib.Inflate", a655), k654("Zlib.Inflate.BufferType", w655), w655.ADAPTIVE = w655.C, w655.BLOCK = w655.D, k654("Zlib.Inflate.prototype.decompress", a655.prototype.p);
                var p656, q656, r656 = new (e655 ? Uint8Array : Array)(288);
                for (p656 = 0, q656 = r656.length; p656 < q656; ++p656)
                    r656[p656] = 143 >= p656 ? 8 : 255 >= p656 ? 9 : 279 >= p656 ? 7 : 8;
                o654(r656);
                var s656, t656, u656 = new (e655 ? Uint8Array : Array)(30);
                for (s656 = 0, t656 = u656.length; s656 < t656; ++s656)
                    u656[s656] = 5;
                o654(u656);
                var v656 = 8;
            }).call(c227);
            var d227 = c227.Zlib;
            d227.Deflate = d227.Deflate, d227.Deflate.compress = d227.Deflate.compress, d227.Inflate = d227.Inflate, d227.Inflate.BufferType = d227.Inflate.BufferType, d227.Inflate.prototype.decompress = d227.Inflate.prototype.decompress;
            class e227 {
                constructor(r653) {
                    let s653;
                    this.pos = 8, this.palette = [], this.imgData = [], this.text = {}, this.width = 0, this.height = 0, this.bits = 0, this.colorType = 0, this.compressionMethod = 0, this.filterMethod = 0, this.interlaceMethod = 0, this.colors = 0, this.hasAlphaChannel = !1, this.pixelBitlength = 0, this.data = r653, this.transparency = {
                        indexed: [],
                        rgb: 0,
                        grayscale: 0
                    };
                    let t653 = 0, u653 = 0, v653 = 0;
                    for (;;) {
                        v653 = this.readUInt32();
                        const w653 = (() => {
                            const i654 = [];
                            for (t653 = 0; t653 < 4; ++t653)
                                i654.push(String.fromCharCode(this.data[this.pos++]));
                            return i654;
                        }).call(this).join("");
                        switch (w653) {
                            case "IHDR":
                                this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
                                break;
                            case "acTL":
                                this.animation = {
                                    numFrames: this.readUInt32(),
                                    numPlays: this.readUInt32() || 1 / 0,
                                    frames: []
                                };
                                break;
                            case "PLTE":
                                this.palette = this.read(v653);
                                break;
                            case "fcTL":
                                s653 && this.animation.frames.push(s653), this.pos += 4, s653 = {
                                    width: this.readUInt32(),
                                    height: this.readUInt32(),
                                    xOffset: this.readUInt32(),
                                    yOffset: this.readUInt32()
                                };
                                const y653 = this.readUInt16(), z653 = this.readUInt16() || 100;
                                s653.delay = 1e3 * y653 / z653, s653.disposeOp = this.data[this.pos++], s653.blendOp = this.data[this.pos++], s653.data = [];
                                break;
                            case "IDAT":
                            case "fdAT":
                                for ("fdAT" === w653 && (this.pos += 4, v653 -= 4), r653 = (null != s653 ? s653.data : void 0) || this.imgData, t653 = 0; v653 >= 0 ? t653 < v653 : t653 > v653; v653 >= 0 ? ++t653 : --t653)
                                    r653.push(this.data[this.pos++]);
                                break;
                            case "tRNS":
                                switch ((this.transparency = {}, this.colorType)) {
                                    case 3:
                                        this.transparency.indexed = this.read(v653);
                                        const h654 = 255 - this.transparency.indexed.length;
                                        if (h654 > 0)
                                            for (u653 = 0; h654 >= 0 ? u653 < h654 : u653 > h654; h654 >= 0 ? ++u653 : --u653)
                                                this.transparency.indexed.push(255);
                                        break;
                                    case 0:
                                        this.transparency.grayscale = this.read(v653)[0];
                                        break;
                                    case 2:
                                        this.transparency.rgb = this.read(v653);
                                }
                                break;
                            case "tEXt":
                                const a654 = this.read(v653), b654 = a654.indexOf(0), c654 = String.fromCharCode.apply(String, a654.slice(0, b654));
                                this.text[c654] = String.fromCharCode.apply(String, a654.slice(b654 + 1));
                                break;
                            case "IEND":
                                s653 && this.animation.frames.push(s653), this.colors = (() => {
                                    switch (this.colorType) {
                                        case 0:
                                        case 3:
                                        case 4:
                                            return 1;
                                        case 2:
                                        case 6:
                                            return 3;
                                    }
                                }).call(this);
                                const d654 = this.colorType;
                                this.hasAlphaChannel = 4 === d654 || 6 === d654;
                                const e654 = this.colors + (this.hasAlphaChannel ? 1 : 0);
                                return this.pixelBitlength = this.bits * e654, this.colorSpace = (() => {
                                    switch (this.colors) {
                                        case 1:
                                            return "DeviceGray";
                                        case 3:
                                            return "DeviceRGB";
                                    }
                                }).call(this), void (this.imgData instanceof Uint8Array || (this.imgData = new Uint8Array(this.imgData)));
                            default:
                                this.pos += v653;
                        }
                        if (this.pos += 4, this.pos > this.data.length)
                            throw new Error(b126(6017));
                    }
                }
                read(o653) {
                    let p653 = 0;
                    const q653 = [];
                    for (p653 = 0; o653 >= 0 ? p653 < o653 : p653 > o653; o653 >= 0 ? ++p653 : --p653)
                        q653.push(this.data[this.pos++]);
                    return q653;
                }
                readUInt32() {
                    return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
                }
                readUInt16() {
                    return this.data[this.pos++] << 8 | this.data[this.pos++];
                }
                decodePixels(q652) {
                    if (null == q652 && (q652 = this.imgData), 0 === q652.length)
                        return new Uint8Array(0);
                    q652 = new d227.Inflate(q652, {
                        index: 0,
                        verify: !1
                    }).decompress();
                    const r652 = this.pixelBitlength / 8, s652 = r652 * this.width, t652 = new Uint8Array(s652 * this.height), u652 = q652.length;
                    let v652 = 0, w652 = 0, x652 = 0, y652 = 0, z652 = 0, a653 = 0, b653 = 0, c653 = 0, d653 = 0, e653 = 0, f653 = 0, g653 = 0, h653 = 0, i653 = 0, j653 = 0, k653 = 0, l653 = 0, m653 = 0, n653 = 0;
                    for (; w652 < u652;) {
                        switch (q652[w652++]) {
                            case 0:
                                for (a653 = b653 = 0; b653 < s652; a653 = b653 += 1)
                                    t652[x652++] = q652[w652++];
                                break;
                            case 1:
                                for (a653 = c653 = 0; c653 < s652; a653 = c653 += 1)
                                    y652 = q652[w652++], g653 = a653 < r652 ? 0 : t652[x652 - r652], t652[x652++] = (y652 + g653) % 256;
                                break;
                            case 2:
                                for (a653 = d653 = 0; d653 < s652; a653 = d653 += 1)
                                    y652 = q652[w652++], z652 = (a653 - a653 % r652) / r652, m653 = v652 && t652[(v652 - 1) * s652 + z652 * r652 + a653 % r652], t652[x652++] = (m653 + y652) % 256;
                                break;
                            case 3:
                                for (a653 = e653 = 0; e653 < s652; a653 = e653 += 1)
                                    y652 = q652[w652++], z652 = (a653 - a653 % r652) / r652, g653 = a653 < r652 ? 0 : t652[x652 - r652], m653 = v652 && t652[(v652 - 1) * s652 + z652 * r652 + a653 % r652], t652[x652++] = (y652 + Math.floor((g653 + m653) / 2)) % 256;
                                break;
                            case 4:
                                for (a653 = f653 = 0; f653 < s652; a653 = f653 += 1)
                                    y652 = q652[w652++], z652 = (a653 - a653 % r652) / r652, g653 = a653 < r652 ? 0 : t652[x652 - r652], 0 === v652 ? m653 = n653 = 0 : (m653 = t652[(v652 - 1) * s652 + z652 * r652 + a653 % r652], n653 = z652 && t652[(v652 - 1) * s652 + (z652 - 1) * r652 + a653 % r652]), h653 = g653 + m653 - n653, i653 = Math.abs(h653 - g653), k653 = Math.abs(h653 - m653), l653 = Math.abs(h653 - n653), j653 = i653 <= k653 && i653 <= l653 ? g653 : k653 <= l653 ? m653 : n653, t652[x652++] = (y652 + j653) % 256;
                                break;
                            default:
                                throw new Error(b126(6018, q652[w652 - 1]));
                        }
                        v652++;
                    }
                    return t652;
                }
                copyToImageData(e652, f652) {
                    let g652, h652 = this.hasAlphaChannel, i652 = this.colors;
                    this.palette.length && (g652 = null != this._decodedPalette ? this._decodedPalette : this._decodedPalette = this.decodePalette(), i652 = 4, h652 = !0);
                    const j652 = e652.data || e652, k652 = j652.length, l652 = g652 || f652;
                    let m652 = 0, n652 = 0, o652 = 0, p652 = 0;
                    if (1 === i652)
                        for (; m652 < k652;)
                            o652 = g652 ? 4 * f652[m652 / 4] : n652, p652 = l652[o652++], j652[m652++] = p652, j652[m652++] = p652, j652[m652++] = p652, j652[m652++] = h652 ? l652[o652++] : 255, n652 = o652;
                    else
                        for (; m652 < k652;)
                            o652 = g652 ? 4 * f652[m652 / 4] : n652, j652[m652++] = l652[o652++], j652[m652++] = l652[o652++], j652[m652++] = l652[o652++], j652[m652++] = h652 ? l652[o652++] : 255, n652 = o652;
                }
                decodePalette() {
                    const v651 = this.palette, w651 = this.transparency.indexed || [], x651 = new Uint8Array((w651.length || 0) + v651.length);
                    let y651 = 0, z651 = 0, a652 = 0;
                    for (let b652 = 0, c652 = 0, d652 = v651.length; c652 < d652; b652 = c652 += 3)
                        x651[y651++] = v651[b652], x651[y651++] = v651[b652 + 1], x651[y651++] = v651[b652 + 2], a652 = w651[z651++], x651[y651++] = null != a652 ? a652 : 255;
                    return x651;
                }
                render(s651) {
                    s651.width = this.width, s651.height = this.height;
                    const t651 = s651.getContext("2d"), u651 = t651.createImageData(this.width, this.height);
                    return this.copyToImageData(u651, this.decodePixels(null)), t651.putImageData(u651, 0, 0);
                }
            }
            class f227 {
                constructor() {
                    this._littleEndian = !1, this._tiffData = [], this._fileDirectories = [];
                }
                getUint8(r651) {
                    return this._tiffData[r651];
                }
                getUint16(q651) {
                    return this._littleEndian ? this._tiffData[q651 + 1] << 8 | this._tiffData[q651] : this._tiffData[q651] << 8 | this._tiffData[q651 + 1];
                }
                getUint32(o651) {
                    const p651 = this._tiffData;
                    return this._littleEndian ? p651[o651 + 3] << 24 | p651[o651 + 2] << 16 | p651[o651 + 1] << 8 | p651[o651] : p651[o651] << 24 | p651[o651 + 1] << 16 | p651[o651 + 2] << 8 | p651[o651 + 3];
                }
                checkLittleEndian() {
                    const n651 = this.getUint16(0);
                    if (18761 === n651)
                        this._littleEndian = !0;
                    else {
                        if (19789 !== n651)
                            throw console.log(n651), TypeError(b126(6019));
                        this._littleEndian = !1;
                    }
                    return this._littleEndian;
                }
                hasTowel() {
                    if (42 !== this.getUint16(2))
                        throw RangeError(b126(6020));
                    return !0;
                }
                getFieldTypeName(m651) {
                    return m651 in h227 ? h227[m651] : null;
                }
                getFieldTagName(l651) {
                    return l651 in g227 ? g227[l651] : (x125(6021, l651), `Tag${l651}`);
                }
                getFieldTypeLength(k651) {
                    return -1 !== ["BYTE", "ASCII", "SBYTE", "UNDEFINED"].indexOf(k651) ? 1 : -1 !== ["SHORT", "SSHORT"].indexOf(k651) ? 2 : -1 !== ["LONG", "SLONG", "FLOAT"].indexOf(k651) ? 4 : -1 !== ["RATIONAL", "SRATIONAL", "DOUBLE"].indexOf(k651) ? 8 : 0;
                }
                getFieldValues(y650, z650, a651, b651) {
                    const c651 = [], d651 = this.getFieldTypeLength(z650);
                    if (d651 * a651 <= 4)
                        !1 === this._littleEndian ? c651.push(b651 >>> 8 * (4 - d651)) : c651.push(b651);
                    else
                        for (let i651 = 0; i651 < a651; i651++) {
                            const j651 = d651 * i651;
                            d651 >= 8 ? -1 !== ["RATIONAL", "SRATIONAL"].indexOf(z650) ? (c651.push(this.getUint32(b651 + j651)), c651.push(this.getUint32(b651 + j651 + 4))) : x125(8e3) : c651.push(this.getBytes(d651, b651 + j651));
                        }
                    return "ASCII" === z650 && c651.forEach((f651, g651, h651) => {
                        h651[g651] = String.fromCharCode(f651);
                    }), c651;
                }
                getBytes(w650, x650) {
                    if (w650 <= 0)
                        x125(8001);
                    else {
                        if (w650 <= 1)
                            return this.getUint8(x650);
                        if (w650 <= 2)
                            return this.getUint16(x650);
                        if (w650 <= 3)
                            return this.getUint32(x650) >>> 8;
                        if (w650 <= 4)
                            return this.getUint32(x650);
                        x125(8002);
                    }
                    return 0;
                }
                getBits(o650, p650, q650) {
                    q650 = q650 || 0;
                    const r650 = p650 + Math.floor(q650 / 8), s650 = q650 + o650, t650 = 32 - o650;
                    let u650 = 0, v650 = 0;
                    return s650 <= 0 ? x125(6023) : s650 <= 8 ? (u650 = 24 + q650, v650 = this.getUint8(r650)) : s650 <= 16 ? (u650 = 16 + q650, v650 = this.getUint16(r650)) : s650 <= 32 ? (u650 = q650, v650 = this.getUint32(r650)) : x125(6022), {
                        bits: v650 << u650 >>> t650,
                        byteOffset: r650 + Math.floor(s650 / 8),
                        bitOffset: s650 % 8
                    };
                }
                parseFileDirectory(b650) {
                    const c650 = this.getUint16(b650), d650 = [];
                    let e650 = 0, f650 = 0;
                    for (e650 = b650 + 2, f650 = 0; f650 < c650; e650 += 12, f650++) {
                        const h650 = this.getUint16(e650), i650 = this.getUint16(e650 + 2), j650 = this.getUint32(e650 + 4), k650 = this.getUint32(e650 + 8), l650 = this.getFieldTagName(h650), m650 = this.getFieldTypeName(i650), n650 = this.getFieldValues(l650, m650, j650, k650);
                        d650[l650] = {
                            type: m650,
                            values: n650
                        };
                    }
                    this._fileDirectories.push(d650);
                    const g650 = this.getUint32(e650);
                    0 !== g650 && this.parseFileDirectory(g650);
                }
                clampColorSample(y649, z649) {
                    const a650 = Math.pow(2, 8 - z649);
                    return Math.floor(y649 * a650 + (a650 - 1));
                }
                parseTIFF(g647, h647) {
                    if (h647 = h647 || u143.document.createElement("canvas"), this._tiffData = g647, this._canvas = h647, this.checkLittleEndian(), !this.hasTowel())
                        return;
                    const i647 = this.getUint32(4);
                    this._fileDirectories.length = 0, this.parseFileDirectory(i647);
                    const j647 = this._fileDirectories[0], k647 = j647.ImageWidth.values[0], l647 = j647.ImageLength.values[0];
                    this._canvas.width = k647, this._canvas.height = l647;
                    const m647 = [], n647 = j647.Compression ? j647.Compression.values[0] : 1, o647 = j647.SamplesPerPixel.values[0], p647 = [];
                    let q647 = 0, r647 = !1;
                    j647.BitsPerSample.values.forEach((w649, x649) => {
                        p647[x649] = {
                            bitsPerSample: w649,
                            hasBytesPerSample: !1,
                            bytesPerSample: void 0
                        }, w649 % 8 == 0 && (p647[x649].hasBytesPerSample = !0, p647[x649].bytesPerSample = w649 / 8), q647 += w649;
                    }, this);
                    let s647 = 0;
                    q647 % 8 == 0 && (r647 = !0, s647 = q647 / 8);
                    const t647 = j647.StripOffsets.values, u647 = t647.length;
                    let v647;
                    if (j647.StripByteCounts)
                        v647 = j647.StripByteCounts.values;
                    else {
                        if (x125(8003), 1 !== u647)
                            throw Error(b126(6024));
                        v647 = [Math.ceil(k647 * l647 * q647 / 8)];
                    }
                    let w647 = 1, x647 = 1;
                    for (let d649 = 0; d649 < u647; d649++) {
                        const e649 = t647[d649];
                        m647[d649] = [];
                        const f649 = v647[d649];
                        for (let g649 = 0, h649 = 0, i649 = 1, j649 = !0, k649 = [], l649 = 0, m649 = 0, n649 = 0; g649 < f649; g649 += i649)
                            switch (n647) {
                                case 1:
                                    k649 = [];
                                    for (let s649 = 0; s649 < o647; s649++) {
                                        const t649 = p647[s649];
                                        if (!t649.hasBytesPerSample) {
                                            const v649 = this.getBits(t649.bitsPerSample, e649 + g649, h649);
                                            throw k649.push(v649.bits), g649 = v649.byteOffset - e649, h649 = v649.bitOffset, RangeError(b126(6025));
                                        }
                                        {
                                            const u649 = t649.bytesPerSample * s649;
                                            k649.push(this.getBytes(t649.bytesPerSample, e649 + g649 + u649));
                                        }
                                    }
                                    if (m647[d649].push(k649), !r647)
                                        throw i649 = 0, RangeError(b126(6026));
                                    i649 = s647;
                                    break;
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                    break;
                                case 32773:
                                    if (j649) {
                                        j649 = !1;
                                        const r649 = this.getUint8(e649 + g649);
                                        r649 >= 0 && r649 <= 127 ? w647 = r649 + 1 : r649 >= -127 && r649 <= -1 ? x647 = 1 - r649 : j649 = !0;
                                    }
                                    else {
                                        const o649 = this.getUint8(e649 + g649);
                                        for (let p649 = 0; p649 < x647; p649++) {
                                            const q649 = p647[m649];
                                            if (!q649.hasBytesPerSample)
                                                throw RangeError(b126(6025));
                                            n649 = n649 << 8 * l649 | o649, l649++, l649 === q649.bytesPerSample && (k649.push(n649), n649 = l649 = 0, m649++), m649 === o647 && (m647[d649].push(k649), k649 = [], m649 = 0);
                                        }
                                        w647--, 0 === w647 && (j649 = !0);
                                    }
                                    i649 = 1;
                            }
                    }
                    if (h647.getContext) {
                        const z647 = this._canvas.getContext("2d");
                        z647.fillStyle = "rgba(255, 255, 255, 0)";
                        const a648 = j647.RowsPerStrip ? j647.RowsPerStrip.values[0] : l647, b648 = m647.length, c648 = l647 % a648, d648 = 0 === c648 ? a648 : c648;
                        let e648 = a648, f648 = 0;
                        const g648 = j647.PhotometricInterpretation.values[0];
                        let h648 = [], i648 = 0;
                        j647.ExtraSamples && (h648 = j647.ExtraSamples.values, i648 = h648.length);
                        let j648 = [], k648 = 0;
                        j647.ColorMap && (j648 = j647.ColorMap.values, k648 = Math.pow(2, p647[0].bitsPerSample));
                        for (let l648 = 0; l648 < b648; l648++) {
                            l648 + 1 === b648 && (e648 = d648);
                            const m648 = m647[l648].length, n648 = f648 * l648;
                            for (let o648 = 0, p648 = 0; o648 < e648 && p648 < m648; o648++)
                                for (let q648 = 0; q648 < k647; q648++, p648++) {
                                    const r648 = m647[l648][p648];
                                    let s648 = 0, t648 = 0, u648 = 0, v648 = 1;
                                    if (i648 > 0)
                                        for (let c649 = 0; c649 < i648; c649++)
                                            if (1 === h648[c649] || 2 === h648[c649]) {
                                                v648 = r648[3 + c649] / 256;
                                                break;
                                            }
                                    switch (g648) {
                                        case 0:
                                            let w648 = 0;
                                            p647[0].hasBytesPerSample && (w648 = Math.pow(16, 2 * p647[0].bytesPerSample)), r648.forEach((z648, a649, b649) => {
                                                b649[a649] = w648 - z648;
                                            });
                                        case 1:
                                            s648 = t648 = u648 = this.clampColorSample(r648[0], p647[0].bitsPerSample);
                                            break;
                                        case 2:
                                            s648 = this.clampColorSample(r648[0], p647[0].bitsPerSample), t648 = this.clampColorSample(r648[1], p647[1].bitsPerSample), u648 = this.clampColorSample(r648[2], p647[2].bitsPerSample);
                                            break;
                                        case 3:
                                            if (void 0 === j648)
                                                throw Error(b126(6027));
                                            const x648 = r648[0];
                                            s648 = this.clampColorSample(j648[x648], 16), t648 = this.clampColorSample(j648[k648 + x648], 16), u648 = this.clampColorSample(j648[2 * k648 + x648], 16);
                                            break;
                                        default:
                                            throw RangeError(b126(6028, g648));
                                    }
                                    z647.fillStyle = `rgba(${s648}, ${t648}, ${u648}, ${v648})`, z647.fillRect(q648, n648 + o648, 1, 1);
                                }
                            f648 = e648;
                        }
                    }
                    return this._canvas;
                }
            }
            const g227 = {
                315: "Artist",
                258: "BitsPerSample",
                265: "CellLength",
                264: "CellWidth",
                320: "ColorMap",
                259: "Compression",
                33432: "Copyright",
                306: "DateTime",
                338: "ExtraSamples",
                266: "FillOrder",
                289: "FreeByteCounts",
                288: "FreeOffsets",
                291: "GrayResponseCurve",
                290: "GrayResponseUnit",
                316: "HostComputer",
                270: "ImageDescription",
                257: "ImageLength",
                256: "ImageWidth",
                271: "Make",
                281: "MaxSampleValue",
                280: "MinSampleValue",
                272: "Model",
                254: "NewSubfileType",
                274: "Orientation",
                262: "PhotometricInterpretation",
                284: "PlanarConfiguration",
                296: "ResolutionUnit",
                278: "RowsPerStrip",
                277: "SamplesPerPixel",
                305: "Software",
                279: "StripByteCounts",
                273: "StripOffsets",
                255: "SubfileType",
                263: "Threshholding",
                282: "XResolution",
                283: "YResolution",
                326: "BadFaxLines",
                327: "CleanFaxData",
                343: "ClipPath",
                328: "ConsecutiveBadFaxLines",
                433: "Decode",
                434: "DefaultImageColor",
                269: "DocumentName",
                336: "DotRange",
                321: "HalftoneHints",
                346: "Indexed",
                347: "JPEGTables",
                285: "PageName",
                297: "PageNumber",
                317: "Predictor",
                319: "PrimaryChromaticities",
                532: "ReferenceBlackWhite",
                339: "SampleFormat",
                559: "StripRowCounts",
                330: "SubIFDs",
                292: "T4Options",
                293: "T6Options",
                325: "TileByteCounts",
                323: "TileLength",
                324: "TileOffsets",
                322: "TileWidth",
                301: "TransferFunction",
                318: "WhitePoint",
                344: "XClipPathUnits",
                286: "XPosition",
                529: "YCbCrCoefficients",
                531: "YCbCrPositioning",
                530: "YCbCrSubSampling",
                345: "YClipPathUnits",
                287: "YPosition",
                37378: "ApertureValue",
                40961: "ColorSpace",
                36868: "DateTimeDigitized",
                36867: "DateTimeOriginal",
                34665: "Exif IFD",
                36864: "ExifVersion",
                33434: "ExposureTime",
                41728: "FileSource",
                37385: "Flash",
                40960: "FlashpixVersion",
                33437: "FNumber",
                42016: "ImageUniqueID",
                37384: "LightSource",
                37500: "MakerNote",
                37377: "ShutterSpeedValue",
                37510: "UserComment",
                33723: "IPTC",
                34675: "ICC Profile",
                700: "XMP",
                42112: "GDAL_METADATA",
                42113: "GDAL_NODATA",
                34377: "Photoshop"
            }, h227 = {
                1: "BYTE",
                2: "ASCII",
                3: "SHORT",
                4: "LONG",
                5: "RATIONAL",
                6: "SBYTE",
                7: "UNDEFINED",
                8: "SSHORT",
                9: "SLONG",
                10: "SRATIONAL",
                11: "FLOAT",
                12: "DOUBLE"
            }, i227 = new Array(123);
            for (let f647 = 0; f647 < 123; ++f647)
                i227[f647] = 64;
            for (let e647 = 0; e647 < 64; ++e647)
                i227["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(e647)] = e647;
            var j227 = {
                name: "Jacob__Codec__Base64",
                decode: function (v646) {
                    var w646, x646, y646, z646, a647, b647, c647 = [], d647 = 0;
                    for (v646 = v646.replace(/[^A-Za-z0-9\+\/\=]/g, ""); d647 < v646.length;)
                        w646 = i227[v646.charCodeAt(d647++)] << 2 | (z646 = i227[v646.charCodeAt(d647++)]) >> 4, x646 = (15 & z646) << 4 | (a647 = i227[v646.charCodeAt(d647++)]) >> 2, y646 = (3 & a647) << 6 | (b647 = i227[v646.charCodeAt(d647++)]), c647.push(String.fromCharCode(w646)), 64 !== a647 && c647.push(String.fromCharCode(x646)), 64 !== b647 && c647.push(String.fromCharCode(y646));
                    return c647.join("");
                },
                decodeAsArray: function (o646, p646) {
                    var q646, r646, s646, t646 = this.decode(o646), u646 = [];
                    for (q646 = 0, s646 = t646.length / p646; q646 < s646; q646++)
                        for (u646[q646] = 0, r646 = p646 - 1; r646 >= 0; --r646)
                            u646[q646] += t646.charCodeAt(q646 * p646 + r646) << 8 * r646;
                    return u646;
                }
            }, k227 = function (n646) {
                this.data = n646, this.debug = !1, this.gpflags = void 0, this.files = 0, this.unzipped = [], this.buf32k = new Array(32768), this.bIdx = 0, this.modeZIP = !1, this.bytepos = 0, this.bb = 1, this.bits = 0, this.nameBuf = [], this.fileout = void 0, this.literalTree = new Array(k227.LITERALS), this.distanceTree = new Array(32), this.treepos = 0, this.Places = null, this.len = 0, this.fpos = new Array(17), this.fpos[0] = 0, this.flens = void 0, this.fmax = void 0;
            };
            k227.gunzip = function (m646) {
                return m646.constructor === Array || m646.constructor, new k227(m646).gunzip()[0][0];
            }, k227.HufNode = function () {
                this.b0 = 0, this.b1 = 0, this.jump = null, this.jumppos = -1;
            }, k227.LITERALS = 288, k227.NAMEMAX = 256, k227.bitReverse = [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255], k227.cplens = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], k227.cplext = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99], k227.cpdist = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577], k227.cpdext = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], k227.border = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], k227.prototype.gunzip = function () {
                return this.outputArr = [], this.nextFile(), this.unzipped;
            }, k227.prototype.readByte = function () {
                return this.bits += 8, this.bytepos < this.data.length ? this.data.charCodeAt(this.bytepos++) : -1;
            }, k227.prototype.byteAlign = function () {
                this.bb = 1;
            }, k227.prototype.readBit = function () {
                var l646;
                return this.bits++, l646 = 1 & this.bb, this.bb >>= 1, 0 === this.bb && (this.bb = this.readByte(), l646 = 1 & this.bb, this.bb = this.bb >> 1 | 128), l646;
            }, k227.prototype.readBits = function (i646) {
                for (var j646 = 0, k646 = i646; k646--;)
                    j646 = j646 << 1 | this.readBit();
                return i646 && (j646 = k227.bitReverse[j646] >> 8 - i646), j646;
            }, k227.prototype.flushBuffer = function () {
                this.bIdx = 0;
            }, k227.prototype.addBuffer = function (h646) {
                this.buf32k[this.bIdx++] = h646, this.outputArr.push(String.fromCharCode(h646)), 32768 === this.bIdx && (this.bIdx = 0);
            }, k227.prototype.IsPat = function () {
                for (;;) {
                    if (this.fpos[this.len] >= this.fmax)
                        return -1;
                    if (this.flens[this.fpos[this.len]] === this.len)
                        return this.fpos[this.len]++;
                    this.fpos[this.len]++;
                }
            }, k227.prototype.Rec = function () {
                var f646, g646 = this.Places[this.treepos];
                if (17 === this.len)
                    return -1;
                if (this.treepos++, this.len++, (f646 = this.IsPat()) >= 0)
                    g646.b0 = f646;
                else if (g646.b0 = 32768, this.Rec())
                    return -1;
                if ((f646 = this.IsPat()) >= 0)
                    g646.b1 = f646, g646.jump = null;
                else if (g646.b1 = 32768, g646.jump = this.Places[this.treepos], g646.jumppos = this.treepos, this.Rec())
                    return -1;
                return this.len--, 0;
            }, k227.prototype.CreateTree = function (b646, c646, d646) {
                var e646;
                for (this.Places = b646, this.treepos = 0, this.flens = d646, this.fmax = c646, e646 = 0; e646 < 17; e646++)
                    this.fpos[e646] = 0;
                return this.len = 0, this.Rec() ? -1 : 0;
            }, k227.prototype.DecodeValue = function (w645) {
                for (var x645, y645, z645 = 0, a646 = w645[z645];;)
                    if (this.readBit()) {
                        if (!(32768 & a646.b1))
                            return a646.b1;
                        for (a646 = a646.jump, x645 = w645.length, y645 = 0; y645 < x645; y645++)
                            if (w645[y645] === a646) {
                                z645 = y645;
                                break;
                            }
                    }
                    else {
                        if (!(32768 & a646.b0))
                            return a646.b0;
                        a646 = w645[++z645];
                    }
                return -1;
            }, k227.prototype.DeflateLoop = function () {
                var g645, h645, i645;
                do {
                    var j645, k645;
                    if (g645 = this.readBit(), 0 === (h645 = this.readBits(2)))
                        for (this.byteAlign(), j645 = this.readByte(), j645 |= this.readByte() << 8, k645 = this.readByte(), 65535 & (j645 ^ ~(k645 |= this.readByte() << 8)) && document.write("BlockLen checksum mismatch\n"); j645--;)
                            l645 = this.readByte(), this.addBuffer(l645);
                    else if (1 === h645) {
                        for (;;)
                            if ((m645 = k227.bitReverse[this.readBits(7)] >> 1) > 23 ? (m645 = m645 << 1 | this.readBit()) > 199 ? m645 = (m645 -= 128) << 1 | this.readBit() : (m645 -= 48) > 143 && (m645 += 136) : m645 += 256, m645 < 256)
                                this.addBuffer(m645);
                            else {
                                if (256 === m645)
                                    break;
                                for (m645 -= 257, u645 = this.readBits(k227.cplext[m645]) + k227.cplens[m645], m645 = k227.bitReverse[this.readBits(5)] >> 3, k227.cpdext[m645] > 8 ? (v645 = this.readBits(8), v645 |= this.readBits(k227.cpdext[m645] - 8) << 8) : v645 = this.readBits(k227.cpdext[m645]), v645 += k227.cpdist[m645], m645 = 0; m645 < u645; m645++) {
                                    var l645 = this.buf32k[this.bIdx - v645 & 32767];
                                    this.addBuffer(l645);
                                }
                            }
                    }
                    else if (2 === h645) {
                        var m645, n645, o645, p645, q645, r645 = new Array(320);
                        for (o645 = 257 + this.readBits(5), p645 = 1 + this.readBits(5), q645 = 4 + this.readBits(4), m645 = 0; m645 < 19; m645++)
                            r645[m645] = 0;
                        for (m645 = 0; m645 < q645; m645++)
                            r645[k227.border[m645]] = this.readBits(3);
                        for (u645 = this.distanceTree.length, i645 = 0; i645 < u645; i645++)
                            this.distanceTree[i645] = new k227.HufNode();
                        if (this.CreateTree(this.distanceTree, 19, r645, 0))
                            return this.flushBuffer(), 1;
                        for (n645 = o645 + p645, i645 = 0; i645 < n645;)
                            if ((m645 = this.DecodeValue(this.distanceTree)) < 16)
                                r645[i645++] = m645;
                            else if (16 === m645) {
                                var s645;
                                if (i645 + (m645 = 3 + this.readBits(2)) > n645)
                                    return this.flushBuffer(), 1;
                                for (s645 = i645 ? r645[i645 - 1] : 0; m645--;)
                                    r645[i645++] = s645;
                            }
                            else {
                                if (i645 + (m645 = 17 === m645 ? 3 + this.readBits(3) : 11 + this.readBits(7)) > n645)
                                    return this.flushBuffer(), 1;
                                for (; m645--;)
                                    r645[i645++] = 0;
                            }
                        for (u645 = this.literalTree.length, i645 = 0; i645 < u645; i645++)
                            this.literalTree[i645] = new k227.HufNode();
                        if (this.CreateTree(this.literalTree, o645, r645, 0))
                            return this.flushBuffer(), 1;
                        for (u645 = this.literalTree.length, i645 = 0; i645 < u645; i645++)
                            this.distanceTree[i645] = new k227.HufNode();
                        var t645 = new Array();
                        for (i645 = o645; i645 < r645.length; i645++)
                            t645[i645 - o645] = r645[i645];
                        if (this.CreateTree(this.distanceTree, p645, t645, 0))
                            return this.flushBuffer(), 1;
                        for (;;)
                            if ((m645 = this.DecodeValue(this.literalTree)) >= 256) {
                                var u645, v645;
                                if (0 == (m645 -= 256))
                                    break;
                                for (m645--, u645 = this.readBits(k227.cplext[m645]) + k227.cplens[m645], m645 = this.DecodeValue(this.distanceTree), k227.cpdext[m645] > 8 ? (v645 = this.readBits(8), v645 |= this.readBits(k227.cpdext[m645] - 8) << 8) : v645 = this.readBits(k227.cpdext[m645]), v645 += k227.cpdist[m645]; u645--;)
                                    l645 = this.buf32k[this.bIdx - v645 & 32767], this.addBuffer(l645);
                            }
                            else
                                this.addBuffer(m645);
                    }
                } while (!g645);
                return this.flushBuffer(), this.byteAlign(), 0;
            }, k227.prototype.unzipFile = function (e645) {
                var f645;
                for (this.gunzip(), f645 = 0; f645 < this.unzipped.length; f645++)
                    if (this.unzipped[f645][1] === e645)
                        return this.unzipped[f645][0];
            }, k227.prototype.nextFile = function () {
                this.outputArr = [], this.modeZIP = !1;
                var y644 = [];
                if (y644[0] = this.readByte(), y644[1] = this.readByte(), 120 === y644[0] && 218 === y644[1] && (this.DeflateLoop(), this.unzipped[this.files] = [this.outputArr.join(""), "geonext.gxt"], this.files++), 31 === y644[0] && 139 === y644[1] && (this.skipdir(), this.unzipped[this.files] = [this.outputArr.join(""), "file"], this.files++), 80 === y644[0] && 75 === y644[1] && (this.modeZIP = !0, y644[2] = this.readByte(), y644[3] = this.readByte(), 3 === y644[2] && 4 === y644[3])) {
                    y644[0] = this.readByte(), y644[1] = this.readByte(), this.gpflags = this.readByte(), this.gpflags |= this.readByte() << 8;
                    var z644 = this.readByte();
                    z644 |= this.readByte() << 8, this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte();
                    var a645 = this.readByte();
                    a645 |= this.readByte() << 8;
                    var b645 = this.readByte();
                    for (b645 |= this.readByte() << 8, d645 = 0, this.nameBuf = []; a645--;) {
                        var c645 = this.readByte();
                        "/" === c645 | ":" === c645 ? d645 = 0 : d645 < k227.NAMEMAX - 1 && (this.nameBuf[d645++] = String.fromCharCode(c645));
                    }
                    this.fileout || (this.fileout = this.nameBuf);
                    for (var d645 = 0; d645 < b645;)
                        c645 = this.readByte(), d645++;
                    8 === z644 && (this.DeflateLoop(), this.unzipped[this.files] = [this.outputArr.join(""), this.nameBuf.join("")], this.files++), this.skipdir();
                }
            }, k227.prototype.skipdir = function () {
                var v644, w644, x644 = [];
                if (8 & this.gpflags && (x644[0] = this.readByte(), x644[1] = this.readByte(), x644[2] = this.readByte(), x644[3] = this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte()), this.modeZIP && this.nextFile(), x644[0] = this.readByte(), 8 !== x644[0])
                    return 0;
                if (this.gpflags = this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), 4 & this.gpflags)
                    for (x644[0] = this.readByte(), x644[2] = this.readByte(), this.len = x644[0] + 256 * x644[1], v644 = 0; v644 < this.len; v644++)
                        this.readByte();
                if (8 & this.gpflags)
                    for (v644 = 0, this.nameBuf = []; w644 = this.readByte();)
                        "7" !== w644 && ":" !== w644 || (v644 = 0), v644 < k227.NAMEMAX - 1 && (this.nameBuf[v644++] = w644);
                if (16 & this.gpflags)
                    for (; w644 = this.readByte();)
                        ;
                2 & this.gpflags && (this.readByte(), this.readByte()), this.DeflateLoop(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.modeZIP && this.nextFile();
            };
            var l227, m227, n227, o227, p227, q227, r227, s227, t227, u227, v227, w227, x227, y227, z227, a228, b228, c228, d228, e228, f228, g228, h228, i228, j228, k228, l228, m228, n228, o228, p228, q228, r228, s228, t228, u228, v228, w228, x228, y228, z228, a229, b229, c229, d229, e229, f229, g229, h229, i229, j229, k229, l229 = {
                name: "Jacob__Codec"
            };
            let m229;
            function s141(s644) {
                const t644 = s644.parent, u644 = s644.getComponent(n229);
                return t644 && u644 ? s141(t644) : s644.getComponentsInChildren(n229);
            }
            l229.Base64 = j227, l229.GZip = k227, l229.unzip = function () {
                return l229.GZip.gunzip.apply(l229.GZip, arguments);
            }, l229.unzipBase64 = function () {
                var q644 = l229.Base64.decode.apply(l229.Base64, arguments);
                try {
                    return l229.GZip.gunzip.call(l229.GZip, q644);
                }
                catch (r644) {
                    return q644.slice(7);
                }
            }, l229.unzipBase64AsArray = function (j644, k644) {
                k644 = k644 || 1;
                var l644, m644, n644, o644 = this.unzipBase64(j644), p644 = [];
                for (l644 = 0, n644 = o644.length / k644; l644 < n644; l644++)
                    for (p644[l644] = 0, m644 = k644 - 1; m644 >= 0; --m644)
                        p644[l644] += o644.charCodeAt(l644 * k644 + m644) << 8 * m644;
                return p644;
            }, l229.unzipAsArray = function (c644, d644) {
                d644 = d644 || 1;
                var e644, f644, g644, h644 = this.unzip(c644), i644 = [];
                for (e644 = 0, g644 = h644.length / d644; e644 < g644; e644++)
                    for (i644[e644] = 0, f644 = d644 - 1; f644 >= 0; --f644)
                        i644[e644] += h644.charCodeAt(e644 * d644 + f644) << 8 * f644;
                return i644;
            }, function (b644) {
                b644[b644.JPG = 0] = "JPG", b644[b644.PNG = 1] = "PNG", b644[b644.TIFF = 2] = "TIFF", b644[b644.WEBP = 3] = "WEBP", b644[b644.PVR = 4] = "PVR", b644[b644.ETC = 5] = "ETC", b644[b644.S3TC = 6] = "S3TC", b644[b644.ATITC = 7] = "ATITC", b644[b644.TGA = 8] = "TGA", b644[b644.RAWDATA = 9] = "RAWDATA", b644[b644.UNKNOWN = 10] = "UNKNOWN";
            }(m229 || (m229 = {}));
            let n229 = g125("ParticleSystem2D", (l227 = e151("cc.ParticleSystem2D"), m227 = a131(b227), n227 = a131(q186), o227 = a131(l226), p227 = a131(k226), q227 = y130("preview"), l227(((k229 = class t extends h191 {
                get custom() {
                    return this._custom;
                }
                set custom(a644) {
                    this._custom !== a644 && (this._custom = a644, this._applyFile(), this._updateMaterial());
                }
                get file() {
                    return this._file;
                }
                set file(z643) {
                    this._file !== z643 && (this._file = z643, z643 ? this._applyFile() : this.custom = !0);
                }
                get spriteFrame() {
                    return this._spriteFrame;
                }
                set spriteFrame(y643) {
                    this._renderSpriteFrame !== y643 && (this._renderSpriteFrame = y643, y643 && !y643._uuid || (this._spriteFrame = y643), this._applySpriteFrame());
                }
                get particleCount() {
                    return this._simulator.particles.length;
                }
                get totalParticles() {
                    return this._totalParticles;
                }
                set totalParticles(x643) {
                    this._totalParticles !== x643 && (this._totalParticles = x643);
                }
                get startColor() {
                    return this._startColor;
                }
                set startColor(w643) {
                    this._startColor.r = w643.r, this._startColor.g = w643.g, this._startColor.b = w643.b, this._startColor.a = w643.a;
                }
                get startColorVar() {
                    return this._startColorVar;
                }
                set startColorVar(v643) {
                    this._startColorVar.r = v643.r, this._startColorVar.g = v643.g, this._startColorVar.b = v643.b, this._startColorVar.a = v643.a;
                }
                set color(u643) { }
                get color() {
                    return this._color;
                }
                get endColor() {
                    return this._endColor;
                }
                set endColor(t643) {
                    this._endColor.r = t643.r, this._endColor.g = t643.g, this._endColor.b = t643.b, this._endColor.a = t643.a;
                }
                get endColorVar() {
                    return this._endColorVar;
                }
                set endColorVar(s643) {
                    this._endColorVar.r = s643.r, this._endColorVar.g = s643.g, this._endColorVar.b = s643.b, this._endColorVar.a = s643.a;
                }
                get positionType() {
                    return this._positionType;
                }
                set positionType(r643) {
                    this._positionType = r643, this._updateMaterial(), this._updatePositionType();
                }
                get preview() {
                    return this._preview;
                }
                set preview(q643) {
                    q643 ? this._startPreview() : this._stopPreview(), this._preview = q643;
                }
                get stopped() {
                    return this._stopped;
                }
                get active() {
                    return this._simulator.active;
                }
                get assembler() {
                    return this._assembler;
                }
                constructor() {
                    super(), this.duration = t227 && t227(), this.emissionRate = u227 && u227(), this.life = v227 && v227(), this.lifeVar = w227 && w227(), this.angle = x227 && x227(), this.angleVar = y227 && y227(), this.startSize = z227 && z227(), this.startSizeVar = a228 && a228(), this.endSize = b228 && b228(), this.endSizeVar = c228 && c228(), this.startSpin = d228 && d228(), this.startSpinVar = e228 && e228(), this.endSpin = f228 && f228(), this.endSpinVar = g228 && g228(), this.sourcePos = h228 && h228(), this.posVar = i228 && i228(), this.emitterMode = j228 && j228(), this.gravity = k228 && k228(), this.speed = l228 && l228(), this.speedVar = m228 && m228(), this.tangentialAccel = n228 && n228(), this.tangentialAccelVar = o228 && o228(), this.radialAccel = p228 && p228(), this.radialAccelVar = q228 && q228(), this.rotationIsDir = r228 && r228(), this.startRadius = s228 && s228(), this.startRadiusVar = t228 && t228(), this.endRadius = u228 && u228(), this.endRadiusVar = v228 && v228(), this.rotatePerS = w228 && w228(), this.rotatePerSVar = x228 && x228(), this.aspectRatio = 1, this.playOnLoad = y228 && y228(), this.autoRemoveOnFinish = z228 && z228(), this._preview = a229 && a229(), this._custom = b229 && b229(), this._file = c229 && c229(), this._spriteFrame = d229 && d229(), this._totalParticles = e229 && e229(), this._startColor = f229 && f229(), this._startColorVar = g229 && g229(), this._endColor = h229 && h229(), this._endColorVar = i229 && i229(), this._positionType = j229 && j229(), this._stopped = !0, this._useFile = void 0, this.initProperties(), this._useFile = !1;
                }
                onEnable() {
                    super.onEnable(), this._updateMaterial(), this._updatePositionType();
                }
                onDestroy() {
                    super.onDestroy(), this.autoRemoveOnFinish && (this.autoRemoveOnFinish = !1), this._simulator.uvFilled = 0, this._simulator.renderData && this._assembler && this._assembler.removeData(this._simulator.renderData);
                }
                initProperties() {
                    this._previewTimer = null, this._focused = !1, this.aspectRatio = 1, this._simulator = new u226(this);
                }
                onFocusInEditor() {
                    this._focused = !0;
                    const o643 = s141(this.node);
                    for (let p643 = 0; p643 < o643.length; ++p643)
                        o643[p643]._startPreview();
                }
                onLostFocusInEditor() {
                    this._focused = !1;
                    const m643 = s141(this.node);
                    for (let n643 = 0; n643 < m643.length; ++n643)
                        m643[n643]._stopPreview();
                }
                _startPreview() {
                    this._preview && this.resetSystem();
                }
                _stopPreview() {
                    this._preview && (this.resetSystem(), this.stopSystem()), this._previewTimer && clearInterval(this._previewTimer);
                }
                __preload() {
                    super.__preload(), this._custom && this.spriteFrame && !this._renderSpriteFrame ? this._applySpriteFrame() : this._file && (this._custom ? !this._getTexture() && this._applyFile() : this._applyFile()), this.playOnLoad && this.resetSystem();
                }
                _flushAssembler() {
                    const l643 = t.Assembler.getAssembler(this);
                    this._assembler !== l643 && (this._assembler = l643), this._assembler && this._assembler.createData && (this._simulator.renderData = this._assembler.createData(this), this._simulator.renderData.particleInitRenderDrawInfo(this.renderEntity), this._simulator.initDrawInfo());
                }
                lateUpdate(k643) {
                    this._simulator.finished || this._simulator.step(k643);
                }
                addParticle() { }
                stopSystem() {
                    this._stopped = !0, this._simulator.stop();
                }
                resetSystem() {
                    this._stopped = !1, this._simulator.reset(), this.markForUpdateRenderData();
                }
                isFull() {
                    return this.particleCount >= this.totalParticles;
                }
                _applyFile() {
                    const j643 = this._file;
                    if (j643) {
                        if (!j643)
                            return void z125(6029);
                        if (!this.isValid)
                            return;
                        this._plistFile = j643.nativeUrl, this._custom || (this._spriteFrame !== j643.spriteFrame && (this.spriteFrame = j643.spriteFrame), this._initWithDictionary(j643._nativeAsset)), this._spriteFrame ? !this._renderSpriteFrame && this._spriteFrame && this._applySpriteFrame() : j643.spriteFrame ? this.spriteFrame = j643.spriteFrame : this._custom && this._initTextureWithDictionary(j643._nativeAsset);
                    }
                }
                _initTextureWithDictionary(t642) {
                    if (t642.spriteFrameUuid) {
                        const f643 = t642.spriteFrameUuid;
                        e185.loadAny(f643, (h643, i643) => {
                            h643 ? (t642.spriteFrameUuid = void 0, this._initTextureWithDictionary(t642), r125(h643)) : this.spriteFrame = i643;
                        });
                    }
                    else {
                        const v642 = n133(this._plistFile, t642.textureFileName || "");
                        if (t642.textureFileName)
                            e185.loadRemote(v642, (d643, e643) => {
                                d643 ? (t642.textureFileName = void 0, this._initTextureWithDictionary(t642), r125(d643)) : this.spriteFrame = e643 ? q186.createWithImage(e643) : q186.createWithImage(r185.get("white-texture"));
                            });
                        else if (t642.textureImageData) {
                            const x642 = t642.textureImageData;
                            if (!(x642 && x642.length > 0))
                                return !1;
                            {
                                let y642 = v642;
                                this.file && (y642 += `-${this.file.uuid}`);
                                let z642 = e185.assets.get(y642);
                                if (!z642) {
                                    const a643 = l229.unzipBase64AsArray(x642, 1);
                                    if (!a643)
                                        return y125(6030, this._file.name), !1;
                                    const b643 = (u642 = a643).length > 8 && 137 === u642[0] && 80 === u642[1] && 78 === u642[2] && 71 === u642[3] && 13 === u642[4] && 10 === u642[5] && 26 === u642[6] && 10 === u642[7] ? m229.PNG : u642.length > 2 && (73 === u642[0] && 73 === u642[1] || 77 === u642[0] && 77 === u642[1] || 255 === u642[0] && 216 === u642[1]) ? m229.TIFF : m229.UNKNOWN;
                                    if (b643 !== m229.TIFF && b643 !== m229.PNG)
                                        return y125(6031, this._file.name), !1;
                                    const c643 = u143.document.createElement("canvas");
                                    b643 === m229.PNG ? new e227(a643).render(c643) : (this._tiffReader || (this._tiffReader = new f227()), this._tiffReader.parseTIFF(a643, c643)), z642 = new x163(c643), e185.assets.add(y642, z642);
                                }
                                z642 || y125(6032, this._file.name), this.spriteFrame = z642 ? q186.createWithImage(z642) : q186.createWithImage(r185.get("white-texture"));
                            }
                        }
                    }
                    var u642;
                    return !0;
                }
                _initWithDictionary(m642) {
                    this._useFile = !0, this.totalParticles = parseInt(m642.maxParticles || 0), this.life = parseFloat(m642.particleLifespan || 0), this.lifeVar = parseFloat(m642.particleLifespanVariance || 0);
                    const n642 = m642.emissionRate;
                    this.emissionRate = n642 || Math.min(this.totalParticles / this.life, Number.MAX_VALUE), this.duration = parseFloat(m642.duration || 0), this._srcBlendFactor = parseInt(m642.blendFuncSource || k158.SRC_ALPHA), this._dstBlendFactor = parseInt(m642.blendFuncDestination || k158.ONE_MINUS_SRC_ALPHA);
                    const o642 = this._startColor;
                    o642.r = 255 * parseFloat(m642.startColorRed || 0), o642.g = 255 * parseFloat(m642.startColorGreen || 0), o642.b = 255 * parseFloat(m642.startColorBlue || 0), o642.a = 255 * parseFloat(m642.startColorAlpha || 0);
                    const p642 = this._startColorVar;
                    p642.r = 255 * parseFloat(m642.startColorVarianceRed || 0), p642.g = 255 * parseFloat(m642.startColorVarianceGreen || 0), p642.b = 255 * parseFloat(m642.startColorVarianceBlue || 0), p642.a = 255 * parseFloat(m642.startColorVarianceAlpha || 0);
                    const q642 = this._endColor;
                    q642.r = 255 * parseFloat(m642.finishColorRed || 0), q642.g = 255 * parseFloat(m642.finishColorGreen || 0), q642.b = 255 * parseFloat(m642.finishColorBlue || 0), q642.a = 255 * parseFloat(m642.finishColorAlpha || 0);
                    const r642 = this._endColorVar;
                    if (r642.r = 255 * parseFloat(m642.finishColorVarianceRed || 0), r642.g = 255 * parseFloat(m642.finishColorVarianceGreen || 0), r642.b = 255 * parseFloat(m642.finishColorVarianceBlue || 0), r642.a = 255 * parseFloat(m642.finishColorVarianceAlpha || 0), this.startSize = parseFloat(m642.startParticleSize || 0), this.startSizeVar = parseFloat(m642.startParticleSizeVariance || 0), this.endSize = parseFloat(m642.finishParticleSize || 0), this.endSizeVar = parseFloat(m642.finishParticleSizeVariance || 0), this.positionType = parseFloat(void 0 !== m642.positionType ? m642.positionType : l226.FREE), this.sourcePos.set(0, 0), this.posVar.set(parseFloat(m642.sourcePositionVariancex || 0), parseFloat(m642.sourcePositionVariancey || 0)), this.angle = parseFloat(m642.angle || 0), this.angleVar = parseFloat(m642.angleVariance || 0), this.startSpin = parseFloat(m642.rotationStart || 0), this.startSpinVar = parseFloat(m642.rotationStartVariance || 0), this.endSpin = parseFloat(m642.rotationEnd || 0), this.endSpinVar = parseFloat(m642.rotationEndVariance || 0), this.emitterMode = parseInt(m642.emitterType || k226.GRAVITY), this.emitterMode === k226.GRAVITY) {
                        this.gravity.set(parseFloat(m642.gravityx || 0), parseFloat(m642.gravityy || 0)), this.speed = parseFloat(m642.speed || 0), this.speedVar = parseFloat(m642.speedVariance || 0), this.radialAccel = parseFloat(m642.radialAcceleration || 0), this.radialAccelVar = parseFloat(m642.radialAccelVariance || 0), this.tangentialAccel = parseFloat(m642.tangentialAcceleration || 0), this.tangentialAccelVar = parseFloat(m642.tangentialAccelVariance || 0);
                        let s642 = m642.rotationIsDir || "";
                        null !== s642 ? (s642 = s642.toString().toLowerCase(), this.rotationIsDir = "true" === s642 || "1" === s642) : this.rotationIsDir = !1;
                    }
                    else {
                        if (this.emitterMode !== k226.RADIUS)
                            return y125(6009), !1;
                        this.startRadius = parseFloat(m642.maxRadius || 0), this.startRadiusVar = parseFloat(m642.maxRadiusVariance || 0), this.endRadius = parseFloat(m642.minRadius || 0), this.endRadiusVar = parseFloat(m642.minRadiusVariance || 0), this.rotatePerS = parseFloat(m642.rotatePerSecond || 0), this.rotatePerSVar = parseFloat(m642.rotatePerSecondVariance || 0);
                    }
                    return this._initTextureWithDictionary(m642), !0;
                }
                _syncAspect() {
                    if (this._renderSpriteFrame) {
                        const l642 = this._renderSpriteFrame.rect;
                        this.aspectRatio = l642.width / l642.height;
                    }
                }
                _applySpriteFrame() {
                    this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame, this._renderSpriteFrame ? this._renderSpriteFrame.texture && (this._simulator && this._simulator.updateUVs(!0), this._syncAspect(), this._updateMaterial(), this._stopped = !1, this.markForUpdateRenderData()) : this.resetSystem();
                }
                _getTexture() {
                    return this._renderSpriteFrame && this._renderSpriteFrame.texture;
                }
                _updateMaterial() {
                    if (this._customMaterial) {
                        this.setSharedMaterial(this._customMaterial, 0);
                        const k642 = this.getRenderMaterial(0).passes[0].blendState.targets[0];
                        this._dstBlendFactor = k642.blendDst, this._srcBlendFactor = k642.blendSrc;
                    }
                    const j642 = this.getMaterialInstance(0);
                    j642 && j642.recompileShaders({
                        USE_LOCAL: this._positionType !== l226.FREE
                    }), j642 && j642.passes.length > 0 && this._updateBlendFunc();
                }
                _finishedSimulation() {
                    this.resetSystem(), this.stopSystem(), this.markForUpdateRenderData(), this.autoRemoveOnFinish && this._stopped && this.node.destroy();
                }
                _canRender() {
                    return super._canRender() && !this._stopped && null !== this._renderSpriteFrame && void 0 !== this._renderSpriteFrame;
                }
                _render(i642) {
                    this._positionType === l226.RELATIVE ? i642.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, this.node.parent) : this.positionType === l226.GROUPED ? i642.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, this.node) : i642.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, null);
                }
                _updatePositionType() {
                    this._positionType === l226.RELATIVE ? (this._renderEntity.setRenderTransform(this.node.parent), this._renderEntity.setUseLocal(!0)) : this.positionType === l226.GROUPED ? (this._renderEntity.setRenderTransform(this.node), this._renderEntity.setUseLocal(!0)) : (this._renderEntity.setRenderTransform(null), this._renderEntity.setUseLocal(!1));
                }
            }).EmitterMode = k226, k229.PositionType = l226, k229.DURATION_INFINITY = -1, k229.START_SIZE_EQUAL_TO_END_SIZE = -1, k229.START_RADIUS_EQUAL_TO_END_RADIUS = -1, i125((s227 = k229).prototype, "file", [m227], Object.getOwnPropertyDescriptor(s227.prototype, "file"), s227.prototype), i125(s227.prototype, "spriteFrame", [n227], Object.getOwnPropertyDescriptor(s227.prototype, "spriteFrame"), s227.prototype), t227 = p130(s227.prototype, "duration", [j151], function () {
                return -1;
            }), u227 = p130(s227.prototype, "emissionRate", [j151], function () {
                return 10;
            }), v227 = p130(s227.prototype, "life", [j151], function () {
                return 1;
            }), w227 = p130(s227.prototype, "lifeVar", [j151], function () {
                return 0;
            }), i125(s227.prototype, "color", [h152], Object.getOwnPropertyDescriptor(s227.prototype, "color"), s227.prototype), x227 = p130(s227.prototype, "angle", [j151], function () {
                return 90;
            }), y227 = p130(s227.prototype, "angleVar", [j151], function () {
                return 20;
            }), z227 = p130(s227.prototype, "startSize", [j151], function () {
                return 50;
            }), a228 = p130(s227.prototype, "startSizeVar", [j151], function () {
                return 0;
            }), b228 = p130(s227.prototype, "endSize", [j151], function () {
                return 0;
            }), c228 = p130(s227.prototype, "endSizeVar", [j151], function () {
                return 0;
            }), d228 = p130(s227.prototype, "startSpin", [j151], function () {
                return 0;
            }), e228 = p130(s227.prototype, "startSpinVar", [j151], function () {
                return 0;
            }), f228 = p130(s227.prototype, "endSpin", [j151], function () {
                return 0;
            }), g228 = p130(s227.prototype, "endSpinVar", [j151], function () {
                return 0;
            }), h228 = p130(s227.prototype, "sourcePos", [j151], function () {
                return s147.ZERO.clone();
            }), i228 = p130(s227.prototype, "posVar", [j151], function () {
                return s147.ZERO.clone();
            }), i125(s227.prototype, "positionType", [o227], Object.getOwnPropertyDescriptor(s227.prototype, "positionType"), s227.prototype), j228 = p130(s227.prototype, "emitterMode", [j151, p227], function () {
                return k226.GRAVITY;
            }), k228 = p130(s227.prototype, "gravity", [j151], function () {
                return s147.ZERO.clone();
            }), l228 = p130(s227.prototype, "speed", [j151], function () {
                return 180;
            }), m228 = p130(s227.prototype, "speedVar", [j151], function () {
                return 50;
            }), n228 = p130(s227.prototype, "tangentialAccel", [j151], function () {
                return 80;
            }), o228 = p130(s227.prototype, "tangentialAccelVar", [j151], function () {
                return 0;
            }), p228 = p130(s227.prototype, "radialAccel", [j151], function () {
                return 0;
            }), q228 = p130(s227.prototype, "radialAccelVar", [j151], function () {
                return 0;
            }), r228 = p130(s227.prototype, "rotationIsDir", [j151], function () {
                return !1;
            }), s228 = p130(s227.prototype, "startRadius", [j151], function () {
                return 0;
            }), t228 = p130(s227.prototype, "startRadiusVar", [j151], function () {
                return 0;
            }), u228 = p130(s227.prototype, "endRadius", [j151], function () {
                return 0;
            }), v228 = p130(s227.prototype, "endRadiusVar", [j151], function () {
                return 0;
            }), w228 = p130(s227.prototype, "rotatePerS", [j151], function () {
                return 0;
            }), x228 = p130(s227.prototype, "rotatePerSVar", [j151], function () {
                return 0;
            }), y228 = p130(s227.prototype, "playOnLoad", [j151], function () {
                return !0;
            }), z228 = p130(s227.prototype, "autoRemoveOnFinish", [j151], function () {
                return !1;
            }), a229 = p130(s227.prototype, "_preview", [q227], function () {
                return !0;
            }), b229 = p130(s227.prototype, "_custom", [j151], function () {
                return !1;
            }), c229 = p130(s227.prototype, "_file", [j151], function () {
                return null;
            }), d229 = p130(s227.prototype, "_spriteFrame", [j151], function () {
                return null;
            }), e229 = p130(s227.prototype, "_totalParticles", [j151], function () {
                return 150;
            }), f229 = p130(s227.prototype, "_startColor", [j151], function () {
                return new a147(255, 255, 255, 255);
            }), g229 = p130(s227.prototype, "_startColorVar", [j151], function () {
                return new a147(0, 0, 0, 0);
            }), h229 = p130(s227.prototype, "_endColor", [j151], function () {
                return new a147(255, 255, 255, 0);
            }), i229 = p130(s227.prototype, "_endColorVar", [j151], function () {
                return new a147(0, 0, 0, 0);
            }), j229 = p130(s227.prototype, "_positionType", [j151], function () {
                return l226.FREE;
            }), r227 = s227)) || r227));
            var o229, p229, q229, r229, s229, t229, u229, v229, w229, x229, y229;
            let z229 = g125("MotionStreak", (o229 = e151("cc.MotionStreak"), p229 = a131(j166), o229(((y229 = class t extends h191 {
                constructor(...h642) {
                    super(...h642), this._preview = s229 && s229(), this._fadeTime = t229 && t229(), this._minSeg = u229 && u229(), this._stroke = v229 && v229(), this._texture = w229 && w229(), this._fastMode = x229 && x229(), this._points = [];
                }
                get preview() {
                    return this._preview;
                }
                set preview(g642) {
                    this._preview = g642, this.reset();
                }
                get fadeTime() {
                    return this._fadeTime;
                }
                set fadeTime(f642) {
                    this._fadeTime = f642, this.reset();
                }
                get minSeg() {
                    return this._minSeg;
                }
                set minSeg(e642) {
                    this._minSeg = e642;
                }
                get stroke() {
                    return this._stroke;
                }
                set stroke(d642) {
                    this._stroke = d642;
                }
                get texture() {
                    return this._texture;
                }
                set texture(c642) {
                    this._texture !== c642 && (this._texture = c642);
                }
                get fastMode() {
                    return this._fastMode;
                }
                set fastMode(b642) {
                    this._fastMode = b642;
                }
                get points() {
                    return this._points;
                }
                onEnable() {
                    super.onEnable(), this.reset();
                }
                _flushAssembler() {
                    const a642 = t.Assembler.getAssembler(this);
                    this._assembler !== a642 && (this._assembler = a642), this._renderData || this._assembler && this._assembler.createData && (this._renderData = this._assembler.createData(this), this._renderData.material = this.material, this._updateColor());
                }
                onFocusInEditor() {
                    this._preview && this.reset();
                }
                onLostFocusInEditor() {
                    this._preview && this.reset();
                }
                reset() {
                    this._points.length = 0, this._renderData && this._renderData.clear();
                }
                lateUpdate(z641) {
                    this._assembler && this._assembler.update(this, z641);
                }
                _render(y641) {
                    y641.commitComp(this, this._renderData, this._texture, this._assembler, null);
                }
            }).Point = class {
                constructor(w641, x641) {
                    this.point = new s147(), this.dir = new s147(), this.distance = 0, this.time = 0, w641 && this.point.set(w641), x641 && this.dir.set(x641);
                }
                setPoint(u641, v641) {
                    this.point.x = u641, this.point.y = v641;
                }
                setDir(s641, t641) {
                    this.dir.x = s641, this.dir.y = t641;
                }
            }, i125((r229 = y229).prototype, "texture", [p229], Object.getOwnPropertyDescriptor(r229.prototype, "texture"), r229.prototype), s229 = p130(r229.prototype, "_preview", [j151], function () {
                return !1;
            }), t229 = p130(r229.prototype, "_fadeTime", [j151], function () {
                return 1;
            }), u229 = p130(r229.prototype, "_minSeg", [j151], function () {
                return 1;
            }), v229 = p130(r229.prototype, "_stroke", [j151], function () {
                return 64;
            }), w229 = p130(r229.prototype, "_texture", [j151], function () {
                return null;
            }), x229 = p130(r229.prototype, "_fastMode", [j151], function () {
                return !1;
            }), q229 = r229)) || q229));
            new s147();
            const a230 = new s147(), b230 = new s147();
            let c230;
            function t141(q641, r641) {
                return q641.x = -r641.y, q641.y = r641.x, q641;
            }
            const d230 = {
                createData(o641) {
                    const p641 = o641.requestRenderData();
                    return p641.dataLength = 4, p641.resize(16, 42), p641;
                },
                update(i640, j640) {
                    const k640 = i640.stroke / 2, l640 = i640.node.worldMatrix, m640 = l640.m12, n640 = l640.m13, o640 = i640.points;
                    let p640;
                    if (o640.length > 1) {
                        const l641 = o640[0], m641 = l641.point.x - m640, n641 = l641.point.y - n640;
                        m641 * m641 + n641 * n641 < i640.minSeg && (p640 = l641);
                    }
                    p640 || (p640 = new z229.Point(), o640.unshift(p640)), p640.setPoint(m640, n640), p640.time = i640.fadeTime + j640;
                    let q640 = 0, r640 = 0;
                    if (o640.length < 2)
                        return;
                    const s640 = i640.renderData;
                    this.updateRenderDataCache(i640, s640);
                    const t640 = i640.color, u640 = t640.r, v640 = t640.g, w640 = t640.b, x640 = t640.a, y640 = o640[1];
                    y640.distance = s147.subtract(b230, p640.point, y640.point).length(), b230.normalize(), y640.setDir(b230.x, b230.y), p640.setDir(b230.x, b230.y), s640.dataLength = 2 * o640.length;
                    const z640 = s640.data, a641 = i640.fadeTime;
                    let b641 = !1;
                    for (let d641 = o640.length - 1; d641 >= 0; d641--) {
                        const e641 = o640[d641], f641 = e641.point, g641 = e641.dir;
                        if (e641.time -= j640, e641.time < 0) {
                            o640.splice(d641, 1);
                            continue;
                        }
                        const h641 = e641.time / a641, i641 = o640[d641 - 1];
                        if (!b641) {
                            if (!i641) {
                                o640.splice(d641, 1);
                                continue;
                            }
                            f641.x = i641.point.x - g641.x * h641, f641.y = i641.point.y - g641.y * h641;
                        }
                        b641 = !0, t141(a230, g641);
                        const j641 = (h641 * x640 << 24 >>> 0) + (w640 << 16) + (v640 << 8) + u640;
                        let k641 = q640;
                        z640[k641].x = f641.x + a230.x * k640, z640[k641].y = f641.y + a230.y * k640, z640[k641].u = 1, z640[k641].v = h641, z640[k641].color._val = j641, k641 += 1, z640[k641].x = f641.x - a230.x * k640, z640[k641].y = f641.y - a230.y * k640, z640[k641].u = 0, z640[k641].v = h641, z640[k641].color._val = j641, q640 += 2;
                    }
                    r640 = q640 <= 2 ? 0 : 3 * (q640 - 2), s640.resize(q640, r640);
                    {
                        const c641 = s640.indexCount;
                        this.createQuadIndices(i640, c641), s640.chunk.setIndexBuffer(c230), this.updateWorldVertexAllData(i640), s640.updateRenderData(i640, i640.texture), i640.markForUpdateRenderData();
                    }
                },
                updateWorldVertexAllData(b640) {
                    const c640 = b640.renderData, d640 = c640.floatStride, e640 = c640.data, f640 = c640.chunk.vb;
                    for (let g640 = 0; g640 < e640.length; g640++) {
                        const h640 = g640 * d640;
                        f640[h640 + 0] = e640[g640].x, f640[h640 + 1] = e640[g640].y, f640[h640 + 2] = e640[g640].z, f640[h640 + 3] = e640[g640].u, f640[h640 + 4] = e640[g640].v, a147.toArray(f640, e640[g640].color, h640 + 5);
                    }
                },
                createQuadIndices(v639, w639) {
                    let x639 = v639.renderData.chunk.meshBuffer.indexOffset;
                    c230 = null, c230 = new Uint16Array(w639);
                    for (let y639 = 0, z639 = w639; y639 < z639; y639 += 2) {
                        const a640 = 0 + y639;
                        c230[x639++] = a640, c230[x639++] = a640 + 2, c230[x639++] = a640 + 1, c230[x639++] = a640 + 1, c230[x639++] = a640 + 2, c230[x639++] = a640 + 3;
                    }
                },
                updateRenderDataCache(t639, u639) {
                    u639.passDirty && u639.updatePass(t639), u639.nodeDirty && u639.updateNode(t639), u639.textureDirty && t639.texture && (u639.updateTexture(t639.texture), u639.material = t639.getRenderMaterial(0)), u639.hashDirty && u639.updateHash();
                },
                updateRenderData(s639) {
                    s639.renderData.renderDrawInfo.setVertDirty(!1), s639.node.hasChangedFlags = 0;
                },
                updateColor(r639) { },
                fillBuffers(z638, a639) {
                    const b639 = z638.renderData, c639 = b639.chunk, d639 = b639.data, e639 = b639.vertexCount, f639 = b639.indexCount, g639 = c639.vb;
                    let h639 = 0;
                    for (let p639 = 0; p639 < e639; p639++) {
                        const q639 = d639[p639];
                        g639[h639++] = q639.x, g639[h639++] = q639.y, g639[h639++] = q639.z, g639[h639++] = q639.u, g639[h639++] = q639.v, a147.toArray(g639, q639.color, h639), h639 += 4;
                    }
                    c639.bufferId;
                    const i639 = c639.vertexOffset, j639 = c639.meshBuffer, k639 = c639.meshBuffer.iData;
                    let l639 = j639.indexOffset;
                    for (let m639 = 0, n639 = f639; m639 < n639; m639 += 2) {
                        const o639 = i639 + m639;
                        k639[l639++] = o639, k639[l639++] = o639 + 2, k639[l639++] = o639 + 1, k639[l639++] = o639 + 1, k639[l639++] = o639 + 2, k639[l639++] = o639 + 3;
                    }
                    j639.indexOffset += b639.indexCount, j639.setDirty();
                }
            }, e230 = g125("MotionStreakAssemblerManager", {
                getAssembler: () => d230
            });
            z229.Assembler = e230;
            const f230 = {
                maxParticleDeltaTime: 0,
                createData: () => p189.add(),
                removeData(y638) {
                    p189.remove(y638);
                },
                updateRenderData() { },
                fillBuffers(w638, x638) { }
            }, g230 = g125("ParticleSystem2DAssembler", {
                getAssembler: () => (f230.maxParticleDeltaTime || (f230.maxParticleDeltaTime = s143.game.frameTime / 1e3 * 2), f230)
            });
            let h230, i230, j230, k230, l230;
            n229.Assembler = g230, g125("ERigidBody2DType", h230), function (v638) {
                v638[v638.Static = 0] = "Static", v638[v638.Kinematic = 1] = "Kinematic", v638[v638.Dynamic = 2] = "Dynamic", v638[v638.Animated = 3] = "Animated";
            }(h230 || g125("ERigidBody2DType", h230 = {})), p127(h230), g125("ECollider2DType", i230), function (u638) {
                u638[u638.None = 0] = "None", u638[u638.BOX = 1] = "BOX", u638[u638.CIRCLE = 2] = "CIRCLE", u638[u638.POLYGON = 3] = "POLYGON";
            }(i230 || g125("ECollider2DType", i230 = {})), p127(i230), g125("EJoint2DType", j230), function (t638) {
                t638[t638.None = 0] = "None", t638[t638.DISTANCE = 1] = "DISTANCE", t638[t638.SPRING = 2] = "SPRING", t638[t638.WHEEL = 3] = "WHEEL", t638[t638.MOUSE = 4] = "MOUSE", t638[t638.FIXED = 5] = "FIXED", t638[t638.SLIDER = 6] = "SLIDER", t638[t638.RELATIVE = 7] = "RELATIVE", t638[t638.HINGE = 8] = "HINGE";
            }(j230 || g125("EJoint2DType", j230 = {})), p127(j230), g125("PhysicsGroup", k230), function (s638) {
                s638[s638.DEFAULT = 1] = "DEFAULT";
            }(k230 || g125("PhysicsGroup", k230 = {})), p127(k230), g125("ERaycast2DType", l230), function (r638) {
                r638[r638.Closest = 0] = "Closest", r638[r638.Any = 1] = "Any", r638[r638.AllClosest = 2] = "AllClosest", r638[r638.All = 3] = "All";
            }(l230 || g125("ERaycast2DType", l230 = {}));
            const m230 = g125("Contact2DType", {
                None: "none-contact",
                BEGIN_CONTACT: "begin-contact",
                END_CONTACT: "end-contact",
                PRE_SOLVE: "pre-solve",
                POST_SOLVE: "post-solve"
            });
            let n230;
            g125("EPhysics2DDrawFlags", n230), function (q638) {
                q638[q638.None = 0] = "None", q638[q638.Shape = 1] = "Shape", q638[q638.Joint = 2] = "Joint", q638[q638.Aabb = 4] = "Aabb", q638[q638.Pair = 8] = "Pair", q638[q638.CenterOfMass = 16] = "CenterOfMass", q638[q638.Particle = 32] = "Particle", q638[q638.Controller = 64] = "Controller", q638[q638.All = 63] = "All";
            }(n230 || g125("EPhysics2DDrawFlags", n230 = {}));
            const o230 = g125("PHYSICS_2D_PTM_RATIO", 32), p230 = g125("selector", {
                id: "",
                switchTo: function (o638) {
                    const p638 = p230;
                    p230.physicsWorld && o638 !== p230.id && null != p230.backend[o638] ? (p125(`[PHYSICS2D]: switch from ${p230.id} to ${o638}.`), p638.id = o638, p638.wrapper = p230.backend[o638], p638.physicsWorld = u141()) : (p125(`[PHYSICS2D]: using ${p638.id}.`), p638.physicsWorld = u141());
                },
                register: function (l638, m638) {
                    if (p125(`[PHYSICS2D]: register ${l638}.`), p230.backend[l638] = m638, !p230.physicsWorld || p230.id === l638) {
                        const n638 = p230;
                        n638.id = l638, n638.wrapper = m638;
                    }
                },
                wrapper: {},
                backend: {},
                physicsWorld: null,
                runInEditor: !0
            }), q230 = () => 0;
            function u141() {
                return new p230.wrapper.PhysicsWorld();
            }
            const r230 = {
                impl: null,
                rigidBody: null,
                isAwake: !1,
                isSleeping: !1,
                initialize: q230,
                setType: q230,
                setLinearDamping: q230,
                setAngularDamping: q230,
                setGravityScale: q230,
                setFixedRotation: q230,
                setAllowSleep: q230,
                isActive: q230,
                setActive: q230,
                wakeUp: q230,
                sleep: q230,
                getMass: q230,
                getInertia: q230,
                getLinearVelocity: q230,
                setLinearVelocity: q230,
                getLinearVelocityFromWorldPoint: q230,
                getAngularVelocity: q230,
                setAngularVelocity: q230,
                getLocalVector: q230,
                getWorldVector: q230,
                getLocalPoint: q230,
                getWorldPoint: q230,
                getLocalCenter: q230,
                getWorldCenter: q230,
                applyForce: q230,
                applyForceToCenter: q230,
                applyTorque: q230,
                applyLinearImpulse: q230,
                applyLinearImpulseToCenter: q230,
                applyAngularImpulse: q230,
                onEnable: q230,
                onDisable: q230,
                onDestroy: q230
            }, s230 = {
                INITED: !1
            };
            const t230 = {
                INITED: !1
            }, u230 = {
                impl: null,
                initialize: q230,
                apply: q230,
                setDampingRatio: q230,
                setFrequency: q230,
                setMaxForce: q230,
                setTarget: q230,
                setDistance: q230,
                setAngularOffset: q230,
                setCorrectionFactor: q230,
                setLinearOffset: q230,
                setMaxLength: q230,
                setMaxTorque: q230,
                setLowerLimit: q230,
                setUpperLimit: q230,
                setMaxMotorForce: q230,
                setMaxMotorTorque: q230,
                setMotorSpeed: q230,
                enableLimit: q230,
                enableMotor: q230,
                setLowerAngle: q230,
                setUpperAngle: q230
            };
            "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;
            var v230, w230 = function (g447, h447) {
                return function (j447, k447) {
                    !function (m447) {
                        function n447(j638, ...k638) {
                            if (!j638)
                                throw new Error(...k638);
                        }
                        function o447(h638, i638) {
                            return void 0 !== h638 ? h638 : i638;
                        }
                        const r449 = 1e37, s449 = 1e-5, t449 = s449 * s449, u449 = 3.14159265359, v449 = 2, w449 = 8, x449 = .1, y449 = 2, z449 = .008, a450 = 2 / 180 * u449, b450 = 2 * z449, c450 = 8, d450 = 32, e450 = 1, f450 = .2, g450 = 8 / 180 * u449, h450 = 2, i450 = h450 * h450, j450 = .5 * u449, k450 = j450 * j450, l450 = .2, m450 = .75, n450 = -1, o450 = 2147483647, p450 = .75, q450 = 1, r450 = .25, s450 = .5, t450 = 2, u450 = t450 * t450, v450 = 256, w450 = 2.5, x450 = .5, y450 = .01, z450 = 2 / 180 * u449;
                        function p447() {
                            return null;
                        }
                        function q447() { }
                        function r447() { }
                        class a451 {
                            constructor(e638 = 0, f638 = 0, g638 = 0) {
                                this.major = 0, this.minor = 0, this.revision = 0, this.major = e638, this.minor = f638, this.revision = g638;
                            }
                            toString() {
                                return this.major + "." + this.minor + "." + this.revision;
                            }
                        }
                        const b451 = new a451(2, 3, 2), c451 = "master", d451 = "fbf51801d80fc389d43dc46524520e89043b6faf";
                        function s447(d638) {
                            return parseInt(d638, 10);
                        }
                        function t447(c638) {
                            return Math.abs(parseInt(c638, 10));
                        }
                        function u447(y637, z637) {
                            const a638 = new Array(y637);
                            for (let b638 = 0; b638 < y637; ++b638)
                                a638[b638] = z637(b638);
                            return a638;
                        }
                        function v447(v637) {
                            const w637 = new Array(v637);
                            for (let x637 = 0; x637 < v637; ++x637)
                                w637[x637] = null;
                            return w637;
                        }
                        function w447(r637, s637 = 0) {
                            const t637 = new Array(r637);
                            for (let u637 = 0; u637 < r637; ++u637)
                                t637[u637] = s637;
                            return t637;
                        }
                        const e451 = u449 / 180, f451 = 180 / u449, g451 = 2 * u449, h451 = Math.abs;
                        function x447(p637, q637) {
                            return p637 < q637 ? p637 : q637;
                        }
                        function y447(n637, o637) {
                            return n637 > o637 ? n637 : o637;
                        }
                        function z447(k637, l637, m637) {
                            return k637 < l637 ? l637 : k637 > m637 ? m637 : k637;
                        }
                        function a448(h637, i637) {
                            const j637 = h637[0];
                            h637[0] = i637[0], i637[0] = j637;
                        }
                        const i451 = isFinite;
                        function b448(g637) {
                            return g637 * g637;
                        }
                        function c448(f637) {
                            return 1 / Math.sqrt(f637);
                        }
                        const j451 = Math.sqrt, k451 = Math.pow;
                        function d448(e637) {
                            return e637 * e451;
                        }
                        function e448(d637) {
                            return d637 * f451;
                        }
                        const l451 = Math.cos, m451 = Math.sin, n451 = Math.acos, o451 = Math.asin, p451 = Math.atan2;
                        function f448(c637) {
                            return c637 |= c637 >> 1 & 2147483647, c637 |= c637 >> 2 & 1073741823, c637 |= c637 >> 4 & 268435455, 1 + ((c637 |= c637 >> 8 & 16777215) | c637 >> 16 & 65535);
                        }
                        function g448(b637) {
                            return b637 > 0 && 0 == (b637 & b637 - 1);
                        }
                        function h448() {
                            return 2 * Math.random() - 1;
                        }
                        function i448(z636, a637) {
                            return (a637 - z636) * Math.random() + z636;
                        }
                        class q451 {
                            constructor(...w636) {
                                if (w636[0] instanceof Float32Array) {
                                    if (2 !== w636[0].length)
                                        throw new Error();
                                    this.data = w636[0];
                                }
                                else {
                                    const x636 = "number" == typeof w636[0] ? w636[0] : 0, y636 = "number" == typeof w636[1] ? w636[1] : 0;
                                    this.data = new Float32Array([x636, y636]);
                                }
                            }
                            get x() {
                                return this.data[0];
                            }
                            set x(v636) {
                                this.data[0] = v636;
                            }
                            get y() {
                                return this.data[1];
                            }
                            set y(u636) {
                                this.data[1] = u636;
                            }
                            Clone() {
                                return new q451(this.x, this.y);
                            }
                            SetZero() {
                                return this.x = 0, this.y = 0, this;
                            }
                            Set(s636, t636) {
                                return this.x = s636, this.y = t636, this;
                            }
                            Copy(r636) {
                                return this.x = r636.x, this.y = r636.y, this;
                            }
                            SelfAdd(q636) {
                                return this.x += q636.x, this.y += q636.y, this;
                            }
                            SelfAddXY(o636, p636) {
                                return this.x += o636, this.y += p636, this;
                            }
                            SelfSub(n636) {
                                return this.x -= n636.x, this.y -= n636.y, this;
                            }
                            SelfSubXY(l636, m636) {
                                return this.x -= l636, this.y -= m636, this;
                            }
                            SelfMul(k636) {
                                return this.x *= k636, this.y *= k636, this;
                            }
                            SelfMulAdd(i636, j636) {
                                return this.x += i636 * j636.x, this.y += i636 * j636.y, this;
                            }
                            SelfMulSub(g636, h636) {
                                return this.x -= g636 * h636.x, this.y -= g636 * h636.y, this;
                            }
                            Dot(f636) {
                                return this.x * f636.x + this.y * f636.y;
                            }
                            Cross(e636) {
                                return this.x * e636.y - this.y * e636.x;
                            }
                            Length() {
                                const c636 = this.x, d636 = this.y;
                                return Math.sqrt(c636 * c636 + d636 * d636);
                            }
                            LengthSquared() {
                                const a636 = this.x, b636 = this.y;
                                return a636 * a636 + b636 * b636;
                            }
                            Normalize() {
                                const y635 = this.Length();
                                if (y635 >= s449) {
                                    const z635 = 1 / y635;
                                    this.x *= z635, this.y *= z635;
                                }
                                return y635;
                            }
                            SelfNormalize() {
                                const w635 = this.Length();
                                if (w635 >= s449) {
                                    const x635 = 1 / w635;
                                    this.x *= x635, this.y *= x635;
                                }
                                return this;
                            }
                            SelfRotate(s635) {
                                const t635 = Math.cos(s635), u635 = Math.sin(s635), v635 = this.x;
                                return this.x = t635 * v635 - u635 * this.y, this.y = u635 * v635 + t635 * this.y, this;
                            }
                            SelfRotateCosSin(p635, q635) {
                                const r635 = this.x;
                                return this.x = p635 * r635 - q635 * this.y, this.y = q635 * r635 + p635 * this.y, this;
                            }
                            IsValid() {
                                return isFinite(this.x) && isFinite(this.y);
                            }
                            SelfCrossVS(n635) {
                                const o635 = this.x;
                                return this.x = n635 * this.y, this.y = -n635 * o635, this;
                            }
                            SelfCrossSV(l635) {
                                const m635 = this.x;
                                return this.x = -l635 * this.y, this.y = l635 * m635, this;
                            }
                            SelfMinV(k635) {
                                return this.x = x447(this.x, k635.x), this.y = x447(this.y, k635.y), this;
                            }
                            SelfMaxV(j635) {
                                return this.x = y447(this.x, j635.x), this.y = y447(this.y, j635.y), this;
                            }
                            SelfAbs() {
                                return this.x = h451(this.x), this.y = h451(this.y), this;
                            }
                            SelfNeg() {
                                return this.x = -this.x, this.y = -this.y, this;
                            }
                            SelfSkew() {
                                const i635 = this.x;
                                return this.x = -this.y, this.y = i635, this;
                            }
                            static MakeArray(g635) {
                                return u447(g635, () => new q451());
                            }
                            static AbsV(e635, f635) {
                                return f635.x = h451(e635.x), f635.y = h451(e635.y), f635;
                            }
                            static MinV(b635, c635, d635) {
                                return d635.x = x447(b635.x, c635.x), d635.y = x447(b635.y, c635.y), d635;
                            }
                            static MaxV(y634, z634, a635) {
                                return a635.x = y447(y634.x, z634.x), a635.y = y447(y634.y, z634.y), a635;
                            }
                            static ClampV(u634, v634, w634, x634) {
                                return x634.x = z447(u634.x, v634.x, w634.x), x634.y = z447(u634.y, v634.y, w634.y), x634;
                            }
                            static RotateV(n634, o634, p634) {
                                const q634 = n634.x, r634 = n634.y, s634 = Math.cos(o634), t634 = Math.sin(o634);
                                return p634.x = s634 * q634 - t634 * r634, p634.y = t634 * q634 + s634 * r634, p634;
                            }
                            static DotVV(l634, m634) {
                                return l634.x * m634.x + l634.y * m634.y;
                            }
                            static CrossVV(j634, k634) {
                                return j634.x * k634.y - j634.y * k634.x;
                            }
                            static CrossVS(f634, g634, h634) {
                                const i634 = f634.x;
                                return h634.x = g634 * f634.y, h634.y = -g634 * i634, h634;
                            }
                            static CrossVOne(c634, d634) {
                                const e634 = c634.x;
                                return d634.x = c634.y, d634.y = -e634, d634;
                            }
                            static CrossSV(y633, z633, a634) {
                                const b634 = z633.x;
                                return a634.x = -y633 * z633.y, a634.y = y633 * b634, a634;
                            }
                            static CrossOneV(v633, w633) {
                                const x633 = v633.x;
                                return w633.x = -v633.y, w633.y = x633, w633;
                            }
                            static AddVV(s633, t633, u633) {
                                return u633.x = s633.x + t633.x, u633.y = s633.y + t633.y, u633;
                            }
                            static SubVV(p633, q633, r633) {
                                return r633.x = p633.x - q633.x, r633.y = p633.y - q633.y, r633;
                            }
                            static MulSV(m633, n633, o633) {
                                return o633.x = n633.x * m633, o633.y = n633.y * m633, o633;
                            }
                            static MulVS(j633, k633, l633) {
                                return l633.x = j633.x * k633, l633.y = j633.y * k633, l633;
                            }
                            static AddVMulSV(f633, g633, h633, i633) {
                                return i633.x = f633.x + g633 * h633.x, i633.y = f633.y + g633 * h633.y, i633;
                            }
                            static SubVMulSV(b633, c633, d633, e633) {
                                return e633.x = b633.x - c633 * d633.x, e633.y = b633.y - c633 * d633.y, e633;
                            }
                            static AddVCrossSV(w632, x632, y632, z632) {
                                const a633 = y632.x;
                                return z632.x = w632.x - x632 * y632.y, z632.y = w632.y + x632 * a633, z632;
                            }
                            static MidVV(t632, u632, v632) {
                                return v632.x = .5 * (t632.x + u632.x), v632.y = .5 * (t632.y + u632.y), v632;
                            }
                            static ExtVV(q632, r632, s632) {
                                return s632.x = .5 * (r632.x - q632.x), s632.y = .5 * (r632.y - q632.y), s632;
                            }
                            static IsEqualToV(o632, p632) {
                                return o632.x === p632.x && o632.y === p632.y;
                            }
                            static DistanceVV(k632, l632) {
                                const m632 = k632.x - l632.x, n632 = k632.y - l632.y;
                                return Math.sqrt(m632 * m632 + n632 * n632);
                            }
                            static DistanceSquaredVV(g632, h632) {
                                const i632 = g632.x - h632.x, j632 = g632.y - h632.y;
                                return i632 * i632 + j632 * j632;
                            }
                            static NegV(e632, f632) {
                                return f632.x = -e632.x, f632.y = -e632.y, f632;
                            }
                        }
                        q451.ZERO = new q451(0, 0), q451.UNITX = new q451(1, 0), q451.UNITY = new q451(0, 1), q451.s_t0 = new q451(), q451.s_t1 = new q451(), q451.s_t2 = new q451(), q451.s_t3 = new q451();
                        const r451 = new q451(0, 0);
                        class s451 {
                            constructor(...a632) {
                                if (a632[0] instanceof Float32Array) {
                                    if (3 !== a632[0].length)
                                        throw new Error();
                                    this.data = a632[0];
                                }
                                else {
                                    const b632 = "number" == typeof a632[0] ? a632[0] : 0, c632 = "number" == typeof a632[1] ? a632[1] : 0, d632 = "number" == typeof a632[2] ? a632[2] : 0;
                                    this.data = new Float32Array([b632, c632, d632]);
                                }
                            }
                            get x() {
                                return this.data[0];
                            }
                            set x(z631) {
                                this.data[0] = z631;
                            }
                            get y() {
                                return this.data[1];
                            }
                            set y(y631) {
                                this.data[1] = y631;
                            }
                            get z() {
                                return this.data[2];
                            }
                            set z(x631) {
                                this.data[2] = x631;
                            }
                            Clone() {
                                return new s451(this.x, this.y, this.z);
                            }
                            SetZero() {
                                return this.x = 0, this.y = 0, this.z = 0, this;
                            }
                            SetXYZ(u631, v631, w631) {
                                return this.x = u631, this.y = v631, this.z = w631, this;
                            }
                            Copy(t631) {
                                return this.x = t631.x, this.y = t631.y, this.z = t631.z, this;
                            }
                            SelfNeg() {
                                return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
                            }
                            SelfAdd(s631) {
                                return this.x += s631.x, this.y += s631.y, this.z += s631.z, this;
                            }
                            SelfAddXYZ(p631, q631, r631) {
                                return this.x += p631, this.y += q631, this.z += r631, this;
                            }
                            SelfSub(o631) {
                                return this.x -= o631.x, this.y -= o631.y, this.z -= o631.z, this;
                            }
                            SelfSubXYZ(l631, m631, n631) {
                                return this.x -= l631, this.y -= m631, this.z -= n631, this;
                            }
                            SelfMul(k631) {
                                return this.x *= k631, this.y *= k631, this.z *= k631, this;
                            }
                            static DotV3V3(i631, j631) {
                                return i631.x * j631.x + i631.y * j631.y + i631.z * j631.z;
                            }
                            static CrossV3V3(z630, a631, b631) {
                                const c631 = z630.x, d631 = z630.y, e631 = z630.z, f631 = a631.x, g631 = a631.y, h631 = a631.z;
                                return b631.x = d631 * h631 - e631 * g631, b631.y = e631 * f631 - c631 * h631, b631.z = c631 * g631 - d631 * f631, b631;
                            }
                        }
                        s451.ZERO = new s451(0, 0, 0), s451.s_t0 = new s451();
                        class t451 {
                            constructor() {
                                this.data = new Float32Array([1, 0, 0, 1]), this.ex = new q451(this.data.subarray(0, 2)), this.ey = new q451(this.data.subarray(2, 4));
                            }
                            Clone() {
                                return new t451().Copy(this);
                            }
                            static FromVV(x630, y630) {
                                return new t451().SetVV(x630, y630);
                            }
                            static FromSSSS(t630, u630, v630, w630) {
                                return new t451().SetSSSS(t630, u630, v630, w630);
                            }
                            static FromAngle(s630) {
                                return new t451().SetAngle(s630);
                            }
                            SetSSSS(o630, p630, q630, r630) {
                                return this.ex.Set(o630, q630), this.ey.Set(p630, r630), this;
                            }
                            SetVV(m630, n630) {
                                return this.ex.Copy(m630), this.ey.Copy(n630), this;
                            }
                            SetAngle(j630) {
                                const k630 = Math.cos(j630), l630 = Math.sin(j630);
                                return this.ex.Set(k630, l630), this.ey.Set(-l630, k630), this;
                            }
                            Copy(i630) {
                                return this.ex.Copy(i630.ex), this.ey.Copy(i630.ey), this;
                            }
                            SetIdentity() {
                                return this.ex.Set(1, 0), this.ey.Set(0, 1), this;
                            }
                            SetZero() {
                                return this.ex.SetZero(), this.ey.SetZero(), this;
                            }
                            GetAngle() {
                                return Math.atan2(this.ex.y, this.ex.x);
                            }
                            GetInverse(c630) {
                                const d630 = this.ex.x, e630 = this.ey.x, f630 = this.ex.y, g630 = this.ey.y;
                                let h630 = d630 * g630 - e630 * f630;
                                return 0 !== h630 && (h630 = 1 / h630), c630.ex.x = h630 * g630, c630.ey.x = -h630 * e630, c630.ex.y = -h630 * f630, c630.ey.y = h630 * d630, c630;
                            }
                            Solve(u629, v629, w629) {
                                const x629 = this.ex.x, y629 = this.ey.x, z629 = this.ex.y, a630 = this.ey.y;
                                let b630 = x629 * a630 - y629 * z629;
                                return 0 !== b630 && (b630 = 1 / b630), w629.x = b630 * (a630 * u629 - y629 * v629), w629.y = b630 * (x629 * v629 - z629 * u629), w629;
                            }
                            SelfAbs() {
                                return this.ex.SelfAbs(), this.ey.SelfAbs(), this;
                            }
                            SelfInv() {
                                return this.GetInverse(this), this;
                            }
                            SelfAddM(t629) {
                                return this.ex.SelfAdd(t629.ex), this.ey.SelfAdd(t629.ey), this;
                            }
                            SelfSubM(s629) {
                                return this.ex.SelfSub(s629.ex), this.ey.SelfSub(s629.ey), this;
                            }
                            static AbsM(o629, p629) {
                                const q629 = o629.ex, r629 = o629.ey;
                                return p629.ex.x = h451(q629.x), p629.ex.y = h451(q629.y), p629.ey.x = h451(r629.x), p629.ey.y = h451(r629.y), p629;
                            }
                            static MulMV(h629, i629, j629) {
                                const k629 = h629.ex, l629 = h629.ey, m629 = i629.x, n629 = i629.y;
                                return j629.x = k629.x * m629 + l629.x * n629, j629.y = k629.y * m629 + l629.y * n629, j629;
                            }
                            static MulTMV(a629, b629, c629) {
                                const d629 = a629.ex, e629 = a629.ey, f629 = b629.x, g629 = b629.y;
                                return c629.x = d629.x * f629 + d629.y * g629, c629.y = e629.x * f629 + e629.y * g629, c629;
                            }
                            static AddMM(t628, u628, v628) {
                                const w628 = t628.ex, x628 = t628.ey, y628 = u628.ex, z628 = u628.ey;
                                return v628.ex.x = w628.x + y628.x, v628.ex.y = w628.y + y628.y, v628.ey.x = x628.x + z628.x, v628.ey.y = x628.y + z628.y, v628;
                            }
                            static MulMM(i628, j628, k628) {
                                const l628 = i628.ex.x, m628 = i628.ex.y, n628 = i628.ey.x, o628 = i628.ey.y, p628 = j628.ex.x, q628 = j628.ex.y, r628 = j628.ey.x, s628 = j628.ey.y;
                                return k628.ex.x = l628 * p628 + n628 * q628, k628.ex.y = m628 * p628 + o628 * q628, k628.ey.x = l628 * r628 + n628 * s628, k628.ey.y = m628 * r628 + o628 * s628, k628;
                            }
                            static MulTMM(x627, y627, z627) {
                                const a628 = x627.ex.x, b628 = x627.ex.y, c628 = x627.ey.x, d628 = x627.ey.y, e628 = y627.ex.x, f628 = y627.ex.y, g628 = y627.ey.x, h628 = y627.ey.y;
                                return z627.ex.x = a628 * e628 + b628 * f628, z627.ex.y = c628 * e628 + d628 * f628, z627.ey.x = a628 * g628 + b628 * h628, z627.ey.y = c628 * g628 + d628 * h628, z627;
                            }
                        }
                        t451.IDENTITY = new t451();
                        class u451 {
                            constructor() {
                                this.data = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]), this.ex = new s451(this.data.subarray(0, 3)), this.ey = new s451(this.data.subarray(3, 6)), this.ez = new s451(this.data.subarray(6, 9));
                            }
                            Clone() {
                                return new u451().Copy(this);
                            }
                            SetVVV(u627, v627, w627) {
                                return this.ex.Copy(u627), this.ey.Copy(v627), this.ez.Copy(w627), this;
                            }
                            Copy(t627) {
                                return this.ex.Copy(t627.ex), this.ey.Copy(t627.ey), this.ez.Copy(t627.ez), this;
                            }
                            SetIdentity() {
                                return this.ex.SetXYZ(1, 0, 0), this.ey.SetXYZ(0, 1, 0), this.ez.SetXYZ(0, 0, 1), this;
                            }
                            SetZero() {
                                return this.ex.SetZero(), this.ey.SetZero(), this.ez.SetZero(), this;
                            }
                            SelfAddM(s627) {
                                return this.ex.SelfAdd(s627.ex), this.ey.SelfAdd(s627.ey), this.ez.SelfAdd(s627.ez), this;
                            }
                            Solve33(e627, f627, g627, h627) {
                                const i627 = this.ex.x, j627 = this.ex.y, k627 = this.ex.z, l627 = this.ey.x, m627 = this.ey.y, n627 = this.ey.z, o627 = this.ez.x, p627 = this.ez.y, q627 = this.ez.z;
                                let r627 = i627 * (m627 * q627 - n627 * p627) + j627 * (n627 * o627 - l627 * q627) + k627 * (l627 * p627 - m627 * o627);
                                return 0 !== r627 && (r627 = 1 / r627), h627.x = r627 * (e627 * (m627 * q627 - n627 * p627) + f627 * (n627 * o627 - l627 * q627) + g627 * (l627 * p627 - m627 * o627)), h627.y = r627 * (i627 * (f627 * q627 - g627 * p627) + j627 * (g627 * o627 - e627 * q627) + k627 * (e627 * p627 - f627 * o627)), h627.z = r627 * (i627 * (m627 * g627 - n627 * f627) + j627 * (n627 * e627 - l627 * g627) + k627 * (l627 * f627 - m627 * e627)), h627;
                            }
                            Solve22(w626, x626, y626) {
                                const z626 = this.ex.x, a627 = this.ey.x, b627 = this.ex.y, c627 = this.ey.y;
                                let d627 = z626 * c627 - a627 * b627;
                                return 0 !== d627 && (d627 = 1 / d627), y626.x = d627 * (c627 * w626 - a627 * x626), y626.y = d627 * (z626 * x626 - b627 * w626), y626;
                            }
                            GetInverse22(q626) {
                                const r626 = this.ex.x, s626 = this.ey.x, t626 = this.ex.y, u626 = this.ey.y;
                                let v626 = r626 * u626 - s626 * t626;
                                0 !== v626 && (v626 = 1 / v626), q626.ex.x = v626 * u626, q626.ey.x = -v626 * s626, q626.ex.z = 0, q626.ex.y = -v626 * t626, q626.ey.y = v626 * r626, q626.ey.z = 0, q626.ez.x = 0, q626.ez.y = 0, q626.ez.z = 0;
                            }
                            GetSymInverse33(i626) {
                                let j626 = s451.DotV3V3(this.ex, s451.CrossV3V3(this.ey, this.ez, s451.s_t0));
                                0 !== j626 && (j626 = 1 / j626);
                                const k626 = this.ex.x, l626 = this.ey.x, m626 = this.ez.x, n626 = this.ey.y, o626 = this.ez.y, p626 = this.ez.z;
                                i626.ex.x = j626 * (n626 * p626 - o626 * o626), i626.ex.y = j626 * (m626 * o626 - l626 * p626), i626.ex.z = j626 * (l626 * o626 - m626 * n626), i626.ey.x = i626.ex.y, i626.ey.y = j626 * (k626 * p626 - m626 * m626), i626.ey.z = j626 * (m626 * l626 - k626 * o626), i626.ez.x = i626.ex.z, i626.ez.y = i626.ey.z, i626.ez.z = j626 * (k626 * n626 - l626 * l626);
                            }
                            static MulM33V3(c626, d626, e626) {
                                const f626 = d626.x, g626 = d626.y, h626 = d626.z;
                                return e626.x = c626.ex.x * f626 + c626.ey.x * g626 + c626.ez.x * h626, e626.y = c626.ex.y * f626 + c626.ey.y * g626 + c626.ez.y * h626, e626.z = c626.ex.z * f626 + c626.ey.z * g626 + c626.ez.z * h626, e626;
                            }
                            static MulM33XYZ(x625, y625, z625, a626, b626) {
                                return b626.x = x625.ex.x * y625 + x625.ey.x * z625 + x625.ez.x * a626, b626.y = x625.ex.y * y625 + x625.ey.y * z625 + x625.ez.y * a626, b626.z = x625.ex.z * y625 + x625.ey.z * z625 + x625.ez.z * a626, b626;
                            }
                            static MulM33V2(s625, t625, u625) {
                                const v625 = t625.x, w625 = t625.y;
                                return u625.x = s625.ex.x * v625 + s625.ey.x * w625, u625.y = s625.ex.y * v625 + s625.ey.y * w625, u625;
                            }
                            static MulM33XY(o625, p625, q625, r625) {
                                return r625.x = o625.ex.x * p625 + o625.ey.x * q625, r625.y = o625.ex.y * p625 + o625.ey.y * q625, r625;
                            }
                        }
                        u451.IDENTITY = new u451();
                        class v451 {
                            constructor(n625 = 0) {
                                this.s = 0, this.c = 1, n625 && (this.s = Math.sin(n625), this.c = Math.cos(n625));
                            }
                            Clone() {
                                return new v451().Copy(this);
                            }
                            Copy(m625) {
                                return this.s = m625.s, this.c = m625.c, this;
                            }
                            SetAngle(l625) {
                                return this.s = Math.sin(l625), this.c = Math.cos(l625), this;
                            }
                            SetIdentity() {
                                return this.s = 0, this.c = 1, this;
                            }
                            GetAngle() {
                                return Math.atan2(this.s, this.c);
                            }
                            GetXAxis(k625) {
                                return k625.x = this.c, k625.y = this.s, k625;
                            }
                            GetYAxis(j625) {
                                return j625.x = -this.s, j625.y = this.c, j625;
                            }
                            static MulRR(c625, d625, e625) {
                                const f625 = c625.c, g625 = c625.s, h625 = d625.c, i625 = d625.s;
                                return e625.s = g625 * h625 + f625 * i625, e625.c = f625 * h625 - g625 * i625, e625;
                            }
                            static MulTRR(v624, w624, x624) {
                                const y624 = v624.c, z624 = v624.s, a625 = w624.c, b625 = w624.s;
                                return x624.s = y624 * b625 - z624 * a625, x624.c = y624 * a625 + z624 * b625, x624;
                            }
                            static MulRV(o624, p624, q624) {
                                const r624 = o624.c, s624 = o624.s, t624 = p624.x, u624 = p624.y;
                                return q624.x = r624 * t624 - s624 * u624, q624.y = s624 * t624 + r624 * u624, q624;
                            }
                            static MulTRV(h624, i624, j624) {
                                const k624 = h624.c, l624 = h624.s, m624 = i624.x, n624 = i624.y;
                                return j624.x = k624 * m624 + l624 * n624, j624.y = -l624 * m624 + k624 * n624, j624;
                            }
                        }
                        v451.IDENTITY = new v451();
                        class w451 {
                            constructor() {
                                this.p = new q451(), this.q = new v451();
                            }
                            Clone() {
                                return new w451().Copy(this);
                            }
                            Copy(g624) {
                                return this.p.Copy(g624.p), this.q.Copy(g624.q), this;
                            }
                            SetIdentity() {
                                return this.p.SetZero(), this.q.SetIdentity(), this;
                            }
                            SetPositionRotation(e624, f624) {
                                return this.p.Copy(e624), this.q.Copy(f624), this;
                            }
                            SetPositionAngle(c624, d624) {
                                return this.p.Copy(c624), this.q.SetAngle(d624), this;
                            }
                            SetPosition(b624) {
                                return this.p.Copy(b624), this;
                            }
                            SetPositionXY(z623, a624) {
                                return this.p.Set(z623, a624), this;
                            }
                            SetRotation(y623) {
                                return this.q.Copy(y623), this;
                            }
                            SetRotationAngle(x623) {
                                return this.q.SetAngle(x623), this;
                            }
                            GetPosition() {
                                return this.p;
                            }
                            GetRotation() {
                                return this.q;
                            }
                            GetRotationAngle() {
                                return this.q.GetAngle();
                            }
                            GetAngle() {
                                return this.q.GetAngle();
                            }
                            static MulXV(q623, r623, s623) {
                                const t623 = q623.q.c, u623 = q623.q.s, v623 = r623.x, w623 = r623.y;
                                return s623.x = t623 * v623 - u623 * w623 + q623.p.x, s623.y = u623 * v623 + t623 * w623 + q623.p.y, s623;
                            }
                            static MulTXV(j623, k623, l623) {
                                const m623 = j623.q.c, n623 = j623.q.s, o623 = k623.x - j623.p.x, p623 = k623.y - j623.p.y;
                                return l623.x = m623 * o623 + n623 * p623, l623.y = -n623 * o623 + m623 * p623, l623;
                            }
                            static MulXX(g623, h623, i623) {
                                return v451.MulRR(g623.q, h623.q, i623.q), q451.AddVV(v451.MulRV(g623.q, h623.p, i623.p), g623.p, i623.p), i623;
                            }
                            static MulTXX(d623, e623, f623) {
                                return v451.MulTRR(d623.q, e623.q, f623.q), v451.MulTRV(d623.q, q451.SubVV(e623.p, d623.p, f623.p), f623.p), f623;
                            }
                        }
                        w451.IDENTITY = new w451();
                        class x451 {
                            constructor() {
                                this.localCenter = new q451(), this.c0 = new q451(), this.c = new q451(), this.a0 = 0, this.a = 0, this.alpha0 = 0;
                            }
                            Clone() {
                                return new x451().Copy(this);
                            }
                            Copy(c623) {
                                return this.localCenter.Copy(c623.localCenter), this.c0.Copy(c623.c0), this.c.Copy(c623.c), this.a0 = c623.a0, this.a = c623.a, this.alpha0 = c623.alpha0, this;
                            }
                            GetTransform(y622, z622) {
                                const a623 = 1 - z622;
                                y622.p.x = a623 * this.c0.x + z622 * this.c.x, y622.p.y = a623 * this.c0.y + z622 * this.c.y;
                                const b623 = a623 * this.a0 + z622 * this.a;
                                return y622.q.SetAngle(b623), y622.p.SelfSub(v451.MulRV(y622.q, this.localCenter, q451.s_t0)), y622;
                            }
                            Advance(v622) {
                                const w622 = (v622 - this.alpha0) / (1 - this.alpha0), x622 = 1 - w622;
                                this.c0.x = x622 * this.c0.x + w622 * this.c.x, this.c0.y = x622 * this.c0.y + w622 * this.c.y, this.a0 = x622 * this.a0 + w622 * this.a, this.alpha0 = v622;
                            }
                            Normalize() {
                                const u622 = g451 * Math.floor(this.a0 / g451);
                                this.a0 -= u622, this.a -= u622;
                            }
                        }
                        class y451 {
                            constructor(...p622) {
                                if (p622[0] instanceof Float32Array) {
                                    if (4 !== p622[0].length)
                                        throw new Error();
                                    this.data = p622[0];
                                }
                                else {
                                    const q622 = "number" == typeof p622[0] ? p622[0] : .5, r622 = "number" == typeof p622[1] ? p622[1] : .5, s622 = "number" == typeof p622[2] ? p622[2] : .5, t622 = "number" == typeof p622[3] ? p622[3] : 1;
                                    this.data = new Float32Array([q622, r622, s622, t622]);
                                }
                            }
                            get r() {
                                return this.data[0];
                            }
                            set r(o622) {
                                this.data[0] = o622;
                            }
                            get g() {
                                return this.data[1];
                            }
                            set g(n622) {
                                this.data[1] = n622;
                            }
                            get b() {
                                return this.data[2];
                            }
                            set b(m622) {
                                this.data[2] = m622;
                            }
                            get a() {
                                return this.data[3];
                            }
                            set a(l622) {
                                this.data[3] = l622;
                            }
                            Clone() {
                                return new y451().Copy(this);
                            }
                            Copy(k622) {
                                return this.r = k622.r, this.g = k622.g, this.b = k622.b, this.a = k622.a, this;
                            }
                            IsEqual(j622) {
                                return this.r === j622.r && this.g === j622.g && this.b === j622.b && this.a === j622.a;
                            }
                            IsZero() {
                                return 0 === this.r && 0 === this.g && 0 === this.b && 0 === this.a;
                            }
                            Set(f622, g622, h622, i622 = this.a) {
                                this.SetRGBA(f622, g622, h622, i622);
                            }
                            SetByteRGB(c622, d622, e622) {
                                return this.r = c622 / 255, this.g = d622 / 255, this.b = e622 / 255, this;
                            }
                            SetByteRGBA(y621, z621, a622, b622) {
                                return this.r = y621 / 255, this.g = z621 / 255, this.b = a622 / 255, this.a = b622 / 255, this;
                            }
                            SetRGB(v621, w621, x621) {
                                return this.r = v621, this.g = w621, this.b = x621, this;
                            }
                            SetRGBA(r621, s621, t621, u621) {
                                return this.r = r621, this.g = s621, this.b = t621, this.a = u621, this;
                            }
                            SelfAdd(q621) {
                                return this.r += q621.r, this.g += q621.g, this.b += q621.b, this.a += q621.a, this;
                            }
                            Add(o621, p621) {
                                return p621.r = this.r + o621.r, p621.g = this.g + o621.g, p621.b = this.b + o621.b, p621.a = this.a + o621.a, p621;
                            }
                            SelfSub(n621) {
                                return this.r -= n621.r, this.g -= n621.g, this.b -= n621.b, this.a -= n621.a, this;
                            }
                            Sub(l621, m621) {
                                return m621.r = this.r - l621.r, m621.g = this.g - l621.g, m621.b = this.b - l621.b, m621.a = this.a - l621.a, m621;
                            }
                            SelfMul(k621) {
                                return this.r *= k621, this.g *= k621, this.b *= k621, this.a *= k621, this;
                            }
                            Mul(i621, j621) {
                                return j621.r = this.r * i621, j621.g = this.g * i621, j621.b = this.b * i621, j621.a = this.a * i621, j621;
                            }
                            Mix(g621, h621) {
                                y451.MixColors(this, g621, h621);
                            }
                            static MixColors(z620, a621, b621) {
                                const c621 = b621 * (a621.r - z620.r), d621 = b621 * (a621.g - z620.g), e621 = b621 * (a621.b - z620.b), f621 = b621 * (a621.a - z620.a);
                                z620.r += c621, z620.g += d621, z620.b += e621, z620.a += f621, a621.r -= c621, a621.g -= d621, a621.b -= e621, a621.a -= f621;
                            }
                            MakeStyleString(u620 = this.a) {
                                return y451.MakeStyleString(this.r, this.g, this.b, u620);
                            }
                            static MakeStyleString(v620, w620, x620, y620 = 1) {
                                return v620 *= 255, w620 *= 255, x620 *= 255, y620 < 1 ? `rgba(${v620},${w620},${x620},${y620})` : `rgb(${v620},${w620},${x620})`;
                            }
                        }
                        var z451;
                        y451.ZERO = new y451(0, 0, 0, 0), y451.RED = new y451(1, 0, 0), y451.GREEN = new y451(0, 1, 0), y451.BLUE = new y451(0, 0, 1), (z451 = m447.b2DrawFlags || (m447.b2DrawFlags = {}))[z451.e_none = 0] = "e_none", z451[z451.e_shapeBit = 1] = "e_shapeBit", z451[z451.e_jointBit = 2] = "e_jointBit", z451[z451.e_aabbBit = 4] = "e_aabbBit", z451[z451.e_pairBit = 8] = "e_pairBit", z451[z451.e_centerOfMassBit = 16] = "e_centerOfMassBit", z451[z451.e_particleBit = 32] = "e_particleBit", z451[z451.e_controllerBit = 64] = "e_controllerBit", z451[z451.e_all = 63] = "e_all";
                        class a452 {
                            constructor() {
                                this.m_drawFlags = 0;
                            }
                            SetFlags(t620) {
                                this.m_drawFlags = t620;
                            }
                            GetFlags() {
                                return this.m_drawFlags;
                            }
                            AppendFlags(s620) {
                                this.m_drawFlags |= s620;
                            }
                            ClearFlags(r620) {
                                this.m_drawFlags &= ~r620;
                            }
                        }
                        class b452 {
                            constructor() {
                                this.m_start = Date.now();
                            }
                            Reset() {
                                return this.m_start = Date.now(), this;
                            }
                            GetMilliseconds() {
                                return Date.now() - this.m_start;
                            }
                        }
                        class c452 {
                            constructor() {
                                this.m_count = 0, this.m_min_count = 0, this.m_max_count = 0;
                            }
                            GetCount() {
                                return this.m_count;
                            }
                            GetMinCount() {
                                return this.m_min_count;
                            }
                            GetMaxCount() {
                                return this.m_max_count;
                            }
                            ResetCount() {
                                const q620 = this.m_count;
                                return this.m_count = 0, q620;
                            }
                            ResetMinCount() {
                                this.m_min_count = 0;
                            }
                            ResetMaxCount() {
                                this.m_max_count = 0;
                            }
                            Increment() {
                                this.m_count++, this.m_max_count < this.m_count && (this.m_max_count = this.m_count);
                            }
                            Decrement() {
                                this.m_count--, this.m_min_count > this.m_count && (this.m_min_count = this.m_count);
                            }
                        }
                        class d452 {
                            constructor(o620) {
                                this.m_stack = [], this.m_count = 0, this.m_stack = u447(o620, () => null), this.m_count = 0;
                            }
                            Reset() {
                                return this.m_count = 0, this;
                            }
                            Push(n620) {
                                this.m_stack[this.m_count] = n620, this.m_count++;
                            }
                            Pop() {
                                this.m_count--;
                                const m620 = this.m_stack[this.m_count];
                                if (this.m_stack[this.m_count] = null, null === m620)
                                    throw new Error();
                                return m620;
                            }
                            GetCount() {
                                return this.m_count;
                            }
                        }
                        class e452 {
                        }
                        class f452 {
                        }
                        class g452 {
                            constructor() {
                                this.m_buffer = q451.MakeArray(2), this.m_vertices = this.m_buffer, this.m_count = 0, this.m_radius = 0;
                            }
                            Copy(l620) {
                                return l620.m_vertices === l620.m_buffer ? (this.m_vertices = this.m_buffer, this.m_buffer[0].Copy(l620.m_buffer[0]), this.m_buffer[1].Copy(l620.m_buffer[1])) : this.m_vertices = l620.m_vertices, this.m_count = l620.m_count, this.m_radius = l620.m_radius, this;
                            }
                            Reset() {
                                return this.m_vertices = this.m_buffer, this.m_count = 0, this.m_radius = 0, this;
                            }
                            SetShape(j620, k620) {
                                j620.SetupDistanceProxy(this, k620);
                            }
                            SetVerticesRadius(g620, h620, i620) {
                                this.m_vertices = g620, this.m_count = h620, this.m_radius = i620;
                            }
                            GetSupport(b620) {
                                let c620 = 0, d620 = q451.DotVV(this.m_vertices[0], b620);
                                for (let e620 = 1; e620 < this.m_count; ++e620) {
                                    const f620 = q451.DotVV(this.m_vertices[e620], b620);
                                    f620 > d620 && (c620 = e620, d620 = f620);
                                }
                                return c620;
                            }
                            GetSupportVertex(w619) {
                                let x619 = 0, y619 = q451.DotVV(this.m_vertices[0], w619);
                                for (let z619 = 1; z619 < this.m_count; ++z619) {
                                    const a620 = q451.DotVV(this.m_vertices[z619], w619);
                                    a620 > y619 && (x619 = z619, y619 = a620);
                                }
                                return this.m_vertices[x619];
                            }
                            GetVertexCount() {
                                return this.m_count;
                            }
                            GetVertex(v619) {
                                return this.m_vertices[v619];
                            }
                        }
                        class h452 {
                            constructor() {
                                this.metric = 0, this.count = 0, this.indexA = [0, 0, 0], this.indexB = [0, 0, 0];
                            }
                            Reset() {
                                return this.metric = 0, this.count = 0, this;
                            }
                        }
                        class i452 {
                            constructor() {
                                this.proxyA = new g452(), this.proxyB = new g452(), this.transformA = new w451(), this.transformB = new w451(), this.useRadii = !1;
                            }
                            Reset() {
                                return this.proxyA.Reset(), this.proxyB.Reset(), this.transformA.SetIdentity(), this.transformB.SetIdentity(), this.useRadii = !1, this;
                            }
                        }
                        class j452 {
                            constructor() {
                                this.pointA = new q451(), this.pointB = new q451(), this.distance = 0, this.iterations = 0;
                            }
                            Reset() {
                                return this.pointA.SetZero(), this.pointB.SetZero(), this.distance = 0, this.iterations = 0, this;
                            }
                        }
                        class k452 {
                            constructor() {
                                this.proxyA = new g452(), this.proxyB = new g452(), this.transformA = new w451(), this.transformB = new w451(), this.translationB = new q451();
                            }
                        }
                        class l452 {
                            constructor() {
                                this.point = new q451(), this.normal = new q451(), this.lambda = 0, this.iterations = 0;
                            }
                        }
                        function j448() {
                            m447.b2_gjkCalls = 0, m447.b2_gjkIters = 0, m447.b2_gjkMaxIters = 0;
                        }
                        m447.b2_gjkCalls = 0, m447.b2_gjkIters = 0, m447.b2_gjkMaxIters = 0;
                        class m452 {
                            constructor() {
                                this.wA = new q451(), this.wB = new q451(), this.w = new q451(), this.a = 0, this.indexA = 0, this.indexB = 0;
                            }
                            Copy(u619) {
                                return this.wA.Copy(u619.wA), this.wB.Copy(u619.wB), this.w.Copy(u619.w), this.a = u619.a, this.indexA = u619.indexA, this.indexB = u619.indexB, this;
                            }
                        }
                        class n452 {
                            constructor() {
                                this.m_v1 = new m452(), this.m_v2 = new m452(), this.m_v3 = new m452(), this.m_vertices = [], this.m_count = 0, this.m_vertices[0] = this.m_v1, this.m_vertices[1] = this.m_v2, this.m_vertices[2] = this.m_v3;
                            }
                            ReadCache(f619, g619, h619, i619, j619) {
                                this.m_count = f619.count;
                                const k619 = this.m_vertices;
                                for (let q619 = 0; q619 < this.m_count; ++q619) {
                                    const r619 = k619[q619];
                                    r619.indexA = f619.indexA[q619], r619.indexB = f619.indexB[q619];
                                    const s619 = g619.GetVertex(r619.indexA), t619 = i619.GetVertex(r619.indexB);
                                    w451.MulXV(h619, s619, r619.wA), w451.MulXV(j619, t619, r619.wB), q451.SubVV(r619.wB, r619.wA, r619.w), r619.a = 0;
                                }
                                if (this.m_count > 1) {
                                    const o619 = f619.metric, p619 = this.GetMetric();
                                    (p619 < .5 * o619 || 2 * o619 < p619 || p619 < s449) && (this.m_count = 0);
                                }
                                if (0 === this.m_count) {
                                    const l619 = k619[0];
                                    l619.indexA = 0, l619.indexB = 0;
                                    const m619 = g619.GetVertex(0), n619 = i619.GetVertex(0);
                                    w451.MulXV(h619, m619, l619.wA), w451.MulXV(j619, n619, l619.wB), q451.SubVV(l619.wB, l619.wA, l619.w), l619.a = 1, this.m_count = 1;
                                }
                            }
                            WriteCache(c619) {
                                c619.metric = this.GetMetric(), c619.count = this.m_count;
                                const d619 = this.m_vertices;
                                for (let e619 = 0; e619 < this.m_count; ++e619)
                                    c619.indexA[e619] = d619[e619].indexA, c619.indexB[e619] = d619[e619].indexB;
                            }
                            GetSearchDirection(a619) {
                                switch (this.m_count) {
                                    case 1:
                                        return q451.NegV(this.m_v1.w, a619);
                                    case 2:
                                        {
                                            const b619 = q451.SubVV(this.m_v2.w, this.m_v1.w, a619);
                                            return q451.CrossVV(b619, q451.NegV(this.m_v1.w, q451.s_t0)) > 0 ? q451.CrossOneV(b619, a619) : q451.CrossVOne(b619, a619);
                                        }
                                    default:
                                        return a619.SetZero();
                                }
                            }
                            GetClosestPoint(z618) {
                                switch (this.m_count) {
                                    case 0:
                                        return z618.SetZero();
                                    case 1:
                                        return z618.Copy(this.m_v1.w);
                                    case 2:
                                        return z618.Set(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
                                    case 3:
                                    default:
                                        return z618.SetZero();
                                }
                            }
                            GetWitnessPoints(x618, y618) {
                                switch (this.m_count) {
                                    case 0:
                                        break;
                                    case 1:
                                        x618.Copy(this.m_v1.wA), y618.Copy(this.m_v1.wB);
                                        break;
                                    case 2:
                                        x618.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x, x618.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y, y618.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x, y618.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
                                        break;
                                    case 3:
                                        y618.x = x618.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x, y618.y = x618.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
                                }
                            }
                            GetMetric() {
                                switch (this.m_count) {
                                    case 0:
                                    case 1:
                                        return 0;
                                    case 2:
                                        return q451.DistanceVV(this.m_v1.w, this.m_v2.w);
                                    case 3:
                                        return q451.CrossVV(q451.SubVV(this.m_v2.w, this.m_v1.w, q451.s_t0), q451.SubVV(this.m_v3.w, this.m_v1.w, q451.s_t1));
                                    default:
                                        return 0;
                                }
                            }
                            Solve2() {
                                const r618 = this.m_v1.w, s618 = this.m_v2.w, t618 = q451.SubVV(s618, r618, n452.s_e12), u618 = -q451.DotVV(r618, t618);
                                if (u618 <= 0)
                                    return this.m_v1.a = 1, void (this.m_count = 1);
                                const v618 = q451.DotVV(s618, t618);
                                if (v618 <= 0)
                                    return this.m_v2.a = 1, this.m_count = 1, void this.m_v1.Copy(this.m_v2);
                                const w618 = 1 / (v618 + u618);
                                this.m_v1.a = v618 * w618, this.m_v2.a = u618 * w618, this.m_count = 2;
                            }
                            Solve3() {
                                const u617 = this.m_v1.w, v617 = this.m_v2.w, w617 = this.m_v3.w, x617 = q451.SubVV(v617, u617, n452.s_e12), y617 = q451.DotVV(u617, x617), z617 = q451.DotVV(v617, x617), a618 = -y617, b618 = q451.SubVV(w617, u617, n452.s_e13), c618 = q451.DotVV(u617, b618), d618 = q451.DotVV(w617, b618), e618 = -c618, f618 = q451.SubVV(w617, v617, n452.s_e23), g618 = q451.DotVV(v617, f618), h618 = q451.DotVV(w617, f618), i618 = -g618, j618 = q451.CrossVV(x617, b618), k618 = j618 * q451.CrossVV(v617, w617), l618 = j618 * q451.CrossVV(w617, u617), m618 = j618 * q451.CrossVV(u617, v617);
                                if (a618 <= 0 && e618 <= 0)
                                    return this.m_v1.a = 1, void (this.m_count = 1);
                                if (z617 > 0 && a618 > 0 && m618 <= 0) {
                                    const q618 = 1 / (z617 + a618);
                                    return this.m_v1.a = z617 * q618, this.m_v2.a = a618 * q618, void (this.m_count = 2);
                                }
                                if (d618 > 0 && e618 > 0 && l618 <= 0) {
                                    const p618 = 1 / (d618 + e618);
                                    return this.m_v1.a = d618 * p618, this.m_v3.a = e618 * p618, this.m_count = 2, void this.m_v2.Copy(this.m_v3);
                                }
                                if (z617 <= 0 && i618 <= 0)
                                    return this.m_v2.a = 1, this.m_count = 1, void this.m_v1.Copy(this.m_v2);
                                if (d618 <= 0 && h618 <= 0)
                                    return this.m_v3.a = 1, this.m_count = 1, void this.m_v1.Copy(this.m_v3);
                                if (h618 > 0 && i618 > 0 && k618 <= 0) {
                                    const o618 = 1 / (h618 + i618);
                                    return this.m_v2.a = h618 * o618, this.m_v3.a = i618 * o618, this.m_count = 2, void this.m_v1.Copy(this.m_v3);
                                }
                                const n618 = 1 / (k618 + l618 + m618);
                                this.m_v1.a = k618 * n618, this.m_v2.a = l618 * n618, this.m_v3.a = m618 * n618, this.m_count = 3;
                            }
                        }
                        n452.s_e12 = new q451(), n452.s_e13 = new q451(), n452.s_e23 = new q451();
                        const o452 = new n452(), p452 = [0, 0, 0], q452 = [0, 0, 0], r452 = new q451(), s452 = new q451(), t452 = new q451(), u452 = new q451(), v452 = new q451();
                        function k448(x616, y616, z616) {
                            ++m447.b2_gjkCalls;
                            const a617 = z616.proxyA, b617 = z616.proxyB, c617 = z616.transformA, d617 = z616.transformB, e617 = o452;
                            e617.ReadCache(y616, a617, c617, b617, d617);
                            const f617 = e617.m_vertices, g617 = 20, h617 = p452, i617 = q452;
                            let j617 = 0, k617 = 0;
                            for (; k617 < g617;) {
                                j617 = e617.m_count;
                                for (let t617 = 0; t617 < j617; ++t617)
                                    h617[t617] = f617[t617].indexA, i617[t617] = f617[t617].indexB;
                                switch (e617.m_count) {
                                    case 1:
                                        break;
                                    case 2:
                                        e617.Solve2();
                                        break;
                                    case 3:
                                        e617.Solve3();
                                }
                                if (3 === e617.m_count)
                                    break;
                                const p617 = e617.GetSearchDirection(s452);
                                if (p617.LengthSquared() < t449)
                                    break;
                                const q617 = f617[e617.m_count];
                                q617.indexA = a617.GetSupport(v451.MulTRV(c617.q, q451.NegV(p617, q451.s_t0), u452)), w451.MulXV(c617, a617.GetVertex(q617.indexA), q617.wA), q617.indexB = b617.GetSupport(v451.MulTRV(d617.q, p617, v452)), w451.MulXV(d617, b617.GetVertex(q617.indexB), q617.wB), q451.SubVV(q617.wB, q617.wA, q617.w), ++k617, ++m447.b2_gjkIters;
                                let r617 = !1;
                                for (let s617 = 0; s617 < j617; ++s617)
                                    if (q617.indexA === h617[s617] && q617.indexB === i617[s617]) {
                                        r617 = !0;
                                        break;
                                    }
                                if (r617)
                                    break;
                                ++e617.m_count;
                            }
                            if (m447.b2_gjkMaxIters = y447(m447.b2_gjkMaxIters, k617), e617.GetWitnessPoints(x616.pointA, x616.pointB), x616.distance = q451.DistanceVV(x616.pointA, x616.pointB), x616.iterations = k617, e617.WriteCache(y616), z616.useRadii) {
                                const l617 = a617.m_radius, m617 = b617.m_radius;
                                if (x616.distance > l617 + m617 && x616.distance > s449) {
                                    x616.distance -= l617 + m617;
                                    const o617 = q451.SubVV(x616.pointB, x616.pointA, t452);
                                    o617.Normalize(), x616.pointA.SelfMulAdd(l617, o617), x616.pointB.SelfMulSub(m617, o617);
                                }
                                else {
                                    const n617 = q451.MidVV(x616.pointA, x616.pointB, r452);
                                    x616.pointA.Copy(n617), x616.pointB.Copy(n617), x616.distance = 0;
                                }
                            }
                        }
                        const w452 = new q451(), x452 = new n452(), y452 = new q451(), z452 = new q451(), a453 = new q451(), b453 = new q451(), c453 = new q451(), d453 = new q451();
                        function l448(w615, x615) {
                            w615.iterations = 0, w615.lambda = 1, w615.normal.SetZero(), w615.point.SetZero();
                            const y615 = x615.proxyA, z615 = x615.proxyB, a616 = y447(y615.m_radius, b450) + y447(z615.m_radius, b450), b616 = x615.transformA, c616 = x615.transformB, d616 = x615.translationB, e616 = w452.Set(0, 0);
                            let f616 = 0;
                            const g616 = x452;
                            g616.m_count = 0;
                            const h616 = g616.m_vertices;
                            let i616 = y615.GetSupport(v451.MulTRV(b616.q, q451.NegV(d616, q451.s_t1), q451.s_t0)), j616 = w451.MulXV(b616, y615.GetVertex(i616), y452), k616 = z615.GetSupport(v451.MulTRV(c616.q, d616, q451.s_t0)), l616 = w451.MulXV(c616, z615.GetVertex(k616), z452);
                            const m616 = q451.SubVV(j616, l616, a453), n616 = y447(b450, a616 - b450), o616 = .5 * z449, p616 = 20;
                            let q616 = 0;
                            for (; q616 < p616 && h451(m616.Length() - n616) > o616;) {
                                w615.iterations += 1, i616 = y615.GetSupport(v451.MulTRV(b616.q, q451.NegV(m616, q451.s_t1), q451.s_t0)), j616 = w451.MulXV(b616, y615.GetVertex(i616), y452), k616 = z615.GetSupport(v451.MulTRV(c616.q, m616, q451.s_t0)), l616 = w451.MulXV(c616, z615.GetVertex(k616), z452);
                                const t616 = q451.SubVV(j616, l616, b453);
                                m616.Normalize();
                                const u616 = q451.DotVV(m616, t616), v616 = q451.DotVV(m616, d616);
                                if (u616 - n616 > f616 * v616) {
                                    if (v616 <= 0)
                                        return !1;
                                    if (f616 = (u616 - n616) / v616, f616 > 1)
                                        return !1;
                                    e616.Copy(m616).SelfNeg(), g616.m_count = 0;
                                }
                                const w616 = h616[g616.m_count];
                                switch ((w616.indexA = k616, w616.wA.Copy(l616).SelfMulAdd(f616, d616), w616.indexB = i616, w616.wB.Copy(j616), w616.w.Copy(w616.wB).SelfSub(w616.wA), w616.a = 1, g616.m_count += 1, g616.m_count)) {
                                    case 1:
                                        break;
                                    case 2:
                                        g616.Solve2();
                                        break;
                                    case 3:
                                        g616.Solve3();
                                }
                                if (3 === g616.m_count)
                                    return !1;
                                g616.GetClosestPoint(m616), ++q616;
                            }
                            const r616 = c453, s616 = d453;
                            return g616.GetWitnessPoints(r616, s616), m616.LengthSquared() > 0 && (e616.Copy(m616).SelfNeg(), e616.Normalize()), w615.normal.Copy(e616), w615.lambda = f616, w615.iterations = q616, !0;
                        }
                        var e453, f453, g453;
                        (e453 = m447.b2ContactFeatureType || (m447.b2ContactFeatureType = {}))[e453.e_vertex = 0] = "e_vertex", e453[e453.e_face = 1] = "e_face";
                        class h453 {
                            constructor() {
                                this._key = 0, this._key_invalid = !1, this._indexA = 0, this._indexB = 0, this._typeA = 0, this._typeB = 0;
                            }
                            get key() {
                                return this._key_invalid && (this._key_invalid = !1, this._key = this._indexA | this._indexB << 8 | this._typeA << 16 | this._typeB << 24), this._key;
                            }
                            set key(v615) {
                                this._key = v615, this._key_invalid = !1, this._indexA = 255 & this._key, this._indexB = this._key >> 8 & 255, this._typeA = this._key >> 16 & 255, this._typeB = this._key >> 24 & 255;
                            }
                            get indexA() {
                                return this._indexA;
                            }
                            set indexA(u615) {
                                this._indexA = u615, this._key_invalid = !0;
                            }
                            get indexB() {
                                return this._indexB;
                            }
                            set indexB(t615) {
                                this._indexB = t615, this._key_invalid = !0;
                            }
                            get typeA() {
                                return this._typeA;
                            }
                            set typeA(s615) {
                                this._typeA = s615, this._key_invalid = !0;
                            }
                            get typeB() {
                                return this._typeB;
                            }
                            set typeB(r615) {
                                this._typeB = r615, this._key_invalid = !0;
                            }
                        }
                        class i453 {
                            constructor() {
                                this.cf = new h453();
                            }
                            Copy(q615) {
                                return this.key = q615.key, this;
                            }
                            Clone() {
                                return new i453().Copy(this);
                            }
                            get key() {
                                return this.cf.key;
                            }
                            set key(p615) {
                                this.cf.key = p615;
                            }
                        }
                        class j453 {
                            constructor() {
                                this.localPoint = new q451(), this.normalImpulse = 0, this.tangentImpulse = 0, this.id = new i453();
                            }
                            static MakeArray(n615) {
                                return u447(n615, () => new j453());
                            }
                            Reset() {
                                this.localPoint.SetZero(), this.normalImpulse = 0, this.tangentImpulse = 0, this.id.key = 0;
                            }
                            Copy(m615) {
                                return this.localPoint.Copy(m615.localPoint), this.normalImpulse = m615.normalImpulse, this.tangentImpulse = m615.tangentImpulse, this.id.Copy(m615.id), this;
                            }
                        }
                        (f453 = m447.b2ManifoldType || (m447.b2ManifoldType = {}))[f453.e_unknown = -1] = "e_unknown", f453[f453.e_circles = 0] = "e_circles", f453[f453.e_faceA = 1] = "e_faceA", f453[f453.e_faceB = 2] = "e_faceB";
                        class k453 {
                            constructor() {
                                this.points = j453.MakeArray(v449), this.localNormal = new q451(), this.localPoint = new q451(), this.type = m447.b2ManifoldType.e_unknown, this.pointCount = 0;
                            }
                            Reset() {
                                for (let l615 = 0; l615 < v449; ++l615)
                                    this.points[l615].Reset();
                                this.localNormal.SetZero(), this.localPoint.SetZero(), this.type = m447.b2ManifoldType.e_unknown, this.pointCount = 0;
                            }
                            Copy(j615) {
                                this.pointCount = j615.pointCount;
                                for (let k615 = 0; k615 < v449; ++k615)
                                    this.points[k615].Copy(j615.points[k615]);
                                return this.localNormal.Copy(j615.localNormal), this.localPoint.Copy(j615.localPoint), this.type = j615.type, this;
                            }
                            Clone() {
                                return new k453().Copy(this);
                            }
                        }
                        class l453 {
                            constructor() {
                                this.normal = new q451(), this.points = q451.MakeArray(v449), this.separations = w447(v449);
                            }
                            Initialize(o614, p614, q614, r614, s614) {
                                if (0 !== o614.pointCount)
                                    switch (o614.type) {
                                        case m447.b2ManifoldType.e_circles:
                                            {
                                                this.normal.Set(1, 0);
                                                const f615 = w451.MulXV(p614, o614.localPoint, l453.Initialize_s_pointA), g615 = w451.MulXV(r614, o614.points[0].localPoint, l453.Initialize_s_pointB);
                                                q451.DistanceSquaredVV(f615, g615) > t449 && q451.SubVV(g615, f615, this.normal).SelfNormalize();
                                                const h615 = q451.AddVMulSV(f615, q614, this.normal, l453.Initialize_s_cA), i615 = q451.SubVMulSV(g615, s614, this.normal, l453.Initialize_s_cB);
                                                q451.MidVV(h615, i615, this.points[0]), this.separations[0] = q451.DotVV(q451.SubVV(i615, h615, q451.s_t0), this.normal);
                                                break;
                                            }
                                        case m447.b2ManifoldType.e_faceA:
                                            {
                                                v451.MulRV(p614.q, o614.localNormal, this.normal);
                                                const z614 = w451.MulXV(p614, o614.localPoint, l453.Initialize_s_planePoint);
                                                for (let a615 = 0; a615 < o614.pointCount; ++a615) {
                                                    const b615 = w451.MulXV(r614, o614.points[a615].localPoint, l453.Initialize_s_clipPoint), c615 = q614 - q451.DotVV(q451.SubVV(b615, z614, q451.s_t0), this.normal), d615 = q451.AddVMulSV(b615, c615, this.normal, l453.Initialize_s_cA), e615 = q451.SubVMulSV(b615, s614, this.normal, l453.Initialize_s_cB);
                                                    q451.MidVV(d615, e615, this.points[a615]), this.separations[a615] = q451.DotVV(q451.SubVV(e615, d615, q451.s_t0), this.normal);
                                                }
                                                break;
                                            }
                                        case m447.b2ManifoldType.e_faceB:
                                            {
                                                v451.MulRV(r614.q, o614.localNormal, this.normal);
                                                const t614 = w451.MulXV(r614, o614.localPoint, l453.Initialize_s_planePoint);
                                                for (let u614 = 0; u614 < o614.pointCount; ++u614) {
                                                    const v614 = w451.MulXV(p614, o614.points[u614].localPoint, l453.Initialize_s_clipPoint), w614 = s614 - q451.DotVV(q451.SubVV(v614, t614, q451.s_t0), this.normal), x614 = q451.AddVMulSV(v614, w614, this.normal, l453.Initialize_s_cB), y614 = q451.SubVMulSV(v614, q614, this.normal, l453.Initialize_s_cA);
                                                    q451.MidVV(y614, x614, this.points[u614]), this.separations[u614] = q451.DotVV(q451.SubVV(y614, x614, q451.s_t0), this.normal);
                                                }
                                                this.normal.SelfNeg();
                                                break;
                                            }
                                    }
                            }
                        }
                        function m448(d614, e614, f614, g614) {
                            let h614;
                            for (h614 = 0; h614 < f614.pointCount; ++h614) {
                                const l614 = f614.points[h614].id.key;
                                d614[h614] = m447.b2PointState.b2_removeState;
                                for (let m614 = 0, n614 = g614.pointCount; m614 < n614; ++m614)
                                    if (g614.points[m614].id.key === l614) {
                                        d614[h614] = m447.b2PointState.b2_persistState;
                                        break;
                                    }
                            }
                            for (; h614 < v449; ++h614)
                                d614[h614] = m447.b2PointState.b2_nullState;
                            for (h614 = 0; h614 < g614.pointCount; ++h614) {
                                const i614 = g614.points[h614].id.key;
                                e614[h614] = m447.b2PointState.b2_addState;
                                for (let j614 = 0, k614 = f614.pointCount; j614 < k614; ++j614)
                                    if (f614.points[j614].id.key === i614) {
                                        e614[h614] = m447.b2PointState.b2_persistState;
                                        break;
                                    }
                            }
                            for (; h614 < v449; ++h614)
                                e614[h614] = m447.b2PointState.b2_nullState;
                        }
                        l453.Initialize_s_pointA = new q451(), l453.Initialize_s_pointB = new q451(), l453.Initialize_s_cA = new q451(), l453.Initialize_s_cB = new q451(), l453.Initialize_s_planePoint = new q451(), l453.Initialize_s_clipPoint = new q451(), (g453 = m447.b2PointState || (m447.b2PointState = {}))[g453.b2_nullState = 0] = "b2_nullState", g453[g453.b2_addState = 1] = "b2_addState", g453[g453.b2_persistState = 2] = "b2_persistState", g453[g453.b2_removeState = 3] = "b2_removeState";
                        class m453 {
                            constructor() {
                                this.v = new q451(), this.id = new i453();
                            }
                            static MakeArray(b614) {
                                return u447(b614, () => new m453());
                            }
                            Copy(a614) {
                                return this.v.Copy(a614.v), this.id.Copy(a614.id), this;
                            }
                        }
                        class n453 {
                            constructor() {
                                this.p1 = new q451(), this.p2 = new q451(), this.maxFraction = 1;
                            }
                            Copy(z613) {
                                return this.p1.Copy(z613.p1), this.p2.Copy(z613.p2), this.maxFraction = z613.maxFraction, this;
                            }
                        }
                        class o453 {
                            constructor() {
                                this.normal = new q451(), this.fraction = 0;
                            }
                            Copy(y613) {
                                return this.normal.Copy(y613.normal), this.fraction = y613.fraction, this;
                            }
                        }
                        class p453 {
                            constructor() {
                                this.lowerBound = new q451(), this.upperBound = new q451(), this.m_cache_center = new q451(), this.m_cache_extent = new q451();
                            }
                            Copy(x613) {
                                return this.lowerBound.Copy(x613.lowerBound), this.upperBound.Copy(x613.upperBound), this;
                            }
                            IsValid() {
                                return !(!this.lowerBound.IsValid() || !this.upperBound.IsValid() || this.upperBound.x < this.lowerBound.x || this.upperBound.y < this.lowerBound.y);
                            }
                            GetCenter() {
                                return q451.MidVV(this.lowerBound, this.upperBound, this.m_cache_center);
                            }
                            GetExtents() {
                                return q451.ExtVV(this.lowerBound, this.upperBound, this.m_cache_extent);
                            }
                            GetPerimeter() {
                                return 2 * (this.upperBound.x - this.lowerBound.x + (this.upperBound.y - this.lowerBound.y));
                            }
                            Combine1(w613) {
                                return this.lowerBound.x = x447(this.lowerBound.x, w613.lowerBound.x), this.lowerBound.y = x447(this.lowerBound.y, w613.lowerBound.y), this.upperBound.x = y447(this.upperBound.x, w613.upperBound.x), this.upperBound.y = y447(this.upperBound.y, w613.upperBound.y), this;
                            }
                            Combine2(u613, v613) {
                                return this.lowerBound.x = x447(u613.lowerBound.x, v613.lowerBound.x), this.lowerBound.y = x447(u613.lowerBound.y, v613.lowerBound.y), this.upperBound.x = y447(u613.upperBound.x, v613.upperBound.x), this.upperBound.y = y447(u613.upperBound.y, v613.upperBound.y), this;
                            }
                            static Combine(r613, s613, t613) {
                                return t613.Combine2(r613, s613), t613;
                            }
                            Contains(q613) {
                                return !(this.lowerBound.x <= q613.lowerBound.x || this.lowerBound.y <= q613.lowerBound.y || q613.upperBound.x <= this.upperBound.x || q613.upperBound.y <= this.upperBound.y);
                            }
                            RayCast(v612, w612) {
                                let x612 = -r449, y612 = r449;
                                const z612 = w612.p1.x, a613 = w612.p1.y, b613 = w612.p2.x - w612.p1.x, c613 = w612.p2.y - w612.p1.y, d613 = h451(b613), e613 = h451(c613), f613 = v612.normal;
                                if (d613 < s449) {
                                    if (z612 < this.lowerBound.x || this.upperBound.x < z612)
                                        return !1;
                                }
                                else {
                                    const l613 = 1 / b613;
                                    let m613 = (this.lowerBound.x - z612) * l613, n613 = (this.upperBound.x - z612) * l613, o613 = -1;
                                    if (m613 > n613) {
                                        const p613 = m613;
                                        m613 = n613, n613 = p613, o613 = 1;
                                    }
                                    if (m613 > x612 && (f613.x = o613, f613.y = 0, x612 = m613), y612 = x447(y612, n613), x612 > y612)
                                        return !1;
                                }
                                if (e613 < s449) {
                                    if (a613 < this.lowerBound.y || this.upperBound.y < a613)
                                        return !1;
                                }
                                else {
                                    const g613 = 1 / c613;
                                    let h613 = (this.lowerBound.y - a613) * g613, i613 = (this.upperBound.y - a613) * g613, j613 = -1;
                                    if (h613 > i613) {
                                        const k613 = h613;
                                        h613 = i613, i613 = k613, j613 = 1;
                                    }
                                    if (h613 > x612 && (f613.x = 0, f613.y = j613, x612 = h613), y612 = x447(y612, i613), x612 > y612)
                                        return !1;
                                }
                                return !(x612 < 0 || w612.maxFraction < x612 || (v612.fraction = x612, 0));
                            }
                            TestContain(u612) {
                                return !(u612.x < this.lowerBound.x || this.upperBound.x < u612.x || u612.y < this.lowerBound.y || this.upperBound.y < u612.y);
                            }
                            TestOverlap(t612) {
                                return !(this.upperBound.x < t612.lowerBound.x || this.upperBound.y < t612.lowerBound.y || t612.upperBound.x < this.lowerBound.x || t612.upperBound.y < this.lowerBound.y);
                            }
                        }
                        function n448(r612, s612) {
                            return !(r612.upperBound.x < s612.lowerBound.x || r612.upperBound.y < s612.lowerBound.y || s612.upperBound.x < r612.lowerBound.x || s612.upperBound.y < r612.lowerBound.y);
                        }
                        function o448(e612, f612, g612, h612, i612) {
                            let j612 = 0;
                            const k612 = f612[0], l612 = f612[1], m612 = q451.DotVV(g612, k612.v) - h612, n612 = q451.DotVV(g612, l612.v) - h612;
                            if (m612 <= 0 && e612[j612++].Copy(k612), n612 <= 0 && e612[j612++].Copy(l612), m612 * n612 < 0) {
                                const o612 = m612 / (m612 - n612), p612 = e612[j612].v;
                                p612.x = k612.v.x + o612 * (l612.v.x - k612.v.x), p612.y = k612.v.y + o612 * (l612.v.y - k612.v.y);
                                const q612 = e612[j612].id;
                                q612.cf.indexA = i612, q612.cf.indexB = k612.id.cf.indexB, q612.cf.typeA = m447.b2ContactFeatureType.e_vertex, q612.cf.typeB = m447.b2ContactFeatureType.e_face, ++j612;
                            }
                            return j612;
                        }
                        const q453 = new i452(), r453 = new h452(), s453 = new j452();
                        function p448(v611, w611, x611, y611, z611, a612) {
                            const b612 = q453.Reset();
                            b612.proxyA.SetShape(v611, w611), b612.proxyB.SetShape(x611, y611), b612.transformA.Copy(z611), b612.transformB.Copy(a612), b612.useRadii = !0;
                            const c612 = r453.Reset();
                            c612.count = 0;
                            const d612 = s453.Reset();
                            return k448(d612, c612, b612), d612.distance < 10 * s449;
                        }
                        function q448(u611) {
                            if (null === u611)
                                throw new Error();
                            return u611;
                        }
                        class t453 {
                            constructor(t611 = 0) {
                                this.m_id = 0, this.aabb = new p453(), this._userData = null, this.parent = null, this.child1 = null, this.child2 = null, this.height = 0, this.m_id = t611;
                            }
                            get userData() {
                                if (null === this._userData)
                                    throw new Error();
                                return this._userData;
                            }
                            set userData(s611) {
                                if (null !== this._userData)
                                    throw new Error();
                                this._userData = s611;
                            }
                            Reset() {
                                this._userData = null;
                            }
                            IsLeaf() {
                                return null === this.child1;
                            }
                        }
                        class u453 {
                            constructor() {
                                this.m_root = null, this.m_freeList = null, this.m_path = 0, this.m_insertionCount = 0, this.m_stack = new d452(256);
                            }
                            Query(o611, p611) {
                                const q611 = this.m_stack.Reset();
                                for (q611.Push(this.m_root); q611.GetCount() > 0;) {
                                    const r611 = q611.Pop();
                                    if (null !== r611 && r611.aabb.TestOverlap(o611))
                                        if (r611.IsLeaf()) {
                                            if (!p611(r611))
                                                return;
                                        }
                                        else
                                            q611.Push(r611.child1), q611.Push(r611.child2);
                                }
                            }
                            QueryPoint(k611, l611) {
                                const m611 = this.m_stack.Reset();
                                for (m611.Push(this.m_root); m611.GetCount() > 0;) {
                                    const n611 = m611.Pop();
                                    if (null !== n611 && n611.aabb.TestContain(k611))
                                        if (n611.IsLeaf()) {
                                            if (!l611(n611))
                                                return;
                                        }
                                        else
                                            m611.Push(n611.child1), m611.Push(n611.child2);
                                }
                            }
                            RayCast(t610, u610) {
                                const v610 = t610.p1, w610 = t610.p2, x610 = q451.SubVV(w610, v610, u453.s_r);
                                x610.Normalize();
                                const y610 = q451.CrossOneV(x610, u453.s_v), z610 = q451.AbsV(y610, u453.s_abs_v);
                                let a611 = t610.maxFraction;
                                const b611 = u453.s_segmentAABB;
                                let c611 = v610.x + a611 * (w610.x - v610.x), d611 = v610.y + a611 * (w610.y - v610.y);
                                b611.lowerBound.x = x447(v610.x, c611), b611.lowerBound.y = x447(v610.y, d611), b611.upperBound.x = y447(v610.x, c611), b611.upperBound.y = y447(v610.y, d611);
                                const e611 = this.m_stack.Reset();
                                for (e611.Push(this.m_root); e611.GetCount() > 0;) {
                                    const f611 = e611.Pop();
                                    if (null === f611)
                                        continue;
                                    if (!n448(f611.aabb, b611))
                                        continue;
                                    const g611 = f611.aabb.GetCenter(), h611 = f611.aabb.GetExtents();
                                    if (!(h451(q451.DotVV(y610, q451.SubVV(v610, g611, q451.s_t0))) - q451.DotVV(z610, h611) > 0))
                                        if (f611.IsLeaf()) {
                                            const i611 = u453.s_subInput;
                                            i611.p1.Copy(t610.p1), i611.p2.Copy(t610.p2), i611.maxFraction = a611;
                                            const j611 = u610(i611, f611);
                                            if (0 === j611)
                                                return;
                                            j611 > 0 && (a611 = j611, c611 = v610.x + a611 * (w610.x - v610.x), d611 = v610.y + a611 * (w610.y - v610.y), b611.lowerBound.x = x447(v610.x, c611), b611.lowerBound.y = x447(v610.y, d611), b611.upperBound.x = y447(v610.x, c611), b611.upperBound.y = y447(v610.y, d611));
                                        }
                                        else
                                            e611.Push(f611.child1), e611.Push(f611.child2);
                                }
                            }
                            AllocateNode() {
                                if (null !== this.m_freeList) {
                                    const s610 = this.m_freeList;
                                    return this.m_freeList = s610.parent, s610.parent = null, s610.child1 = null, s610.child2 = null, s610.height = 0, s610;
                                }
                                return new t453(u453.s_node_id++);
                            }
                            FreeNode(r610) {
                                r610.parent = this.m_freeList, r610.child1 = null, r610.child2 = null, r610.height = -1, r610.Reset(), this.m_freeList = r610;
                            }
                            CreateProxy(m610, n610) {
                                const o610 = this.AllocateNode(), p610 = x449, q610 = x449;
                                return o610.aabb.lowerBound.x = m610.lowerBound.x - p610, o610.aabb.lowerBound.y = m610.lowerBound.y - q610, o610.aabb.upperBound.x = m610.upperBound.x + p610, o610.aabb.upperBound.y = m610.upperBound.y + q610, o610.userData = n610, o610.height = 0, this.InsertLeaf(o610), o610;
                            }
                            DestroyProxy(l610) {
                                this.RemoveLeaf(l610), this.FreeNode(l610);
                            }
                            MoveProxy(e610, f610, g610) {
                                if (e610.aabb.Contains(f610))
                                    return !1;
                                this.RemoveLeaf(e610);
                                const h610 = x449, i610 = x449;
                                e610.aabb.lowerBound.x = f610.lowerBound.x - h610, e610.aabb.lowerBound.y = f610.lowerBound.y - i610, e610.aabb.upperBound.x = f610.upperBound.x + h610, e610.aabb.upperBound.y = f610.upperBound.y + i610;
                                const j610 = y449 * g610.x, k610 = y449 * g610.y;
                                return j610 < 0 ? e610.aabb.lowerBound.x += j610 : e610.aabb.upperBound.x += j610, k610 < 0 ? e610.aabb.lowerBound.y += k610 : e610.aabb.upperBound.y += k610, this.InsertLeaf(e610), !0;
                            }
                            InsertLeaf(k609) {
                                if (++this.m_insertionCount, null === this.m_root)
                                    return this.m_root = k609, void (this.m_root.parent = null);
                                const l609 = k609.aabb;
                                let m609 = this.m_root;
                                for (; !m609.IsLeaf();) {
                                    const s609 = q448(m609.child1), t609 = q448(m609.child2), u609 = m609.aabb.GetPerimeter(), v609 = u453.s_combinedAABB;
                                    v609.Combine2(m609.aabb, l609);
                                    const w609 = v609.GetPerimeter(), x609 = 2 * w609, y609 = 2 * (w609 - u609);
                                    let z609;
                                    const a610 = u453.s_aabb;
                                    let b610, c610, d610;
                                    if (s609.IsLeaf() ? (a610.Combine2(l609, s609.aabb), z609 = a610.GetPerimeter() + y609) : (a610.Combine2(l609, s609.aabb), b610 = s609.aabb.GetPerimeter(), c610 = a610.GetPerimeter(), z609 = c610 - b610 + y609), t609.IsLeaf() ? (a610.Combine2(l609, t609.aabb), d610 = a610.GetPerimeter() + y609) : (a610.Combine2(l609, t609.aabb), b610 = t609.aabb.GetPerimeter(), c610 = a610.GetPerimeter(), d610 = c610 - b610 + y609), x609 < z609 && x609 < d610)
                                        break;
                                    m609 = z609 < d610 ? s609 : t609;
                                }
                                const n609 = m609.parent, o609 = this.AllocateNode();
                                o609.parent = n609, o609.aabb.Combine2(l609, m609.aabb), o609.height = m609.height + 1, null !== n609 ? (n609.child1 === m609 ? n609.child1 = o609 : n609.child2 = o609, o609.child1 = m609, o609.child2 = k609, m609.parent = o609, k609.parent = o609) : (o609.child1 = m609, o609.child2 = k609, m609.parent = o609, k609.parent = o609, this.m_root = o609);
                                let p609 = k609.parent;
                                for (; null !== p609;) {
                                    p609 = this.Balance(p609);
                                    const q609 = q448(p609.child1), r609 = q448(p609.child2);
                                    p609.height = 1 + y447(q609.height, r609.height), p609.aabb.Combine2(q609.aabb, r609.aabb), p609 = p609.parent;
                                }
                            }
                            RemoveLeaf(d609) {
                                if (d609 === this.m_root)
                                    return void (this.m_root = null);
                                const e609 = q448(d609.parent), f609 = e609 && e609.parent, g609 = q448(e609.child1 === d609 ? e609.child2 : e609.child1);
                                if (null !== f609) {
                                    f609.child1 === e609 ? f609.child1 = g609 : f609.child2 = g609, g609.parent = f609, this.FreeNode(e609);
                                    let h609 = f609;
                                    for (; null !== h609;) {
                                        h609 = this.Balance(h609);
                                        const i609 = q448(h609.child1), j609 = q448(h609.child2);
                                        h609.aabb.Combine2(i609.aabb, j609.aabb), h609.height = 1 + y447(i609.height, j609.height), h609 = h609.parent;
                                    }
                                }
                                else
                                    this.m_root = g609, g609.parent = null, this.FreeNode(e609);
                            }
                            Balance(v608) {
                                if (v608.IsLeaf() || v608.height < 2)
                                    return v608;
                                const w608 = q448(v608.child1), x608 = q448(v608.child2), y608 = x608.height - w608.height;
                                if (y608 > 1) {
                                    const b609 = q448(x608.child1), c609 = q448(x608.child2);
                                    return x608.child1 = v608, x608.parent = v608.parent, v608.parent = x608, null !== x608.parent ? x608.parent.child1 === v608 ? x608.parent.child1 = x608 : x608.parent.child2 = x608 : this.m_root = x608, b609.height > c609.height ? (x608.child2 = b609, v608.child2 = c609, c609.parent = v608, v608.aabb.Combine2(w608.aabb, c609.aabb), x608.aabb.Combine2(v608.aabb, b609.aabb), v608.height = 1 + y447(w608.height, c609.height), x608.height = 1 + y447(v608.height, b609.height)) : (x608.child2 = c609, v608.child2 = b609, b609.parent = v608, v608.aabb.Combine2(w608.aabb, b609.aabb), x608.aabb.Combine2(v608.aabb, c609.aabb), v608.height = 1 + y447(w608.height, b609.height), x608.height = 1 + y447(v608.height, c609.height)), x608;
                                }
                                if (y608 < -1) {
                                    const z608 = q448(w608.child1), a609 = q448(w608.child2);
                                    return w608.child1 = v608, w608.parent = v608.parent, v608.parent = w608, null !== w608.parent ? w608.parent.child1 === v608 ? w608.parent.child1 = w608 : w608.parent.child2 = w608 : this.m_root = w608, z608.height > a609.height ? (w608.child2 = z608, v608.child1 = a609, a609.parent = v608, v608.aabb.Combine2(x608.aabb, a609.aabb), w608.aabb.Combine2(v608.aabb, z608.aabb), v608.height = 1 + y447(x608.height, a609.height), w608.height = 1 + y447(v608.height, z608.height)) : (w608.child2 = a609, v608.child1 = z608, z608.parent = v608, v608.aabb.Combine2(x608.aabb, z608.aabb), w608.aabb.Combine2(v608.aabb, a609.aabb), v608.height = 1 + y447(x608.height, z608.height), w608.height = 1 + y447(v608.height, a609.height)), w608;
                                }
                                return v608;
                            }
                            GetHeight() {
                                return null === this.m_root ? 0 : this.m_root.height;
                            }
                            static GetAreaNode(t608) {
                                if (null === t608)
                                    return 0;
                                if (t608.IsLeaf())
                                    return 0;
                                let u608 = t608.aabb.GetPerimeter();
                                return u608 += u453.GetAreaNode(t608.child1), u608 += u453.GetAreaNode(t608.child2), u608;
                            }
                            GetAreaRatio() {
                                if (null === this.m_root)
                                    return 0;
                                const s608 = this.m_root.aabb.GetPerimeter();
                                return u453.GetAreaNode(this.m_root) / s608;
                            }
                            static ComputeHeightNode(r608) {
                                return null === r608 || r608.IsLeaf() ? 0 : 1 + y447(u453.ComputeHeightNode(r608.child1), u453.ComputeHeightNode(r608.child2));
                            }
                            ComputeHeight() {
                                return u453.ComputeHeightNode(this.m_root);
                            }
                            ValidateStructure(o608) {
                                if (null === o608)
                                    return;
                                if (this.m_root, o608.IsLeaf())
                                    return;
                                const p608 = q448(o608.child1), q608 = q448(o608.child2);
                                this.ValidateStructure(p608), this.ValidateStructure(q608);
                            }
                            ValidateMetrics(l608) {
                                if (null === l608)
                                    return;
                                if (l608.IsLeaf())
                                    return;
                                const m608 = q448(l608.child1), n608 = q448(l608.child2);
                                u453.s_aabb.Combine2(m608.aabb, n608.aabb), this.ValidateMetrics(m608), this.ValidateMetrics(n608);
                            }
                            Validate() { }
                            static GetMaxBalanceNode(h608, i608) {
                                if (null === h608)
                                    return i608;
                                if (h608.height <= 1)
                                    return i608;
                                const j608 = q448(h608.child1), k608 = q448(h608.child2);
                                return y447(i608, h451(k608.height - j608.height));
                            }
                            GetMaxBalance() {
                                return u453.GetMaxBalanceNode(this.m_root, 0);
                            }
                            RebuildBottomUp() {
                                this.Validate();
                            }
                            static ShiftOriginNode(d608, e608) {
                                if (null === d608)
                                    return;
                                if (d608.height <= 1)
                                    return;
                                const f608 = d608.child1, g608 = d608.child2;
                                u453.ShiftOriginNode(f608, e608), u453.ShiftOriginNode(g608, e608), d608.aabb.lowerBound.SelfSub(e608), d608.aabb.upperBound.SelfSub(e608);
                            }
                            ShiftOrigin(c608) {
                                u453.ShiftOriginNode(this.m_root, c608);
                            }
                        }
                        function r448(y607, z607, a608) {
                            const b608 = y607[z607];
                            y607[z607] = y607[a608], y607[a608] = b608;
                        }
                        function s448(w607, x607) {
                            return w607 < x607;
                        }
                        function t448(n607, o607 = 0, p607 = n607.length - o607, q607 = s448) {
                            let r607 = o607;
                            const s607 = [];
                            let t607 = 0;
                            for (;;) {
                                for (; r607 + 1 < p607; p607++) {
                                    const u607 = n607[r607 + Math.floor(Math.random() * (p607 - r607))];
                                    s607[t607++] = p607;
                                    for (let v607 = r607 - 1;;) {
                                        for (; q607(n607[++v607], u607);)
                                            ;
                                        for (; q607(u607, n607[--p607]);)
                                            ;
                                        if (v607 >= p607)
                                            break;
                                        r448(n607, v607, p607);
                                    }
                                }
                                if (0 === t607)
                                    break;
                                r607 = p607, p607 = s607[--t607];
                            }
                            return n607;
                        }
                        u453.s_r = new q451(), u453.s_v = new q451(), u453.s_abs_v = new q451(), u453.s_segmentAABB = new p453(), u453.s_subInput = new n453(), u453.s_combinedAABB = new p453(), u453.s_aabb = new p453(), u453.s_node_id = 0;
                        class v453 {
                            constructor(l607, m607) {
                                this.proxyA = l607, this.proxyB = m607;
                            }
                        }
                        class w453 {
                            constructor() {
                                this.m_tree = new u453(), this.m_proxyCount = 0, this.m_moveCount = 0, this.m_moveBuffer = [], this.m_pairCount = 0, this.m_pairBuffer = [];
                            }
                            CreateProxy(i607, j607) {
                                const k607 = this.m_tree.CreateProxy(i607, j607);
                                return ++this.m_proxyCount, this.BufferMove(k607), k607;
                            }
                            DestroyProxy(h607) {
                                this.UnBufferMove(h607), --this.m_proxyCount, this.m_tree.DestroyProxy(h607);
                            }
                            MoveProxy(e607, f607, g607) {
                                this.m_tree.MoveProxy(e607, f607, g607) && this.BufferMove(e607);
                            }
                            TouchProxy(d607) {
                                this.BufferMove(d607);
                            }
                            GetProxyCount() {
                                return this.m_proxyCount;
                            }
                            UpdatePairs(r606) {
                                this.m_pairCount = 0;
                                for (let v606 = 0; v606 < this.m_moveCount; ++v606) {
                                    const w606 = this.m_moveBuffer[v606];
                                    if (null === w606)
                                        continue;
                                    const x606 = w606.aabb;
                                    this.m_tree.Query(x606, z606 => {
                                        if (z606.m_id === w606.m_id)
                                            return !0;
                                        let a607, b607;
                                        if (z606.m_id < w606.m_id ? (a607 = z606, b607 = w606) : (a607 = w606, b607 = z606), this.m_pairCount === this.m_pairBuffer.length)
                                            this.m_pairBuffer[this.m_pairCount] = new v453(a607, b607);
                                        else {
                                            const c607 = this.m_pairBuffer[this.m_pairCount];
                                            c607.proxyA = a607, c607.proxyB = b607;
                                        }
                                        return ++this.m_pairCount, !0;
                                    });
                                }
                                this.m_moveCount = 0, t448(this.m_pairBuffer, 0, this.m_pairCount, u448);
                                let s606 = 0;
                                for (; s606 < this.m_pairCount;) {
                                    const t606 = this.m_pairBuffer[s606];
                                    for (r606(t606.proxyA.userData, t606.proxyB.userData), ++s606; s606 < this.m_pairCount;) {
                                        const u606 = this.m_pairBuffer[s606];
                                        if (u606.proxyA.m_id !== t606.proxyA.m_id || u606.proxyB.m_id !== t606.proxyB.m_id)
                                            break;
                                        ++s606;
                                    }
                                }
                            }
                            Query(p606, q606) {
                                this.m_tree.Query(p606, q606);
                            }
                            QueryPoint(n606, o606) {
                                this.m_tree.QueryPoint(n606, o606);
                            }
                            RayCast(l606, m606) {
                                this.m_tree.RayCast(l606, m606);
                            }
                            GetTreeHeight() {
                                return this.m_tree.GetHeight();
                            }
                            GetTreeBalance() {
                                return this.m_tree.GetMaxBalance();
                            }
                            GetTreeQuality() {
                                return this.m_tree.GetAreaRatio();
                            }
                            ShiftOrigin(k606) {
                                this.m_tree.ShiftOrigin(k606);
                            }
                            BufferMove(j606) {
                                this.m_moveBuffer[this.m_moveCount] = j606, ++this.m_moveCount;
                            }
                            UnBufferMove(h606) {
                                const i606 = this.m_moveBuffer.indexOf(h606);
                                this.m_moveBuffer[i606] = null;
                            }
                        }
                        function u448(f606, g606) {
                            return f606.proxyA.m_id < g606.proxyA.m_id || f606.proxyA.m_id === g606.proxyA.m_id && f606.proxyB.m_id < g606.proxyB.m_id;
                        }
                        function v448() {
                            m447.b2_toiTime = 0, m447.b2_toiMaxTime = 0, m447.b2_toiCalls = 0, m447.b2_toiIters = 0, m447.b2_toiMaxIters = 0, m447.b2_toiRootIters = 0, m447.b2_toiMaxRootIters = 0;
                        }
                        m447.b2_toiTime = 0, m447.b2_toiMaxTime = 0, m447.b2_toiCalls = 0, m447.b2_toiIters = 0, m447.b2_toiMaxIters = 0, m447.b2_toiRootIters = 0, m447.b2_toiMaxRootIters = 0;
                        const x453 = new w451(), y453 = new w451(), z453 = new q451(), a454 = new q451(), b454 = new q451(), c454 = new q451(), d454 = new q451();
                        class e454 {
                            constructor() {
                                this.proxyA = new g452(), this.proxyB = new g452(), this.sweepA = new x451(), this.sweepB = new x451(), this.tMax = 0;
                            }
                        }
                        var f454, g454;
                        (f454 = m447.b2TOIOutputState || (m447.b2TOIOutputState = {}))[f454.e_unknown = 0] = "e_unknown", f454[f454.e_failed = 1] = "e_failed", f454[f454.e_overlapped = 2] = "e_overlapped", f454[f454.e_touching = 3] = "e_touching", f454[f454.e_separated = 4] = "e_separated";
                        class h454 {
                            constructor() {
                                this.state = m447.b2TOIOutputState.e_unknown, this.t = 0;
                            }
                        }
                        (g454 = m447.b2SeparationFunctionType || (m447.b2SeparationFunctionType = {}))[g454.e_unknown = -1] = "e_unknown", g454[g454.e_points = 0] = "e_points", g454[g454.e_faceA = 1] = "e_faceA", g454[g454.e_faceB = 2] = "e_faceB";
                        class i454 {
                            constructor() {
                                this.m_sweepA = new x451(), this.m_sweepB = new x451(), this.m_type = m447.b2SeparationFunctionType.e_unknown, this.m_localPoint = new q451(), this.m_axis = new q451();
                            }
                            Initialize(d605, e605, f605, g605, h605, i605) {
                                this.m_proxyA = e605, this.m_proxyB = g605;
                                const j605 = d605.count;
                                this.m_sweepA.Copy(f605), this.m_sweepB.Copy(h605);
                                const k605 = x453, l605 = y453;
                                if (this.m_sweepA.GetTransform(k605, i605), this.m_sweepB.GetTransform(l605, i605), 1 === j605) {
                                    this.m_type = m447.b2SeparationFunctionType.e_points;
                                    const a606 = this.m_proxyA.GetVertex(d605.indexA[0]), b606 = this.m_proxyB.GetVertex(d605.indexB[0]), c606 = w451.MulXV(k605, a606, z453), d606 = w451.MulXV(l605, b606, a454);
                                    q451.SubVV(d606, c606, this.m_axis);
                                    const e606 = this.m_axis.Normalize();
                                    return this.m_localPoint.SetZero(), e606;
                                }
                                if (d605.indexA[0] === d605.indexA[1]) {
                                    this.m_type = m447.b2SeparationFunctionType.e_faceB;
                                    const t605 = this.m_proxyB.GetVertex(d605.indexB[0]), u605 = this.m_proxyB.GetVertex(d605.indexB[1]);
                                    q451.CrossVOne(q451.SubVV(u605, t605, q451.s_t0), this.m_axis).SelfNormalize();
                                    const v605 = v451.MulRV(l605.q, this.m_axis, b454);
                                    q451.MidVV(t605, u605, this.m_localPoint);
                                    const w605 = w451.MulXV(l605, this.m_localPoint, a454), x605 = this.m_proxyA.GetVertex(d605.indexA[0]), y605 = w451.MulXV(k605, x605, z453);
                                    let z605 = q451.DotVV(q451.SubVV(y605, w605, q451.s_t0), v605);
                                    return z605 < 0 && (this.m_axis.SelfNeg(), z605 = -z605), z605;
                                }
                                {
                                    this.m_type = m447.b2SeparationFunctionType.e_faceA;
                                    const m605 = this.m_proxyA.GetVertex(d605.indexA[0]), n605 = this.m_proxyA.GetVertex(d605.indexA[1]);
                                    q451.CrossVOne(q451.SubVV(n605, m605, q451.s_t0), this.m_axis).SelfNormalize();
                                    const o605 = v451.MulRV(k605.q, this.m_axis, b454);
                                    q451.MidVV(m605, n605, this.m_localPoint);
                                    const p605 = w451.MulXV(k605, this.m_localPoint, z453), q605 = this.m_proxyB.GetVertex(d605.indexB[0]), r605 = w451.MulXV(l605, q605, a454);
                                    let s605 = q451.DotVV(q451.SubVV(r605, p605, q451.s_t0), o605);
                                    return s605 < 0 && (this.m_axis.SelfNeg(), s605 = -s605), s605;
                                }
                            }
                            FindMinSeparation(i604, j604, k604) {
                                const l604 = x453, m604 = y453;
                                switch ((this.m_sweepA.GetTransform(l604, k604), this.m_sweepB.GetTransform(m604, k604), this.m_type)) {
                                    case m447.b2SeparationFunctionType.e_points:
                                        {
                                            const x604 = v451.MulTRV(l604.q, this.m_axis, c454), y604 = v451.MulTRV(m604.q, q451.NegV(this.m_axis, q451.s_t0), d454);
                                            i604[0] = this.m_proxyA.GetSupport(x604), j604[0] = this.m_proxyB.GetSupport(y604);
                                            const z604 = this.m_proxyA.GetVertex(i604[0]), a605 = this.m_proxyB.GetVertex(j604[0]), b605 = w451.MulXV(l604, z604, z453), c605 = w451.MulXV(m604, a605, a454);
                                            return q451.DotVV(q451.SubVV(c605, b605, q451.s_t0), this.m_axis);
                                        }
                                    case m447.b2SeparationFunctionType.e_faceA:
                                        {
                                            const s604 = v451.MulRV(l604.q, this.m_axis, b454), t604 = w451.MulXV(l604, this.m_localPoint, z453), u604 = v451.MulTRV(m604.q, q451.NegV(s604, q451.s_t0), d454);
                                            i604[0] = -1, j604[0] = this.m_proxyB.GetSupport(u604);
                                            const v604 = this.m_proxyB.GetVertex(j604[0]), w604 = w451.MulXV(m604, v604, a454);
                                            return q451.DotVV(q451.SubVV(w604, t604, q451.s_t0), s604);
                                        }
                                    case m447.b2SeparationFunctionType.e_faceB:
                                        {
                                            const n604 = v451.MulRV(m604.q, this.m_axis, b454), o604 = w451.MulXV(m604, this.m_localPoint, a454), p604 = v451.MulTRV(l604.q, q451.NegV(n604, q451.s_t0), c454);
                                            j604[0] = -1, i604[0] = this.m_proxyA.GetSupport(p604);
                                            const q604 = this.m_proxyA.GetVertex(i604[0]), r604 = w451.MulXV(l604, q604, z453);
                                            return q451.DotVV(q451.SubVV(r604, o604, q451.s_t0), n604);
                                        }
                                    default:
                                        return i604[0] = -1, j604[0] = -1, 0;
                                }
                            }
                            Evaluate(r603, s603, t603) {
                                const u603 = x453, v603 = y453;
                                switch ((this.m_sweepA.GetTransform(u603, t603), this.m_sweepB.GetTransform(v603, t603), this.m_type)) {
                                    case m447.b2SeparationFunctionType.e_points:
                                        {
                                            const e604 = this.m_proxyA.GetVertex(r603), f604 = this.m_proxyB.GetVertex(s603), g604 = w451.MulXV(u603, e604, z453), h604 = w451.MulXV(v603, f604, a454);
                                            return q451.DotVV(q451.SubVV(h604, g604, q451.s_t0), this.m_axis);
                                        }
                                    case m447.b2SeparationFunctionType.e_faceA:
                                        {
                                            const a604 = v451.MulRV(u603.q, this.m_axis, b454), b604 = w451.MulXV(u603, this.m_localPoint, z453), c604 = this.m_proxyB.GetVertex(s603), d604 = w451.MulXV(v603, c604, a454);
                                            return q451.DotVV(q451.SubVV(d604, b604, q451.s_t0), a604);
                                        }
                                    case m447.b2SeparationFunctionType.e_faceB:
                                        {
                                            const w603 = v451.MulRV(v603.q, this.m_axis, b454), x603 = w451.MulXV(v603, this.m_localPoint, a454), y603 = this.m_proxyA.GetVertex(r603), z603 = w451.MulXV(u603, y603, z453);
                                            return q451.DotVV(q451.SubVV(z603, x603, q451.s_t0), w603);
                                        }
                                    default:
                                        return 0;
                                }
                            }
                        }
                        const j454 = new b452(), k454 = new h452(), l454 = new i452(), m454 = new j452(), n454 = new i454(), o454 = [0], p454 = [0], q454 = new x451(), r454 = new x451();
                        function w448(j602, k602) {
                            const l602 = j454.Reset();
                            ++m447.b2_toiCalls, j602.state = m447.b2TOIOutputState.e_unknown, j602.t = k602.tMax;
                            const m602 = k602.proxyA, n602 = k602.proxyB, o602 = y447(w449, y447(m602.m_count, n602.m_count)), p602 = q454.Copy(k602.sweepA), q602 = r454.Copy(k602.sweepB);
                            p602.Normalize(), q602.Normalize();
                            const r602 = k602.tMax, s602 = m602.m_radius + n602.m_radius, t602 = y447(z449, s602 - 3 * z449), u602 = .25 * z449;
                            let v602 = 0;
                            const w602 = 20;
                            let x602 = 0;
                            const y602 = k454;
                            y602.count = 0;
                            const z602 = l454;
                            for (z602.proxyA.Copy(k602.proxyA), z602.proxyB.Copy(k602.proxyB), z602.useRadii = !1;;) {
                                const b603 = x453, c603 = y453;
                                p602.GetTransform(b603, v602), q602.GetTransform(c603, v602), z602.transformA.Copy(b603), z602.transformB.Copy(c603);
                                const d603 = m454;
                                if (k448(d603, y602, z602), d603.distance <= 0) {
                                    j602.state = m447.b2TOIOutputState.e_overlapped, j602.t = 0;
                                    break;
                                }
                                if (d603.distance < t602 + u602) {
                                    j602.state = m447.b2TOIOutputState.e_touching, j602.t = v602;
                                    break;
                                }
                                const e603 = n454;
                                e603.Initialize(y602, m602, p602, n602, q602, v602);
                                let f603 = !1, g603 = r602, h603 = 0;
                                for (;;) {
                                    const i603 = o454, j603 = p454;
                                    let k603 = e603.FindMinSeparation(i603, j603, g603);
                                    if (k603 > t602 + u602) {
                                        j602.state = m447.b2TOIOutputState.e_separated, j602.t = r602, f603 = !0;
                                        break;
                                    }
                                    if (k603 > t602 - u602) {
                                        v602 = g603;
                                        break;
                                    }
                                    let l603 = e603.Evaluate(i603[0], j603[0], v602);
                                    if (l603 < t602 - u602) {
                                        j602.state = m447.b2TOIOutputState.e_failed, j602.t = v602, f603 = !0;
                                        break;
                                    }
                                    if (l603 <= t602 + u602) {
                                        j602.state = m447.b2TOIOutputState.e_touching, j602.t = v602, f603 = !0;
                                        break;
                                    }
                                    let m603 = 0, n603 = v602, o603 = g603;
                                    for (;;) {
                                        let p603 = 0;
                                        p603 = 1 & m603 ? n603 + (t602 - l603) * (o603 - n603) / (k603 - l603) : .5 * (n603 + o603), ++m603, ++m447.b2_toiRootIters;
                                        const q603 = e603.Evaluate(i603[0], j603[0], p603);
                                        if (h451(q603 - t602) < u602) {
                                            g603 = p603;
                                            break;
                                        }
                                        if (q603 > t602 ? (n603 = p603, l603 = q603) : (o603 = p603, k603 = q603), 50 === m603)
                                            break;
                                    }
                                    if (m447.b2_toiMaxRootIters = y447(m447.b2_toiMaxRootIters, m603), ++h603, h603 === o602)
                                        break;
                                }
                                if (++x602, ++m447.b2_toiIters, f603)
                                    break;
                                if (x602 === w602) {
                                    j602.state = m447.b2TOIOutputState.e_failed, j602.t = v602;
                                    break;
                                }
                            }
                            m447.b2_toiMaxIters = y447(m447.b2_toiMaxIters, x602);
                            const a603 = l602.GetMilliseconds();
                            m447.b2_toiMaxTime = y447(m447.b2_toiMaxTime, a603), m447.b2_toiTime += a603;
                        }
                        const s454 = new q451(), t454 = new q451();
                        function x448(a602, b602, c602, d602, e602) {
                            a602.pointCount = 0;
                            const f602 = w451.MulXV(c602, b602.m_p, s454), g602 = w451.MulXV(e602, d602.m_p, t454), h602 = q451.DistanceSquaredVV(f602, g602), i602 = b602.m_radius + d602.m_radius;
                            h602 > i602 * i602 || (a602.type = m447.b2ManifoldType.e_circles, a602.localPoint.Copy(b602.m_p), a602.localNormal.SetZero(), a602.pointCount = 1, a602.points[0].localPoint.Copy(d602.m_p), a602.points[0].id.key = 0);
                        }
                        const u454 = new q451(), v454 = new q451(), w454 = new q451();
                        function y448(e601, f601, g601, h601, i601) {
                            e601.pointCount = 0;
                            const j601 = w451.MulXV(i601, h601.m_p, u454), k601 = w451.MulTXV(g601, j601, v454);
                            let l601 = 0, m601 = -r449;
                            const n601 = f601.m_radius + h601.m_radius, o601 = f601.m_count, p601 = f601.m_vertices, q601 = f601.m_normals;
                            for (let y601 = 0; y601 < o601; ++y601) {
                                const z601 = q451.DotVV(q601[y601], q451.SubVV(k601, p601[y601], q451.s_t0));
                                if (z601 > n601)
                                    return;
                                z601 > m601 && (m601 = z601, l601 = y601);
                            }
                            const r601 = l601, s601 = (r601 + 1) % o601, t601 = p601[r601], u601 = p601[s601];
                            if (m601 < s449)
                                return e601.pointCount = 1, e601.type = m447.b2ManifoldType.e_faceA, e601.localNormal.Copy(q601[l601]), q451.MidVV(t601, u601, e601.localPoint), e601.points[0].localPoint.Copy(h601.m_p), void (e601.points[0].id.key = 0);
                            const v601 = q451.DotVV(q451.SubVV(k601, t601, q451.s_t0), q451.SubVV(u601, t601, q451.s_t1)), w601 = q451.DotVV(q451.SubVV(k601, u601, q451.s_t0), q451.SubVV(t601, u601, q451.s_t1));
                            if (v601 <= 0) {
                                if (q451.DistanceSquaredVV(k601, t601) > n601 * n601)
                                    return;
                                e601.pointCount = 1, e601.type = m447.b2ManifoldType.e_faceA, q451.SubVV(k601, t601, e601.localNormal).SelfNormalize(), e601.localPoint.Copy(t601), e601.points[0].localPoint.Copy(h601.m_p), e601.points[0].id.key = 0;
                            }
                            else if (w601 <= 0) {
                                if (q451.DistanceSquaredVV(k601, u601) > n601 * n601)
                                    return;
                                e601.pointCount = 1, e601.type = m447.b2ManifoldType.e_faceA, q451.SubVV(k601, u601, e601.localNormal).SelfNormalize(), e601.localPoint.Copy(u601), e601.points[0].localPoint.Copy(h601.m_p), e601.points[0].id.key = 0;
                            }
                            else {
                                const x601 = q451.MidVV(t601, u601, w454);
                                if (q451.DotVV(q451.SubVV(k601, x601, q451.s_t1), q601[r601]) > n601)
                                    return;
                                e601.pointCount = 1, e601.type = m447.b2ManifoldType.e_faceA, e601.localNormal.Copy(q601[r601]).SelfNormalize(), e601.localPoint.Copy(x601), e601.points[0].localPoint.Copy(h601.m_p), e601.points[0].id.key = 0;
                            }
                        }
                        const x454 = new q451(), y454 = new q451(), z454 = new q451(), a455 = new q451();
                        function z448(n600, o600, p600, q600, r600) {
                            const s600 = n600.m_vertices, t600 = n600.m_normals, u600 = q600.m_count, v600 = q600.m_vertices, w600 = v451.MulRV(o600.q, t600[p600], x454), x600 = v451.MulTRV(r600.q, w600, y454);
                            let y600 = 0, z600 = r449;
                            for (let c601 = 0; c601 < u600; ++c601) {
                                const d601 = q451.DotVV(v600[c601], x600);
                                d601 < z600 && (z600 = d601, y600 = c601);
                            }
                            const a601 = w451.MulXV(o600, s600[p600], z454), b601 = w451.MulXV(r600, v600[y600], a455);
                            return q451.DotVV(q451.SubVV(b601, a601, q451.s_t0), w600);
                        }
                        const b455 = new q451(), c455 = new q451();
                        function a449(s599, t599, u599, v599, w599) {
                            const x599 = t599.m_count, y599 = t599.m_normals, z599 = q451.SubVV(w451.MulXV(w599, v599.m_centroid, q451.s_t0), w451.MulXV(u599, t599.m_centroid, q451.s_t1), b455), a600 = v451.MulTRV(u599.q, z599, c455);
                            let b600 = 0, c600 = -r449;
                            for (let l600 = 0; l600 < x599; ++l600) {
                                const m600 = q451.DotVV(y599[l600], a600);
                                m600 > c600 && (c600 = m600, b600 = l600);
                            }
                            let d600 = z448(t599, u599, b600, v599, w599);
                            const e600 = (b600 + x599 - 1) % x599, f600 = z448(t599, u599, e600, v599, w599), g600 = (b600 + 1) % x599, h600 = z448(t599, u599, g600, v599, w599);
                            let i600 = 0, j600 = 0, k600 = 0;
                            if (f600 > d600 && f600 > h600)
                                k600 = -1, i600 = e600, j600 = f600;
                            else {
                                if (!(h600 > d600))
                                    return s599[0] = b600, d600;
                                k600 = 1, i600 = g600, j600 = h600;
                            }
                            for (; b600 = -1 === k600 ? (i600 + x599 - 1) % x599 : (i600 + 1) % x599, d600 = z448(t599, u599, b600, v599, w599), d600 > j600;)
                                i600 = b600, j600 = d600;
                            return s599[0] = i600, j600;
                        }
                        const d455 = new q451();
                        function b449(x598, y598, z598, a599, b599, c599) {
                            const d599 = y598.m_normals, e599 = b599.m_count, f599 = b599.m_vertices, g599 = b599.m_normals, h599 = v451.MulTRV(c599.q, v451.MulRV(z598.q, d599[a599], q451.s_t0), d455);
                            let i599 = 0, j599 = r449;
                            for (let q599 = 0; q599 < e599; ++q599) {
                                const r599 = q451.DotVV(h599, g599[q599]);
                                r599 < j599 && (j599 = r599, i599 = q599);
                            }
                            const k599 = i599, l599 = (k599 + 1) % e599, m599 = x598[0];
                            w451.MulXV(c599, f599[k599], m599.v);
                            const n599 = m599.id.cf;
                            n599.indexA = a599, n599.indexB = k599, n599.typeA = m447.b2ContactFeatureType.e_face, n599.typeB = m447.b2ContactFeatureType.e_vertex;
                            const o599 = x598[1];
                            w451.MulXV(c599, f599[l599], o599.v);
                            const p599 = o599.id.cf;
                            p599.indexA = a599, p599.indexB = l599, p599.typeA = m447.b2ContactFeatureType.e_face, p599.typeB = m447.b2ContactFeatureType.e_vertex;
                        }
                        const e455 = m453.MakeArray(2), f455 = m453.MakeArray(2), g455 = m453.MakeArray(2), h455 = [0], i455 = [0], j455 = new q451(), k455 = new q451(), l455 = new q451(), m455 = new q451(), n455 = new q451(), o455 = new q451(), p455 = new q451(), q455 = new q451();
                        function c449(i597, j597, k597, l597, m597) {
                            i597.pointCount = 0;
                            const n597 = j597.m_radius + l597.m_radius, o597 = h455;
                            o597[0] = 0;
                            const p597 = a449(o597, j597, k597, l597, m597);
                            if (p597 > n597)
                                return;
                            const q597 = i455;
                            q597[0] = 0;
                            const r597 = a449(q597, l597, m597, j597, k597);
                            if (r597 > n597)
                                return;
                            let s597, t597, u597, v597, w597 = 0, x597 = 0;
                            r597 > .98 * p597 + .001 ? (s597 = l597, t597 = j597, u597 = m597, v597 = k597, w597 = q597[0], i597.type = m447.b2ManifoldType.e_faceB, x597 = 1) : (s597 = j597, t597 = l597, u597 = k597, v597 = m597, w597 = o597[0], i597.type = m447.b2ManifoldType.e_faceA, x597 = 0);
                            const y597 = e455;
                            b449(y597, s597, u597, w597, t597, v597);
                            const z597 = s597.m_count, a598 = s597.m_vertices, b598 = w597, c598 = (w597 + 1) % z597, d598 = a598[b598], e598 = a598[c598], f598 = q451.SubVV(e598, d598, j455);
                            f598.Normalize();
                            const g598 = q451.CrossVOne(f598, k455), h598 = q451.MidVV(d598, e598, l455), i598 = v451.MulRV(u597.q, f598, n455), j598 = q451.CrossVOne(i598, m455), k598 = w451.MulXV(u597, d598, p455), l598 = w451.MulXV(u597, e598, q455), m598 = q451.DotVV(j598, k598), n598 = -q451.DotVV(i598, k598) + n597, o598 = q451.DotVV(i598, l598) + n597, p598 = f455, q598 = g455;
                            let r598;
                            if (r598 = o448(p598, y597, q451.NegV(i598, o455), n598, b598), r598 < 2)
                                return;
                            if (r598 = o448(q598, p598, i598, o598, c598), r598 < 2)
                                return;
                            i597.localNormal.Copy(g598), i597.localPoint.Copy(h598);
                            let s598 = 0;
                            for (let t598 = 0; t598 < v449; ++t598) {
                                const u598 = q598[t598];
                                if (q451.DotVV(j598, u598.v) - m598 <= n597) {
                                    const v598 = i597.points[s598];
                                    if (w451.MulTXV(v597, u598.v, v598.localPoint), v598.id.Copy(u598.id), x597) {
                                        const w598 = v598.id.cf;
                                        v598.id.cf.indexA = w598.indexB, v598.id.cf.indexB = w598.indexA, v598.id.cf.typeA = w598.typeB, v598.id.cf.typeB = w598.typeA;
                                    }
                                    ++s598;
                                }
                            }
                            i597.pointCount = s598;
                        }
                        const r455 = new q451(), s455 = new q451(), t455 = new q451(), u455 = new q451(), v455 = new q451(), w455 = new q451(), x455 = new q451(), y455 = new i453();
                        function d449(h596, i596, j596, k596, l596) {
                            h596.pointCount = 0;
                            const m596 = w451.MulTXV(j596, w451.MulXV(l596, k596.m_p, q451.s_t0), r455), n596 = i596.m_vertex1, o596 = i596.m_vertex2, p596 = q451.SubVV(o596, n596, s455), q596 = q451.DotVV(p596, q451.SubVV(o596, m596, q451.s_t0)), r596 = q451.DotVV(p596, q451.SubVV(m596, n596, q451.s_t0)), s596 = i596.m_radius + k596.m_radius, t596 = y455;
                            if (t596.cf.indexB = 0, t596.cf.typeB = m447.b2ContactFeatureType.e_vertex, r596 <= 0) {
                                const d597 = n596, e597 = q451.SubVV(m596, d597, t455);
                                if (q451.DotVV(e597, e597) > s596 * s596)
                                    return;
                                if (i596.m_hasVertex0) {
                                    const f597 = i596.m_vertex0, g597 = n596, h597 = q451.SubVV(g597, f597, u455);
                                    if (q451.DotVV(h597, q451.SubVV(g597, m596, q451.s_t0)) > 0)
                                        return;
                                }
                                return t596.cf.indexA = 0, t596.cf.typeA = m447.b2ContactFeatureType.e_vertex, h596.pointCount = 1, h596.type = m447.b2ManifoldType.e_circles, h596.localNormal.SetZero(), h596.localPoint.Copy(d597), h596.points[0].id.Copy(t596), void h596.points[0].localPoint.Copy(k596.m_p);
                            }
                            if (q596 <= 0) {
                                const y596 = o596, z596 = q451.SubVV(m596, y596, t455);
                                if (q451.DotVV(z596, z596) > s596 * s596)
                                    return;
                                if (i596.m_hasVertex3) {
                                    const a597 = i596.m_vertex3, b597 = o596, c597 = q451.SubVV(a597, b597, v455);
                                    if (q451.DotVV(c597, q451.SubVV(m596, b597, q451.s_t0)) > 0)
                                        return;
                                }
                                return t596.cf.indexA = 1, t596.cf.typeA = m447.b2ContactFeatureType.e_vertex, h596.pointCount = 1, h596.type = m447.b2ManifoldType.e_circles, h596.localNormal.SetZero(), h596.localPoint.Copy(y596), h596.points[0].id.Copy(t596), void h596.points[0].localPoint.Copy(k596.m_p);
                            }
                            const u596 = q451.DotVV(p596, p596), v596 = w455;
                            v596.x = 1 / u596 * (q596 * n596.x + r596 * o596.x), v596.y = 1 / u596 * (q596 * n596.y + r596 * o596.y);
                            const w596 = q451.SubVV(m596, v596, t455);
                            if (q451.DotVV(w596, w596) > s596 * s596)
                                return;
                            const x596 = x455.Set(-p596.y, p596.x);
                            q451.DotVV(x596, q451.SubVV(m596, n596, q451.s_t0)) < 0 && x596.Set(-x596.x, -x596.y), x596.Normalize(), t596.cf.indexA = 0, t596.cf.typeA = m447.b2ContactFeatureType.e_face, h596.pointCount = 1, h596.type = m447.b2ManifoldType.e_faceA, h596.localNormal.Copy(x596), h596.localPoint.Copy(n596), h596.points[0].id.Copy(t596), h596.points[0].localPoint.Copy(k596.m_p);
                        }
                        var z455, a456;
                        !function (g596) {
                            g596[g596.e_unknown = 0] = "e_unknown", g596[g596.e_edgeA = 1] = "e_edgeA", g596[g596.e_edgeB = 2] = "e_edgeB";
                        }(z455 || (z455 = {}));
                        class b456 {
                            constructor() {
                                this.type = z455.e_unknown, this.index = 0, this.separation = 0;
                            }
                        }
                        class c456 {
                            constructor() {
                                this.vertices = [], this.normals = [], this.count = 0;
                            }
                        }
                        class d456 {
                            constructor() {
                                this.i1 = 0, this.i2 = 0, this.v1 = new q451(), this.v2 = new q451(), this.normal = new q451(), this.sideNormal1 = new q451(), this.sideOffset1 = 0, this.sideNormal2 = new q451(), this.sideOffset2 = 0;
                            }
                        }
                        !function (f596) {
                            f596[f596.e_isolated = 0] = "e_isolated", f596[f596.e_concave = 1] = "e_concave", f596[f596.e_convex = 2] = "e_convex";
                        }(a456 || (a456 = {}));
                        class e456 {
                            constructor() {
                                this.m_polygonB = new c456(), this.m_xf = new w451(), this.m_centroidB = new q451(), this.m_v0 = new q451(), this.m_v1 = new q451(), this.m_v2 = new q451(), this.m_v3 = new q451(), this.m_normal0 = new q451(), this.m_normal1 = new q451(), this.m_normal2 = new q451(), this.m_normal = new q451(), this.m_type1 = a456.e_isolated, this.m_type2 = a456.e_isolated, this.m_lowerLimit = new q451(), this.m_upperLimit = new q451(), this.m_radius = 0, this.m_front = !1;
                            }
                            Collide(r594, s594, t594, u594, v594) {
                                w451.MulTXX(t594, v594, this.m_xf), w451.MulXV(this.m_xf, u594.m_centroid, this.m_centroidB), this.m_v0.Copy(s594.m_vertex0), this.m_v1.Copy(s594.m_vertex1), this.m_v2.Copy(s594.m_vertex2), this.m_v3.Copy(s594.m_vertex3);
                                const w594 = s594.m_hasVertex0, x594 = s594.m_hasVertex3, y594 = q451.SubVV(this.m_v2, this.m_v1, e456.s_edge1);
                                y594.Normalize(), this.m_normal1.Set(y594.y, -y594.x);
                                const z594 = q451.DotVV(this.m_normal1, q451.SubVV(this.m_centroidB, this.m_v1, q451.s_t0));
                                let a595 = 0, b595 = 0, c595 = !1, d595 = !1;
                                if (w594) {
                                    const e596 = q451.SubVV(this.m_v1, this.m_v0, e456.s_edge0);
                                    e596.Normalize(), this.m_normal0.Set(e596.y, -e596.x), c595 = q451.CrossVV(e596, y594) >= 0, a595 = q451.DotVV(this.m_normal0, q451.SubVV(this.m_centroidB, this.m_v0, q451.s_t0));
                                }
                                if (x594) {
                                    const d596 = q451.SubVV(this.m_v3, this.m_v2, e456.s_edge2);
                                    d596.Normalize(), this.m_normal2.Set(d596.y, -d596.x), d595 = q451.CrossVV(y594, d596) > 0, b595 = q451.DotVV(this.m_normal2, q451.SubVV(this.m_centroidB, this.m_v2, q451.s_t0));
                                }
                                w594 && x594 ? c595 && d595 ? (this.m_front = a595 >= 0 || z594 >= 0 || b595 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal0), this.m_upperLimit.Copy(this.m_normal2)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1).SelfNeg())) : c595 ? (this.m_front = a595 >= 0 || z594 >= 0 && b595 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal0), this.m_upperLimit.Copy(this.m_normal1)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1).SelfNeg())) : d595 ? (this.m_front = b595 >= 0 || a595 >= 0 && z594 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal2)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal0).SelfNeg())) : (this.m_front = a595 >= 0 && z594 >= 0 && b595 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal1)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(), this.m_upperLimit.Copy(this.m_normal0).SelfNeg())) : w594 ? c595 ? (this.m_front = a595 >= 0 || z594 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal0), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal1).SelfNeg())) : (this.m_front = a595 >= 0 && z594 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal0).SelfNeg())) : x594 ? d595 ? (this.m_front = z594 >= 0 || b595 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal2)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1))) : (this.m_front = z594 >= 0 && b595 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1))) : (this.m_front = z594 >= 0, this.m_front ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal1))), this.m_polygonB.count = u594.m_count;
                                for (let c596 = 0; c596 < u594.m_count; ++c596)
                                    this.m_polygonB.vertices.length <= c596 && this.m_polygonB.vertices.push(new q451()), this.m_polygonB.normals.length <= c596 && this.m_polygonB.normals.push(new q451()), w451.MulXV(this.m_xf, u594.m_vertices[c596], this.m_polygonB.vertices[c596]), v451.MulRV(this.m_xf.q, u594.m_normals[c596], this.m_polygonB.normals[c596]);
                                this.m_radius = u594.m_radius + s594.m_radius, r594.pointCount = 0;
                                const e595 = this.ComputeEdgeSeparation(e456.s_edgeAxis);
                                if (e595.type === z455.e_unknown)
                                    return;
                                if (e595.separation > this.m_radius)
                                    return;
                                const f595 = this.ComputePolygonSeparation(e456.s_polygonAxis);
                                if (f595.type !== z455.e_unknown && f595.separation > this.m_radius)
                                    return;
                                const g595 = .98, h595 = .001;
                                let i595;
                                i595 = f595.type === z455.e_unknown ? e595 : f595.separation > g595 * e595.separation + h595 ? f595 : e595;
                                const j595 = e456.s_ie, k595 = e456.s_rf;
                                if (i595.type === z455.e_edgeA) {
                                    r594.type = m447.b2ManifoldType.e_faceA;
                                    let u595 = 0, v595 = q451.DotVV(this.m_normal, this.m_polygonB.normals[0]);
                                    for (let a596 = 1; a596 < this.m_polygonB.count; ++a596) {
                                        const b596 = q451.DotVV(this.m_normal, this.m_polygonB.normals[a596]);
                                        b596 < v595 && (v595 = b596, u595 = a596);
                                    }
                                    const w595 = u595, x595 = (w595 + 1) % this.m_polygonB.count, y595 = j595[0];
                                    y595.v.Copy(this.m_polygonB.vertices[w595]), y595.id.cf.indexA = 0, y595.id.cf.indexB = w595, y595.id.cf.typeA = m447.b2ContactFeatureType.e_face, y595.id.cf.typeB = m447.b2ContactFeatureType.e_vertex;
                                    const z595 = j595[1];
                                    z595.v.Copy(this.m_polygonB.vertices[x595]), z595.id.cf.indexA = 0, z595.id.cf.indexB = x595, z595.id.cf.typeA = m447.b2ContactFeatureType.e_face, z595.id.cf.typeB = m447.b2ContactFeatureType.e_vertex, this.m_front ? (k595.i1 = 0, k595.i2 = 1, k595.v1.Copy(this.m_v1), k595.v2.Copy(this.m_v2), k595.normal.Copy(this.m_normal1)) : (k595.i1 = 1, k595.i2 = 0, k595.v1.Copy(this.m_v2), k595.v2.Copy(this.m_v1), k595.normal.Copy(this.m_normal1).SelfNeg());
                                }
                                else {
                                    r594.type = m447.b2ManifoldType.e_faceB;
                                    const s595 = j595[0];
                                    s595.v.Copy(this.m_v1), s595.id.cf.indexA = 0, s595.id.cf.indexB = i595.index, s595.id.cf.typeA = m447.b2ContactFeatureType.e_vertex, s595.id.cf.typeB = m447.b2ContactFeatureType.e_face;
                                    const t595 = j595[1];
                                    t595.v.Copy(this.m_v2), t595.id.cf.indexA = 0, t595.id.cf.indexB = i595.index, t595.id.cf.typeA = m447.b2ContactFeatureType.e_vertex, t595.id.cf.typeB = m447.b2ContactFeatureType.e_face, k595.i1 = i595.index, k595.i2 = (k595.i1 + 1) % this.m_polygonB.count, k595.v1.Copy(this.m_polygonB.vertices[k595.i1]), k595.v2.Copy(this.m_polygonB.vertices[k595.i2]), k595.normal.Copy(this.m_polygonB.normals[k595.i1]);
                                }
                                k595.sideNormal1.Set(k595.normal.y, -k595.normal.x), k595.sideNormal2.Copy(k595.sideNormal1).SelfNeg(), k595.sideOffset1 = q451.DotVV(k595.sideNormal1, k595.v1), k595.sideOffset2 = q451.DotVV(k595.sideNormal2, k595.v2);
                                const l595 = e456.s_clipPoints1, m595 = e456.s_clipPoints2;
                                let n595 = 0;
                                if (n595 = o448(l595, j595, k595.sideNormal1, k595.sideOffset1, k595.i1), n595 < v449)
                                    return;
                                if (n595 = o448(m595, l595, k595.sideNormal2, k595.sideOffset2, k595.i2), n595 < v449)
                                    return;
                                i595.type === z455.e_edgeA ? (r594.localNormal.Copy(k595.normal), r594.localPoint.Copy(k595.v1)) : (r594.localNormal.Copy(u594.m_normals[k595.i1]), r594.localPoint.Copy(u594.m_vertices[k595.i1]));
                                let o595 = 0;
                                for (let p595 = 0; p595 < v449; ++p595) {
                                    let q595;
                                    if (q595 = q451.DotVV(k595.normal, q451.SubVV(m595[p595].v, k595.v1, q451.s_t0)), q595 <= this.m_radius) {
                                        const r595 = r594.points[o595];
                                        i595.type === z455.e_edgeA ? (w451.MulTXV(this.m_xf, m595[p595].v, r595.localPoint), r595.id.Copy(m595[p595].id)) : (r595.localPoint.Copy(m595[p595].v), r595.id.cf.typeA = m595[p595].id.cf.typeB, r595.id.cf.typeB = m595[p595].id.cf.typeA, r595.id.cf.indexA = m595[p595].id.cf.indexB, r595.id.cf.indexB = m595[p595].id.cf.indexA), ++o595;
                                    }
                                }
                                r594.pointCount = o595;
                            }
                            ComputeEdgeSeparation(n594) {
                                const o594 = n594;
                                o594.type = z455.e_edgeA, o594.index = this.m_front ? 0 : 1, o594.separation = r449;
                                for (let p594 = 0; p594 < this.m_polygonB.count; ++p594) {
                                    const q594 = q451.DotVV(this.m_normal, q451.SubVV(this.m_polygonB.vertices[p594], this.m_v1, q451.s_t0));
                                    q594 < o594.separation && (o594.separation = q594);
                                }
                                return o594;
                            }
                            ComputePolygonSeparation(h594) {
                                const i594 = h594;
                                i594.type = z455.e_unknown, i594.index = -1, i594.separation = -r449;
                                const j594 = e456.s_perp.Set(-this.m_normal.y, this.m_normal.x);
                                for (let k594 = 0; k594 < this.m_polygonB.count; ++k594) {
                                    const l594 = q451.NegV(this.m_polygonB.normals[k594], e456.s_n), m594 = x447(q451.DotVV(l594, q451.SubVV(this.m_polygonB.vertices[k594], this.m_v1, q451.s_t0)), q451.DotVV(l594, q451.SubVV(this.m_polygonB.vertices[k594], this.m_v2, q451.s_t0)));
                                    if (m594 > this.m_radius)
                                        return i594.type = z455.e_edgeB, i594.index = k594, i594.separation = m594, i594;
                                    if (q451.DotVV(l594, j594) >= 0) {
                                        if (q451.DotVV(q451.SubVV(l594, this.m_upperLimit, q451.s_t0), this.m_normal) < -a450)
                                            continue;
                                    }
                                    else if (q451.DotVV(q451.SubVV(l594, this.m_lowerLimit, q451.s_t0), this.m_normal) < -a450)
                                        continue;
                                    m594 > i594.separation && (i594.type = z455.e_edgeB, i594.index = k594, i594.separation = m594);
                                }
                                return i594;
                            }
                        }
                        e456.s_edge1 = new q451(), e456.s_edge0 = new q451(), e456.s_edge2 = new q451(), e456.s_ie = m453.MakeArray(2), e456.s_rf = new d456(), e456.s_clipPoints1 = m453.MakeArray(2), e456.s_clipPoints2 = m453.MakeArray(2), e456.s_edgeAxis = new b456(), e456.s_polygonAxis = new b456(), e456.s_n = new q451(), e456.s_perp = new q451();
                        const f456 = new e456();
                        function e449(c594, d594, e594, f594, g594) {
                            f456.Collide(c594, d594, e594, f594, g594);
                        }
                        class g456 {
                            constructor() {
                                this.mass = 0, this.center = new q451(0, 0), this.I = 0;
                            }
                        }
                        var h456, i456, j456, k456;
                        (h456 = m447.b2ShapeType || (m447.b2ShapeType = {}))[h456.e_unknown = -1] = "e_unknown", h456[h456.e_circleShape = 0] = "e_circleShape", h456[h456.e_edgeShape = 1] = "e_edgeShape", h456[h456.e_polygonShape = 2] = "e_polygonShape", h456[h456.e_chainShape = 3] = "e_chainShape", h456[h456.e_shapeTypeCount = 4] = "e_shapeTypeCount";
                        class l456 {
                            constructor(a594, b594) {
                                this.m_type = m447.b2ShapeType.e_unknown, this.m_radius = 0, this.m_type = a594, this.m_radius = b594;
                            }
                            Copy(z593) {
                                return this.m_radius = z593.m_radius, this;
                            }
                            GetType() {
                                return this.m_type;
                            }
                        }
                        class m456 extends l456 {
                            constructor(y593 = 0) {
                                super(m447.b2ShapeType.e_circleShape, y593), this.m_p = new q451();
                            }
                            Set(w593, x593 = this.m_radius) {
                                return this.m_p.Copy(w593), this.m_radius = x593, this;
                            }
                            Clone() {
                                return new m456().Copy(this);
                            }
                            Copy(v593) {
                                return super.Copy(v593), this.m_p.Copy(v593.m_p), this;
                            }
                            GetChildCount() {
                                return 1;
                            }
                            TestPoint(r593, s593) {
                                const t593 = w451.MulXV(r593, this.m_p, m456.TestPoint_s_center), u593 = q451.SubVV(s593, t593, m456.TestPoint_s_d);
                                return q451.DotVV(u593, u593) <= b448(this.m_radius);
                            }
                            ComputeDistance(m593, n593, o593, p593) {
                                const q593 = w451.MulXV(m593, this.m_p, m456.ComputeDistance_s_center);
                                return q451.SubVV(n593, q593, o593), o593.Normalize() - this.m_radius;
                            }
                            RayCast(a593, b593, c593, d593) {
                                const e593 = w451.MulXV(c593, this.m_p, m456.RayCast_s_position), f593 = q451.SubVV(b593.p1, e593, m456.RayCast_s_s), g593 = q451.DotVV(f593, f593) - b448(this.m_radius), h593 = q451.SubVV(b593.p2, b593.p1, m456.RayCast_s_r), i593 = q451.DotVV(f593, h593), j593 = q451.DotVV(h593, h593), k593 = i593 * i593 - j593 * g593;
                                if (k593 < 0 || j593 < s449)
                                    return !1;
                                let l593 = -(i593 + j451(k593));
                                return 0 <= l593 && l593 <= b593.maxFraction * j593 && (l593 /= j593, a593.fraction = l593, q451.AddVMulSV(f593, l593, h593, a593.normal).SelfNormalize(), !0);
                            }
                            ComputeAABB(w592, x592, y592) {
                                const z592 = w451.MulXV(x592, this.m_p, m456.ComputeAABB_s_p);
                                w592.lowerBound.Set(z592.x - this.m_radius, z592.y - this.m_radius), w592.upperBound.Set(z592.x + this.m_radius, z592.y + this.m_radius);
                            }
                            ComputeMass(t592, u592) {
                                const v592 = b448(this.m_radius);
                                t592.mass = u592 * u449 * v592, t592.center.Copy(this.m_p), t592.I = t592.mass * (.5 * v592 + q451.DotVV(this.m_p, this.m_p));
                            }
                            SetupDistanceProxy(r592, s592) {
                                r592.m_vertices = r592.m_buffer, r592.m_vertices[0].Copy(this.m_p), r592.m_count = 1, r592.m_radius = this.m_radius;
                            }
                            ComputeSubmergedArea(h592, i592, j592, k592) {
                                const l592 = w451.MulXV(j592, this.m_p, new q451()), m592 = -(q451.DotVV(h592, l592) - i592);
                                if (m592 < -this.m_radius + s449)
                                    return 0;
                                if (m592 > this.m_radius)
                                    return k592.Copy(l592), u449 * this.m_radius * this.m_radius;
                                const n592 = this.m_radius * this.m_radius, o592 = m592 * m592, p592 = n592 * (o451(m592 / this.m_radius) + u449 / 2) + m592 * j451(n592 - o592), q592 = -2 / 3 * k451(n592 - o592, 1.5) / p592;
                                return k592.x = l592.x + h592.x * q592, k592.y = l592.y + h592.y * q592, p592;
                            }
                            Dump(g592) {
                                g592("    const shape: b2CircleShape = new b2CircleShape();\n"), g592("    shape.m_radius = %.15f;\n", this.m_radius), g592("    shape.m_p.Set(%.15f, %.15f);\n", this.m_p.x, this.m_p.y);
                            }
                        }
                        m456.TestPoint_s_center = new q451(), m456.TestPoint_s_d = new q451(), m456.ComputeDistance_s_center = new q451(), m456.RayCast_s_position = new q451(), m456.RayCast_s_s = new q451(), m456.RayCast_s_r = new q451(), m456.ComputeAABB_s_p = new q451();
                        class n456 extends l456 {
                            constructor() {
                                super(m447.b2ShapeType.e_polygonShape, b450), this.m_centroid = new q451(0, 0), this.m_vertices = [], this.m_normals = [], this.m_count = 0;
                            }
                            Clone() {
                                return new n456().Copy(this);
                            }
                            Copy(e592) {
                                super.Copy(e592), this.m_centroid.Copy(e592.m_centroid), this.m_count = e592.m_count, this.m_vertices = q451.MakeArray(this.m_count), this.m_normals = q451.MakeArray(this.m_count);
                                for (let f592 = 0; f592 < this.m_count; ++f592)
                                    this.m_vertices[f592].Copy(e592.m_vertices[f592]), this.m_normals[f592].Copy(e592.m_normals[f592]);
                                return this;
                            }
                            GetChildCount() {
                                return 1;
                            }
                            Set(...w591) {
                                if ("number" == typeof w591[0][0]) {
                                    const b592 = w591[0];
                                    if (b592.length % 2 != 0)
                                        throw new Error();
                                    return this._Set(d592 => ({
                                        x: b592[2 * d592],
                                        y: b592[2 * d592 + 1]
                                    }), b592.length / 2);
                                }
                                {
                                    const x591 = w591[0], y591 = w591[1] || x591.length;
                                    return this._Set(a592 => x591[a592], y591);
                                }
                            }
                            _Set(x590, y590) {
                                if (y590 < 3)
                                    return this.SetAsBox(1, 1);
                                let z590 = y590;
                                const a591 = [];
                                for (let s591 = 0; s591 < z590; ++s591) {
                                    const t591 = x590(s591);
                                    let u591 = !0;
                                    for (let v591 = 0; v591 < a591.length; ++v591)
                                        if (q451.DistanceSquaredVV(t591, a591[v591]) < .25 * z449 * z449) {
                                            u591 = !1;
                                            break;
                                        }
                                    u591 && a591.push(t591);
                                }
                                if (z590 = a591.length, z590 < 3)
                                    return this.SetAsBox(1, 1);
                                let b591 = 0, c591 = a591[0].x;
                                for (let q591 = 1; q591 < z590; ++q591) {
                                    const r591 = a591[q591].x;
                                    (r591 > c591 || r591 === c591 && a591[q591].y < a591[b591].y) && (b591 = q591, c591 = r591);
                                }
                                const d591 = [];
                                let e591 = 0, f591 = b591;
                                for (;;) {
                                    d591[e591] = f591;
                                    let l591 = 0;
                                    for (let m591 = 1; m591 < z590; ++m591) {
                                        if (l591 === f591) {
                                            l591 = m591;
                                            continue;
                                        }
                                        const n591 = q451.SubVV(a591[l591], a591[d591[e591]], n456.Set_s_r), o591 = q451.SubVV(a591[m591], a591[d591[e591]], n456.Set_s_v), p591 = q451.CrossVV(n591, o591);
                                        p591 < 0 && (l591 = m591), 0 === p591 && o591.LengthSquared() > n591.LengthSquared() && (l591 = m591);
                                    }
                                    if (++e591, f591 = l591, l591 === b591)
                                        break;
                                }
                                this.m_count = e591, this.m_vertices = q451.MakeArray(this.m_count), this.m_normals = q451.MakeArray(this.m_count);
                                for (let k591 = 0; k591 < e591; ++k591)
                                    this.m_vertices[k591].Copy(a591[d591[k591]]);
                                for (let g591 = 0; g591 < e591; ++g591) {
                                    const h591 = this.m_vertices[g591], i591 = this.m_vertices[(g591 + 1) % e591], j591 = q451.SubVV(i591, h591, q451.s_t0);
                                    q451.CrossVOne(j591, this.m_normals[g591]).SelfNormalize();
                                }
                                return n456.ComputeCentroid(this.m_vertices, e591, this.m_centroid), this;
                            }
                            SetAsBox(r590, s590, t590, u590 = 0) {
                                if (this.m_count = 4, this.m_vertices = q451.MakeArray(this.m_count), this.m_normals = q451.MakeArray(this.m_count), this.m_vertices[0].Set(-r590, -s590), this.m_vertices[1].Set(r590, -s590), this.m_vertices[2].Set(r590, s590), this.m_vertices[3].Set(-r590, s590), this.m_normals[0].Set(0, -1), this.m_normals[1].Set(1, 0), this.m_normals[2].Set(0, 1), this.m_normals[3].Set(-1, 0), this.m_centroid.SetZero(), t590) {
                                    this.m_centroid.Copy(t590);
                                    const v590 = new w451();
                                    v590.SetPosition(t590), v590.SetRotationAngle(u590);
                                    for (let w590 = 0; w590 < this.m_count; ++w590)
                                        w451.MulXV(v590, this.m_vertices[w590], this.m_vertices[w590]), v451.MulRV(v590.q, this.m_normals[w590], this.m_normals[w590]);
                                }
                                return this;
                            }
                            TestPoint(n590, o590) {
                                const p590 = w451.MulTXV(n590, o590, n456.TestPoint_s_pLocal);
                                for (let q590 = 0; q590 < this.m_count; ++q590)
                                    if (q451.DotVV(this.m_normals[q590], q451.SubVV(p590, this.m_vertices[q590], q451.s_t0)) > 0)
                                        return !1;
                                return !0;
                            }
                            ComputeDistance(z589, a590, b590, c590) {
                                const d590 = w451.MulTXV(z589, a590, n456.ComputeDistance_s_pLocal);
                                let e590 = -r449;
                                const f590 = n456.ComputeDistance_s_normalForMaxDistance.Copy(d590);
                                for (let l590 = 0; l590 < this.m_count; ++l590) {
                                    const m590 = q451.DotVV(this.m_normals[l590], q451.SubVV(d590, this.m_vertices[l590], q451.s_t0));
                                    m590 > e590 && (e590 = m590, f590.Copy(this.m_normals[l590]));
                                }
                                if (e590 > 0) {
                                    const g590 = n456.ComputeDistance_s_minDistance.Copy(f590);
                                    let h590 = e590 * e590;
                                    for (let i590 = 0; i590 < this.m_count; ++i590) {
                                        const j590 = q451.SubVV(d590, this.m_vertices[i590], n456.ComputeDistance_s_distance), k590 = j590.LengthSquared();
                                        h590 > k590 && (g590.Copy(j590), h590 = k590);
                                    }
                                    return v451.MulRV(z589.q, g590, b590), b590.Normalize(), Math.sqrt(h590);
                                }
                                return v451.MulRV(z589.q, f590, b590), e590;
                            }
                            RayCast(m589, n589, o589, p589) {
                                const q589 = w451.MulTXV(o589, n589.p1, n456.RayCast_s_p1), r589 = w451.MulTXV(o589, n589.p2, n456.RayCast_s_p2), s589 = q451.SubVV(r589, q589, n456.RayCast_s_d);
                                let t589 = 0, u589 = n589.maxFraction, v589 = -1;
                                for (let w589 = 0; w589 < this.m_count; ++w589) {
                                    const x589 = q451.DotVV(this.m_normals[w589], q451.SubVV(this.m_vertices[w589], q589, q451.s_t0)), y589 = q451.DotVV(this.m_normals[w589], s589);
                                    if (0 === y589) {
                                        if (x589 < 0)
                                            return !1;
                                    }
                                    else
                                        y589 < 0 && x589 < t589 * y589 ? (t589 = x589 / y589, v589 = w589) : y589 > 0 && x589 < u589 * y589 && (u589 = x589 / y589);
                                    if (u589 < t589)
                                        return !1;
                                }
                                return v589 >= 0 && (m589.fraction = t589, v451.MulRV(o589.q, this.m_normals[v589], m589.normal), !0);
                            }
                            ComputeAABB(e589, f589, g589) {
                                const h589 = w451.MulXV(f589, this.m_vertices[0], e589.lowerBound), i589 = e589.upperBound.Copy(h589);
                                for (let k589 = 0; k589 < this.m_count; ++k589) {
                                    const l589 = w451.MulXV(f589, this.m_vertices[k589], n456.ComputeAABB_s_v);
                                    q451.MinV(l589, h589, h589), q451.MaxV(l589, i589, i589);
                                }
                                const j589 = this.m_radius;
                                h589.SelfSubXY(j589, j589), i589.SelfAddXY(j589, j589);
                            }
                            ComputeMass(n588, o588) {
                                const p588 = n456.ComputeMass_s_center.SetZero();
                                let q588 = 0, r588 = 0;
                                const s588 = n456.ComputeMass_s_s.SetZero();
                                for (let d589 = 0; d589 < this.m_count; ++d589)
                                    s588.SelfAdd(this.m_vertices[d589]);
                                s588.SelfMul(1 / this.m_count);
                                const t588 = 1 / 3;
                                for (let u588 = 0; u588 < this.m_count; ++u588) {
                                    const v588 = q451.SubVV(this.m_vertices[u588], s588, n456.ComputeMass_s_e1), w588 = q451.SubVV(this.m_vertices[(u588 + 1) % this.m_count], s588, n456.ComputeMass_s_e2), x588 = q451.CrossVV(v588, w588), y588 = .5 * x588;
                                    q588 += y588, p588.SelfAdd(q451.MulSV(y588 * t588, q451.AddVV(v588, w588, q451.s_t0), q451.s_t1));
                                    const z588 = v588.x, a589 = v588.y, b589 = w588.x, c589 = w588.y;
                                    r588 += .25 * t588 * x588 * (z588 * z588 + b589 * z588 + b589 * b589 + a589 * a589 + c589 * a589 + c589 * c589);
                                }
                                n588.mass = o588 * q588, p588.SelfMul(1 / q588), q451.AddVV(p588, s588, n588.center), n588.I = o588 * r588, n588.I += n588.mass * (q451.DotVV(n588.center, n588.center) - q451.DotVV(p588, p588));
                            }
                            Validate() {
                                for (let g588 = 0; g588 < this.m_count; ++g588) {
                                    const h588 = g588, i588 = (g588 + 1) % this.m_count, j588 = this.m_vertices[h588], k588 = q451.SubVV(this.m_vertices[i588], j588, n456.Validate_s_e);
                                    for (let l588 = 0; l588 < this.m_count; ++l588) {
                                        if (l588 === h588 || l588 === i588)
                                            continue;
                                        const m588 = q451.SubVV(this.m_vertices[l588], j588, n456.Validate_s_v);
                                        if (q451.CrossVV(k588, m588) < 0)
                                            return !1;
                                    }
                                }
                                return !0;
                            }
                            SetupDistanceProxy(e588, f588) {
                                e588.m_vertices = this.m_vertices, e588.m_count = this.m_count, e588.m_radius = this.m_radius;
                            }
                            ComputeSubmergedArea(e587, f587, g587, h587) {
                                const i587 = v451.MulTRV(g587.q, e587, n456.ComputeSubmergedArea_s_normalL), j587 = f587 - q451.DotVV(e587, g587.p), k587 = [];
                                let l587 = 0, m587 = -1, n587 = -1, o587 = !1;
                                for (let c588 = 0; c588 < this.m_count; ++c588) {
                                    k587[c588] = q451.DotVV(i587, this.m_vertices[c588]) - j587;
                                    const d588 = k587[c588] < -s449;
                                    c588 > 0 && (d588 ? o587 || (m587 = c588 - 1, l587++) : o587 && (n587 = c588 - 1, l587++)), o587 = d588;
                                }
                                switch (l587) {
                                    case 0:
                                        if (o587) {
                                            const b588 = n456.ComputeSubmergedArea_s_md;
                                            return this.ComputeMass(b588, 1), w451.MulXV(g587, b588.center, h587), b588.mass;
                                        }
                                        return 0;
                                    case 1:
                                        -1 === m587 ? m587 = this.m_count - 1 : n587 = this.m_count - 1;
                                }
                                const p587 = (m587 + 1) % this.m_count, q587 = (n587 + 1) % this.m_count, r587 = (0 - k587[m587]) / (k587[p587] - k587[m587]), s587 = (0 - k587[n587]) / (k587[q587] - k587[n587]), t587 = n456.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[m587].x * (1 - r587) + this.m_vertices[p587].x * r587, this.m_vertices[m587].y * (1 - r587) + this.m_vertices[p587].y * r587), u587 = n456.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[n587].x * (1 - s587) + this.m_vertices[q587].x * s587, this.m_vertices[n587].y * (1 - s587) + this.m_vertices[q587].y * s587);
                                let v587 = 0;
                                const w587 = n456.ComputeSubmergedArea_s_center.SetZero();
                                let x587, y587 = this.m_vertices[p587], z587 = p587;
                                for (; z587 !== q587;) {
                                    z587 = (z587 + 1) % this.m_count, x587 = z587 === q587 ? u587 : this.m_vertices[z587];
                                    const a588 = .5 * ((y587.x - t587.x) * (x587.y - t587.y) - (y587.y - t587.y) * (x587.x - t587.x));
                                    v587 += a588, w587.x += a588 * (t587.x + y587.x + x587.x) / 3, w587.y += a588 * (t587.y + y587.y + x587.y) / 3, y587 = x587;
                                }
                                return w587.SelfMul(1 / v587), w451.MulXV(g587, w587, h587), v587;
                            }
                            Dump(c587) {
                                c587("    const shape: b2PolygonShape = new b2PolygonShape();\n"), c587("    const vs: b2Vec2[] = [];\n");
                                for (let d587 = 0; d587 < this.m_count; ++d587)
                                    c587("    vs[%d] = new b2Vec2(%.15f, %.15f);\n", d587, this.m_vertices[d587].x, this.m_vertices[d587].y);
                                c587("    shape.Set(vs, %d);\n", this.m_count);
                            }
                            static ComputeCentroid(o586, p586, q586) {
                                const r586 = q586;
                                r586.SetZero();
                                let s586 = 0;
                                const t586 = n456.ComputeCentroid_s_pRef.SetZero(), u586 = 1 / 3;
                                for (let v586 = 0; v586 < p586; ++v586) {
                                    const w586 = t586, x586 = o586[v586], y586 = o586[(v586 + 1) % p586], z586 = q451.SubVV(x586, w586, n456.ComputeCentroid_s_e1), a587 = q451.SubVV(y586, w586, n456.ComputeCentroid_s_e2), b587 = .5 * q451.CrossVV(z586, a587);
                                    s586 += b587, r586.x += b587 * u586 * (w586.x + x586.x + y586.x), r586.y += b587 * u586 * (w586.y + x586.y + y586.y);
                                }
                                return r586.SelfMul(1 / s586), r586;
                            }
                        }
                        n456.Set_s_r = new q451(), n456.Set_s_v = new q451(), n456.TestPoint_s_pLocal = new q451(), n456.ComputeDistance_s_pLocal = new q451(), n456.ComputeDistance_s_normalForMaxDistance = new q451(), n456.ComputeDistance_s_minDistance = new q451(), n456.ComputeDistance_s_distance = new q451(), n456.RayCast_s_p1 = new q451(), n456.RayCast_s_p2 = new q451(), n456.RayCast_s_d = new q451(), n456.ComputeAABB_s_v = new q451(), n456.ComputeMass_s_center = new q451(), n456.ComputeMass_s_s = new q451(), n456.ComputeMass_s_e1 = new q451(), n456.ComputeMass_s_e2 = new q451(), n456.Validate_s_e = new q451(), n456.Validate_s_v = new q451(), n456.ComputeSubmergedArea_s_normalL = new q451(), n456.ComputeSubmergedArea_s_md = new g456(), n456.ComputeSubmergedArea_s_intoVec = new q451(), n456.ComputeSubmergedArea_s_outoVec = new q451(), n456.ComputeSubmergedArea_s_center = new q451(), n456.ComputeCentroid_s_pRef = new q451(), n456.ComputeCentroid_s_e1 = new q451(), n456.ComputeCentroid_s_e2 = new q451();
                        class o456 extends l456 {
                            constructor() {
                                super(m447.b2ShapeType.e_edgeShape, b450), this.m_vertex1 = new q451(), this.m_vertex2 = new q451(), this.m_vertex0 = new q451(), this.m_vertex3 = new q451(), this.m_hasVertex0 = !1, this.m_hasVertex3 = !1;
                            }
                            Set(m586, n586) {
                                return this.m_vertex1.Copy(m586), this.m_vertex2.Copy(n586), this.m_hasVertex0 = !1, this.m_hasVertex3 = !1, this;
                            }
                            Clone() {
                                return new o456().Copy(this);
                            }
                            Copy(l586) {
                                return super.Copy(l586), this.m_vertex1.Copy(l586.m_vertex1), this.m_vertex2.Copy(l586.m_vertex2), this.m_vertex0.Copy(l586.m_vertex0), this.m_vertex3.Copy(l586.m_vertex3), this.m_hasVertex0 = l586.m_hasVertex0, this.m_hasVertex3 = l586.m_hasVertex3, this;
                            }
                            GetChildCount() {
                                return 1;
                            }
                            TestPoint(j586, k586) {
                                return !1;
                            }
                            ComputeDistance(z585, a586, b586, c586) {
                                const d586 = w451.MulXV(z585, this.m_vertex1, o456.ComputeDistance_s_v1), e586 = w451.MulXV(z585, this.m_vertex2, o456.ComputeDistance_s_v2), f586 = q451.SubVV(a586, d586, o456.ComputeDistance_s_d), g586 = q451.SubVV(e586, d586, o456.ComputeDistance_s_s), h586 = q451.DotVV(f586, g586);
                                if (h586 > 0) {
                                    const i586 = q451.DotVV(g586, g586);
                                    h586 > i586 ? q451.SubVV(a586, e586, f586) : f586.SelfMulSub(h586 / i586, g586);
                                }
                                return b586.Copy(f586), b586.Normalize();
                            }
                            RayCast(h585, i585, j585, k585) {
                                const l585 = w451.MulTXV(j585, i585.p1, o456.RayCast_s_p1), m585 = w451.MulTXV(j585, i585.p2, o456.RayCast_s_p2), n585 = q451.SubVV(m585, l585, o456.RayCast_s_d), o585 = this.m_vertex1, p585 = this.m_vertex2, q585 = q451.SubVV(p585, o585, o456.RayCast_s_e), r585 = h585.normal.Set(q585.y, -q585.x).SelfNormalize(), s585 = q451.DotVV(r585, q451.SubVV(o585, l585, q451.s_t0)), t585 = q451.DotVV(r585, n585);
                                if (0 === t585)
                                    return !1;
                                const u585 = s585 / t585;
                                if (u585 < 0 || i585.maxFraction < u585)
                                    return !1;
                                const v585 = q451.AddVMulSV(l585, u585, n585, o456.RayCast_s_q), w585 = q451.SubVV(p585, o585, o456.RayCast_s_r), x585 = q451.DotVV(w585, w585);
                                if (0 === x585)
                                    return !1;
                                const y585 = q451.DotVV(q451.SubVV(v585, o585, q451.s_t0), w585) / x585;
                                return !(y585 < 0 || 1 < y585 || (h585.fraction = u585, v451.MulRV(j585.q, h585.normal, h585.normal), s585 > 0 && h585.normal.SelfNeg(), 0));
                            }
                            ComputeAABB(b585, c585, d585) {
                                const e585 = w451.MulXV(c585, this.m_vertex1, o456.ComputeAABB_s_v1), f585 = w451.MulXV(c585, this.m_vertex2, o456.ComputeAABB_s_v2);
                                q451.MinV(e585, f585, b585.lowerBound), q451.MaxV(e585, f585, b585.upperBound);
                                const g585 = this.m_radius;
                                b585.lowerBound.SelfSubXY(g585, g585), b585.upperBound.SelfAddXY(g585, g585);
                            }
                            ComputeMass(z584, a585) {
                                z584.mass = 0, q451.MidVV(this.m_vertex1, this.m_vertex2, z584.center), z584.I = 0;
                            }
                            SetupDistanceProxy(x584, y584) {
                                x584.m_vertices = x584.m_buffer, x584.m_vertices[0].Copy(this.m_vertex1), x584.m_vertices[1].Copy(this.m_vertex2), x584.m_count = 2, x584.m_radius = this.m_radius;
                            }
                            ComputeSubmergedArea(t584, u584, v584, w584) {
                                return w584.SetZero(), 0;
                            }
                            Dump(s584) {
                                s584("    const shape: b2EdgeShape = new b2EdgeShape();\n"), s584("    shape.m_radius = %.15f;\n", this.m_radius), s584("    shape.m_vertex0.Set(%.15f, %.15f);\n", this.m_vertex0.x, this.m_vertex0.y), s584("    shape.m_vertex1.Set(%.15f, %.15f);\n", this.m_vertex1.x, this.m_vertex1.y), s584("    shape.m_vertex2.Set(%.15f, %.15f);\n", this.m_vertex2.x, this.m_vertex2.y), s584("    shape.m_vertex3.Set(%.15f, %.15f);\n", this.m_vertex3.x, this.m_vertex3.y), s584("    shape.m_hasVertex0 = %s;\n", this.m_hasVertex0), s584("    shape.m_hasVertex3 = %s;\n", this.m_hasVertex3);
                            }
                        }
                        o456.ComputeDistance_s_v1 = new q451(), o456.ComputeDistance_s_v2 = new q451(), o456.ComputeDistance_s_d = new q451(), o456.ComputeDistance_s_s = new q451(), o456.RayCast_s_p1 = new q451(), o456.RayCast_s_p2 = new q451(), o456.RayCast_s_d = new q451(), o456.RayCast_s_e = new q451(), o456.RayCast_s_q = new q451(), o456.RayCast_s_r = new q451(), o456.ComputeAABB_s_v1 = new q451(), o456.ComputeAABB_s_v2 = new q451();
                        class p456 extends l456 {
                            constructor() {
                                super(m447.b2ShapeType.e_chainShape, b450), this.m_vertices = [], this.m_count = 0, this.m_prevVertex = new q451(), this.m_nextVertex = new q451(), this.m_hasPrevVertex = !1, this.m_hasNextVertex = !1;
                            }
                            CreateLoop(...k584) {
                                if ("number" == typeof k584[0][0]) {
                                    const p584 = k584[0];
                                    if (p584.length % 2 != 0)
                                        throw new Error();
                                    return this._CreateLoop(r584 => ({
                                        x: p584[2 * r584],
                                        y: p584[2 * r584 + 1]
                                    }), p584.length / 2);
                                }
                                {
                                    const l584 = k584[0], m584 = k584[1] || l584.length;
                                    return this._CreateLoop(o584 => l584[o584], m584);
                                }
                            }
                            _CreateLoop(h584, i584) {
                                if (i584 < 3)
                                    return this;
                                this.m_count = i584 + 1, this.m_vertices = q451.MakeArray(this.m_count);
                                for (let j584 = 0; j584 < i584; ++j584)
                                    this.m_vertices[j584].Copy(h584(j584));
                                return this.m_vertices[i584].Copy(this.m_vertices[0]), this.m_prevVertex.Copy(this.m_vertices[this.m_count - 2]), this.m_nextVertex.Copy(this.m_vertices[1]), this.m_hasPrevVertex = !0, this.m_hasNextVertex = !0, this;
                            }
                            CreateChain(...z583) {
                                if ("number" == typeof z583[0][0]) {
                                    const e584 = z583[0];
                                    if (e584.length % 2 != 0)
                                        throw new Error();
                                    return this._CreateChain(g584 => ({
                                        x: e584[2 * g584],
                                        y: e584[2 * g584 + 1]
                                    }), e584.length / 2);
                                }
                                {
                                    const a584 = z583[0], b584 = z583[1] || a584.length;
                                    return this._CreateChain(d584 => a584[d584], b584);
                                }
                            }
                            _CreateChain(w583, x583) {
                                this.m_count = x583, this.m_vertices = q451.MakeArray(x583);
                                for (let y583 = 0; y583 < x583; ++y583)
                                    this.m_vertices[y583].Copy(w583(y583));
                                return this.m_hasPrevVertex = !1, this.m_hasNextVertex = !1, this.m_prevVertex.SetZero(), this.m_nextVertex.SetZero(), this;
                            }
                            SetPrevVertex(v583) {
                                return this.m_prevVertex.Copy(v583), this.m_hasPrevVertex = !0, this;
                            }
                            SetNextVertex(u583) {
                                return this.m_nextVertex.Copy(u583), this.m_hasNextVertex = !0, this;
                            }
                            Clone() {
                                return new p456().Copy(this);
                            }
                            Copy(r583) {
                                return super.Copy(r583), this._CreateChain(t583 => r583.m_vertices[t583], r583.m_count), this.m_prevVertex.Copy(r583.m_prevVertex), this.m_nextVertex.Copy(r583.m_nextVertex), this.m_hasPrevVertex = r583.m_hasPrevVertex, this.m_hasNextVertex = r583.m_hasNextVertex, this;
                            }
                            GetChildCount() {
                                return this.m_count - 1;
                            }
                            GetChildEdge(p583, q583) {
                                p583.m_radius = this.m_radius, p583.m_vertex1.Copy(this.m_vertices[q583]), p583.m_vertex2.Copy(this.m_vertices[q583 + 1]), q583 > 0 ? (p583.m_vertex0.Copy(this.m_vertices[q583 - 1]), p583.m_hasVertex0 = !0) : (p583.m_vertex0.Copy(this.m_prevVertex), p583.m_hasVertex0 = this.m_hasPrevVertex), q583 < this.m_count - 2 ? (p583.m_vertex3.Copy(this.m_vertices[q583 + 2]), p583.m_hasVertex3 = !0) : (p583.m_vertex3.Copy(this.m_nextVertex), p583.m_hasVertex3 = this.m_hasNextVertex);
                            }
                            TestPoint(n583, o583) {
                                return !1;
                            }
                            ComputeDistance(i583, j583, k583, l583) {
                                const m583 = p456.ComputeDistance_s_edgeShape;
                                return this.GetChildEdge(m583, l583), m583.ComputeDistance(i583, j583, k583, 0);
                            }
                            RayCast(d583, e583, f583, g583) {
                                const h583 = p456.RayCast_s_edgeShape;
                                return h583.m_vertex1.Copy(this.m_vertices[g583]), h583.m_vertex2.Copy(this.m_vertices[(g583 + 1) % this.m_count]), h583.RayCast(d583, e583, f583, 0);
                            }
                            ComputeAABB(w582, x582, y582) {
                                const z582 = this.m_vertices[y582], a583 = this.m_vertices[(y582 + 1) % this.m_count], b583 = w451.MulXV(x582, z582, p456.ComputeAABB_s_v1), c583 = w451.MulXV(x582, a583, p456.ComputeAABB_s_v2);
                                q451.MinV(b583, c583, w582.lowerBound), q451.MaxV(b583, c583, w582.upperBound);
                            }
                            ComputeMass(u582, v582) {
                                u582.mass = 0, u582.center.SetZero(), u582.I = 0;
                            }
                            SetupDistanceProxy(s582, t582) {
                                s582.m_vertices = s582.m_buffer, s582.m_vertices[0].Copy(this.m_vertices[t582]), t582 + 1 < this.m_count ? s582.m_vertices[1].Copy(this.m_vertices[t582 + 1]) : s582.m_vertices[1].Copy(this.m_vertices[0]), s582.m_count = 2, s582.m_radius = this.m_radius;
                            }
                            ComputeSubmergedArea(o582, p582, q582, r582) {
                                return r582.SetZero(), 0;
                            }
                            Dump(m582) {
                                m582("    const shape: b2ChainShape = new b2ChainShape();\n"), m582("    const vs: b2Vec2[] = [];\n");
                                for (let n582 = 0; n582 < this.m_count; ++n582)
                                    m582("    vs[%d] = new bVec2(%.15f, %.15f);\n", n582, this.m_vertices[n582].x, this.m_vertices[n582].y);
                                m582("    shape.CreateChain(vs, %d);\n", this.m_count), m582("    shape.m_prevVertex.Set(%.15f, %.15f);\n", this.m_prevVertex.x, this.m_prevVertex.y), m582("    shape.m_nextVertex.Set(%.15f, %.15f);\n", this.m_nextVertex.x, this.m_nextVertex.y), m582("    shape.m_hasPrevVertex = %s;\n", this.m_hasPrevVertex ? "true" : "false"), m582("    shape.m_hasNextVertex = %s;\n", this.m_hasNextVertex ? "true" : "false");
                            }
                        }
                        p456.ComputeDistance_s_edgeShape = new o456(), p456.RayCast_s_edgeShape = new o456(), p456.ComputeAABB_s_v1 = new q451(), p456.ComputeAABB_s_v2 = new q451();
                        class q456 {
                            constructor() {
                                this.categoryBits = 1, this.maskBits = 65535, this.groupIndex = 0;
                            }
                            Clone() {
                                return new q456().Copy(this);
                            }
                            Copy(l582) {
                                return this.categoryBits = l582.categoryBits, this.maskBits = l582.maskBits, this.groupIndex = l582.groupIndex || 0, this;
                            }
                        }
                        q456.DEFAULT = new q456();
                        class r456 {
                            constructor() {
                                this.userData = null, this.friction = .2, this.restitution = 0, this.density = 0, this.isSensor = !1, this.filter = new q456();
                            }
                        }
                        class s456 {
                            constructor(j582, k582) {
                                this.aabb = new p453(), this.childIndex = 0, this.fixture = j582, this.childIndex = k582, this.fixture.m_shape.ComputeAABB(this.aabb, this.fixture.m_body.GetTransform(), k582), this.treeNode = this.fixture.m_body.m_world.m_contactManager.m_broadPhase.CreateProxy(this.aabb, this);
                            }
                            Reset() {
                                this.fixture.m_body.m_world.m_contactManager.m_broadPhase.DestroyProxy(this.treeNode);
                            }
                            Touch() {
                                this.fixture.m_body.m_world.m_contactManager.m_broadPhase.TouchProxy(this.treeNode);
                            }
                            Synchronize(e582, f582, g582) {
                                if (e582 === f582)
                                    this.fixture.m_shape.ComputeAABB(this.aabb, e582, this.childIndex), this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(this.treeNode, this.aabb, g582);
                                else {
                                    const h582 = s456.Synchronize_s_aabb1, i582 = s456.Synchronize_s_aabb2;
                                    this.fixture.m_shape.ComputeAABB(h582, e582, this.childIndex), this.fixture.m_shape.ComputeAABB(i582, f582, this.childIndex), this.aabb.Combine2(h582, i582), this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(this.treeNode, this.aabb, g582);
                                }
                            }
                        }
                        s456.Synchronize_s_aabb1 = new p453(), s456.Synchronize_s_aabb2 = new p453();
                        class t456 {
                            constructor(c582, d582) {
                                this.m_density = 0, this.m_next = null, this.m_friction = 0, this.m_restitution = 0, this.m_proxies = [], this.m_filter = new q456(), this.m_isSensor = !1, this.m_userData = null, this.m_body = c582, this.m_shape = d582.shape.Clone(), this.m_userData = o447(d582.userData, null), this.m_friction = o447(d582.friction, .2), this.m_restitution = o447(d582.restitution, 0), this.m_filter.Copy(o447(d582.filter, q456.DEFAULT)), this.m_isSensor = o447(d582.isSensor, !1), this.m_density = o447(d582.density, 0);
                            }
                            get m_proxyCount() {
                                return this.m_proxies.length;
                            }
                            Reset() { }
                            GetType() {
                                return this.m_shape.GetType();
                            }
                            GetShape() {
                                return this.m_shape;
                            }
                            SetSensor(b582) {
                                b582 !== this.m_isSensor && (this.m_body.SetAwake(!0), this.m_isSensor = b582);
                            }
                            IsSensor() {
                                return this.m_isSensor;
                            }
                            SetFilterData(a582) {
                                this.m_filter.Copy(a582), this.Refilter();
                            }
                            GetFilterData() {
                                return this.m_filter;
                            }
                            Refilter() {
                                let w581 = this.m_body.GetContactList();
                                for (; w581;) {
                                    const x581 = w581.contact, y581 = x581.GetFixtureA(), z581 = x581.GetFixtureB();
                                    y581 !== this && z581 !== this || x581.FlagForFiltering(), w581 = w581.next;
                                }
                                this.TouchProxies();
                            }
                            GetBody() {
                                return this.m_body;
                            }
                            GetNext() {
                                return this.m_next;
                            }
                            GetUserData() {
                                return this.m_userData;
                            }
                            SetUserData(v581) {
                                this.m_userData = v581;
                            }
                            TestPoint(u581) {
                                return this.m_shape.TestPoint(this.m_body.GetTransform(), u581);
                            }
                            ComputeDistance(r581, s581, t581) {
                                return this.m_shape.ComputeDistance(this.m_body.GetTransform(), r581, s581, t581);
                            }
                            RayCast(o581, p581, q581) {
                                return this.m_shape.RayCast(o581, p581, this.m_body.GetTransform(), q581);
                            }
                            GetMassData(n581 = new g456()) {
                                return this.m_shape.ComputeMass(n581, this.m_density), n581;
                            }
                            SetDensity(m581) {
                                this.m_density = m581;
                            }
                            GetDensity() {
                                return this.m_density;
                            }
                            GetFriction() {
                                return this.m_friction;
                            }
                            SetFriction(l581) {
                                this.m_friction = l581;
                            }
                            GetRestitution() {
                                return this.m_restitution;
                            }
                            SetRestitution(k581) {
                                this.m_restitution = k581;
                            }
                            GetAABB(j581) {
                                return this.m_proxies[j581].aabb;
                            }
                            Dump(h581, i581) {
                                h581("    const fd: b2FixtureDef = new b2FixtureDef();\n"), h581("    fd.friction = %.15f;\n", this.m_friction), h581("    fd.restitution = %.15f;\n", this.m_restitution), h581("    fd.density = %.15f;\n", this.m_density), h581("    fd.isSensor = %s;\n", this.m_isSensor ? "true" : "false"), h581("    fd.filter.categoryBits = %d;\n", this.m_filter.categoryBits), h581("    fd.filter.maskBits = %d;\n", this.m_filter.maskBits), h581("    fd.filter.groupIndex = %d;\n", this.m_filter.groupIndex), this.m_shape.Dump(h581), h581("\n"), h581("    fd.shape = shape;\n"), h581("\n"), h581("    bodies[%d].CreateFixture(fd);\n", i581);
                            }
                            CreateProxies() {
                                if (0 !== this.m_proxies.length)
                                    throw new Error();
                                for (let g581 = 0; g581 < this.m_shape.GetChildCount(); ++g581)
                                    this.m_proxies[g581] = new s456(this, g581);
                            }
                            DestroyProxies() {
                                for (const f581 of this.m_proxies)
                                    f581.Reset();
                                this.m_proxies.length = 0;
                            }
                            TouchProxies() {
                                for (const e581 of this.m_proxies)
                                    e581.Touch();
                            }
                            SynchronizeProxies(a581, b581, c581) {
                                for (const d581 of this.m_proxies)
                                    d581.Synchronize(a581, b581, c581);
                            }
                        }
                        (i456 = m447.b2BodyType || (m447.b2BodyType = {}))[i456.b2_unknown = -1] = "b2_unknown", i456[i456.b2_staticBody = 0] = "b2_staticBody", i456[i456.b2_kinematicBody = 1] = "b2_kinematicBody", i456[i456.b2_dynamicBody = 2] = "b2_dynamicBody";
                        class u456 {
                            constructor() {
                                this.type = m447.b2BodyType.b2_staticBody, this.position = new q451(0, 0), this.angle = 0, this.linearVelocity = new q451(0, 0), this.angularVelocity = 0, this.linearDamping = 0, this.angularDamping = 0, this.allowSleep = !0, this.awake = !0, this.fixedRotation = !1, this.bullet = !1, this.active = !0, this.userData = null, this.gravityScale = 1;
                            }
                        }
                        class v456 {
                            constructor(y580, z580) {
                                this.m_type = m447.b2BodyType.b2_staticBody, this.m_islandFlag = !1, this.m_awakeFlag = !1, this.m_autoSleepFlag = !1, this.m_bulletFlag = !1, this.m_fixedRotationFlag = !1, this.m_activeFlag = !1, this.m_toiFlag = !1, this.m_islandIndex = 0, this.m_xf = new w451(), this.m_xf0 = new w451(), this.m_sweep = new x451(), this.m_linearVelocity = new q451(), this.m_angularVelocity = 0, this.m_force = new q451(), this.m_torque = 0, this.m_prev = null, this.m_next = null, this.m_fixtureList = null, this.m_fixtureCount = 0, this.m_jointList = null, this.m_contactList = null, this.m_mass = 1, this.m_invMass = 1, this.m_I = 0, this.m_invI = 0, this.m_linearDamping = 0, this.m_angularDamping = 0, this.m_gravityScale = 1, this.m_sleepTime = 0, this.m_userData = null, this.m_controllerList = null, this.m_controllerCount = 0, this.m_bulletFlag = o447(y580.bullet, !1), this.m_fixedRotationFlag = o447(y580.fixedRotation, !1), this.m_autoSleepFlag = o447(y580.allowSleep, !0), this.m_awakeFlag = o447(y580.awake, !0), this.m_activeFlag = o447(y580.active, !0), this.m_world = z580, this.m_xf.p.Copy(o447(y580.position, q451.ZERO)), this.m_xf.q.SetAngle(o447(y580.angle, 0)), this.m_xf0.Copy(this.m_xf), this.m_sweep.localCenter.SetZero(), this.m_sweep.c0.Copy(this.m_xf.p), this.m_sweep.c.Copy(this.m_xf.p), this.m_sweep.a0 = this.m_sweep.a = this.m_xf.q.GetAngle(), this.m_sweep.alpha0 = 0, this.m_linearVelocity.Copy(o447(y580.linearVelocity, q451.ZERO)), this.m_angularVelocity = o447(y580.angularVelocity, 0), this.m_linearDamping = o447(y580.linearDamping, 0), this.m_angularDamping = o447(y580.angularDamping, 0), this.m_gravityScale = o447(y580.gravityScale, 1), this.m_force.SetZero(), this.m_torque = 0, this.m_sleepTime = 0, this.m_type = o447(y580.type, m447.b2BodyType.b2_staticBody), y580.type === m447.b2BodyType.b2_dynamicBody ? (this.m_mass = 1, this.m_invMass = 1) : (this.m_mass = 0, this.m_invMass = 0), this.m_I = 0, this.m_invI = 0, this.m_userData = y580.userData, this.m_fixtureList = null, this.m_fixtureCount = 0, this.m_controllerList = null, this.m_controllerCount = 0;
                            }
                            CreateFixture(w580, x580 = 0) {
                                return w580 instanceof l456 ? this.CreateFixtureShapeDensity(w580, x580) : this.CreateFixtureDef(w580);
                            }
                            CreateFixtureDef(u580) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                const v580 = new t456(this, u580);
                                return this.m_activeFlag && v580.CreateProxies(), v580.m_next = this.m_fixtureList, this.m_fixtureList = v580, ++this.m_fixtureCount, v580.m_density > 0 && this.ResetMassData(), this.m_world.m_newFixture = !0, v580;
                            }
                            CreateFixtureShapeDensity(r580, s580 = 0) {
                                const t580 = v456.CreateFixtureShapeDensity_s_def;
                                return t580.shape = r580, t580.density = s580, this.CreateFixtureDef(t580);
                            }
                            DestroyFixture(k580) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                let l580 = this.m_fixtureList, m580 = null;
                                for (; null !== l580;) {
                                    if (l580 === k580) {
                                        m580 ? m580.m_next = k580.m_next : this.m_fixtureList = k580.m_next;
                                        break;
                                    }
                                    m580 = l580, l580 = l580.m_next;
                                }
                                let n580 = this.m_contactList;
                                for (; n580;) {
                                    const o580 = n580.contact;
                                    n580 = n580.next;
                                    const p580 = o580.GetFixtureA(), q580 = o580.GetFixtureB();
                                    k580 !== p580 && k580 !== q580 || this.m_world.m_contactManager.Destroy(o580);
                                }
                                this.m_activeFlag && k580.DestroyProxies(), k580.m_next = null, k580.Reset(), --this.m_fixtureCount, this.ResetMassData();
                            }
                            SetTransformVec(i580, j580) {
                                this.SetTransformXY(i580.x, i580.y, j580);
                            }
                            SetTransformXY(e580, f580, g580) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                this.m_xf.q.SetAngle(g580), this.m_xf.p.Set(e580, f580), this.m_xf0.Copy(this.m_xf), w451.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c), this.m_sweep.a = g580, this.m_sweep.c0.Copy(this.m_sweep.c), this.m_sweep.a0 = g580;
                                for (let h580 = this.m_fixtureList; h580; h580 = h580.m_next)
                                    h580.SynchronizeProxies(this.m_xf, this.m_xf, q451.ZERO);
                                this.m_world.m_contactManager.FindNewContacts();
                            }
                            SetTransform(d580) {
                                this.SetTransformVec(d580.p, d580.GetAngle());
                            }
                            GetTransform() {
                                return this.m_xf;
                            }
                            GetPosition() {
                                return this.m_xf.p;
                            }
                            SetPosition(c580) {
                                this.SetTransformVec(c580, this.GetAngle());
                            }
                            SetPositionXY(a580, b580) {
                                this.SetTransformXY(a580, b580, this.GetAngle());
                            }
                            GetAngle() {
                                return this.m_sweep.a;
                            }
                            SetAngle(z579) {
                                this.SetTransformVec(this.GetPosition(), z579);
                            }
                            GetWorldCenter() {
                                return this.m_sweep.c;
                            }
                            GetLocalCenter() {
                                return this.m_sweep.localCenter;
                            }
                            SetLinearVelocity(y579) {
                                this.m_type !== m447.b2BodyType.b2_staticBody && (q451.DotVV(y579, y579) > 0 && this.SetAwake(!0), this.m_linearVelocity.Copy(y579));
                            }
                            GetLinearVelocity() {
                                return this.m_linearVelocity;
                            }
                            SetAngularVelocity(x579) {
                                this.m_type !== m447.b2BodyType.b2_staticBody && (x579 * x579 > 0 && this.SetAwake(!0), this.m_angularVelocity = x579);
                            }
                            GetAngularVelocity() {
                                return this.m_angularVelocity;
                            }
                            GetDefinition(w579) {
                                return w579.type = this.GetType(), w579.allowSleep = this.m_autoSleepFlag, w579.angle = this.GetAngle(), w579.angularDamping = this.m_angularDamping, w579.gravityScale = this.m_gravityScale, w579.angularVelocity = this.m_angularVelocity, w579.fixedRotation = this.m_fixedRotationFlag, w579.bullet = this.m_bulletFlag, w579.awake = this.m_awakeFlag, w579.linearDamping = this.m_linearDamping, w579.linearVelocity.Copy(this.GetLinearVelocity()), w579.position.Copy(this.GetPosition()), w579.userData = this.GetUserData(), w579;
                            }
                            ApplyForce(t579, u579, v579 = !0) {
                                this.m_type === m447.b2BodyType.b2_dynamicBody && (v579 && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_force.x += t579.x, this.m_force.y += t579.y, this.m_torque += (u579.x - this.m_sweep.c.x) * t579.y - (u579.y - this.m_sweep.c.y) * t579.x));
                            }
                            ApplyForceToCenter(r579, s579 = !0) {
                                this.m_type === m447.b2BodyType.b2_dynamicBody && (s579 && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_force.x += r579.x, this.m_force.y += r579.y));
                            }
                            ApplyTorque(p579, q579 = !0) {
                                this.m_type === m447.b2BodyType.b2_dynamicBody && (q579 && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_torque += p579));
                            }
                            ApplyLinearImpulse(m579, n579, o579 = !0) {
                                this.m_type === m447.b2BodyType.b2_dynamicBody && (o579 && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_linearVelocity.x += this.m_invMass * m579.x, this.m_linearVelocity.y += this.m_invMass * m579.y, this.m_angularVelocity += this.m_invI * ((n579.x - this.m_sweep.c.x) * m579.y - (n579.y - this.m_sweep.c.y) * m579.x)));
                            }
                            ApplyLinearImpulseToCenter(k579, l579 = !0) {
                                this.m_type === m447.b2BodyType.b2_dynamicBody && (l579 && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_linearVelocity.x += this.m_invMass * k579.x, this.m_linearVelocity.y += this.m_invMass * k579.y));
                            }
                            ApplyAngularImpulse(i579, j579 = !0) {
                                this.m_type === m447.b2BodyType.b2_dynamicBody && (j579 && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_angularVelocity += this.m_invI * i579));
                            }
                            GetMass() {
                                return this.m_mass;
                            }
                            GetInertia() {
                                return this.m_I + this.m_mass * q451.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);
                            }
                            GetMassData(h579) {
                                return h579.mass = this.m_mass, h579.I = this.m_I + this.m_mass * q451.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter), h579.center.Copy(this.m_sweep.localCenter), h579;
                            }
                            SetMassData(f579) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                if (this.m_type !== m447.b2BodyType.b2_dynamicBody)
                                    return;
                                this.m_invMass = 0, this.m_I = 0, this.m_invI = 0, this.m_mass = f579.mass, this.m_mass <= 0 && (this.m_mass = 1), this.m_invMass = 1 / this.m_mass, f579.I > 0 && !this.m_fixedRotationFlag && (this.m_I = f579.I - this.m_mass * q451.DotVV(f579.center, f579.center), this.m_invI = 1 / this.m_I);
                                const g579 = v456.SetMassData_s_oldCenter.Copy(this.m_sweep.c);
                                this.m_sweep.localCenter.Copy(f579.center), w451.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c), this.m_sweep.c0.Copy(this.m_sweep.c), q451.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, q451.SubVV(this.m_sweep.c, g579, q451.s_t0), this.m_linearVelocity);
                            }
                            ResetMassData() {
                                if (this.m_mass = 0, this.m_invMass = 0, this.m_I = 0, this.m_invI = 0, this.m_sweep.localCenter.SetZero(), this.m_type === m447.b2BodyType.b2_staticBody || this.m_type === m447.b2BodyType.b2_kinematicBody)
                                    return this.m_sweep.c0.Copy(this.m_xf.p), this.m_sweep.c.Copy(this.m_xf.p), void (this.m_sweep.a0 = this.m_sweep.a);
                                const b579 = v456.ResetMassData_s_localCenter.SetZero();
                                for (let d579 = this.m_fixtureList; d579; d579 = d579.m_next) {
                                    if (0 === d579.m_density)
                                        continue;
                                    const e579 = d579.GetMassData(v456.ResetMassData_s_massData);
                                    this.m_mass += e579.mass, b579.x += e579.center.x * e579.mass, b579.y += e579.center.y * e579.mass, this.m_I += e579.I;
                                }
                                this.m_mass > 0 ? (this.m_invMass = 1 / this.m_mass, b579.x *= this.m_invMass, b579.y *= this.m_invMass) : (this.m_mass = 1, this.m_invMass = 1), this.m_I > 0 && !this.m_fixedRotationFlag ? (this.m_I -= this.m_mass * q451.DotVV(b579, b579), this.m_invI = 1 / this.m_I) : (this.m_I = 0, this.m_invI = 0);
                                const c579 = v456.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);
                                this.m_sweep.localCenter.Copy(b579), w451.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c), this.m_sweep.c0.Copy(this.m_sweep.c), q451.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, q451.SubVV(this.m_sweep.c, c579, q451.s_t0), this.m_linearVelocity);
                            }
                            GetWorldPoint(z578, a579) {
                                return w451.MulXV(this.m_xf, z578, a579);
                            }
                            GetWorldVector(x578, y578) {
                                return v451.MulRV(this.m_xf.q, x578, y578);
                            }
                            GetLocalPoint(v578, w578) {
                                return w451.MulTXV(this.m_xf, v578, w578);
                            }
                            GetLocalVector(t578, u578) {
                                return v451.MulTRV(this.m_xf.q, t578, u578);
                            }
                            GetLinearVelocityFromWorldPoint(r578, s578) {
                                return q451.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, q451.SubVV(r578, this.m_sweep.c, q451.s_t0), s578);
                            }
                            GetLinearVelocityFromLocalPoint(p578, q578) {
                                return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(p578, q578), q578);
                            }
                            GetLinearDamping() {
                                return this.m_linearDamping;
                            }
                            SetLinearDamping(o578) {
                                this.m_linearDamping = o578;
                            }
                            GetAngularDamping() {
                                return this.m_angularDamping;
                            }
                            SetAngularDamping(n578) {
                                this.m_angularDamping = n578;
                            }
                            GetGravityScale() {
                                return this.m_gravityScale;
                            }
                            SetGravityScale(m578) {
                                this.m_gravityScale = m578;
                            }
                            SetType(i578) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                if (this.m_type === i578)
                                    return;
                                this.m_type = i578, this.ResetMassData(), this.m_type === m447.b2BodyType.b2_staticBody && (this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0, this.m_sweep.a0 = this.m_sweep.a, this.m_sweep.c0.Copy(this.m_sweep.c), this.SynchronizeFixtures()), this.SetAwake(!0), this.m_force.SetZero(), this.m_torque = 0;
                                let j578 = this.m_contactList;
                                for (; j578;) {
                                    const l578 = j578;
                                    j578 = j578.next, this.m_world.m_contactManager.Destroy(l578.contact);
                                }
                                this.m_contactList = null;
                                for (let k578 = this.m_fixtureList; k578; k578 = k578.m_next)
                                    k578.TouchProxies();
                            }
                            GetType() {
                                return this.m_type;
                            }
                            SetBullet(h578) {
                                this.m_bulletFlag = h578;
                            }
                            IsBullet() {
                                return this.m_bulletFlag;
                            }
                            SetSleepingAllowed(g578) {
                                this.m_autoSleepFlag = g578, g578 || this.SetAwake(!0);
                            }
                            IsSleepingAllowed() {
                                return this.m_autoSleepFlag;
                            }
                            SetAwake(f578) {
                                f578 ? (this.m_awakeFlag = !0, this.m_sleepTime = 0) : (this.m_awakeFlag = !1, this.m_sleepTime = 0, this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0, this.m_force.SetZero(), this.m_torque = 0);
                            }
                            IsAwake() {
                                return this.m_awakeFlag;
                            }
                            SetActive(a578) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                if (a578 !== this.IsActive())
                                    if (this.m_activeFlag = a578, a578)
                                        for (let e578 = this.m_fixtureList; e578; e578 = e578.m_next)
                                            e578.CreateProxies();
                                    else {
                                        for (let d578 = this.m_fixtureList; d578; d578 = d578.m_next)
                                            d578.DestroyProxies();
                                        let b578 = this.m_contactList;
                                        for (; b578;) {
                                            const c578 = b578;
                                            b578 = b578.next, this.m_world.m_contactManager.Destroy(c578.contact);
                                        }
                                        this.m_contactList = null;
                                    }
                            }
                            IsActive() {
                                return this.m_activeFlag;
                            }
                            SetFixedRotation(z577) {
                                this.m_fixedRotationFlag !== z577 && (this.m_fixedRotationFlag = z577, this.m_angularVelocity = 0, this.ResetMassData());
                            }
                            IsFixedRotation() {
                                return this.m_fixedRotationFlag;
                            }
                            GetFixtureList() {
                                return this.m_fixtureList;
                            }
                            GetJointList() {
                                return this.m_jointList;
                            }
                            GetContactList() {
                                return this.m_contactList;
                            }
                            GetNext() {
                                return this.m_next;
                            }
                            GetUserData() {
                                return this.m_userData;
                            }
                            SetUserData(y577) {
                                this.m_userData = y577;
                            }
                            GetWorld() {
                                return this.m_world;
                            }
                            Dump(u577) {
                                const v577 = this.m_islandIndex;
                                u577("{\n"), u577("  const bd: b2BodyDef = new b2BodyDef();\n");
                                let w577 = "";
                                switch (this.m_type) {
                                    case m447.b2BodyType.b2_staticBody:
                                        w577 = "b2BodyType.b2_staticBody";
                                        break;
                                    case m447.b2BodyType.b2_kinematicBody:
                                        w577 = "b2BodyType.b2_kinematicBody";
                                        break;
                                    case m447.b2BodyType.b2_dynamicBody:
                                        w577 = "b2BodyType.b2_dynamicBody";
                                }
                                u577("  bd.type = %s;\n", w577), u577("  bd.position.Set(%.15f, %.15f);\n", this.m_xf.p.x, this.m_xf.p.y), u577("  bd.angle = %.15f;\n", this.m_sweep.a), u577("  bd.linearVelocity.Set(%.15f, %.15f);\n", this.m_linearVelocity.x, this.m_linearVelocity.y), u577("  bd.angularVelocity = %.15f;\n", this.m_angularVelocity), u577("  bd.linearDamping = %.15f;\n", this.m_linearDamping), u577("  bd.angularDamping = %.15f;\n", this.m_angularDamping), u577("  bd.allowSleep = %s;\n", this.m_autoSleepFlag ? "true" : "false"), u577("  bd.awake = %s;\n", this.m_awakeFlag ? "true" : "false"), u577("  bd.fixedRotation = %s;\n", this.m_fixedRotationFlag ? "true" : "false"), u577("  bd.bullet = %s;\n", this.m_bulletFlag ? "true" : "false"), u577("  bd.active = %s;\n", this.m_activeFlag ? "true" : "false"), u577("  bd.gravityScale = %.15f;\n", this.m_gravityScale), u577("\n"), u577("  bodies[%d] = this.m_world.CreateBody(bd);\n", this.m_islandIndex), u577("\n");
                                for (let x577 = this.m_fixtureList; x577; x577 = x577.m_next)
                                    u577("  {\n"), x577.Dump(u577, v577), u577("  }\n");
                                u577("}\n");
                            }
                            SynchronizeFixtures() {
                                const r577 = v456.SynchronizeFixtures_s_xf1;
                                r577.q.SetAngle(this.m_sweep.a0), v451.MulRV(r577.q, this.m_sweep.localCenter, r577.p), q451.SubVV(this.m_sweep.c0, r577.p, r577.p);
                                const s577 = q451.SubVV(this.m_sweep.c, this.m_sweep.c0, v456.SynchronizeFixtures_s_displacement);
                                for (let t577 = this.m_fixtureList; t577; t577 = t577.m_next)
                                    t577.SynchronizeProxies(r577, this.m_xf, s577);
                            }
                            SynchronizeTransform() {
                                this.m_xf.q.SetAngle(this.m_sweep.a), v451.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p), q451.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);
                            }
                            ShouldCollide(q577) {
                                return (this.m_type !== m447.b2BodyType.b2_staticBody || q577.m_type !== m447.b2BodyType.b2_staticBody) && this.ShouldCollideConnected(q577);
                            }
                            ShouldCollideConnected(o577) {
                                for (let p577 = this.m_jointList; p577; p577 = p577.next)
                                    if (p577.other === o577 && !p577.joint.m_collideConnected)
                                        return !1;
                                return !0;
                            }
                            Advance(n577) {
                                this.m_sweep.Advance(n577), this.m_sweep.c.Copy(this.m_sweep.c0), this.m_sweep.a = this.m_sweep.a0, this.m_xf.q.SetAngle(this.m_sweep.a), v451.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p), q451.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);
                            }
                            GetControllerList() {
                                return this.m_controllerList;
                            }
                            GetControllerCount() {
                                return this.m_controllerCount;
                            }
                        }
                        v456.CreateFixtureShapeDensity_s_def = new r456(), v456.SetMassData_s_oldCenter = new q451(), v456.ResetMassData_s_localCenter = new q451(), v456.ResetMassData_s_oldCenter = new q451(), v456.ResetMassData_s_massData = new g456(), v456.SynchronizeFixtures_s_xf1 = new w451(), v456.SynchronizeFixtures_s_displacement = new q451(), (k456 = m447.b2JointType || (m447.b2JointType = {}))[k456.e_unknownJoint = 0] = "e_unknownJoint", k456[k456.e_revoluteJoint = 1] = "e_revoluteJoint", k456[k456.e_prismaticJoint = 2] = "e_prismaticJoint", k456[k456.e_distanceJoint = 3] = "e_distanceJoint", k456[k456.e_pulleyJoint = 4] = "e_pulleyJoint", k456[k456.e_mouseJoint = 5] = "e_mouseJoint", k456[k456.e_gearJoint = 6] = "e_gearJoint", k456[k456.e_wheelJoint = 7] = "e_wheelJoint", k456[k456.e_weldJoint = 8] = "e_weldJoint", k456[k456.e_frictionJoint = 9] = "e_frictionJoint", k456[k456.e_ropeJoint = 10] = "e_ropeJoint", k456[k456.e_motorJoint = 11] = "e_motorJoint", k456[k456.e_areaJoint = 12] = "e_areaJoint", (j456 = m447.b2LimitState || (m447.b2LimitState = {}))[j456.e_inactiveLimit = 0] = "e_inactiveLimit", j456[j456.e_atLowerLimit = 1] = "e_atLowerLimit", j456[j456.e_atUpperLimit = 2] = "e_atUpperLimit", j456[j456.e_equalLimits = 3] = "e_equalLimits";
                        class w456 {
                            constructor() {
                                this.linear = new q451(), this.angularA = 0, this.angularB = 0;
                            }
                            SetZero() {
                                return this.linear.SetZero(), this.angularA = 0, this.angularB = 0, this;
                            }
                            Set(k577, l577, m577) {
                                return this.linear.Copy(k577), this.angularA = l577, this.angularB = m577, this;
                            }
                        }
                        class x456 {
                            constructor(j577) {
                                this._other = null, this.prev = null, this.next = null, this.joint = j577;
                            }
                            get other() {
                                if (null === this._other)
                                    throw new Error();
                                return this._other;
                            }
                            set other(i577) {
                                if (null !== this._other)
                                    throw new Error();
                                this._other = i577;
                            }
                            Reset() {
                                this._other = null, this.prev = null, this.next = null;
                            }
                        }
                        class y456 {
                            constructor(h577) {
                                this.type = m447.b2JointType.e_unknownJoint, this.userData = null, this.collideConnected = !1, this.type = h577;
                            }
                        }
                        class z456 {
                            constructor(g577) {
                                this.m_type = m447.b2JointType.e_unknownJoint, this.m_prev = null, this.m_next = null, this.m_edgeA = new x456(this), this.m_edgeB = new x456(this), this.m_index = 0, this.m_islandFlag = !1, this.m_collideConnected = !1, this.m_userData = null, this.m_type = g577.type, this.m_edgeA.other = g577.bodyB, this.m_edgeB.other = g577.bodyA, this.m_bodyA = g577.bodyA, this.m_bodyB = g577.bodyB, this.m_collideConnected = o447(g577.collideConnected, !1), this.m_userData = o447(g577.userData, null);
                            }
                            GetType() {
                                return this.m_type;
                            }
                            GetBodyA() {
                                return this.m_bodyA;
                            }
                            GetBodyB() {
                                return this.m_bodyB;
                            }
                            GetNext() {
                                return this.m_next;
                            }
                            GetUserData() {
                                return this.m_userData;
                            }
                            SetUserData(f577) {
                                this.m_userData = f577;
                            }
                            IsActive() {
                                return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
                            }
                            GetCollideConnected() {
                                return this.m_collideConnected;
                            }
                            Dump(e577) {
                                e577("// Dump is not supported for this joint type.\n");
                            }
                            ShiftOrigin(d577) { }
                        }
                        class a457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_distanceJoint), this.localAnchorA = new q451(), this.localAnchorB = new q451(), this.length = 1, this.frequencyHz = 0, this.dampingRatio = 0;
                            }
                            Initialize(z576, a577, b577, c577) {
                                this.bodyA = z576, this.bodyB = a577, this.bodyA.GetLocalPoint(b577, this.localAnchorA), this.bodyB.GetLocalPoint(c577, this.localAnchorB), this.length = q451.DistanceVV(b577, c577), this.frequencyHz = 0, this.dampingRatio = 0;
                            }
                        }
                        class b457 extends z456 {
                            constructor(y576) {
                                super(y576), this.m_frequencyHz = 0, this.m_dampingRatio = 0, this.m_bias = 0, this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_gamma = 0, this.m_impulse = 0, this.m_length = 0, this.m_indexA = 0, this.m_indexB = 0, this.m_u = new q451(), this.m_rA = new q451(), this.m_rB = new q451(), this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_mass = 0, this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_frequencyHz = o447(y576.frequencyHz, 0), this.m_dampingRatio = o447(y576.dampingRatio, 0), this.m_localAnchorA.Copy(y576.localAnchorA), this.m_localAnchorB.Copy(y576.localAnchorB), this.m_length = y576.length;
                            }
                            GetAnchorA(x576) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, x576);
                            }
                            GetAnchorB(w576) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, w576);
                            }
                            GetReactionForce(u576, v576) {
                                return v576.x = u576 * this.m_impulse * this.m_u.x, v576.y = u576 * this.m_impulse * this.m_u.y, v576;
                            }
                            GetReactionTorque(t576) {
                                return 0;
                            }
                            GetLocalAnchorA() {
                                return this.m_localAnchorA;
                            }
                            GetLocalAnchorB() {
                                return this.m_localAnchorB;
                            }
                            SetLength(s576) {
                                this.m_length = s576;
                            }
                            Length() {
                                return this.m_length;
                            }
                            SetFrequency(r576) {
                                this.m_frequencyHz = r576;
                            }
                            GetFrequency() {
                                return this.m_frequencyHz;
                            }
                            SetDampingRatio(q576) {
                                this.m_dampingRatio = q576;
                            }
                            GetDampingRatio() {
                                return this.m_dampingRatio;
                            }
                            Dump(n576) {
                                const o576 = this.m_bodyA.m_islandIndex, p576 = this.m_bodyB.m_islandIndex;
                                n576("  const jd: b2DistanceJointDef = new b2DistanceJointDef();\n"), n576("  jd.bodyA = bodies[%d];\n", o576), n576("  jd.bodyB = bodies[%d];\n", p576), n576("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), n576("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), n576("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), n576("  jd.length = %.15f;\n", this.m_length), n576("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz), n576("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio), n576("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                            InitVelocityConstraints(s575) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const t575 = s575.positions[this.m_indexA].c, u575 = s575.positions[this.m_indexA].a, v575 = s575.velocities[this.m_indexA].v;
                                let w575 = s575.velocities[this.m_indexA].w;
                                const x575 = s575.positions[this.m_indexB].c, y575 = s575.positions[this.m_indexB].a, z575 = s575.velocities[this.m_indexB].v;
                                let a576 = s575.velocities[this.m_indexB].w;
                                const b576 = this.m_qA.SetAngle(u575), c576 = this.m_qB.SetAngle(y575);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA), v451.MulRV(b576, this.m_lalcA, this.m_rA), q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB), v451.MulRV(c576, this.m_lalcB, this.m_rB), this.m_u.x = x575.x + this.m_rB.x - t575.x - this.m_rA.x, this.m_u.y = x575.y + this.m_rB.y - t575.y - this.m_rA.y;
                                const d576 = this.m_u.Length();
                                d576 > z449 ? this.m_u.SelfMul(1 / d576) : this.m_u.SetZero();
                                const e576 = q451.CrossVV(this.m_rA, this.m_u), f576 = q451.CrossVV(this.m_rB, this.m_u);
                                let g576 = this.m_invMassA + this.m_invIA * e576 * e576 + this.m_invMassB + this.m_invIB * f576 * f576;
                                if (this.m_mass = 0 !== g576 ? 1 / g576 : 0, this.m_frequencyHz > 0) {
                                    const i576 = d576 - this.m_length, j576 = 2 * u449 * this.m_frequencyHz, k576 = 2 * this.m_mass * this.m_dampingRatio * j576, l576 = this.m_mass * j576 * j576, m576 = s575.step.dt;
                                    this.m_gamma = m576 * (k576 + m576 * l576), this.m_gamma = 0 !== this.m_gamma ? 1 / this.m_gamma : 0, this.m_bias = i576 * m576 * l576 * this.m_gamma, g576 += this.m_gamma, this.m_mass = 0 !== g576 ? 1 / g576 : 0;
                                }
                                else
                                    this.m_gamma = 0, this.m_bias = 0;
                                if (s575.step.warmStarting) {
                                    this.m_impulse *= s575.step.dtRatio;
                                    const h576 = q451.MulSV(this.m_impulse, this.m_u, b457.InitVelocityConstraints_s_P);
                                    v575.SelfMulSub(this.m_invMassA, h576), w575 -= this.m_invIA * q451.CrossVV(this.m_rA, h576), z575.SelfMulAdd(this.m_invMassB, h576), a576 += this.m_invIB * q451.CrossVV(this.m_rB, h576);
                                }
                                else
                                    this.m_impulse = 0;
                                s575.velocities[this.m_indexA].w = w575, s575.velocities[this.m_indexB].w = a576;
                            }
                            SolveVelocityConstraints(i575) {
                                const j575 = i575.velocities[this.m_indexA].v;
                                let k575 = i575.velocities[this.m_indexA].w;
                                const l575 = i575.velocities[this.m_indexB].v;
                                let m575 = i575.velocities[this.m_indexB].w;
                                const n575 = q451.AddVCrossSV(j575, k575, this.m_rA, b457.SolveVelocityConstraints_s_vpA), o575 = q451.AddVCrossSV(l575, m575, this.m_rB, b457.SolveVelocityConstraints_s_vpB), p575 = q451.DotVV(this.m_u, q451.SubVV(o575, n575, q451.s_t0)), q575 = -this.m_mass * (p575 + this.m_bias + this.m_gamma * this.m_impulse);
                                this.m_impulse += q575;
                                const r575 = q451.MulSV(q575, this.m_u, b457.SolveVelocityConstraints_s_P);
                                j575.SelfMulSub(this.m_invMassA, r575), k575 -= this.m_invIA * q451.CrossVV(this.m_rA, r575), l575.SelfMulAdd(this.m_invMassB, r575), m575 += this.m_invIB * q451.CrossVV(this.m_rB, r575), i575.velocities[this.m_indexA].w = k575, i575.velocities[this.m_indexB].w = m575;
                            }
                            SolvePositionConstraints(v574) {
                                if (this.m_frequencyHz > 0)
                                    return !0;
                                const w574 = v574.positions[this.m_indexA].c;
                                let x574 = v574.positions[this.m_indexA].a;
                                const y574 = v574.positions[this.m_indexB].c;
                                let z574 = v574.positions[this.m_indexB].a;
                                const a575 = this.m_qA.SetAngle(x574), b575 = this.m_qB.SetAngle(z574), c575 = v451.MulRV(a575, this.m_lalcA, this.m_rA), d575 = v451.MulRV(b575, this.m_lalcB, this.m_rB), e575 = this.m_u;
                                e575.x = y574.x + d575.x - w574.x - c575.x, e575.y = y574.y + d575.y - w574.y - c575.y;
                                let f575 = this.m_u.Normalize() - this.m_length;
                                f575 = z447(f575, -f450, f450);
                                const g575 = -this.m_mass * f575, h575 = q451.MulSV(g575, e575, b457.SolvePositionConstraints_s_P);
                                return w574.SelfMulSub(this.m_invMassA, h575), x574 -= this.m_invIA * q451.CrossVV(c575, h575), y574.SelfMulAdd(this.m_invMassB, h575), z574 += this.m_invIB * q451.CrossVV(d575, h575), v574.positions[this.m_indexA].a = x574, v574.positions[this.m_indexB].a = z574, h451(f575) < z449;
                            }
                        }
                        b457.InitVelocityConstraints_s_P = new q451(), b457.SolveVelocityConstraints_s_vpA = new q451(), b457.SolveVelocityConstraints_s_vpB = new q451(), b457.SolveVelocityConstraints_s_P = new q451(), b457.SolvePositionConstraints_s_P = new q451();
                        class c457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_areaJoint), this.bodies = [], this.frequencyHz = 0, this.dampingRatio = 0;
                            }
                            AddBody(u574) {
                                this.bodies.push(u574), 1 === this.bodies.length ? this.bodyA = u574 : 2 === this.bodies.length && (this.bodyB = u574);
                            }
                        }
                        class d457 extends z456 {
                            constructor(n574) {
                                super(n574), this.m_frequencyHz = 0, this.m_dampingRatio = 0, this.m_impulse = 0, this.m_targetArea = 0, this.m_delta = new q451(), this.m_bodies = n574.bodies, this.m_frequencyHz = o447(n574.frequencyHz, 0), this.m_dampingRatio = o447(n574.dampingRatio, 0), this.m_targetLengths = w447(n574.bodies.length), this.m_normals = q451.MakeArray(n574.bodies.length), this.m_joints = [], this.m_deltas = q451.MakeArray(n574.bodies.length);
                                const o574 = new a457();
                                o574.frequencyHz = this.m_frequencyHz, o574.dampingRatio = this.m_dampingRatio, this.m_targetArea = 0;
                                for (let p574 = 0; p574 < this.m_bodies.length; ++p574) {
                                    const q574 = this.m_bodies[p574], r574 = this.m_bodies[(p574 + 1) % this.m_bodies.length], s574 = q574.GetWorldCenter(), t574 = r574.GetWorldCenter();
                                    this.m_targetLengths[p574] = q451.DistanceVV(s574, t574), this.m_targetArea += q451.CrossVV(s574, t574), o574.Initialize(q574, r574, s574, t574), this.m_joints[p574] = q574.GetWorld().CreateJoint(o574);
                                }
                                this.m_targetArea *= .5;
                            }
                            GetAnchorA(m574) {
                                return m574;
                            }
                            GetAnchorB(l574) {
                                return l574;
                            }
                            GetReactionForce(j574, k574) {
                                return k574;
                            }
                            GetReactionTorque(i574) {
                                return 0;
                            }
                            SetFrequency(g574) {
                                this.m_frequencyHz = g574;
                                for (let h574 = 0; h574 < this.m_joints.length; ++h574)
                                    this.m_joints[h574].SetFrequency(g574);
                            }
                            GetFrequency() {
                                return this.m_frequencyHz;
                            }
                            SetDampingRatio(e574) {
                                this.m_dampingRatio = e574;
                                for (let f574 = 0; f574 < this.m_joints.length; ++f574)
                                    this.m_joints[f574].SetDampingRatio(e574);
                            }
                            GetDampingRatio() {
                                return this.m_dampingRatio;
                            }
                            Dump(d574) {
                                d574("Area joint dumping is not supported.\n");
                            }
                            InitVelocityConstraints(s573) {
                                for (let x573 = 0; x573 < this.m_bodies.length; ++x573) {
                                    const y573 = this.m_bodies[(x573 + this.m_bodies.length - 1) % this.m_bodies.length], z573 = this.m_bodies[(x573 + 1) % this.m_bodies.length], a574 = s573.positions[y573.m_islandIndex].c, b574 = s573.positions[z573.m_islandIndex].c, c574 = this.m_deltas[x573];
                                    q451.SubVV(b574, a574, c574);
                                }
                                if (s573.step.warmStarting) {
                                    this.m_impulse *= s573.step.dtRatio;
                                    for (let t573 = 0; t573 < this.m_bodies.length; ++t573) {
                                        const u573 = this.m_bodies[t573], v573 = s573.velocities[u573.m_islandIndex].v, w573 = this.m_deltas[t573];
                                        v573.x += u573.m_invMass * w573.y * .5 * this.m_impulse, v573.y += u573.m_invMass * -w573.x * .5 * this.m_impulse;
                                    }
                                }
                                else
                                    this.m_impulse = 0;
                            }
                            SolveVelocityConstraints(g573) {
                                let h573 = 0, i573 = 0;
                                for (let o573 = 0; o573 < this.m_bodies.length; ++o573) {
                                    const p573 = this.m_bodies[o573], q573 = g573.velocities[p573.m_islandIndex].v, r573 = this.m_deltas[o573];
                                    h573 += r573.LengthSquared() / p573.GetMass(), i573 += q451.CrossVV(q573, r573);
                                }
                                const j573 = -2 * i573 / h573;
                                this.m_impulse += j573;
                                for (let k573 = 0; k573 < this.m_bodies.length; ++k573) {
                                    const l573 = this.m_bodies[k573], m573 = g573.velocities[l573.m_islandIndex].v, n573 = this.m_deltas[k573];
                                    m573.x += l573.m_invMass * n573.y * .5 * j573, m573.y += l573.m_invMass * -n573.x * .5 * j573;
                                }
                            }
                            SolvePositionConstraints(o572) {
                                let p572 = 0, q572 = 0;
                                for (let z572 = 0; z572 < this.m_bodies.length; ++z572) {
                                    const a573 = this.m_bodies[z572], b573 = this.m_bodies[(z572 + 1) % this.m_bodies.length], c573 = o572.positions[a573.m_islandIndex].c, d573 = o572.positions[b573.m_islandIndex].c, e573 = q451.SubVV(d573, c573, this.m_delta);
                                    let f573 = e573.Length();
                                    f573 < s449 && (f573 = 1), this.m_normals[z572].x = e573.y / f573, this.m_normals[z572].y = -e573.x / f573, p572 += f573, q572 += q451.CrossVV(c573, d573);
                                }
                                q572 *= .5;
                                const r572 = .5 * (this.m_targetArea - q572) / p572;
                                let s572 = !0;
                                for (let t572 = 0; t572 < this.m_bodies.length; ++t572) {
                                    const u572 = this.m_bodies[t572], v572 = o572.positions[u572.m_islandIndex].c, w572 = (t572 + 1) % this.m_bodies.length, x572 = q451.AddVV(this.m_normals[t572], this.m_normals[w572], this.m_delta);
                                    x572.SelfMul(r572);
                                    const y572 = x572.LengthSquared();
                                    y572 > b448(f450) && x572.SelfMul(f450 / j451(y572)), y572 > b448(z449) && (s572 = !1), v572.x += x572.x, v572.y += x572.y;
                                }
                                return s572;
                            }
                        }
                        class e457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_frictionJoint), this.localAnchorA = new q451(), this.localAnchorB = new q451(), this.maxForce = 0, this.maxTorque = 0;
                            }
                            Initialize(l572, m572, n572) {
                                this.bodyA = l572, this.bodyB = m572, this.bodyA.GetLocalPoint(n572, this.localAnchorA), this.bodyB.GetLocalPoint(n572, this.localAnchorB);
                            }
                        }
                        class f457 extends z456 {
                            constructor(k572) {
                                super(k572), this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_linearImpulse = new q451(), this.m_angularImpulse = 0, this.m_maxForce = 0, this.m_maxTorque = 0, this.m_indexA = 0, this.m_indexB = 0, this.m_rA = new q451(), this.m_rB = new q451(), this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_linearMass = new t451(), this.m_angularMass = 0, this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_K = new t451(), this.m_localAnchorA.Copy(k572.localAnchorA), this.m_localAnchorB.Copy(k572.localAnchorB), this.m_linearImpulse.SetZero(), this.m_maxForce = o447(k572.maxForce, 0), this.m_maxTorque = o447(k572.maxTorque, 0), this.m_linearMass.SetZero();
                            }
                            InitVelocityConstraints(t571) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const u571 = t571.positions[this.m_indexA].a, v571 = t571.velocities[this.m_indexA].v;
                                let w571 = t571.velocities[this.m_indexA].w;
                                const x571 = t571.positions[this.m_indexB].a, y571 = t571.velocities[this.m_indexB].v;
                                let z571 = t571.velocities[this.m_indexB].w;
                                const a572 = this.m_qA.SetAngle(u571), b572 = this.m_qB.SetAngle(x571);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                const c572 = v451.MulRV(a572, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                const d572 = v451.MulRV(b572, this.m_lalcB, this.m_rB), e572 = this.m_invMassA, f572 = this.m_invMassB, g572 = this.m_invIA, h572 = this.m_invIB, i572 = this.m_K;
                                if (i572.ex.x = e572 + f572 + g572 * c572.y * c572.y + h572 * d572.y * d572.y, i572.ex.y = -g572 * c572.x * c572.y - h572 * d572.x * d572.y, i572.ey.x = i572.ex.y, i572.ey.y = e572 + f572 + g572 * c572.x * c572.x + h572 * d572.x * d572.x, i572.GetInverse(this.m_linearMass), this.m_angularMass = g572 + h572, this.m_angularMass > 0 && (this.m_angularMass = 1 / this.m_angularMass), t571.step.warmStarting) {
                                    this.m_linearImpulse.SelfMul(t571.step.dtRatio), this.m_angularImpulse *= t571.step.dtRatio;
                                    const j572 = this.m_linearImpulse;
                                    v571.SelfMulSub(e572, j572), w571 -= g572 * (q451.CrossVV(this.m_rA, j572) + this.m_angularImpulse), y571.SelfMulAdd(f572, j572), z571 += h572 * (q451.CrossVV(this.m_rB, j572) + this.m_angularImpulse);
                                }
                                else
                                    this.m_linearImpulse.SetZero(), this.m_angularImpulse = 0;
                                t571.velocities[this.m_indexA].w = w571, t571.velocities[this.m_indexB].w = z571;
                            }
                            SolveVelocityConstraints(b571) {
                                const c571 = b571.velocities[this.m_indexA].v;
                                let d571 = b571.velocities[this.m_indexA].w;
                                const e571 = b571.velocities[this.m_indexB].v;
                                let f571 = b571.velocities[this.m_indexB].w;
                                const g571 = this.m_invMassA, h571 = this.m_invMassB, i571 = this.m_invIA, j571 = this.m_invIB, k571 = b571.step.dt;
                                {
                                    const p571 = f571 - d571;
                                    let q571 = -this.m_angularMass * p571;
                                    const r571 = this.m_angularImpulse, s571 = k571 * this.m_maxTorque;
                                    this.m_angularImpulse = z447(this.m_angularImpulse + q571, -s571, s571), q571 = this.m_angularImpulse - r571, d571 -= i571 * q571, f571 += j571 * q571;
                                }
                                {
                                    const l571 = q451.SubVV(q451.AddVCrossSV(e571, f571, this.m_rB, q451.s_t0), q451.AddVCrossSV(c571, d571, this.m_rA, q451.s_t1), f457.SolveVelocityConstraints_s_Cdot_v2), m571 = t451.MulMV(this.m_linearMass, l571, f457.SolveVelocityConstraints_s_impulseV).SelfNeg(), n571 = f457.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);
                                    this.m_linearImpulse.SelfAdd(m571);
                                    const o571 = k571 * this.m_maxForce;
                                    this.m_linearImpulse.LengthSquared() > o571 * o571 && (this.m_linearImpulse.Normalize(), this.m_linearImpulse.SelfMul(o571)), q451.SubVV(this.m_linearImpulse, n571, m571), c571.SelfMulSub(g571, m571), d571 -= i571 * q451.CrossVV(this.m_rA, m571), e571.SelfMulAdd(h571, m571), f571 += j571 * q451.CrossVV(this.m_rB, m571);
                                }
                                b571.velocities[this.m_indexA].w = d571, b571.velocities[this.m_indexB].w = f571;
                            }
                            SolvePositionConstraints(a571) {
                                return !0;
                            }
                            GetAnchorA(z570) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, z570);
                            }
                            GetAnchorB(y570) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, y570);
                            }
                            GetReactionForce(w570, x570) {
                                return x570.x = w570 * this.m_linearImpulse.x, x570.y = w570 * this.m_linearImpulse.y, x570;
                            }
                            GetReactionTorque(v570) {
                                return v570 * this.m_angularImpulse;
                            }
                            GetLocalAnchorA() {
                                return this.m_localAnchorA;
                            }
                            GetLocalAnchorB() {
                                return this.m_localAnchorB;
                            }
                            SetMaxForce(u570) {
                                this.m_maxForce = u570;
                            }
                            GetMaxForce() {
                                return this.m_maxForce;
                            }
                            SetMaxTorque(t570) {
                                this.m_maxTorque = t570;
                            }
                            GetMaxTorque() {
                                return this.m_maxTorque;
                            }
                            Dump(q570) {
                                const r570 = this.m_bodyA.m_islandIndex, s570 = this.m_bodyB.m_islandIndex;
                                q570("  const jd: b2FrictionJointDef = new b2FrictionJointDef();\n"), q570("  jd.bodyA = bodies[%d];\n", r570), q570("  jd.bodyB = bodies[%d];\n", s570), q570("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), q570("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), q570("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), q570("  jd.maxForce = %.15f;\n", this.m_maxForce), q570("  jd.maxTorque = %.15f;\n", this.m_maxTorque), q570("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        f457.SolveVelocityConstraints_s_Cdot_v2 = new q451(), f457.SolveVelocityConstraints_s_impulseV = new q451(), f457.SolveVelocityConstraints_s_oldImpulseV = new q451();
                        class g457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_gearJoint), this.ratio = 1;
                            }
                        }
                        class h457 extends z456 {
                            constructor(x569) {
                                let y569, z569;
                                super(x569), this.m_typeA = m447.b2JointType.e_unknownJoint, this.m_typeB = m447.b2JointType.e_unknownJoint, this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_localAnchorC = new q451(), this.m_localAnchorD = new q451(), this.m_localAxisC = new q451(), this.m_localAxisD = new q451(), this.m_referenceAngleA = 0, this.m_referenceAngleB = 0, this.m_constant = 0, this.m_ratio = 0, this.m_impulse = 0, this.m_indexA = 0, this.m_indexB = 0, this.m_indexC = 0, this.m_indexD = 0, this.m_lcA = new q451(), this.m_lcB = new q451(), this.m_lcC = new q451(), this.m_lcD = new q451(), this.m_mA = 0, this.m_mB = 0, this.m_mC = 0, this.m_mD = 0, this.m_iA = 0, this.m_iB = 0, this.m_iC = 0, this.m_iD = 0, this.m_JvAC = new q451(), this.m_JvBD = new q451(), this.m_JwA = 0, this.m_JwB = 0, this.m_JwC = 0, this.m_JwD = 0, this.m_mass = 0, this.m_qA = new v451(), this.m_qB = new v451(), this.m_qC = new v451(), this.m_qD = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_lalcC = new q451(), this.m_lalcD = new q451(), this.m_joint1 = x569.joint1, this.m_joint2 = x569.joint2, this.m_typeA = this.m_joint1.GetType(), this.m_typeB = this.m_joint2.GetType(), this.m_bodyC = this.m_joint1.GetBodyA(), this.m_bodyA = this.m_joint1.GetBodyB();
                                const a570 = this.m_bodyA.m_xf, b570 = this.m_bodyA.m_sweep.a, c570 = this.m_bodyC.m_xf, d570 = this.m_bodyC.m_sweep.a;
                                if (this.m_typeA === m447.b2JointType.e_revoluteJoint) {
                                    const p570 = x569.joint1;
                                    this.m_localAnchorC.Copy(p570.m_localAnchorA), this.m_localAnchorA.Copy(p570.m_localAnchorB), this.m_referenceAngleA = p570.m_referenceAngle, this.m_localAxisC.SetZero(), y569 = b570 - d570 - this.m_referenceAngleA;
                                }
                                else {
                                    const m570 = x569.joint1;
                                    this.m_localAnchorC.Copy(m570.m_localAnchorA), this.m_localAnchorA.Copy(m570.m_localAnchorB), this.m_referenceAngleA = m570.m_referenceAngle, this.m_localAxisC.Copy(m570.m_localXAxisA);
                                    const n570 = this.m_localAnchorC, o570 = v451.MulTRV(c570.q, q451.AddVV(v451.MulRV(a570.q, this.m_localAnchorA, q451.s_t0), q451.SubVV(a570.p, c570.p, q451.s_t1), q451.s_t0), q451.s_t0);
                                    y569 = q451.DotVV(q451.SubVV(o570, n570, q451.s_t0), this.m_localAxisC);
                                }
                                this.m_bodyD = this.m_joint2.GetBodyA(), this.m_bodyB = this.m_joint2.GetBodyB();
                                const e570 = this.m_bodyB.m_xf, f570 = this.m_bodyB.m_sweep.a, g570 = this.m_bodyD.m_xf, h570 = this.m_bodyD.m_sweep.a;
                                if (this.m_typeB === m447.b2JointType.e_revoluteJoint) {
                                    const l570 = x569.joint2;
                                    this.m_localAnchorD.Copy(l570.m_localAnchorA), this.m_localAnchorB.Copy(l570.m_localAnchorB), this.m_referenceAngleB = l570.m_referenceAngle, this.m_localAxisD.SetZero(), z569 = f570 - h570 - this.m_referenceAngleB;
                                }
                                else {
                                    const i570 = x569.joint2;
                                    this.m_localAnchorD.Copy(i570.m_localAnchorA), this.m_localAnchorB.Copy(i570.m_localAnchorB), this.m_referenceAngleB = i570.m_referenceAngle, this.m_localAxisD.Copy(i570.m_localXAxisA);
                                    const j570 = this.m_localAnchorD, k570 = v451.MulTRV(g570.q, q451.AddVV(v451.MulRV(e570.q, this.m_localAnchorB, q451.s_t0), q451.SubVV(e570.p, g570.p, q451.s_t1), q451.s_t0), q451.s_t0);
                                    z569 = q451.DotVV(q451.SubVV(k570, j570, q451.s_t0), this.m_localAxisD);
                                }
                                this.m_ratio = o447(x569.ratio, 1), this.m_constant = y569 + this.m_ratio * z569, this.m_impulse = 0;
                            }
                            InitVelocityConstraints(a569) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_indexC = this.m_bodyC.m_islandIndex, this.m_indexD = this.m_bodyD.m_islandIndex, this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter), this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter), this.m_mA = this.m_bodyA.m_invMass, this.m_mB = this.m_bodyB.m_invMass, this.m_mC = this.m_bodyC.m_invMass, this.m_mD = this.m_bodyD.m_invMass, this.m_iA = this.m_bodyA.m_invI, this.m_iB = this.m_bodyB.m_invI, this.m_iC = this.m_bodyC.m_invI, this.m_iD = this.m_bodyD.m_invI;
                                const b569 = a569.positions[this.m_indexA].a, c569 = a569.velocities[this.m_indexA].v;
                                let d569 = a569.velocities[this.m_indexA].w;
                                const e569 = a569.positions[this.m_indexB].a, f569 = a569.velocities[this.m_indexB].v;
                                let g569 = a569.velocities[this.m_indexB].w;
                                const h569 = a569.positions[this.m_indexC].a, i569 = a569.velocities[this.m_indexC].v;
                                let j569 = a569.velocities[this.m_indexC].w;
                                const k569 = a569.positions[this.m_indexD].a, l569 = a569.velocities[this.m_indexD].v;
                                let m569 = a569.velocities[this.m_indexD].w;
                                const n569 = this.m_qA.SetAngle(b569), o569 = this.m_qB.SetAngle(e569), p569 = this.m_qC.SetAngle(h569), q569 = this.m_qD.SetAngle(k569);
                                if (this.m_mass = 0, this.m_typeA === m447.b2JointType.e_revoluteJoint)
                                    this.m_JvAC.SetZero(), this.m_JwA = 1, this.m_JwC = 1, this.m_mass += this.m_iA + this.m_iC;
                                else {
                                    const u569 = v451.MulRV(p569, this.m_localAxisC, h457.InitVelocityConstraints_s_u);
                                    q451.SubVV(this.m_localAnchorC, this.m_lcC, this.m_lalcC);
                                    const v569 = v451.MulRV(p569, this.m_lalcC, h457.InitVelocityConstraints_s_rC);
                                    q451.SubVV(this.m_localAnchorA, this.m_lcA, this.m_lalcA);
                                    const w569 = v451.MulRV(n569, this.m_lalcA, h457.InitVelocityConstraints_s_rA);
                                    this.m_JvAC.Copy(u569), this.m_JwC = q451.CrossVV(v569, u569), this.m_JwA = q451.CrossVV(w569, u569), this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;
                                }
                                if (this.m_typeB === m447.b2JointType.e_revoluteJoint)
                                    this.m_JvBD.SetZero(), this.m_JwB = this.m_ratio, this.m_JwD = this.m_ratio, this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);
                                else {
                                    const r569 = v451.MulRV(q569, this.m_localAxisD, h457.InitVelocityConstraints_s_u);
                                    q451.SubVV(this.m_localAnchorD, this.m_lcD, this.m_lalcD);
                                    const s569 = v451.MulRV(q569, this.m_lalcD, h457.InitVelocityConstraints_s_rD);
                                    q451.SubVV(this.m_localAnchorB, this.m_lcB, this.m_lalcB);
                                    const t569 = v451.MulRV(o569, this.m_lalcB, h457.InitVelocityConstraints_s_rB);
                                    q451.MulSV(this.m_ratio, r569, this.m_JvBD), this.m_JwD = this.m_ratio * q451.CrossVV(s569, r569), this.m_JwB = this.m_ratio * q451.CrossVV(t569, r569), this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;
                                }
                                this.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0, a569.step.warmStarting ? (c569.SelfMulAdd(this.m_mA * this.m_impulse, this.m_JvAC), d569 += this.m_iA * this.m_impulse * this.m_JwA, f569.SelfMulAdd(this.m_mB * this.m_impulse, this.m_JvBD), g569 += this.m_iB * this.m_impulse * this.m_JwB, i569.SelfMulSub(this.m_mC * this.m_impulse, this.m_JvAC), j569 -= this.m_iC * this.m_impulse * this.m_JwC, l569.SelfMulSub(this.m_mD * this.m_impulse, this.m_JvBD), m569 -= this.m_iD * this.m_impulse * this.m_JwD) : this.m_impulse = 0, a569.velocities[this.m_indexA].w = d569, a569.velocities[this.m_indexB].w = g569, a569.velocities[this.m_indexC].w = j569, a569.velocities[this.m_indexD].w = m569;
                            }
                            SolveVelocityConstraints(p568) {
                                const q568 = p568.velocities[this.m_indexA].v;
                                let r568 = p568.velocities[this.m_indexA].w;
                                const s568 = p568.velocities[this.m_indexB].v;
                                let t568 = p568.velocities[this.m_indexB].w;
                                const u568 = p568.velocities[this.m_indexC].v;
                                let v568 = p568.velocities[this.m_indexC].w;
                                const w568 = p568.velocities[this.m_indexD].v;
                                let x568 = p568.velocities[this.m_indexD].w, y568 = q451.DotVV(this.m_JvAC, q451.SubVV(q568, u568, q451.s_t0)) + q451.DotVV(this.m_JvBD, q451.SubVV(s568, w568, q451.s_t0));
                                y568 += this.m_JwA * r568 - this.m_JwC * v568 + (this.m_JwB * t568 - this.m_JwD * x568);
                                const z568 = -this.m_mass * y568;
                                this.m_impulse += z568, q568.SelfMulAdd(this.m_mA * z568, this.m_JvAC), r568 += this.m_iA * z568 * this.m_JwA, s568.SelfMulAdd(this.m_mB * z568, this.m_JvBD), t568 += this.m_iB * z568 * this.m_JwB, u568.SelfMulSub(this.m_mC * z568, this.m_JvAC), v568 -= this.m_iC * z568 * this.m_JwC, w568.SelfMulSub(this.m_mD * z568, this.m_JvBD), x568 -= this.m_iD * z568 * this.m_JwD, p568.velocities[this.m_indexA].w = r568, p568.velocities[this.m_indexB].w = t568, p568.velocities[this.m_indexC].w = v568, p568.velocities[this.m_indexD].w = x568;
                            }
                            SolvePositionConstraints(g567) {
                                const h567 = g567.positions[this.m_indexA].c;
                                let i567 = g567.positions[this.m_indexA].a;
                                const j567 = g567.positions[this.m_indexB].c;
                                let k567 = g567.positions[this.m_indexB].a;
                                const l567 = g567.positions[this.m_indexC].c;
                                let m567 = g567.positions[this.m_indexC].a;
                                const n567 = g567.positions[this.m_indexD].c;
                                let o567 = g567.positions[this.m_indexD].a;
                                const p567 = this.m_qA.SetAngle(i567), q567 = this.m_qB.SetAngle(k567), r567 = this.m_qC.SetAngle(m567), s567 = this.m_qD.SetAngle(o567), t567 = 0;
                                let u567, v567;
                                const w567 = this.m_JvAC, x567 = this.m_JvBD;
                                let y567, z567, a568, b568, c568 = 0;
                                if (this.m_typeA === m447.b2JointType.e_revoluteJoint)
                                    w567.SetZero(), y567 = 1, a568 = 1, c568 += this.m_iA + this.m_iC, u567 = i567 - m567 - this.m_referenceAngleA;
                                else {
                                    const k568 = v451.MulRV(r567, this.m_localAxisC, h457.SolvePositionConstraints_s_u), l568 = v451.MulRV(r567, this.m_lalcC, h457.SolvePositionConstraints_s_rC), m568 = v451.MulRV(p567, this.m_lalcA, h457.SolvePositionConstraints_s_rA);
                                    w567.Copy(k568), a568 = q451.CrossVV(l568, k568), y567 = q451.CrossVV(m568, k568), c568 += this.m_mC + this.m_mA + this.m_iC * a568 * a568 + this.m_iA * y567 * y567;
                                    const n568 = this.m_lalcC, o568 = v451.MulTRV(r567, q451.AddVV(m568, q451.SubVV(h567, l567, q451.s_t0), q451.s_t0), q451.s_t0);
                                    u567 = q451.DotVV(q451.SubVV(o568, n568, q451.s_t0), this.m_localAxisC);
                                }
                                if (this.m_typeB === m447.b2JointType.e_revoluteJoint)
                                    x567.SetZero(), z567 = this.m_ratio, b568 = this.m_ratio, c568 += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD), v567 = k567 - o567 - this.m_referenceAngleB;
                                else {
                                    const f568 = v451.MulRV(s567, this.m_localAxisD, h457.SolvePositionConstraints_s_u), g568 = v451.MulRV(s567, this.m_lalcD, h457.SolvePositionConstraints_s_rD), h568 = v451.MulRV(q567, this.m_lalcB, h457.SolvePositionConstraints_s_rB);
                                    q451.MulSV(this.m_ratio, f568, x567), b568 = this.m_ratio * q451.CrossVV(g568, f568), z567 = this.m_ratio * q451.CrossVV(h568, f568), c568 += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * b568 * b568 + this.m_iB * z567 * z567;
                                    const i568 = this.m_lalcD, j568 = v451.MulTRV(s567, q451.AddVV(h568, q451.SubVV(j567, n567, q451.s_t0), q451.s_t0), q451.s_t0);
                                    v567 = q451.DotVV(q451.SubVV(j568, i568, q451.s_t0), this.m_localAxisD);
                                }
                                const d568 = u567 + this.m_ratio * v567 - this.m_constant;
                                let e568 = 0;
                                return c568 > 0 && (e568 = -d568 / c568), h567.SelfMulAdd(this.m_mA * e568, w567), i567 += this.m_iA * e568 * y567, j567.SelfMulAdd(this.m_mB * e568, x567), k567 += this.m_iB * e568 * z567, l567.SelfMulSub(this.m_mC * e568, w567), m567 -= this.m_iC * e568 * a568, n567.SelfMulSub(this.m_mD * e568, x567), o567 -= this.m_iD * e568 * b568, g567.positions[this.m_indexA].a = i567, g567.positions[this.m_indexB].a = k567, g567.positions[this.m_indexC].a = m567, g567.positions[this.m_indexD].a = o567, t567 < z449;
                            }
                            GetAnchorA(f567) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, f567);
                            }
                            GetAnchorB(e567) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, e567);
                            }
                            GetReactionForce(c567, d567) {
                                return q451.MulSV(c567 * this.m_impulse, this.m_JvAC, d567);
                            }
                            GetReactionTorque(b567) {
                                return b567 * this.m_impulse * this.m_JwA;
                            }
                            GetJoint1() {
                                return this.m_joint1;
                            }
                            GetJoint2() {
                                return this.m_joint2;
                            }
                            GetRatio() {
                                return this.m_ratio;
                            }
                            SetRatio(a567) {
                                this.m_ratio = a567;
                            }
                            Dump(v566) {
                                const w566 = this.m_bodyA.m_islandIndex, x566 = this.m_bodyB.m_islandIndex, y566 = this.m_joint1.m_index, z566 = this.m_joint2.m_index;
                                v566("  const jd: b2GearJointDef = new b2GearJointDef();\n"), v566("  jd.bodyA = bodies[%d];\n", w566), v566("  jd.bodyB = bodies[%d];\n", x566), v566("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), v566("  jd.joint1 = joints[%d];\n", y566), v566("  jd.joint2 = joints[%d];\n", z566), v566("  jd.ratio = %.15f;\n", this.m_ratio), v566("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        h457.InitVelocityConstraints_s_u = new q451(), h457.InitVelocityConstraints_s_rA = new q451(), h457.InitVelocityConstraints_s_rB = new q451(), h457.InitVelocityConstraints_s_rC = new q451(), h457.InitVelocityConstraints_s_rD = new q451(), h457.SolvePositionConstraints_s_u = new q451(), h457.SolvePositionConstraints_s_rA = new q451(), h457.SolvePositionConstraints_s_rB = new q451(), h457.SolvePositionConstraints_s_rC = new q451(), h457.SolvePositionConstraints_s_rD = new q451();
                        class i457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_motorJoint), this.linearOffset = new q451(0, 0), this.angularOffset = 0, this.maxForce = 1, this.maxTorque = 1, this.correctionFactor = .3;
                            }
                            Initialize(r566, s566) {
                                this.bodyA = r566, this.bodyB = s566, this.bodyA.GetLocalPoint(this.bodyB.GetPosition(), this.linearOffset);
                                const t566 = this.bodyA.GetAngle(), u566 = this.bodyB.GetAngle();
                                this.angularOffset = u566 - t566;
                            }
                        }
                        class j457 extends z456 {
                            constructor(q566) {
                                super(q566), this.m_linearOffset = new q451(), this.m_angularOffset = 0, this.m_linearImpulse = new q451(), this.m_angularImpulse = 0, this.m_maxForce = 0, this.m_maxTorque = 0, this.m_correctionFactor = .3, this.m_indexA = 0, this.m_indexB = 0, this.m_rA = new q451(), this.m_rB = new q451(), this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_linearError = new q451(), this.m_angularError = 0, this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_linearMass = new t451(), this.m_angularMass = 0, this.m_qA = new v451(), this.m_qB = new v451(), this.m_K = new t451(), this.m_linearOffset.Copy(o447(q566.linearOffset, q451.ZERO)), this.m_linearImpulse.SetZero(), this.m_maxForce = o447(q566.maxForce, 0), this.m_maxTorque = o447(q566.maxTorque, 0), this.m_correctionFactor = o447(q566.correctionFactor, .3);
                            }
                            GetAnchorA(o566) {
                                const p566 = this.m_bodyA.GetPosition();
                                return o566.x = p566.x, o566.y = p566.y, o566;
                            }
                            GetAnchorB(m566) {
                                const n566 = this.m_bodyB.GetPosition();
                                return m566.x = n566.x, m566.y = n566.y, m566;
                            }
                            GetReactionForce(k566, l566) {
                                return q451.MulSV(k566, this.m_linearImpulse, l566);
                            }
                            GetReactionTorque(j566) {
                                return j566 * this.m_angularImpulse;
                            }
                            SetLinearOffset(i566) {
                                q451.IsEqualToV(i566, this.m_linearOffset) || (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_linearOffset.Copy(i566));
                            }
                            GetLinearOffset() {
                                return this.m_linearOffset;
                            }
                            SetAngularOffset(h566) {
                                h566 !== this.m_angularOffset && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_angularOffset = h566);
                            }
                            GetAngularOffset() {
                                return this.m_angularOffset;
                            }
                            SetMaxForce(g566) {
                                this.m_maxForce = g566;
                            }
                            GetMaxForce() {
                                return this.m_maxForce;
                            }
                            SetMaxTorque(f566) {
                                this.m_maxTorque = f566;
                            }
                            GetMaxTorque() {
                                return this.m_maxTorque;
                            }
                            InitVelocityConstraints(m565) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const n565 = m565.positions[this.m_indexA].c, o565 = m565.positions[this.m_indexA].a, p565 = m565.velocities[this.m_indexA].v;
                                let q565 = m565.velocities[this.m_indexA].w;
                                const r565 = m565.positions[this.m_indexB].c, s565 = m565.positions[this.m_indexB].a, t565 = m565.velocities[this.m_indexB].v;
                                let u565 = m565.velocities[this.m_indexB].w;
                                const v565 = this.m_qA.SetAngle(o565), w565 = this.m_qB.SetAngle(s565), x565 = v451.MulRV(v565, q451.SubVV(this.m_linearOffset, this.m_localCenterA, q451.s_t0), this.m_rA), y565 = v451.MulRV(w565, q451.NegV(this.m_localCenterB, q451.s_t0), this.m_rB), z565 = this.m_invMassA, a566 = this.m_invMassB, b566 = this.m_invIA, c566 = this.m_invIB, d566 = this.m_K;
                                if (d566.ex.x = z565 + a566 + b566 * x565.y * x565.y + c566 * y565.y * y565.y, d566.ex.y = -b566 * x565.x * x565.y - c566 * y565.x * y565.y, d566.ey.x = d566.ex.y, d566.ey.y = z565 + a566 + b566 * x565.x * x565.x + c566 * y565.x * y565.x, d566.GetInverse(this.m_linearMass), this.m_angularMass = b566 + c566, this.m_angularMass > 0 && (this.m_angularMass = 1 / this.m_angularMass), q451.SubVV(q451.AddVV(r565, y565, q451.s_t0), q451.AddVV(n565, x565, q451.s_t1), this.m_linearError), this.m_angularError = s565 - o565 - this.m_angularOffset, m565.step.warmStarting) {
                                    this.m_linearImpulse.SelfMul(m565.step.dtRatio), this.m_angularImpulse *= m565.step.dtRatio;
                                    const e566 = this.m_linearImpulse;
                                    p565.SelfMulSub(z565, e566), q565 -= b566 * (q451.CrossVV(x565, e566) + this.m_angularImpulse), t565.SelfMulAdd(a566, e566), u565 += c566 * (q451.CrossVV(y565, e566) + this.m_angularImpulse);
                                }
                                else
                                    this.m_linearImpulse.SetZero(), this.m_angularImpulse = 0;
                                m565.velocities[this.m_indexA].w = q565, m565.velocities[this.m_indexB].w = u565;
                            }
                            SolveVelocityConstraints(r564) {
                                const s564 = r564.velocities[this.m_indexA].v;
                                let t564 = r564.velocities[this.m_indexA].w;
                                const u564 = r564.velocities[this.m_indexB].v;
                                let v564 = r564.velocities[this.m_indexB].w;
                                const w564 = this.m_invMassA, x564 = this.m_invMassB, y564 = this.m_invIA, z564 = this.m_invIB, a565 = r564.step.dt, b565 = r564.step.inv_dt;
                                {
                                    const i565 = v564 - t564 + b565 * this.m_correctionFactor * this.m_angularError;
                                    let j565 = -this.m_angularMass * i565;
                                    const k565 = this.m_angularImpulse, l565 = a565 * this.m_maxTorque;
                                    this.m_angularImpulse = z447(this.m_angularImpulse + j565, -l565, l565), j565 = this.m_angularImpulse - k565, t564 -= y564 * j565, v564 += z564 * j565;
                                }
                                {
                                    const c565 = this.m_rA, d565 = this.m_rB, e565 = q451.AddVV(q451.SubVV(q451.AddVV(u564, q451.CrossSV(v564, d565, q451.s_t0), q451.s_t0), q451.AddVV(s564, q451.CrossSV(t564, c565, q451.s_t1), q451.s_t1), q451.s_t2), q451.MulSV(b565 * this.m_correctionFactor, this.m_linearError, q451.s_t3), j457.SolveVelocityConstraints_s_Cdot_v2), f565 = t451.MulMV(this.m_linearMass, e565, j457.SolveVelocityConstraints_s_impulse_v2).SelfNeg(), g565 = j457.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);
                                    this.m_linearImpulse.SelfAdd(f565);
                                    const h565 = a565 * this.m_maxForce;
                                    this.m_linearImpulse.LengthSquared() > h565 * h565 && (this.m_linearImpulse.Normalize(), this.m_linearImpulse.SelfMul(h565)), q451.SubVV(this.m_linearImpulse, g565, f565), s564.SelfMulSub(w564, f565), t564 -= y564 * q451.CrossVV(c565, f565), u564.SelfMulAdd(x564, f565), v564 += z564 * q451.CrossVV(d565, f565);
                                }
                                r564.velocities[this.m_indexA].w = t564, r564.velocities[this.m_indexB].w = v564;
                            }
                            SolvePositionConstraints(q564) {
                                return !0;
                            }
                            Dump(n564) {
                                const o564 = this.m_bodyA.m_islandIndex, p564 = this.m_bodyB.m_islandIndex;
                                n564("  const jd: b2MotorJointDef = new b2MotorJointDef();\n"), n564("  jd.bodyA = bodies[%d];\n", o564), n564("  jd.bodyB = bodies[%d];\n", p564), n564("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), n564("  jd.linearOffset.Set(%.15f, %.15f);\n", this.m_linearOffset.x, this.m_linearOffset.y), n564("  jd.angularOffset = %.15f;\n", this.m_angularOffset), n564("  jd.maxForce = %.15f;\n", this.m_maxForce), n564("  jd.maxTorque = %.15f;\n", this.m_maxTorque), n564("  jd.correctionFactor = %.15f;\n", this.m_correctionFactor), n564("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        j457.SolveVelocityConstraints_s_Cdot_v2 = new q451(), j457.SolveVelocityConstraints_s_impulse_v2 = new q451(), j457.SolveVelocityConstraints_s_oldImpulse_v2 = new q451();
                        class k457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_mouseJoint), this.target = new q451(), this.maxForce = 0, this.frequencyHz = 5, this.dampingRatio = .7;
                            }
                        }
                        class l457 extends z456 {
                            constructor(m564) {
                                super(m564), this.m_localAnchorB = new q451(), this.m_targetA = new q451(), this.m_frequencyHz = 0, this.m_dampingRatio = 0, this.m_beta = 0, this.m_impulse = new q451(), this.m_maxForce = 0, this.m_gamma = 0, this.m_indexA = 0, this.m_indexB = 0, this.m_rB = new q451(), this.m_localCenterB = new q451(), this.m_invMassB = 0, this.m_invIB = 0, this.m_mass = new t451(), this.m_C = new q451(), this.m_qB = new v451(), this.m_lalcB = new q451(), this.m_K = new t451(), this.m_targetA.Copy(o447(m564.target, q451.ZERO)), w451.MulTXV(this.m_bodyB.GetTransform(), this.m_targetA, this.m_localAnchorB), this.m_maxForce = o447(m564.maxForce, 0), this.m_impulse.SetZero(), this.m_frequencyHz = o447(m564.frequencyHz, 0), this.m_dampingRatio = o447(m564.dampingRatio, 0), this.m_beta = 0, this.m_gamma = 0;
                            }
                            SetTarget(l564) {
                                this.m_bodyB.IsAwake() || this.m_bodyB.SetAwake(!0), this.m_targetA.Copy(l564);
                            }
                            GetTarget() {
                                return this.m_targetA;
                            }
                            SetMaxForce(k564) {
                                this.m_maxForce = k564;
                            }
                            GetMaxForce() {
                                return this.m_maxForce;
                            }
                            SetFrequency(j564) {
                                this.m_frequencyHz = j564;
                            }
                            GetFrequency() {
                                return this.m_frequencyHz;
                            }
                            SetDampingRatio(i564) {
                                this.m_dampingRatio = i564;
                            }
                            GetDampingRatio() {
                                return this.m_dampingRatio;
                            }
                            InitVelocityConstraints(w563) {
                                this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIB = this.m_bodyB.m_invI;
                                const x563 = w563.positions[this.m_indexB].c, y563 = w563.positions[this.m_indexB].a, z563 = w563.velocities[this.m_indexB].v;
                                let a564 = w563.velocities[this.m_indexB].w;
                                const b564 = this.m_qB.SetAngle(y563), c564 = this.m_bodyB.GetMass(), d564 = 2 * u449 * this.m_frequencyHz, e564 = 2 * c564 * this.m_dampingRatio * d564, f564 = c564 * d564 * d564, g564 = w563.step.dt;
                                this.m_gamma = g564 * (e564 + g564 * f564), 0 !== this.m_gamma && (this.m_gamma = 1 / this.m_gamma), this.m_beta = g564 * f564 * this.m_gamma, q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB), v451.MulRV(b564, this.m_lalcB, this.m_rB);
                                const h564 = this.m_K;
                                h564.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma, h564.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y, h564.ey.x = h564.ex.y, h564.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma, h564.GetInverse(this.m_mass), this.m_C.x = x563.x + this.m_rB.x - this.m_targetA.x, this.m_C.y = x563.y + this.m_rB.y - this.m_targetA.y, this.m_C.SelfMul(this.m_beta), a564 *= .98, w563.step.warmStarting ? (this.m_impulse.SelfMul(w563.step.dtRatio), z563.x += this.m_invMassB * this.m_impulse.x, z563.y += this.m_invMassB * this.m_impulse.y, a564 += this.m_invIB * q451.CrossVV(this.m_rB, this.m_impulse)) : this.m_impulse.SetZero(), w563.velocities[this.m_indexB].w = a564;
                            }
                            SolveVelocityConstraints(p563) {
                                const q563 = p563.velocities[this.m_indexB].v;
                                let r563 = p563.velocities[this.m_indexB].w;
                                const s563 = q451.AddVCrossSV(q563, r563, this.m_rB, l457.SolveVelocityConstraints_s_Cdot), t563 = t451.MulMV(this.m_mass, q451.AddVV(s563, q451.AddVV(this.m_C, q451.MulSV(this.m_gamma, this.m_impulse, q451.s_t0), q451.s_t0), q451.s_t0).SelfNeg(), l457.SolveVelocityConstraints_s_impulse), u563 = l457.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);
                                this.m_impulse.SelfAdd(t563);
                                const v563 = p563.step.dt * this.m_maxForce;
                                this.m_impulse.LengthSquared() > v563 * v563 && this.m_impulse.SelfMul(v563 / this.m_impulse.Length()), q451.SubVV(this.m_impulse, u563, t563), q563.SelfMulAdd(this.m_invMassB, t563), r563 += this.m_invIB * q451.CrossVV(this.m_rB, t563), p563.velocities[this.m_indexB].w = r563;
                            }
                            SolvePositionConstraints(o563) {
                                return !0;
                            }
                            GetAnchorA(n563) {
                                return n563.x = this.m_targetA.x, n563.y = this.m_targetA.y, n563;
                            }
                            GetAnchorB(m563) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, m563);
                            }
                            GetReactionForce(k563, l563) {
                                return q451.MulSV(k563, this.m_impulse, l563);
                            }
                            GetReactionTorque(j563) {
                                return 0;
                            }
                            Dump(i563) {
                                i563("Mouse joint dumping is not supported.\n");
                            }
                            ShiftOrigin(h563) {
                                this.m_targetA.SelfSub(h563);
                            }
                        }
                        l457.SolveVelocityConstraints_s_Cdot = new q451(), l457.SolveVelocityConstraints_s_impulse = new q451(), l457.SolveVelocityConstraints_s_oldImpulse = new q451();
                        class m457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_prismaticJoint), this.localAnchorA = new q451(), this.localAnchorB = new q451(), this.localAxisA = new q451(1, 0), this.referenceAngle = 0, this.enableLimit = !1, this.lowerTranslation = 0, this.upperTranslation = 0, this.enableMotor = !1, this.maxMotorForce = 0, this.motorSpeed = 0;
                            }
                            Initialize(d563, e563, f563, g563) {
                                this.bodyA = d563, this.bodyB = e563, this.bodyA.GetLocalPoint(f563, this.localAnchorA), this.bodyB.GetLocalPoint(f563, this.localAnchorB), this.bodyA.GetLocalVector(g563, this.localAxisA), this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
                            }
                        }
                        class n457 extends z456 {
                            constructor(c563) {
                                super(c563), this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_localXAxisA = new q451(), this.m_localYAxisA = new q451(), this.m_referenceAngle = 0, this.m_impulse = new s451(0, 0, 0), this.m_motorImpulse = 0, this.m_lowerTranslation = 0, this.m_upperTranslation = 0, this.m_maxMotorForce = 0, this.m_motorSpeed = 0, this.m_enableLimit = !1, this.m_enableMotor = !1, this.m_limitState = m447.b2LimitState.e_inactiveLimit, this.m_indexA = 0, this.m_indexB = 0, this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_axis = new q451(0, 0), this.m_perp = new q451(0, 0), this.m_s1 = 0, this.m_s2 = 0, this.m_a1 = 0, this.m_a2 = 0, this.m_K = new u451(), this.m_K3 = new u451(), this.m_K2 = new t451(), this.m_motorMass = 0, this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_rA = new q451(), this.m_rB = new q451(), this.m_localAnchorA.Copy(o447(c563.localAnchorA, q451.ZERO)), this.m_localAnchorB.Copy(o447(c563.localAnchorB, q451.ZERO)), this.m_localXAxisA.Copy(o447(c563.localAxisA, new q451(1, 0))).SelfNormalize(), q451.CrossOneV(this.m_localXAxisA, this.m_localYAxisA), this.m_referenceAngle = o447(c563.referenceAngle, 0), this.m_lowerTranslation = o447(c563.lowerTranslation, 0), this.m_upperTranslation = o447(c563.upperTranslation, 0), this.m_maxMotorForce = o447(c563.maxMotorForce, 0), this.m_motorSpeed = o447(c563.motorSpeed, 0), this.m_enableLimit = o447(c563.enableLimit, !1), this.m_enableMotor = o447(c563.enableMotor, !1);
                            }
                            InitVelocityConstraints(g562) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const h562 = g562.positions[this.m_indexA].c, i562 = g562.positions[this.m_indexA].a, j562 = g562.velocities[this.m_indexA].v;
                                let k562 = g562.velocities[this.m_indexA].w;
                                const l562 = g562.positions[this.m_indexB].c, m562 = g562.positions[this.m_indexB].a, n562 = g562.velocities[this.m_indexB].v;
                                let o562 = g562.velocities[this.m_indexB].w;
                                const p562 = this.m_qA.SetAngle(i562), q562 = this.m_qB.SetAngle(m562);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                const r562 = v451.MulRV(p562, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                const s562 = v451.MulRV(q562, this.m_lalcB, this.m_rB), t562 = q451.AddVV(q451.SubVV(l562, h562, q451.s_t0), q451.SubVV(s562, r562, q451.s_t1), n457.InitVelocityConstraints_s_d), u562 = this.m_invMassA, v562 = this.m_invMassB, w562 = this.m_invIA, x562 = this.m_invIB;
                                if (v451.MulRV(p562, this.m_localXAxisA, this.m_axis), this.m_a1 = q451.CrossVV(q451.AddVV(t562, r562, q451.s_t0), this.m_axis), this.m_a2 = q451.CrossVV(s562, this.m_axis), this.m_motorMass = u562 + v562 + w562 * this.m_a1 * this.m_a1 + x562 * this.m_a2 * this.m_a2, this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass), v451.MulRV(p562, this.m_localYAxisA, this.m_perp), this.m_s1 = q451.CrossVV(q451.AddVV(t562, r562, q451.s_t0), this.m_perp), this.m_s2 = q451.CrossVV(s562, this.m_perp), this.m_K.ex.x = u562 + v562 + w562 * this.m_s1 * this.m_s1 + x562 * this.m_s2 * this.m_s2, this.m_K.ex.y = w562 * this.m_s1 + x562 * this.m_s2, this.m_K.ex.z = w562 * this.m_s1 * this.m_a1 + x562 * this.m_s2 * this.m_a2, this.m_K.ey.x = this.m_K.ex.y, this.m_K.ey.y = w562 + x562, 0 === this.m_K.ey.y && (this.m_K.ey.y = 1), this.m_K.ey.z = w562 * this.m_a1 + x562 * this.m_a2, this.m_K.ez.x = this.m_K.ex.z, this.m_K.ez.y = this.m_K.ey.z, this.m_K.ez.z = u562 + v562 + w562 * this.m_a1 * this.m_a1 + x562 * this.m_a2 * this.m_a2, this.m_enableLimit) {
                                    const b563 = q451.DotVV(this.m_axis, t562);
                                    h451(this.m_upperTranslation - this.m_lowerTranslation) < 2 * z449 ? this.m_limitState = m447.b2LimitState.e_equalLimits : b563 <= this.m_lowerTranslation ? this.m_limitState !== m447.b2LimitState.e_atLowerLimit && (this.m_limitState = m447.b2LimitState.e_atLowerLimit, this.m_impulse.z = 0) : b563 >= this.m_upperTranslation ? this.m_limitState !== m447.b2LimitState.e_atUpperLimit && (this.m_limitState = m447.b2LimitState.e_atUpperLimit, this.m_impulse.z = 0) : (this.m_limitState = m447.b2LimitState.e_inactiveLimit, this.m_impulse.z = 0);
                                }
                                else
                                    this.m_limitState = m447.b2LimitState.e_inactiveLimit, this.m_impulse.z = 0;
                                if (this.m_enableMotor || (this.m_motorImpulse = 0), g562.step.warmStarting) {
                                    this.m_impulse.SelfMul(g562.step.dtRatio), this.m_motorImpulse *= g562.step.dtRatio;
                                    const y562 = q451.AddVV(q451.MulSV(this.m_impulse.x, this.m_perp, q451.s_t0), q451.MulSV(this.m_motorImpulse + this.m_impulse.z, this.m_axis, q451.s_t1), n457.InitVelocityConstraints_s_P), z562 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1, a563 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
                                    j562.SelfMulSub(u562, y562), k562 -= w562 * z562, n562.SelfMulAdd(v562, y562), o562 += x562 * a563;
                                }
                                else
                                    this.m_impulse.SetZero(), this.m_motorImpulse = 0;
                                g562.velocities[this.m_indexA].w = k562, g562.velocities[this.m_indexB].w = o562;
                            }
                            SolveVelocityConstraints(b561) {
                                const c561 = b561.velocities[this.m_indexA].v;
                                let d561 = b561.velocities[this.m_indexA].w;
                                const e561 = b561.velocities[this.m_indexB].v;
                                let f561 = b561.velocities[this.m_indexB].w;
                                const g561 = this.m_invMassA, h561 = this.m_invMassB, i561 = this.m_invIA, j561 = this.m_invIB;
                                if (this.m_enableMotor && this.m_limitState !== m447.b2LimitState.e_equalLimits) {
                                    const z561 = q451.DotVV(this.m_axis, q451.SubVV(e561, c561, q451.s_t0)) + this.m_a2 * f561 - this.m_a1 * d561;
                                    let a562 = this.m_motorMass * (this.m_motorSpeed - z561);
                                    const b562 = this.m_motorImpulse, c562 = b561.step.dt * this.m_maxMotorForce;
                                    this.m_motorImpulse = z447(this.m_motorImpulse + a562, -c562, c562), a562 = this.m_motorImpulse - b562;
                                    const d562 = q451.MulSV(a562, this.m_axis, n457.SolveVelocityConstraints_s_P), e562 = a562 * this.m_a1, f562 = a562 * this.m_a2;
                                    c561.SelfMulSub(g561, d562), d561 -= i561 * e562, e561.SelfMulAdd(h561, d562), f561 += j561 * f562;
                                }
                                const k561 = q451.DotVV(this.m_perp, q451.SubVV(e561, c561, q451.s_t0)) + this.m_s2 * f561 - this.m_s1 * d561, l561 = f561 - d561;
                                if (this.m_enableLimit && this.m_limitState !== m447.b2LimitState.e_inactiveLimit) {
                                    const q561 = q451.DotVV(this.m_axis, q451.SubVV(e561, c561, q451.s_t0)) + this.m_a2 * f561 - this.m_a1 * d561, r561 = n457.SolveVelocityConstraints_s_f1.Copy(this.m_impulse), s561 = this.m_K.Solve33(-k561, -l561, -q561, n457.SolveVelocityConstraints_s_df3);
                                    this.m_impulse.SelfAdd(s561), this.m_limitState === m447.b2LimitState.e_atLowerLimit ? this.m_impulse.z = y447(this.m_impulse.z, 0) : this.m_limitState === m447.b2LimitState.e_atUpperLimit && (this.m_impulse.z = x447(this.m_impulse.z, 0));
                                    const t561 = -k561 - (this.m_impulse.z - r561.z) * this.m_K.ez.x, u561 = -l561 - (this.m_impulse.z - r561.z) * this.m_K.ez.y, v561 = this.m_K.Solve22(t561, u561, n457.SolveVelocityConstraints_s_f2r);
                                    v561.x += r561.x, v561.y += r561.y, this.m_impulse.x = v561.x, this.m_impulse.y = v561.y, s561.x = this.m_impulse.x - r561.x, s561.y = this.m_impulse.y - r561.y, s561.z = this.m_impulse.z - r561.z;
                                    const w561 = q451.AddVV(q451.MulSV(s561.x, this.m_perp, q451.s_t0), q451.MulSV(s561.z, this.m_axis, q451.s_t1), n457.SolveVelocityConstraints_s_P), x561 = s561.x * this.m_s1 + s561.y + s561.z * this.m_a1, y561 = s561.x * this.m_s2 + s561.y + s561.z * this.m_a2;
                                    c561.SelfMulSub(g561, w561), d561 -= i561 * x561, e561.SelfMulAdd(h561, w561), f561 += j561 * y561;
                                }
                                else {
                                    const m561 = this.m_K.Solve22(-k561, -l561, n457.SolveVelocityConstraints_s_df2);
                                    this.m_impulse.x += m561.x, this.m_impulse.y += m561.y;
                                    const n561 = q451.MulSV(m561.x, this.m_perp, n457.SolveVelocityConstraints_s_P), o561 = m561.x * this.m_s1 + m561.y, p561 = m561.x * this.m_s2 + m561.y;
                                    c561.SelfMulSub(g561, n561), d561 -= i561 * o561, e561.SelfMulAdd(h561, n561), f561 += j561 * p561;
                                }
                                b561.velocities[this.m_indexA].w = d561, b561.velocities[this.m_indexB].w = f561;
                            }
                            SolvePositionConstraints(k559) {
                                const l559 = k559.positions[this.m_indexA].c;
                                let m559 = k559.positions[this.m_indexA].a;
                                const n559 = k559.positions[this.m_indexB].c;
                                let o559 = k559.positions[this.m_indexB].a;
                                const p559 = this.m_qA.SetAngle(m559), q559 = this.m_qB.SetAngle(o559), r559 = this.m_invMassA, s559 = this.m_invMassB, t559 = this.m_invIA, u559 = this.m_invIB, v559 = v451.MulRV(p559, this.m_lalcA, this.m_rA), w559 = v451.MulRV(q559, this.m_lalcB, this.m_rB), x559 = q451.SubVV(q451.AddVV(n559, w559, q451.s_t0), q451.AddVV(l559, v559, q451.s_t1), n457.SolvePositionConstraints_s_d), y559 = v451.MulRV(p559, this.m_localXAxisA, this.m_axis), z559 = q451.CrossVV(q451.AddVV(x559, v559, q451.s_t0), y559), a560 = q451.CrossVV(w559, y559), b560 = v451.MulRV(p559, this.m_localYAxisA, this.m_perp), c560 = q451.CrossVV(q451.AddVV(x559, v559, q451.s_t0), b560), d560 = q451.CrossVV(w559, b560);
                                let e560 = n457.SolvePositionConstraints_s_impulse;
                                const f560 = q451.DotVV(b560, x559), g560 = o559 - m559 - this.m_referenceAngle;
                                let h560 = h451(f560);
                                const i560 = h451(g560);
                                let j560 = !1, k560 = 0;
                                if (this.m_enableLimit) {
                                    const a561 = q451.DotVV(y559, x559);
                                    h451(this.m_upperTranslation - this.m_lowerTranslation) < 2 * z449 ? (k560 = z447(a561, -f450, f450), h560 = y447(h560, h451(a561)), j560 = !0) : a561 <= this.m_lowerTranslation ? (k560 = z447(a561 - this.m_lowerTranslation + z449, -f450, 0), h560 = y447(h560, this.m_lowerTranslation - a561), j560 = !0) : a561 >= this.m_upperTranslation && (k560 = z447(a561 - this.m_upperTranslation - z449, 0, f450), h560 = y447(h560, a561 - this.m_upperTranslation), j560 = !0);
                                }
                                if (j560) {
                                    const t560 = r559 + s559 + t559 * c560 * c560 + u559 * d560 * d560, u560 = t559 * c560 + u559 * d560, v560 = t559 * c560 * z559 + u559 * d560 * a560;
                                    let w560 = t559 + u559;
                                    0 === w560 && (w560 = 1);
                                    const x560 = t559 * z559 + u559 * a560, y560 = r559 + s559 + t559 * z559 * z559 + u559 * a560 * a560, z560 = this.m_K3;
                                    z560.ex.SetXYZ(t560, u560, v560), z560.ey.SetXYZ(u560, w560, x560), z560.ez.SetXYZ(v560, x560, y560), e560 = z560.Solve33(-f560, -g560, -k560, e560);
                                }
                                else {
                                    const o560 = r559 + s559 + t559 * c560 * c560 + u559 * d560 * d560, p560 = t559 * c560 + u559 * d560;
                                    let q560 = t559 + u559;
                                    0 === q560 && (q560 = 1);
                                    const r560 = this.m_K2;
                                    r560.ex.Set(o560, p560), r560.ey.Set(p560, q560);
                                    const s560 = r560.Solve(-f560, -g560, n457.SolvePositionConstraints_s_impulse1);
                                    e560.x = s560.x, e560.y = s560.y, e560.z = 0;
                                }
                                const l560 = q451.AddVV(q451.MulSV(e560.x, b560, q451.s_t0), q451.MulSV(e560.z, y559, q451.s_t1), n457.SolvePositionConstraints_s_P), m560 = e560.x * c560 + e560.y + e560.z * z559, n560 = e560.x * d560 + e560.y + e560.z * a560;
                                return l559.SelfMulSub(r559, l560), m559 -= t559 * m560, n559.SelfMulAdd(s559, l560), o559 += u559 * n560, k559.positions[this.m_indexA].a = m559, k559.positions[this.m_indexB].a = o559, h560 <= z449 && i560 <= a450;
                            }
                            GetAnchorA(j559) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, j559);
                            }
                            GetAnchorB(i559) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, i559);
                            }
                            GetReactionForce(g559, h559) {
                                return h559.x = g559 * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), h559.y = g559 * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y), h559;
                            }
                            GetReactionTorque(f559) {
                                return f559 * this.m_impulse.y;
                            }
                            GetLocalAnchorA() {
                                return this.m_localAnchorA;
                            }
                            GetLocalAnchorB() {
                                return this.m_localAnchorB;
                            }
                            GetLocalAxisA() {
                                return this.m_localXAxisA;
                            }
                            GetReferenceAngle() {
                                return this.m_referenceAngle;
                            }
                            GetJointTranslation() {
                                const b559 = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, n457.GetJointTranslation_s_pA), c559 = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, n457.GetJointTranslation_s_pB), d559 = q451.SubVV(c559, b559, n457.GetJointTranslation_s_d), e559 = this.m_bodyA.GetWorldVector(this.m_localXAxisA, n457.GetJointTranslation_s_axis);
                                return q451.DotVV(d559, e559);
                            }
                            GetJointSpeed() {
                                const p558 = this.m_bodyA, q558 = this.m_bodyB;
                                q451.SubVV(this.m_localAnchorA, p558.m_sweep.localCenter, this.m_lalcA);
                                const r558 = v451.MulRV(p558.m_xf.q, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, q558.m_sweep.localCenter, this.m_lalcB);
                                const s558 = v451.MulRV(q558.m_xf.q, this.m_lalcB, this.m_rB), t558 = q451.AddVV(p558.m_sweep.c, r558, q451.s_t0), u558 = q451.AddVV(q558.m_sweep.c, s558, q451.s_t1), v558 = q451.SubVV(u558, t558, q451.s_t2), w558 = p558.GetWorldVector(this.m_localXAxisA, this.m_axis), x558 = p558.m_linearVelocity, y558 = q558.m_linearVelocity, z558 = p558.m_angularVelocity, a559 = q558.m_angularVelocity;
                                return q451.DotVV(v558, q451.CrossSV(z558, w558, q451.s_t0)) + q451.DotVV(w558, q451.SubVV(q451.AddVCrossSV(y558, a559, s558, q451.s_t0), q451.AddVCrossSV(x558, z558, r558, q451.s_t1), q451.s_t0));
                            }
                            IsLimitEnabled() {
                                return this.m_enableLimit;
                            }
                            EnableLimit(o558) {
                                o558 !== this.m_enableLimit && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableLimit = o558, this.m_impulse.z = 0);
                            }
                            GetLowerLimit() {
                                return this.m_lowerTranslation;
                            }
                            GetUpperLimit() {
                                return this.m_upperTranslation;
                            }
                            SetLimits(m558, n558) {
                                m558 === this.m_lowerTranslation && n558 === this.m_upperTranslation || (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_lowerTranslation = m558, this.m_upperTranslation = n558, this.m_impulse.z = 0);
                            }
                            IsMotorEnabled() {
                                return this.m_enableMotor;
                            }
                            EnableMotor(l558) {
                                l558 !== this.m_enableMotor && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableMotor = l558);
                            }
                            SetMotorSpeed(k558) {
                                k558 !== this.m_motorSpeed && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_motorSpeed = k558);
                            }
                            GetMotorSpeed() {
                                return this.m_motorSpeed;
                            }
                            SetMaxMotorForce(j558) {
                                j558 !== this.m_maxMotorForce && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_maxMotorForce = j558);
                            }
                            GetMaxMotorForce() {
                                return this.m_maxMotorForce;
                            }
                            GetMotorForce(i558) {
                                return i558 * this.m_motorImpulse;
                            }
                            Dump(f558) {
                                const g558 = this.m_bodyA.m_islandIndex, h558 = this.m_bodyB.m_islandIndex;
                                f558("  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\n"), f558("  jd.bodyA = bodies[%d];\n", g558), f558("  jd.bodyB = bodies[%d];\n", h558), f558("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), f558("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), f558("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), f558("  jd.localAxisA.Set(%.15f, %.15f);\n", this.m_localXAxisA.x, this.m_localXAxisA.y), f558("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle), f558("  jd.enableLimit = %s;\n", this.m_enableLimit ? "true" : "false"), f558("  jd.lowerTranslation = %.15f;\n", this.m_lowerTranslation), f558("  jd.upperTranslation = %.15f;\n", this.m_upperTranslation), f558("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false"), f558("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed), f558("  jd.maxMotorForce = %.15f;\n", this.m_maxMotorForce), f558("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        n457.InitVelocityConstraints_s_d = new q451(), n457.InitVelocityConstraints_s_P = new q451(), n457.SolveVelocityConstraints_s_P = new q451(), n457.SolveVelocityConstraints_s_f2r = new q451(), n457.SolveVelocityConstraints_s_f1 = new s451(), n457.SolveVelocityConstraints_s_df3 = new s451(), n457.SolveVelocityConstraints_s_df2 = new q451(), n457.SolvePositionConstraints_s_d = new q451(), n457.SolvePositionConstraints_s_impulse = new s451(), n457.SolvePositionConstraints_s_impulse1 = new q451(), n457.SolvePositionConstraints_s_P = new q451(), n457.GetJointTranslation_s_pA = new q451(), n457.GetJointTranslation_s_pB = new q451(), n457.GetJointTranslation_s_d = new q451(), n457.GetJointTranslation_s_axis = new q451();
                        const o457 = 2;
                        class p457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_pulleyJoint), this.groundAnchorA = new q451(-1, 1), this.groundAnchorB = new q451(1, 1), this.localAnchorA = new q451(-1, 0), this.localAnchorB = new q451(1, 0), this.lengthA = 0, this.lengthB = 0, this.ratio = 1, this.collideConnected = !0;
                            }
                            Initialize(y557, z557, a558, b558, c558, d558, e558) {
                                this.bodyA = y557, this.bodyB = z557, this.groundAnchorA.Copy(a558), this.groundAnchorB.Copy(b558), this.bodyA.GetLocalPoint(c558, this.localAnchorA), this.bodyB.GetLocalPoint(d558, this.localAnchorB), this.lengthA = q451.DistanceVV(c558, a558), this.lengthB = q451.DistanceVV(d558, b558), this.ratio = e558;
                            }
                        }
                        class q457 extends z456 {
                            constructor(x557) {
                                super(x557), this.m_groundAnchorA = new q451(), this.m_groundAnchorB = new q451(), this.m_lengthA = 0, this.m_lengthB = 0, this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_constant = 0, this.m_ratio = 0, this.m_impulse = 0, this.m_indexA = 0, this.m_indexB = 0, this.m_uA = new q451(), this.m_uB = new q451(), this.m_rA = new q451(), this.m_rB = new q451(), this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_mass = 0, this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_groundAnchorA.Copy(o447(x557.groundAnchorA, new q451(-1, 1))), this.m_groundAnchorB.Copy(o447(x557.groundAnchorB, new q451(1, 0))), this.m_localAnchorA.Copy(o447(x557.localAnchorA, new q451(-1, 0))), this.m_localAnchorB.Copy(o447(x557.localAnchorB, new q451(1, 0))), this.m_lengthA = o447(x557.lengthA, 0), this.m_lengthB = o447(x557.lengthB, 0), this.m_ratio = o447(x557.ratio, 1), this.m_constant = o447(x557.lengthA, 0) + this.m_ratio * o447(x557.lengthB, 0), this.m_impulse = 0;
                            }
                            InitVelocityConstraints(e557) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const f557 = e557.positions[this.m_indexA].c, g557 = e557.positions[this.m_indexA].a, h557 = e557.velocities[this.m_indexA].v;
                                let i557 = e557.velocities[this.m_indexA].w;
                                const j557 = e557.positions[this.m_indexB].c, k557 = e557.positions[this.m_indexB].a, l557 = e557.velocities[this.m_indexB].v;
                                let m557 = e557.velocities[this.m_indexB].w;
                                const n557 = this.m_qA.SetAngle(g557), o557 = this.m_qB.SetAngle(k557);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA), v451.MulRV(n557, this.m_lalcA, this.m_rA), q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB), v451.MulRV(o557, this.m_lalcB, this.m_rB), this.m_uA.Copy(f557).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA), this.m_uB.Copy(j557).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);
                                const p557 = this.m_uA.Length(), q557 = this.m_uB.Length();
                                p557 > 10 * z449 ? this.m_uA.SelfMul(1 / p557) : this.m_uA.SetZero(), q557 > 10 * z449 ? this.m_uB.SelfMul(1 / q557) : this.m_uB.SetZero();
                                const r557 = q451.CrossVV(this.m_rA, this.m_uA), s557 = q451.CrossVV(this.m_rB, this.m_uB), t557 = this.m_invMassA + this.m_invIA * r557 * r557, u557 = this.m_invMassB + this.m_invIB * s557 * s557;
                                if (this.m_mass = t557 + this.m_ratio * this.m_ratio * u557, this.m_mass > 0 && (this.m_mass = 1 / this.m_mass), e557.step.warmStarting) {
                                    this.m_impulse *= e557.step.dtRatio;
                                    const v557 = q451.MulSV(-this.m_impulse, this.m_uA, q457.InitVelocityConstraints_s_PA), w557 = q451.MulSV(-this.m_ratio * this.m_impulse, this.m_uB, q457.InitVelocityConstraints_s_PB);
                                    h557.SelfMulAdd(this.m_invMassA, v557), i557 += this.m_invIA * q451.CrossVV(this.m_rA, v557), l557.SelfMulAdd(this.m_invMassB, w557), m557 += this.m_invIB * q451.CrossVV(this.m_rB, w557);
                                }
                                else
                                    this.m_impulse = 0;
                                e557.velocities[this.m_indexA].w = i557, e557.velocities[this.m_indexB].w = m557;
                            }
                            SolveVelocityConstraints(t556) {
                                const u556 = t556.velocities[this.m_indexA].v;
                                let v556 = t556.velocities[this.m_indexA].w;
                                const w556 = t556.velocities[this.m_indexB].v;
                                let x556 = t556.velocities[this.m_indexB].w;
                                const y556 = q451.AddVCrossSV(u556, v556, this.m_rA, q457.SolveVelocityConstraints_s_vpA), z556 = q451.AddVCrossSV(w556, x556, this.m_rB, q457.SolveVelocityConstraints_s_vpB), a557 = -q451.DotVV(this.m_uA, y556) - this.m_ratio * q451.DotVV(this.m_uB, z556), b557 = -this.m_mass * a557;
                                this.m_impulse += b557;
                                const c557 = q451.MulSV(-b557, this.m_uA, q457.SolveVelocityConstraints_s_PA), d557 = q451.MulSV(-this.m_ratio * b557, this.m_uB, q457.SolveVelocityConstraints_s_PB);
                                u556.SelfMulAdd(this.m_invMassA, c557), v556 += this.m_invIA * q451.CrossVV(this.m_rA, c557), w556.SelfMulAdd(this.m_invMassB, d557), x556 += this.m_invIB * q451.CrossVV(this.m_rB, d557), t556.velocities[this.m_indexA].w = v556, t556.velocities[this.m_indexB].w = x556;
                            }
                            SolvePositionConstraints(w555) {
                                const x555 = w555.positions[this.m_indexA].c;
                                let y555 = w555.positions[this.m_indexA].a;
                                const z555 = w555.positions[this.m_indexB].c;
                                let a556 = w555.positions[this.m_indexB].a;
                                const b556 = this.m_qA.SetAngle(y555), c556 = this.m_qB.SetAngle(a556);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                const d556 = v451.MulRV(b556, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                const e556 = v451.MulRV(c556, this.m_lalcB, this.m_rB), f556 = this.m_uA.Copy(x555).SelfAdd(d556).SelfSub(this.m_groundAnchorA), g556 = this.m_uB.Copy(z555).SelfAdd(e556).SelfSub(this.m_groundAnchorB), h556 = f556.Length(), i556 = g556.Length();
                                h556 > 10 * z449 ? f556.SelfMul(1 / h556) : f556.SetZero(), i556 > 10 * z449 ? g556.SelfMul(1 / i556) : g556.SetZero();
                                const j556 = q451.CrossVV(d556, f556), k556 = q451.CrossVV(e556, g556), l556 = this.m_invMassA + this.m_invIA * j556 * j556, m556 = this.m_invMassB + this.m_invIB * k556 * k556;
                                let n556 = l556 + this.m_ratio * this.m_ratio * m556;
                                n556 > 0 && (n556 = 1 / n556);
                                const o556 = this.m_constant - h556 - this.m_ratio * i556, p556 = h451(o556), q556 = -n556 * o556, r556 = q451.MulSV(-q556, f556, q457.SolvePositionConstraints_s_PA), s556 = q451.MulSV(-this.m_ratio * q556, g556, q457.SolvePositionConstraints_s_PB);
                                return x555.SelfMulAdd(this.m_invMassA, r556), y555 += this.m_invIA * q451.CrossVV(d556, r556), z555.SelfMulAdd(this.m_invMassB, s556), a556 += this.m_invIB * q451.CrossVV(e556, s556), w555.positions[this.m_indexA].a = y555, w555.positions[this.m_indexB].a = a556, p556 < z449;
                            }
                            GetAnchorA(v555) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, v555);
                            }
                            GetAnchorB(u555) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, u555);
                            }
                            GetReactionForce(s555, t555) {
                                return t555.x = s555 * this.m_impulse * this.m_uB.x, t555.y = s555 * this.m_impulse * this.m_uB.y, t555;
                            }
                            GetReactionTorque(r555) {
                                return 0;
                            }
                            GetGroundAnchorA() {
                                return this.m_groundAnchorA;
                            }
                            GetGroundAnchorB() {
                                return this.m_groundAnchorB;
                            }
                            GetLengthA() {
                                return this.m_lengthA;
                            }
                            GetLengthB() {
                                return this.m_lengthB;
                            }
                            GetRatio() {
                                return this.m_ratio;
                            }
                            GetCurrentLengthA() {
                                const p555 = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, q457.GetCurrentLengthA_s_p), q555 = this.m_groundAnchorA;
                                return q451.DistanceVV(p555, q555);
                            }
                            GetCurrentLengthB() {
                                const n555 = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, q457.GetCurrentLengthB_s_p), o555 = this.m_groundAnchorB;
                                return q451.DistanceVV(n555, o555);
                            }
                            Dump(k555) {
                                const l555 = this.m_bodyA.m_islandIndex, m555 = this.m_bodyB.m_islandIndex;
                                k555("  const jd: b2PulleyJointDef = new b2PulleyJointDef();\n"), k555("  jd.bodyA = bodies[%d];\n", l555), k555("  jd.bodyB = bodies[%d];\n", m555), k555("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), k555("  jd.groundAnchorA.Set(%.15f, %.15f);\n", this.m_groundAnchorA.x, this.m_groundAnchorA.y), k555("  jd.groundAnchorB.Set(%.15f, %.15f);\n", this.m_groundAnchorB.x, this.m_groundAnchorB.y), k555("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), k555("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), k555("  jd.lengthA = %.15f;\n", this.m_lengthA), k555("  jd.lengthB = %.15f;\n", this.m_lengthB), k555("  jd.ratio = %.15f;\n", this.m_ratio), k555("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                            ShiftOrigin(j555) {
                                this.m_groundAnchorA.SelfSub(j555), this.m_groundAnchorB.SelfSub(j555);
                            }
                        }
                        q457.InitVelocityConstraints_s_PA = new q451(), q457.InitVelocityConstraints_s_PB = new q451(), q457.SolveVelocityConstraints_s_vpA = new q451(), q457.SolveVelocityConstraints_s_vpB = new q451(), q457.SolveVelocityConstraints_s_PA = new q451(), q457.SolveVelocityConstraints_s_PB = new q451(), q457.SolvePositionConstraints_s_PA = new q451(), q457.SolvePositionConstraints_s_PB = new q451(), q457.GetCurrentLengthA_s_p = new q451(), q457.GetCurrentLengthB_s_p = new q451();
                        class r457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_revoluteJoint), this.localAnchorA = new q451(0, 0), this.localAnchorB = new q451(0, 0), this.referenceAngle = 0, this.enableLimit = !1, this.lowerAngle = 0, this.upperAngle = 0, this.enableMotor = !1, this.motorSpeed = 0, this.maxMotorTorque = 0;
                            }
                            Initialize(g555, h555, i555) {
                                this.bodyA = g555, this.bodyB = h555, this.bodyA.GetLocalPoint(i555, this.localAnchorA), this.bodyB.GetLocalPoint(i555, this.localAnchorB), this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
                            }
                        }
                        class s457 extends z456 {
                            constructor(f555) {
                                super(f555), this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_impulse = new s451(), this.m_motorImpulse = 0, this.m_enableMotor = !1, this.m_maxMotorTorque = 0, this.m_motorSpeed = 0, this.m_enableLimit = !1, this.m_referenceAngle = 0, this.m_lowerAngle = 0, this.m_upperAngle = 0, this.m_indexA = 0, this.m_indexB = 0, this.m_rA = new q451(), this.m_rB = new q451(), this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_mass = new u451(), this.m_motorMass = 0, this.m_limitState = m447.b2LimitState.e_inactiveLimit, this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_K = new t451(), this.m_localAnchorA.Copy(o447(f555.localAnchorA, q451.ZERO)), this.m_localAnchorB.Copy(o447(f555.localAnchorB, q451.ZERO)), this.m_referenceAngle = o447(f555.referenceAngle, 0), this.m_impulse.SetZero(), this.m_motorImpulse = 0, this.m_lowerAngle = o447(f555.lowerAngle, 0), this.m_upperAngle = o447(f555.upperAngle, 0), this.m_maxMotorTorque = o447(f555.maxMotorTorque, 0), this.m_motorSpeed = o447(f555.motorSpeed, 0), this.m_enableLimit = o447(f555.enableLimit, !1), this.m_enableMotor = o447(f555.enableMotor, !1), this.m_limitState = m447.b2LimitState.e_inactiveLimit;
                            }
                            InitVelocityConstraints(p554) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const q554 = p554.positions[this.m_indexA].a, r554 = p554.velocities[this.m_indexA].v;
                                let s554 = p554.velocities[this.m_indexA].w;
                                const t554 = p554.positions[this.m_indexB].a, u554 = p554.velocities[this.m_indexB].v;
                                let v554 = p554.velocities[this.m_indexB].w;
                                const w554 = this.m_qA.SetAngle(q554), x554 = this.m_qB.SetAngle(t554);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA), v451.MulRV(w554, this.m_lalcA, this.m_rA), q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB), v451.MulRV(x554, this.m_lalcB, this.m_rB);
                                const y554 = this.m_invMassA, z554 = this.m_invMassB, a555 = this.m_invIA, b555 = this.m_invIB, c555 = a555 + b555 === 0;
                                if (this.m_mass.ex.x = y554 + z554 + this.m_rA.y * this.m_rA.y * a555 + this.m_rB.y * this.m_rB.y * b555, this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * a555 - this.m_rB.y * this.m_rB.x * b555, this.m_mass.ez.x = -this.m_rA.y * a555 - this.m_rB.y * b555, this.m_mass.ex.y = this.m_mass.ey.x, this.m_mass.ey.y = y554 + z554 + this.m_rA.x * this.m_rA.x * a555 + this.m_rB.x * this.m_rB.x * b555, this.m_mass.ez.y = this.m_rA.x * a555 + this.m_rB.x * b555, this.m_mass.ex.z = this.m_mass.ez.x, this.m_mass.ey.z = this.m_mass.ez.y, this.m_mass.ez.z = a555 + b555, this.m_motorMass = a555 + b555, this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass), this.m_enableMotor && !c555 || (this.m_motorImpulse = 0), this.m_enableLimit && !c555) {
                                    const e555 = t554 - q554 - this.m_referenceAngle;
                                    h451(this.m_upperAngle - this.m_lowerAngle) < 2 * a450 ? this.m_limitState = m447.b2LimitState.e_equalLimits : e555 <= this.m_lowerAngle ? (this.m_limitState !== m447.b2LimitState.e_atLowerLimit && (this.m_impulse.z = 0), this.m_limitState = m447.b2LimitState.e_atLowerLimit) : e555 >= this.m_upperAngle ? (this.m_limitState !== m447.b2LimitState.e_atUpperLimit && (this.m_impulse.z = 0), this.m_limitState = m447.b2LimitState.e_atUpperLimit) : (this.m_limitState = m447.b2LimitState.e_inactiveLimit, this.m_impulse.z = 0);
                                }
                                else
                                    this.m_limitState = m447.b2LimitState.e_inactiveLimit;
                                if (p554.step.warmStarting) {
                                    this.m_impulse.SelfMul(p554.step.dtRatio), this.m_motorImpulse *= p554.step.dtRatio;
                                    const d555 = s457.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);
                                    r554.SelfMulSub(y554, d555), s554 -= a555 * (q451.CrossVV(this.m_rA, d555) + this.m_motorImpulse + this.m_impulse.z), u554.SelfMulAdd(z554, d555), v554 += b555 * (q451.CrossVV(this.m_rB, d555) + this.m_motorImpulse + this.m_impulse.z);
                                }
                                else
                                    this.m_impulse.SetZero(), this.m_motorImpulse = 0;
                                p554.velocities[this.m_indexA].w = s554, p554.velocities[this.m_indexB].w = v554;
                            }
                            SolveVelocityConstraints(p553) {
                                const q553 = p553.velocities[this.m_indexA].v;
                                let r553 = p553.velocities[this.m_indexA].w;
                                const s553 = p553.velocities[this.m_indexB].v;
                                let t553 = p553.velocities[this.m_indexB].w;
                                const u553 = this.m_invMassA, v553 = this.m_invMassB, w553 = this.m_invIA, x553 = this.m_invIB, y553 = w553 + x553 === 0;
                                if (this.m_enableMotor && this.m_limitState !== m447.b2LimitState.e_equalLimits && !y553) {
                                    const l554 = t553 - r553 - this.m_motorSpeed;
                                    let m554 = -this.m_motorMass * l554;
                                    const n554 = this.m_motorImpulse, o554 = p553.step.dt * this.m_maxMotorTorque;
                                    this.m_motorImpulse = z447(this.m_motorImpulse + m554, -o554, o554), m554 = this.m_motorImpulse - n554, r553 -= w553 * m554, t553 += x553 * m554;
                                }
                                if (this.m_enableLimit && this.m_limitState !== m447.b2LimitState.e_inactiveLimit && !y553) {
                                    const b554 = q451.SubVV(q451.AddVCrossSV(s553, t553, this.m_rB, q451.s_t0), q451.AddVCrossSV(q553, r553, this.m_rA, q451.s_t1), s457.SolveVelocityConstraints_s_Cdot1), c554 = t553 - r553, d554 = this.m_mass.Solve33(b554.x, b554.y, c554, s457.SolveVelocityConstraints_s_impulse_v3).SelfNeg();
                                    if (this.m_limitState === m447.b2LimitState.e_equalLimits)
                                        this.m_impulse.SelfAdd(d554);
                                    else if (this.m_limitState === m447.b2LimitState.e_atLowerLimit) {
                                        if (this.m_impulse.z + d554.z < 0) {
                                            const i554 = -b554.x + this.m_impulse.z * this.m_mass.ez.x, j554 = -b554.y + this.m_impulse.z * this.m_mass.ez.y, k554 = this.m_mass.Solve22(i554, j554, s457.SolveVelocityConstraints_s_reduced_v2);
                                            d554.x = k554.x, d554.y = k554.y, d554.z = -this.m_impulse.z, this.m_impulse.x += k554.x, this.m_impulse.y += k554.y, this.m_impulse.z = 0;
                                        }
                                        else
                                            this.m_impulse.SelfAdd(d554);
                                    }
                                    else if (this.m_limitState === m447.b2LimitState.e_atUpperLimit)
                                        if (this.m_impulse.z + d554.z > 0) {
                                            const f554 = -b554.x + this.m_impulse.z * this.m_mass.ez.x, g554 = -b554.y + this.m_impulse.z * this.m_mass.ez.y, h554 = this.m_mass.Solve22(f554, g554, s457.SolveVelocityConstraints_s_reduced_v2);
                                            d554.x = h554.x, d554.y = h554.y, d554.z = -this.m_impulse.z, this.m_impulse.x += h554.x, this.m_impulse.y += h554.y, this.m_impulse.z = 0;
                                        }
                                        else
                                            this.m_impulse.SelfAdd(d554);
                                    const e554 = s457.SolveVelocityConstraints_s_P.Set(d554.x, d554.y);
                                    q553.SelfMulSub(u553, e554), r553 -= w553 * (q451.CrossVV(this.m_rA, e554) + d554.z), s553.SelfMulAdd(v553, e554), t553 += x553 * (q451.CrossVV(this.m_rB, e554) + d554.z);
                                }
                                else {
                                    const z553 = q451.SubVV(q451.AddVCrossSV(s553, t553, this.m_rB, q451.s_t0), q451.AddVCrossSV(q553, r553, this.m_rA, q451.s_t1), s457.SolveVelocityConstraints_s_Cdot_v2), a554 = this.m_mass.Solve22(-z553.x, -z553.y, s457.SolveVelocityConstraints_s_impulse_v2);
                                    this.m_impulse.x += a554.x, this.m_impulse.y += a554.y, q553.SelfMulSub(u553, a554), r553 -= w553 * q451.CrossVV(this.m_rA, a554), s553.SelfMulAdd(v553, a554), t553 += x553 * q451.CrossVV(this.m_rB, a554);
                                }
                                p553.velocities[this.m_indexA].w = r553, p553.velocities[this.m_indexB].w = t553;
                            }
                            SolvePositionConstraints(r552) {
                                const s552 = r552.positions[this.m_indexA].c;
                                let t552 = r552.positions[this.m_indexA].a;
                                const u552 = r552.positions[this.m_indexB].c;
                                let v552 = r552.positions[this.m_indexB].a;
                                const w552 = this.m_qA.SetAngle(t552), x552 = this.m_qB.SetAngle(v552);
                                let y552 = 0, z552 = 0;
                                const a553 = this.m_invIA + this.m_invIB === 0;
                                if (this.m_enableLimit && this.m_limitState !== m447.b2LimitState.e_inactiveLimit && !a553) {
                                    const k553 = v552 - t552 - this.m_referenceAngle;
                                    let l553 = 0;
                                    if (this.m_limitState === m447.b2LimitState.e_equalLimits) {
                                        const o553 = z447(k553 - this.m_lowerAngle, -g450, g450);
                                        l553 = -this.m_motorMass * o553, y552 = h451(o553);
                                    }
                                    else if (this.m_limitState === m447.b2LimitState.e_atLowerLimit) {
                                        let n553 = k553 - this.m_lowerAngle;
                                        y552 = -n553, n553 = z447(n553 + a450, -g450, 0), l553 = -this.m_motorMass * n553;
                                    }
                                    else if (this.m_limitState === m447.b2LimitState.e_atUpperLimit) {
                                        let m553 = k553 - this.m_upperAngle;
                                        y552 = m553, m553 = z447(m553 - a450, 0, g450), l553 = -this.m_motorMass * m553;
                                    }
                                    t552 -= this.m_invIA * l553, v552 += this.m_invIB * l553;
                                }
                                {
                                    w552.SetAngle(t552), x552.SetAngle(v552), q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                    const b553 = v451.MulRV(w552, this.m_lalcA, this.m_rA);
                                    q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                    const c553 = v451.MulRV(x552, this.m_lalcB, this.m_rB), d553 = q451.SubVV(q451.AddVV(u552, c553, q451.s_t0), q451.AddVV(s552, b553, q451.s_t1), s457.SolvePositionConstraints_s_C_v2);
                                    z552 = d553.Length();
                                    const e553 = this.m_invMassA, f553 = this.m_invMassB, g553 = this.m_invIA, h553 = this.m_invIB, i553 = this.m_K;
                                    i553.ex.x = e553 + f553 + g553 * b553.y * b553.y + h553 * c553.y * c553.y, i553.ex.y = -g553 * b553.x * b553.y - h553 * c553.x * c553.y, i553.ey.x = i553.ex.y, i553.ey.y = e553 + f553 + g553 * b553.x * b553.x + h553 * c553.x * c553.x;
                                    const j553 = i553.Solve(d553.x, d553.y, s457.SolvePositionConstraints_s_impulse).SelfNeg();
                                    s552.SelfMulSub(e553, j553), t552 -= g553 * q451.CrossVV(b553, j553), u552.SelfMulAdd(f553, j553), v552 += h553 * q451.CrossVV(c553, j553);
                                }
                                return r552.positions[this.m_indexA].a = t552, r552.positions[this.m_indexB].a = v552, z552 <= z449 && y552 <= a450;
                            }
                            GetAnchorA(q552) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, q552);
                            }
                            GetAnchorB(p552) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, p552);
                            }
                            GetReactionForce(n552, o552) {
                                return o552.x = n552 * this.m_impulse.x, o552.y = n552 * this.m_impulse.y, o552;
                            }
                            GetReactionTorque(m552) {
                                return m552 * this.m_impulse.z;
                            }
                            GetLocalAnchorA() {
                                return this.m_localAnchorA;
                            }
                            GetLocalAnchorB() {
                                return this.m_localAnchorB;
                            }
                            GetReferenceAngle() {
                                return this.m_referenceAngle;
                            }
                            GetJointAngle() {
                                return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
                            }
                            GetJointSpeed() {
                                return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
                            }
                            IsMotorEnabled() {
                                return this.m_enableMotor;
                            }
                            EnableMotor(l552) {
                                l552 !== this.m_enableMotor && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableMotor = l552);
                            }
                            GetMotorTorque(k552) {
                                return k552 * this.m_motorImpulse;
                            }
                            GetMotorSpeed() {
                                return this.m_motorSpeed;
                            }
                            SetMaxMotorTorque(j552) {
                                j552 !== this.m_maxMotorTorque && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_maxMotorTorque = j552);
                            }
                            GetMaxMotorTorque() {
                                return this.m_maxMotorTorque;
                            }
                            IsLimitEnabled() {
                                return this.m_enableLimit;
                            }
                            EnableLimit(i552) {
                                i552 !== this.m_enableLimit && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableLimit = i552, this.m_impulse.z = 0);
                            }
                            GetLowerLimit() {
                                return this.m_lowerAngle;
                            }
                            GetUpperLimit() {
                                return this.m_upperAngle;
                            }
                            SetLimits(g552, h552) {
                                g552 === this.m_lowerAngle && h552 === this.m_upperAngle || (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_impulse.z = 0, this.m_lowerAngle = g552, this.m_upperAngle = h552);
                            }
                            SetMotorSpeed(f552) {
                                f552 !== this.m_motorSpeed && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_motorSpeed = f552);
                            }
                            Dump(c552) {
                                const d552 = this.m_bodyA.m_islandIndex, e552 = this.m_bodyB.m_islandIndex;
                                c552("  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n"), c552("  jd.bodyA = bodies[%d];\n", d552), c552("  jd.bodyB = bodies[%d];\n", e552), c552("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), c552("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), c552("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), c552("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle), c552("  jd.enableLimit = %s;\n", this.m_enableLimit ? "true" : "false"), c552("  jd.lowerAngle = %.15f;\n", this.m_lowerAngle), c552("  jd.upperAngle = %.15f;\n", this.m_upperAngle), c552("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false"), c552("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed), c552("  jd.maxMotorTorque = %.15f;\n", this.m_maxMotorTorque), c552("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        s457.InitVelocityConstraints_s_P = new q451(), s457.SolveVelocityConstraints_s_P = new q451(), s457.SolveVelocityConstraints_s_Cdot_v2 = new q451(), s457.SolveVelocityConstraints_s_Cdot1 = new q451(), s457.SolveVelocityConstraints_s_impulse_v3 = new s451(), s457.SolveVelocityConstraints_s_reduced_v2 = new q451(), s457.SolveVelocityConstraints_s_impulse_v2 = new q451(), s457.SolvePositionConstraints_s_C_v2 = new q451(), s457.SolvePositionConstraints_s_impulse = new q451();
                        class t457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_ropeJoint), this.localAnchorA = new q451(-1, 0), this.localAnchorB = new q451(1, 0), this.maxLength = 0;
                            }
                        }
                        class u457 extends z456 {
                            constructor(b552) {
                                super(b552), this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_maxLength = 0, this.m_length = 0, this.m_impulse = 0, this.m_indexA = 0, this.m_indexB = 0, this.m_u = new q451(), this.m_rA = new q451(), this.m_rB = new q451(), this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_mass = 0, this.m_state = m447.b2LimitState.e_inactiveLimit, this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_localAnchorA.Copy(o447(b552.localAnchorA, new q451(-1, 0))), this.m_localAnchorB.Copy(o447(b552.localAnchorB, new q451(1, 0))), this.m_maxLength = o447(b552.maxLength, 0);
                            }
                            InitVelocityConstraints(l551) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const m551 = l551.positions[this.m_indexA].c, n551 = l551.positions[this.m_indexA].a, o551 = l551.velocities[this.m_indexA].v;
                                let p551 = l551.velocities[this.m_indexA].w;
                                const q551 = l551.positions[this.m_indexB].c, r551 = l551.positions[this.m_indexB].a, s551 = l551.velocities[this.m_indexB].v;
                                let t551 = l551.velocities[this.m_indexB].w;
                                const u551 = this.m_qA.SetAngle(n551), v551 = this.m_qB.SetAngle(r551);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA), v451.MulRV(u551, this.m_lalcA, this.m_rA), q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB), v451.MulRV(v551, this.m_lalcB, this.m_rB), this.m_u.Copy(q551).SelfAdd(this.m_rB).SelfSub(m551).SelfSub(this.m_rA), this.m_length = this.m_u.Length();
                                const w551 = this.m_length - this.m_maxLength;
                                if (this.m_state = w551 > 0 ? m447.b2LimitState.e_atUpperLimit : m447.b2LimitState.e_inactiveLimit, !(this.m_length > z449))
                                    return this.m_u.SetZero(), this.m_mass = 0, void (this.m_impulse = 0);
                                this.m_u.SelfMul(1 / this.m_length);
                                const x551 = q451.CrossVV(this.m_rA, this.m_u), y551 = q451.CrossVV(this.m_rB, this.m_u), z551 = this.m_invMassA + this.m_invIA * x551 * x551 + this.m_invMassB + this.m_invIB * y551 * y551;
                                if (this.m_mass = 0 !== z551 ? 1 / z551 : 0, l551.step.warmStarting) {
                                    this.m_impulse *= l551.step.dtRatio;
                                    const a552 = q451.MulSV(this.m_impulse, this.m_u, u457.InitVelocityConstraints_s_P);
                                    o551.SelfMulSub(this.m_invMassA, a552), p551 -= this.m_invIA * q451.CrossVV(this.m_rA, a552), s551.SelfMulAdd(this.m_invMassB, a552), t551 += this.m_invIB * q451.CrossVV(this.m_rB, a552);
                                }
                                else
                                    this.m_impulse = 0;
                                l551.velocities[this.m_indexA].w = p551, l551.velocities[this.m_indexB].w = t551;
                            }
                            SolveVelocityConstraints(z550) {
                                const a551 = z550.velocities[this.m_indexA].v;
                                let b551 = z550.velocities[this.m_indexA].w;
                                const c551 = z550.velocities[this.m_indexB].v;
                                let d551 = z550.velocities[this.m_indexB].w;
                                const e551 = q451.AddVCrossSV(a551, b551, this.m_rA, u457.SolveVelocityConstraints_s_vpA), f551 = q451.AddVCrossSV(c551, d551, this.m_rB, u457.SolveVelocityConstraints_s_vpB), g551 = this.m_length - this.m_maxLength;
                                let h551 = q451.DotVV(this.m_u, q451.SubVV(f551, e551, q451.s_t0));
                                g551 < 0 && (h551 += z550.step.inv_dt * g551);
                                let i551 = -this.m_mass * h551;
                                const j551 = this.m_impulse;
                                this.m_impulse = x447(0, this.m_impulse + i551), i551 = this.m_impulse - j551;
                                const k551 = q451.MulSV(i551, this.m_u, u457.SolveVelocityConstraints_s_P);
                                a551.SelfMulSub(this.m_invMassA, k551), b551 -= this.m_invIA * q451.CrossVV(this.m_rA, k551), c551.SelfMulAdd(this.m_invMassB, k551), d551 += this.m_invIB * q451.CrossVV(this.m_rB, k551), z550.velocities[this.m_indexA].w = b551, z550.velocities[this.m_indexB].w = d551;
                            }
                            SolvePositionConstraints(l550) {
                                const m550 = l550.positions[this.m_indexA].c;
                                let n550 = l550.positions[this.m_indexA].a;
                                const o550 = l550.positions[this.m_indexB].c;
                                let p550 = l550.positions[this.m_indexB].a;
                                const q550 = this.m_qA.SetAngle(n550), r550 = this.m_qB.SetAngle(p550);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                const s550 = v451.MulRV(q550, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                const t550 = v451.MulRV(r550, this.m_lalcB, this.m_rB), u550 = this.m_u.Copy(o550).SelfAdd(t550).SelfSub(m550).SelfSub(s550), v550 = u550.Normalize();
                                let w550 = v550 - this.m_maxLength;
                                w550 = z447(w550, 0, f450);
                                const x550 = -this.m_mass * w550, y550 = q451.MulSV(x550, u550, u457.SolvePositionConstraints_s_P);
                                return m550.SelfMulSub(this.m_invMassA, y550), n550 -= this.m_invIA * q451.CrossVV(s550, y550), o550.SelfMulAdd(this.m_invMassB, y550), p550 += this.m_invIB * q451.CrossVV(t550, y550), l550.positions[this.m_indexA].a = n550, l550.positions[this.m_indexB].a = p550, v550 - this.m_maxLength < z449;
                            }
                            GetAnchorA(k550) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, k550);
                            }
                            GetAnchorB(j550) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, j550);
                            }
                            GetReactionForce(h550, i550) {
                                return q451.MulSV(h550 * this.m_impulse, this.m_u, i550);
                            }
                            GetReactionTorque(g550) {
                                return 0;
                            }
                            GetLocalAnchorA() {
                                return this.m_localAnchorA;
                            }
                            GetLocalAnchorB() {
                                return this.m_localAnchorB;
                            }
                            SetMaxLength(f550) {
                                this.m_maxLength = f550;
                            }
                            GetMaxLength() {
                                return this.m_maxLength;
                            }
                            GetLimitState() {
                                return this.m_state;
                            }
                            Dump(c550) {
                                const d550 = this.m_bodyA.m_islandIndex, e550 = this.m_bodyB.m_islandIndex;
                                c550("  const jd: b2RopeJointDef = new b2RopeJointDef();\n"), c550("  jd.bodyA = bodies[%d];\n", d550), c550("  jd.bodyB = bodies[%d];\n", e550), c550("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), c550("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), c550("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), c550("  jd.maxLength = %.15f;\n", this.m_maxLength), c550("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        u457.InitVelocityConstraints_s_P = new q451(), u457.SolveVelocityConstraints_s_vpA = new q451(), u457.SolveVelocityConstraints_s_vpB = new q451(), u457.SolveVelocityConstraints_s_P = new q451(), u457.SolvePositionConstraints_s_P = new q451();
                        class v457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_weldJoint), this.localAnchorA = new q451(), this.localAnchorB = new q451(), this.referenceAngle = 0, this.frequencyHz = 0, this.dampingRatio = 0;
                            }
                            Initialize(z549, a550, b550) {
                                this.bodyA = z549, this.bodyB = a550, this.bodyA.GetLocalPoint(b550, this.localAnchorA), this.bodyB.GetLocalPoint(b550, this.localAnchorB), this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
                            }
                        }
                        class w457 extends z456 {
                            constructor(y549) {
                                super(y549), this.m_frequencyHz = 0, this.m_dampingRatio = 0, this.m_bias = 0, this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_referenceAngle = 0, this.m_gamma = 0, this.m_impulse = new s451(0, 0, 0), this.m_indexA = 0, this.m_indexB = 0, this.m_rA = new q451(), this.m_rB = new q451(), this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_mass = new u451(), this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_K = new u451(), this.m_frequencyHz = o447(y549.frequencyHz, 0), this.m_dampingRatio = o447(y549.dampingRatio, 0), this.m_localAnchorA.Copy(o447(y549.localAnchorA, q451.ZERO)), this.m_localAnchorB.Copy(o447(y549.localAnchorB, q451.ZERO)), this.m_referenceAngle = o447(y549.referenceAngle, 0), this.m_impulse.SetZero();
                            }
                            InitVelocityConstraints(c549) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const d549 = c549.positions[this.m_indexA].a, e549 = c549.velocities[this.m_indexA].v;
                                let f549 = c549.velocities[this.m_indexA].w;
                                const g549 = c549.positions[this.m_indexB].a, h549 = c549.velocities[this.m_indexB].v;
                                let i549 = c549.velocities[this.m_indexB].w;
                                const j549 = this.m_qA.SetAngle(d549), k549 = this.m_qB.SetAngle(g549);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA), v451.MulRV(j549, this.m_lalcA, this.m_rA), q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB), v451.MulRV(k549, this.m_lalcB, this.m_rB);
                                const l549 = this.m_invMassA, m549 = this.m_invMassB, n549 = this.m_invIA, o549 = this.m_invIB, p549 = this.m_K;
                                if (p549.ex.x = l549 + m549 + this.m_rA.y * this.m_rA.y * n549 + this.m_rB.y * this.m_rB.y * o549, p549.ey.x = -this.m_rA.y * this.m_rA.x * n549 - this.m_rB.y * this.m_rB.x * o549, p549.ez.x = -this.m_rA.y * n549 - this.m_rB.y * o549, p549.ex.y = p549.ey.x, p549.ey.y = l549 + m549 + this.m_rA.x * this.m_rA.x * n549 + this.m_rB.x * this.m_rB.x * o549, p549.ez.y = this.m_rA.x * n549 + this.m_rB.x * o549, p549.ex.z = p549.ez.x, p549.ey.z = p549.ez.y, p549.ez.z = n549 + o549, this.m_frequencyHz > 0) {
                                    p549.GetInverse22(this.m_mass);
                                    let r549 = n549 + o549;
                                    const s549 = r549 > 0 ? 1 / r549 : 0, t549 = g549 - d549 - this.m_referenceAngle, u549 = 2 * u449 * this.m_frequencyHz, v549 = 2 * s549 * this.m_dampingRatio * u549, w549 = s549 * u549 * u549, x549 = c549.step.dt;
                                    this.m_gamma = x549 * (v549 + x549 * w549), this.m_gamma = 0 !== this.m_gamma ? 1 / this.m_gamma : 0, this.m_bias = t549 * x549 * w549 * this.m_gamma, r549 += this.m_gamma, this.m_mass.ez.z = 0 !== r549 ? 1 / r549 : 0;
                                }
                                else
                                    p549.GetSymInverse33(this.m_mass), this.m_gamma = 0, this.m_bias = 0;
                                if (c549.step.warmStarting) {
                                    this.m_impulse.SelfMul(c549.step.dtRatio);
                                    const q549 = w457.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);
                                    e549.SelfMulSub(l549, q549), f549 -= n549 * (q451.CrossVV(this.m_rA, q549) + this.m_impulse.z), h549.SelfMulAdd(m549, q549), i549 += o549 * (q451.CrossVV(this.m_rB, q549) + this.m_impulse.z);
                                }
                                else
                                    this.m_impulse.SetZero();
                                c549.velocities[this.m_indexA].w = f549, c549.velocities[this.m_indexB].w = i549;
                            }
                            SolveVelocityConstraints(k548) {
                                const l548 = k548.velocities[this.m_indexA].v;
                                let m548 = k548.velocities[this.m_indexA].w;
                                const n548 = k548.velocities[this.m_indexB].v;
                                let o548 = k548.velocities[this.m_indexB].w;
                                const p548 = this.m_invMassA, q548 = this.m_invMassB, r548 = this.m_invIA, s548 = this.m_invIB;
                                if (this.m_frequencyHz > 0) {
                                    const x548 = o548 - m548, y548 = -this.m_mass.ez.z * (x548 + this.m_bias + this.m_gamma * this.m_impulse.z);
                                    this.m_impulse.z += y548, m548 -= r548 * y548, o548 += s548 * y548;
                                    const z548 = q451.SubVV(q451.AddVCrossSV(n548, o548, this.m_rB, q451.s_t0), q451.AddVCrossSV(l548, m548, this.m_rA, q451.s_t1), w457.SolveVelocityConstraints_s_Cdot1), a549 = u451.MulM33XY(this.m_mass, z548.x, z548.y, w457.SolveVelocityConstraints_s_impulse1).SelfNeg();
                                    this.m_impulse.x += a549.x, this.m_impulse.y += a549.y;
                                    const b549 = a549;
                                    l548.SelfMulSub(p548, b549), m548 -= r548 * q451.CrossVV(this.m_rA, b549), n548.SelfMulAdd(q548, b549), o548 += s548 * q451.CrossVV(this.m_rB, b549);
                                }
                                else {
                                    const t548 = q451.SubVV(q451.AddVCrossSV(n548, o548, this.m_rB, q451.s_t0), q451.AddVCrossSV(l548, m548, this.m_rA, q451.s_t1), w457.SolveVelocityConstraints_s_Cdot1), u548 = o548 - m548, v548 = u451.MulM33XYZ(this.m_mass, t548.x, t548.y, u548, w457.SolveVelocityConstraints_s_impulse).SelfNeg();
                                    this.m_impulse.SelfAdd(v548);
                                    const w548 = w457.SolveVelocityConstraints_s_P.Set(v548.x, v548.y);
                                    l548.SelfMulSub(p548, w548), m548 -= r548 * (q451.CrossVV(this.m_rA, w548) + v548.z), n548.SelfMulAdd(q548, w548), o548 += s548 * (q451.CrossVV(this.m_rB, w548) + v548.z);
                                }
                                k548.velocities[this.m_indexA].w = m548, k548.velocities[this.m_indexB].w = o548;
                            }
                            SolvePositionConstraints(o547) {
                                const p547 = o547.positions[this.m_indexA].c;
                                let q547 = o547.positions[this.m_indexA].a;
                                const r547 = o547.positions[this.m_indexB].c;
                                let s547 = o547.positions[this.m_indexB].a;
                                const t547 = this.m_qA.SetAngle(q547), u547 = this.m_qB.SetAngle(s547), v547 = this.m_invMassA, w547 = this.m_invMassB, x547 = this.m_invIA, y547 = this.m_invIB;
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                const z547 = v451.MulRV(t547, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                const a548 = v451.MulRV(u547, this.m_lalcB, this.m_rB);
                                let b548, c548;
                                const d548 = this.m_K;
                                if (d548.ex.x = v547 + w547 + z547.y * z547.y * x547 + a548.y * a548.y * y547, d548.ey.x = -z547.y * z547.x * x547 - a548.y * a548.x * y547, d548.ez.x = -z547.y * x547 - a548.y * y547, d548.ex.y = d548.ey.x, d548.ey.y = v547 + w547 + z547.x * z547.x * x547 + a548.x * a548.x * y547, d548.ez.y = z547.x * x547 + a548.x * y547, d548.ex.z = d548.ez.x, d548.ey.z = d548.ez.y, d548.ez.z = x547 + y547, this.m_frequencyHz > 0) {
                                    const i548 = q451.SubVV(q451.AddVV(r547, a548, q451.s_t0), q451.AddVV(p547, z547, q451.s_t1), w457.SolvePositionConstraints_s_C1);
                                    b548 = i548.Length(), c548 = 0;
                                    const j548 = d548.Solve22(i548.x, i548.y, w457.SolvePositionConstraints_s_P).SelfNeg();
                                    p547.SelfMulSub(v547, j548), q547 -= x547 * q451.CrossVV(z547, j548), r547.SelfMulAdd(w547, j548), s547 += y547 * q451.CrossVV(a548, j548);
                                }
                                else {
                                    const e548 = q451.SubVV(q451.AddVV(r547, a548, q451.s_t0), q451.AddVV(p547, z547, q451.s_t1), w457.SolvePositionConstraints_s_C1), f548 = s547 - q547 - this.m_referenceAngle;
                                    b548 = e548.Length(), c548 = h451(f548);
                                    const g548 = d548.Solve33(e548.x, e548.y, f548, w457.SolvePositionConstraints_s_impulse).SelfNeg(), h548 = w457.SolvePositionConstraints_s_P.Set(g548.x, g548.y);
                                    p547.SelfMulSub(v547, h548), q547 -= x547 * (q451.CrossVV(this.m_rA, h548) + g548.z), r547.SelfMulAdd(w547, h548), s547 += y547 * (q451.CrossVV(this.m_rB, h548) + g548.z);
                                }
                                return o547.positions[this.m_indexA].a = q547, o547.positions[this.m_indexB].a = s547, b548 <= z449 && c548 <= a450;
                            }
                            GetAnchorA(n547) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, n547);
                            }
                            GetAnchorB(m547) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, m547);
                            }
                            GetReactionForce(k547, l547) {
                                return l547.x = k547 * this.m_impulse.x, l547.y = k547 * this.m_impulse.y, l547;
                            }
                            GetReactionTorque(j547) {
                                return j547 * this.m_impulse.z;
                            }
                            GetLocalAnchorA() {
                                return this.m_localAnchorA;
                            }
                            GetLocalAnchorB() {
                                return this.m_localAnchorB;
                            }
                            GetReferenceAngle() {
                                return this.m_referenceAngle;
                            }
                            SetFrequency(i547) {
                                this.m_frequencyHz = i547;
                            }
                            GetFrequency() {
                                return this.m_frequencyHz;
                            }
                            SetDampingRatio(h547) {
                                this.m_dampingRatio = h547;
                            }
                            GetDampingRatio() {
                                return this.m_dampingRatio;
                            }
                            Dump(e547) {
                                const f547 = this.m_bodyA.m_islandIndex, g547 = this.m_bodyB.m_islandIndex;
                                e547("  const jd: b2WeldJointDef = new b2WeldJointDef();\n"), e547("  jd.bodyA = bodies[%d];\n", f547), e547("  jd.bodyB = bodies[%d];\n", g547), e547("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), e547("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), e547("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), e547("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle), e547("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz), e547("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio), e547("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        w457.InitVelocityConstraints_s_P = new q451(), w457.SolveVelocityConstraints_s_Cdot1 = new q451(), w457.SolveVelocityConstraints_s_impulse1 = new q451(), w457.SolveVelocityConstraints_s_impulse = new s451(), w457.SolveVelocityConstraints_s_P = new q451(), w457.SolvePositionConstraints_s_C1 = new q451(), w457.SolvePositionConstraints_s_P = new q451(), w457.SolvePositionConstraints_s_impulse = new s451();
                        class x457 extends y456 {
                            constructor() {
                                super(m447.b2JointType.e_wheelJoint), this.localAnchorA = new q451(0, 0), this.localAnchorB = new q451(0, 0), this.localAxisA = new q451(1, 0), this.enableMotor = !1, this.maxMotorTorque = 0, this.motorSpeed = 0, this.frequencyHz = 2, this.dampingRatio = .7;
                            }
                            Initialize(a547, b547, c547, d547) {
                                this.bodyA = a547, this.bodyB = b547, this.bodyA.GetLocalPoint(c547, this.localAnchorA), this.bodyB.GetLocalPoint(c547, this.localAnchorB), this.bodyA.GetLocalVector(d547, this.localAxisA);
                            }
                        }
                        class y457 extends z456 {
                            constructor(z546) {
                                super(z546), this.m_frequencyHz = 0, this.m_dampingRatio = 0, this.m_localAnchorA = new q451(), this.m_localAnchorB = new q451(), this.m_localXAxisA = new q451(), this.m_localYAxisA = new q451(), this.m_impulse = 0, this.m_motorImpulse = 0, this.m_springImpulse = 0, this.m_maxMotorTorque = 0, this.m_motorSpeed = 0, this.m_enableMotor = !1, this.m_indexA = 0, this.m_indexB = 0, this.m_localCenterA = new q451(), this.m_localCenterB = new q451(), this.m_invMassA = 0, this.m_invMassB = 0, this.m_invIA = 0, this.m_invIB = 0, this.m_ax = new q451(), this.m_ay = new q451(), this.m_sAx = 0, this.m_sBx = 0, this.m_sAy = 0, this.m_sBy = 0, this.m_mass = 0, this.m_motorMass = 0, this.m_springMass = 0, this.m_bias = 0, this.m_gamma = 0, this.m_qA = new v451(), this.m_qB = new v451(), this.m_lalcA = new q451(), this.m_lalcB = new q451(), this.m_rA = new q451(), this.m_rB = new q451(), this.m_frequencyHz = o447(z546.frequencyHz, 2), this.m_dampingRatio = o447(z546.dampingRatio, .7), this.m_localAnchorA.Copy(o447(z546.localAnchorA, q451.ZERO)), this.m_localAnchorB.Copy(o447(z546.localAnchorB, q451.ZERO)), this.m_localXAxisA.Copy(o447(z546.localAxisA, q451.UNITX)), q451.CrossOneV(this.m_localXAxisA, this.m_localYAxisA), this.m_maxMotorTorque = o447(z546.maxMotorTorque, 0), this.m_motorSpeed = o447(z546.motorSpeed, 0), this.m_enableMotor = o447(z546.enableMotor, !1), this.m_ax.SetZero(), this.m_ay.SetZero();
                            }
                            GetMotorSpeed() {
                                return this.m_motorSpeed;
                            }
                            GetMaxMotorTorque() {
                                return this.m_maxMotorTorque;
                            }
                            SetSpringFrequencyHz(y546) {
                                this.m_frequencyHz = y546;
                            }
                            GetSpringFrequencyHz() {
                                return this.m_frequencyHz;
                            }
                            SetSpringDampingRatio(x546) {
                                this.m_dampingRatio = x546;
                            }
                            GetSpringDampingRatio() {
                                return this.m_dampingRatio;
                            }
                            InitVelocityConstraints(w545) {
                                this.m_indexA = this.m_bodyA.m_islandIndex, this.m_indexB = this.m_bodyB.m_islandIndex, this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter), this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter), this.m_invMassA = this.m_bodyA.m_invMass, this.m_invMassB = this.m_bodyB.m_invMass, this.m_invIA = this.m_bodyA.m_invI, this.m_invIB = this.m_bodyB.m_invI;
                                const x545 = this.m_invMassA, y545 = this.m_invMassB, z545 = this.m_invIA, a546 = this.m_invIB, b546 = w545.positions[this.m_indexA].c, c546 = w545.positions[this.m_indexA].a, d546 = w545.velocities[this.m_indexA].v;
                                let e546 = w545.velocities[this.m_indexA].w;
                                const f546 = w545.positions[this.m_indexB].c, g546 = w545.positions[this.m_indexB].a, h546 = w545.velocities[this.m_indexB].v;
                                let i546 = w545.velocities[this.m_indexB].w;
                                const j546 = this.m_qA.SetAngle(c546), k546 = this.m_qB.SetAngle(g546);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                const l546 = v451.MulRV(j546, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                const m546 = v451.MulRV(k546, this.m_lalcB, this.m_rB), n546 = q451.SubVV(q451.AddVV(f546, m546, q451.s_t0), q451.AddVV(b546, l546, q451.s_t1), y457.InitVelocityConstraints_s_d);
                                if (v451.MulRV(j546, this.m_localYAxisA, this.m_ay), this.m_sAy = q451.CrossVV(q451.AddVV(n546, l546, q451.s_t0), this.m_ay), this.m_sBy = q451.CrossVV(m546, this.m_ay), this.m_mass = x545 + y545 + z545 * this.m_sAy * this.m_sAy + a546 * this.m_sBy * this.m_sBy, this.m_mass > 0 && (this.m_mass = 1 / this.m_mass), this.m_springMass = 0, this.m_bias = 0, this.m_gamma = 0, this.m_frequencyHz > 0) {
                                    v451.MulRV(j546, this.m_localXAxisA, this.m_ax), this.m_sAx = q451.CrossVV(q451.AddVV(n546, l546, q451.s_t0), this.m_ax), this.m_sBx = q451.CrossVV(m546, this.m_ax);
                                    const r546 = x545 + y545 + z545 * this.m_sAx * this.m_sAx + a546 * this.m_sBx * this.m_sBx;
                                    if (r546 > 0) {
                                        this.m_springMass = 1 / r546;
                                        const s546 = q451.DotVV(n546, this.m_ax), t546 = 2 * u449 * this.m_frequencyHz, u546 = 2 * this.m_springMass * this.m_dampingRatio * t546, v546 = this.m_springMass * t546 * t546, w546 = w545.step.dt;
                                        this.m_gamma = w546 * (u546 + w546 * v546), this.m_gamma > 0 && (this.m_gamma = 1 / this.m_gamma), this.m_bias = s546 * w546 * v546 * this.m_gamma, this.m_springMass = r546 + this.m_gamma, this.m_springMass > 0 && (this.m_springMass = 1 / this.m_springMass);
                                    }
                                }
                                else
                                    this.m_springImpulse = 0;
                                if (this.m_enableMotor ? (this.m_motorMass = z545 + a546, this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass)) : (this.m_motorMass = 0, this.m_motorImpulse = 0), w545.step.warmStarting) {
                                    this.m_impulse *= w545.step.dtRatio, this.m_springImpulse *= w545.step.dtRatio, this.m_motorImpulse *= w545.step.dtRatio;
                                    const o546 = q451.AddVV(q451.MulSV(this.m_impulse, this.m_ay, q451.s_t0), q451.MulSV(this.m_springImpulse, this.m_ax, q451.s_t1), y457.InitVelocityConstraints_s_P), p546 = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse, q546 = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;
                                    d546.SelfMulSub(this.m_invMassA, o546), e546 -= this.m_invIA * p546, h546.SelfMulAdd(this.m_invMassB, o546), i546 += this.m_invIB * q546;
                                }
                                else
                                    this.m_impulse = 0, this.m_springImpulse = 0, this.m_motorImpulse = 0;
                                w545.velocities[this.m_indexA].w = e546, w545.velocities[this.m_indexB].w = i546;
                            }
                            SolveVelocityConstraints(z544) {
                                const a545 = this.m_invMassA, b545 = this.m_invMassB, c545 = this.m_invIA, d545 = this.m_invIB, e545 = z544.velocities[this.m_indexA].v;
                                let f545 = z544.velocities[this.m_indexA].w;
                                const g545 = z544.velocities[this.m_indexB].v;
                                let h545 = z544.velocities[this.m_indexB].w;
                                {
                                    const r545 = q451.DotVV(this.m_ax, q451.SubVV(g545, e545, q451.s_t0)) + this.m_sBx * h545 - this.m_sAx * f545, s545 = -this.m_springMass * (r545 + this.m_bias + this.m_gamma * this.m_springImpulse);
                                    this.m_springImpulse += s545;
                                    const t545 = q451.MulSV(s545, this.m_ax, y457.SolveVelocityConstraints_s_P), u545 = s545 * this.m_sAx, v545 = s545 * this.m_sBx;
                                    e545.SelfMulSub(a545, t545), f545 -= c545 * u545, g545.SelfMulAdd(b545, t545), h545 += d545 * v545;
                                }
                                {
                                    const n545 = h545 - f545 - this.m_motorSpeed;
                                    let o545 = -this.m_motorMass * n545;
                                    const p545 = this.m_motorImpulse, q545 = z544.step.dt * this.m_maxMotorTorque;
                                    this.m_motorImpulse = z447(this.m_motorImpulse + o545, -q545, q545), o545 = this.m_motorImpulse - p545, f545 -= c545 * o545, h545 += d545 * o545;
                                }
                                {
                                    const i545 = q451.DotVV(this.m_ay, q451.SubVV(g545, e545, q451.s_t0)) + this.m_sBy * h545 - this.m_sAy * f545, j545 = -this.m_mass * i545;
                                    this.m_impulse += j545;
                                    const k545 = q451.MulSV(j545, this.m_ay, y457.SolveVelocityConstraints_s_P), l545 = j545 * this.m_sAy, m545 = j545 * this.m_sBy;
                                    e545.SelfMulSub(a545, k545), f545 -= c545 * l545, g545.SelfMulAdd(b545, k545), h545 += d545 * m545;
                                }
                                z544.velocities[this.m_indexA].w = f545, z544.velocities[this.m_indexB].w = h545;
                            }
                            SolvePositionConstraints(g544) {
                                const h544 = g544.positions[this.m_indexA].c;
                                let i544 = g544.positions[this.m_indexA].a;
                                const j544 = g544.positions[this.m_indexB].c;
                                let k544 = g544.positions[this.m_indexB].a;
                                const l544 = this.m_qA.SetAngle(i544), m544 = this.m_qB.SetAngle(k544);
                                q451.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                                const n544 = v451.MulRV(l544, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                                const o544 = v451.MulRV(m544, this.m_lalcB, this.m_rB), p544 = q451.AddVV(q451.SubVV(j544, h544, q451.s_t0), q451.SubVV(o544, n544, q451.s_t1), y457.SolvePositionConstraints_s_d), q544 = v451.MulRV(l544, this.m_localYAxisA, this.m_ay), r544 = q451.CrossVV(q451.AddVV(p544, n544, q451.s_t0), q544), s544 = q451.CrossVV(o544, q544), t544 = q451.DotVV(p544, this.m_ay), u544 = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;
                                let v544;
                                v544 = 0 !== u544 ? -t544 / u544 : 0;
                                const w544 = q451.MulSV(v544, q544, y457.SolvePositionConstraints_s_P), x544 = v544 * r544, y544 = v544 * s544;
                                return h544.SelfMulSub(this.m_invMassA, w544), i544 -= this.m_invIA * x544, j544.SelfMulAdd(this.m_invMassB, w544), k544 += this.m_invIB * y544, g544.positions[this.m_indexA].a = i544, g544.positions[this.m_indexB].a = k544, h451(t544) <= z449;
                            }
                            GetDefinition(f544) {
                                return f544;
                            }
                            GetAnchorA(e544) {
                                return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, e544);
                            }
                            GetAnchorB(d544) {
                                return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, d544);
                            }
                            GetReactionForce(b544, c544) {
                                return c544.x = b544 * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x), c544.y = b544 * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y), c544;
                            }
                            GetReactionTorque(a544) {
                                return a544 * this.m_motorImpulse;
                            }
                            GetLocalAnchorA() {
                                return this.m_localAnchorA;
                            }
                            GetLocalAnchorB() {
                                return this.m_localAnchorB;
                            }
                            GetLocalAxisA() {
                                return this.m_localXAxisA;
                            }
                            GetJointTranslation() {
                                return this.GetPrismaticJointTranslation();
                            }
                            GetJointLinearSpeed() {
                                return this.GetPrismaticJointSpeed();
                            }
                            GetJointAngle() {
                                return this.GetRevoluteJointAngle();
                            }
                            GetJointAngularSpeed() {
                                return this.GetRevoluteJointSpeed();
                            }
                            GetPrismaticJointTranslation() {
                                const u543 = this.m_bodyA, v543 = this.m_bodyB, w543 = u543.GetWorldPoint(this.m_localAnchorA, new q451()), x543 = v543.GetWorldPoint(this.m_localAnchorB, new q451()), y543 = q451.SubVV(x543, w543, new q451()), z543 = u543.GetWorldVector(this.m_localXAxisA, new q451());
                                return q451.DotVV(y543, z543);
                            }
                            GetPrismaticJointSpeed() {
                                const i543 = this.m_bodyA, j543 = this.m_bodyB;
                                q451.SubVV(this.m_localAnchorA, i543.m_sweep.localCenter, this.m_lalcA);
                                const k543 = v451.MulRV(i543.m_xf.q, this.m_lalcA, this.m_rA);
                                q451.SubVV(this.m_localAnchorB, j543.m_sweep.localCenter, this.m_lalcB);
                                const l543 = v451.MulRV(j543.m_xf.q, this.m_lalcB, this.m_rB), m543 = q451.AddVV(i543.m_sweep.c, k543, q451.s_t0), n543 = q451.AddVV(j543.m_sweep.c, l543, q451.s_t1), o543 = q451.SubVV(n543, m543, q451.s_t2), p543 = i543.GetWorldVector(this.m_localXAxisA, new q451()), q543 = i543.m_linearVelocity, r543 = j543.m_linearVelocity, s543 = i543.m_angularVelocity, t543 = j543.m_angularVelocity;
                                return q451.DotVV(o543, q451.CrossSV(s543, p543, q451.s_t0)) + q451.DotVV(p543, q451.SubVV(q451.AddVCrossSV(r543, t543, l543, q451.s_t0), q451.AddVCrossSV(q543, s543, k543, q451.s_t1), q451.s_t0));
                            }
                            GetRevoluteJointAngle() {
                                return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;
                            }
                            GetRevoluteJointSpeed() {
                                const h543 = this.m_bodyA.m_angularVelocity;
                                return this.m_bodyB.m_angularVelocity - h543;
                            }
                            IsMotorEnabled() {
                                return this.m_enableMotor;
                            }
                            EnableMotor(g543) {
                                g543 !== this.m_enableMotor && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableMotor = g543);
                            }
                            SetMotorSpeed(f543) {
                                f543 !== this.m_motorSpeed && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_motorSpeed = f543);
                            }
                            SetMaxMotorTorque(e543) {
                                e543 !== this.m_maxMotorTorque && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_maxMotorTorque = e543);
                            }
                            GetMotorTorque(d543) {
                                return d543 * this.m_motorImpulse;
                            }
                            Dump(a543) {
                                const b543 = this.m_bodyA.m_islandIndex, c543 = this.m_bodyB.m_islandIndex;
                                a543("  const jd: b2WheelJointDef = new b2WheelJointDef();\n"), a543("  jd.bodyA = bodies[%d];\n", b543), a543("  jd.bodyB = bodies[%d];\n", c543), a543("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false"), a543("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y), a543("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y), a543("  jd.localAxisA.Set(%.15f, %.15f);\n", this.m_localXAxisA.x, this.m_localXAxisA.y), a543("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false"), a543("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed), a543("  jd.maxMotorTorque = %.15f;\n", this.m_maxMotorTorque), a543("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz), a543("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio), a543("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
                            }
                        }
                        function f449(y542, z542) {
                            return j451(y542 * z542);
                        }
                        function g449(w542, x542) {
                            return w542 > x542 ? w542 : x542;
                        }
                        y457.InitVelocityConstraints_s_d = new q451(), y457.InitVelocityConstraints_s_P = new q451(), y457.SolveVelocityConstraints_s_P = new q451(), y457.SolvePositionConstraints_s_d = new q451(), y457.SolvePositionConstraints_s_P = new q451();
                        class z457 {
                            constructor(v542) {
                                this._other = null, this.prev = null, this.next = null, this.contact = v542;
                            }
                            get other() {
                                if (null === this._other)
                                    throw new Error();
                                return this._other;
                            }
                            set other(u542) {
                                if (null !== this._other)
                                    throw new Error();
                                this._other = u542;
                            }
                            Reset() {
                                this._other = null, this.prev = null, this.next = null;
                            }
                        }
                        class a458 {
                            constructor() {
                                this.m_islandFlag = !1, this.m_touchingFlag = !1, this.m_enabledFlag = !1, this.m_filterFlag = !1, this.m_bulletHitFlag = !1, this.m_toiFlag = !1, this.m_prev = null, this.m_next = null, this.m_nodeA = new z457(this), this.m_nodeB = new z457(this), this.m_indexA = 0, this.m_indexB = 0, this.m_manifold = new k453(), this.m_toiCount = 0, this.m_toi = 0, this.m_friction = 0, this.m_restitution = 0, this.m_tangentSpeed = 0, this.m_oldManifold = new k453();
                            }
                            GetManifold() {
                                return this.m_manifold;
                            }
                            GetWorldManifold(p542) {
                                const q542 = this.m_fixtureA.GetBody(), r542 = this.m_fixtureB.GetBody(), s542 = this.GetShapeA(), t542 = this.GetShapeB();
                                p542.Initialize(this.m_manifold, q542.GetTransform(), s542.m_radius, r542.GetTransform(), t542.m_radius);
                            }
                            IsTouching() {
                                return this.m_touchingFlag;
                            }
                            SetEnabled(o542) {
                                this.m_enabledFlag = o542;
                            }
                            IsEnabled() {
                                return this.m_enabledFlag;
                            }
                            GetNext() {
                                return this.m_next;
                            }
                            GetFixtureA() {
                                return this.m_fixtureA;
                            }
                            GetChildIndexA() {
                                return this.m_indexA;
                            }
                            GetShapeA() {
                                return this.m_fixtureA.GetShape();
                            }
                            GetFixtureB() {
                                return this.m_fixtureB;
                            }
                            GetChildIndexB() {
                                return this.m_indexB;
                            }
                            GetShapeB() {
                                return this.m_fixtureB.GetShape();
                            }
                            FlagForFiltering() {
                                this.m_filterFlag = !0;
                            }
                            SetFriction(n542) {
                                this.m_friction = n542;
                            }
                            GetFriction() {
                                return this.m_friction;
                            }
                            ResetFriction() {
                                this.m_friction = f449(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);
                            }
                            SetRestitution(m542) {
                                this.m_restitution = m542;
                            }
                            GetRestitution() {
                                return this.m_restitution;
                            }
                            ResetRestitution() {
                                this.m_restitution = g449(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);
                            }
                            SetTangentSpeed(l542) {
                                this.m_tangentSpeed = l542;
                            }
                            GetTangentSpeed() {
                                return this.m_tangentSpeed;
                            }
                            Reset(h542, i542, j542, k542) {
                                this.m_islandFlag = !1, this.m_touchingFlag = !1, this.m_enabledFlag = !0, this.m_filterFlag = !1, this.m_bulletHitFlag = !1, this.m_toiFlag = !1, this.m_fixtureA = h542, this.m_fixtureB = j542, this.m_indexA = i542, this.m_indexB = k542, this.m_manifold.pointCount = 0, this.m_prev = null, this.m_next = null, this.m_nodeA.Reset(), this.m_nodeB.Reset(), this.m_toiCount = 0, this.m_friction = f449(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction), this.m_restitution = g449(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);
                            }
                            Update(p541) {
                                const q541 = this.m_oldManifold;
                                this.m_oldManifold = this.m_manifold, this.m_manifold = q541, this.m_enabledFlag = !0;
                                let r541 = !1;
                                const s541 = this.m_touchingFlag, t541 = this.m_fixtureA.IsSensor(), u541 = this.m_fixtureB.IsSensor(), v541 = t541 || u541, w541 = this.m_fixtureA.GetBody(), x541 = this.m_fixtureB.GetBody(), y541 = w541.GetTransform(), z541 = x541.GetTransform();
                                if (v541) {
                                    const f542 = this.GetShapeA(), g542 = this.GetShapeB();
                                    r541 = p448(f542, this.m_indexA, g542, this.m_indexB, y541, z541), this.m_manifold.pointCount = 0;
                                }
                                else {
                                    this.Evaluate(this.m_manifold, y541, z541), r541 = this.m_manifold.pointCount > 0;
                                    for (let a542 = 0; a542 < this.m_manifold.pointCount; ++a542) {
                                        const b542 = this.m_manifold.points[a542];
                                        b542.normalImpulse = 0, b542.tangentImpulse = 0;
                                        const c542 = b542.id;
                                        for (let d542 = 0; d542 < this.m_oldManifold.pointCount; ++d542) {
                                            const e542 = this.m_oldManifold.points[d542];
                                            if (e542.id.key === c542.key) {
                                                b542.normalImpulse = e542.normalImpulse, b542.tangentImpulse = e542.tangentImpulse;
                                                break;
                                            }
                                        }
                                    }
                                    r541 !== s541 && (w541.SetAwake(!0), x541.SetAwake(!0));
                                }
                                this.m_touchingFlag = r541, !s541 && r541 && p541 && p541.BeginContact(this), s541 && !r541 && p541 && p541.EndContact(this), !v541 && r541 && p541 && p541.PreSolve(this, this.m_oldManifold);
                            }
                            ComputeTOI(l541, m541) {
                                const n541 = a458.ComputeTOI_s_input;
                                n541.proxyA.SetShape(this.GetShapeA(), this.m_indexA), n541.proxyB.SetShape(this.GetShapeB(), this.m_indexB), n541.sweepA.Copy(l541), n541.sweepB.Copy(m541), n541.tMax = z449;
                                const o541 = a458.ComputeTOI_s_output;
                                return w448(o541, n541), o541.t;
                            }
                        }
                        a458.ComputeTOI_s_input = new e454(), a458.ComputeTOI_s_output = new h454();
                        class b458 extends a458 {
                            static Create() {
                                return new b458();
                            }
                            static Destroy(k541) { }
                            Evaluate(h541, i541, j541) {
                                x448(h541, this.GetShapeA(), i541, this.GetShapeB(), j541);
                            }
                        }
                        class c458 extends a458 {
                            static Create() {
                                return new c458();
                            }
                            static Destroy(g541) { }
                            Evaluate(d541, e541, f541) {
                                c449(d541, this.GetShapeA(), e541, this.GetShapeB(), f541);
                            }
                        }
                        class d458 extends a458 {
                            static Create() {
                                return new d458();
                            }
                            static Destroy(c541) { }
                            Evaluate(z540, a541, b541) {
                                y448(z540, this.GetShapeA(), a541, this.GetShapeB(), b541);
                            }
                        }
                        class e458 extends a458 {
                            static Create() {
                                return new e458();
                            }
                            static Destroy(y540) { }
                            Evaluate(v540, w540, x540) {
                                d449(v540, this.GetShapeA(), w540, this.GetShapeB(), x540);
                            }
                        }
                        class f458 extends a458 {
                            static Create() {
                                return new f458();
                            }
                            static Destroy(u540) { }
                            Evaluate(r540, s540, t540) {
                                e449(r540, this.GetShapeA(), s540, this.GetShapeB(), t540);
                            }
                        }
                        class g458 extends a458 {
                            static Create() {
                                return new g458();
                            }
                            static Destroy(q540) { }
                            Evaluate(m540, n540, o540) {
                                const p540 = g458.Evaluate_s_edge;
                                this.GetShapeA().GetChildEdge(p540, this.m_indexA), d449(m540, p540, n540, this.GetShapeB(), o540);
                            }
                        }
                        g458.Evaluate_s_edge = new o456();
                        class h458 extends a458 {
                            static Create() {
                                return new h458();
                            }
                            static Destroy(l540) { }
                            Evaluate(h540, i540, j540) {
                                const k540 = h458.Evaluate_s_edge;
                                this.GetShapeA().GetChildEdge(k540, this.m_indexA), e449(h540, k540, i540, this.GetShapeB(), j540);
                            }
                        }
                        h458.Evaluate_s_edge = new o456();
                        class i458 {
                            constructor() {
                                this.pool = [], this.createFcn = null, this.destroyFcn = null, this.primary = !1;
                            }
                        }
                        class j458 {
                            constructor() {
                                this.m_registers = [], this.InitializeRegisters();
                            }
                            AddType(z539, a540, b540, c540) {
                                const f540 = [];
                                function d540() {
                                    return f540.pop() || z539();
                                }
                                function e540(g540) {
                                    f540.push(g540);
                                }
                                this.m_registers[b540][c540].pool = f540, this.m_registers[b540][c540].createFcn = d540, this.m_registers[b540][c540].destroyFcn = e540, this.m_registers[b540][c540].primary = !0, b540 !== c540 && (this.m_registers[c540][b540].pool = f540, this.m_registers[c540][b540].createFcn = d540, this.m_registers[c540][b540].destroyFcn = e540, this.m_registers[c540][b540].primary = !1);
                            }
                            InitializeRegisters() {
                                for (let x539 = 0; x539 < m447.b2ShapeType.e_shapeTypeCount; x539++) {
                                    this.m_registers[x539] = [];
                                    for (let y539 = 0; y539 < m447.b2ShapeType.e_shapeTypeCount; y539++)
                                        this.m_registers[x539][y539] = new i458();
                                }
                                this.AddType(b458.Create, b458.Destroy, m447.b2ShapeType.e_circleShape, m447.b2ShapeType.e_circleShape), this.AddType(d458.Create, d458.Destroy, m447.b2ShapeType.e_polygonShape, m447.b2ShapeType.e_circleShape), this.AddType(c458.Create, c458.Destroy, m447.b2ShapeType.e_polygonShape, m447.b2ShapeType.e_polygonShape), this.AddType(e458.Create, e458.Destroy, m447.b2ShapeType.e_edgeShape, m447.b2ShapeType.e_circleShape), this.AddType(f458.Create, f458.Destroy, m447.b2ShapeType.e_edgeShape, m447.b2ShapeType.e_polygonShape), this.AddType(g458.Create, g458.Destroy, m447.b2ShapeType.e_chainShape, m447.b2ShapeType.e_circleShape), this.AddType(h458.Create, h458.Destroy, m447.b2ShapeType.e_chainShape, m447.b2ShapeType.e_polygonShape);
                            }
                            Create(p539, q539, r539, s539) {
                                const t539 = p539.GetType(), u539 = r539.GetType(), v539 = this.m_registers[t539][u539];
                                if (v539.createFcn) {
                                    const w539 = v539.createFcn();
                                    return v539.primary ? w539.Reset(p539, q539, r539, s539) : w539.Reset(r539, s539, p539, q539), w539;
                                }
                                return null;
                            }
                            Destroy(l539) {
                                const m539 = l539.m_fixtureA.GetType(), n539 = l539.m_fixtureB.GetType(), o539 = this.m_registers[m539][n539];
                                o539.destroyFcn && o539.destroyFcn(l539);
                            }
                        }
                        class k458 {
                            SayGoodbyeJoint(k539) { }
                            SayGoodbyeFixture(j539) { }
                            SayGoodbyeParticleGroup(i539) { }
                            SayGoodbyeParticle(g539, h539) { }
                        }
                        class l458 {
                            ShouldCollide(a539, b539) {
                                const c539 = a539.GetBody(), d539 = b539.GetBody();
                                if (d539.GetType() === m447.b2BodyType.b2_staticBody && c539.GetType() === m447.b2BodyType.b2_staticBody)
                                    return !1;
                                if (!d539.ShouldCollideConnected(c539))
                                    return !1;
                                const e539 = a539.GetFilterData(), f539 = b539.GetFilterData();
                                return e539.groupIndex === f539.groupIndex && 0 !== e539.groupIndex ? e539.groupIndex > 0 : 0 != (e539.maskBits & f539.categoryBits) && 0 != (e539.categoryBits & f539.maskBits);
                            }
                            ShouldCollideFixtureParticle(x538, y538, z538) {
                                return !0;
                            }
                            ShouldCollideParticleParticle(u538, v538, w538) {
                                return !0;
                            }
                        }
                        l458.b2_defaultFilter = new l458();
                        class m458 {
                            constructor() {
                                this.normalImpulses = w447(v449), this.tangentImpulses = w447(v449), this.count = 0;
                            }
                        }
                        class n458 {
                            BeginContact(t538) { }
                            EndContact(s538) { }
                            BeginContactFixtureParticle(q538, r538) { }
                            EndContactFixtureParticle(o538, p538) { }
                            BeginContactParticleParticle(m538, n538) { }
                            EndContactParticleParticle(k538, l538) { }
                            PreSolve(i538, j538) { }
                            PostSolve(g538, h538) { }
                        }
                        n458.b2_defaultListener = new n458();
                        class o458 {
                            ReportFixture(f538) {
                                return !0;
                            }
                            ReportParticle(d538, e538) {
                                return !1;
                            }
                            ShouldQueryParticleSystem(c538) {
                                return !0;
                            }
                        }
                        class p458 {
                            ReportFixture(y537, z537, a538, b538) {
                                return b538;
                            }
                            ReportParticle(t537, u537, v537, w537, x537) {
                                return 0;
                            }
                            ShouldQueryParticleSystem(s537) {
                                return !0;
                            }
                        }
                        class q458 {
                            constructor() {
                                this.m_broadPhase = new w453(), this.m_contactList = null, this.m_contactCount = 0, this.m_contactFilter = l458.b2_defaultFilter, this.m_contactListener = n458.b2_defaultListener, this.m_contactFactory = new j458();
                            }
                            AddPair(e537, f537) {
                                let g537 = e537.fixture, h537 = f537.fixture, i537 = e537.childIndex, j537 = f537.childIndex, k537 = g537.GetBody(), l537 = h537.GetBody();
                                if (k537 === l537)
                                    return;
                                let m537 = l537.GetContactList();
                                for (; m537;) {
                                    if (m537.other === k537) {
                                        const o537 = m537.contact.GetFixtureA(), p537 = m537.contact.GetFixtureB(), q537 = m537.contact.GetChildIndexA(), r537 = m537.contact.GetChildIndexB();
                                        if (o537 === g537 && p537 === h537 && q537 === i537 && r537 === j537)
                                            return;
                                        if (o537 === h537 && p537 === g537 && q537 === j537 && r537 === i537)
                                            return;
                                    }
                                    m537 = m537.next;
                                }
                                if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(g537, h537))
                                    return;
                                const n537 = this.m_contactFactory.Create(g537, i537, h537, j537);
                                null !== n537 && (g537 = n537.GetFixtureA(), h537 = n537.GetFixtureB(), i537 = n537.GetChildIndexA(), j537 = n537.GetChildIndexB(), k537 = g537.m_body, l537 = h537.m_body, n537.m_prev = null, n537.m_next = this.m_contactList, null !== this.m_contactList && (this.m_contactList.m_prev = n537), this.m_contactList = n537, n537.m_nodeA.other = l537, n537.m_nodeA.prev = null, n537.m_nodeA.next = k537.m_contactList, null !== k537.m_contactList && (k537.m_contactList.prev = n537.m_nodeA), k537.m_contactList = n537.m_nodeA, n537.m_nodeB.other = k537, n537.m_nodeB.prev = null, n537.m_nodeB.next = l537.m_contactList, null !== l537.m_contactList && (l537.m_contactList.prev = n537.m_nodeB), l537.m_contactList = n537.m_nodeB, g537.IsSensor() || h537.IsSensor() || (k537.SetAwake(!0), l537.SetAwake(!0)), ++this.m_contactCount);
                            }
                            FindNewContacts() {
                                this.m_broadPhase.UpdatePairs((c537, d537) => {
                                    this.AddPair(c537, d537);
                                });
                            }
                            Destroy(w536) {
                                const x536 = w536.GetFixtureA(), y536 = w536.GetFixtureB(), z536 = x536.GetBody(), a537 = y536.GetBody();
                                this.m_contactListener && w536.IsTouching() && this.m_contactListener.EndContact(w536), w536.m_prev && (w536.m_prev.m_next = w536.m_next), w536.m_next && (w536.m_next.m_prev = w536.m_prev), w536 === this.m_contactList && (this.m_contactList = w536.m_next), w536.m_nodeA.prev && (w536.m_nodeA.prev.next = w536.m_nodeA.next), w536.m_nodeA.next && (w536.m_nodeA.next.prev = w536.m_nodeA.prev), w536.m_nodeA === z536.m_contactList && (z536.m_contactList = w536.m_nodeA.next), w536.m_nodeB.prev && (w536.m_nodeB.prev.next = w536.m_nodeB.next), w536.m_nodeB.next && (w536.m_nodeB.next.prev = w536.m_nodeB.prev), w536.m_nodeB === a537.m_contactList && (a537.m_contactList = w536.m_nodeB.next), w536.m_manifold.pointCount > 0 && !x536.IsSensor() && !y536.IsSensor() && (x536.GetBody().SetAwake(!0), y536.GetBody().SetAwake(!0)), this.m_contactFactory.Destroy(w536), --this.m_contactCount;
                            }
                            Collide() {
                                let j536 = this.m_contactList;
                                for (; j536;) {
                                    const k536 = j536.GetFixtureA(), l536 = j536.GetFixtureB(), m536 = j536.GetChildIndexA(), n536 = j536.GetChildIndexB(), o536 = k536.GetBody(), p536 = l536.GetBody();
                                    if (j536.m_filterFlag) {
                                        if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(k536, l536)) {
                                            const v536 = j536;
                                            j536 = v536.m_next, this.Destroy(v536);
                                            continue;
                                        }
                                        j536.m_filterFlag = !1;
                                    }
                                    const q536 = o536.IsAwake() && o536.m_type !== m447.b2BodyType.b2_staticBody, r536 = p536.IsAwake() && p536.m_type !== m447.b2BodyType.b2_staticBody;
                                    if (!q536 && !r536) {
                                        j536 = j536.m_next;
                                        continue;
                                    }
                                    const s536 = k536.m_proxies[m536].treeNode, t536 = l536.m_proxies[n536].treeNode;
                                    if (n448(s536.aabb, t536.aabb))
                                        j536.Update(this.m_contactListener), j536 = j536.m_next;
                                    else {
                                        const u536 = j536;
                                        j536 = u536.m_next, this.Destroy(u536);
                                    }
                                }
                            }
                        }
                        class r458 {
                            constructor() {
                                this.step = 0, this.collide = 0, this.solve = 0, this.solveInit = 0, this.solveVelocity = 0, this.solvePosition = 0, this.broadphase = 0, this.solveTOI = 0;
                            }
                            Reset() {
                                return this.step = 0, this.collide = 0, this.solve = 0, this.solveInit = 0, this.solveVelocity = 0, this.solvePosition = 0, this.broadphase = 0, this.solveTOI = 0, this;
                            }
                        }
                        class s458 {
                            constructor() {
                                this.dt = 0, this.inv_dt = 0, this.dtRatio = 0, this.velocityIterations = 0, this.positionIterations = 0, this.particleIterations = 0, this.warmStarting = !1;
                            }
                            Copy(i536) {
                                return this.dt = i536.dt, this.inv_dt = i536.inv_dt, this.dtRatio = i536.dtRatio, this.positionIterations = i536.positionIterations, this.velocityIterations = i536.velocityIterations, this.particleIterations = i536.particleIterations, this.warmStarting = i536.warmStarting, this;
                            }
                        }
                        class t458 {
                            constructor() {
                                this.c = new q451(), this.a = 0;
                            }
                            static MakeArray(g536) {
                                return u447(g536, () => new t458());
                            }
                        }
                        class u458 {
                            constructor() {
                                this.v = new q451(), this.w = 0;
                            }
                            static MakeArray(e536) {
                                return u447(e536, () => new u458());
                            }
                        }
                        class v458 {
                            constructor() {
                                this.step = new s458();
                            }
                        }
                        let w458 = !1;
                        class x458 {
                            constructor() {
                                this.rA = new q451(), this.rB = new q451(), this.normalImpulse = 0, this.tangentImpulse = 0, this.normalMass = 0, this.tangentMass = 0, this.velocityBias = 0;
                            }
                            static MakeArray(c536) {
                                return u447(c536, () => new x458());
                            }
                        }
                        class y458 {
                            constructor() {
                                this.points = x458.MakeArray(v449), this.normal = new q451(), this.tangent = new q451(), this.normalMass = new t451(), this.K = new t451(), this.indexA = 0, this.indexB = 0, this.invMassA = 0, this.invMassB = 0, this.invIA = 0, this.invIB = 0, this.friction = 0, this.restitution = 0, this.tangentSpeed = 0, this.pointCount = 0, this.contactIndex = 0;
                            }
                            static MakeArray(a536) {
                                return u447(a536, () => new y458());
                            }
                        }
                        class z458 {
                            constructor() {
                                this.localPoints = q451.MakeArray(v449), this.localNormal = new q451(), this.localPoint = new q451(), this.indexA = 0, this.indexB = 0, this.invMassA = 0, this.invMassB = 0, this.localCenterA = new q451(), this.localCenterB = new q451(), this.invIA = 0, this.invIB = 0, this.type = m447.b2ManifoldType.e_unknown, this.radiusA = 0, this.radiusB = 0, this.pointCount = 0;
                            }
                            static MakeArray(y535) {
                                return u447(y535, () => new z458());
                            }
                        }
                        class a459 {
                            constructor() {
                                this.step = new s458(), this.count = 0;
                            }
                        }
                        class b459 {
                            constructor() {
                                this.normal = new q451(), this.point = new q451(), this.separation = 0;
                            }
                            Initialize(q535, r535, s535, t535) {
                                const u535 = b459.Initialize_s_pointA, v535 = b459.Initialize_s_pointB, w535 = b459.Initialize_s_planePoint, x535 = b459.Initialize_s_clipPoint;
                                switch (q535.type) {
                                    case m447.b2ManifoldType.e_circles:
                                        w451.MulXV(r535, q535.localPoint, u535), w451.MulXV(s535, q535.localPoints[0], v535), q451.SubVV(v535, u535, this.normal).SelfNormalize(), q451.MidVV(u535, v535, this.point), this.separation = q451.DotVV(q451.SubVV(v535, u535, q451.s_t0), this.normal) - q535.radiusA - q535.radiusB;
                                        break;
                                    case m447.b2ManifoldType.e_faceA:
                                        v451.MulRV(r535.q, q535.localNormal, this.normal), w451.MulXV(r535, q535.localPoint, w535), w451.MulXV(s535, q535.localPoints[t535], x535), this.separation = q451.DotVV(q451.SubVV(x535, w535, q451.s_t0), this.normal) - q535.radiusA - q535.radiusB, this.point.Copy(x535);
                                        break;
                                    case m447.b2ManifoldType.e_faceB:
                                        v451.MulRV(s535.q, q535.localNormal, this.normal), w451.MulXV(s535, q535.localPoint, w535), w451.MulXV(r535, q535.localPoints[t535], x535), this.separation = q451.DotVV(q451.SubVV(x535, w535, q451.s_t0), this.normal) - q535.radiusA - q535.radiusB, this.point.Copy(x535), this.normal.SelfNeg();
                                }
                            }
                        }
                        b459.Initialize_s_pointA = new q451(), b459.Initialize_s_pointB = new q451(), b459.Initialize_s_planePoint = new q451(), b459.Initialize_s_clipPoint = new q451();
                        class c459 {
                            constructor() {
                                this.m_step = new s458(), this.m_positionConstraints = z458.MakeArray(1024), this.m_velocityConstraints = y458.MakeArray(1024), this.m_count = 0;
                            }
                            Initialize(w534) {
                                if (this.m_step.Copy(w534.step), this.m_count = w534.count, this.m_positionConstraints.length < this.m_count) {
                                    const p535 = y447(2 * this.m_positionConstraints.length, this.m_count);
                                    for (; this.m_positionConstraints.length < p535;)
                                        this.m_positionConstraints[this.m_positionConstraints.length] = new z458();
                                }
                                if (this.m_velocityConstraints.length < this.m_count) {
                                    const o535 = y447(2 * this.m_velocityConstraints.length, this.m_count);
                                    for (; this.m_velocityConstraints.length < o535;)
                                        this.m_velocityConstraints[this.m_velocityConstraints.length] = new y458();
                                }
                                this.m_positions = w534.positions, this.m_velocities = w534.velocities, this.m_contacts = w534.contacts;
                                for (let x534 = 0; x534 < this.m_count; ++x534) {
                                    const y534 = this.m_contacts[x534], z534 = y534.m_fixtureA, a535 = y534.m_fixtureB, b535 = z534.GetShape(), c535 = a535.GetShape(), d535 = b535.m_radius, e535 = c535.m_radius, f535 = z534.GetBody(), g535 = a535.GetBody(), h535 = y534.GetManifold(), i535 = h535.pointCount, j535 = this.m_velocityConstraints[x534];
                                    j535.friction = y534.m_friction, j535.restitution = y534.m_restitution, j535.tangentSpeed = y534.m_tangentSpeed, j535.indexA = f535.m_islandIndex, j535.indexB = g535.m_islandIndex, j535.invMassA = f535.m_invMass, j535.invMassB = g535.m_invMass, j535.invIA = f535.m_invI, j535.invIB = g535.m_invI, j535.contactIndex = x534, j535.pointCount = i535, j535.K.SetZero(), j535.normalMass.SetZero();
                                    const k535 = this.m_positionConstraints[x534];
                                    k535.indexA = f535.m_islandIndex, k535.indexB = g535.m_islandIndex, k535.invMassA = f535.m_invMass, k535.invMassB = g535.m_invMass, k535.localCenterA.Copy(f535.m_sweep.localCenter), k535.localCenterB.Copy(g535.m_sweep.localCenter), k535.invIA = f535.m_invI, k535.invIB = g535.m_invI, k535.localNormal.Copy(h535.localNormal), k535.localPoint.Copy(h535.localPoint), k535.pointCount = i535, k535.radiusA = d535, k535.radiusB = e535, k535.type = h535.type;
                                    for (let l535 = 0; l535 < i535; ++l535) {
                                        const m535 = h535.points[l535], n535 = j535.points[l535];
                                        this.m_step.warmStarting ? (n535.normalImpulse = this.m_step.dtRatio * m535.normalImpulse, n535.tangentImpulse = this.m_step.dtRatio * m535.tangentImpulse) : (n535.normalImpulse = 0, n535.tangentImpulse = 0), n535.rA.SetZero(), n535.rB.SetZero(), n535.normalMass = 0, n535.tangentMass = 0, n535.velocityBias = 0, k535.localPoints[l535].Copy(m535.localPoint);
                                    }
                                }
                                return this;
                            }
                            InitializeVelocityConstraints() {
                                const c533 = c459.InitializeVelocityConstraints_s_xfA, d533 = c459.InitializeVelocityConstraints_s_xfB, e533 = c459.InitializeVelocityConstraints_s_worldManifold, f533 = 1e3;
                                for (let g533 = 0; g533 < this.m_count; ++g533) {
                                    const h533 = this.m_velocityConstraints[g533], i533 = this.m_positionConstraints[g533], j533 = i533.radiusA, k533 = i533.radiusB, l533 = this.m_contacts[h533.contactIndex].GetManifold(), m533 = h533.indexA, n533 = h533.indexB, o533 = h533.invMassA, p533 = h533.invMassB, q533 = h533.invIA, r533 = h533.invIB, s533 = i533.localCenterA, t533 = i533.localCenterB, u533 = this.m_positions[m533].c, v533 = this.m_positions[m533].a, w533 = this.m_velocities[m533].v, x533 = this.m_velocities[m533].w, y533 = this.m_positions[n533].c, z533 = this.m_positions[n533].a, a534 = this.m_velocities[n533].v, b534 = this.m_velocities[n533].w;
                                    c533.q.SetAngle(v533), d533.q.SetAngle(z533), q451.SubVV(u533, v451.MulRV(c533.q, s533, q451.s_t0), c533.p), q451.SubVV(y533, v451.MulRV(d533.q, t533, q451.s_t0), d533.p), e533.Initialize(l533, c533, j533, d533, k533), h533.normal.Copy(e533.normal), q451.CrossVOne(h533.normal, h533.tangent);
                                    const c534 = h533.pointCount;
                                    for (let m534 = 0; m534 < c534; ++m534) {
                                        const n534 = h533.points[m534];
                                        q451.SubVV(e533.points[m534], u533, n534.rA), q451.SubVV(e533.points[m534], y533, n534.rB);
                                        const o534 = q451.CrossVV(n534.rA, h533.normal), p534 = q451.CrossVV(n534.rB, h533.normal), q534 = o533 + p533 + q533 * o534 * o534 + r533 * p534 * p534;
                                        n534.normalMass = q534 > 0 ? 1 / q534 : 0;
                                        const r534 = h533.tangent, s534 = q451.CrossVV(n534.rA, r534), t534 = q451.CrossVV(n534.rB, r534), u534 = o533 + p533 + q533 * s534 * s534 + r533 * t534 * t534;
                                        n534.tangentMass = u534 > 0 ? 1 / u534 : 0, n534.velocityBias = 0;
                                        const v534 = q451.DotVV(h533.normal, q451.SubVV(q451.AddVCrossSV(a534, b534, n534.rB, q451.s_t0), q451.AddVCrossSV(w533, x533, n534.rA, q451.s_t1), q451.s_t0));
                                        v534 < -e450 && (n534.velocityBias += -h533.restitution * v534);
                                    }
                                    if (2 === h533.pointCount && w458) {
                                        const d534 = h533.points[0], e534 = h533.points[1], f534 = q451.CrossVV(d534.rA, h533.normal), g534 = q451.CrossVV(d534.rB, h533.normal), h534 = q451.CrossVV(e534.rA, h533.normal), i534 = q451.CrossVV(e534.rB, h533.normal), j534 = o533 + p533 + q533 * f534 * f534 + r533 * g534 * g534, k534 = o533 + p533 + q533 * h534 * h534 + r533 * i534 * i534, l534 = o533 + p533 + q533 * f534 * h534 + r533 * g534 * i534;
                                        j534 * j534 < f533 * (j534 * k534 - l534 * l534) ? (h533.K.ex.Set(j534, l534), h533.K.ey.Set(l534, k534), h533.K.GetInverse(h533.normalMass)) : h533.pointCount = 1;
                                    }
                                }
                            }
                            WarmStart() {
                                const k532 = c459.WarmStart_s_P;
                                for (let l532 = 0; l532 < this.m_count; ++l532) {
                                    const m532 = this.m_velocityConstraints[l532], n532 = m532.indexA, o532 = m532.indexB, p532 = m532.invMassA, q532 = m532.invIA, r532 = m532.invMassB, s532 = m532.invIB, t532 = m532.pointCount, u532 = this.m_velocities[n532].v;
                                    let v532 = this.m_velocities[n532].w;
                                    const w532 = this.m_velocities[o532].v;
                                    let x532 = this.m_velocities[o532].w;
                                    const y532 = m532.normal, z532 = m532.tangent;
                                    for (let a533 = 0; a533 < t532; ++a533) {
                                        const b533 = m532.points[a533];
                                        q451.AddVV(q451.MulSV(b533.normalImpulse, y532, q451.s_t0), q451.MulSV(b533.tangentImpulse, z532, q451.s_t1), k532), v532 -= q532 * q451.CrossVV(b533.rA, k532), u532.SelfMulSub(p532, k532), x532 += s532 * q451.CrossVV(b533.rB, k532), w532.SelfMulAdd(r532, k532);
                                    }
                                    this.m_velocities[n532].w = v532, this.m_velocities[o532].w = x532;
                                }
                            }
                            SolveVelocityConstraints() {
                                const u530 = c459.SolveVelocityConstraints_s_dv, v530 = c459.SolveVelocityConstraints_s_dv1, w530 = c459.SolveVelocityConstraints_s_dv2, x530 = c459.SolveVelocityConstraints_s_P, y530 = c459.SolveVelocityConstraints_s_a, z530 = c459.SolveVelocityConstraints_s_b, a531 = c459.SolveVelocityConstraints_s_x, b531 = c459.SolveVelocityConstraints_s_d, c531 = c459.SolveVelocityConstraints_s_P1, d531 = c459.SolveVelocityConstraints_s_P2, e531 = c459.SolveVelocityConstraints_s_P1P2;
                                for (let f531 = 0; f531 < this.m_count; ++f531) {
                                    const g531 = this.m_velocityConstraints[f531], h531 = g531.indexA, i531 = g531.indexB, j531 = g531.invMassA, k531 = g531.invIA, l531 = g531.invMassB, m531 = g531.invIB, n531 = g531.pointCount, o531 = this.m_velocities[h531].v;
                                    let p531 = this.m_velocities[h531].w;
                                    const q531 = this.m_velocities[i531].v;
                                    let r531 = this.m_velocities[i531].w;
                                    const s531 = g531.normal, t531 = g531.tangent, u531 = g531.friction;
                                    for (let e532 = 0; e532 < n531; ++e532) {
                                        const f532 = g531.points[e532];
                                        q451.SubVV(q451.AddVCrossSV(q531, r531, f532.rB, q451.s_t0), q451.AddVCrossSV(o531, p531, f532.rA, q451.s_t1), u530);
                                        const g532 = q451.DotVV(u530, t531) - g531.tangentSpeed;
                                        let h532 = f532.tangentMass * -g532;
                                        const i532 = u531 * f532.normalImpulse, j532 = z447(f532.tangentImpulse + h532, -i532, i532);
                                        h532 = j532 - f532.tangentImpulse, f532.tangentImpulse = j532, q451.MulSV(h532, t531, x530), o531.SelfMulSub(j531, x530), p531 -= k531 * q451.CrossVV(f532.rA, x530), q531.SelfMulAdd(l531, x530), r531 += m531 * q451.CrossVV(f532.rB, x530);
                                    }
                                    if (1 === g531.pointCount || !1 === w458)
                                        for (let z531 = 0; z531 < n531; ++z531) {
                                            const a532 = g531.points[z531];
                                            q451.SubVV(q451.AddVCrossSV(q531, r531, a532.rB, q451.s_t0), q451.AddVCrossSV(o531, p531, a532.rA, q451.s_t1), u530);
                                            const b532 = q451.DotVV(u530, s531);
                                            let c532 = -a532.normalMass * (b532 - a532.velocityBias);
                                            const d532 = y447(a532.normalImpulse + c532, 0);
                                            c532 = d532 - a532.normalImpulse, a532.normalImpulse = d532, q451.MulSV(c532, s531, x530), o531.SelfMulSub(j531, x530), p531 -= k531 * q451.CrossVV(a532.rA, x530), q531.SelfMulAdd(l531, x530), r531 += m531 * q451.CrossVV(a532.rB, x530);
                                        }
                                    else {
                                        const v531 = g531.points[0], w531 = g531.points[1];
                                        y530.Set(v531.normalImpulse, w531.normalImpulse), q451.SubVV(q451.AddVCrossSV(q531, r531, v531.rB, q451.s_t0), q451.AddVCrossSV(o531, p531, v531.rA, q451.s_t1), v530), q451.SubVV(q451.AddVCrossSV(q531, r531, w531.rB, q451.s_t0), q451.AddVCrossSV(o531, p531, w531.rA, q451.s_t1), w530);
                                        let x531 = q451.DotVV(v530, s531), y531 = q451.DotVV(w530, s531);
                                        for (z530.x = x531 - v531.velocityBias, z530.y = y531 - w531.velocityBias, z530.SelfSub(t451.MulMV(g531.K, y530, q451.s_t0));;) {
                                            if (t451.MulMV(g531.normalMass, z530, a531).SelfNeg(), a531.x >= 0 && a531.y >= 0) {
                                                q451.SubVV(a531, y530, b531), q451.MulSV(b531.x, s531, c531), q451.MulSV(b531.y, s531, d531), q451.AddVV(c531, d531, e531), o531.SelfMulSub(j531, e531), p531 -= k531 * (q451.CrossVV(v531.rA, c531) + q451.CrossVV(w531.rA, d531)), q531.SelfMulAdd(l531, e531), r531 += m531 * (q451.CrossVV(v531.rB, c531) + q451.CrossVV(w531.rB, d531)), v531.normalImpulse = a531.x, w531.normalImpulse = a531.y;
                                                break;
                                            }
                                            if (a531.x = -v531.normalMass * z530.x, a531.y = 0, x531 = 0, y531 = g531.K.ex.y * a531.x + z530.y, a531.x >= 0 && y531 >= 0) {
                                                q451.SubVV(a531, y530, b531), q451.MulSV(b531.x, s531, c531), q451.MulSV(b531.y, s531, d531), q451.AddVV(c531, d531, e531), o531.SelfMulSub(j531, e531), p531 -= k531 * (q451.CrossVV(v531.rA, c531) + q451.CrossVV(w531.rA, d531)), q531.SelfMulAdd(l531, e531), r531 += m531 * (q451.CrossVV(v531.rB, c531) + q451.CrossVV(w531.rB, d531)), v531.normalImpulse = a531.x, w531.normalImpulse = a531.y;
                                                break;
                                            }
                                            if (a531.x = 0, a531.y = -w531.normalMass * z530.y, x531 = g531.K.ey.x * a531.y + z530.x, y531 = 0, a531.y >= 0 && x531 >= 0) {
                                                q451.SubVV(a531, y530, b531), q451.MulSV(b531.x, s531, c531), q451.MulSV(b531.y, s531, d531), q451.AddVV(c531, d531, e531), o531.SelfMulSub(j531, e531), p531 -= k531 * (q451.CrossVV(v531.rA, c531) + q451.CrossVV(w531.rA, d531)), q531.SelfMulAdd(l531, e531), r531 += m531 * (q451.CrossVV(v531.rB, c531) + q451.CrossVV(w531.rB, d531)), v531.normalImpulse = a531.x, w531.normalImpulse = a531.y;
                                                break;
                                            }
                                            if (a531.x = 0, a531.y = 0, x531 = z530.x, y531 = z530.y, x531 >= 0 && y531 >= 0) {
                                                q451.SubVV(a531, y530, b531), q451.MulSV(b531.x, s531, c531), q451.MulSV(b531.y, s531, d531), q451.AddVV(c531, d531, e531), o531.SelfMulSub(j531, e531), p531 -= k531 * (q451.CrossVV(v531.rA, c531) + q451.CrossVV(w531.rA, d531)), q531.SelfMulAdd(l531, e531), r531 += m531 * (q451.CrossVV(v531.rB, c531) + q451.CrossVV(w531.rB, d531)), v531.normalImpulse = a531.x, w531.normalImpulse = a531.y;
                                                break;
                                            }
                                            break;
                                        }
                                    }
                                    this.m_velocities[h531].w = p531, this.m_velocities[i531].w = r531;
                                }
                            }
                            StoreImpulses() {
                                for (let q530 = 0; q530 < this.m_count; ++q530) {
                                    const r530 = this.m_velocityConstraints[q530], s530 = this.m_contacts[r530.contactIndex].GetManifold();
                                    for (let t530 = 0; t530 < r530.pointCount; ++t530)
                                        s530.points[t530].normalImpulse = r530.points[t530].normalImpulse, s530.points[t530].tangentImpulse = r530.points[t530].tangentImpulse;
                                }
                            }
                            SolvePositionConstraints() {
                                const l529 = c459.SolvePositionConstraints_s_xfA, m529 = c459.SolvePositionConstraints_s_xfB, n529 = c459.SolvePositionConstraints_s_psm, o529 = c459.SolvePositionConstraints_s_rA, p529 = c459.SolvePositionConstraints_s_rB, q529 = c459.SolvePositionConstraints_s_P;
                                let r529 = 0;
                                for (let s529 = 0; s529 < this.m_count; ++s529) {
                                    const t529 = this.m_positionConstraints[s529], u529 = t529.indexA, v529 = t529.indexB, w529 = t529.localCenterA, x529 = t529.invMassA, y529 = t529.invIA, z529 = t529.localCenterB, a530 = t529.invMassB, b530 = t529.invIB, c530 = t529.pointCount, d530 = this.m_positions[u529].c;
                                    let e530 = this.m_positions[u529].a;
                                    const f530 = this.m_positions[v529].c;
                                    let g530 = this.m_positions[v529].a;
                                    for (let h530 = 0; h530 < c530; ++h530) {
                                        l529.q.SetAngle(e530), m529.q.SetAngle(g530), q451.SubVV(d530, v451.MulRV(l529.q, w529, q451.s_t0), l529.p), q451.SubVV(f530, v451.MulRV(m529.q, z529, q451.s_t0), m529.p), n529.Initialize(t529, l529, m529, h530);
                                        const i530 = n529.normal, j530 = n529.point, k530 = n529.separation;
                                        q451.SubVV(j530, d530, o529), q451.SubVV(j530, f530, p529), r529 = x447(r529, k530);
                                        const l530 = z447(l450 * (k530 + z449), -f450, 0), m530 = q451.CrossVV(o529, i530), n530 = q451.CrossVV(p529, i530), o530 = x529 + a530 + y529 * m530 * m530 + b530 * n530 * n530, p530 = o530 > 0 ? -l530 / o530 : 0;
                                        q451.MulSV(p530, i530, q529), d530.SelfMulSub(x529, q529), e530 -= y529 * q451.CrossVV(o529, q529), f530.SelfMulAdd(a530, q529), g530 += b530 * q451.CrossVV(p529, q529);
                                    }
                                    this.m_positions[u529].a = e530, this.m_positions[v529].a = g530;
                                }
                                return r529 > -3 * z449;
                            }
                            SolveTOIPositionConstraints(e528, f528) {
                                const g528 = c459.SolveTOIPositionConstraints_s_xfA, h528 = c459.SolveTOIPositionConstraints_s_xfB, i528 = c459.SolveTOIPositionConstraints_s_psm, j528 = c459.SolveTOIPositionConstraints_s_rA, k528 = c459.SolveTOIPositionConstraints_s_rB, l528 = c459.SolveTOIPositionConstraints_s_P;
                                let m528 = 0;
                                for (let n528 = 0; n528 < this.m_count; ++n528) {
                                    const o528 = this.m_positionConstraints[n528], p528 = o528.indexA, q528 = o528.indexB, r528 = o528.localCenterA, s528 = o528.localCenterB, t528 = o528.pointCount;
                                    let u528 = 0, v528 = 0;
                                    p528 !== e528 && p528 !== f528 || (u528 = o528.invMassA, v528 = o528.invIA);
                                    let w528 = 0, x528 = 0;
                                    q528 !== e528 && q528 !== f528 || (w528 = o528.invMassB, x528 = o528.invIB);
                                    const y528 = this.m_positions[p528].c;
                                    let z528 = this.m_positions[p528].a;
                                    const a529 = this.m_positions[q528].c;
                                    let b529 = this.m_positions[q528].a;
                                    for (let c529 = 0; c529 < t528; ++c529) {
                                        g528.q.SetAngle(z528), h528.q.SetAngle(b529), q451.SubVV(y528, v451.MulRV(g528.q, r528, q451.s_t0), g528.p), q451.SubVV(a529, v451.MulRV(h528.q, s528, q451.s_t0), h528.p), i528.Initialize(o528, g528, h528, c529);
                                        const d529 = i528.normal, e529 = i528.point, f529 = i528.separation;
                                        q451.SubVV(e529, y528, j528), q451.SubVV(e529, a529, k528), m528 = x447(m528, f529);
                                        const g529 = z447(m450 * (f529 + z449), -f450, 0), h529 = q451.CrossVV(j528, d529), i529 = q451.CrossVV(k528, d529), j529 = u528 + w528 + v528 * h529 * h529 + x528 * i529 * i529, k529 = j529 > 0 ? -g529 / j529 : 0;
                                        q451.MulSV(k529, d529, l528), y528.SelfMulSub(u528, l528), z528 -= v528 * q451.CrossVV(j528, l528), a529.SelfMulAdd(w528, l528), b529 += x528 * q451.CrossVV(k528, l528);
                                    }
                                    this.m_positions[p528].a = z528, this.m_positions[q528].a = b529;
                                }
                                return m528 >= -1.5 * z449;
                            }
                        }
                        c459.InitializeVelocityConstraints_s_xfA = new w451(), c459.InitializeVelocityConstraints_s_xfB = new w451(), c459.InitializeVelocityConstraints_s_worldManifold = new l453(), c459.WarmStart_s_P = new q451(), c459.SolveVelocityConstraints_s_dv = new q451(), c459.SolveVelocityConstraints_s_dv1 = new q451(), c459.SolveVelocityConstraints_s_dv2 = new q451(), c459.SolveVelocityConstraints_s_P = new q451(), c459.SolveVelocityConstraints_s_a = new q451(), c459.SolveVelocityConstraints_s_b = new q451(), c459.SolveVelocityConstraints_s_x = new q451(), c459.SolveVelocityConstraints_s_d = new q451(), c459.SolveVelocityConstraints_s_P1 = new q451(), c459.SolveVelocityConstraints_s_P2 = new q451(), c459.SolveVelocityConstraints_s_P1P2 = new q451(), c459.SolvePositionConstraints_s_xfA = new w451(), c459.SolvePositionConstraints_s_xfB = new w451(), c459.SolvePositionConstraints_s_psm = new b459(), c459.SolvePositionConstraints_s_rA = new q451(), c459.SolvePositionConstraints_s_rB = new q451(), c459.SolvePositionConstraints_s_P = new q451(), c459.SolveTOIPositionConstraints_s_xfA = new w451(), c459.SolveTOIPositionConstraints_s_xfB = new w451(), c459.SolveTOIPositionConstraints_s_psm = new b459(), c459.SolveTOIPositionConstraints_s_rA = new q451(), c459.SolveTOIPositionConstraints_s_rB = new q451(), c459.SolveTOIPositionConstraints_s_P = new q451();
                        class d459 {
                            constructor() {
                                this.m_bodies = [], this.m_contacts = [], this.m_joints = [], this.m_positions = t458.MakeArray(1024), this.m_velocities = u458.MakeArray(1024), this.m_bodyCount = 0, this.m_jointCount = 0, this.m_contactCount = 0, this.m_bodyCapacity = 0, this.m_contactCapacity = 0, this.m_jointCapacity = 0;
                            }
                            Initialize(y527, z527, a528, b528) {
                                if (this.m_bodyCapacity = y527, this.m_contactCapacity = z527, this.m_jointCapacity = a528, this.m_bodyCount = 0, this.m_contactCount = 0, this.m_jointCount = 0, this.m_listener = b528, this.m_positions.length < y527) {
                                    const d528 = y447(2 * this.m_positions.length, y527);
                                    for (; this.m_positions.length < d528;)
                                        this.m_positions[this.m_positions.length] = new t458();
                                }
                                if (this.m_velocities.length < y527) {
                                    const c528 = y447(2 * this.m_velocities.length, y527);
                                    for (; this.m_velocities.length < c528;)
                                        this.m_velocities[this.m_velocities.length] = new u458();
                                }
                            }
                            Clear() {
                                this.m_bodyCount = 0, this.m_contactCount = 0, this.m_jointCount = 0;
                            }
                            AddBody(x527) {
                                x527.m_islandIndex = this.m_bodyCount, this.m_bodies[this.m_bodyCount++] = x527;
                            }
                            AddContact(w527) {
                                this.m_contacts[this.m_contactCount++] = w527;
                            }
                            AddJoint(v527) {
                                this.m_joints[this.m_jointCount++] = v527;
                            }
                            Solve(i526, j526, k526, l526) {
                                const m526 = d459.s_timer.Reset(), n526 = j526.dt;
                                for (let q527 = 0; q527 < this.m_bodyCount; ++q527) {
                                    const r527 = this.m_bodies[q527];
                                    this.m_positions[q527].c.Copy(r527.m_sweep.c);
                                    const s527 = r527.m_sweep.a, t527 = this.m_velocities[q527].v.Copy(r527.m_linearVelocity);
                                    let u527 = r527.m_angularVelocity;
                                    r527.m_sweep.c0.Copy(r527.m_sweep.c), r527.m_sweep.a0 = r527.m_sweep.a, r527.m_type === m447.b2BodyType.b2_dynamicBody && (t527.x += n526 * (r527.m_gravityScale * k526.x + r527.m_invMass * r527.m_force.x), t527.y += n526 * (r527.m_gravityScale * k526.y + r527.m_invMass * r527.m_force.y), u527 += n526 * r527.m_invI * r527.m_torque, t527.SelfMul(1 / (1 + n526 * r527.m_linearDamping)), u527 *= 1 / (1 + n526 * r527.m_angularDamping)), this.m_positions[q527].a = s527, this.m_velocities[q527].w = u527;
                                }
                                m526.Reset();
                                const o526 = d459.s_solverData;
                                o526.step.Copy(j526), o526.positions = this.m_positions, o526.velocities = this.m_velocities;
                                const p526 = d459.s_contactSolverDef;
                                p526.step.Copy(j526), p526.contacts = this.m_contacts, p526.count = this.m_contactCount, p526.positions = this.m_positions, p526.velocities = this.m_velocities;
                                const q526 = d459.s_contactSolver.Initialize(p526);
                                q526.InitializeVelocityConstraints(), j526.warmStarting && q526.WarmStart();
                                for (let p527 = 0; p527 < this.m_jointCount; ++p527)
                                    this.m_joints[p527].InitVelocityConstraints(o526);
                                i526.solveInit = m526.GetMilliseconds(), m526.Reset();
                                for (let n527 = 0; n527 < j526.velocityIterations; ++n527) {
                                    for (let o527 = 0; o527 < this.m_jointCount; ++o527)
                                        this.m_joints[o527].SolveVelocityConstraints(o526);
                                    q526.SolveVelocityConstraints();
                                }
                                q526.StoreImpulses(), i526.solveVelocity = m526.GetMilliseconds();
                                for (let f527 = 0; f527 < this.m_bodyCount; ++f527) {
                                    const g527 = this.m_positions[f527].c;
                                    let h527 = this.m_positions[f527].a;
                                    const i527 = this.m_velocities[f527].v;
                                    let j527 = this.m_velocities[f527].w;
                                    const k527 = q451.MulSV(n526, i527, d459.s_translation);
                                    if (q451.DotVV(k527, k527) > i450) {
                                        const m527 = h450 / k527.Length();
                                        i527.SelfMul(m527);
                                    }
                                    const l527 = n526 * j527;
                                    l527 * l527 > k450 && (j527 *= j450 / h451(l527)), g527.x += n526 * i527.x, g527.y += n526 * i527.y, h527 += n526 * j527, this.m_positions[f527].a = h527, this.m_velocities[f527].w = j527;
                                }
                                m526.Reset();
                                let r526 = !1;
                                for (let a527 = 0; a527 < j526.positionIterations; ++a527) {
                                    const b527 = q526.SolvePositionConstraints();
                                    let c527 = !0;
                                    for (let d527 = 0; d527 < this.m_jointCount; ++d527) {
                                        const e527 = this.m_joints[d527].SolvePositionConstraints(o526);
                                        c527 = c527 && e527;
                                    }
                                    if (b527 && c527) {
                                        r526 = !0;
                                        break;
                                    }
                                }
                                for (let y526 = 0; y526 < this.m_bodyCount; ++y526) {
                                    const z526 = this.m_bodies[y526];
                                    z526.m_sweep.c.Copy(this.m_positions[y526].c), z526.m_sweep.a = this.m_positions[y526].a, z526.m_linearVelocity.Copy(this.m_velocities[y526].v), z526.m_angularVelocity = this.m_velocities[y526].w, z526.SynchronizeTransform();
                                }
                                if (i526.solvePosition = m526.GetMilliseconds(), this.Report(q526.m_velocityConstraints), l526) {
                                    let s526 = r449;
                                    const t526 = y450 * y450, u526 = z450 * z450;
                                    for (let w526 = 0; w526 < this.m_bodyCount; ++w526) {
                                        const x526 = this.m_bodies[w526];
                                        x526.GetType() !== m447.b2BodyType.b2_staticBody && (!x526.m_autoSleepFlag || x526.m_angularVelocity * x526.m_angularVelocity > u526 || q451.DotVV(x526.m_linearVelocity, x526.m_linearVelocity) > t526 ? (x526.m_sleepTime = 0, s526 = 0) : (x526.m_sleepTime += n526, s526 = x447(s526, x526.m_sleepTime)));
                                    }
                                    if (s526 >= x450 && r526)
                                        for (let v526 = 0; v526 < this.m_bodyCount; ++v526)
                                            this.m_bodies[v526].SetAwake(!1);
                                }
                            }
                            SolveTOI(p525, q525, r525) {
                                for (let g526 = 0; g526 < this.m_bodyCount; ++g526) {
                                    const h526 = this.m_bodies[g526];
                                    this.m_positions[g526].c.Copy(h526.m_sweep.c), this.m_positions[g526].a = h526.m_sweep.a, this.m_velocities[g526].v.Copy(h526.m_linearVelocity), this.m_velocities[g526].w = h526.m_angularVelocity;
                                }
                                const s525 = d459.s_contactSolverDef;
                                s525.contacts = this.m_contacts, s525.count = this.m_contactCount, s525.step.Copy(p525), s525.positions = this.m_positions, s525.velocities = this.m_velocities;
                                const t525 = d459.s_contactSolver.Initialize(s525);
                                for (let f526 = 0; f526 < p525.positionIterations && !t525.SolveTOIPositionConstraints(q525, r525); ++f526)
                                    ;
                                this.m_bodies[q525].m_sweep.c0.Copy(this.m_positions[q525].c), this.m_bodies[q525].m_sweep.a0 = this.m_positions[q525].a, this.m_bodies[r525].m_sweep.c0.Copy(this.m_positions[r525].c), this.m_bodies[r525].m_sweep.a0 = this.m_positions[r525].a, t525.InitializeVelocityConstraints();
                                for (let e526 = 0; e526 < p525.velocityIterations; ++e526)
                                    t525.SolveVelocityConstraints();
                                const u525 = p525.dt;
                                for (let v525 = 0; v525 < this.m_bodyCount; ++v525) {
                                    const w525 = this.m_positions[v525].c;
                                    let x525 = this.m_positions[v525].a;
                                    const y525 = this.m_velocities[v525].v;
                                    let z525 = this.m_velocities[v525].w;
                                    const a526 = q451.MulSV(u525, y525, d459.s_translation);
                                    if (q451.DotVV(a526, a526) > i450) {
                                        const d526 = h450 / a526.Length();
                                        y525.SelfMul(d526);
                                    }
                                    const b526 = u525 * z525;
                                    b526 * b526 > k450 && (z525 *= j450 / h451(b526)), w525.SelfMulAdd(u525, y525), x525 += u525 * z525, this.m_positions[v525].a = x525, this.m_velocities[v525].w = z525;
                                    const c526 = this.m_bodies[v525];
                                    c526.m_sweep.c.Copy(w525), c526.m_sweep.a = x525, c526.m_linearVelocity.Copy(y525), c526.m_angularVelocity = z525, c526.SynchronizeTransform();
                                }
                                this.Report(t525.m_velocityConstraints);
                            }
                            Report(j525) {
                                if (null !== this.m_listener)
                                    for (let k525 = 0; k525 < this.m_contactCount; ++k525) {
                                        const l525 = this.m_contacts[k525];
                                        if (!l525)
                                            continue;
                                        const m525 = j525[k525], n525 = d459.s_impulse;
                                        n525.count = m525.pointCount;
                                        for (let o525 = 0; o525 < m525.pointCount; ++o525)
                                            n525.normalImpulses[o525] = m525.points[o525].normalImpulse, n525.tangentImpulses[o525] = m525.points[o525].tangentImpulse;
                                        this.m_listener.PostSolve(l525, n525);
                                    }
                            }
                        }
                        var e459, f459;
                        d459.s_timer = new b452(), d459.s_solverData = new v458(), d459.s_contactSolverDef = new a459(), d459.s_contactSolver = new c459(), d459.s_translation = new q451(), d459.s_impulse = new m458(), (e459 = m447.b2ParticleFlag || (m447.b2ParticleFlag = {}))[e459.b2_waterParticle = 0] = "b2_waterParticle", e459[e459.b2_zombieParticle = 2] = "b2_zombieParticle", e459[e459.b2_wallParticle = 4] = "b2_wallParticle", e459[e459.b2_springParticle = 8] = "b2_springParticle", e459[e459.b2_elasticParticle = 16] = "b2_elasticParticle", e459[e459.b2_viscousParticle = 32] = "b2_viscousParticle", e459[e459.b2_powderParticle = 64] = "b2_powderParticle", e459[e459.b2_tensileParticle = 128] = "b2_tensileParticle", e459[e459.b2_colorMixingParticle = 256] = "b2_colorMixingParticle", e459[e459.b2_destructionListenerParticle = 512] = "b2_destructionListenerParticle", e459[e459.b2_barrierParticle = 1024] = "b2_barrierParticle", e459[e459.b2_staticPressureParticle = 2048] = "b2_staticPressureParticle", e459[e459.b2_reactiveParticle = 4096] = "b2_reactiveParticle", e459[e459.b2_repulsiveParticle = 8192] = "b2_repulsiveParticle", e459[e459.b2_fixtureContactListenerParticle = 16384] = "b2_fixtureContactListenerParticle", e459[e459.b2_particleContactListenerParticle = 32768] = "b2_particleContactListenerParticle", e459[e459.b2_fixtureContactFilterParticle = 65536] = "b2_fixtureContactFilterParticle", e459[e459.b2_particleContactFilterParticle = 131072] = "b2_particleContactFilterParticle";
                        class g459 {
                            constructor() {
                                this.flags = 0, this.position = new q451(), this.velocity = new q451(), this.color = new y451(0, 0, 0, 0), this.lifetime = 0, this.userData = null, this.group = null;
                            }
                        }
                        function h449(e525, f525, g525) {
                            const h525 = 8, i525 = .01;
                            return z447(Math.ceil(Math.sqrt(e525 / (i525 * f525)) * g525), 1, h525);
                        }
                        class h459 {
                            constructor() {
                                this.m_index = n450;
                            }
                            GetIndex() {
                                return this.m_index;
                            }
                            SetIndex(d525) {
                                this.m_index = d525;
                            }
                        }
                        (f459 = m447.b2ParticleGroupFlag || (m447.b2ParticleGroupFlag = {}))[f459.b2_solidParticleGroup = 1] = "b2_solidParticleGroup", f459[f459.b2_rigidParticleGroup = 2] = "b2_rigidParticleGroup", f459[f459.b2_particleGroupCanBeEmpty = 4] = "b2_particleGroupCanBeEmpty", f459[f459.b2_particleGroupWillBeDestroyed = 8] = "b2_particleGroupWillBeDestroyed", f459[f459.b2_particleGroupNeedsUpdateDepth = 16] = "b2_particleGroupNeedsUpdateDepth", f459[f459.b2_particleGroupInternalMask = 24] = "b2_particleGroupInternalMask";
                        class i459 {
                            constructor() {
                                this.flags = 0, this.groupFlags = 0, this.position = new q451(), this.angle = 0, this.linearVelocity = new q451(), this.angularVelocity = 0, this.color = new y451(), this.strength = 1, this.shapeCount = 0, this.stride = 0, this.particleCount = 0, this.lifetime = 0, this.userData = null, this.group = null;
                            }
                        }
                        class j459 {
                            constructor(c525) {
                                this.m_firstIndex = 0, this.m_lastIndex = 0, this.m_groupFlags = 0, this.m_strength = 1, this.m_prev = null, this.m_next = null, this.m_timestamp = -1, this.m_mass = 0, this.m_inertia = 0, this.m_center = new q451(), this.m_linearVelocity = new q451(), this.m_angularVelocity = 0, this.m_transform = new w451(), this.m_userData = null, this.m_system = c525;
                            }
                            GetNext() {
                                return this.m_next;
                            }
                            GetParticleSystem() {
                                return this.m_system;
                            }
                            GetParticleCount() {
                                return this.m_lastIndex - this.m_firstIndex;
                            }
                            GetBufferIndex() {
                                return this.m_firstIndex;
                            }
                            ContainsParticle(b525) {
                                return this.m_firstIndex <= b525 && b525 < this.m_lastIndex;
                            }
                            GetAllParticleFlags() {
                                if (!this.m_system.m_flagsBuffer.data)
                                    throw new Error();
                                let z524 = 0;
                                for (let a525 = this.m_firstIndex; a525 < this.m_lastIndex; a525++)
                                    z524 |= this.m_system.m_flagsBuffer.data[a525];
                                return z524;
                            }
                            GetGroupFlags() {
                                return this.m_groupFlags;
                            }
                            SetGroupFlags(y524) {
                                y524 |= this.m_groupFlags & m447.b2ParticleGroupFlag.b2_particleGroupInternalMask, this.m_system.SetGroupFlags(this, y524);
                            }
                            GetMass() {
                                return this.UpdateStatistics(), this.m_mass;
                            }
                            GetInertia() {
                                return this.UpdateStatistics(), this.m_inertia;
                            }
                            GetCenter() {
                                return this.UpdateStatistics(), this.m_center;
                            }
                            GetLinearVelocity() {
                                return this.UpdateStatistics(), this.m_linearVelocity;
                            }
                            GetAngularVelocity() {
                                return this.UpdateStatistics(), this.m_angularVelocity;
                            }
                            GetTransform() {
                                return this.m_transform;
                            }
                            GetPosition() {
                                return this.m_transform.p;
                            }
                            GetAngle() {
                                return this.m_transform.q.GetAngle();
                            }
                            GetLinearVelocityFromWorldPoint(v524, w524) {
                                const x524 = j459.GetLinearVelocityFromWorldPoint_s_t0;
                                return this.UpdateStatistics(), q451.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, q451.SubVV(v524, this.m_center, x524), w524);
                            }
                            GetUserData() {
                                return this.m_userData;
                            }
                            SetUserData(u524) {
                                this.m_userData = u524;
                            }
                            ApplyForce(t524) {
                                this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, t524);
                            }
                            ApplyLinearImpulse(s524) {
                                this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, s524);
                            }
                            DestroyParticles(q524) {
                                if (this.m_system.m_world.IsLocked())
                                    throw new Error();
                                for (let r524 = this.m_firstIndex; r524 < this.m_lastIndex; r524++)
                                    this.m_system.DestroyParticle(r524, q524);
                            }
                            UpdateStatistics() {
                                if (!this.m_system.m_positionBuffer.data)
                                    throw new Error();
                                if (!this.m_system.m_velocityBuffer.data)
                                    throw new Error();
                                const k524 = new q451(), l524 = new q451();
                                if (this.m_timestamp !== this.m_system.m_timestamp) {
                                    const m524 = this.m_system.GetParticleMass();
                                    this.m_mass = m524 * (this.m_lastIndex - this.m_firstIndex), this.m_center.SetZero(), this.m_linearVelocity.SetZero();
                                    for (let p524 = this.m_firstIndex; p524 < this.m_lastIndex; p524++)
                                        this.m_center.SelfMulAdd(m524, this.m_system.m_positionBuffer.data[p524]), this.m_linearVelocity.SelfMulAdd(m524, this.m_system.m_velocityBuffer.data[p524]);
                                    if (this.m_mass > 0) {
                                        const o524 = 1 / this.m_mass;
                                        this.m_center.SelfMul(o524), this.m_linearVelocity.SelfMul(o524);
                                    }
                                    this.m_inertia = 0, this.m_angularVelocity = 0;
                                    for (let n524 = this.m_firstIndex; n524 < this.m_lastIndex; n524++)
                                        q451.SubVV(this.m_system.m_positionBuffer.data[n524], this.m_center, k524), q451.SubVV(this.m_system.m_velocityBuffer.data[n524], this.m_linearVelocity, l524), this.m_inertia += m524 * q451.DotVV(k524, k524), this.m_angularVelocity += m524 * q451.CrossVV(k524, l524);
                                    this.m_inertia > 0 && (this.m_angularVelocity *= 1 / this.m_inertia), this.m_timestamp = this.m_system.m_timestamp;
                                }
                            }
                        }
                        j459.GetLinearVelocityFromWorldPoint_s_t0 = new q451();
                        class k459 {
                            constructor(j524) {
                                this.m_buffer = [], this.m_front = 0, this.m_back = 0, this.m_buffer.fill(null, 0, j524);
                            }
                            get m_capacity() {
                                return this.m_buffer.length;
                            }
                            Push(h524) {
                                if (this.m_back >= this.m_capacity) {
                                    for (let i524 = this.m_front; i524 < this.m_back; i524++)
                                        this.m_buffer[i524 - this.m_front] = this.m_buffer[i524];
                                    this.m_back -= this.m_front, this.m_front = 0;
                                }
                                this.m_buffer[this.m_back] = h524, this.m_back++;
                            }
                            Pop() {
                                this.m_buffer[this.m_front] = null, this.m_front++;
                            }
                            Empty() {
                                return this.m_front === this.m_back;
                            }
                            Front() {
                                const g524 = this.m_buffer[this.m_front];
                                if (!g524)
                                    throw new Error();
                                return g524;
                            }
                        }
                        class l459 {
                            constructor(e524) {
                                this.m_generatorCapacity = 0, this.m_generatorCount = 0, this.m_countX = 0, this.m_countY = 0, this.m_diagram = [], this.m_generatorBuffer = u447(e524, () => new m459()), this.m_generatorCapacity = e524;
                            }
                            AddGenerator(a524, b524, c524) {
                                const d524 = this.m_generatorBuffer[this.m_generatorCount++];
                                d524.center.Copy(a524), d524.tag = b524, d524.necessary = c524;
                            }
                            Generate(n522, o522) {
                                const p522 = 1 / n522, q522 = new q451(+r449, +r449), r522 = new q451(-r449, -r449);
                                let s522 = 0;
                                for (let y523 = 0; y523 < this.m_generatorCount; y523++) {
                                    const z523 = this.m_generatorBuffer[y523];
                                    z523.necessary && (q451.MinV(q522, z523.center, q522), q451.MaxV(r522, z523.center, r522), ++s522);
                                }
                                if (0 === s522)
                                    return this.m_countX = 0, void (this.m_countY = 0);
                                q522.x -= o522, q522.y -= o522, r522.x += o522, r522.y += o522, this.m_countX = 1 + Math.floor(p522 * (r522.x - q522.x)), this.m_countY = 1 + Math.floor(p522 * (r522.y - q522.y)), this.m_diagram = [];
                                const t522 = new k459(4 * this.m_countX * this.m_countY);
                                for (let u523 = 0; u523 < this.m_generatorCount; u523++) {
                                    const v523 = this.m_generatorBuffer[u523];
                                    v523.center.SelfSub(q522).SelfMul(p522);
                                    const w523 = Math.floor(v523.center.x), x523 = Math.floor(v523.center.y);
                                    w523 >= 0 && x523 >= 0 && w523 < this.m_countX && x523 < this.m_countY && t522.Push(new n459(w523, x523, w523 + x523 * this.m_countX, v523));
                                }
                                for (; !t522.Empty();) {
                                    const p523 = t522.Front(), q523 = p523.m_x, r523 = p523.m_y, s523 = p523.m_i, t523 = p523.m_generator;
                                    t522.Pop(), this.m_diagram[s523] || (this.m_diagram[s523] = t523, q523 > 0 && t522.Push(new n459(q523 - 1, r523, s523 - 1, t523)), r523 > 0 && t522.Push(new n459(q523, r523 - 1, s523 - this.m_countX, t523)), q523 < this.m_countX - 1 && t522.Push(new n459(q523 + 1, r523, s523 + 1, t523)), r523 < this.m_countY - 1 && t522.Push(new n459(q523, r523 + 1, s523 + this.m_countX, t523)));
                                }
                                for (let k523 = 0; k523 < this.m_countY; k523++)
                                    for (let l523 = 0; l523 < this.m_countX - 1; l523++) {
                                        const m523 = l523 + k523 * this.m_countX, n523 = this.m_diagram[m523], o523 = this.m_diagram[m523 + 1];
                                        n523 !== o523 && (t522.Push(new n459(l523, k523, m523, o523)), t522.Push(new n459(l523 + 1, k523, m523 + 1, n523)));
                                    }
                                for (let f523 = 0; f523 < this.m_countY - 1; f523++)
                                    for (let g523 = 0; g523 < this.m_countX; g523++) {
                                        const h523 = g523 + f523 * this.m_countX, i523 = this.m_diagram[h523], j523 = this.m_diagram[h523 + this.m_countX];
                                        i523 !== j523 && (t522.Push(new n459(g523, f523, h523, j523)), t522.Push(new n459(g523, f523 + 1, h523 + this.m_countX, i523)));
                                    }
                                for (; !t522.Empty();) {
                                    const u522 = t522.Front(), v522 = u522.m_x, w522 = u522.m_y, x522 = u522.m_i, y522 = u522.m_generator;
                                    t522.Pop();
                                    const z522 = this.m_diagram[x522], a523 = y522;
                                    if (z522 !== a523) {
                                        const b523 = z522.center.x - v522, c523 = z522.center.y - w522, d523 = a523.center.x - v522, e523 = a523.center.y - w522;
                                        b523 * b523 + c523 * c523 > d523 * d523 + e523 * e523 && (this.m_diagram[x522] = a523, v522 > 0 && t522.Push(new n459(v522 - 1, w522, x522 - 1, a523)), w522 > 0 && t522.Push(new n459(v522, w522 - 1, x522 - this.m_countX, a523)), v522 < this.m_countX - 1 && t522.Push(new n459(v522 + 1, w522, x522 + 1, a523)), w522 < this.m_countY - 1 && t522.Push(new n459(v522, w522 + 1, x522 + this.m_countX, a523)));
                                    }
                                }
                            }
                            GetNodes(f522) {
                                for (let g522 = 0; g522 < this.m_countY - 1; g522++)
                                    for (let h522 = 0; h522 < this.m_countX - 1; h522++) {
                                        const i522 = h522 + g522 * this.m_countX, j522 = this.m_diagram[i522], k522 = this.m_diagram[i522 + 1], l522 = this.m_diagram[i522 + this.m_countX], m522 = this.m_diagram[i522 + 1 + this.m_countX];
                                        k522 !== l522 && (j522 !== k522 && j522 !== l522 && (j522.necessary || k522.necessary || l522.necessary) && f522(j522.tag, k522.tag, l522.tag), m522 !== k522 && m522 !== l522 && (j522.necessary || k522.necessary || l522.necessary) && f522(k522.tag, m522.tag, l522.tag));
                                    }
                            }
                        }
                        class m459 {
                            constructor() {
                                this.center = new q451(), this.tag = 0, this.necessary = !1;
                            }
                        }
                        class n459 {
                            constructor(b522, c522, d522, e522) {
                                this.m_x = b522, this.m_y = c522, this.m_i = d522, this.m_generator = e522;
                            }
                        }
                        function i449(x521, y521, z521) {
                            const a522 = x521[y521];
                            x521[y521] = x521[z521], x521[z521] = a522;
                        }
                        function j449(v521, w521) {
                            return v521 < w521;
                        }
                        function k449(m521, n521 = 0, o521 = m521.length - n521, p521 = j449) {
                            let q521 = n521;
                            const r521 = [];
                            let s521 = 0;
                            for (;;) {
                                for (; q521 + 1 < o521; o521++) {
                                    const t521 = m521[q521 + Math.floor(Math.random() * (o521 - q521))];
                                    r521[s521++] = o521;
                                    for (let u521 = q521 - 1;;) {
                                        for (; p521(m521[++u521], t521);)
                                            ;
                                        for (; p521(t521, m521[--o521]);)
                                            ;
                                        if (u521 >= o521)
                                            break;
                                        i449(m521, u521, o521);
                                    }
                                }
                                if (0 === s521)
                                    break;
                                q521 = o521, o521 = r521[--s521];
                            }
                            return m521;
                        }
                        function l449(i521, j521 = 0, k521 = i521.length - j521, l521 = j449) {
                            return k449(i521, j521, k521, l521);
                        }
                        function m449(d521, e521, f521 = d521.length) {
                            let g521 = 0;
                            for (let h521 = 0; h521 < f521; ++h521)
                                e521(d521[h521]) || (h521 !== g521 ? i449(d521, g521++, h521) : ++g521);
                            return g521;
                        }
                        function n449(v520, w520, x520, y520, z520) {
                            let a521 = x520 - w520;
                            for (; a521 > 0;) {
                                const b521 = Math.floor(a521 / 2);
                                let c521 = w520 + b521;
                                z520(v520[c521], y520) ? (w520 = ++c521, a521 -= b521 + 1) : a521 = b521;
                            }
                            return w520;
                        }
                        function o449(n520, o520, p520, q520, r520) {
                            let s520 = p520 - o520;
                            for (; s520 > 0;) {
                                const t520 = Math.floor(s520 / 2);
                                let u520 = o520 + t520;
                                r520(q520, n520[u520]) ? s520 = t520 : (o520 = ++u520, s520 -= t520 + 1);
                            }
                            return o520;
                        }
                        function p449(i520, j520, k520, l520) {
                            let m520 = k520;
                            for (; j520 !== m520;)
                                i449(i520, j520++, m520++), m520 === l520 ? m520 = k520 : j520 === k520 && (k520 = m520);
                        }
                        function q449(d520, e520, f520, g520) {
                            if (e520 === f520)
                                return f520;
                            let h520 = e520;
                            for (; ++e520 !== f520;)
                                g520(d520[h520], d520[e520]) || i449(d520, ++h520, e520);
                            return ++h520;
                        }
                        class o459 {
                            constructor(c520) {
                                this.data = [], this.count = 0, this.capacity = 0, this.allocator = c520;
                            }
                            Append() {
                                return this.count >= this.capacity && this.Grow(), this.count++;
                            }
                            Reserve(a520) {
                                if (!(this.capacity >= a520)) {
                                    for (let b520 = this.capacity; b520 < a520; ++b520)
                                        this.data[b520] = this.allocator();
                                    this.capacity = a520;
                                }
                            }
                            Grow() {
                                const z519 = this.capacity ? 2 * this.capacity : v450;
                                this.Reserve(z519);
                            }
                            Free() {
                                0 !== this.data.length && (this.data = [], this.capacity = 0, this.count = 0);
                            }
                            Shorten(y519) { }
                            Data() {
                                return this.data;
                            }
                            GetCount() {
                                return this.count;
                            }
                            SetCount(x519) {
                                this.count = x519;
                            }
                            GetCapacity() {
                                return this.capacity;
                            }
                            RemoveIf(w519) {
                                this.count = m449(this.data, w519, this.count);
                            }
                            Unique(v519) {
                                this.count = q449(this.data, 0, this.count, v519);
                            }
                        }
                        class p459 extends o458 {
                            constructor(u519) {
                                super(), this.m_system = u519;
                            }
                            ShouldQueryParticleSystem(t519) {
                                return !1;
                            }
                            ReportFixture(n519) {
                                if (n519.IsSensor())
                                    return !0;
                                const o519 = n519.GetShape().GetChildCount();
                                for (let p519 = 0; p519 < o519; p519++) {
                                    const q519 = n519.GetAABB(p519), r519 = this.m_system.GetInsideBoundsEnumerator(q519);
                                    let s519;
                                    for (; (s519 = r519.GetNext()) >= 0;)
                                        this.ReportFixtureAndParticle(n519, p519, s519);
                                }
                                return !0;
                            }
                            ReportParticle(l519, m519) {
                                return !1;
                            }
                            ReportFixtureAndParticle(i519, j519, k519) { }
                        }
                        class q459 {
                            constructor() {
                                this.indexA = 0, this.indexB = 0, this.weight = 0, this.normal = new q451(), this.flags = 0;
                            }
                            SetIndices(g519, h519) {
                                this.indexA = g519, this.indexB = h519;
                            }
                            SetWeight(f519) {
                                this.weight = f519;
                            }
                            SetNormal(e519) {
                                this.normal.Copy(e519);
                            }
                            SetFlags(d519) {
                                this.flags = d519;
                            }
                            GetIndexA() {
                                return this.indexA;
                            }
                            GetIndexB() {
                                return this.indexB;
                            }
                            GetWeight() {
                                return this.weight;
                            }
                            GetNormal() {
                                return this.normal;
                            }
                            GetFlags() {
                                return this.flags;
                            }
                            IsEqual(c519) {
                                return this.indexA === c519.indexA && this.indexB === c519.indexB && this.flags === c519.flags && this.weight === c519.weight && this.normal.x === c519.normal.x && this.normal.y === c519.normal.y;
                            }
                            IsNotEqual(b519) {
                                return !this.IsEqual(b519);
                            }
                            ApproximatelyEqual(y518) {
                                const z518 = .01, a519 = 1e-4;
                                return this.indexA === y518.indexA && this.indexB === y518.indexB && this.flags === y518.flags && h451(this.weight - y518.weight) < z518 && q451.DistanceSquaredVV(this.normal, y518.normal) < a519;
                            }
                        }
                        class r459 {
                            constructor() {
                                this.index = 0, this.weight = 0, this.normal = new q451(), this.mass = 0;
                            }
                        }
                        class s459 {
                            constructor() {
                                this.indexA = 0, this.indexB = 0, this.flags = 0, this.strength = 0, this.distance = 0;
                            }
                        }
                        class t459 {
                            constructor() {
                                this.indexA = 0, this.indexB = 0, this.indexC = 0, this.flags = 0, this.strength = 0, this.pa = new q451(0, 0), this.pb = new q451(0, 0), this.pc = new q451(0, 0), this.ka = 0, this.kb = 0, this.kc = 0, this.s = 0;
                            }
                        }
                        class u459 {
                            constructor() {
                                this.strictContactCheck = !1, this.density = 1, this.gravityScale = 1, this.radius = 1, this.maxCount = 0, this.pressureStrength = .005, this.dampingStrength = 1, this.elasticStrength = .25, this.springStrength = .25, this.viscousStrength = .25, this.surfaceTensionPressureStrength = .2, this.surfaceTensionNormalStrength = .2, this.repulsiveStrength = 1, this.powderStrength = .5, this.ejectionStrength = .5, this.staticPressureStrength = .2, this.staticPressureRelaxation = .2, this.staticPressureIterations = 8, this.colorMixingStrength = .5, this.destroyByAge = !0, this.lifetimeGranularity = 1 / 60;
                            }
                            Copy(x518) {
                                return this.strictContactCheck = x518.strictContactCheck, this.density = x518.density, this.gravityScale = x518.gravityScale, this.radius = x518.radius, this.maxCount = x518.maxCount, this.pressureStrength = x518.pressureStrength, this.dampingStrength = x518.dampingStrength, this.elasticStrength = x518.elasticStrength, this.springStrength = x518.springStrength, this.viscousStrength = x518.viscousStrength, this.surfaceTensionPressureStrength = x518.surfaceTensionPressureStrength, this.surfaceTensionNormalStrength = x518.surfaceTensionNormalStrength, this.repulsiveStrength = x518.repulsiveStrength, this.powderStrength = x518.powderStrength, this.ejectionStrength = x518.ejectionStrength, this.staticPressureStrength = x518.staticPressureStrength, this.staticPressureRelaxation = x518.staticPressureRelaxation, this.staticPressureIterations = x518.staticPressureIterations, this.colorMixingStrength = x518.colorMixingStrength, this.destroyByAge = x518.destroyByAge, this.lifetimeGranularity = x518.lifetimeGranularity, this;
                            }
                            Clone() {
                                return new u459().Copy(this);
                            }
                        }
                        class v459 {
                            constructor(p518, q518) {
                                this.m_paused = !1, this.m_timestamp = 0, this.m_allParticleFlags = 0, this.m_needsUpdateAllParticleFlags = !1, this.m_allGroupFlags = 0, this.m_needsUpdateAllGroupFlags = !1, this.m_hasForce = !1, this.m_iterationIndex = 0, this.m_inverseDensity = 0, this.m_particleDiameter = 0, this.m_inverseDiameter = 0, this.m_squaredDiameter = 0, this.m_count = 0, this.m_internalAllocatedCapacity = 0, this.m_handleIndexBuffer = new w459(), this.m_flagsBuffer = new w459(), this.m_positionBuffer = new w459(), this.m_velocityBuffer = new w459(), this.m_forceBuffer = [], this.m_weightBuffer = [], this.m_staticPressureBuffer = [], this.m_accumulationBuffer = [], this.m_accumulation2Buffer = [], this.m_depthBuffer = [], this.m_colorBuffer = new w459(), this.m_groupBuffer = [], this.m_userDataBuffer = new w459(), this.m_stuckThreshold = 0, this.m_lastBodyContactStepBuffer = new w459(), this.m_bodyContactCountBuffer = new w459(), this.m_consecutiveContactStepsBuffer = new w459(), this.m_stuckParticleBuffer = new o459(() => 0), this.m_proxyBuffer = new o459(() => new x459()), this.m_contactBuffer = new o459(() => new q459()), this.m_bodyContactBuffer = new o459(() => new r459()), this.m_pairBuffer = new o459(() => new s459()), this.m_triadBuffer = new o459(() => new t459()), this.m_expirationTimeBuffer = new w459(), this.m_indexByExpirationTimeBuffer = new w459(), this.m_timeElapsed = 0, this.m_expirationTimeBufferRequiresSorting = !1, this.m_groupCount = 0, this.m_groupList = null, this.m_def = new u459(), this.m_prev = null, this.m_next = null, this.UpdateBodyContacts_callback = null, this.SolveCollision_callback = null, this.SetStrictContactCheck(p518.strictContactCheck), this.SetDensity(p518.density), this.SetGravityScale(p518.gravityScale), this.SetRadius(p518.radius), this.SetMaxParticleCount(p518.maxCount), this.m_def = p518.Clone(), this.m_world = q518, this.SetDestructionByAge(this.m_def.destroyByAge);
                            }
                            static computeTag(n518, o518) {
                                return (o518 + v459.yOffset >>> 0 << v459.yShift) + (v459.xScale * n518 + v459.xOffset >>> 0) >>> 0;
                            }
                            static computeRelativeTag(k518, l518, m518) {
                                return k518 + (m518 << v459.yShift) + (l518 << v459.xShift) >>> 0;
                            }
                            Drop() {
                                for (; this.m_groupList;)
                                    this.DestroyParticleGroup(this.m_groupList);
                                this.FreeUserOverridableBuffer(this.m_handleIndexBuffer), this.FreeUserOverridableBuffer(this.m_flagsBuffer), this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer), this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer), this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer), this.FreeUserOverridableBuffer(this.m_positionBuffer), this.FreeUserOverridableBuffer(this.m_velocityBuffer), this.FreeUserOverridableBuffer(this.m_colorBuffer), this.FreeUserOverridableBuffer(this.m_userDataBuffer), this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer), this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer), this.FreeBuffer(this.m_forceBuffer, this.m_internalAllocatedCapacity), this.FreeBuffer(this.m_weightBuffer, this.m_internalAllocatedCapacity), this.FreeBuffer(this.m_staticPressureBuffer, this.m_internalAllocatedCapacity), this.FreeBuffer(this.m_accumulationBuffer, this.m_internalAllocatedCapacity), this.FreeBuffer(this.m_accumulation2Buffer, this.m_internalAllocatedCapacity), this.FreeBuffer(this.m_depthBuffer, this.m_internalAllocatedCapacity), this.FreeBuffer(this.m_groupBuffer, this.m_internalAllocatedCapacity);
                            }
                            CreateParticle(c518) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                if (this.m_count >= this.m_internalAllocatedCapacity) {
                                    const j518 = this.m_count ? 2 * this.m_count : v450;
                                    this.ReallocateInternalAllocatedBuffers(j518);
                                }
                                if (this.m_count >= this.m_internalAllocatedCapacity) {
                                    if (!this.m_def.destroyByAge)
                                        return n450;
                                    this.DestroyOldestParticle(0, !1), this.SolveZombie();
                                }
                                const d518 = this.m_count++;
                                this.m_flagsBuffer.data[d518] = 0, this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[d518] = 0), this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[d518] = 0), this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[d518] = 0), this.m_positionBuffer.data[d518] = (this.m_positionBuffer.data[d518] || new q451()).Copy(o447(c518.position, q451.ZERO)), this.m_velocityBuffer.data[d518] = (this.m_velocityBuffer.data[d518] || new q451()).Copy(o447(c518.velocity, q451.ZERO)), this.m_weightBuffer[d518] = 0, this.m_forceBuffer[d518] = (this.m_forceBuffer[d518] || new q451()).SetZero(), this.m_staticPressureBuffer && (this.m_staticPressureBuffer[d518] = 0), this.m_depthBuffer && (this.m_depthBuffer[d518] = 0);
                                const e518 = new y451().Copy(o447(c518.color, y451.ZERO));
                                !this.m_colorBuffer.data && e518.IsZero() || (this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data), this.m_colorBuffer.data[d518] = (this.m_colorBuffer.data[d518] || new y451()).Copy(e518)), (this.m_userDataBuffer.data || c518.userData) && (this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data), this.m_userDataBuffer.data[d518] = c518.userData), this.m_handleIndexBuffer.data && (this.m_handleIndexBuffer.data[d518] = null);
                                const f518 = this.m_proxyBuffer.data[this.m_proxyBuffer.Append()], g518 = o447(c518.lifetime, 0), h518 = g518 > 0;
                                (this.m_expirationTimeBuffer.data || h518) && (this.SetParticleLifetime(d518, h518 ? g518 : this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed())), this.m_indexByExpirationTimeBuffer.data[d518] = d518), f518.index = d518;
                                const i518 = o447(c518.group, null);
                                return this.m_groupBuffer[d518] = i518, i518 && (i518.m_firstIndex < i518.m_lastIndex ? (this.RotateBuffer(i518.m_firstIndex, i518.m_lastIndex, d518), i518.m_lastIndex = d518 + 1) : (i518.m_firstIndex = d518, i518.m_lastIndex = d518 + 1)), this.SetParticleFlags(d518, o447(c518.flags, 0)), d518;
                            }
                            GetParticleHandleFromIndex(a518) {
                                this.m_handleIndexBuffer.data = this.RequestBuffer(this.m_handleIndexBuffer.data);
                                let b518 = this.m_handleIndexBuffer.data[a518];
                                return b518 || (b518 = new h459(), b518.SetIndex(a518), this.m_handleIndexBuffer.data[a518] = b518, b518);
                            }
                            DestroyParticle(x517, y517 = !1) {
                                let z517 = m447.b2ParticleFlag.b2_zombieParticle;
                                y517 && (z517 |= m447.b2ParticleFlag.b2_destructionListenerParticle), this.SetParticleFlags(x517, this.m_flagsBuffer.data[x517] | z517);
                            }
                            DestroyOldestParticle(s517, t517 = !1) {
                                const u517 = this.GetParticleCount(), v517 = this.m_indexByExpirationTimeBuffer.data[u517 - (s517 + 1)], w517 = this.m_indexByExpirationTimeBuffer.data[s517];
                                this.DestroyParticle(this.m_expirationTimeBuffer.data[v517] > 0 ? v517 : w517, t517);
                            }
                            DestroyParticlesInShape(m517, n517, o517 = !1) {
                                const p517 = v459.DestroyParticlesInShape_s_aabb;
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                const q517 = new g460(this, m517, n517, o517), r517 = p517;
                                return m517.ComputeAABB(r517, n517, 0), this.m_world.QueryAABB(q517, r517), q517.Destroyed();
                            }
                            CreateParticleGroup(b517) {
                                const c517 = v459.CreateParticleGroup_s_transform;
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                const d517 = c517;
                                d517.SetPositionAngle(o447(b517.position, q451.ZERO), o447(b517.angle, 0));
                                const e517 = this.m_count;
                                if (b517.shape && this.CreateParticlesWithShapeForGroup(b517.shape, b517, d517), b517.shapes && this.CreateParticlesWithShapesForGroup(b517.shapes, o447(b517.shapeCount, b517.shapes.length), b517, d517), b517.positionData) {
                                    const j517 = o447(b517.particleCount, b517.positionData.length);
                                    for (let k517 = 0; k517 < j517; k517++) {
                                        const l517 = b517.positionData[k517];
                                        this.CreateParticleForGroup(b517, d517, l517);
                                    }
                                }
                                const f517 = this.m_count;
                                let g517 = new j459(this);
                                g517.m_firstIndex = e517, g517.m_lastIndex = f517, g517.m_strength = o447(b517.strength, 1), g517.m_userData = b517.userData, g517.m_transform.Copy(d517), g517.m_prev = null, g517.m_next = this.m_groupList, this.m_groupList && (this.m_groupList.m_prev = g517), this.m_groupList = g517, ++this.m_groupCount;
                                for (let i517 = e517; i517 < f517; i517++)
                                    this.m_groupBuffer[i517] = g517;
                                this.SetGroupFlags(g517, o447(b517.groupFlags, 0));
                                const h517 = new f460();
                                return this.UpdateContacts(!0), this.UpdatePairsAndTriads(e517, f517, h517), b517.group && (this.JoinParticleGroups(b517.group, g517), g517 = b517.group), g517;
                            }
                            JoinParticleGroups(w516, x516) {
                                if (this.m_world.IsLocked())
                                    throw new Error();
                                this.RotateBuffer(x516.m_firstIndex, x516.m_lastIndex, this.m_count), this.RotateBuffer(w516.m_firstIndex, w516.m_lastIndex, x516.m_firstIndex);
                                const y516 = new h460(x516.m_firstIndex);
                                this.UpdateContacts(!0), this.UpdatePairsAndTriads(w516.m_firstIndex, x516.m_lastIndex, y516);
                                for (let a517 = x516.m_firstIndex; a517 < x516.m_lastIndex; a517++)
                                    this.m_groupBuffer[a517] = w516;
                                const z516 = w516.m_groupFlags | x516.m_groupFlags;
                                this.SetGroupFlags(w516, z516), w516.m_lastIndex = x516.m_lastIndex, x516.m_firstIndex = x516.m_lastIndex, this.DestroyParticleGroup(x516);
                            }
                            SplitParticleGroup(s516) {
                                this.UpdateContacts(!0);
                                const t516 = u447(s516.GetParticleCount(), () => new z459());
                                v459.InitializeParticleLists(s516, t516), this.MergeParticleListsInContact(s516, t516);
                                const u516 = v459.FindLongestParticleList(s516, t516);
                                this.MergeZombieParticleListNodes(s516, t516, u516), this.CreateParticleGroupsFromParticleList(s516, t516, u516), this.UpdatePairsAndTriadsWithParticleList(s516, t516);
                            }
                            GetParticleGroupList() {
                                return this.m_groupList;
                            }
                            GetParticleGroupCount() {
                                return this.m_groupCount;
                            }
                            GetParticleCount() {
                                return this.m_count;
                            }
                            GetMaxParticleCount() {
                                return this.m_def.maxCount;
                            }
                            SetMaxParticleCount(r516) {
                                this.m_def.maxCount = r516;
                            }
                            GetAllParticleFlags() {
                                return this.m_allParticleFlags;
                            }
                            GetAllGroupFlags() {
                                return this.m_allGroupFlags;
                            }
                            SetPaused(q516) {
                                this.m_paused = q516;
                            }
                            GetPaused() {
                                return this.m_paused;
                            }
                            SetDensity(p516) {
                                this.m_def.density = p516, this.m_inverseDensity = 1 / this.m_def.density;
                            }
                            GetDensity() {
                                return this.m_def.density;
                            }
                            SetGravityScale(o516) {
                                this.m_def.gravityScale = o516;
                            }
                            GetGravityScale() {
                                return this.m_def.gravityScale;
                            }
                            SetDamping(n516) {
                                this.m_def.dampingStrength = n516;
                            }
                            GetDamping() {
                                return this.m_def.dampingStrength;
                            }
                            SetStaticPressureIterations(m516) {
                                this.m_def.staticPressureIterations = m516;
                            }
                            GetStaticPressureIterations() {
                                return this.m_def.staticPressureIterations;
                            }
                            SetRadius(l516) {
                                this.m_particleDiameter = 2 * l516, this.m_squaredDiameter = this.m_particleDiameter * this.m_particleDiameter, this.m_inverseDiameter = 1 / this.m_particleDiameter;
                            }
                            GetRadius() {
                                return this.m_particleDiameter / 2;
                            }
                            GetPositionBuffer() {
                                return this.m_positionBuffer.data;
                            }
                            GetVelocityBuffer() {
                                return this.m_velocityBuffer.data;
                            }
                            GetColorBuffer() {
                                return this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data), this.m_colorBuffer.data;
                            }
                            GetGroupBuffer() {
                                return this.m_groupBuffer;
                            }
                            GetWeightBuffer() {
                                return this.m_weightBuffer;
                            }
                            GetUserDataBuffer() {
                                return this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data), this.m_userDataBuffer.data;
                            }
                            GetFlagsBuffer() {
                                return this.m_flagsBuffer.data;
                            }
                            SetParticleFlags(j516, k516) {
                                this.m_flagsBuffer.data[j516] & ~k516 && (this.m_needsUpdateAllParticleFlags = !0), ~this.m_allParticleFlags & k516 && (k516 & m447.b2ParticleFlag.b2_tensileParticle && (this.m_accumulation2Buffer = this.RequestBuffer(this.m_accumulation2Buffer)), k516 & m447.b2ParticleFlag.b2_colorMixingParticle && (this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data)), this.m_allParticleFlags |= k516), this.m_flagsBuffer.data[j516] = k516;
                            }
                            GetParticleFlags(i516) {
                                return this.m_flagsBuffer.data[i516];
                            }
                            SetFlagsBuffer(h516) {
                                this.SetUserOverridableBuffer(this.m_flagsBuffer, h516);
                            }
                            SetPositionBuffer(d516) {
                                if (d516 instanceof Float32Array) {
                                    if (d516.length % 2 != 0)
                                        throw new Error();
                                    const e516 = d516.length / 2, f516 = new Array(e516);
                                    for (let g516 = 0; g516 < e516; ++g516)
                                        f516[g516] = new q451(d516.subarray(2 * g516, 2 * g516 + 2));
                                    d516 = f516;
                                }
                                this.SetUserOverridableBuffer(this.m_positionBuffer, d516);
                            }
                            SetVelocityBuffer(z515) {
                                if (z515 instanceof Float32Array) {
                                    if (z515.length % 2 != 0)
                                        throw new Error();
                                    const a516 = z515.length / 2, b516 = new Array(a516);
                                    for (let c516 = 0; c516 < a516; ++c516)
                                        b516[c516] = new q451(z515.subarray(2 * c516, 2 * c516 + 2));
                                    z515 = b516;
                                }
                                this.SetUserOverridableBuffer(this.m_velocityBuffer, z515);
                            }
                            SetColorBuffer(v515) {
                                if (v515 instanceof Float32Array) {
                                    if (v515.length % 4 != 0)
                                        throw new Error();
                                    const w515 = v515.length / 4, x515 = new Array(w515);
                                    for (let y515 = 0; y515 < w515; ++y515)
                                        x515[y515] = new y451(v515.subarray(4 * y515, 4 * y515 + 4));
                                    v515 = x515;
                                }
                                this.SetUserOverridableBuffer(this.m_colorBuffer, v515);
                            }
                            SetUserDataBuffer(u515) {
                                this.SetUserOverridableBuffer(this.m_userDataBuffer, u515);
                            }
                            GetContacts() {
                                return this.m_contactBuffer.data;
                            }
                            GetContactCount() {
                                return this.m_contactBuffer.count;
                            }
                            GetBodyContacts() {
                                return this.m_bodyContactBuffer.data;
                            }
                            GetBodyContactCount() {
                                return this.m_bodyContactBuffer.count;
                            }
                            GetPairs() {
                                return this.m_pairBuffer.data;
                            }
                            GetPairCount() {
                                return this.m_pairBuffer.count;
                            }
                            GetTriads() {
                                return this.m_triadBuffer.data;
                            }
                            GetTriadCount() {
                                return this.m_triadBuffer.count;
                            }
                            SetStuckThreshold(t515) {
                                this.m_stuckThreshold = t515, t515 > 0 && (this.m_lastBodyContactStepBuffer.data = this.RequestBuffer(this.m_lastBodyContactStepBuffer.data), this.m_bodyContactCountBuffer.data = this.RequestBuffer(this.m_bodyContactCountBuffer.data), this.m_consecutiveContactStepsBuffer.data = this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data));
                            }
                            GetStuckCandidates() {
                                return this.m_stuckParticleBuffer.Data();
                            }
                            GetStuckCandidateCount() {
                                return this.m_stuckParticleBuffer.GetCount();
                            }
                            ComputeCollisionEnergy() {
                                const j515 = v459.ComputeCollisionEnergy_s_v, k515 = this.m_velocityBuffer.data;
                                let l515 = 0;
                                for (let m515 = 0; m515 < this.m_contactBuffer.count; m515++) {
                                    const n515 = this.m_contactBuffer.data[m515], o515 = n515.indexA, p515 = n515.indexB, q515 = n515.normal, r515 = q451.SubVV(k515[p515], k515[o515], j515), s515 = q451.DotVV(r515, q515);
                                    s515 < 0 && (l515 += s515 * s515);
                                }
                                return .5 * this.GetParticleMass() * l515;
                            }
                            SetStrictContactCheck(i515) {
                                this.m_def.strictContactCheck = i515;
                            }
                            GetStrictContactCheck() {
                                return this.m_def.strictContactCheck;
                            }
                            SetParticleLifetime(b515, c515) {
                                const d515 = null === this.m_indexByExpirationTimeBuffer.data;
                                if (this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data), this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data), d515) {
                                    const g515 = this.GetParticleCount();
                                    for (let h515 = 0; h515 < g515; ++h515)
                                        this.m_indexByExpirationTimeBuffer.data[h515] = h515;
                                }
                                const e515 = c515 / this.m_def.lifetimeGranularity, f515 = e515 > 0 ? this.GetQuantizedTimeElapsed() + e515 : e515;
                                f515 !== this.m_expirationTimeBuffer.data[b515] && (this.m_expirationTimeBuffer.data[b515] = f515, this.m_expirationTimeBufferRequiresSorting = !0);
                            }
                            GetParticleLifetime(a515) {
                                return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[a515]);
                            }
                            SetDestructionByAge(z514) {
                                z514 && this.GetExpirationTimeBuffer(), this.m_def.destroyByAge = z514;
                            }
                            GetDestructionByAge() {
                                return this.m_def.destroyByAge;
                            }
                            GetExpirationTimeBuffer() {
                                return this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data), this.m_expirationTimeBuffer.data;
                            }
                            ExpirationTimeToLifetime(y514) {
                                return (y514 > 0 ? y514 - this.GetQuantizedTimeElapsed() : y514) * this.m_def.lifetimeGranularity;
                            }
                            GetIndexByExpirationTimeBuffer() {
                                return this.GetParticleCount() ? this.SetParticleLifetime(0, this.GetParticleLifetime(0)) : this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data), this.m_indexByExpirationTimeBuffer.data;
                            }
                            ParticleApplyLinearImpulse(w514, x514) {
                                this.ApplyLinearImpulse(w514, w514 + 1, x514);
                            }
                            ApplyLinearImpulse(p514, q514, r514) {
                                const s514 = this.m_velocityBuffer.data, t514 = (q514 - p514) * this.GetParticleMass(), u514 = new q451().Copy(r514).SelfMul(1 / t514);
                                for (let v514 = p514; v514 < q514; v514++)
                                    s514[v514].SelfAdd(u514);
                            }
                            static IsSignificantForce(o514) {
                                return 0 !== o514.x || 0 !== o514.y;
                            }
                            ParticleApplyForce(m514, n514) {
                                v459.IsSignificantForce(n514) && this.ForceCanBeApplied(this.m_flagsBuffer.data[m514]) && (this.PrepareForceBuffer(), this.m_forceBuffer[m514].SelfAdd(n514));
                            }
                            ApplyForce(h514, i514, j514) {
                                const k514 = new q451().Copy(j514).SelfMul(1 / (i514 - h514));
                                if (v459.IsSignificantForce(k514)) {
                                    this.PrepareForceBuffer();
                                    for (let l514 = h514; l514 < i514; l514++)
                                        this.m_forceBuffer[l514].SelfAdd(k514);
                                }
                            }
                            GetNext() {
                                return this.m_next;
                            }
                            QueryAABB(x513, y513) {
                                if (0 === this.m_proxyBuffer.count)
                                    return;
                                const z513 = 0, a514 = this.m_proxyBuffer.count, b514 = n449(this.m_proxyBuffer.data, z513, a514, v459.computeTag(this.m_inverseDiameter * y513.lowerBound.x, this.m_inverseDiameter * y513.lowerBound.y), x459.CompareProxyTag), c514 = o449(this.m_proxyBuffer.data, b514, a514, v459.computeTag(this.m_inverseDiameter * y513.upperBound.x, this.m_inverseDiameter * y513.upperBound.y), x459.CompareTagProxy), d514 = this.m_positionBuffer.data;
                                for (let e514 = b514; e514 < c514; ++e514) {
                                    const f514 = this.m_proxyBuffer.data[e514].index, g514 = d514[f514];
                                    if (y513.lowerBound.x < g514.x && g514.x < y513.upperBound.x && y513.lowerBound.y < g514.y && g514.y < y513.upperBound.y && !x513.ReportParticle(this, f514))
                                        break;
                                }
                            }
                            QueryShapeAABB(s513, t513, u513, v513 = 0) {
                                const w513 = v459.QueryShapeAABB_s_aabb;
                                t513.ComputeAABB(w513, u513, v513), this.QueryAABB(s513, w513);
                            }
                            QueryPointAABB(o513, p513, q513 = z449) {
                                const r513 = v459.QueryPointAABB_s_aabb;
                                r513.lowerBound.Set(p513.x - q513, p513.y - q513), r513.upperBound.Set(p513.x + q513, p513.y + q513), this.QueryAABB(o513, r513);
                            }
                            RayCast(t512, u512, v512) {
                                const w512 = v459.RayCast_s_aabb, x512 = v459.RayCast_s_p, y512 = v459.RayCast_s_v, z512 = v459.RayCast_s_n, a513 = v459.RayCast_s_point;
                                if (0 === this.m_proxyBuffer.count)
                                    return;
                                const b513 = this.m_positionBuffer.data, c513 = w512;
                                q451.MinV(u512, v512, c513.lowerBound), q451.MaxV(u512, v512, c513.upperBound);
                                let d513 = 1;
                                const e513 = q451.SubVV(v512, u512, y512), f513 = q451.DotVV(e513, e513), g513 = this.GetInsideBoundsEnumerator(c513);
                                let h513;
                                for (; (h513 = g513.GetNext()) >= 0;) {
                                    const i513 = q451.SubVV(u512, b513[h513], x512), j513 = q451.DotVV(i513, e513), k513 = j513 * j513 - f513 * (q451.DotVV(i513, i513) - this.m_squaredDiameter);
                                    if (k513 >= 0) {
                                        const l513 = j451(k513);
                                        let m513 = (-j513 - l513) / f513;
                                        if (m513 > d513)
                                            continue;
                                        if (m513 < 0 && (m513 = (-j513 + l513) / f513, m513 < 0 || m513 > d513))
                                            continue;
                                        const n513 = q451.AddVMulSV(i513, m513, e513, z512);
                                        if (n513.Normalize(), d513 = x447(d513, t512.ReportParticle(this, h513, q451.AddVMulSV(u512, m513, e513, a513), n513, m513)), d513 <= 0)
                                            break;
                                    }
                                }
                            }
                            ComputeAABB(o512) {
                                const p512 = this.GetParticleCount();
                                o512.lowerBound.x = +r449, o512.lowerBound.y = +r449, o512.upperBound.x = -r449, o512.upperBound.y = -r449;
                                const q512 = this.m_positionBuffer.data;
                                for (let r512 = 0; r512 < p512; r512++) {
                                    const s512 = q512[r512];
                                    q451.MinV(o512.lowerBound, s512, o512.lowerBound), q451.MaxV(o512.upperBound, s512, o512.upperBound);
                                }
                                o512.lowerBound.x -= this.m_particleDiameter, o512.lowerBound.y -= this.m_particleDiameter, o512.upperBound.x += this.m_particleDiameter, o512.upperBound.y += this.m_particleDiameter;
                            }
                            FreeBuffer(m512, n512) {
                                null !== m512 && (m512.length = 0);
                            }
                            FreeUserOverridableBuffer(l512) {
                                0 === l512.userSuppliedCapacity && this.FreeBuffer(l512.data, this.m_internalAllocatedCapacity);
                            }
                            ReallocateBuffer3(h512, i512, j512) {
                                if (j512 <= i512)
                                    throw new Error();
                                const k512 = h512 ? h512.slice() : [];
                                return k512.length = j512, k512;
                            }
                            ReallocateBuffer5(c512, d512, e512, f512, g512) {
                                if (f512 <= e512)
                                    throw new Error();
                                if (d512 && !(f512 <= d512))
                                    throw new Error();
                                return g512 && !c512 || d512 || (c512 = this.ReallocateBuffer3(c512, e512, f512)), c512;
                            }
                            ReallocateBuffer4(y511, z511, a512, b512) {
                                return this.ReallocateBuffer5(y511.data, y511.userSuppliedCapacity, z511, a512, b512);
                            }
                            RequestBuffer(x511) {
                                return x511 || (0 === this.m_internalAllocatedCapacity && this.ReallocateInternalAllocatedBuffers(v450), (x511 = []).length = this.m_internalAllocatedCapacity), x511;
                            }
                            ReallocateHandleBuffers(w511) {
                                this.m_handleIndexBuffer.data = this.ReallocateBuffer4(this.m_handleIndexBuffer, this.m_internalAllocatedCapacity, w511, !0);
                            }
                            ReallocateInternalAllocatedBuffers(r511) {
                                function s511(u511, v511) {
                                    return v511 && u511 > v511 ? v511 : u511;
                                }
                                if (r511 = s511(r511, this.m_def.maxCount), r511 = s511(r511, this.m_flagsBuffer.userSuppliedCapacity), r511 = s511(r511, this.m_positionBuffer.userSuppliedCapacity), r511 = s511(r511, this.m_velocityBuffer.userSuppliedCapacity), r511 = s511(r511, this.m_colorBuffer.userSuppliedCapacity), r511 = s511(r511, this.m_userDataBuffer.userSuppliedCapacity), this.m_internalAllocatedCapacity < r511) {
                                    this.ReallocateHandleBuffers(r511), this.m_flagsBuffer.data = this.ReallocateBuffer4(this.m_flagsBuffer, this.m_internalAllocatedCapacity, r511, !1);
                                    const t511 = this.m_stuckThreshold > 0;
                                    this.m_lastBodyContactStepBuffer.data = this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer, this.m_internalAllocatedCapacity, r511, t511), this.m_bodyContactCountBuffer.data = this.ReallocateBuffer4(this.m_bodyContactCountBuffer, this.m_internalAllocatedCapacity, r511, t511), this.m_consecutiveContactStepsBuffer.data = this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer, this.m_internalAllocatedCapacity, r511, t511), this.m_positionBuffer.data = this.ReallocateBuffer4(this.m_positionBuffer, this.m_internalAllocatedCapacity, r511, !1), this.m_velocityBuffer.data = this.ReallocateBuffer4(this.m_velocityBuffer, this.m_internalAllocatedCapacity, r511, !1), this.m_forceBuffer = this.ReallocateBuffer5(this.m_forceBuffer, 0, this.m_internalAllocatedCapacity, r511, !1), this.m_weightBuffer = this.ReallocateBuffer5(this.m_weightBuffer, 0, this.m_internalAllocatedCapacity, r511, !1), this.m_staticPressureBuffer = this.ReallocateBuffer5(this.m_staticPressureBuffer, 0, this.m_internalAllocatedCapacity, r511, !0), this.m_accumulationBuffer = this.ReallocateBuffer5(this.m_accumulationBuffer, 0, this.m_internalAllocatedCapacity, r511, !1), this.m_accumulation2Buffer = this.ReallocateBuffer5(this.m_accumulation2Buffer, 0, this.m_internalAllocatedCapacity, r511, !0), this.m_depthBuffer = this.ReallocateBuffer5(this.m_depthBuffer, 0, this.m_internalAllocatedCapacity, r511, !0), this.m_colorBuffer.data = this.ReallocateBuffer4(this.m_colorBuffer, this.m_internalAllocatedCapacity, r511, !0), this.m_groupBuffer = this.ReallocateBuffer5(this.m_groupBuffer, 0, this.m_internalAllocatedCapacity, r511, !1), this.m_userDataBuffer.data = this.ReallocateBuffer4(this.m_userDataBuffer, this.m_internalAllocatedCapacity, r511, !0), this.m_expirationTimeBuffer.data = this.ReallocateBuffer4(this.m_expirationTimeBuffer, this.m_internalAllocatedCapacity, r511, !0), this.m_indexByExpirationTimeBuffer.data = this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer, this.m_internalAllocatedCapacity, r511, !1), this.m_internalAllocatedCapacity = r511;
                                }
                            }
                            CreateParticleForGroup(n511, o511, p511) {
                                const q511 = new g459();
                                q511.flags = o447(n511.flags, 0), w451.MulXV(o511, p511, q511.position), q451.AddVV(o447(n511.linearVelocity, q451.ZERO), q451.CrossSV(o447(n511.angularVelocity, 0), q451.SubVV(q511.position, o447(n511.position, q451.ZERO), q451.s_t0), q451.s_t0), q511.velocity), q511.color.Copy(o447(n511.color, y451.ZERO)), q511.lifetime = o447(n511.lifetime, 0), q511.userData = n511.userData, this.CreateParticle(q511);
                            }
                            CreateParticlesStrokeShapeForGroup(z510, a511, b511) {
                                const c511 = v459.CreateParticlesStrokeShapeForGroup_s_edge, d511 = v459.CreateParticlesStrokeShapeForGroup_s_d, e511 = v459.CreateParticlesStrokeShapeForGroup_s_p;
                                let f511 = o447(a511.stride, 0);
                                0 === f511 && (f511 = this.GetParticleStride());
                                let g511 = 0;
                                const h511 = z510.GetChildCount();
                                for (let i511 = 0; i511 < h511; i511++) {
                                    let j511 = null;
                                    z510.GetType() === m447.b2ShapeType.e_edgeShape ? j511 = z510 : (j511 = c511, z510.GetChildEdge(j511, i511));
                                    const k511 = q451.SubVV(j511.m_vertex2, j511.m_vertex1, d511), l511 = k511.Length();
                                    for (; g511 < l511;) {
                                        const m511 = q451.AddVMulSV(j511.m_vertex1, g511 / l511, k511, e511);
                                        this.CreateParticleForGroup(a511, b511, m511), g511 += f511;
                                    }
                                    g511 -= l511;
                                }
                            }
                            CreateParticlesFillShapeForGroup(o510, p510, q510) {
                                const r510 = v459.CreateParticlesFillShapeForGroup_s_aabb, s510 = v459.CreateParticlesFillShapeForGroup_s_p;
                                let t510 = o447(p510.stride, 0);
                                0 === t510 && (t510 = this.GetParticleStride());
                                const u510 = w451.IDENTITY, v510 = r510;
                                o510.ComputeAABB(v510, u510, 0);
                                for (let w510 = Math.floor(v510.lowerBound.y / t510) * t510; w510 < v510.upperBound.y; w510 += t510)
                                    for (let x510 = Math.floor(v510.lowerBound.x / t510) * t510; x510 < v510.upperBound.x; x510 += t510) {
                                        const y510 = s510.Set(x510, w510);
                                        o510.TestPoint(u510, y510) && this.CreateParticleForGroup(p510, q510, y510);
                                    }
                            }
                            CreateParticlesWithShapeForGroup(l510, m510, n510) {
                                switch (l510.GetType()) {
                                    case m447.b2ShapeType.e_edgeShape:
                                    case m447.b2ShapeType.e_chainShape:
                                        this.CreateParticlesStrokeShapeForGroup(l510, m510, n510);
                                        break;
                                    case m447.b2ShapeType.e_polygonShape:
                                    case m447.b2ShapeType.e_circleShape:
                                        this.CreateParticlesFillShapeForGroup(l510, m510, n510);
                                }
                            }
                            CreateParticlesWithShapesForGroup(g510, h510, i510, j510) {
                                const k510 = new i460(g510, h510);
                                this.CreateParticlesFillShapeForGroup(k510, i510, j510);
                            }
                            CloneParticle(b510, c510) {
                                const d510 = new g459();
                                d510.flags = this.m_flagsBuffer.data[b510], d510.position.Copy(this.m_positionBuffer.data[b510]), d510.velocity.Copy(this.m_velocityBuffer.data[b510]), this.m_colorBuffer.data && d510.color.Copy(this.m_colorBuffer.data[b510]), this.m_userDataBuffer.data && (d510.userData = this.m_userDataBuffer.data[b510]), d510.group = c510;
                                const e510 = this.CreateParticle(d510);
                                if (this.m_handleIndexBuffer.data) {
                                    const f510 = this.m_handleIndexBuffer.data[b510];
                                    f510 && f510.SetIndex(e510), this.m_handleIndexBuffer.data[e510] = f510, this.m_handleIndexBuffer.data[b510] = null;
                                }
                                return this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[e510] = this.m_lastBodyContactStepBuffer.data[b510]), this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[e510] = this.m_bodyContactCountBuffer.data[b510]), this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[e510] = this.m_consecutiveContactStepsBuffer.data[b510]), this.m_hasForce && this.m_forceBuffer[e510].Copy(this.m_forceBuffer[b510]), this.m_staticPressureBuffer && (this.m_staticPressureBuffer[e510] = this.m_staticPressureBuffer[b510]), this.m_depthBuffer && (this.m_depthBuffer[e510] = this.m_depthBuffer[b510]), this.m_expirationTimeBuffer.data && (this.m_expirationTimeBuffer.data[e510] = this.m_expirationTimeBuffer.data[b510]), e510;
                            }
                            DestroyParticlesInGroup(y509, z509 = !1) {
                                for (let a510 = y509.m_firstIndex; a510 < y509.m_lastIndex; a510++)
                                    this.DestroyParticle(a510, z509);
                            }
                            DestroyParticleGroup(w509) {
                                this.m_world.m_destructionListener && this.m_world.m_destructionListener.SayGoodbyeParticleGroup(w509), this.SetGroupFlags(w509, 0);
                                for (let x509 = w509.m_firstIndex; x509 < w509.m_lastIndex; x509++)
                                    this.m_groupBuffer[x509] = null;
                                w509.m_prev && (w509.m_prev.m_next = w509.m_next), w509.m_next && (w509.m_next.m_prev = w509.m_prev), w509 === this.m_groupList && (this.m_groupList = w509.m_next), --this.m_groupCount;
                            }
                            static ParticleCanBeConnected(u509, v509) {
                                return 0 != (u509 & (m447.b2ParticleFlag.b2_wallParticle | m447.b2ParticleFlag.b2_springParticle | m447.b2ParticleFlag.b2_elasticParticle)) || null !== v509 && 0 != (v509.GetGroupFlags() & m447.b2ParticleGroupFlag.b2_rigidParticleGroup);
                            }
                            UpdatePairsAndTriads(b508, c508, d508) {
                                const e508 = v459.UpdatePairsAndTriads_s_dab, f508 = v459.UpdatePairsAndTriads_s_dbc, g508 = v459.UpdatePairsAndTriads_s_dca, h508 = this.m_positionBuffer.data;
                                let i508 = 0;
                                for (let t509 = b508; t509 < c508; t509++)
                                    i508 |= this.m_flagsBuffer.data[t509];
                                if (i508 & v459.k_pairFlags)
                                    for (let k509 = 0; k509 < this.m_contactBuffer.count; k509++) {
                                        const l509 = this.m_contactBuffer.data[k509], m509 = l509.indexA, n509 = l509.indexB, o509 = this.m_flagsBuffer.data[m509], p509 = this.m_flagsBuffer.data[n509], q509 = this.m_groupBuffer[m509], r509 = this.m_groupBuffer[n509];
                                        if (m509 >= b508 && m509 < c508 && n509 >= b508 && n509 < c508 && !((o509 | p509) & m447.b2ParticleFlag.b2_zombieParticle) && (o509 | p509) & v459.k_pairFlags && (d508.IsNecessary(m509) || d508.IsNecessary(n509)) && v459.ParticleCanBeConnected(o509, q509) && v459.ParticleCanBeConnected(p509, r509) && d508.ShouldCreatePair(m509, n509)) {
                                            const s509 = this.m_pairBuffer.data[this.m_pairBuffer.Append()];
                                            s509.indexA = m509, s509.indexB = n509, s509.flags = l509.flags, s509.strength = x447(q509 ? q509.m_strength : 1, r509 ? r509.m_strength : 1), s509.distance = q451.DistanceVV(h508[m509], h508[n509]);
                                        }
                                        l449(this.m_pairBuffer.data, 0, this.m_pairBuffer.count, v459.ComparePairIndices), this.m_pairBuffer.Unique(v459.MatchPairIndices);
                                    }
                                if (i508 & v459.k_triadFlags) {
                                    const j508 = new l459(c508 - b508);
                                    for (let h509 = b508; h509 < c508; h509++) {
                                        const i509 = this.m_flagsBuffer.data[h509], j509 = this.m_groupBuffer[h509];
                                        i509 & m447.b2ParticleFlag.b2_zombieParticle || !v459.ParticleCanBeConnected(i509, j509) || j508.AddGenerator(h508[h509], h509, d508.IsNecessary(h509));
                                    }
                                    const k508 = this.GetParticleStride();
                                    j508.Generate(k508 / 2, 2 * k508);
                                    const l508 = this, m508 = (o508, p508, q508) => {
                                        const r508 = l508.m_flagsBuffer.data[o508], s508 = l508.m_flagsBuffer.data[p508], t508 = l508.m_flagsBuffer.data[q508];
                                        if ((r508 | s508 | t508) & v459.k_triadFlags && d508.ShouldCreateTriad(o508, p508, q508)) {
                                            const u508 = h508[o508], v508 = h508[p508], w508 = h508[q508], x508 = q451.SubVV(u508, v508, e508), y508 = q451.SubVV(v508, w508, f508), z508 = q451.SubVV(w508, u508, g508), a509 = u450 * l508.m_squaredDiameter;
                                            if (q451.DotVV(x508, x508) > a509 || q451.DotVV(y508, y508) > a509 || q451.DotVV(z508, z508) > a509)
                                                return;
                                            const b509 = l508.m_groupBuffer[o508], c509 = l508.m_groupBuffer[p508], d509 = l508.m_groupBuffer[q508], e509 = l508.m_triadBuffer.data[l508.m_triadBuffer.Append()];
                                            e509.indexA = o508, e509.indexB = p508, e509.indexC = q508, e509.flags = r508 | s508 | t508, e509.strength = x447(x447(b509 ? b509.m_strength : 1, c509 ? c509.m_strength : 1), d509 ? d509.m_strength : 1);
                                            const f509 = (u508.x + v508.x + w508.x) / 3, g509 = (u508.y + v508.y + w508.y) / 3;
                                            e509.pa.x = u508.x - f509, e509.pa.y = u508.y - g509, e509.pb.x = v508.x - f509, e509.pb.y = v508.y - g509, e509.pc.x = w508.x - f509, e509.pc.y = w508.y - g509, e509.ka = -q451.DotVV(z508, x508), e509.kb = -q451.DotVV(x508, y508), e509.kc = -q451.DotVV(y508, z508), e509.s = q451.CrossVV(u508, v508) + q451.CrossVV(v508, w508) + q451.CrossVV(w508, u508);
                                        }
                                    };
                                    j508.GetNodes(m508), l449(this.m_triadBuffer.data, 0, this.m_triadBuffer.count, v459.CompareTriadIndices), this.m_triadBuffer.Unique(v459.MatchTriadIndices);
                                }
                            }
                            UpdatePairsAndTriadsWithReactiveParticles() {
                                const z507 = new j460(this.m_flagsBuffer);
                                this.UpdatePairsAndTriads(0, this.m_count, z507);
                                for (let a508 = 0; a508 < this.m_count; a508++)
                                    this.m_flagsBuffer.data[a508] &= ~m447.b2ParticleFlag.b2_reactiveParticle;
                                this.m_allParticleFlags &= ~m447.b2ParticleFlag.b2_reactiveParticle;
                            }
                            static ComparePairIndices(w507, x507) {
                                const y507 = w507.indexA - x507.indexA;
                                return 0 !== y507 ? y507 < 0 : w507.indexB < x507.indexB;
                            }
                            static MatchPairIndices(u507, v507) {
                                return u507.indexA === v507.indexA && u507.indexB === v507.indexB;
                            }
                            static CompareTriadIndices(q507, r507) {
                                const s507 = q507.indexA - r507.indexA;
                                if (0 !== s507)
                                    return s507 < 0;
                                const t507 = q507.indexB - r507.indexB;
                                return 0 !== t507 ? t507 < 0 : q507.indexC < r507.indexC;
                            }
                            static MatchTriadIndices(o507, p507) {
                                return o507.indexA === p507.indexA && o507.indexB === p507.indexB && o507.indexC === p507.indexC;
                            }
                            static InitializeParticleLists(i507, j507) {
                                const k507 = i507.GetBufferIndex(), l507 = i507.GetParticleCount();
                                for (let m507 = 0; m507 < l507; m507++) {
                                    const n507 = j507[m507];
                                    n507.list = n507, n507.next = null, n507.count = 1, n507.index = m507 + k507;
                                }
                            }
                            MergeParticleListsInContact(y506, z506) {
                                const a507 = y506.GetBufferIndex();
                                for (let b507 = 0; b507 < this.m_contactBuffer.count; b507++) {
                                    const c507 = this.m_contactBuffer.data[b507], d507 = c507.indexA, e507 = c507.indexB;
                                    if (!y506.ContainsParticle(d507) || !y506.ContainsParticle(e507))
                                        continue;
                                    let f507 = z506[d507 - a507].list, g507 = z506[e507 - a507].list;
                                    if (f507 !== g507) {
                                        if (f507.count < g507.count) {
                                            const h507 = f507;
                                            f507 = g507, g507 = h507;
                                        }
                                        v459.MergeParticleLists(f507, g507);
                                    }
                                }
                            }
                            static MergeParticleLists(u506, v506) {
                                for (let w506 = v506;;) {
                                    w506.list = u506;
                                    const x506 = w506.next;
                                    if (!x506) {
                                        w506.next = u506.next;
                                        break;
                                    }
                                    w506 = x506;
                                }
                                u506.next = v506, u506.count += v506.count, v506.count = 0;
                            }
                            static FindLongestParticleList(o506, p506) {
                                const q506 = o506.GetParticleCount();
                                let r506 = p506[0];
                                for (let s506 = 0; s506 < q506; s506++) {
                                    const t506 = p506[s506];
                                    r506.count < t506.count && (r506 = t506);
                                }
                                return r506;
                            }
                            MergeZombieParticleListNodes(i506, j506, k506) {
                                const l506 = i506.GetParticleCount();
                                for (let m506 = 0; m506 < l506; m506++) {
                                    const n506 = j506[m506];
                                    n506 !== k506 && this.m_flagsBuffer.data[n506.index] & m447.b2ParticleFlag.b2_zombieParticle && v459.MergeParticleListAndNode(k506, n506);
                                }
                            }
                            static MergeParticleListAndNode(g506, h506) {
                                h506.list = g506, h506.next = g506.next, g506.next = h506, g506.count++, h506.count = 0;
                            }
                            CreateParticleGroupsFromParticleList(v505, w505, x505) {
                                const y505 = v505.GetParticleCount(), z505 = new i459();
                                z505.groupFlags = v505.GetGroupFlags(), z505.userData = v505.GetUserData();
                                for (let a506 = 0; a506 < y505; a506++) {
                                    const b506 = w505[a506];
                                    if (!b506.count || b506 === x505)
                                        continue;
                                    const c506 = this.CreateParticleGroup(z505);
                                    for (let d506 = b506; d506; d506 = d506.next) {
                                        const e506 = d506.index, f506 = this.CloneParticle(e506, c506);
                                        this.m_flagsBuffer.data[e506] |= m447.b2ParticleFlag.b2_zombieParticle, d506.index = f506;
                                    }
                                }
                            }
                            UpdatePairsAndTriadsWithParticleList(j505, k505) {
                                const l505 = j505.GetBufferIndex();
                                for (let r505 = 0; r505 < this.m_pairBuffer.count; r505++) {
                                    const s505 = this.m_pairBuffer.data[r505], t505 = s505.indexA, u505 = s505.indexB;
                                    j505.ContainsParticle(t505) && (s505.indexA = k505[t505 - l505].index), j505.ContainsParticle(u505) && (s505.indexB = k505[u505 - l505].index);
                                }
                                for (let m505 = 0; m505 < this.m_triadBuffer.count; m505++) {
                                    const n505 = this.m_triadBuffer.data[m505], o505 = n505.indexA, p505 = n505.indexB, q505 = n505.indexC;
                                    j505.ContainsParticle(o505) && (n505.indexA = k505[o505 - l505].index), j505.ContainsParticle(p505) && (n505.indexB = k505[p505 - l505].index), j505.ContainsParticle(q505) && (n505.indexC = k505[q505 - l505].index);
                                }
                            }
                            ComputeDepth() {
                                const z503 = [];
                                let a504 = 0;
                                for (let d505 = 0; d505 < this.m_contactBuffer.count; d505++) {
                                    const e505 = this.m_contactBuffer.data[d505], f505 = e505.indexA, g505 = e505.indexB, h505 = this.m_groupBuffer[f505], i505 = this.m_groupBuffer[g505];
                                    h505 && h505 === i505 && h505.m_groupFlags & m447.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth && (z503[a504++] = e505);
                                }
                                const b504 = [];
                                let c504 = 0;
                                for (let b505 = this.m_groupList; b505; b505 = b505.GetNext())
                                    if (b505.m_groupFlags & m447.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {
                                        b504[c504++] = b505, this.SetGroupFlags(b505, b505.m_groupFlags & ~m447.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);
                                        for (let c505 = b505.m_firstIndex; c505 < b505.m_lastIndex; c505++)
                                            this.m_accumulationBuffer[c505] = 0;
                                    }
                                for (let w504 = 0; w504 < a504; w504++) {
                                    const x504 = z503[w504], y504 = x504.indexA, z504 = x504.indexB, a505 = x504.weight;
                                    this.m_accumulationBuffer[y504] += a505, this.m_accumulationBuffer[z504] += a505;
                                }
                                for (let s504 = 0; s504 < c504; s504++) {
                                    const t504 = b504[s504];
                                    for (let u504 = t504.m_firstIndex; u504 < t504.m_lastIndex; u504++) {
                                        const v504 = this.m_accumulationBuffer[u504];
                                        this.m_depthBuffer[u504] = v504 < .8 ? 0 : r449;
                                    }
                                }
                                const d504 = j451(this.m_count) >> 0;
                                for (let h504 = 0; h504 < d504; h504++) {
                                    let i504 = !1;
                                    for (let j504 = 0; j504 < a504; j504++) {
                                        const k504 = z503[j504], l504 = k504.indexA, m504 = k504.indexB, n504 = 1 - k504.weight, o504 = this.m_depthBuffer[l504], p504 = this.m_depthBuffer[m504], q504 = p504 + n504, r504 = o504 + n504;
                                        o504 > q504 && (this.m_depthBuffer[l504] = q504, i504 = !0), p504 > r504 && (this.m_depthBuffer[m504] = r504, i504 = !0);
                                    }
                                    if (!i504)
                                        break;
                                }
                                for (let e504 = 0; e504 < c504; e504++) {
                                    const f504 = b504[e504];
                                    for (let g504 = f504.m_firstIndex; g504 < f504.m_lastIndex; g504++)
                                        this.m_depthBuffer[g504] < r449 ? this.m_depthBuffer[g504] *= this.m_particleDiameter : this.m_depthBuffer[g504] = 0;
                                }
                            }
                            GetInsideBoundsEnumerator(s503) {
                                const t503 = v459.computeTag(this.m_inverseDiameter * s503.lowerBound.x - 1, this.m_inverseDiameter * s503.lowerBound.y - 1), u503 = v459.computeTag(this.m_inverseDiameter * s503.upperBound.x + 1, this.m_inverseDiameter * s503.upperBound.y + 1), v503 = 0, w503 = this.m_proxyBuffer.count, x503 = n449(this.m_proxyBuffer.data, v503, w503, t503, x459.CompareProxyTag), y503 = o449(this.m_proxyBuffer.data, v503, w503, u503, x459.CompareTagProxy);
                                return new y459(this, t503, u503, x503, y503);
                            }
                            UpdateAllParticleFlags() {
                                this.m_allParticleFlags = 0;
                                for (let r503 = 0; r503 < this.m_count; r503++)
                                    this.m_allParticleFlags |= this.m_flagsBuffer.data[r503];
                                this.m_needsUpdateAllParticleFlags = !1;
                            }
                            UpdateAllGroupFlags() {
                                this.m_allGroupFlags = 0;
                                for (let q503 = this.m_groupList; q503; q503 = q503.GetNext())
                                    this.m_allGroupFlags |= q503.m_groupFlags;
                                this.m_needsUpdateAllGroupFlags = !1;
                            }
                            AddContact(h503, i503, j503) {
                                const k503 = this.m_flagsBuffer.data, l503 = this.m_positionBuffer.data, m503 = q451.SubVV(l503[i503], l503[h503], v459.AddContact_s_d), n503 = q451.DotVV(m503, m503);
                                if (0 < n503 && n503 < this.m_squaredDiameter) {
                                    const o503 = c448(n503), p503 = this.m_contactBuffer.data[this.m_contactBuffer.Append()];
                                    p503.indexA = h503, p503.indexB = i503, p503.flags = k503[h503] | k503[i503], p503.weight = 1 - n503 * o503 * this.m_inverseDiameter, p503.normal.x = o503 * m503.x, p503.normal.y = o503 * m503.y;
                                }
                            }
                            FindContacts_Reference(x502) {
                                const y502 = 0, z502 = this.m_proxyBuffer.count;
                                this.m_contactBuffer.count = 0;
                                for (let a503 = y502, b503 = y502; a503 < z502; a503++) {
                                    const c503 = v459.computeRelativeTag(this.m_proxyBuffer.data[a503].tag, 1, 0);
                                    for (let g503 = a503 + 1; g503 < z502 && !(c503 < this.m_proxyBuffer.data[g503].tag); g503++)
                                        this.AddContact(this.m_proxyBuffer.data[a503].index, this.m_proxyBuffer.data[g503].index, this.m_contactBuffer);
                                    const d503 = v459.computeRelativeTag(this.m_proxyBuffer.data[a503].tag, -1, 1);
                                    for (; b503 < z502 && !(d503 <= this.m_proxyBuffer.data[b503].tag); b503++)
                                        ;
                                    const e503 = v459.computeRelativeTag(this.m_proxyBuffer.data[a503].tag, 1, 1);
                                    for (let f503 = b503; f503 < z502 && !(e503 < this.m_proxyBuffer.data[f503].tag); f503++)
                                        this.AddContact(this.m_proxyBuffer.data[a503].index, this.m_proxyBuffer.data[f503].index, this.m_contactBuffer);
                                }
                            }
                            FindContacts(w502) {
                                this.FindContacts_Reference(w502);
                            }
                            UpdateProxies_Reference(q502) {
                                const r502 = this.m_positionBuffer.data, s502 = this.m_inverseDiameter;
                                for (let t502 = 0; t502 < this.m_proxyBuffer.count; ++t502) {
                                    const u502 = this.m_proxyBuffer.data[t502], v502 = r502[u502.index];
                                    u502.tag = v459.computeTag(s502 * v502.x, s502 * v502.y);
                                }
                            }
                            UpdateProxies(p502) {
                                this.UpdateProxies_Reference(p502);
                            }
                            SortProxies(o502) {
                                k449(this.m_proxyBuffer.data, 0, this.m_proxyBuffer.count, x459.CompareProxyProxy);
                            }
                            FilterContacts(i502) {
                                const j502 = this.GetParticleContactFilter();
                                if (null === j502)
                                    return;
                                const k502 = this, l502 = n502 => 0 != (n502.flags & m447.b2ParticleFlag.b2_particleContactFilterParticle) && !j502.ShouldCollideParticleParticle(k502, n502.indexA, n502.indexB);
                                this.m_contactBuffer.RemoveIf(l502);
                            }
                            NotifyContactListenerPreContact(h502) {
                                if (null !== this.GetParticleContactListener())
                                    throw h502.Initialize(this.m_contactBuffer, this.m_flagsBuffer), new Error();
                            }
                            NotifyContactListenerPostContact(d502) {
                                const e502 = this.GetParticleContactListener();
                                if (null !== e502) {
                                    for (let f502 = 0; f502 < this.m_contactBuffer.count; ++f502) {
                                        const g502 = this.m_contactBuffer.data[f502];
                                        e502.BeginContactParticleParticle(this, g502);
                                    }
                                    throw new Error();
                                }
                            }
                            static b2ParticleContactIsZombie(c502) {
                                return (c502.flags & m447.b2ParticleFlag.b2_zombieParticle) === m447.b2ParticleFlag.b2_zombieParticle;
                            }
                            UpdateContacts(a502) {
                                this.UpdateProxies(this.m_proxyBuffer), this.SortProxies(this.m_proxyBuffer);
                                const b502 = new e460();
                                this.NotifyContactListenerPreContact(b502), this.FindContacts(this.m_contactBuffer), this.FilterContacts(this.m_contactBuffer), this.NotifyContactListenerPostContact(b502), a502 && this.m_contactBuffer.RemoveIf(v459.b2ParticleContactIsZombie);
                            }
                            NotifyBodyContactListenerPreContact(z501) {
                                if (null !== this.GetFixtureContactListener())
                                    throw z501.Initialize(this.m_bodyContactBuffer, this.m_flagsBuffer), new Error();
                            }
                            NotifyBodyContactListenerPostContact(v501) {
                                const w501 = this.GetFixtureContactListener();
                                if (null !== w501) {
                                    for (let x501 = 0; x501 < this.m_bodyContactBuffer.count; x501++) {
                                        const y501 = this.m_bodyContactBuffer.data[x501];
                                        w501.BeginContactFixtureParticle(this, y501);
                                    }
                                    throw new Error();
                                }
                            }
                            UpdateBodyContacts() {
                                const p501 = v459.UpdateBodyContacts_s_aabb, q501 = new c460();
                                if (this.NotifyBodyContactListenerPreContact(q501), this.m_stuckThreshold > 0) {
                                    const t501 = this.GetParticleCount();
                                    for (let u501 = 0; u501 < t501; u501++)
                                        this.m_bodyContactCountBuffer.data[u501] = 0, this.m_timestamp > this.m_lastBodyContactStepBuffer.data[u501] + 1 && (this.m_consecutiveContactStepsBuffer.data[u501] = 0);
                                }
                                this.m_bodyContactBuffer.SetCount(0), this.m_stuckParticleBuffer.SetCount(0);
                                const r501 = p501;
                                this.ComputeAABB(r501), null === this.UpdateBodyContacts_callback && (this.UpdateBodyContacts_callback = new k460(this));
                                const s501 = this.UpdateBodyContacts_callback;
                                s501.m_contactFilter = this.GetFixtureContactFilter(), this.m_world.QueryAABB(s501, r501), this.m_def.strictContactCheck && this.RemoveSpuriousBodyContacts(), this.NotifyBodyContactListenerPostContact(q501);
                            }
                            Solve(l501) {
                                const m501 = v459.Solve_s_subStep;
                                if (0 !== this.m_count && (this.m_expirationTimeBuffer.data && this.SolveLifetimes(l501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_zombieParticle && this.SolveZombie(), this.m_needsUpdateAllParticleFlags && this.UpdateAllParticleFlags(), this.m_needsUpdateAllGroupFlags && this.UpdateAllGroupFlags(), !this.m_paused))
                                    for (this.m_iterationIndex = 0; this.m_iterationIndex < l501.particleIterations; this.m_iterationIndex++) {
                                        ++this.m_timestamp;
                                        const n501 = m501.Copy(l501);
                                        n501.dt /= l501.particleIterations, n501.inv_dt *= l501.particleIterations, this.UpdateContacts(!1), this.UpdateBodyContacts(), this.ComputeWeight(), this.m_allGroupFlags & m447.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth && this.ComputeDepth(), this.m_allParticleFlags & m447.b2ParticleFlag.b2_reactiveParticle && this.UpdatePairsAndTriadsWithReactiveParticles(), this.m_hasForce && this.SolveForce(n501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_viscousParticle && this.SolveViscous(), this.m_allParticleFlags & m447.b2ParticleFlag.b2_repulsiveParticle && this.SolveRepulsive(n501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_powderParticle && this.SolvePowder(n501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_tensileParticle && this.SolveTensile(n501), this.m_allGroupFlags & m447.b2ParticleGroupFlag.b2_solidParticleGroup && this.SolveSolid(n501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_colorMixingParticle && this.SolveColorMixing(), this.SolveGravity(n501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_staticPressureParticle && this.SolveStaticPressure(n501), this.SolvePressure(n501), this.SolveDamping(n501), this.m_allParticleFlags & v459.k_extraDampingFlags && this.SolveExtraDamping(), this.m_allParticleFlags & m447.b2ParticleFlag.b2_elasticParticle && this.SolveElastic(n501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_springParticle && this.SolveSpring(n501), this.LimitVelocity(n501), this.m_allGroupFlags & m447.b2ParticleGroupFlag.b2_rigidParticleGroup && this.SolveRigidDamping(), this.m_allParticleFlags & m447.b2ParticleFlag.b2_barrierParticle && this.SolveBarrier(n501), this.SolveCollision(n501), this.m_allGroupFlags & m447.b2ParticleGroupFlag.b2_rigidParticleGroup && this.SolveRigid(n501), this.m_allParticleFlags & m447.b2ParticleFlag.b2_wallParticle && this.SolveWall();
                                        for (let o501 = 0; o501 < this.m_count; o501++)
                                            this.m_positionBuffer.data[o501].SelfMulAdd(n501.dt, this.m_velocityBuffer.data[o501]);
                                    }
                            }
                            SolveCollision(a501) {
                                const b501 = v459.SolveCollision_s_aabb, c501 = this.m_positionBuffer.data, d501 = this.m_velocityBuffer.data, e501 = b501;
                                e501.lowerBound.x = +r449, e501.lowerBound.y = +r449, e501.upperBound.x = -r449, e501.upperBound.y = -r449;
                                for (let g501 = 0; g501 < this.m_count; g501++) {
                                    const h501 = d501[g501], i501 = c501[g501], j501 = i501.x + a501.dt * h501.x, k501 = i501.y + a501.dt * h501.y;
                                    e501.lowerBound.x = x447(e501.lowerBound.x, x447(i501.x, j501)), e501.lowerBound.y = x447(e501.lowerBound.y, x447(i501.y, k501)), e501.upperBound.x = y447(e501.upperBound.x, y447(i501.x, j501)), e501.upperBound.y = y447(e501.upperBound.y, y447(i501.y, k501));
                                }
                                null === this.SolveCollision_callback && (this.SolveCollision_callback = new l460(this, a501));
                                const f501 = this.SolveCollision_callback;
                                f501.m_step = a501, this.m_world.QueryAABB(f501, e501);
                            }
                            LimitVelocity(u500) {
                                const v500 = this.m_velocityBuffer.data, w500 = this.GetCriticalVelocitySquared(u500);
                                for (let x500 = 0; x500 < this.m_count; x500++) {
                                    const y500 = v500[x500], z500 = q451.DotVV(y500, y500);
                                    z500 > w500 && y500.SelfMul(j451(w500 / z500));
                                }
                            }
                            SolveGravity(p500) {
                                const q500 = v459.SolveGravity_s_gravity, r500 = this.m_velocityBuffer.data, s500 = q451.MulSV(p500.dt * this.m_def.gravityScale, this.m_world.GetGravity(), q500);
                                for (let t500 = 0; t500 < this.m_count; t500++)
                                    r500[t500].SelfAdd(s500);
                            }
                            SolveBarrier(n498) {
                                const o498 = v459.SolveBarrier_s_aabb, p498 = v459.SolveBarrier_s_va, q498 = v459.SolveBarrier_s_vb, r498 = v459.SolveBarrier_s_pba, s498 = v459.SolveBarrier_s_vba, t498 = v459.SolveBarrier_s_vc, u498 = v459.SolveBarrier_s_pca, v498 = v459.SolveBarrier_s_vca, w498 = v459.SolveBarrier_s_qba, x498 = v459.SolveBarrier_s_qca, y498 = v459.SolveBarrier_s_dv, z498 = v459.SolveBarrier_s_f, a499 = this.m_positionBuffer.data, b499 = this.m_velocityBuffer.data;
                                for (let o500 = 0; o500 < this.m_count; o500++)
                                    0 != (this.m_flagsBuffer.data[o500] & v459.k_barrierWallFlags) && b499[o500].SetZero();
                                const c499 = w450 * n498.dt, d499 = this.GetParticleMass();
                                for (let e499 = 0; e499 < this.m_pairBuffer.count; e499++) {
                                    const f499 = this.m_pairBuffer.data[e499];
                                    if (f499.flags & m447.b2ParticleFlag.b2_barrierParticle) {
                                        const g499 = f499.indexA, h499 = f499.indexB, i499 = a499[g499], j499 = a499[h499], k499 = o498;
                                        q451.MinV(i499, j499, k499.lowerBound), q451.MaxV(i499, j499, k499.upperBound);
                                        const l499 = this.m_groupBuffer[g499], m499 = this.m_groupBuffer[h499], n499 = this.GetLinearVelocity(l499, g499, i499, p498), o499 = this.GetLinearVelocity(m499, h499, j499, q498), p499 = q451.SubVV(j499, i499, r498), q499 = q451.SubVV(o499, n499, s498), r499 = this.GetInsideBoundsEnumerator(k499);
                                        let s499;
                                        for (; (s499 = r499.GetNext()) >= 0;) {
                                            const t499 = a499[s499], u499 = this.m_groupBuffer[s499];
                                            if (l499 !== u499 && m499 !== u499) {
                                                const v499 = this.GetLinearVelocity(u499, s499, t499, t498), w499 = q451.SubVV(t499, i499, u498), x499 = q451.SubVV(v499, n499, v498), y499 = q451.CrossVV(q499, x499), z499 = q451.CrossVV(p499, x499) - q451.CrossVV(w499, q499), a500 = q451.CrossVV(p499, w499);
                                                let b500, c500;
                                                const d500 = w498, e500 = x498;
                                                if (0 === y499) {
                                                    if (0 === z499)
                                                        continue;
                                                    if (c500 = -a500 / z499, !(c500 >= 0 && c500 < c499))
                                                        continue;
                                                    if (q451.AddVMulSV(p499, c500, q499, d500), q451.AddVMulSV(w499, c500, x499, e500), b500 = q451.DotVV(d500, e500) / q451.DotVV(d500, d500), !(b500 >= 0 && b500 <= 1))
                                                        continue;
                                                }
                                                else {
                                                    const j500 = z499 * z499 - 4 * a500 * y499;
                                                    if (j500 < 0)
                                                        continue;
                                                    const k500 = j451(j500);
                                                    let l500 = (-z499 - k500) / (2 * y499), m500 = (-z499 + k500) / (2 * y499);
                                                    if (l500 > m500) {
                                                        const n500 = l500;
                                                        l500 = m500, m500 = n500;
                                                    }
                                                    if (c500 = l500, q451.AddVMulSV(p499, c500, q499, d500), q451.AddVMulSV(w499, c500, x499, e500), b500 = q451.DotVV(d500, e500) / q451.DotVV(d500, d500), !(c500 >= 0 && c500 < c499 && b500 >= 0 && b500 <= 1)) {
                                                        if (c500 = m500, !(c500 >= 0 && c500 < c499))
                                                            continue;
                                                        if (q451.AddVMulSV(p499, c500, q499, d500), q451.AddVMulSV(w499, c500, x499, e500), b500 = q451.DotVV(d500, e500) / q451.DotVV(d500, d500), !(b500 >= 0 && b500 <= 1))
                                                            continue;
                                                    }
                                                }
                                                const f500 = y498;
                                                f500.x = n499.x + b500 * q499.x - v499.x, f500.y = n499.y + b500 * q499.y - v499.y;
                                                const g500 = q451.MulSV(d499, f500, z498);
                                                if (u499 && this.IsRigidGroup(u499)) {
                                                    const h500 = u499.GetMass(), i500 = u499.GetInertia();
                                                    h500 > 0 && u499.m_linearVelocity.SelfMulAdd(1 / h500, g500), i500 > 0 && (u499.m_angularVelocity += q451.CrossVV(q451.SubVV(t499, u499.GetCenter(), q451.s_t0), g500) / i500);
                                                }
                                                else
                                                    b499[s499].SelfAdd(f500);
                                                this.ParticleApplyForce(s499, g500.SelfMul(-n498.inv_dt));
                                            }
                                        }
                                    }
                                }
                            }
                            SolveStaticPressure(y497) {
                                this.m_staticPressureBuffer = this.RequestBuffer(this.m_staticPressureBuffer);
                                const z497 = this.GetCriticalPressure(y497), a498 = this.m_def.staticPressureStrength * z497, b498 = r450 * z497, c498 = this.m_def.staticPressureRelaxation;
                                for (let d498 = 0; d498 < this.m_def.staticPressureIterations; d498++) {
                                    for (let m498 = 0; m498 < this.m_count; m498++)
                                        this.m_accumulationBuffer[m498] = 0;
                                    for (let h498 = 0; h498 < this.m_contactBuffer.count; h498++) {
                                        const i498 = this.m_contactBuffer.data[h498];
                                        if (i498.flags & m447.b2ParticleFlag.b2_staticPressureParticle) {
                                            const j498 = i498.indexA, k498 = i498.indexB, l498 = i498.weight;
                                            this.m_accumulationBuffer[j498] += l498 * this.m_staticPressureBuffer[k498], this.m_accumulationBuffer[k498] += l498 * this.m_staticPressureBuffer[j498];
                                        }
                                    }
                                    for (let e498 = 0; e498 < this.m_count; e498++) {
                                        const f498 = this.m_weightBuffer[e498];
                                        if (this.m_flagsBuffer.data[e498] & m447.b2ParticleFlag.b2_staticPressureParticle) {
                                            const g498 = (this.m_accumulationBuffer[e498] + a498 * (f498 - q450)) / (f498 + c498);
                                            this.m_staticPressureBuffer[e498] = z447(g498, 0, b498);
                                        }
                                        else
                                            this.m_staticPressureBuffer[e498] = 0;
                                    }
                                }
                            }
                            ComputeWeight() {
                                for (let x497 = 0; x497 < this.m_count; x497++)
                                    this.m_weightBuffer[x497] = 0;
                                for (let t497 = 0; t497 < this.m_bodyContactBuffer.count; t497++) {
                                    const u497 = this.m_bodyContactBuffer.data[t497], v497 = u497.index, w497 = u497.weight;
                                    this.m_weightBuffer[v497] += w497;
                                }
                                for (let o497 = 0; o497 < this.m_contactBuffer.count; o497++) {
                                    const p497 = this.m_contactBuffer.data[o497], q497 = p497.indexA, r497 = p497.indexB, s497 = p497.weight;
                                    this.m_weightBuffer[q497] += s497, this.m_weightBuffer[r497] += s497;
                                }
                            }
                            SolvePressure(j496) {
                                const k496 = v459.SolvePressure_s_f, l496 = this.m_positionBuffer.data, m496 = this.m_velocityBuffer.data, n496 = this.GetCriticalPressure(j496), o496 = this.m_def.pressureStrength * n496, p496 = r450 * n496;
                                for (let m497 = 0; m497 < this.m_count; m497++) {
                                    const n497 = o496 * y447(0, this.m_weightBuffer[m497] - q450);
                                    this.m_accumulationBuffer[m497] = x447(n497, p496);
                                }
                                if (this.m_allParticleFlags & v459.k_noPressureFlags)
                                    for (let l497 = 0; l497 < this.m_count; l497++)
                                        this.m_flagsBuffer.data[l497] & v459.k_noPressureFlags && (this.m_accumulationBuffer[l497] = 0);
                                if (this.m_allParticleFlags & m447.b2ParticleFlag.b2_staticPressureParticle)
                                    for (let k497 = 0; k497 < this.m_count; k497++)
                                        this.m_flagsBuffer.data[k497] & m447.b2ParticleFlag.b2_staticPressureParticle && (this.m_accumulationBuffer[k497] += this.m_staticPressureBuffer[k497]);
                                const q496 = j496.dt / (this.m_def.density * this.m_particleDiameter), r496 = this.GetParticleInvMass();
                                for (let a497 = 0; a497 < this.m_bodyContactBuffer.count; a497++) {
                                    const b497 = this.m_bodyContactBuffer.data[a497], c497 = b497.index, d497 = b497.body, e497 = b497.weight, f497 = b497.mass, g497 = b497.normal, h497 = l496[c497], i497 = this.m_accumulationBuffer[c497] + o496 * e497, j497 = q451.MulSV(q496 * e497 * f497 * i497, g497, k496);
                                    m496[c497].SelfMulSub(r496, j497), d497.ApplyLinearImpulse(j497, h497, !0);
                                }
                                for (let s496 = 0; s496 < this.m_contactBuffer.count; s496++) {
                                    const t496 = this.m_contactBuffer.data[s496], u496 = t496.indexA, v496 = t496.indexB, w496 = t496.weight, x496 = t496.normal, y496 = this.m_accumulationBuffer[u496] + this.m_accumulationBuffer[v496], z496 = q451.MulSV(q496 * w496 * y496, x496, k496);
                                    m496[u496].SelfSub(z496), m496[v496].SelfAdd(z496);
                                }
                            }
                            SolveDamping(f495) {
                                const g495 = v459.SolveDamping_s_v, h495 = v459.SolveDamping_s_f, i495 = this.m_positionBuffer.data, j495 = this.m_velocityBuffer.data, k495 = this.m_def.dampingStrength, l495 = 1 / this.GetCriticalVelocity(f495), m495 = this.GetParticleInvMass();
                                for (let x495 = 0; x495 < this.m_bodyContactBuffer.count; x495++) {
                                    const y495 = this.m_bodyContactBuffer.data[x495], z495 = y495.index, a496 = y495.body, b496 = y495.weight, c496 = y495.mass, d496 = y495.normal, e496 = i495[z495], f496 = q451.SubVV(a496.GetLinearVelocityFromWorldPoint(e496, q451.s_t0), j495[z495], g495), g496 = q451.DotVV(f496, d496);
                                    if (g496 < 0) {
                                        const h496 = y447(k495 * b496, x447(-l495 * g496, .5)), i496 = q451.MulSV(h496 * c496 * g496, d496, h495);
                                        j495[z495].SelfMulAdd(m495, i496), a496.ApplyLinearImpulse(i496.SelfNeg(), e496, !0);
                                    }
                                }
                                for (let n495 = 0; n495 < this.m_contactBuffer.count; n495++) {
                                    const o495 = this.m_contactBuffer.data[n495], p495 = o495.indexA, q495 = o495.indexB, r495 = o495.weight, s495 = o495.normal, t495 = q451.SubVV(j495[q495], j495[p495], g495), u495 = q451.DotVV(t495, s495);
                                    if (u495 < 0) {
                                        const v495 = y447(k495 * r495, x447(-l495 * u495, .5)), w495 = q451.MulSV(v495 * u495, s495, h495);
                                        j495[p495].SelfAdd(w495), j495[q495].SelfSub(w495);
                                    }
                                }
                            }
                            SolveRigidDamping() {
                                const u493 = v459.SolveRigidDamping_s_t0, v493 = v459.SolveRigidDamping_s_t1, w493 = v459.SolveRigidDamping_s_p, x493 = v459.SolveRigidDamping_s_v, y493 = [0], z493 = [0], a494 = [0], b494 = [0], c494 = [0], d494 = [0], e494 = this.m_positionBuffer.data, f494 = this.m_def.dampingStrength;
                                for (let u494 = 0; u494 < this.m_bodyContactBuffer.count; u494++) {
                                    const v494 = this.m_bodyContactBuffer.data[u494], w494 = v494.index, x494 = this.m_groupBuffer[w494];
                                    if (x494 && this.IsRigidGroup(x494)) {
                                        const y494 = v494.body, z494 = v494.normal, a495 = v494.weight, b495 = e494[w494], c495 = q451.SubVV(y494.GetLinearVelocityFromWorldPoint(b495, u493), x494.GetLinearVelocityFromWorldPoint(b495, v493), x493), d495 = q451.DotVV(c495, z494);
                                        if (d495 < 0) {
                                            this.InitDampingParameterWithRigidGroupOrParticle(y493, z493, a494, !0, x494, w494, b495, z494), this.InitDampingParameter(b494, c494, d494, y494.GetMass(), y494.GetInertia() - y494.GetMass() * y494.GetLocalCenter().LengthSquared(), y494.GetWorldCenter(), b495, z494);
                                            const e495 = f494 * x447(a495, 1) * this.ComputeDampingImpulse(y493[0], z493[0], a494[0], b494[0], c494[0], d494[0], d495);
                                            this.ApplyDamping(y493[0], z493[0], a494[0], !0, x494, w494, e495, z494), y494.ApplyLinearImpulse(q451.MulSV(-e495, z494, q451.s_t0), b495, !0);
                                        }
                                    }
                                }
                                for (let g494 = 0; g494 < this.m_contactBuffer.count; g494++) {
                                    const h494 = this.m_contactBuffer.data[g494], i494 = h494.indexA, j494 = h494.indexB, k494 = h494.normal, l494 = h494.weight, m494 = this.m_groupBuffer[i494], n494 = this.m_groupBuffer[j494], o494 = this.IsRigidGroup(m494), p494 = this.IsRigidGroup(n494);
                                    if (m494 !== n494 && (o494 || p494)) {
                                        const q494 = q451.MidVV(e494[i494], e494[j494], w493), r494 = q451.SubVV(this.GetLinearVelocity(n494, j494, q494, u493), this.GetLinearVelocity(m494, i494, q494, v493), x493), s494 = q451.DotVV(r494, k494);
                                        if (s494 < 0) {
                                            this.InitDampingParameterWithRigidGroupOrParticle(y493, z493, a494, o494, m494, i494, q494, k494), this.InitDampingParameterWithRigidGroupOrParticle(b494, c494, d494, p494, n494, j494, q494, k494);
                                            const t494 = f494 * l494 * this.ComputeDampingImpulse(y493[0], z493[0], a494[0], b494[0], c494[0], d494[0], s494);
                                            this.ApplyDamping(y493[0], z493[0], a494[0], o494, m494, i494, t494, k494), this.ApplyDamping(b494[0], c494[0], d494[0], p494, n494, j494, -t494, k494);
                                        }
                                    }
                                }
                            }
                            SolveExtraDamping() {
                                const f493 = v459.SolveExtraDamping_s_v, g493 = v459.SolveExtraDamping_s_f, h493 = this.m_velocityBuffer.data, i493 = this.m_positionBuffer.data, j493 = this.GetParticleInvMass();
                                for (let k493 = 0; k493 < this.m_bodyContactBuffer.count; k493++) {
                                    const l493 = this.m_bodyContactBuffer.data[k493], m493 = l493.index;
                                    if (this.m_flagsBuffer.data[m493] & v459.k_extraDampingFlags) {
                                        const n493 = l493.body, o493 = l493.mass, p493 = l493.normal, q493 = i493[m493], r493 = q451.SubVV(n493.GetLinearVelocityFromWorldPoint(q493, q451.s_t0), h493[m493], f493), s493 = q451.DotVV(r493, p493);
                                        if (s493 < 0) {
                                            const t493 = q451.MulSV(.5 * o493 * s493, p493, g493);
                                            h493[m493].SelfMulAdd(j493, t493), n493.ApplyLinearImpulse(t493.SelfNeg(), q493, !0);
                                        }
                                    }
                                }
                            }
                            SolveWall() {
                                const d493 = this.m_velocityBuffer.data;
                                for (let e493 = 0; e493 < this.m_count; e493++)
                                    this.m_flagsBuffer.data[e493] & m447.b2ParticleFlag.b2_wallParticle && d493[e493].SetZero();
                            }
                            SolveRigid(q492) {
                                const r492 = v459.SolveRigid_s_position, s492 = v459.SolveRigid_s_rotation, t492 = v459.SolveRigid_s_transform, u492 = v459.SolveRigid_s_velocityTransform, v492 = this.m_positionBuffer.data, w492 = this.m_velocityBuffer.data;
                                for (let x492 = this.m_groupList; x492; x492 = x492.GetNext())
                                    if (x492.m_groupFlags & m447.b2ParticleGroupFlag.b2_rigidParticleGroup) {
                                        x492.UpdateStatistics();
                                        const y492 = s492;
                                        y492.SetAngle(q492.dt * x492.m_angularVelocity);
                                        const z492 = q451.AddVV(x492.m_center, q451.SubVV(q451.MulSV(q492.dt, x492.m_linearVelocity, q451.s_t0), v451.MulRV(y492, x492.m_center, q451.s_t1), q451.s_t0), r492), a493 = t492;
                                        a493.SetPositionRotation(z492, y492), w451.MulXX(a493, x492.m_transform, x492.m_transform);
                                        const b493 = u492;
                                        b493.p.x = q492.inv_dt * a493.p.x, b493.p.y = q492.inv_dt * a493.p.y, b493.q.s = q492.inv_dt * a493.q.s, b493.q.c = q492.inv_dt * (a493.q.c - 1);
                                        for (let c493 = x492.m_firstIndex; c493 < x492.m_lastIndex; c493++)
                                            w451.MulXV(b493, v492[c493], w492[c493]);
                                    }
                            }
                            SolveElastic(o491) {
                                const p491 = v459.SolveElastic_s_pa, q491 = v459.SolveElastic_s_pb, r491 = v459.SolveElastic_s_pc, s491 = v459.SolveElastic_s_r, t491 = v459.SolveElastic_s_t0, u491 = this.m_positionBuffer.data, v491 = this.m_velocityBuffer.data, w491 = o491.inv_dt * this.m_def.elasticStrength;
                                for (let x491 = 0; x491 < this.m_triadBuffer.count; x491++) {
                                    const y491 = this.m_triadBuffer.data[x491];
                                    if (y491.flags & m447.b2ParticleFlag.b2_elasticParticle) {
                                        const z491 = y491.indexA, a492 = y491.indexB, b492 = y491.indexC, c492 = y491.pa, d492 = y491.pb, e492 = y491.pc, f492 = p491.Copy(u491[z491]), g492 = q491.Copy(u491[a492]), h492 = r491.Copy(u491[b492]), i492 = v491[z491], j492 = v491[a492], k492 = v491[b492];
                                        f492.SelfMulAdd(o491.dt, i492), g492.SelfMulAdd(o491.dt, j492), h492.SelfMulAdd(o491.dt, k492);
                                        const l492 = (f492.x + g492.x + h492.x) / 3, m492 = (f492.y + g492.y + h492.y) / 3;
                                        f492.x -= l492, f492.y -= m492, g492.x -= l492, g492.y -= m492, h492.x -= l492, h492.y -= m492;
                                        const n492 = s491;
                                        n492.s = q451.CrossVV(c492, f492) + q451.CrossVV(d492, g492) + q451.CrossVV(e492, h492), n492.c = q451.DotVV(c492, f492) + q451.DotVV(d492, g492) + q451.DotVV(e492, h492);
                                        let o492 = c448(n492.s * n492.s + n492.c * n492.c);
                                        isFinite(o492) || (o492 = 198177537e11), n492.s *= o492, n492.c *= o492;
                                        const p492 = w491 * y491.strength;
                                        v451.MulRV(n492, c492, t491), q451.SubVV(t491, f492, t491), q451.MulSV(p492, t491, t491), i492.SelfAdd(t491), v451.MulRV(n492, d492, t491), q451.SubVV(t491, g492, t491), q451.MulSV(p492, t491, t491), j492.SelfAdd(t491), v451.MulRV(n492, e492, t491), q451.SubVV(t491, h492, t491), q451.MulSV(p492, t491, t491), k492.SelfAdd(t491);
                                    }
                                }
                            }
                            SolveSpring(t490) {
                                const u490 = v459.SolveSpring_s_pa, v490 = v459.SolveSpring_s_pb, w490 = v459.SolveSpring_s_d, x490 = v459.SolveSpring_s_f, y490 = this.m_positionBuffer.data, z490 = this.m_velocityBuffer.data, a491 = t490.inv_dt * this.m_def.springStrength;
                                for (let b491 = 0; b491 < this.m_pairBuffer.count; b491++) {
                                    const c491 = this.m_pairBuffer.data[b491];
                                    if (c491.flags & m447.b2ParticleFlag.b2_springParticle) {
                                        const d491 = c491.indexA, e491 = c491.indexB, f491 = u490.Copy(y490[d491]), g491 = v490.Copy(y490[e491]), h491 = z490[d491], i491 = z490[e491];
                                        f491.SelfMulAdd(t490.dt, h491), g491.SelfMulAdd(t490.dt, i491);
                                        const j491 = q451.SubVV(g491, f491, w490), k491 = c491.distance, l491 = j491.Length(), m491 = a491 * c491.strength, n491 = q451.MulSV(m491 * (k491 - l491) / l491, j491, x490);
                                        h491.SelfSub(n491), i491.SelfAdd(n491);
                                    }
                                }
                            }
                            SolveTensile(s489) {
                                const t489 = v459.SolveTensile_s_weightedNormal, u489 = v459.SolveTensile_s_s, v489 = v459.SolveTensile_s_f, w489 = this.m_velocityBuffer.data;
                                for (let s490 = 0; s490 < this.m_count; s490++)
                                    this.m_accumulation2Buffer[s490] = new q451(), this.m_accumulation2Buffer[s490].SetZero();
                                for (let l490 = 0; l490 < this.m_contactBuffer.count; l490++) {
                                    const m490 = this.m_contactBuffer.data[l490];
                                    if (m490.flags & m447.b2ParticleFlag.b2_tensileParticle) {
                                        const n490 = m490.indexA, o490 = m490.indexB, p490 = m490.weight, q490 = m490.normal, r490 = q451.MulSV((1 - p490) * p490, q490, t489);
                                        this.m_accumulation2Buffer[n490].SelfSub(r490), this.m_accumulation2Buffer[o490].SelfAdd(r490);
                                    }
                                }
                                const x489 = this.GetCriticalVelocity(s489), y489 = this.m_def.surfaceTensionPressureStrength * x489, z489 = this.m_def.surfaceTensionNormalStrength * x489, a490 = s450 * x489;
                                for (let b490 = 0; b490 < this.m_contactBuffer.count; b490++) {
                                    const c490 = this.m_contactBuffer.data[b490];
                                    if (c490.flags & m447.b2ParticleFlag.b2_tensileParticle) {
                                        const d490 = c490.indexA, e490 = c490.indexB, f490 = c490.weight, g490 = c490.normal, h490 = this.m_weightBuffer[d490] + this.m_weightBuffer[e490], i490 = q451.SubVV(this.m_accumulation2Buffer[e490], this.m_accumulation2Buffer[d490], u489), j490 = x447(y489 * (h490 - 2) + z489 * q451.DotVV(i490, g490), a490) * f490, k490 = q451.MulSV(j490, g490, v489);
                                        w489[d490].SelfSub(k490), w489[e490].SelfAdd(k490);
                                    }
                                }
                            }
                            SolveViscous() {
                                const w488 = v459.SolveViscous_s_v, x488 = v459.SolveViscous_s_f, y488 = this.m_positionBuffer.data, z488 = this.m_velocityBuffer.data, a489 = this.m_def.viscousStrength, b489 = this.GetParticleInvMass();
                                for (let j489 = 0; j489 < this.m_bodyContactBuffer.count; j489++) {
                                    const k489 = this.m_bodyContactBuffer.data[j489], l489 = k489.index;
                                    if (this.m_flagsBuffer.data[l489] & m447.b2ParticleFlag.b2_viscousParticle) {
                                        const m489 = k489.body, n489 = k489.weight, o489 = k489.mass, p489 = y488[l489], q489 = q451.SubVV(m489.GetLinearVelocityFromWorldPoint(p489, q451.s_t0), z488[l489], w488), r489 = q451.MulSV(a489 * o489 * n489, q489, x488);
                                        z488[l489].SelfMulAdd(b489, r489), m489.ApplyLinearImpulse(r489.SelfNeg(), p489, !0);
                                    }
                                }
                                for (let c489 = 0; c489 < this.m_contactBuffer.count; c489++) {
                                    const d489 = this.m_contactBuffer.data[c489];
                                    if (d489.flags & m447.b2ParticleFlag.b2_viscousParticle) {
                                        const e489 = d489.indexA, f489 = d489.indexB, g489 = d489.weight, h489 = q451.SubVV(z488[f489], z488[e489], w488), i489 = q451.MulSV(a489 * g489, h489, x488);
                                        z488[e489].SelfAdd(i489), z488[f489].SelfSub(i489);
                                    }
                                }
                            }
                            SolveRepulsive(l488) {
                                const m488 = v459.SolveRepulsive_s_f, n488 = this.m_velocityBuffer.data, o488 = this.m_def.repulsiveStrength * this.GetCriticalVelocity(l488);
                                for (let p488 = 0; p488 < this.m_contactBuffer.count; p488++) {
                                    const q488 = this.m_contactBuffer.data[p488];
                                    if (q488.flags & m447.b2ParticleFlag.b2_repulsiveParticle) {
                                        const r488 = q488.indexA, s488 = q488.indexB;
                                        if (this.m_groupBuffer[r488] !== this.m_groupBuffer[s488]) {
                                            const t488 = q488.weight, u488 = q488.normal, v488 = q451.MulSV(o488 * t488, u488, m488);
                                            n488[r488].SelfSub(v488), n488[s488].SelfAdd(v488);
                                        }
                                    }
                                }
                            }
                            SolvePowder(o487) {
                                const p487 = v459.SolvePowder_s_f, q487 = this.m_positionBuffer.data, r487 = this.m_velocityBuffer.data, s487 = this.m_def.powderStrength * this.GetCriticalVelocity(o487), t487 = 1 - p450, u487 = this.GetParticleInvMass();
                                for (let c488 = 0; c488 < this.m_bodyContactBuffer.count; c488++) {
                                    const d488 = this.m_bodyContactBuffer.data[c488], e488 = d488.index;
                                    if (this.m_flagsBuffer.data[e488] & m447.b2ParticleFlag.b2_powderParticle) {
                                        const f488 = d488.weight;
                                        if (f488 > t487) {
                                            const g488 = d488.body, h488 = d488.mass, i488 = q487[e488], j488 = d488.normal, k488 = q451.MulSV(s487 * h488 * (f488 - t487), j488, p487);
                                            r487[e488].SelfMulSub(u487, k488), g488.ApplyLinearImpulse(k488, i488, !0);
                                        }
                                    }
                                }
                                for (let v487 = 0; v487 < this.m_contactBuffer.count; v487++) {
                                    const w487 = this.m_contactBuffer.data[v487];
                                    if (w487.flags & m447.b2ParticleFlag.b2_powderParticle) {
                                        const x487 = w487.weight;
                                        if (x487 > t487) {
                                            const y487 = w487.indexA, z487 = w487.indexB, a488 = w487.normal, b488 = q451.MulSV(s487 * (x487 - t487), a488, p487);
                                            r487[y487].SelfSub(b488), r487[z487].SelfAdd(b488);
                                        }
                                    }
                                }
                            }
                            SolveSolid(c487) {
                                const d487 = v459.SolveSolid_s_f, e487 = this.m_velocityBuffer.data;
                                this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);
                                const f487 = c487.inv_dt * this.m_def.ejectionStrength;
                                for (let g487 = 0; g487 < this.m_contactBuffer.count; g487++) {
                                    const h487 = this.m_contactBuffer.data[g487], i487 = h487.indexA, j487 = h487.indexB;
                                    if (this.m_groupBuffer[i487] !== this.m_groupBuffer[j487]) {
                                        const k487 = h487.weight, l487 = h487.normal, m487 = this.m_depthBuffer[i487] + this.m_depthBuffer[j487], n487 = q451.MulSV(f487 * m487 * k487, l487, d487);
                                        e487[i487].SelfSub(n487), e487[j487].SelfAdd(n487);
                                    }
                                }
                            }
                            SolveForce(y486) {
                                const z486 = this.m_velocityBuffer.data, a487 = y486.dt * this.GetParticleInvMass();
                                for (let b487 = 0; b487 < this.m_count; b487++)
                                    z486[b487].SelfMulAdd(a487, this.m_forceBuffer[b487]);
                                this.m_hasForce = !1;
                            }
                            SolveColorMixing() {
                                const r486 = .5 * this.m_def.colorMixingStrength;
                                if (r486)
                                    for (let s486 = 0; s486 < this.m_contactBuffer.count; s486++) {
                                        const t486 = this.m_contactBuffer.data[s486], u486 = t486.indexA, v486 = t486.indexB;
                                        if (this.m_flagsBuffer.data[u486] & this.m_flagsBuffer.data[v486] & m447.b2ParticleFlag.b2_colorMixingParticle) {
                                            const w486 = this.m_colorBuffer.data[u486], x486 = this.m_colorBuffer.data[v486];
                                            y451.MixColors(w486, x486, r486);
                                        }
                                    }
                            }
                            SolveZombie() {
                                let h485 = 0;
                                const i485 = [];
                                for (let q486 = 0; q486 < this.m_count; q486++)
                                    i485[q486] = n450;
                                let j485 = 0;
                                for (let l486 = 0; l486 < this.m_count; l486++) {
                                    const m486 = this.m_flagsBuffer.data[l486];
                                    if (m486 & m447.b2ParticleFlag.b2_zombieParticle) {
                                        const o486 = this.m_world.m_destructionListener;
                                        if (m486 & m447.b2ParticleFlag.b2_destructionListenerParticle && o486 && o486.SayGoodbyeParticle(this, l486), this.m_handleIndexBuffer.data) {
                                            const p486 = this.m_handleIndexBuffer.data[l486];
                                            p486 && (p486.SetIndex(n450), this.m_handleIndexBuffer.data[l486] = null);
                                        }
                                        i485[l486] = n450;
                                    }
                                    else {
                                        if (i485[l486] = h485, l486 !== h485) {
                                            if (this.m_handleIndexBuffer.data) {
                                                const n486 = this.m_handleIndexBuffer.data[l486];
                                                n486 && n486.SetIndex(h485), this.m_handleIndexBuffer.data[h485] = n486;
                                            }
                                            this.m_flagsBuffer.data[h485] = this.m_flagsBuffer.data[l486], this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[h485] = this.m_lastBodyContactStepBuffer.data[l486]), this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[h485] = this.m_bodyContactCountBuffer.data[l486]), this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[h485] = this.m_consecutiveContactStepsBuffer.data[l486]), this.m_positionBuffer.data[h485].Copy(this.m_positionBuffer.data[l486]), this.m_velocityBuffer.data[h485].Copy(this.m_velocityBuffer.data[l486]), this.m_groupBuffer[h485] = this.m_groupBuffer[l486], this.m_hasForce && this.m_forceBuffer[h485].Copy(this.m_forceBuffer[l486]), this.m_staticPressureBuffer && (this.m_staticPressureBuffer[h485] = this.m_staticPressureBuffer[l486]), this.m_depthBuffer && (this.m_depthBuffer[h485] = this.m_depthBuffer[l486]), this.m_colorBuffer.data && this.m_colorBuffer.data[h485].Copy(this.m_colorBuffer.data[l486]), this.m_userDataBuffer.data && (this.m_userDataBuffer.data[h485] = this.m_userDataBuffer.data[l486]), this.m_expirationTimeBuffer.data && (this.m_expirationTimeBuffer.data[h485] = this.m_expirationTimeBuffer.data[l486]);
                                        }
                                        h485++, j485 |= m486;
                                    }
                                }
                                const k485 = {
                                    IsProxyInvalid: k486 => k486.index < 0,
                                    IsContactInvalid: j486 => j486.indexA < 0 || j486.indexB < 0,
                                    IsBodyContactInvalid: i486 => i486.index < 0,
                                    IsPairInvalid: h486 => h486.indexA < 0 || h486.indexB < 0,
                                    IsTriadInvalid: g486 => g486.indexA < 0 || g486.indexB < 0 || g486.indexC < 0
                                };
                                for (let e486 = 0; e486 < this.m_proxyBuffer.count; e486++) {
                                    const f486 = this.m_proxyBuffer.data[e486];
                                    f486.index = i485[f486.index];
                                }
                                this.m_proxyBuffer.RemoveIf(k485.IsProxyInvalid);
                                for (let c486 = 0; c486 < this.m_contactBuffer.count; c486++) {
                                    const d486 = this.m_contactBuffer.data[c486];
                                    d486.indexA = i485[d486.indexA], d486.indexB = i485[d486.indexB];
                                }
                                this.m_contactBuffer.RemoveIf(k485.IsContactInvalid);
                                for (let a486 = 0; a486 < this.m_bodyContactBuffer.count; a486++) {
                                    const b486 = this.m_bodyContactBuffer.data[a486];
                                    b486.index = i485[b486.index];
                                }
                                this.m_bodyContactBuffer.RemoveIf(k485.IsBodyContactInvalid);
                                for (let y485 = 0; y485 < this.m_pairBuffer.count; y485++) {
                                    const z485 = this.m_pairBuffer.data[y485];
                                    z485.indexA = i485[z485.indexA], z485.indexB = i485[z485.indexB];
                                }
                                this.m_pairBuffer.RemoveIf(k485.IsPairInvalid);
                                for (let w485 = 0; w485 < this.m_triadBuffer.count; w485++) {
                                    const x485 = this.m_triadBuffer.data[w485];
                                    x485.indexA = i485[x485.indexA], x485.indexB = i485[x485.indexB], x485.indexC = i485[x485.indexC];
                                }
                                if (this.m_triadBuffer.RemoveIf(k485.IsTriadInvalid), this.m_indexByExpirationTimeBuffer.data) {
                                    let t485 = 0;
                                    for (let u485 = 0; u485 < this.m_count; u485++) {
                                        const v485 = i485[this.m_indexByExpirationTimeBuffer.data[u485]];
                                        v485 !== n450 && (this.m_indexByExpirationTimeBuffer.data[t485++] = v485);
                                    }
                                }
                                for (let n485 = this.m_groupList; n485; n485 = n485.GetNext()) {
                                    let o485 = h485, p485 = 0, q485 = !1;
                                    for (let r485 = n485.m_firstIndex; r485 < n485.m_lastIndex; r485++) {
                                        const s485 = i485[r485];
                                        s485 >= 0 ? (o485 = x447(o485, s485), p485 = y447(p485, s485 + 1)) : q485 = !0;
                                    }
                                    o485 < p485 ? (n485.m_firstIndex = o485, n485.m_lastIndex = p485, q485 && n485.m_groupFlags & m447.b2ParticleGroupFlag.b2_solidParticleGroup && this.SetGroupFlags(n485, n485.m_groupFlags | m447.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth)) : (n485.m_firstIndex = 0, n485.m_lastIndex = 0, n485.m_groupFlags & m447.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty || this.SetGroupFlags(n485, n485.m_groupFlags | m447.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed));
                                }
                                this.m_count = h485, this.m_allParticleFlags = j485, this.m_needsUpdateAllParticleFlags = !1;
                                for (let l485 = this.m_groupList; l485;) {
                                    const m485 = l485.GetNext();
                                    l485.m_groupFlags & m447.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed && this.DestroyParticleGroup(l485), l485 = m485;
                                }
                            }
                            SolveLifetimes(t484) {
                                this.m_timeElapsed = this.LifetimeToExpirationTime(t484.dt);
                                const u484 = this.GetQuantizedTimeElapsed(), v484 = this.m_expirationTimeBuffer.data, w484 = this.m_indexByExpirationTimeBuffer.data, x484 = this.GetParticleCount();
                                this.m_expirationTimeBufferRequiresSorting && (k449(w484, 0, x484, (c485, d485) => {
                                    const e485 = v484[c485], f485 = v484[d485], g485 = e485 <= 0;
                                    return g485 === f485 <= 0 ? e485 > f485 : g485;
                                }), this.m_expirationTimeBufferRequiresSorting = !1);
                                for (let z484 = x484 - 1; z484 >= 0; --z484) {
                                    const a485 = w484[z484], b485 = v484[a485];
                                    if (u484 < b485 || b485 <= 0)
                                        break;
                                    this.DestroyParticle(a485);
                                }
                            }
                            RotateBuffer(y483, z483, a484) {
                                if (y483 !== z483 && z483 !== a484) {
                                    if (p449(this.m_flagsBuffer.data, y483, z483, a484), this.m_lastBodyContactStepBuffer.data && p449(this.m_lastBodyContactStepBuffer.data, y483, z483, a484), this.m_bodyContactCountBuffer.data && p449(this.m_bodyContactCountBuffer.data, y483, z483, a484), this.m_consecutiveContactStepsBuffer.data && p449(this.m_consecutiveContactStepsBuffer.data, y483, z483, a484), p449(this.m_positionBuffer.data, y483, z483, a484), p449(this.m_velocityBuffer.data, y483, z483, a484), p449(this.m_groupBuffer, y483, z483, a484), this.m_hasForce && p449(this.m_forceBuffer, y483, z483, a484), this.m_staticPressureBuffer && p449(this.m_staticPressureBuffer, y483, z483, a484), this.m_depthBuffer && p449(this.m_depthBuffer, y483, z483, a484), this.m_colorBuffer.data && p449(this.m_colorBuffer.data, y483, z483, a484), this.m_userDataBuffer.data && p449(this.m_userDataBuffer.data, y483, z483, a484), this.m_handleIndexBuffer.data) {
                                        p449(this.m_handleIndexBuffer.data, y483, z483, a484);
                                        for (let r484 = y483; r484 < a484; ++r484) {
                                            const s484 = this.m_handleIndexBuffer.data[r484];
                                            s484 && s484.SetIndex(b484(s484.GetIndex()));
                                        }
                                    }
                                    if (this.m_expirationTimeBuffer.data) {
                                        p449(this.m_expirationTimeBuffer.data, y483, z483, a484);
                                        const o484 = this.GetParticleCount(), p484 = this.m_indexByExpirationTimeBuffer.data;
                                        for (let q484 = 0; q484 < o484; ++q484)
                                            p484[q484] = b484(p484[q484]);
                                    }
                                    for (let m484 = 0; m484 < this.m_proxyBuffer.count; m484++) {
                                        const n484 = this.m_proxyBuffer.data[m484];
                                        n484.index = b484(n484.index);
                                    }
                                    for (let k484 = 0; k484 < this.m_contactBuffer.count; k484++) {
                                        const l484 = this.m_contactBuffer.data[k484];
                                        l484.indexA = b484(l484.indexA), l484.indexB = b484(l484.indexB);
                                    }
                                    for (let i484 = 0; i484 < this.m_bodyContactBuffer.count; i484++) {
                                        const j484 = this.m_bodyContactBuffer.data[i484];
                                        j484.index = b484(j484.index);
                                    }
                                    for (let g484 = 0; g484 < this.m_pairBuffer.count; g484++) {
                                        const h484 = this.m_pairBuffer.data[g484];
                                        h484.indexA = b484(h484.indexA), h484.indexB = b484(h484.indexB);
                                    }
                                    for (let e484 = 0; e484 < this.m_triadBuffer.count; e484++) {
                                        const f484 = this.m_triadBuffer.data[e484];
                                        f484.indexA = b484(f484.indexA), f484.indexB = b484(f484.indexB), f484.indexC = b484(f484.indexC);
                                    }
                                    for (let d484 = this.m_groupList; d484; d484 = d484.GetNext())
                                        d484.m_firstIndex = b484(d484.m_firstIndex), d484.m_lastIndex = b484(d484.m_lastIndex - 1) + 1;
                                }
                                function b484(c484) {
                                    return c484 < y483 ? c484 : c484 < z483 ? c484 + a484 - z483 : c484 < a484 ? c484 + y483 - z483 : c484;
                                }
                            }
                            GetCriticalVelocity(x483) {
                                return this.m_particleDiameter * x483.inv_dt;
                            }
                            GetCriticalVelocitySquared(v483) {
                                const w483 = this.GetCriticalVelocity(v483);
                                return w483 * w483;
                            }
                            GetCriticalPressure(u483) {
                                return this.m_def.density * this.GetCriticalVelocitySquared(u483);
                            }
                            GetParticleStride() {
                                return p450 * this.m_particleDiameter;
                            }
                            GetParticleMass() {
                                const t483 = this.GetParticleStride();
                                return this.m_def.density * t483 * t483;
                            }
                            GetParticleInvMass() {
                                const s483 = this.m_inverseDiameter * (1 / p450);
                                return this.m_inverseDensity * s483 * s483;
                            }
                            GetFixtureContactFilter() {
                                return this.m_allParticleFlags & m447.b2ParticleFlag.b2_fixtureContactFilterParticle ? this.m_world.m_contactManager.m_contactFilter : null;
                            }
                            GetParticleContactFilter() {
                                return this.m_allParticleFlags & m447.b2ParticleFlag.b2_particleContactFilterParticle ? this.m_world.m_contactManager.m_contactFilter : null;
                            }
                            GetFixtureContactListener() {
                                return this.m_allParticleFlags & m447.b2ParticleFlag.b2_fixtureContactListenerParticle ? this.m_world.m_contactManager.m_contactListener : null;
                            }
                            GetParticleContactListener() {
                                return this.m_allParticleFlags & m447.b2ParticleFlag.b2_particleContactListenerParticle ? this.m_world.m_contactManager.m_contactListener : null;
                            }
                            SetUserOverridableBuffer(q483, r483) {
                                q483.data = r483, q483.userSuppliedCapacity = r483.length;
                            }
                            SetGroupFlags(n483, o483) {
                                const p483 = n483.m_groupFlags;
                                (p483 ^ o483) & m447.b2ParticleGroupFlag.b2_solidParticleGroup && (o483 |= m447.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth), p483 & ~o483 && (this.m_needsUpdateAllGroupFlags = !0), ~this.m_allGroupFlags & o483 && (o483 & m447.b2ParticleGroupFlag.b2_solidParticleGroup && (this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer)), this.m_allGroupFlags |= o483), n483.m_groupFlags = o483;
                            }
                            static BodyContactCompare(l483, m483) {
                                return l483.index === m483.index ? l483.weight > m483.weight : l483.index < m483.index;
                            }
                            RemoveSpuriousBodyContacts() {
                                k449(this.m_bodyContactBuffer.data, 0, this.m_bodyContactBuffer.count, v459.BodyContactCompare);
                                const w482 = v459.RemoveSpuriousBodyContacts_s_n, x482 = v459.RemoveSpuriousBodyContacts_s_pos, y482 = v459.RemoveSpuriousBodyContacts_s_normal, z482 = 3, a483 = this;
                                let b483 = -1, c483 = 0;
                                const d483 = f483 => {
                                    if (f483.index !== b483 && (c483 = 0, b483 = f483.index), c483++ > z482)
                                        return !0;
                                    const g483 = w482.Copy(f483.normal);
                                    g483.SelfMul(a483.m_particleDiameter * (1 - f483.weight));
                                    const h483 = q451.AddVV(a483.m_positionBuffer.data[f483.index], g483, x482);
                                    if (!f483.fixture.TestPoint(h483)) {
                                        const i483 = f483.fixture.GetShape().GetChildCount();
                                        for (let j483 = 0; j483 < i483; j483++) {
                                            const k483 = y482;
                                            if (f483.fixture.ComputeDistance(h483, k483, j483) < z449)
                                                return !1;
                                        }
                                        return !0;
                                    }
                                    return !1;
                                };
                                this.m_bodyContactBuffer.count = m449(this.m_bodyContactBuffer.data, d483, this.m_bodyContactBuffer.count);
                            }
                            DetectStuckParticle(v482) {
                                this.m_stuckThreshold <= 0 || (++this.m_bodyContactCountBuffer.data[v482], 2 === this.m_bodyContactCountBuffer.data[v482] && (++this.m_consecutiveContactStepsBuffer.data[v482], this.m_consecutiveContactStepsBuffer.data[v482] > this.m_stuckThreshold && (this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()] = v482)), this.m_lastBodyContactStepBuffer.data[v482] = this.m_timestamp);
                            }
                            ValidateParticleIndex(u482) {
                                return u482 >= 0 && u482 < this.GetParticleCount() && u482 !== n450;
                            }
                            GetQuantizedTimeElapsed() {
                                return Math.floor(this.m_timeElapsed / 4294967296);
                            }
                            LifetimeToExpirationTime(t482) {
                                return this.m_timeElapsed + Math.floor(t482 / this.m_def.lifetimeGranularity * 4294967296);
                            }
                            ForceCanBeApplied(s482) {
                                return !(s482 & m447.b2ParticleFlag.b2_wallParticle);
                            }
                            PrepareForceBuffer() {
                                if (!this.m_hasForce) {
                                    for (let r482 = 0; r482 < this.m_count; r482++)
                                        this.m_forceBuffer[r482].SetZero();
                                    this.m_hasForce = !0;
                                }
                            }
                            IsRigidGroup(q482) {
                                return null !== q482 && 0 != (q482.m_groupFlags & m447.b2ParticleGroupFlag.b2_rigidParticleGroup);
                            }
                            GetLinearVelocity(m482, n482, o482, p482) {
                                return m482 && this.IsRigidGroup(m482) ? m482.GetLinearVelocityFromWorldPoint(o482, p482) : p482.Copy(this.m_velocityBuffer.data[n482]);
                            }
                            InitDampingParameter(e482, f482, g482, h482, i482, j482, k482, l482) {
                                e482[0] = h482 > 0 ? 1 / h482 : 0, f482[0] = i482 > 0 ? 1 / i482 : 0, g482[0] = q451.CrossVV(q451.SubVV(k482, j482, q451.s_t0), l482);
                            }
                            InitDampingParameterWithRigidGroupOrParticle(v481, w481, x481, y481, z481, a482, b482, c482) {
                                if (z481 && y481)
                                    this.InitDampingParameter(v481, w481, x481, z481.GetMass(), z481.GetInertia(), z481.GetCenter(), b482, c482);
                                else {
                                    const d482 = this.m_flagsBuffer.data[a482];
                                    this.InitDampingParameter(v481, w481, x481, d482 & m447.b2ParticleFlag.b2_wallParticle ? 0 : this.GetParticleMass(), 0, b482, b482, c482);
                                }
                            }
                            ComputeDampingImpulse(n481, o481, p481, q481, r481, s481, t481) {
                                const u481 = n481 + o481 * p481 * p481 + q481 + r481 * s481 * s481;
                                return u481 > 0 ? t481 / u481 : 0;
                            }
                            ApplyDamping(f481, g481, h481, i481, j481, k481, l481, m481) {
                                j481 && i481 ? (j481.m_linearVelocity.SelfMulAdd(l481 * f481, m481), j481.m_angularVelocity += l481 * h481 * g481) : this.m_velocityBuffer.data[k481].SelfMulAdd(l481 * f481, m481);
                            }
                        }
                        v459.xTruncBits = 12, v459.yTruncBits = 12, v459.tagBits = 32, v459.yOffset = 1 << v459.yTruncBits - 1, v459.yShift = v459.tagBits - v459.yTruncBits, v459.xShift = v459.tagBits - v459.yTruncBits - v459.xTruncBits, v459.xScale = 1 << v459.xShift, v459.xOffset = v459.xScale * (1 << v459.xTruncBits - 1), v459.yMask = (1 << v459.yTruncBits) - 1 << v459.yShift, v459.xMask = ~v459.yMask, v459.DestroyParticlesInShape_s_aabb = new p453(), v459.CreateParticleGroup_s_transform = new w451(), v459.ComputeCollisionEnergy_s_v = new q451(), v459.QueryShapeAABB_s_aabb = new p453(), v459.QueryPointAABB_s_aabb = new p453(), v459.RayCast_s_aabb = new p453(), v459.RayCast_s_p = new q451(), v459.RayCast_s_v = new q451(), v459.RayCast_s_n = new q451(), v459.RayCast_s_point = new q451(), v459.k_pairFlags = m447.b2ParticleFlag.b2_springParticle, v459.k_triadFlags = m447.b2ParticleFlag.b2_elasticParticle, v459.k_noPressureFlags = m447.b2ParticleFlag.b2_powderParticle | m447.b2ParticleFlag.b2_tensileParticle, v459.k_extraDampingFlags = m447.b2ParticleFlag.b2_staticPressureParticle, v459.k_barrierWallFlags = m447.b2ParticleFlag.b2_barrierParticle | m447.b2ParticleFlag.b2_wallParticle, v459.CreateParticlesStrokeShapeForGroup_s_edge = new o456(), v459.CreateParticlesStrokeShapeForGroup_s_d = new q451(), v459.CreateParticlesStrokeShapeForGroup_s_p = new q451(), v459.CreateParticlesFillShapeForGroup_s_aabb = new p453(), v459.CreateParticlesFillShapeForGroup_s_p = new q451(), v459.UpdatePairsAndTriads_s_dab = new q451(), v459.UpdatePairsAndTriads_s_dbc = new q451(), v459.UpdatePairsAndTriads_s_dca = new q451(), v459.AddContact_s_d = new q451(), v459.UpdateBodyContacts_s_aabb = new p453(), v459.Solve_s_subStep = new s458(), v459.SolveCollision_s_aabb = new p453(), v459.SolveGravity_s_gravity = new q451(), v459.SolveBarrier_s_aabb = new p453(), v459.SolveBarrier_s_va = new q451(), v459.SolveBarrier_s_vb = new q451(), v459.SolveBarrier_s_pba = new q451(), v459.SolveBarrier_s_vba = new q451(), v459.SolveBarrier_s_vc = new q451(), v459.SolveBarrier_s_pca = new q451(), v459.SolveBarrier_s_vca = new q451(), v459.SolveBarrier_s_qba = new q451(), v459.SolveBarrier_s_qca = new q451(), v459.SolveBarrier_s_dv = new q451(), v459.SolveBarrier_s_f = new q451(), v459.SolvePressure_s_f = new q451(), v459.SolveDamping_s_v = new q451(), v459.SolveDamping_s_f = new q451(), v459.SolveRigidDamping_s_t0 = new q451(), v459.SolveRigidDamping_s_t1 = new q451(), v459.SolveRigidDamping_s_p = new q451(), v459.SolveRigidDamping_s_v = new q451(), v459.SolveExtraDamping_s_v = new q451(), v459.SolveExtraDamping_s_f = new q451(), v459.SolveRigid_s_position = new q451(), v459.SolveRigid_s_rotation = new v451(), v459.SolveRigid_s_transform = new w451(), v459.SolveRigid_s_velocityTransform = new w451(), v459.SolveElastic_s_pa = new q451(), v459.SolveElastic_s_pb = new q451(), v459.SolveElastic_s_pc = new q451(), v459.SolveElastic_s_r = new v451(), v459.SolveElastic_s_t0 = new q451(), v459.SolveSpring_s_pa = new q451(), v459.SolveSpring_s_pb = new q451(), v459.SolveSpring_s_d = new q451(), v459.SolveSpring_s_f = new q451(), v459.SolveTensile_s_weightedNormal = new q451(), v459.SolveTensile_s_s = new q451(), v459.SolveTensile_s_f = new q451(), v459.SolveViscous_s_v = new q451(), v459.SolveViscous_s_f = new q451(), v459.SolveRepulsive_s_f = new q451(), v459.SolvePowder_s_f = new q451(), v459.SolveSolid_s_f = new q451(), v459.RemoveSpuriousBodyContacts_s_n = new q451(), v459.RemoveSpuriousBodyContacts_s_pos = new q451(), v459.RemoveSpuriousBodyContacts_s_normal = new q451();
                        class w459 {
                            constructor() {
                                this._data = null, this.userSuppliedCapacity = 0;
                            }
                            get data() {
                                return this._data;
                            }
                            set data(e481) {
                                this._data = e481;
                            }
                        }
                        class x459 {
                            constructor() {
                                this.index = n450, this.tag = 0;
                            }
                            static CompareProxyProxy(c481, d481) {
                                return c481.tag < d481.tag;
                            }
                            static CompareTagProxy(a481, b481) {
                                return a481 < b481.tag;
                            }
                            static CompareProxyTag(y480, z480) {
                                return y480.tag < z480;
                            }
                        }
                        class y459 {
                            constructor(t480, u480, v480, w480, x480) {
                                this.m_system = t480, this.m_xLower = (u480 & v459.xMask) >>> 0, this.m_xUpper = (v480 & v459.xMask) >>> 0, this.m_yLower = (u480 & v459.yMask) >>> 0, this.m_yUpper = (v480 & v459.yMask) >>> 0, this.m_first = w480, this.m_last = x480;
                            }
                            GetNext() {
                                for (; this.m_first < this.m_last;) {
                                    const s480 = (this.m_system.m_proxyBuffer.data[this.m_first].tag & v459.xMask) >>> 0;
                                    if (s480 >= this.m_xLower && s480 <= this.m_xUpper)
                                        return this.m_system.m_proxyBuffer.data[this.m_first++].index;
                                    this.m_first++;
                                }
                                return n450;
                            }
                        }
                        class z459 {
                            constructor() {
                                this.next = null, this.count = 0, this.index = 0;
                            }
                        }
                        class a460 {
                            Allocate(q480, r480) {
                                return r480;
                            }
                            Clear() { }
                            GetCount() {
                                return 0;
                            }
                            Invalidate(p480) { }
                            GetValidBuffer() {
                                return [];
                            }
                            GetBuffer() {
                                return [];
                            }
                            SetCount(o480) { }
                        }
                        class b460 {
                            constructor(m480, n480) {
                                this.second = n450, this.first = m480, this.second = n480;
                            }
                        }
                        class c460 extends a460 {
                            Initialize(k480, l480) { }
                            Find(j480) {
                                return n450;
                            }
                        }
                        class d460 {
                            constructor(h480, i480) {
                                this.first = n450, this.second = n450, this.first = h480, this.second = i480;
                            }
                        }
                        class e460 extends a460 {
                            Initialize(f480, g480) { }
                            Find(e480) {
                                return n450;
                            }
                        }
                        class f460 {
                            IsNecessary(d480) {
                                return !0;
                            }
                            ShouldCreatePair(b480, c480) {
                                return !0;
                            }
                            ShouldCreateTriad(y479, z479, a480) {
                                return !0;
                            }
                        }
                        class g460 extends o458 {
                            constructor(u479, v479, w479, x479) {
                                super(), this.m_callDestructionListener = !1, this.m_destroyed = 0, this.m_system = u479, this.m_shape = v479, this.m_xf = w479, this.m_callDestructionListener = x479, this.m_destroyed = 0;
                            }
                            ReportFixture(t479) {
                                return !1;
                            }
                            ReportParticle(r479, s479) {
                                return r479 === this.m_system && (this.m_shape.TestPoint(this.m_xf, this.m_system.m_positionBuffer.data[s479]) && (this.m_system.DestroyParticle(s479, this.m_callDestructionListener), this.m_destroyed++), !0);
                            }
                            Destroyed() {
                                return this.m_destroyed;
                            }
                        }
                        class h460 extends f460 {
                            constructor(q479) {
                                super(), this.m_threshold = 0, this.m_threshold = q479;
                            }
                            ShouldCreatePair(o479, p479) {
                                return o479 < this.m_threshold && this.m_threshold <= p479 || p479 < this.m_threshold && this.m_threshold <= o479;
                            }
                            ShouldCreateTriad(l479, m479, n479) {
                                return (l479 < this.m_threshold || m479 < this.m_threshold || n479 < this.m_threshold) && (this.m_threshold <= l479 || this.m_threshold <= m479 || this.m_threshold <= n479);
                            }
                        }
                        class i460 extends l456 {
                            constructor(j479, k479 = j479.length) {
                                super(m447.b2ShapeType.e_unknown, 0), this.m_shapeCount = 0, this.m_shapes = j479, this.m_shapeCount = k479;
                            }
                            Clone() {
                                throw new Error();
                            }
                            GetChildCount() {
                                return 1;
                            }
                            TestPoint(g479, h479) {
                                for (let i479 = 0; i479 < this.m_shapeCount; i479++)
                                    if (this.m_shapes[i479].TestPoint(g479, h479))
                                        return !0;
                                return !1;
                            }
                            ComputeDistance(c479, d479, e479, f479) {
                                return 0;
                            }
                            RayCast(y478, z478, a479, b479) {
                                return !1;
                            }
                            ComputeAABB(q478, r478, s478) {
                                const t478 = new p453();
                                q478.lowerBound.x = +r449, q478.lowerBound.y = +r449, q478.upperBound.x = -r449, q478.upperBound.y = -r449;
                                for (let u478 = 0; u478 < this.m_shapeCount; u478++) {
                                    const v478 = this.m_shapes[u478].GetChildCount();
                                    for (let w478 = 0; w478 < v478; w478++) {
                                        const x478 = t478;
                                        this.m_shapes[u478].ComputeAABB(x478, r478, w478), q478.Combine1(x478);
                                    }
                                }
                            }
                            ComputeMass(o478, p478) { }
                            SetupDistanceProxy(m478, n478) { }
                            ComputeSubmergedArea(i478, j478, k478, l478) {
                                return 0;
                            }
                            Dump(h478) { }
                        }
                        class j460 extends f460 {
                            constructor(g478) {
                                super(), this.m_flagsBuffer = g478;
                            }
                            IsNecessary(f478) {
                                return 0 != (this.m_flagsBuffer.data[f478] & m447.b2ParticleFlag.b2_reactiveParticle);
                            }
                        }
                        class k460 extends p459 {
                            constructor(d478, e478 = null) {
                                super(d478), this.m_contactFilter = null, this.m_contactFilter = e478;
                            }
                            ShouldCollideFixtureParticle(a478, b478, c478) {
                                return !(this.m_contactFilter && this.m_system.GetFlagsBuffer()[c478] & m447.b2ParticleFlag.b2_fixtureContactFilterParticle) || this.m_contactFilter.ShouldCollideFixtureParticle(a478, this.m_system, c478);
                            }
                            ReportFixtureAndParticle(h477, i477, j477) {
                                const k477 = k460.ReportFixtureAndParticle_s_n, l477 = k460.ReportFixtureAndParticle_s_rp, m477 = this.m_system.m_positionBuffer.data[j477], n477 = k477, o477 = h477.ComputeDistance(m477, n477, i477);
                                if (o477 < this.m_system.m_particleDiameter && this.ShouldCollideFixtureParticle(h477, this.m_system, j477)) {
                                    const p477 = h477.GetBody(), q477 = p477.GetWorldCenter(), r477 = p477.GetMass(), s477 = p477.GetInertia() - r477 * p477.GetLocalCenter().LengthSquared(), t477 = r477 > 0 ? 1 / r477 : 0, u477 = s477 > 0 ? 1 / s477 : 0, v477 = this.m_system.m_flagsBuffer.data[j477] & m447.b2ParticleFlag.b2_wallParticle ? 0 : this.m_system.GetParticleInvMass(), w477 = q451.SubVV(m477, q477, l477), x477 = q451.CrossVV(w477, n477), y477 = v477 + t477 + u477 * x477 * x477, z477 = this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];
                                    z477.index = j477, z477.body = p477, z477.fixture = h477, z477.weight = 1 - o477 * this.m_system.m_inverseDiameter, z477.normal.Copy(n477.SelfNeg()), z477.mass = y477 > 0 ? 1 / y477 : 0, this.m_system.DetectStuckParticle(j477);
                                }
                            }
                        }
                        k460.ReportFixtureAndParticle_s_n = new q451(), k460.ReportFixtureAndParticle_s_rp = new q451();
                        class l460 extends p459 {
                            constructor(f477, g477) {
                                super(f477), this.m_step = g477;
                            }
                            ReportFixtureAndParticle(m476, n476, o476) {
                                const p476 = l460.ReportFixtureAndParticle_s_p1, q476 = l460.ReportFixtureAndParticle_s_output, r476 = l460.ReportFixtureAndParticle_s_input, s476 = l460.ReportFixtureAndParticle_s_p, t476 = l460.ReportFixtureAndParticle_s_v, u476 = l460.ReportFixtureAndParticle_s_f, v476 = m476.GetBody(), w476 = this.m_system.m_positionBuffer.data[o476], x476 = this.m_system.m_velocityBuffer.data[o476], y476 = q476, z476 = r476;
                                if (0 === this.m_system.m_iterationIndex) {
                                    const e477 = w451.MulTXV(v476.m_xf0, w476, p476);
                                    m476.GetShape().GetType() === m447.b2ShapeType.e_circleShape && (e477.SelfSub(v476.GetLocalCenter()), v451.MulRV(v476.m_xf0.q, e477, e477), v451.MulTRV(v476.m_xf.q, e477, e477), e477.SelfAdd(v476.GetLocalCenter())), w451.MulXV(v476.m_xf, e477, z476.p1);
                                }
                                else
                                    z476.p1.Copy(w476);
                                if (q451.AddVMulSV(w476, this.m_step.dt, x476, z476.p2), z476.maxFraction = 1, m476.RayCast(y476, z476, n476)) {
                                    const a477 = y476.normal, b477 = s476;
                                    b477.x = (1 - y476.fraction) * z476.p1.x + y476.fraction * z476.p2.x + z449 * a477.x, b477.y = (1 - y476.fraction) * z476.p1.y + y476.fraction * z476.p2.y + z449 * a477.y;
                                    const c477 = t476;
                                    c477.x = this.m_step.inv_dt * (b477.x - w476.x), c477.y = this.m_step.inv_dt * (b477.y - w476.y), this.m_system.m_velocityBuffer.data[o476].Copy(c477);
                                    const d477 = u476;
                                    d477.x = this.m_step.inv_dt * this.m_system.GetParticleMass() * (x476.x - c477.x), d477.y = this.m_step.inv_dt * this.m_system.GetParticleMass() * (x476.y - c477.y), this.m_system.ParticleApplyForce(o476, d477);
                                }
                            }
                            ReportParticle(k476, l476) {
                                return !1;
                            }
                        }
                        l460.ReportFixtureAndParticle_s_p1 = new q451(), l460.ReportFixtureAndParticle_s_output = new o453(), l460.ReportFixtureAndParticle_s_input = new n453(), l460.ReportFixtureAndParticle_s_p = new q451(), l460.ReportFixtureAndParticle_s_v = new q451(), l460.ReportFixtureAndParticle_s_f = new q451();
                        class m460 {
                            constructor(j476) {
                                this.m_newFixture = !1, this.m_locked = !1, this.m_clearForces = !0, this.m_contactManager = new q458(), this.m_bodyList = null, this.m_jointList = null, this.m_particleSystemList = null, this.m_bodyCount = 0, this.m_jointCount = 0, this.m_gravity = new q451(), this.m_allowSleep = !0, this.m_destructionListener = null, this.m_debugDraw = null, this.m_inv_dt0 = 0, this.m_warmStarting = !0, this.m_continuousPhysics = !0, this.m_subStepping = !1, this.m_stepComplete = !0, this.m_profile = new r458(), this.m_island = new d459(), this.s_stack = [], this.m_controllerList = null, this.m_controllerCount = 0, this.m_gravity.Copy(j476);
                            }
                            SetDestructionListener(i476) {
                                this.m_destructionListener = i476;
                            }
                            SetContactFilter(h476) {
                                this.m_contactManager.m_contactFilter = h476;
                            }
                            SetContactListener(g476) {
                                this.m_contactManager.m_contactListener = g476;
                            }
                            SetDebugDraw(f476) {
                                this.m_debugDraw = f476;
                            }
                            CreateBody(d476 = {}) {
                                if (this.IsLocked())
                                    throw new Error();
                                const e476 = new v456(d476, this);
                                return e476.m_prev = null, e476.m_next = this.m_bodyList, this.m_bodyList && (this.m_bodyList.m_prev = e476), this.m_bodyList = e476, ++this.m_bodyCount, e476;
                            }
                            DestroyBody(u475) {
                                if (this.IsLocked())
                                    throw new Error();
                                let v475 = u475.m_jointList;
                                for (; v475;) {
                                    const c476 = v475;
                                    v475 = v475.next, this.m_destructionListener && this.m_destructionListener.SayGoodbyeJoint(c476.joint), this.DestroyJoint(c476.joint), u475.m_jointList = v475;
                                }
                                u475.m_jointList = null;
                                let w475 = u475.m_controllerList;
                                for (; w475;) {
                                    const b476 = w475;
                                    w475 = w475.nextController, b476.controller.RemoveBody(u475);
                                }
                                let x475 = u475.m_contactList;
                                for (; x475;) {
                                    const a476 = x475;
                                    x475 = x475.next, this.m_contactManager.Destroy(a476.contact);
                                }
                                u475.m_contactList = null;
                                let y475 = u475.m_fixtureList;
                                for (; y475;) {
                                    const z475 = y475;
                                    y475 = y475.m_next, this.m_destructionListener && this.m_destructionListener.SayGoodbyeFixture(z475), z475.DestroyProxies(), z475.Reset(), u475.m_fixtureList = y475, u475.m_fixtureCount -= 1;
                                }
                                u475.m_fixtureList = null, u475.m_fixtureCount = 0, u475.m_prev && (u475.m_prev.m_next = u475.m_next), u475.m_next && (u475.m_next.m_prev = u475.m_prev), u475 === this.m_bodyList && (this.m_bodyList = u475.m_next), --this.m_bodyCount;
                            }
                            static _Joint_Create(t475) {
                                switch (t475.type) {
                                    case m447.b2JointType.e_distanceJoint:
                                        return new b457(t475);
                                    case m447.b2JointType.e_mouseJoint:
                                        return new l457(t475);
                                    case m447.b2JointType.e_prismaticJoint:
                                        return new n457(t475);
                                    case m447.b2JointType.e_revoluteJoint:
                                        return new s457(t475);
                                    case m447.b2JointType.e_pulleyJoint:
                                        return new q457(t475);
                                    case m447.b2JointType.e_gearJoint:
                                        return new h457(t475);
                                    case m447.b2JointType.e_wheelJoint:
                                        return new y457(t475);
                                    case m447.b2JointType.e_weldJoint:
                                        return new w457(t475);
                                    case m447.b2JointType.e_frictionJoint:
                                        return new f457(t475);
                                    case m447.b2JointType.e_ropeJoint:
                                        return new u457(t475);
                                    case m447.b2JointType.e_motorJoint:
                                        return new j457(t475);
                                    case m447.b2JointType.e_areaJoint:
                                        return new d457(t475);
                                }
                                throw new Error();
                            }
                            static _Joint_Destroy(s475) { }
                            CreateJoint(n475) {
                                if (this.IsLocked())
                                    throw new Error();
                                const o475 = m460._Joint_Create(n475);
                                o475.m_prev = null, o475.m_next = this.m_jointList, this.m_jointList && (this.m_jointList.m_prev = o475), this.m_jointList = o475, ++this.m_jointCount, o475.m_edgeA.prev = null, o475.m_edgeA.next = o475.m_bodyA.m_jointList, o475.m_bodyA.m_jointList && (o475.m_bodyA.m_jointList.prev = o475.m_edgeA), o475.m_bodyA.m_jointList = o475.m_edgeA, o475.m_edgeB.prev = null, o475.m_edgeB.next = o475.m_bodyB.m_jointList, o475.m_bodyB.m_jointList && (o475.m_bodyB.m_jointList.prev = o475.m_edgeB), o475.m_bodyB.m_jointList = o475.m_edgeB;
                                const p475 = o475.m_bodyA, q475 = o475.m_bodyB;
                                if (!o475.m_collideConnected) {
                                    let r475 = q475.GetContactList();
                                    for (; r475;)
                                        r475.other === p475 && r475.contact.FlagForFiltering(), r475 = r475.next;
                                }
                                return o475;
                            }
                            DestroyJoint(i475) {
                                if (this.IsLocked())
                                    throw new Error();
                                i475.m_prev && (i475.m_prev.m_next = i475.m_next), i475.m_next && (i475.m_next.m_prev = i475.m_prev), i475 === this.m_jointList && (this.m_jointList = i475.m_next);
                                const j475 = i475.m_bodyA, k475 = i475.m_bodyB, l475 = i475.m_collideConnected;
                                if (j475.SetAwake(!0), k475.SetAwake(!0), i475.m_edgeA.prev && (i475.m_edgeA.prev.next = i475.m_edgeA.next), i475.m_edgeA.next && (i475.m_edgeA.next.prev = i475.m_edgeA.prev), i475.m_edgeA === j475.m_jointList && (j475.m_jointList = i475.m_edgeA.next), i475.m_edgeA.Reset(), i475.m_edgeB.prev && (i475.m_edgeB.prev.next = i475.m_edgeB.next), i475.m_edgeB.next && (i475.m_edgeB.next.prev = i475.m_edgeB.prev), i475.m_edgeB === k475.m_jointList && (k475.m_jointList = i475.m_edgeB.next), i475.m_edgeB.Reset(), m460._Joint_Destroy(i475), --this.m_jointCount, !l475) {
                                    let m475 = k475.GetContactList();
                                    for (; m475;)
                                        m475.other === j475 && m475.contact.FlagForFiltering(), m475 = m475.next;
                                }
                            }
                            CreateParticleSystem(g475) {
                                if (this.IsLocked())
                                    throw new Error();
                                const h475 = new v459(g475, this);
                                return h475.m_prev = null, h475.m_next = this.m_particleSystemList, this.m_particleSystemList && (this.m_particleSystemList.m_prev = h475), this.m_particleSystemList = h475, h475;
                            }
                            DestroyParticleSystem(f475) {
                                if (this.IsLocked())
                                    throw new Error();
                                f475.m_prev && (f475.m_prev.m_next = f475.m_next), f475.m_next && (f475.m_next.m_prev = f475.m_prev), f475 === this.m_particleSystemList && (this.m_particleSystemList = f475.m_next);
                            }
                            CalculateReasonableParticleIterations(a475) {
                                if (null === this.m_particleSystemList)
                                    return 1;
                                function b475(c475) {
                                    let d475 = r449;
                                    for (let e475 = c475.GetParticleSystemList(); null !== e475; e475 = e475.m_next)
                                        d475 = x447(d475, e475.GetRadius());
                                    return d475;
                                }
                                return h449(this.m_gravity.Length(), b475(this), a475);
                            }
                            Step(q474, r474, s474, t474 = this.CalculateReasonableParticleIterations(q474)) {
                                const u474 = m460.Step_s_stepTimer.Reset();
                                this.m_newFixture && (this.m_contactManager.FindNewContacts(), this.m_newFixture = !1), this.m_locked = !0;
                                const v474 = m460.Step_s_step;
                                v474.dt = q474, v474.velocityIterations = r474, v474.positionIterations = s474, v474.particleIterations = t474, v474.inv_dt = q474 > 0 ? 1 / q474 : 0, v474.dtRatio = this.m_inv_dt0 * q474, v474.warmStarting = this.m_warmStarting;
                                const w474 = m460.Step_s_timer.Reset();
                                if (this.m_contactManager.Collide(), this.m_profile.collide = w474.GetMilliseconds(), this.m_stepComplete && v474.dt > 0) {
                                    const y474 = m460.Step_s_timer.Reset();
                                    for (let z474 = this.m_particleSystemList; z474; z474 = z474.m_next)
                                        z474.Solve(v474);
                                    this.Solve(v474), this.m_profile.solve = y474.GetMilliseconds();
                                }
                                if (this.m_continuousPhysics && v474.dt > 0) {
                                    const x474 = m460.Step_s_timer.Reset();
                                    this.SolveTOI(v474), this.m_profile.solveTOI = x474.GetMilliseconds();
                                }
                                v474.dt > 0 && (this.m_inv_dt0 = v474.inv_dt), this.m_clearForces && this.ClearForces(), this.m_locked = !1, this.m_profile.step = u474.GetMilliseconds();
                            }
                            ClearForces() {
                                for (let p474 = this.m_bodyList; p474; p474 = p474.m_next)
                                    p474.m_force.SetZero(), p474.m_torque = 0;
                            }
                            DrawParticleSystem(k474) {
                                if (null === this.m_debugDraw)
                                    return;
                                const l474 = k474.GetParticleCount();
                                if (l474) {
                                    const m474 = k474.GetRadius(), n474 = k474.GetPositionBuffer();
                                    if (k474.m_colorBuffer.data) {
                                        const o474 = k474.GetColorBuffer();
                                        this.m_debugDraw.DrawParticles(n474, m474, o474, l474);
                                    }
                                    else
                                        this.m_debugDraw.DrawParticles(n474, m474, null, l474);
                                }
                            }
                            DrawDebugData() {
                                if (null === this.m_debugDraw)
                                    return;
                                const v473 = this.m_debugDraw.GetFlags(), w473 = m460.DrawDebugData_s_color.SetRGB(0, 0, 0);
                                if (v473 & m447.b2DrawFlags.e_shapeBit)
                                    for (let h474 = this.m_bodyList; h474; h474 = h474.m_next) {
                                        const i474 = h474.m_xf;
                                        this.m_debugDraw.PushTransform(i474);
                                        for (let j474 = h474.GetFixtureList(); j474; j474 = j474.m_next)
                                            h474.IsActive() ? h474.GetType() === m447.b2BodyType.b2_staticBody ? (w473.SetRGB(.5, .9, .5), this.DrawShape(j474, w473)) : h474.GetType() === m447.b2BodyType.b2_kinematicBody ? (w473.SetRGB(.5, .5, .9), this.DrawShape(j474, w473)) : h474.IsAwake() ? (w473.SetRGB(.9, .7, .7), this.DrawShape(j474, w473)) : (w473.SetRGB(.6, .6, .6), this.DrawShape(j474, w473)) : (w473.SetRGB(.5, .5, .3), this.DrawShape(j474, w473));
                                        this.m_debugDraw.PopTransform(i474);
                                    }
                                if (v473 & m447.b2DrawFlags.e_particleBit)
                                    for (let g474 = this.m_particleSystemList; g474; g474 = g474.m_next)
                                        this.DrawParticleSystem(g474);
                                if (v473 & m447.b2DrawFlags.e_jointBit)
                                    for (let f474 = this.m_jointList; f474; f474 = f474.m_next)
                                        this.DrawJoint(f474);
                                if (v473 & m447.b2DrawFlags.e_aabbBit) {
                                    w473.SetRGB(.9, .3, .9);
                                    const a474 = m460.DrawDebugData_s_vs;
                                    for (let b474 = this.m_bodyList; b474; b474 = b474.m_next)
                                        if (b474.IsActive())
                                            for (let c474 = b474.GetFixtureList(); c474; c474 = c474.m_next)
                                                for (let d474 = 0; d474 < c474.m_proxyCount; ++d474) {
                                                    const e474 = c474.m_proxies[d474].treeNode.aabb;
                                                    a474[0].Set(e474.lowerBound.x, e474.lowerBound.y), a474[1].Set(e474.upperBound.x, e474.lowerBound.y), a474[2].Set(e474.upperBound.x, e474.upperBound.y), a474[3].Set(e474.lowerBound.x, e474.upperBound.y), this.m_debugDraw.DrawPolygon(a474, 4, w473);
                                                }
                                }
                                if (v473 & m447.b2DrawFlags.e_centerOfMassBit)
                                    for (let y473 = this.m_bodyList; y473; y473 = y473.m_next) {
                                        const z473 = m460.DrawDebugData_s_xf;
                                        z473.q.Copy(y473.m_xf.q), z473.p.Copy(y473.GetWorldCenter()), this.m_debugDraw.DrawTransform(z473);
                                    }
                                if (v473 & m447.b2DrawFlags.e_controllerBit)
                                    for (let x473 = this.m_controllerList; x473; x473 = x473.m_next)
                                        x473.Draw(this.m_debugDraw);
                            }
                            QueryAABB(...u473) {
                                u473[0] instanceof o458 ? this._QueryAABB(u473[0], u473[1]) : this._QueryAABB(null, u473[0], u473[1]);
                            }
                            _QueryAABB(n473, o473, p473) {
                                if (this.m_contactManager.m_broadPhase.Query(o473, s473 => {
                                    const t473 = s473.userData.fixture;
                                    return n473 ? n473.ReportFixture(t473) : !p473 || p473(t473);
                                }), n473 instanceof o458)
                                    for (let r473 = this.m_particleSystemList; r473; r473 = r473.m_next)
                                        n473.ShouldQueryParticleSystem(r473) && r473.QueryAABB(n473, o473);
                            }
                            QueryAllAABB(j473, k473 = []) {
                                return this.QueryAABB(j473, m473 => (k473.push(m473), !0)), k473;
                            }
                            QueryPointAABB(...i473) {
                                i473[0] instanceof o458 ? this._QueryPointAABB(i473[0], i473[1]) : this._QueryPointAABB(null, i473[0], i473[1]);
                            }
                            _QueryPointAABB(b473, c473, d473) {
                                if (this.m_contactManager.m_broadPhase.QueryPoint(c473, g473 => {
                                    const h473 = g473.userData.fixture;
                                    return b473 ? b473.ReportFixture(h473) : !d473 || d473(h473);
                                }), b473 instanceof o458)
                                    for (let f473 = this.m_particleSystemList; f473; f473 = f473.m_next)
                                        b473.ShouldQueryParticleSystem(f473) && f473.QueryPointAABB(b473, c473);
                            }
                            QueryAllPointAABB(x472, y472 = []) {
                                return this.QueryPointAABB(x472, a473 => (y472.push(a473), !0)), y472;
                            }
                            QueryFixtureShape(...w472) {
                                w472[0] instanceof o458 ? this._QueryFixtureShape(w472[0], w472[1], w472[2], w472[3]) : this._QueryFixtureShape(null, w472[0], w472[1], w472[2], w472[3]);
                            }
                            _QueryFixtureShape(l472, m472, n472, o472, p472) {
                                const q472 = m460.QueryFixtureShape_s_aabb;
                                if (m472.ComputeAABB(q472, o472, n472), this.m_contactManager.m_broadPhase.Query(q472, t472 => {
                                    const u472 = t472.userData, v472 = u472.fixture;
                                    if (p448(m472, n472, v472.GetShape(), u472.childIndex, o472, v472.GetBody().GetTransform())) {
                                        if (l472)
                                            return l472.ReportFixture(v472);
                                        if (p472)
                                            return p472(v472);
                                    }
                                    return !0;
                                }), l472 instanceof o458)
                                    for (let s472 = this.m_particleSystemList; s472; s472 = s472.m_next)
                                        l472.ShouldQueryParticleSystem(s472) && s472.QueryAABB(l472, q472);
                            }
                            QueryAllFixtureShape(f472, g472, h472, i472 = []) {
                                return this.QueryFixtureShape(f472, g472, h472, k472 => (i472.push(k472), !0)), i472;
                            }
                            QueryFixturePoint(...e472) {
                                e472[0] instanceof o458 ? this._QueryFixturePoint(e472[0], e472[1]) : this._QueryFixturePoint(null, e472[0], e472[1]);
                            }
                            _QueryFixturePoint(x471, y471, z471) {
                                if (this.m_contactManager.m_broadPhase.QueryPoint(y471, c472 => {
                                    const d472 = c472.userData.fixture;
                                    if (d472.TestPoint(y471)) {
                                        if (x471)
                                            return x471.ReportFixture(d472);
                                        if (z471)
                                            return z471(d472);
                                    }
                                    return !0;
                                }), x471)
                                    for (let b472 = this.m_particleSystemList; b472; b472 = b472.m_next)
                                        x471.ShouldQueryParticleSystem(b472) && b472.QueryPointAABB(x471, y471);
                            }
                            QueryAllFixturePoint(t471, u471 = []) {
                                return this.QueryFixturePoint(t471, w471 => (u471.push(w471), !0)), u471;
                            }
                            RayCast(...s471) {
                                s471[0] instanceof p458 ? this._RayCast(s471[0], s471[1], s471[2]) : this._RayCast(null, s471[0], s471[1], s471[2]);
                            }
                            _RayCast(d471, e471, f471, g471) {
                                const h471 = m460.RayCast_s_input;
                                if (h471.maxFraction = 1, h471.p1.Copy(e471), h471.p2.Copy(f471), this.m_contactManager.m_broadPhase.RayCast(h471, (k471, l471) => {
                                    const m471 = l471.userData, n471 = m471.fixture, o471 = m471.childIndex, p471 = m460.RayCast_s_output;
                                    if (n471.RayCast(p471, k471, o471)) {
                                        const q471 = p471.fraction, r471 = m460.RayCast_s_point;
                                        if (r471.Set((1 - q471) * e471.x + q471 * f471.x, (1 - q471) * e471.y + q471 * f471.y), d471)
                                            return d471.ReportFixture(n471, r471, p471.normal, q471);
                                        if (g471)
                                            return g471(n471, r471, p471.normal, q471);
                                    }
                                    return k471.maxFraction;
                                }), d471)
                                    for (let j471 = this.m_particleSystemList; j471; j471 = j471.m_next)
                                        d471.ShouldQueryParticleSystem(j471) && j471.RayCast(d471, e471, f471);
                            }
                            RayCastOne(u470, v470) {
                                let w470 = null, x470 = 1;
                                return this.RayCast(u470, v470, (z470, a471, b471, c471) => (c471 < x470 && (x470 = c471, w470 = z470), x470)), w470;
                            }
                            RayCastAll(p470, q470, r470 = []) {
                                return this.RayCast(p470, q470, t470 => (r470.push(t470), 1)), r470;
                            }
                            GetBodyList() {
                                return this.m_bodyList;
                            }
                            GetJointList() {
                                return this.m_jointList;
                            }
                            GetParticleSystemList() {
                                return this.m_particleSystemList;
                            }
                            GetContactList() {
                                return this.m_contactManager.m_contactList;
                            }
                            SetAllowSleeping(n470) {
                                if (n470 !== this.m_allowSleep && (this.m_allowSleep = n470, !this.m_allowSleep))
                                    for (let o470 = this.m_bodyList; o470; o470 = o470.m_next)
                                        o470.SetAwake(!0);
                            }
                            GetAllowSleeping() {
                                return this.m_allowSleep;
                            }
                            SetWarmStarting(m470) {
                                this.m_warmStarting = m470;
                            }
                            GetWarmStarting() {
                                return this.m_warmStarting;
                            }
                            SetContinuousPhysics(l470) {
                                this.m_continuousPhysics = l470;
                            }
                            GetContinuousPhysics() {
                                return this.m_continuousPhysics;
                            }
                            SetSubStepping(k470) {
                                this.m_subStepping = k470;
                            }
                            GetSubStepping() {
                                return this.m_subStepping;
                            }
                            GetProxyCount() {
                                return this.m_contactManager.m_broadPhase.GetProxyCount();
                            }
                            GetBodyCount() {
                                return this.m_bodyCount;
                            }
                            GetJointCount() {
                                return this.m_jointCount;
                            }
                            GetContactCount() {
                                return this.m_contactManager.m_contactCount;
                            }
                            GetTreeHeight() {
                                return this.m_contactManager.m_broadPhase.GetTreeHeight();
                            }
                            GetTreeBalance() {
                                return this.m_contactManager.m_broadPhase.GetTreeBalance();
                            }
                            GetTreeQuality() {
                                return this.m_contactManager.m_broadPhase.GetTreeQuality();
                            }
                            SetGravity(h470, i470 = !0) {
                                if (!q451.IsEqualToV(this.m_gravity, h470) && (this.m_gravity.Copy(h470), i470))
                                    for (let j470 = this.m_bodyList; j470; j470 = j470.m_next)
                                        j470.SetAwake(!0);
                            }
                            GetGravity() {
                                return this.m_gravity;
                            }
                            IsLocked() {
                                return this.m_locked;
                            }
                            SetAutoClearForces(g470) {
                                this.m_clearForces = g470;
                            }
                            GetAutoClearForces() {
                                return this.m_clearForces;
                            }
                            ShiftOrigin(d470) {
                                if (this.IsLocked())
                                    throw new Error();
                                for (let f470 = this.m_bodyList; f470; f470 = f470.m_next)
                                    f470.m_xf.p.SelfSub(d470), f470.m_sweep.c0.SelfSub(d470), f470.m_sweep.c.SelfSub(d470);
                                for (let e470 = this.m_jointList; e470; e470 = e470.m_next)
                                    e470.ShiftOrigin(d470);
                                this.m_contactManager.m_broadPhase.ShiftOrigin(d470);
                            }
                            GetContactManager() {
                                return this.m_contactManager;
                            }
                            GetProfile() {
                                return this.m_profile;
                            }
                            Dump(x469) {
                                if (this.m_locked)
                                    return;
                                x469("const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\n", this.m_gravity.x, this.m_gravity.y), x469("this.m_world.SetGravity(g);\n"), x469("const bodies: b2Body[] = [];\n"), x469("const joints: b2Joint[] = [];\n");
                                let y469 = 0;
                                for (let c470 = this.m_bodyList; c470; c470 = c470.m_next)
                                    c470.m_islandIndex = y469, c470.Dump(x469), ++y469;
                                y469 = 0;
                                for (let b470 = this.m_jointList; b470; b470 = b470.m_next)
                                    b470.m_index = y469, ++y469;
                                for (let a470 = this.m_jointList; a470; a470 = a470.m_next)
                                    a470.m_type !== m447.b2JointType.e_gearJoint && (x469("{\n"), a470.Dump(x469), x469("}\n"));
                                for (let z469 = this.m_jointList; z469; z469 = z469.m_next)
                                    z469.m_type === m447.b2JointType.e_gearJoint && (x469("{\n"), z469.Dump(x469), x469("}\n"));
                            }
                            DrawJoint(j469) {
                                if (null === this.m_debugDraw)
                                    return;
                                const k469 = j469.GetBodyA(), l469 = j469.GetBodyB(), m469 = k469.m_xf, n469 = l469.m_xf, o469 = m469.p, p469 = n469.p, q469 = j469.GetAnchorA(m460.DrawJoint_s_p1), r469 = j469.GetAnchorB(m460.DrawJoint_s_p2), s469 = m460.DrawJoint_s_color.SetRGB(.5, .8, .8);
                                switch (j469.m_type) {
                                    case m447.b2JointType.e_distanceJoint:
                                        this.m_debugDraw.DrawSegment(q469, r469, s469);
                                        break;
                                    case m447.b2JointType.e_pulleyJoint:
                                        {
                                            const u469 = j469, v469 = u469.GetGroundAnchorA(), w469 = u469.GetGroundAnchorB();
                                            this.m_debugDraw.DrawSegment(v469, q469, s469), this.m_debugDraw.DrawSegment(w469, r469, s469), this.m_debugDraw.DrawSegment(v469, w469, s469);
                                            break;
                                        }
                                    case m447.b2JointType.e_mouseJoint:
                                        {
                                            const t469 = m460.DrawJoint_s_c;
                                            t469.Set(0, 1, 0), this.m_debugDraw.DrawPoint(q469, 4, t469), this.m_debugDraw.DrawPoint(r469, 4, t469), t469.Set(.8, .8, .8), this.m_debugDraw.DrawSegment(q469, r469, t469);
                                            break;
                                        }
                                    default:
                                        this.m_debugDraw.DrawSegment(o469, q469, s469), this.m_debugDraw.DrawSegment(q469, r469, s469), this.m_debugDraw.DrawSegment(p469, r469, s469);
                                }
                            }
                            DrawShape(n468, o468) {
                                if (null === this.m_debugDraw)
                                    return;
                                const p468 = n468.GetShape();
                                switch (p468.m_type) {
                                    case m447.b2ShapeType.e_circleShape:
                                        {
                                            const f469 = p468, g469 = f469.m_p, h469 = f469.m_radius, i469 = q451.UNITX;
                                            this.m_debugDraw.DrawSolidCircle(g469, h469, i469, o468);
                                            break;
                                        }
                                    case m447.b2ShapeType.e_edgeShape:
                                        {
                                            const c469 = p468, d469 = c469.m_vertex1, e469 = c469.m_vertex2;
                                            this.m_debugDraw.DrawSegment(d469, e469, o468);
                                            break;
                                        }
                                    case m447.b2ShapeType.e_chainShape:
                                        {
                                            const t468 = p468, u468 = t468.m_count, v468 = t468.m_vertices, w468 = m460.DrawShape_s_ghostColor.SetRGBA(.75 * o468.r, .75 * o468.g, .75 * o468.b, o468.a);
                                            let x468 = v468[0];
                                            if (this.m_debugDraw.DrawPoint(x468, 4, o468), t468.m_hasPrevVertex) {
                                                const b469 = t468.m_prevVertex;
                                                this.m_debugDraw.DrawSegment(b469, x468, w468), this.m_debugDraw.DrawCircle(b469, .1, w468);
                                            }
                                            for (let z468 = 1; z468 < u468; ++z468) {
                                                const a469 = v468[z468];
                                                this.m_debugDraw.DrawSegment(x468, a469, o468), this.m_debugDraw.DrawPoint(a469, 4, o468), x468 = a469;
                                            }
                                            if (t468.m_hasNextVertex) {
                                                const y468 = t468.m_nextVertex;
                                                this.m_debugDraw.DrawSegment(y468, x468, w468), this.m_debugDraw.DrawCircle(y468, .1, w468);
                                            }
                                            break;
                                        }
                                    case m447.b2ShapeType.e_polygonShape:
                                        {
                                            const q468 = p468, r468 = q468.m_count, s468 = q468.m_vertices;
                                            this.m_debugDraw.DrawSolidPolygon(s468, r468, o468);
                                            break;
                                        }
                                }
                            }
                            Solve(p467) {
                                for (let m468 = this.m_bodyList; m468; m468 = m468.m_next)
                                    m468.m_xf0.Copy(m468.m_xf);
                                for (let l468 = this.m_controllerList; l468; l468 = l468.m_next)
                                    l468.Step(p467);
                                this.m_profile.solveInit = 0, this.m_profile.solveVelocity = 0, this.m_profile.solvePosition = 0;
                                const q467 = this.m_island;
                                q467.Initialize(this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, this.m_contactManager.m_contactListener);
                                for (let k468 = this.m_bodyList; k468; k468 = k468.m_next)
                                    k468.m_islandFlag = !1;
                                for (let j468 = this.m_contactManager.m_contactList; j468; j468 = j468.m_next)
                                    j468.m_islandFlag = !1;
                                for (let i468 = this.m_jointList; i468; i468 = i468.m_next)
                                    i468.m_islandFlag = !1;
                                const r467 = this.s_stack;
                                for (let v467 = this.m_bodyList; v467; v467 = v467.m_next) {
                                    if (v467.m_islandFlag)
                                        continue;
                                    if (!v467.IsAwake() || !v467.IsActive())
                                        continue;
                                    if (v467.GetType() === m447.b2BodyType.b2_staticBody)
                                        continue;
                                    q467.Clear();
                                    let w467 = 0;
                                    for (r467[w467++] = v467, v467.m_islandFlag = !0; w467 > 0;) {
                                        const a468 = r467[--w467];
                                        if (!a468)
                                            throw new Error();
                                        if (q467.AddBody(a468), a468.m_awakeFlag = !0, a468.GetType() !== m447.b2BodyType.b2_staticBody) {
                                            for (let d468 = a468.m_contactList; d468; d468 = d468.next) {
                                                const e468 = d468.contact;
                                                if (e468.m_islandFlag)
                                                    continue;
                                                if (!e468.IsEnabled() || !e468.IsTouching())
                                                    continue;
                                                const f468 = e468.m_fixtureA.m_isSensor, g468 = e468.m_fixtureB.m_isSensor;
                                                if (f468 || g468)
                                                    continue;
                                                q467.AddContact(e468), e468.m_islandFlag = !0;
                                                const h468 = d468.other;
                                                h468.m_islandFlag || (r467[w467++] = h468, h468.m_islandFlag = !0);
                                            }
                                            for (let b468 = a468.m_jointList; b468; b468 = b468.next) {
                                                if (b468.joint.m_islandFlag)
                                                    continue;
                                                const c468 = b468.other;
                                                c468.IsActive() && (q467.AddJoint(b468.joint), b468.joint.m_islandFlag = !0, c468.m_islandFlag || (r467[w467++] = c468, c468.m_islandFlag = !0));
                                            }
                                        }
                                    }
                                    const x467 = new r458();
                                    q467.Solve(x467, p467, this.m_gravity, this.m_allowSleep), this.m_profile.solveInit += x467.solveInit, this.m_profile.solveVelocity += x467.solveVelocity, this.m_profile.solvePosition += x467.solvePosition;
                                    for (let y467 = 0; y467 < q467.m_bodyCount; ++y467) {
                                        const z467 = q467.m_bodies[y467];
                                        z467.GetType() === m447.b2BodyType.b2_staticBody && (z467.m_islandFlag = !1);
                                    }
                                }
                                for (let u467 = 0; u467 < r467.length && r467[u467]; ++u467)
                                    r467[u467] = null;
                                const s467 = new b452();
                                for (let t467 = this.m_bodyList; t467; t467 = t467.m_next)
                                    t467.m_islandFlag && t467.GetType() !== m447.b2BodyType.b2_staticBody && t467.SynchronizeFixtures();
                                this.m_contactManager.FindNewContacts(), this.m_profile.broadphase = s467.GetMilliseconds();
                            }
                            SolveTOI(z465) {
                                const a466 = this.m_island;
                                if (a466.Initialize(2 * d450, d450, 0, this.m_contactManager.m_contactListener), this.m_stepComplete) {
                                    for (let o467 = this.m_bodyList; o467; o467 = o467.m_next)
                                        o467.m_islandFlag = !1, o467.m_sweep.alpha0 = 0;
                                    for (let n467 = this.m_contactManager.m_contactList; n467; n467 = n467.m_next)
                                        n467.m_toiFlag = !1, n467.m_islandFlag = !1, n467.m_toiCount = 0, n467.m_toi = 1;
                                }
                                for (;;) {
                                    let b466 = null, c466 = 1;
                                    for (let v466 = this.m_contactManager.m_contactList; v466; v466 = v466.m_next) {
                                        if (!v466.IsEnabled())
                                            continue;
                                        if (v466.m_toiCount > c450)
                                            continue;
                                        let w466 = 1;
                                        if (v466.m_toiFlag)
                                            w466 = v466.m_toi;
                                        else {
                                            const x466 = v466.GetFixtureA(), y466 = v466.GetFixtureB();
                                            if (x466.IsSensor() || y466.IsSensor())
                                                continue;
                                            const z466 = x466.GetBody(), a467 = y466.GetBody(), b467 = z466.m_type, c467 = a467.m_type, d467 = z466.IsAwake() && b467 !== m447.b2BodyType.b2_staticBody, e467 = a467.IsAwake() && c467 !== m447.b2BodyType.b2_staticBody;
                                            if (!d467 && !e467)
                                                continue;
                                            const f467 = z466.IsBullet() || b467 !== m447.b2BodyType.b2_dynamicBody, g467 = a467.IsBullet() || c467 !== m447.b2BodyType.b2_dynamicBody;
                                            if (!f467 && !g467)
                                                continue;
                                            let h467 = z466.m_sweep.alpha0;
                                            z466.m_sweep.alpha0 < a467.m_sweep.alpha0 ? (h467 = a467.m_sweep.alpha0, z466.m_sweep.Advance(h467)) : a467.m_sweep.alpha0 < z466.m_sweep.alpha0 && (h467 = z466.m_sweep.alpha0, a467.m_sweep.Advance(h467));
                                            const i467 = v466.GetChildIndexA(), j467 = v466.GetChildIndexB(), k467 = m460.SolveTOI_s_toi_input;
                                            k467.proxyA.SetShape(x466.GetShape(), i467), k467.proxyB.SetShape(y466.GetShape(), j467), k467.sweepA.Copy(z466.m_sweep), k467.sweepB.Copy(a467.m_sweep), k467.tMax = 1;
                                            const l467 = m460.SolveTOI_s_toi_output;
                                            w448(l467, k467);
                                            const m467 = l467.t;
                                            w466 = l467.state === m447.b2TOIOutputState.e_touching ? x447(h467 + (1 - h467) * m467, 1) : 1, v466.m_toi = w466, v466.m_toiFlag = !0;
                                        }
                                        w466 < c466 && (b466 = v466, c466 = w466);
                                    }
                                    if (null === b466 || 1 - 10 * s449 < c466) {
                                        this.m_stepComplete = !0;
                                        break;
                                    }
                                    const d466 = b466.GetFixtureA(), e466 = b466.GetFixtureB(), f466 = d466.GetBody(), g466 = e466.GetBody(), h466 = m460.SolveTOI_s_backup1.Copy(f466.m_sweep), i466 = m460.SolveTOI_s_backup2.Copy(g466.m_sweep);
                                    if (f466.Advance(c466), g466.Advance(c466), b466.Update(this.m_contactManager.m_contactListener), b466.m_toiFlag = !1, ++b466.m_toiCount, !b466.IsEnabled() || !b466.IsTouching()) {
                                        b466.SetEnabled(!1), f466.m_sweep.Copy(h466), g466.m_sweep.Copy(i466), f466.SynchronizeTransform(), g466.SynchronizeTransform();
                                        continue;
                                    }
                                    f466.SetAwake(!0), g466.SetAwake(!0), a466.Clear(), a466.AddBody(f466), a466.AddBody(g466), a466.AddContact(b466), f466.m_islandFlag = !0, g466.m_islandFlag = !0, b466.m_islandFlag = !0;
                                    for (let n466 = 0; n466 < 2; ++n466) {
                                        const o466 = 0 === n466 ? f466 : g466;
                                        if (o466.m_type === m447.b2BodyType.b2_dynamicBody)
                                            for (let p466 = o466.m_contactList; p466 && a466.m_bodyCount !== a466.m_bodyCapacity && a466.m_contactCount !== a466.m_contactCapacity; p466 = p466.next) {
                                                const q466 = p466.contact;
                                                if (q466.m_islandFlag)
                                                    continue;
                                                const r466 = p466.other;
                                                if (r466.m_type === m447.b2BodyType.b2_dynamicBody && !o466.IsBullet() && !r466.IsBullet())
                                                    continue;
                                                const s466 = q466.m_fixtureA.m_isSensor, t466 = q466.m_fixtureB.m_isSensor;
                                                if (s466 || t466)
                                                    continue;
                                                const u466 = m460.SolveTOI_s_backup.Copy(r466.m_sweep);
                                                r466.m_islandFlag || r466.Advance(c466), q466.Update(this.m_contactManager.m_contactListener), q466.IsEnabled() && q466.IsTouching() ? (q466.m_islandFlag = !0, a466.AddContact(q466), r466.m_islandFlag || (r466.m_islandFlag = !0, r466.m_type !== m447.b2BodyType.b2_staticBody && r466.SetAwake(!0), a466.AddBody(r466))) : (r466.m_sweep.Copy(u466), r466.SynchronizeTransform());
                                            }
                                    }
                                    const j466 = m460.SolveTOI_s_subStep;
                                    j466.dt = (1 - c466) * z465.dt, j466.inv_dt = 1 / j466.dt, j466.dtRatio = 1, j466.positionIterations = 20, j466.velocityIterations = z465.velocityIterations, j466.particleIterations = z465.particleIterations, j466.warmStarting = !1, a466.SolveTOI(j466, f466.m_islandIndex, g466.m_islandIndex);
                                    for (let k466 = 0; k466 < a466.m_bodyCount; ++k466) {
                                        const l466 = a466.m_bodies[k466];
                                        if (l466.m_islandFlag = !1, l466.m_type === m447.b2BodyType.b2_dynamicBody) {
                                            l466.SynchronizeFixtures();
                                            for (let m466 = l466.m_contactList; m466; m466 = m466.next)
                                                m466.contact.m_toiFlag = !1, m466.contact.m_islandFlag = !1;
                                        }
                                    }
                                    if (this.m_contactManager.FindNewContacts(), this.m_subStepping) {
                                        this.m_stepComplete = !1;
                                        break;
                                    }
                                }
                            }
                            AddController(y465) {
                                return y465.m_next = this.m_controllerList, y465.m_prev = null, this.m_controllerList && (this.m_controllerList.m_prev = y465), this.m_controllerList = y465, ++this.m_controllerCount, y465;
                            }
                            RemoveController(x465) {
                                return x465.m_prev && (x465.m_prev.m_next = x465.m_next), x465.m_next && (x465.m_next.m_prev = x465.m_prev), this.m_controllerList === x465 && (this.m_controllerList = x465.m_next), --this.m_controllerCount, x465.m_prev = null, x465.m_next = null, x465;
                            }
                        }
                        m460.Step_s_step = new s458(), m460.Step_s_stepTimer = new b452(), m460.Step_s_timer = new b452(), m460.DrawDebugData_s_color = new y451(0, 0, 0), m460.DrawDebugData_s_vs = q451.MakeArray(4), m460.DrawDebugData_s_xf = new w451(), m460.QueryFixtureShape_s_aabb = new p453(), m460.RayCast_s_input = new n453(), m460.RayCast_s_output = new o453(), m460.RayCast_s_point = new q451(), m460.DrawJoint_s_p1 = new q451(), m460.DrawJoint_s_p2 = new q451(), m460.DrawJoint_s_color = new y451(.5, .8, .8), m460.DrawJoint_s_c = new y451(), m460.DrawShape_s_ghostColor = new y451(), m460.SolveTOI_s_subStep = new s458(), m460.SolveTOI_s_backup = new x451(), m460.SolveTOI_s_backup1 = new x451(), m460.SolveTOI_s_backup2 = new x451(), m460.SolveTOI_s_toi_input = new e454(), m460.SolveTOI_s_toi_output = new h454();
                        class n460 {
                            constructor(v465, w465) {
                                this.prevBody = null, this.nextBody = null, this.prevController = null, this.nextController = null, this.controller = v465, this.body = w465;
                            }
                        }
                        class o460 {
                            constructor() {
                                this.m_bodyList = null, this.m_bodyCount = 0, this.m_prev = null, this.m_next = null;
                            }
                            GetNext() {
                                return this.m_next;
                            }
                            GetPrev() {
                                return this.m_prev;
                            }
                            GetBodyList() {
                                return this.m_bodyList;
                            }
                            AddBody(t465) {
                                const u465 = new n460(this, t465);
                                u465.nextBody = this.m_bodyList, u465.prevBody = null, this.m_bodyList && (this.m_bodyList.prevBody = u465), this.m_bodyList = u465, ++this.m_bodyCount, u465.nextController = t465.m_controllerList, u465.prevController = null, t465.m_controllerList && (t465.m_controllerList.prevController = u465), t465.m_controllerList = u465, ++t465.m_controllerCount;
                            }
                            RemoveBody(r465) {
                                if (this.m_bodyCount <= 0)
                                    throw new Error();
                                let s465 = this.m_bodyList;
                                for (; s465 && s465.body !== r465;)
                                    s465 = s465.nextBody;
                                if (null === s465)
                                    throw new Error();
                                s465.prevBody && (s465.prevBody.nextBody = s465.nextBody), s465.nextBody && (s465.nextBody.prevBody = s465.prevBody), this.m_bodyList === s465 && (this.m_bodyList = s465.nextBody), --this.m_bodyCount, s465.nextController && (s465.nextController.prevController = s465.prevController), s465.prevController && (s465.prevController.nextController = s465.nextController), r465.m_controllerList === s465 && (r465.m_controllerList = s465.nextController), --r465.m_controllerCount;
                            }
                            Clear() {
                                for (; this.m_bodyList;)
                                    this.RemoveBody(this.m_bodyList.body);
                                this.m_bodyCount = 0;
                            }
                        }
                        class p460 extends o460 {
                            constructor() {
                                super(...arguments), this.normal = new q451(0, 1), this.offset = 0, this.density = 0, this.velocity = new q451(0, 0), this.linearDrag = 0, this.angularDrag = 0, this.useDensity = !1, this.useWorldGravity = !0, this.gravity = new q451(0, 0);
                            }
                            Step(e465) {
                                if (this.m_bodyList) {
                                    this.useWorldGravity && this.gravity.Copy(this.m_bodyList.body.GetWorld().GetGravity());
                                    for (let f465 = this.m_bodyList; f465; f465 = f465.nextBody) {
                                        const g465 = f465.body;
                                        if (!g465.IsAwake())
                                            continue;
                                        const h465 = new q451(), i465 = new q451();
                                        let j465 = 0, k465 = 0;
                                        for (let n465 = g465.GetFixtureList(); n465; n465 = n465.m_next) {
                                            const o465 = new q451(), p465 = n465.GetShape().ComputeSubmergedArea(this.normal, this.offset, g465.GetTransform(), o465);
                                            j465 += p465, h465.x += p465 * o465.x, h465.y += p465 * o465.y;
                                            let q465 = 0;
                                            q465 = this.useDensity ? n465.GetDensity() : 1, k465 += p465 * q465, i465.x += p465 * o465.x * q465, i465.y += p465 * o465.y * q465;
                                        }
                                        if (h465.x /= j465, h465.y /= j465, i465.x /= k465, i465.y /= k465, j465 < s449)
                                            continue;
                                        const l465 = this.gravity.Clone().SelfNeg();
                                        l465.SelfMul(this.density * j465), g465.ApplyForce(l465, i465);
                                        const m465 = g465.GetLinearVelocityFromWorldPoint(h465, new q451());
                                        m465.SelfSub(this.velocity), m465.SelfMul(-this.linearDrag * j465), g465.ApplyForce(m465, h465), g465.ApplyTorque(-g465.GetInertia() / g465.GetMass() * j465 * g465.GetAngularVelocity() * this.angularDrag);
                                    }
                                }
                            }
                            Draw(z464) {
                                const a465 = 100, b465 = new q451(), c465 = new q451();
                                b465.x = this.normal.x * this.offset + this.normal.y * a465, b465.y = this.normal.y * this.offset - this.normal.x * a465, c465.x = this.normal.x * this.offset - this.normal.y * a465, c465.y = this.normal.y * this.offset + this.normal.x * a465;
                                const d465 = new y451(0, 0, .8);
                                z464.DrawSegment(b465, c465, d465);
                            }
                        }
                        class q460 extends o460 {
                            constructor() {
                                super(...arguments), this.A = new q451(0, 0);
                            }
                            Step(v464) {
                                const w464 = q451.MulSV(v464.dt, this.A, q460.Step_s_dtA);
                                for (let x464 = this.m_bodyList; x464; x464 = x464.nextBody) {
                                    const y464 = x464.body;
                                    y464.IsAwake() && y464.SetLinearVelocity(q451.AddVV(y464.GetLinearVelocity(), w464, q451.s_t0));
                                }
                            }
                            Draw(u464) { }
                        }
                        q460.Step_s_dtA = new q451();
                        class r460 extends o460 {
                            constructor() {
                                super(...arguments), this.F = new q451(0, 0);
                            }
                            Step(r464) {
                                for (let s464 = this.m_bodyList; s464; s464 = s464.nextBody) {
                                    const t464 = s464.body;
                                    t464.IsAwake() && t464.ApplyForce(this.F, t464.GetWorldCenter());
                                }
                            }
                            Draw(q464) { }
                        }
                        class s460 extends o460 {
                            constructor() {
                                super(...arguments), this.G = 1, this.invSqr = !0;
                            }
                            Step(r463) {
                                if (this.invSqr)
                                    for (let e464 = this.m_bodyList; e464; e464 = e464.nextBody) {
                                        const f464 = e464.body, g464 = f464.GetWorldCenter(), h464 = f464.GetMass();
                                        for (let i464 = this.m_bodyList; i464 && i464 !== e464; i464 = i464.nextBody) {
                                            const j464 = i464.body, k464 = j464.GetWorldCenter(), l464 = j464.GetMass(), m464 = k464.x - g464.x, n464 = k464.y - g464.y, o464 = m464 * m464 + n464 * n464;
                                            if (o464 < s449)
                                                continue;
                                            const p464 = s460.Step_s_f.Set(m464, n464);
                                            p464.SelfMul(this.G / o464 / j451(o464) * h464 * l464), f464.IsAwake() && f464.ApplyForce(p464, g464), j464.IsAwake() && j464.ApplyForce(p464.SelfMul(-1), k464);
                                        }
                                    }
                                else
                                    for (let s463 = this.m_bodyList; s463; s463 = s463.nextBody) {
                                        const t463 = s463.body, u463 = t463.GetWorldCenter(), v463 = t463.GetMass();
                                        for (let w463 = this.m_bodyList; w463 && w463 !== s463; w463 = w463.nextBody) {
                                            const x463 = w463.body, y463 = x463.GetWorldCenter(), z463 = x463.GetMass(), a464 = y463.x - u463.x, b464 = y463.y - u463.y, c464 = a464 * a464 + b464 * b464;
                                            if (c464 < s449)
                                                continue;
                                            const d464 = s460.Step_s_f.Set(a464, b464);
                                            d464.SelfMul(this.G / c464 * v463 * z463), t463.IsAwake() && t463.ApplyForce(d464, u463), x463.IsAwake() && x463.ApplyForce(d464.SelfMul(-1), y463);
                                        }
                                    }
                            }
                            Draw(q463) { }
                        }
                        s460.Step_s_f = new q451();
                        class t460 extends o460 {
                            constructor() {
                                super(...arguments), this.T = new t451(), this.maxTimestep = 0;
                            }
                            Step(l463) {
                                let m463 = l463.dt;
                                if (!(m463 <= s449)) {
                                    m463 > this.maxTimestep && this.maxTimestep > 0 && (m463 = this.maxTimestep);
                                    for (let n463 = this.m_bodyList; n463; n463 = n463.nextBody) {
                                        const o463 = n463.body;
                                        if (!o463.IsAwake())
                                            continue;
                                        const p463 = o463.GetWorldVector(t451.MulMV(this.T, o463.GetLocalVector(o463.GetLinearVelocity(), q451.s_t0), q451.s_t1), t460.Step_s_damping);
                                        o463.SetLinearVelocity(q451.AddVV(o463.GetLinearVelocity(), q451.MulSV(m463, p463, q451.s_t0), q451.s_t1));
                                    }
                                }
                            }
                            Draw(k463) { }
                            SetAxisAligned(i463, j463) {
                                this.T.ex.x = -i463, this.T.ex.y = 0, this.T.ey.x = 0, this.T.ey.y = -j463, this.maxTimestep = i463 > 0 || j463 > 0 ? 1 / y447(i463, j463) : 0;
                            }
                        }
                        t460.Step_s_damping = new q451();
                        class u460 {
                            constructor() {
                                this.vertices = [], this.count = 0, this.masses = [], this.gravity = new q451(0, 0), this.damping = .1, this.k2 = .9, this.k3 = .1;
                            }
                        }
                        class v460 {
                            constructor() {
                                this.m_count = 0, this.m_ps = [], this.m_p0s = [], this.m_vs = [], this.m_ims = [], this.m_Ls = [], this.m_as = [], this.m_gravity = new q451(), this.m_damping = 0, this.m_k2 = 1, this.m_k3 = .1;
                            }
                            GetVertexCount() {
                                return this.m_count;
                            }
                            GetVertices() {
                                return this.m_ps;
                            }
                            Initialize(s462) {
                                this.m_count = s462.count, this.m_ps = q451.MakeArray(this.m_count), this.m_p0s = q451.MakeArray(this.m_count), this.m_vs = q451.MakeArray(this.m_count), this.m_ims = w447(this.m_count);
                                for (let g463 = 0; g463 < this.m_count; ++g463) {
                                    this.m_ps[g463].Copy(s462.vertices[g463]), this.m_p0s[g463].Copy(s462.vertices[g463]), this.m_vs[g463].SetZero();
                                    const h463 = s462.masses[g463];
                                    this.m_ims[g463] = h463 > 0 ? 1 / h463 : 0;
                                }
                                const t462 = this.m_count - 1, u462 = this.m_count - 2;
                                this.m_Ls = w447(t462), this.m_as = w447(u462);
                                for (let d463 = 0; d463 < t462; ++d463) {
                                    const e463 = this.m_ps[d463], f463 = this.m_ps[d463 + 1];
                                    this.m_Ls[d463] = q451.DistanceVV(e463, f463);
                                }
                                for (let v462 = 0; v462 < u462; ++v462) {
                                    const w462 = this.m_ps[v462], x462 = this.m_ps[v462 + 1], y462 = this.m_ps[v462 + 2], z462 = q451.SubVV(x462, w462, q451.s_t0), a463 = q451.SubVV(y462, x462, q451.s_t1), b463 = q451.CrossVV(z462, a463), c463 = q451.DotVV(z462, a463);
                                    this.m_as[v462] = p451(b463, c463);
                                }
                                this.m_gravity.Copy(s462.gravity), this.m_damping = s462.damping, this.m_k2 = s462.k2, this.m_k3 = s462.k3;
                            }
                            Step(l462, m462) {
                                if (0 === l462)
                                    return;
                                const n462 = Math.exp(-l462 * this.m_damping);
                                for (let r462 = 0; r462 < this.m_count; ++r462)
                                    this.m_p0s[r462].Copy(this.m_ps[r462]), this.m_ims[r462] > 0 && this.m_vs[r462].SelfMulAdd(l462, this.m_gravity), this.m_vs[r462].SelfMul(n462), this.m_ps[r462].SelfMulAdd(l462, this.m_vs[r462]);
                                for (let q462 = 0; q462 < m462; ++q462)
                                    this.SolveC2(), this.SolveC3(), this.SolveC2();
                                const o462 = 1 / l462;
                                for (let p462 = 0; p462 < this.m_count; ++p462)
                                    q451.MulSV(o462, q451.SubVV(this.m_ps[p462], this.m_p0s[p462], q451.s_t0), this.m_vs[p462]);
                            }
                            SolveC2() {
                                const b462 = this.m_count - 1;
                                for (let c462 = 0; c462 < b462; ++c462) {
                                    const d462 = this.m_ps[c462], e462 = this.m_ps[c462 + 1], f462 = q451.SubVV(e462, d462, v460.s_d), g462 = f462.Normalize(), h462 = this.m_ims[c462], i462 = this.m_ims[c462 + 1];
                                    if (h462 + i462 === 0)
                                        continue;
                                    const j462 = h462 / (h462 + i462), k462 = i462 / (h462 + i462);
                                    d462.SelfMulSub(this.m_k2 * j462 * (this.m_Ls[c462] - g462), f462), e462.SelfMulAdd(this.m_k2 * k462 * (this.m_Ls[c462] - g462), f462);
                                }
                            }
                            SetAngle(y461) {
                                const z461 = this.m_count - 2;
                                for (let a462 = 0; a462 < z461; ++a462)
                                    this.m_as[a462] = y461;
                            }
                            SolveC3() {
                                const b461 = this.m_count - 2;
                                for (let c461 = 0; c461 < b461; ++c461) {
                                    const d461 = this.m_ps[c461], e461 = this.m_ps[c461 + 1], f461 = this.m_ps[c461 + 2], g461 = this.m_ims[c461], h461 = this.m_ims[c461 + 1], i461 = this.m_ims[c461 + 2], j461 = q451.SubVV(e461, d461, v460.s_d1), k461 = q451.SubVV(f461, e461, v460.s_d2), l461 = j461.LengthSquared(), m461 = k461.LengthSquared();
                                    if (l461 * m461 == 0)
                                        continue;
                                    const n461 = q451.CrossVV(j461, k461), o461 = q451.DotVV(j461, k461);
                                    let p461 = p451(n461, o461);
                                    const q461 = q451.MulSV(-1 / l461, j461.SelfSkew(), v460.s_Jd1), r461 = q451.MulSV(1 / m461, k461.SelfSkew(), v460.s_Jd2), s461 = q451.NegV(q461, v460.s_J1), t461 = q451.SubVV(q461, r461, v460.s_J2), u461 = r461;
                                    let v461 = g461 * q451.DotVV(s461, s461) + h461 * q451.DotVV(t461, t461) + i461 * q451.DotVV(u461, u461);
                                    if (0 === v461)
                                        continue;
                                    v461 = 1 / v461;
                                    let w461 = p461 - this.m_as[c461];
                                    for (; w461 > u449;)
                                        p461 -= 2 * u449, w461 = p461 - this.m_as[c461];
                                    for (; w461 < -u449;)
                                        p461 += 2 * u449, w461 = p461 - this.m_as[c461];
                                    const x461 = -this.m_k3 * v461 * w461;
                                    d461.SelfMulAdd(g461 * x461, s461), e461.SelfMulAdd(h461 * x461, t461), f461.SelfMulAdd(i461 * x461, u461);
                                }
                            }
                            Draw(y460) {
                                const z460 = new y451(.4, .5, .7);
                                for (let a461 = 0; a461 < this.m_count - 1; ++a461)
                                    y460.DrawSegment(this.m_ps[a461], this.m_ps[a461 + 1], z460);
                            }
                        }
                        v460.s_d = new q451(), v460.s_d1 = new q451(), v460.s_d2 = new q451(), v460.s_Jd1 = new q451(), v460.s_Jd2 = new q451(), v460.s_J1 = new q451(), v460.s_J2 = new q451(), m447.b2AABB = p453, m447.b2Abs = h451, m447.b2Acos = n451, m447.b2Alloc = p447, m447.b2AreaJoint = d457, m447.b2AreaJointDef = c457, m447.b2Asin = o451, m447.b2Assert = n447, m447.b2Atan2 = p451, m447.b2BlockAllocator = e452, m447.b2Body = v456, m447.b2BodyDef = u456, m447.b2BroadPhase = w453, m447.b2BuoyancyController = p460, m447.b2CalculateParticleIterations = h449, m447.b2ChainAndCircleContact = g458, m447.b2ChainAndPolygonContact = h458, m447.b2ChainShape = p456, m447.b2CircleContact = b458, m447.b2CircleShape = m456, m447.b2Clamp = z447, m447.b2ClipSegmentToLine = o448, m447.b2ClipVertex = m453, m447.b2CollideCircles = x448, m447.b2CollideEdgeAndCircle = d449, m447.b2CollideEdgeAndPolygon = e449, m447.b2CollidePolygonAndCircle = y448, m447.b2CollidePolygons = c449, m447.b2Color = y451, m447.b2ConstantAccelController = q460, m447.b2ConstantForceController = r460, m447.b2Contact = a458, m447.b2ContactEdge = z457, m447.b2ContactFactory = j458, m447.b2ContactFeature = h453, m447.b2ContactFilter = l458, m447.b2ContactID = i453, m447.b2ContactImpulse = m458, m447.b2ContactListener = n458, m447.b2ContactManager = q458, m447.b2ContactPositionConstraint = z458, m447.b2ContactRegister = i458, m447.b2ContactSolver = c459, m447.b2ContactSolverDef = a459, m447.b2ContactVelocityConstraint = y458, m447.b2Controller = o460, m447.b2ControllerEdge = n460, m447.b2Cos = l451, m447.b2Counter = c452, m447.b2DegToRad = d448, m447.b2DestructionListener = k458, m447.b2Distance = k448, m447.b2DistanceInput = i452, m447.b2DistanceJoint = b457, m447.b2DistanceJointDef = a457, m447.b2DistanceOutput = j452, m447.b2DistanceProxy = g452, m447.b2Draw = a452, m447.b2DynamicTree = u453, m447.b2EdgeAndCircleContact = e458, m447.b2EdgeAndPolygonContact = f458, m447.b2EdgeShape = o456, m447.b2Filter = q456, m447.b2Fixture = t456, m447.b2FixtureDef = r456, m447.b2FixtureParticleQueryCallback = p459, m447.b2FixtureProxy = s456, m447.b2Free = q447, m447.b2FrictionJoint = f457, m447.b2FrictionJointDef = e457, m447.b2GearJoint = h457, m447.b2GearJointDef = g457, m447.b2GetPointStates = m448, m447.b2GravityController = s460, m447.b2GrowableBuffer = o459, m447.b2GrowableStack = d452, m447.b2InvSqrt = c448, m447.b2IsPowerOfTwo = g448, m447.b2IsValid = i451, m447.b2Island = d459, m447.b2Jacobian = w456, m447.b2Joint = z456, m447.b2JointDef = y456, m447.b2JointEdge = x456, m447.b2Log = r447, m447.b2MakeArray = u447, m447.b2MakeNullArray = v447, m447.b2MakeNumberArray = w447, m447.b2Manifold = k453, m447.b2ManifoldPoint = j453, m447.b2MassData = g456, m447.b2Mat22 = t451, m447.b2Mat33 = u451, m447.b2Max = y447, m447.b2Maybe = o447, m447.b2Min = x447, m447.b2MixFriction = f449, m447.b2MixRestitution = g449, m447.b2MotorJoint = j457, m447.b2MotorJointDef = i457, m447.b2MouseJoint = l457, m447.b2MouseJointDef = k457, m447.b2NextPowerOfTwo = f448, m447.b2Pair = v453, m447.b2PairLessThan = u448, m447.b2ParseInt = s447, m447.b2ParseUInt = t447, m447.b2ParticleBodyContact = r459, m447.b2ParticleContact = q459, m447.b2ParticleDef = g459, m447.b2ParticleGroup = j459, m447.b2ParticleGroupDef = i459, m447.b2ParticleHandle = h459, m447.b2ParticlePair = s459, m447.b2ParticlePairSet = e460, m447.b2ParticleSystem = v459, m447.b2ParticleSystemDef = u459, m447.b2ParticleSystem_CompositeShape = i460, m447.b2ParticleSystem_ConnectionFilter = f460, m447.b2ParticleSystem_DestroyParticlesInShapeCallback = g460, m447.b2ParticleSystem_FixedSetAllocator = a460, m447.b2ParticleSystem_FixtureParticle = b460, m447.b2ParticleSystem_FixtureParticleSet = c460, m447.b2ParticleSystem_InsideBoundsEnumerator = y459, m447.b2ParticleSystem_JoinParticleGroupsFilter = h460, m447.b2ParticleSystem_ParticleListNode = z459, m447.b2ParticleSystem_ParticlePair = d460, m447.b2ParticleSystem_Proxy = x459, m447.b2ParticleSystem_ReactiveFilter = j460, m447.b2ParticleSystem_SolveCollisionCallback = l460, m447.b2ParticleSystem_UpdateBodyContactsCallback = k460, m447.b2ParticleSystem_UserOverridableBuffer = w459, m447.b2ParticleTriad = t459, m447.b2PolygonAndCircleContact = d458, m447.b2PolygonContact = c458, m447.b2PolygonShape = n456, m447.b2Position = t458, m447.b2PositionSolverManifold = b459, m447.b2Pow = k451, m447.b2PrismaticJoint = n457, m447.b2PrismaticJointDef = m457, m447.b2Profile = r458, m447.b2PulleyJoint = q457, m447.b2PulleyJointDef = p457, m447.b2QueryCallback = o458, m447.b2RadToDeg = e448, m447.b2Random = h448, m447.b2RandomRange = i448, m447.b2RayCastCallback = p458, m447.b2RayCastInput = n453, m447.b2RayCastOutput = o453, m447.b2RevoluteJoint = s457, m447.b2RevoluteJointDef = r457, m447.b2Rope = v460, m447.b2RopeDef = u460, m447.b2RopeJoint = u457, m447.b2RopeJointDef = t457, m447.b2Rot = v451, m447.b2SeparationFunction = i454, m447.b2Shape = l456, m447.b2ShapeCast = l448, m447.b2ShapeCastInput = k452, m447.b2ShapeCastOutput = l452, m447.b2Simplex = n452, m447.b2SimplexCache = h452, m447.b2SimplexVertex = m452, m447.b2Sin = m451, m447.b2SolverData = v458, m447.b2Sq = b448, m447.b2Sqrt = j451, m447.b2StackAllocator = f452, m447.b2Swap = a448, m447.b2Sweep = x451, m447.b2TOIInput = e454, m447.b2TOIOutput = h454, m447.b2TensorDampingController = t460, m447.b2TestOverlapAABB = n448, m447.b2TestOverlapShape = p448, m447.b2TimeOfImpact = w448, m447.b2TimeStep = s458, m447.b2Timer = b452, m447.b2Transform = w451, m447.b2TreeNode = t453, m447.b2Vec2 = q451, m447.b2Vec2_zero = r451, m447.b2Vec3 = s451, m447.b2Velocity = u458, m447.b2VelocityConstraintPoint = x458, m447.b2Version = a451, m447.b2WeldJoint = w457, m447.b2WeldJointDef = v457, m447.b2WheelJoint = y457, m447.b2WheelJointDef = x457, m447.b2World = m460, m447.b2WorldManifold = l453, m447.b2_180_over_pi = f451, m447.b2_aabbExtension = x449, m447.b2_aabbMultiplier = y449, m447.b2_angularSleepTolerance = z450, m447.b2_angularSlop = a450, m447.b2_barrierCollisionTime = w450, m447.b2_baumgarte = l450, m447.b2_branch = c451, m447.b2_commit = d451, m447.b2_epsilon = s449, m447.b2_epsilon_sq = t449, m447.b2_gjk_reset = j448, m447.b2_invalidParticleIndex = n450, m447.b2_linearSleepTolerance = y450, m447.b2_linearSlop = z449, m447.b2_maxAngularCorrection = g450, m447.b2_maxFloat = r449, m447.b2_maxLinearCorrection = f450, m447.b2_maxManifoldPoints = v449, m447.b2_maxParticleForce = s450, m447.b2_maxParticleIndex = o450, m447.b2_maxParticlePressure = r450, m447.b2_maxPolygonVertices = w449, m447.b2_maxRotation = j450, m447.b2_maxRotationSquared = k450, m447.b2_maxSubSteps = c450, m447.b2_maxTOIContacts = d450, m447.b2_maxTranslation = h450, m447.b2_maxTranslationSquared = i450, m447.b2_maxTriadDistance = t450, m447.b2_maxTriadDistanceSquared = u450, m447.b2_minParticleSystemBufferCapacity = v450, m447.b2_minParticleWeight = q450, m447.b2_minPulleyLength = o457, m447.b2_particleStride = p450, m447.b2_pi = u449, m447.b2_pi_over_180 = e451, m447.b2_polygonRadius = b450, m447.b2_timeToSleep = x450, m447.b2_toiBaumgarte = m450, m447.b2_toi_reset = v448, m447.b2_two_pi = g451, m447.b2_velocityThreshold = e450, m447.b2_version = b451, m447.g_blockSolve = w458, Object.defineProperty(m447, "__esModule", {
                            value: !0
                        });
                    }(k447);
                }(h447 = {
                    exports: {}
                }, h447.exports), h447.exports;
            }();
            (v230 = w230) && v230.__esModule && Object.prototype.hasOwnProperty.call(v230, "default") && v230.default;
            let x230 = {};
            for (var y230 in w230)
                -1 === y230.indexOf("b2_") && (x230[y230.replace("b2", "")] = w230[y230]);
            var z230 = x230;
            class a231 extends z230.ContactListener {
                constructor(...f447) {
                    super(...f447), this._contactFixtures = [], this._BeginContact = null, this._EndContact = null, this._PreSolve = null, this._PostSolve = null;
                }
                setBeginContact(e447) {
                    this._BeginContact = e447;
                }
                setEndContact(d447) {
                    this._EndContact = d447;
                }
                setPreSolve(c447) {
                    this._PreSolve = c447;
                }
                setPostSolve(b447) {
                    this._PostSolve = b447;
                }
                BeginContact(x446) {
                    if (!this._BeginContact)
                        return;
                    const y446 = x446.GetFixtureA(), z446 = x446.GetFixtureB(), a447 = this._contactFixtures;
                    x446._shouldReport = !1, -1 === a447.indexOf(y446) && -1 === a447.indexOf(z446) || (x446._shouldReport = !0, this._BeginContact(x446));
                }
                EndContact(w446) {
                    this._EndContact && w446._shouldReport && (w446._shouldReport = !1, this._EndContact(w446));
                }
                PreSolve(u446, v446) {
                    this._PreSolve && u446._shouldReport && this._PreSolve(u446, v446);
                }
                PostSolve(s446, t446) {
                    this._PostSolve && s446._shouldReport && this._PostSolve(s446, t446);
                }
                registerContactFixture(r446) {
                    this._contactFixtures.push(r446);
                }
                unregisterContactFixture(q446) {
                    j127(this._contactFixtures, q446);
                }
            }
            class b231 extends z230.QueryCallback {
                constructor(...p446) {
                    super(...p446), this._point = new z230.Vec2(), this._isPoint = !1, this._fixtures = [];
                }
                init(o446) {
                    o446 ? (this._isPoint = !0, this._point.x = o446.x, this._point.y = o446.y) : this._isPoint = !1, this._fixtures.length = 0;
                }
                ReportFixture(n446) {
                    return this._isPoint ? n446.TestPoint(this._point) && this._fixtures.push(n446) : this._fixtures.push(n446), !0;
                }
                getFixture() {
                    return this._fixtures[0];
                }
                getFixtures() {
                    return this._fixtures;
                }
            }
            function v141(k446, l446) {
                const m446 = l446.length;
                return l446[k446 < 0 ? m446 - -k446 % m446 : k446 % m446];
            }
            function w141(g446, h446, i446) {
                const j446 = [];
                for (; h446 < g446;)
                    h446 += i446.length;
                for (; g446 <= h446; ++g446)
                    j446.push(v141(g446, i446));
                return j446;
            }
            function x141(b446, c446, d446) {
                if (y141(b446, d446)) {
                    if (b142(v141(b446, d446), v141(b446 - 1, d446), v141(c446, d446)) && c142(v141(b446, d446), v141(b446 + 1, d446), v141(c446, d446)))
                        return !1;
                }
                else if (c142(v141(b446, d446), v141(b446 + 1, d446), v141(c446, d446)) || b142(v141(b446, d446), v141(b446 - 1, d446), v141(c446, d446)))
                    return !1;
                if (y141(c446, d446)) {
                    if (b142(v141(c446, d446), v141(c446 - 1, d446), v141(b446, d446)) && c142(v141(c446, d446), v141(c446 + 1, d446), v141(b446, d446)))
                        return !1;
                }
                else if (c142(v141(c446, d446), v141(c446 + 1, d446), v141(b446, d446)) || b142(v141(c446, d446), v141(c446 - 1, d446), v141(b446, d446)))
                    return !1;
                for (let e446 = 0; e446 < d446.length; ++e446) {
                    if ((e446 + 1) % d446.length == b446 || e446 == b446 || (e446 + 1) % d446.length == c446 || e446 == c446)
                        continue;
                    const f446 = new s147();
                    if (h142(v141(b446, d446), v141(c446, d446), v141(e446, d446), v141(e446 + 1, d446), f446))
                        return !1;
                }
                return !0;
            }
            function y141(z445, a446) {
                return z141(z445, a446);
            }
            function z141(u445, v445, w445) {
                if (void 0 === w445) {
                    const x445 = u445, y445 = v445;
                    u445 = v141(x445 - 1, y445), v445 = v141(x445, y445), void 0 === u445 && (u445 = v445), void 0 === (w445 = v141(x445 + 1, y445)) && (w445 = v445);
                }
                return i142(u445, v445, w445) < 0;
            }
            function a142(r445, s445, t445) {
                return i142(r445, s445, t445) > 0;
            }
            function b142(o445, p445, q445) {
                return i142(o445, p445, q445) >= 0;
            }
            function c142(l445, m445, n445) {
                return i142(l445, m445, n445) <= 0;
            }
            function d142(h445, i445) {
                const j445 = i445.x - h445.x, k445 = i445.y - h445.y;
                return j445 * j445 + k445 * k445;
            }
            function e142(g445) {
                f142(g445) || g445.reverse();
            }
            function f142(a445) {
                return a445.length < 3 || function (c445) {
                    let d445, e445 = 0;
                    for (d445 = 0; d445 < c445.length; d445++) {
                        const f445 = (d445 + 1) % c445.length;
                        e445 += c445[d445].x * c445[f445].y, e445 -= c445[d445].y * c445[f445].x;
                    }
                    return e445 /= 2, e445;
                }(a445) > 0;
            }
            function g142(n444, o444, p444, q444) {
                const r444 = new s147(), s444 = o444.y - n444.y, t444 = n444.x - o444.x, u444 = s444 * n444.x + t444 * n444.y, v444 = q444.y - p444.y, w444 = p444.x - q444.x, x444 = v444 * p444.x + w444 * p444.y, y444 = s444 * w444 - v444 * t444;
                var z444;
                return z444 = y444, 0, Math.abs(z444 - 0) <= 1e-6 || (r444.x = (w444 * u444 - t444 * x444) / y444, r444.y = (s444 * x444 - v444 * u444) / y444), r444;
            }
            function h142(x443, y443, z443, a444, b444) {
                if (x443 == z443 || x443 == a444 || y443 == z443 || y443 == a444)
                    return !1;
                const c444 = x443.x, d444 = x443.y, e444 = y443.x, f444 = y443.y, g444 = z443.x, h444 = z443.y, i444 = a444.x, j444 = a444.y;
                if (Math.max(c444, e444) < Math.min(g444, i444) || Math.max(g444, i444) < Math.min(c444, e444))
                    return !1;
                if (Math.max(d444, f444) < Math.min(h444, j444) || Math.max(h444, j444) < Math.min(d444, f444))
                    return !1;
                let k444 = (i444 - g444) * (d444 - h444) - (j444 - h444) * (c444 - g444), l444 = (e444 - c444) * (d444 - h444) - (f444 - d444) * (c444 - g444);
                const m444 = (j444 - h444) * (e444 - c444) - (i444 - g444) * (f444 - d444);
                return !(Math.abs(m444) < 1e-6) && (k444 /= m444, l444 /= m444, k444 > 0 && k444 < 1 && l444 > 0 && l444 < 1 && (b444.x = c444 + k444 * (e444 - c444), b444.y = d444 + k444 * (f444 - d444), !0));
            }
            function i142(u443, v443, w443) {
                return u443.x * (v443.y - w443.y) + v443.x * (w443.y - u443.y) + w443.x * (u443.y - v443.y);
            }
            var c231 = Object.freeze({
                __proto__: null,
                ConvexPartition: function t(a443) {
                    e142(a443);
                    let b443, c443, d443, e443, f443, g443, h443 = [], i443 = new s147(), j443 = new s147(), k443 = 0, l443 = 0;
                    for (let n443 = 0; n443 < a443.length; ++n443)
                        if (y141(n443, a443)) {
                            c443 = d443 = 1e8;
                            for (let t443 = 0; t443 < a443.length; ++t443)
                                a142(v141(n443 - 1, a443), v141(n443, a443), v141(t443, a443)) && c142(v141(n443 - 1, a443), v141(n443, a443), v141(t443 - 1, a443)) && (e443 = g142(v141(n443 - 1, a443), v141(n443, a443), v141(t443, a443), v141(t443 - 1, a443)), z141(v141(n443 + 1, a443), v141(n443, a443), e443) && (b443 = d142(v141(n443, a443), e443), b443 < c443 && (c443 = b443, i443 = e443, k443 = t443))), a142(v141(n443 + 1, a443), v141(n443, a443), v141(t443 + 1, a443)) && c142(v141(n443 + 1, a443), v141(n443, a443), v141(t443, a443)) && (e443 = g142(v141(n443 + 1, a443), v141(n443, a443), v141(t443, a443), v141(t443 + 1, a443)), a142(v141(n443 - 1, a443), v141(n443, a443), e443) && (b443 = d142(v141(n443, a443), e443), b443 < d443 && (d443 = b443, l443 = t443, j443 = e443)));
                            if (k443 == (l443 + 1) % a443.length) {
                                const s443 = i443.add(j443).multiplyScalar(.5);
                                f443 = w141(n443, l443, a443), f443.push(s443), g443 = w141(k443, n443, a443), g443.push(s443);
                            }
                            else {
                                let o443 = 0, p443 = k443;
                                for (; l443 < k443;)
                                    l443 += a443.length;
                                for (let q443 = k443; q443 <= l443; ++q443)
                                    if (x141(n443, q443, a443)) {
                                        let r443 = 1 / (d142(v141(n443, a443), v141(q443, a443)) + 1);
                                        y141(q443, a443) ? c142(v141(q443 - 1, a443), v141(q443, a443), v141(n443, a443)) && b142(v141(q443 + 1, a443), v141(q443, a443), v141(n443, a443)) ? r443 += 3 : r443 += 2 : r443 += 1, r443 > o443 && (p443 = q443, o443 = r443);
                                    }
                                f443 = w141(n443, p443, a443), g443 = w141(p443, n443, a443);
                            }
                            return h443 = h443.concat(t(f443)), h443 = h443.concat(t(g443)), h443;
                        }
                    h443.push(a443);
                    for (let m443 = h443.length - 1; m443 >= 0; m443--)
                        0 == h443[m443].length && h443.splice(m443, 0);
                    return h443;
                },
                ForceCounterClockWise: e142,
                IsCounterClockWise: f142
            });
            function j142(i441) {
                n142(i441);
                let j441 = !0;
                for (let y442 = 0, z442 = i441.length; y442 < z442; ++y442)
                    if (!l142(i441[(y442 + z442 - 1) % z442], i441[y442], i441[(y442 + 1) % z442])) {
                        j441 = !1;
                        break;
                    }
                if (j441)
                    return [i441];
                const k441 = [], l441 = function (z441) {
                    if (n142(z441), z441.length < 4)
                        return [z441];
                    const a442 = z441.length, b442 = [], c442 = [];
                    for (let w442 = 0; w442 < a442; ++w442) {
                        const x442 = new d231();
                        x442.isActive = !0, x442.isConvex = !1, x442.isEar = !1, x442.point = z441[w442], x442.angleCos = 0, x442.shouldUpdate = !0, x442.index = w442, b442.push(x442);
                    }
                    for (let u442 = 0; u442 < a442; ++u442) {
                        const v442 = b442[u442];
                        v442.prev = b442[(u442 + a442 - 1) % a442], v442.next = b442[(u442 + 1) % a442];
                    }
                    b442.forEach(t442 => o142(t442, b442));
                    for (let j442 = 0; j442 < a442 - 3; ++j442) {
                        let k442;
                        for (let r442 = 0; r442 < a442; ++r442) {
                            const s442 = b442[r442];
                            s442.isActive && s442.isEar && (k442 ? s442.angleCos > k442.angleCos && (k442 = s442) : k442 = s442);
                        }
                        if (!k442) {
                            for (let m442 = 0; m442 < a442; ++m442) {
                                const n442 = b442[m442];
                                if (n442.isActive) {
                                    const o442 = n442.prev.point, p442 = n442.point, q442 = n442.next.point;
                                    if (Math.abs(k142(o442, p442, q442)) > 1e-5)
                                        return console.log("Failed to find ear. There might be self-intersection in the polygon."), null;
                                }
                            }
                            break;
                        }
                        if (c442.push([k442.prev.point, k442.point, k442.next.point]), k442.isActive = !1, k442.prev.next = k442.next, k442.next.prev = k442.prev, k442.prev.shouldUpdate = !0, k442.next.shouldUpdate = !0, p142(k442.next), j442 === a442 - 4)
                            break;
                        for (let l442 = 0; l442 < a442; ++l442)
                            o142(b442[l442], b442);
                    }
                    for (let e442 = 0; e442 < a442; ++e442) {
                        const f442 = b442[e442];
                        if (f442.isActive) {
                            f442.prev.isActive = !1, f442.next.isActive = !1;
                            const g442 = f442.prev.point, h442 = f442.point, i442 = f442.next.point;
                            Math.abs(k142(g442, h442, i442)) > 1e-5 && c442.push([g442, h442, i442]);
                        }
                    }
                    return c442;
                }(i441);
                if (!l441)
                    return null;
                for (; l441.length;) {
                    let n441 = l441.splice(0, 1)[0];
                    for (let o441 = 0, p441 = n441.length; o441 < p441; ++o441) {
                        const q441 = n441[o441], r441 = n441[(o441 + 1) % p441];
                        let s441 = null, t441 = 0;
                        for (; t441 < l441.length; ++t441) {
                            const w441 = l441[t441];
                            for (let x441 = 0; x441 < 3; ++x441) {
                                const y441 = w441[x441];
                                if (m142(q441, w441[(x441 + 1) % 3]) && m142(r441, y441)) {
                                    s441 = w441[(x441 + 2) % 3];
                                    break;
                                }
                            }
                            if (s441)
                                break;
                        }
                        if (!s441)
                            continue;
                        if (k142(n441[(o441 + p441 - 1) % p441], q441, s441) > 0)
                            continue;
                        if (k142(s441, r441, n441[(o441 + 2) % p441]) > 0)
                            continue;
                        const u441 = [];
                        for (let v441 = (o441 + 1) % p441; v441 !== o441; v441 = (v441 + 1) % p441)
                            u441.push(n441[v441]);
                        u441.push(q441, s441), n441 = u441, p441 = u441.length, o441 = -1, l441.splice(t441, 1);
                    }
                    k441.push(n441);
                }
                return k441;
            }
            class d231 {
                constructor() {
                    this.isActive = !1, this.isConvex = !1, this.isEar = !1, this.point = null, this.angleCos = 0, this.shouldUpdate = !1, this.index = 0, this.prev = null, this.next = null;
                }
            }
            function k142(f441, g441, h441) {
                return (g441.y - f441.y) * (h441.x - g441.x) - (g441.x - f441.x) * (h441.y - g441.y);
            }
            function l142(c441, d441, e441) {
                return k142(c441, d441, e441) < 0;
            }
            function m142(a441, b441) {
                return a441.x === b441.x && a441.y === b441.y;
            }
            function n142(s440) {
                (function (u440) {
                    let v440 = 0;
                    for (let w440 = 0, x440 = u440.length; w440 < x440; ++w440) {
                        const y440 = u440[w440], z440 = u440[(w440 + 1) % x440];
                        v440 += (z440.x - y440.x) * (z440.y + y440.y);
                    }
                    return v440 > 0;
                })(s440) && s440.reverse();
            }
            function o142(a440, b440) {
                if (!a440.shouldUpdate)
                    return;
                a440.shouldUpdate = !1;
                const c440 = a440.prev.point, d440 = a440.point, e440 = a440.next.point;
                a440.isConvex = l142(c440, d440, e440);
                let f440 = c440.x - d440.x, g440 = c440.y - d440.y;
                const h440 = Math.sqrt(f440 * f440 + g440 * g440);
                f440 /= h440, g440 /= h440;
                let i440 = e440.x - d440.x, j440 = e440.y - d440.y;
                const k440 = Math.sqrt(i440 * i440 + j440 * j440);
                if (i440 /= k440, j440 /= k440, a440.angleCos = f440 * i440 + g440 * j440, a440.isConvex) {
                    a440.isEar = !0;
                    for (let l440 = 0, m440 = b440.length; l440 < m440; ++l440) {
                        const n440 = b440[l440];
                        if (!n440.isActive || n440 === a440)
                            continue;
                        const o440 = n440.point;
                        if (m142(c440, o440) || m142(d440, o440) || m142(e440, o440))
                            continue;
                        const p440 = k142(c440, o440, d440), q440 = k142(d440, o440, e440), r440 = k142(e440, o440, c440);
                        if (p440 > 0 && q440 > 0 && r440 > 0) {
                            a440.isEar = !1;
                            break;
                        }
                        if (0 === p440 && q440 >= 0 && r440 >= 0 && (k142(c440, n440.prev.point, d440) > 0 || k142(c440, n440.next.point, d440) > 0)) {
                            a440.isEar = !1;
                            break;
                        }
                        if (0 === q440 && p440 >= 0 && r440 >= 0 && (k142(d440, n440.prev.point, e440) > 0 || k142(d440, n440.next.point, e440) > 0)) {
                            a440.isEar = !1;
                            break;
                        }
                        if (0 === r440 && p440 >= 0 && q440 >= 0 && (k142(e440, n440.prev.point, c440) > 0 || k142(e440, n440.next.point, c440) > 0)) {
                            a440.isEar = !1;
                            break;
                        }
                    }
                }
                else
                    a440.isEar = !1;
            }
            function p142(x439) {
                for (let y439 = x439, z439 = x439;;)
                    if (m142(y439.point, y439.next.point) || 0 === k142(y439.prev.point, y439.point, y439.next.point)) {
                        if (y439.prev.next = y439.next, y439.next.prev = y439.prev, y439.prev.shouldUpdate = !0, y439.next.shouldUpdate = !0, y439 === y439.next)
                            break;
                        z439 = y439.prev, y439 = y439.next;
                    }
                    else if (y439 = y439.next, y439 === z439)
                        break;
            }
            var e231 = Object.freeze({
                __proto__: null,
                ConvexPartition: j142
            });
            let f231, g231, h231, i231, j231, k231, l231, m231, n231, o231, p231;
            !function (w439) {
                w439[w439.DYNAMIC = 1] = "DYNAMIC", w439[w439.STATIC = 2] = "STATIC", w439[w439.KINEMATIC = 4] = "KINEMATIC";
            }(f231 || (f231 = {})), p127(f231), function (v439) {
                v439[v439.X_AXIS = 0] = "X_AXIS", v439[v439.Y_AXIS = 1] = "Y_AXIS", v439[v439.Z_AXIS = 2] = "Z_AXIS";
            }(g231 || (g231 = {})), p127(g231), function (u439) {
                u439[u439.X = 0] = "X", u439[u439.Y = 1] = "Y", u439[u439.Z = 2] = "Z", u439[u439.SWING1 = 3] = "SWING1", u439[u439.SWING2 = 4] = "SWING2", u439[u439.TWIST = 5] = "TWIST";
            }(h231 || (h231 = {})), p127(h231), function (t439) {
                t439[t439.VERTEX = 1] = "VERTEX", t439[t439.LINE = 2] = "LINE", t439[t439.TRIANGLE = 3] = "TRIANGLE", t439[t439.TETRAHEDRON = 4] = "TETRAHEDRON";
            }(i231 || (i231 = {})), p127(i231), function (s439) {
                s439[s439.BOX = 0] = "BOX", s439[s439.SPHERE = 1] = "SPHERE", s439[s439.CAPSULE = 2] = "CAPSULE", s439[s439.CYLINDER = 3] = "CYLINDER", s439[s439.CONE = 4] = "CONE", s439[s439.MESH = 5] = "MESH", s439[s439.PLANE = 6] = "PLANE", s439[s439.SIMPLEX = 7] = "SIMPLEX", s439[s439.TERRAIN = 8] = "TERRAIN";
            }(j231 || (j231 = {})), p127(j231), function (r439) {
                r439[r439.POINT_TO_POINT = 0] = "POINT_TO_POINT", r439[r439.HINGE = 1] = "HINGE", r439[r439.FIXED = 2] = "FIXED", r439[r439.CONFIGURABLE = 3] = "CONFIGURABLE";
            }(k231 || (k231 = {})), p127(k231), function (q439) {
                q439[q439.FREE = 0] = "FREE", q439[q439.LIMITED = 1] = "LIMITED", q439[q439.LOCKED = 2] = "LOCKED";
            }(l231 || (l231 = {})), p127(l231), function (p439) {
                p439[p439.DISABLED = 0] = "DISABLED", p439[p439.SERVO = 1] = "SERVO", p439[p439.INDUCTION = 2] = "INDUCTION";
            }(m231 || (m231 = {})), p127(m231), function (o439) {
                o439[o439.BOX = 0] = "BOX", o439[o439.CAPSULE = 1] = "CAPSULE";
            }(n231 || (n231 = {})), p127(n231), function (n439) {
                n439[n439.DEFAULT = 1] = "DEFAULT";
            }(o231 || (o231 = {})), p127(o231), function (m439) {
                m439[m439.NONE = 0] = "NONE", m439[m439.WIRE_FRAME = 1] = "WIRE_FRAME", m439[m439.CONSTRAINT = 2] = "CONSTRAINT", m439[m439.AABB = 4] = "AABB";
            }(p231 || (p231 = {})), p127(p231);
            class q231 {
                constructor(g439) {
                    if (1 === g439) {
                        const i439 = this;
                        for (let j439 = 0; j439 < 32; j439++) {
                            const k439 = "_" + (1 << j439);
                            i439[k439] = 0, i439.updateArray = [], Object.defineProperty(i439, 1 << j439, {
                                get() {
                                    return this[k439];
                                },
                                set(l439) {
                                    this[k439] !== l439 && (this[k439] = l439, this.updateArray.indexOf(j439) < 0 && this.updateArray.push(j439));
                                }
                            });
                        }
                        this._1 = o231.DEFAULT;
                    }
                    else {
                        for (let h439 = 0; h439 < 32; h439++)
                            this["" + (1 << h439)] = 0;
                        this[1] = o231.DEFAULT;
                    }
                }
            }
            let r231, s231 = null;
            s143.internal.PhysicsGroup2D = k230;
            class t231 extends g133(a156) {
                get enable() {
                    return this._enable;
                }
                set enable(f439) {
                    this._enable = f439;
                }
                get allowSleep() {
                    return this._allowSleep;
                }
                set allowSleep(e439) {
                    this._allowSleep = e439, this.physicsWorld.setAllowSleep(e439);
                }
                get gravity() {
                    return this._gravity;
                }
                set gravity(d439) {
                    this._gravity.set(d439), this.physicsWorld.setGravity(new s147(d439.x / o230, d439.y / o230));
                }
                get maxSubSteps() {
                    return this._maxSubSteps;
                }
                set maxSubSteps(c439) {
                    this._maxSubSteps = c439;
                }
                get fixedTimeStep() {
                    return this._fixedTimeStep;
                }
                set fixedTimeStep(b439) {
                    this._fixedTimeStep = b439;
                }
                get autoSimulation() {
                    return this._autoSimulation;
                }
                set autoSimulation(a439) {
                    this._autoSimulation = a439;
                }
                get debugDrawFlags() {
                    return this.physicsWorld.debugDrawFlags;
                }
                set debugDrawFlags(z438) {
                    this.physicsWorld.debugDrawFlags = z438;
                }
                get physicsWorld() {
                    return p230.physicsWorld;
                }
                static get PHYSICS_NONE() {
                    return !p230.id;
                }
                static get PHYSICS_BUILTIN() {
                    return "builtin" === p230.id;
                }
                static get PHYSICS_BOX2D() {
                    return "box2d" === p230.id;
                }
                static get PHYSICS_BOX2D_WASM() {
                    return "box2d-wasm" === p230.id;
                }
                static get PhysicsGroup() {
                    return k230;
                }
                static get instance() {
                    return s231 || (s231 = new t231()), s231;
                }
                get stepping() {
                    return this._steping;
                }
                constructor() {
                    var m438, n438, o438, p438;
                    super(), this.velocityIterations = 10, this.positionIterations = 10, this.collisionMatrix = new q231(), this._enable = !0, this._allowSleep = !0, this._maxSubSteps = 1, this._fixedTimeStep = 1 / 60, this._autoSimulation = !0, this._accumulator = 0, this._steping = !1, this._gravity = new s147(0, -10 * o230), this._delayEvents = [];
                    const q438 = r145.querySettings(q145.Category.PHYSICS, "gravity");
                    q438 && (s147.copy(this._gravity, q438), this._gravity.multiplyScalar(o230)), this._allowSleep = null !== (m438 = r145.querySettings(q145.Category.PHYSICS, "allowSleep")) && void 0 !== m438 ? m438 : this._allowSleep, this._fixedTimeStep = null !== (n438 = r145.querySettings(q145.Category.PHYSICS, "fixedTimeStep")) && void 0 !== n438 ? n438 : this._fixedTimeStep, this._maxSubSteps = null !== (o438 = r145.querySettings(q145.Category.PHYSICS, "maxSubSteps")) && void 0 !== o438 ? o438 : this._maxSubSteps, this._autoSimulation = null !== (p438 = r145.querySettings(q145.Category.PHYSICS, "autoSimulation")) && void 0 !== p438 ? p438 : this._autoSimulation;
                    const r438 = r145.querySettings(q145.Category.PHYSICS, "collisionMatrix");
                    if (r438)
                        for (const w438 in r438) {
                            const x438 = parseInt(w438), y438 = 1 << parseInt(w438);
                            this.collisionMatrix[`${y438}`] = r438[x438];
                        }
                    const s438 = r145.querySettings(q145.Category.PHYSICS, "collisionGroups");
                    if (s438) {
                        const t438 = s438;
                        t438 instanceof Array && (t438.forEach(v438 => {
                            k230[v438.name] = 1 << v438.index;
                        }), p127.update(k230));
                    }
                    p230.physicsWorld = u141(), this.gravity = this._gravity, this.allowSleep = this._allowSleep;
                }
                postUpdate(d438) {
                    if (!this._enable)
                        return;
                    if (!this._autoSimulation)
                        return;
                    t185.emit(s185.EVENT_BEFORE_PHYSICS), this.physicsWorld.syncSceneToPhysics(), this._steping = !0;
                    const e438 = this._fixedTimeStep, f438 = this.velocityIterations, g438 = this.positionIterations;
                    this._accumulator += d438;
                    let h438 = 0;
                    for (; h438++ < this._maxSubSteps && this._accumulator > e438;)
                        this.physicsWorld.step(e438, f438, g438), this._accumulator -= e438;
                    const i438 = this._delayEvents;
                    for (let j438 = 0, k438 = i438.length; j438 < k438; j438++) {
                        const l438 = i438[j438];
                        l438.func.call(l438.target);
                    }
                    i438.length = 0, this.physicsWorld.syncPhysicsToScene(), this.debugDrawFlags && this.physicsWorld.drawDebug(), this._steping = !1, t185.emit(s185.EVENT_AFTER_PHYSICS);
                }
                _callAfterStep(b438, c438) {
                    this._steping ? this._delayEvents.push({
                        target: b438,
                        func: c438
                    }) : c438.call(b438);
                }
                resetAccumulator(a438 = 0) {
                    this._accumulator = a438;
                }
                step(z437) {
                    this.physicsWorld.step(z437, this.velocityIterations, this.positionIterations);
                }
                raycast(v437, w437, x437 = l230.Closest, y437 = 4294967295) {
                    return this.physicsWorld.raycast(v437, w437, x437, y437);
                }
                testPoint(u437) {
                    return this.physicsWorld.testPoint(u437);
                }
                testAABB(t437) {
                    return this.physicsWorld.testAABB(t437);
                }
                static constructAndRegister() {
                    t185.registerSystem(t231.ID, t231.instance, a156.Priority.LOW);
                }
            }
            var u231, v231, w231, x231, y231, z231, a232, b232, c232, d232, e232, f232, g232, h232, i232, j232, k232, l232, m232, n232, o232, p232, q232, r232;
            g125("PhysicsSystem2D", t231), t231.ID = "PHYSICS_2D", t185.once(s185.EVENT_INIT, () => {
                t231.constructAndRegister();
            }), g125("Physics2DManifoldType", r231), function (s437) {
                s437[s437.Circles = 0] = "Circles", s437[s437.FaceA = 1] = "FaceA", s437[s437.FaceB = 2] = "FaceB";
            }(r231 || g125("Physics2DManifoldType", r231 = {}));
            const { property: s232, type: t232, menu: u232, ccclass: v232 } = k152;
            let w232 = g125("RigidBody2D", (u231 = v232("cc.RigidBody2D"), v231 = t232(o231), w231 = t232(h230), x231 = t232(a146), y231 = t232(z145), z231 = t232(z145), a232 = t232(z145), b232 = t232(s147), c232 = t232(z145), d232 = t232(a146), u231((i125((f232 = class extends a165 {
                constructor(...r437) {
                    super(...r437), this.enabledContactListener = g232 && g232(), this.bullet = h232 && h232(), this.awakeOnLoad = i232 && i232(), this._body = null, this._group = j232 && j232(), this._type = k232 && k232(), this._allowSleep = l232 && l232(), this._gravityScale = m232 && m232(), this._linearDamping = n232 && n232(), this._angularDamping = o232 && o232(), this._linearVelocity = p232 && p232(), this._angularVelocity = q232 && q232(), this._fixedRotation = r232 && r232();
                }
                get group() {
                    return this._group;
                }
                set group(q437) {
                    this._group = q437;
                }
                get type() {
                    return this._type;
                }
                set type(p437) {
                    this._type = p437, this._body && (p437 === h230.Animated ? this._body.setType(h230.Kinematic) : this._body.setType(p437));
                }
                get allowSleep() {
                    return this._allowSleep;
                }
                set allowSleep(o437) {
                    this._allowSleep = o437, this._body && this._body.setAllowSleep(o437);
                }
                get gravityScale() {
                    return this._gravityScale;
                }
                set gravityScale(n437) {
                    this._gravityScale = n437, this._body && this._body.setGravityScale(n437);
                }
                get linearDamping() {
                    return this._linearDamping;
                }
                set linearDamping(m437) {
                    this._linearDamping = m437, this._body && this._body.setLinearDamping(m437);
                }
                get angularDamping() {
                    return this._angularDamping;
                }
                set angularDamping(l437) {
                    this._angularDamping = l437, this._body && this._body.setAngularDamping(l437);
                }
                get linearVelocity() {
                    return this._body && this._body.getLinearVelocity(this._linearVelocity), this._linearVelocity;
                }
                set linearVelocity(k437) {
                    this._linearVelocity = k437, this._body && this._body.setLinearVelocity(k437);
                }
                get angularVelocity() {
                    return this._body && (this._angularVelocity = this._body.getAngularVelocity()), this._angularVelocity;
                }
                set angularVelocity(j437) {
                    this._angularVelocity = j437, this._body && this._body.setAngularVelocity(j437);
                }
                get fixedRotation() {
                    return this._fixedRotation;
                }
                set fixedRotation(i437) {
                    this._fixedRotation = i437, this._body && this._body.setFixedRotation(i437);
                }
                isAwake() {
                    return !!this._body && this._body.isAwake;
                }
                wakeUp() {
                    this._body && this._body.wakeUp();
                }
                sleep() {
                    this._body && this._body.sleep();
                }
                getMass() {
                    return this._body ? this._body.getMass() : 0;
                }
                applyForce(f437, g437, h437) {
                    this._body && this._body.applyForce(f437, g437, h437);
                }
                applyForceToCenter(d437, e437) {
                    this._body && this._body.applyForceToCenter(d437, e437);
                }
                applyTorque(b437, c437) {
                    this._body && this._body.applyTorque(b437, c437);
                }
                applyLinearImpulse(y436, z436, a437) {
                    this._body && this._body.applyLinearImpulse(y436, z436, a437);
                }
                applyLinearImpulseToCenter(w436, x436) {
                    this._body && this._body.applyLinearImpulseToCenter(w436, x436);
                }
                applyAngularImpulse(u436, v436) {
                    this._body && this._body.applyAngularImpulse(u436, v436);
                }
                getLinearVelocityFromWorldPoint(s436, t436) {
                    return this._body ? this._body.getLinearVelocityFromWorldPoint(s436, t436) : t436;
                }
                getLocalVector(q436, r436) {
                    return this._body ? this._body.getLocalVector(q436, r436) : r436;
                }
                getWorldVector(o436, p436) {
                    return this._body ? this._body.getWorldVector(o436, p436) : p436;
                }
                getLocalPoint(m436, n436) {
                    return this._body ? this._body.getLocalPoint(m436, n436) : n436;
                }
                getWorldPoint(k436, l436) {
                    return this._body ? this._body.getWorldPoint(k436, l436) : l436;
                }
                getLocalCenter(j436) {
                    return this._body ? this._body.getLocalCenter(j436) : j436;
                }
                getWorldCenter(i436) {
                    return this._body ? this._body.getWorldCenter(i436) : i436;
                }
                getInertia() {
                    return this._body && this._body.getInertia(), 0;
                }
                onLoad() {
                    this._body = "builtin" === p230.id ? r230 : new p230.wrapper.RigidBody(), this._body.initialize(this);
                }
                onEnable() {
                    this._body && this._body.onEnable();
                }
                onDisable() {
                    this._body && this._body.onDisable();
                }
                onDestroy() {
                    this._body && this._body.onDestroy();
                }
                get impl() {
                    return this._body;
                }
            }).prototype, "group", [v231], Object.getOwnPropertyDescriptor(f232.prototype, "group"), f232.prototype), g232 = p130(f232.prototype, "enabledContactListener", [j151], function () {
                return !1;
            }), h232 = p130(f232.prototype, "bullet", [j151], function () {
                return !1;
            }), i125(f232.prototype, "type", [w231], Object.getOwnPropertyDescriptor(f232.prototype, "type"), f232.prototype), i125(f232.prototype, "allowSleep", [x231], Object.getOwnPropertyDescriptor(f232.prototype, "allowSleep"), f232.prototype), i125(f232.prototype, "gravityScale", [y231], Object.getOwnPropertyDescriptor(f232.prototype, "gravityScale"), f232.prototype), i125(f232.prototype, "linearDamping", [z231], Object.getOwnPropertyDescriptor(f232.prototype, "linearDamping"), f232.prototype), i125(f232.prototype, "angularDamping", [a232], Object.getOwnPropertyDescriptor(f232.prototype, "angularDamping"), f232.prototype), i125(f232.prototype, "linearVelocity", [b232], Object.getOwnPropertyDescriptor(f232.prototype, "linearVelocity"), f232.prototype), i125(f232.prototype, "angularVelocity", [c232], Object.getOwnPropertyDescriptor(f232.prototype, "angularVelocity"), f232.prototype), i125(f232.prototype, "fixedRotation", [d232], Object.getOwnPropertyDescriptor(f232.prototype, "fixedRotation"), f232.prototype), i232 = p130(f232.prototype, "awakeOnLoad", [j151], function () {
                return !0;
            }), j232 = p130(f232.prototype, "_group", [j151], function () {
                return o231.DEFAULT;
            }), k232 = p130(f232.prototype, "_type", [j151], function () {
                return h230.Dynamic;
            }), l232 = p130(f232.prototype, "_allowSleep", [j151], function () {
                return !0;
            }), m232 = p130(f232.prototype, "_gravityScale", [j151], function () {
                return 1;
            }), n232 = p130(f232.prototype, "_linearDamping", [j151], function () {
                return 0;
            }), o232 = p130(f232.prototype, "_angularDamping", [j151], function () {
                return 0;
            }), p232 = p130(f232.prototype, "_linearVelocity", [j151], function () {
                return new s147();
            }), q232 = p130(f232.prototype, "_angularVelocity", [j151], function () {
                return 0;
            }), r232 = p130(f232.prototype, "_fixedRotation", [j151], function () {
                return !1;
            }), e232 = f232)) || e232));
            var x232, y232, z232, a233, b233, c233, d233, e233, f233, g233, h233, i233, j233, k233, l233, m233, n233;
            const { ccclass: o233, editable: p233, property: q233, type: r233 } = k152;
            let s233 = g125("Collider2D", (x232 = o233("cc.Collider2D"), y232 = r233(z145), z232 = r233(o231), a233 = r233(z145), b233 = r233(a146), c233 = r233(z145), d233 = r233(z145), e233 = r233(s147), x232((g233 = class extends g133(a165) {
                constructor(...h436) {
                    super(...h436), this.editing = !1, this.tag = h233 && h233(), this.TYPE = i230.None, this._shape = null, this._body = null, this._group = i233 && i233(), this._density = j233 && j233(), this._sensor = k233 && k233(), this._friction = l233 && l233(), this._restitution = m233 && m233(), this._offset = n233 && n233();
                }
                get group() {
                    return this._group;
                }
                set group(g436) {
                    this._group = g436, this._shape && this._shape.onGroupChanged && this._shape.onGroupChanged();
                }
                get density() {
                    return this._density;
                }
                set density(f436) {
                    this._density = f436;
                }
                get sensor() {
                    return this._sensor;
                }
                set sensor(e436) {
                    this._sensor = e436;
                }
                get friction() {
                    return this._friction;
                }
                set friction(d436) {
                    this._friction = d436;
                }
                get restitution() {
                    return this._restitution;
                }
                set restitution(c436) {
                    this._restitution = c436;
                }
                get offset() {
                    return this._offset;
                }
                set offset(b436) {
                    this._offset = b436;
                }
                get body() {
                    return this._body;
                }
                get impl() {
                    return this._shape;
                }
                onLoad() {
                    this._shape = function (x435) {
                        return s230.INITED || (s230.INITED = !0, s230[i230.BOX] = function () {
                            return new p230.wrapper.BoxShape();
                        }, s230[i230.CIRCLE] = function () {
                            return new p230.wrapper.CircleShape();
                        }, s230[i230.POLYGON] = function () {
                            return new p230.wrapper.PolygonShape();
                        }), s230[x435]();
                    }(this.TYPE), this._shape.initialize(this), this._shape.onLoad && this._shape.onLoad(), this._body = this.getComponent(w232);
                }
                onEnable() {
                    this._shape && this._shape.onEnable();
                }
                onDisable() {
                    this._shape && this._shape.onDisable && this._shape.onDisable();
                }
                onDestroy() {
                    this._shape && this._shape.onDestroy && this._shape.onDestroy();
                }
                apply() {
                    this._shape && this._shape.apply && this._shape.apply();
                }
                get worldAABB() {
                    return this._shape ? this._shape.worldAABB : new y147();
                }
            }, h233 = p130(g233.prototype, "tag", [y232, j151], function () {
                return 0;
            }), i125(g233.prototype, "group", [z232], Object.getOwnPropertyDescriptor(g233.prototype, "group"), g233.prototype), i125(g233.prototype, "density", [a233], Object.getOwnPropertyDescriptor(g233.prototype, "density"), g233.prototype), i125(g233.prototype, "sensor", [b233], Object.getOwnPropertyDescriptor(g233.prototype, "sensor"), g233.prototype), i125(g233.prototype, "friction", [c233], Object.getOwnPropertyDescriptor(g233.prototype, "friction"), g233.prototype), i125(g233.prototype, "restitution", [d233], Object.getOwnPropertyDescriptor(g233.prototype, "restitution"), g233.prototype), i125(g233.prototype, "offset", [e233], Object.getOwnPropertyDescriptor(g233.prototype, "offset"), g233.prototype), i233 = p130(g233.prototype, "_group", [j151], function () {
                return o231.DEFAULT;
            }), j233 = p130(g233.prototype, "_density", [j151], function () {
                return 1;
            }), k233 = p130(g233.prototype, "_sensor", [j151], function () {
                return !1;
            }), l233 = p130(g233.prototype, "_friction", [j151], function () {
                return .2;
            }), m233 = p130(g233.prototype, "_restitution", [j151], function () {
                return 0;
            }), n233 = p130(g233.prototype, "_offset", [j151], function () {
                return new s147();
            }), f233 = g233)) || f233));
            var t233, u233, v233, w233, x233;
            const { ccclass: y233, menu: z233, property: a234 } = k152;
            var b234, c234, d234, e234, f234;
            g125("BoxCollider2D", (t233 = y233("cc.BoxCollider2D"), u233 = a131(x147), t233((w233 = class extends s233 {
                constructor(...v435) {
                    super(...v435), this._size = x233 && x233(), this.TYPE = i230.BOX;
                }
                get size() {
                    return this._size;
                }
                set size(u435) {
                    this._size = u435;
                }
                get worldPoints() {
                    return this._shape ? this._shape.worldPoints : [];
                }
            }, x233 = p130(w233.prototype, "_size", [j151], function () {
                return new x147(1, 1);
            }), i125(w233.prototype, "size", [u233], Object.getOwnPropertyDescriptor(w233.prototype, "size"), w233.prototype), v233 = w233)) || v233));
            const { ccclass: g234, menu: h234, property: i234 } = k152;
            var j234, k234, l234, m234, n234, o234, p234;
            g125("CircleCollider2D", (b234 = g234("cc.CircleCollider2D"), c234 = a131(z145), b234((e234 = class extends s233 {
                constructor(...t435) {
                    super(...t435), this._radius = f234 && f234(), this.TYPE = i230.CIRCLE;
                }
                get radius() {
                    return this._radius;
                }
                set radius(s435) {
                    this._radius = s435 < 0 ? 0 : s435;
                }
                get worldPosition() {
                    return this._shape ? this._shape.worldPosition : new s147();
                }
                get worldRadius() {
                    return this._shape ? this._shape.worldRadius : 0;
                }
            }, f234 = p130(e234.prototype, "_radius", [j151], function () {
                return 1;
            }), i125(e234.prototype, "radius", [c234], Object.getOwnPropertyDescriptor(e234.prototype, "radius"), e234.prototype), d234 = e234)) || d234));
            const { ccclass: q234, menu: r234, property: s234 } = k152;
            var t234, u234, v234, w234, x234, y234, z234, a235;
            g125("PolygonCollider2D", (j234 = q234("cc.PolygonCollider2D"), k234 = a131(z145), l234 = a131([s147]), j234((n234 = class extends s233 {
                constructor(...r435) {
                    super(...r435), this.threshold = o234 && o234(), this._points = p234 && p234(), this.TYPE = i230.POLYGON;
                }
                get points() {
                    return this._points;
                }
                set points(q435) {
                    this._points = q435;
                }
                get worldPoints() {
                    return this._shape ? this._shape.worldPoints : [];
                }
            }, o234 = p130(n234.prototype, "threshold", [k234], function () {
                return 1;
            }), p234 = p130(n234.prototype, "_points", [j151], function () {
                return [new s147(-1, -1), new s147(1, -1), new s147(1, 1), new s147(-1, 1)];
            }), i125(n234.prototype, "points", [l234], Object.getOwnPropertyDescriptor(n234.prototype, "points"), n234.prototype), m234 = n234)) || m234));
            const { ccclass: b235, type: c235, property: d235 } = k152;
            let e235 = g125("Joint2D", (t234 = b235("cc.Joint2D"), u234 = c235(w232), t234((w234 = class extends a165 {
                constructor(...p435) {
                    super(...p435), this.anchor = x234 && x234(), this.connectedAnchor = y234 && y234(), this.collideConnected = z234 && z234(), this.connectedBody = a235 && a235(), this._body = null, this._joint = null, this.TYPE = j230.None;
                }
                get body() {
                    return this._body;
                }
                get impl() {
                    return this._joint;
                }
                onLoad() {
                    this._joint = function (e435) {
                        return function () {
                            if (t230.INITED)
                                return;
                            t230.INITED = !0;
                            const g435 = "builtin" === p230.id;
                            t230[j230.SPRING] = function () {
                                return g435 ? u230 : new p230.wrapper.SpringJoint();
                            }, t230[j230.DISTANCE] = function () {
                                return g435 ? u230 : new p230.wrapper.DistanceJoint();
                            }, t230[j230.FIXED] = function () {
                                return g435 ? u230 : new p230.wrapper.FixedJoint();
                            }, t230[j230.MOUSE] = function () {
                                return g435 ? u230 : new p230.wrapper.MouseJoint();
                            }, t230[j230.RELATIVE] = function () {
                                return g435 ? u230 : new p230.wrapper.RelativeJoint();
                            }, t230[j230.SLIDER] = function () {
                                return g435 ? u230 : new p230.wrapper.SliderJoint();
                            }, t230[j230.WHEEL] = function () {
                                return g435 ? u230 : new p230.wrapper.WheelJoint();
                            }, t230[j230.HINGE] = function () {
                                return g435 ? u230 : new p230.wrapper.HingeJoint();
                            };
                        }(), t230[e435]();
                    }(this.TYPE), this._joint.initialize(this), this._body = this.getComponent(w232);
                }
                onEnable() {
                    this._joint && this._joint.onEnable && this._joint.onEnable();
                }
                onDisable() {
                    this._joint && this._joint.onDisable && this._joint.onDisable();
                }
                start() {
                    this._joint && this._joint.start && this._joint.start();
                }
                onDestroy() {
                    this._joint && this._joint.onDestroy && this._joint.onDestroy();
                }
                apply() {
                    this._joint && this._joint.apply && this._joint.apply();
                }
            }, x234 = p130(w234.prototype, "anchor", [j151], function () {
                return new s147();
            }), y234 = p130(w234.prototype, "connectedAnchor", [j151], function () {
                return new s147();
            }), z234 = p130(w234.prototype, "collideConnected", [j151], function () {
                return !1;
            }), a235 = p130(w234.prototype, "connectedBody", [u234, j151], function () {
                return null;
            }), v234 = w234)) || v234));
            var f235, g235, h235, i235, j235, k235, l235;
            const { ccclass: m235, menu: n235, property: o235 } = k152;
            var p235, q235, r235, s235, t235, u235, v235, w235, x235, y235, z235;
            g125("DistanceJoint2D", (f235 = m235("cc.DistanceJoint2D"), g235 = a131(z145), h235 = a131(a146), f235((i125((j235 = class extends e235 {
                constructor(...c435) {
                    super(...c435), this.TYPE = j230.DISTANCE, this._maxLength = k235 && k235(), this._autoCalcDistance = l235 && l235();
                }
                get maxLength() {
                    return this._autoCalcDistance ? this.connectedBody ? w146.distance(this.node.worldPosition, this.connectedBody.node.worldPosition) : w146.len(this.node.worldPosition) : this._maxLength;
                }
                set maxLength(b435) {
                    this._maxLength = b435, this._joint && this._joint.setMaxLength(b435);
                }
                get autoCalcDistance() {
                    return this._autoCalcDistance;
                }
                set autoCalcDistance(a435) {
                    this._autoCalcDistance = a435;
                }
            }).prototype, "maxLength", [g235], Object.getOwnPropertyDescriptor(j235.prototype, "maxLength"), j235.prototype), i125(j235.prototype, "autoCalcDistance", [h235], Object.getOwnPropertyDescriptor(j235.prototype, "autoCalcDistance"), j235.prototype), k235 = p130(j235.prototype, "_maxLength", [j151], function () {
                return 5;
            }), l235 = p130(j235.prototype, "_autoCalcDistance", [j151], function () {
                return !0;
            }), i235 = j235)) || i235));
            const { ccclass: a236, property: b236, menu: c236 } = k152;
            var d236, e236, f236, g236, h236, i236, j236, k236, l236;
            g125("SpringJoint2D", (p235 = a236("cc.SpringJoint2D"), q235 = a131(z145), r235 = a131(z145), s235 = a131(z145), t235 = a131(a146), p235((i125((v235 = class extends e235 {
                constructor(...z434) {
                    super(...z434), this.TYPE = j230.SPRING, this._frequency = w235 && w235(), this._dampingRatio = x235 && x235(), this._distance = y235 && y235(), this._autoCalcDistance = z235 && z235();
                }
                get frequency() {
                    return this._frequency;
                }
                set frequency(y434) {
                    this._frequency = y434, this._joint && this._joint.setFrequency(y434);
                }
                get dampingRatio() {
                    return this._dampingRatio;
                }
                set dampingRatio(x434) {
                    this._dampingRatio = x434, this._joint && this._joint.setDampingRatio(x434);
                }
                get distance() {
                    return this._autoCalcDistance ? this.connectedBody ? w146.distance(this.node.worldPosition, this.connectedBody.node.worldPosition) : w146.len(this.node.worldPosition) : this._distance;
                }
                set distance(w434) {
                    this._distance = w434, this._joint && this._joint.setDistance(w434);
                }
                get autoCalcDistance() {
                    return this._autoCalcDistance;
                }
                set autoCalcDistance(v434) {
                    this._autoCalcDistance = v434;
                }
            }).prototype, "frequency", [q235], Object.getOwnPropertyDescriptor(v235.prototype, "frequency"), v235.prototype), i125(v235.prototype, "dampingRatio", [r235], Object.getOwnPropertyDescriptor(v235.prototype, "dampingRatio"), v235.prototype), i125(v235.prototype, "distance", [s235], Object.getOwnPropertyDescriptor(v235.prototype, "distance"), v235.prototype), i125(v235.prototype, "autoCalcDistance", [t235], Object.getOwnPropertyDescriptor(v235.prototype, "autoCalcDistance"), v235.prototype), w235 = p130(v235.prototype, "_frequency", [j151], function () {
                return 5;
            }), x235 = p130(v235.prototype, "_dampingRatio", [j151], function () {
                return .7;
            }), y235 = p130(v235.prototype, "_distance", [j151], function () {
                return 10;
            }), z235 = p130(v235.prototype, "_autoCalcDistance", [j151], function () {
                return !0;
            }), u235 = v235)) || u235));
            const { ccclass: m236, menu: n236, property: o236 } = k152;
            var p236, q236, r236, s236, t236, u236, v236, w236, x236, y236, z236, a237, b237, c237, d237;
            g125("MouseJoint2D", (d236 = m236("cc.MouseJoint2D"), e236 = a131(z145), f236 = a131(z145), g236 = a131(z145), d236((i125((i236 = class extends e235 {
                constructor(...u434) {
                    super(...u434), this.TYPE = j230.MOUSE, this._maxForce = j236 && j236(), this._dampingRatio = k236 && k236(), this._frequency = l236 && l236(), this._target = new s147();
                }
                get target() {
                    return this._target;
                }
                set target(t434) {
                    this._target = t434, this._joint && this._joint.setTarget(t434);
                }
                get frequency() {
                    return this._frequency;
                }
                set frequency(s434) {
                    this._frequency = s434, this._joint && this._joint.setFrequency(s434);
                }
                get dampingRatio() {
                    return this._dampingRatio;
                }
                set dampingRatio(r434) {
                    this._dampingRatio = r434, this._joint && this._joint.setDampingRatio(r434);
                }
                get maxForce() {
                    return this._maxForce;
                }
                set maxForce(q434) {
                    this._maxForce = q434, this._joint && this._joint.setMaxForce(q434);
                }
                update(p434) {
                    this._joint.update(p434);
                }
            }).prototype, "frequency", [e236], Object.getOwnPropertyDescriptor(i236.prototype, "frequency"), i236.prototype), i125(i236.prototype, "dampingRatio", [f236], Object.getOwnPropertyDescriptor(i236.prototype, "dampingRatio"), i236.prototype), i125(i236.prototype, "maxForce", [g236], Object.getOwnPropertyDescriptor(i236.prototype, "maxForce"), i236.prototype), j236 = p130(i236.prototype, "_maxForce", [j151], function () {
                return 1e3;
            }), k236 = p130(i236.prototype, "_dampingRatio", [j151], function () {
                return .7;
            }), l236 = p130(i236.prototype, "_frequency", [j151], function () {
                return 5;
            }), h236 = i236)) || h236));
            const e237 = new w146(), f237 = new w146(), { ccclass: g237, menu: h237, property: i237 } = k152;
            var j237, k237, l237, m237, n237, o237, p237, q237, r237, s237, t237, u237, v237, w237, x237, y237, z237, a238, b238;
            g125("RelativeJoint2D", (p236 = g237("cc.RelativeJoint2D"), q236 = a131(z145), r236 = a131(z145), s236 = a131(z145), t236 = a131(s147), u236 = a131(z145), v236 = a131(a146), p236((i125((x236 = class extends e235 {
                constructor(...o434) {
                    super(...o434), this.TYPE = j230.RELATIVE, this._maxForce = y236 && y236(), this._maxTorque = z236 && z236(), this._correctionFactor = a237 && a237(), this._angularOffset = b237 && b237(), this._linearOffset = c237 && c237(), this._autoCalcOffset = d237 && d237();
                }
                get maxForce() {
                    return this._maxForce;
                }
                set maxForce(n434) {
                    this._maxForce = n434, this._joint && this._joint.setMaxForce(n434);
                }
                get maxTorque() {
                    return this._maxTorque;
                }
                set maxTorque(m434) {
                    this._maxTorque = m434, this._joint && this._joint.setMaxTorque(m434);
                }
                get correctionFactor() {
                    return this._correctionFactor;
                }
                set correctionFactor(l434) {
                    this._correctionFactor = l434, this._joint && this._joint.setCorrectionFactor(l434);
                }
                get linearOffset() {
                    return this._autoCalcOffset ? this.connectedBody ? s147.subtract(this._linearOffset, this.connectedBody.node.worldPosition, this.node.worldPosition) : s147.subtract(this._linearOffset, new s147(0, 0), this.node.worldPosition) : this._linearOffset;
                }
                set linearOffset(k434) {
                    this._linearOffset.set(k434), this._joint && this._joint.setLinearOffset(k434);
                }
                get angularOffset() {
                    return this._autoCalcOffset && (g147.toEuler(e237, this.node.worldRotation), this.connectedBody ? g147.toEuler(f237, this.connectedBody.node.worldRotation) : g147.toEuler(f237, new g147()), this._angularOffset = f237.z - e237.z), this._angularOffset;
                }
                set angularOffset(j434) {
                    this._angularOffset = j434, this._joint && this._joint.setAngularOffset(j434);
                }
                get autoCalcOffset() {
                    return this._autoCalcOffset;
                }
                set autoCalcOffset(i434) {
                    this._autoCalcOffset = i434;
                }
            }).prototype, "maxForce", [q236], Object.getOwnPropertyDescriptor(x236.prototype, "maxForce"), x236.prototype), i125(x236.prototype, "maxTorque", [r236], Object.getOwnPropertyDescriptor(x236.prototype, "maxTorque"), x236.prototype), i125(x236.prototype, "correctionFactor", [s236], Object.getOwnPropertyDescriptor(x236.prototype, "correctionFactor"), x236.prototype), i125(x236.prototype, "linearOffset", [t236], Object.getOwnPropertyDescriptor(x236.prototype, "linearOffset"), x236.prototype), i125(x236.prototype, "angularOffset", [u236], Object.getOwnPropertyDescriptor(x236.prototype, "angularOffset"), x236.prototype), i125(x236.prototype, "autoCalcOffset", [v236], Object.getOwnPropertyDescriptor(x236.prototype, "autoCalcOffset"), x236.prototype), y236 = p130(x236.prototype, "_maxForce", [j151], function () {
                return 5;
            }), z236 = p130(x236.prototype, "_maxTorque", [j151], function () {
                return .7;
            }), a237 = p130(x236.prototype, "_correctionFactor", [j151], function () {
                return .3;
            }), b237 = p130(x236.prototype, "_angularOffset", [j151], function () {
                return 0;
            }), c237 = p130(x236.prototype, "_linearOffset", [j151], function () {
                return new s147();
            }), d237 = p130(x236.prototype, "_autoCalcOffset", [j151], function () {
                return !0;
            }), w236 = x236)) || w236));
            const c238 = new s147(), { ccclass: d238, menu: e238, property: f238 } = k152;
            var g238, h238, i238, j238, k238, l238, m238;
            g125("SliderJoint2D", (j237 = d238("cc.SliderJoint2D"), k237 = a131(z145), l237 = a131(a146), m237 = a131(a146), n237 = a131(z145), o237 = a131(z145), p237 = a131(a146), q237 = a131(z145), r237 = a131(z145), j237((i125((t237 = class extends e235 {
                constructor(...h434) {
                    super(...h434), this.TYPE = j230.SLIDER, this._angle = u237 && u237(), this._autoCalcAngle = v237 && v237(), this._enableMotor = w237 && w237(), this._maxMotorForce = x237 && x237(), this._motorSpeed = y237 && y237(), this._enableLimit = z237 && z237(), this._lowerLimit = a238 && a238(), this._upperLimit = b238 && b238();
                }
                get angle() {
                    return this._autoCalcAngle && (this.connectedBody ? s147.subtract(c238, this.connectedBody.node.worldPosition, this.node.worldPosition) : s147.subtract(c238, new s147(0, 0), this.node.worldPosition), this._angle = b129(Math.atan2(c238.y, c238.x))), this._angle;
                }
                set angle(g434) {
                    this._angle = g434;
                }
                get autoCalcAngle() {
                    return this._autoCalcAngle;
                }
                set autoCalcAngle(f434) {
                    this._autoCalcAngle = f434;
                }
                get enableMotor() {
                    return this._enableMotor;
                }
                set enableMotor(e434) {
                    this._enableMotor = e434;
                }
                get maxMotorForce() {
                    return this._maxMotorForce;
                }
                set maxMotorForce(d434) {
                    this._maxMotorForce = d434, this._joint && this._joint.setMaxMotorForce(d434);
                }
                get motorSpeed() {
                    return this._motorSpeed;
                }
                set motorSpeed(c434) {
                    this._motorSpeed = c434, this._joint && this._joint.setMotorSpeed(c434);
                }
                get enableLimit() {
                    return this._enableLimit;
                }
                set enableLimit(b434) {
                    this._enableLimit = b434;
                }
                get lowerLimit() {
                    return this._lowerLimit;
                }
                set lowerLimit(a434) {
                    this._lowerLimit = a434, this._joint && this._joint.setLowerLimit(a434);
                }
                get upperLimit() {
                    return this._upperLimit;
                }
                set upperLimit(z433) {
                    this._upperLimit = z433, this._joint && this._joint.setUpperLimit(z433);
                }
            }).prototype, "angle", [k237], Object.getOwnPropertyDescriptor(t237.prototype, "angle"), t237.prototype), i125(t237.prototype, "autoCalcAngle", [l237], Object.getOwnPropertyDescriptor(t237.prototype, "autoCalcAngle"), t237.prototype), i125(t237.prototype, "enableMotor", [m237], Object.getOwnPropertyDescriptor(t237.prototype, "enableMotor"), t237.prototype), i125(t237.prototype, "maxMotorForce", [n237], Object.getOwnPropertyDescriptor(t237.prototype, "maxMotorForce"), t237.prototype), i125(t237.prototype, "motorSpeed", [o237], Object.getOwnPropertyDescriptor(t237.prototype, "motorSpeed"), t237.prototype), i125(t237.prototype, "enableLimit", [p237], Object.getOwnPropertyDescriptor(t237.prototype, "enableLimit"), t237.prototype), i125(t237.prototype, "lowerLimit", [q237], Object.getOwnPropertyDescriptor(t237.prototype, "lowerLimit"), t237.prototype), i125(t237.prototype, "upperLimit", [r237], Object.getOwnPropertyDescriptor(t237.prototype, "upperLimit"), t237.prototype), u237 = p130(t237.prototype, "_angle", [j151], function () {
                return 0;
            }), v237 = p130(t237.prototype, "_autoCalcAngle", [j151], function () {
                return !0;
            }), w237 = p130(t237.prototype, "_enableMotor", [j151], function () {
                return !1;
            }), x237 = p130(t237.prototype, "_maxMotorForce", [j151], function () {
                return 1e3;
            }), y237 = p130(t237.prototype, "_motorSpeed", [j151], function () {
                return 1e3;
            }), z237 = p130(t237.prototype, "_enableLimit", [j151], function () {
                return !1;
            }), a238 = p130(t237.prototype, "_lowerLimit", [j151], function () {
                return 0;
            }), b238 = p130(t237.prototype, "_upperLimit", [j151], function () {
                return 0;
            }), s237 = t237)) || s237));
            const { ccclass: n238, menu: o238, property: p238 } = k152;
            var q238, r238, s238, t238, u238, v238, w238, x238, y238, z238, a239, b239, c239, d239, e239;
            g125("FixedJoint2D", (g238 = n238("cc.FixedJoint2D"), h238 = a131(z145), i238 = a131(z145), g238((i125((k238 = class extends e235 {
                constructor(...y433) {
                    super(...y433), this.TYPE = j230.FIXED, this._frequency = l238 && l238(), this._dampingRatio = m238 && m238();
                }
                get frequency() {
                    return this._frequency;
                }
                set frequency(x433) {
                    this._frequency = x433, this._joint && this._joint.setFrequency(x433);
                }
                get dampingRatio() {
                    return this._dampingRatio;
                }
                set dampingRatio(w433) {
                    this._dampingRatio = w433, this._joint && this._joint.setDampingRatio(w433);
                }
            }).prototype, "frequency", [h238], Object.getOwnPropertyDescriptor(k238.prototype, "frequency"), k238.prototype), i125(k238.prototype, "dampingRatio", [i238], Object.getOwnPropertyDescriptor(k238.prototype, "dampingRatio"), k238.prototype), l238 = p130(k238.prototype, "_frequency", [j151], function () {
                return .7;
            }), m238 = p130(k238.prototype, "_dampingRatio", [j151], function () {
                return .5;
            }), j238 = k238)) || j238));
            const { ccclass: f239, menu: g239, property: h239 } = k152;
            var i239, j239, k239, l239, m239, n239, o239, p239, q239, r239, s239, t239, u239, v239, w239;
            g125("WheelJoint2D", (q238 = f239("cc.WheelJoint2D"), r238 = a131(z145), s238 = a131(a146), t238 = a131(z145), u238 = a131(z145), v238 = a131(z145), w238 = a131(z145), q238((i125((y238 = class extends e235 {
                constructor(...v433) {
                    super(...v433), this.TYPE = j230.WHEEL, this._angle = z238 && z238(), this._enableMotor = a239 && a239(), this._maxMotorTorque = b239 && b239(), this._motorSpeed = c239 && c239(), this._frequency = d239 && d239(), this._dampingRatio = e239 && e239();
                }
                get angle() {
                    return this._angle;
                }
                set angle(u433) {
                    this._angle = u433;
                }
                get enableMotor() {
                    return this._enableMotor;
                }
                set enableMotor(t433) {
                    this._enableMotor = t433, this._joint && this._joint.enableMotor(t433);
                }
                get maxMotorTorque() {
                    return this._maxMotorTorque;
                }
                set maxMotorTorque(s433) {
                    this._maxMotorTorque = s433, this._joint && this._joint.setMaxMotorTorque(s433);
                }
                get motorSpeed() {
                    return this._motorSpeed;
                }
                set motorSpeed(r433) {
                    this._motorSpeed = r433, this._joint && this._joint.setMotorSpeed(r433);
                }
                get frequency() {
                    return this._frequency;
                }
                set frequency(q433) {
                    this._frequency = q433, this._joint && this._joint.setFrequency(q433);
                }
                get dampingRatio() {
                    return this._dampingRatio;
                }
                set dampingRatio(p433) {
                    this._dampingRatio = p433, this._joint && this._joint.setDampingRatio(p433);
                }
            }).prototype, "angle", [r238], Object.getOwnPropertyDescriptor(y238.prototype, "angle"), y238.prototype), i125(y238.prototype, "enableMotor", [s238], Object.getOwnPropertyDescriptor(y238.prototype, "enableMotor"), y238.prototype), i125(y238.prototype, "maxMotorTorque", [t238], Object.getOwnPropertyDescriptor(y238.prototype, "maxMotorTorque"), y238.prototype), i125(y238.prototype, "motorSpeed", [u238], Object.getOwnPropertyDescriptor(y238.prototype, "motorSpeed"), y238.prototype), i125(y238.prototype, "frequency", [v238], Object.getOwnPropertyDescriptor(y238.prototype, "frequency"), y238.prototype), i125(y238.prototype, "dampingRatio", [w238], Object.getOwnPropertyDescriptor(y238.prototype, "dampingRatio"), y238.prototype), z238 = p130(y238.prototype, "_angle", [j151], function () {
                return 90;
            }), a239 = p130(y238.prototype, "_enableMotor", [j151], function () {
                return !1;
            }), b239 = p130(y238.prototype, "_maxMotorTorque", [j151], function () {
                return 1e3;
            }), c239 = p130(y238.prototype, "_motorSpeed", [j151], function () {
                return 0;
            }), d239 = p130(y238.prototype, "_frequency", [j151], function () {
                return 5;
            }), e239 = p130(y238.prototype, "_dampingRatio", [j151], function () {
                return .7;
            }), x238 = y238)) || x238));
            const { ccclass: x239, menu: y239, property: z239 } = k152;
            g125("HingeJoint2D", (i239 = x239("cc.HingeJoint2D"), j239 = a131(a146), k239 = a131(z145), l239 = a131(z145), m239 = a131(a146), n239 = a131(z145), o239 = a131(z145), i239((i125((q239 = class extends e235 {
                constructor(...o433) {
                    super(...o433), this.TYPE = j230.HINGE, this._enableLimit = r239 && r239(), this._lowerAngle = s239 && s239(), this._upperAngle = t239 && t239(), this._enableMotor = u239 && u239(), this._maxMotorTorque = v239 && v239(), this._motorSpeed = w239 && w239();
                }
                get enableLimit() {
                    return this._enableLimit;
                }
                set enableLimit(n433) {
                    this._enableLimit = n433;
                }
                get lowerAngle() {
                    return this._lowerAngle;
                }
                set lowerAngle(m433) {
                    this._lowerAngle = m433, this._joint && this._joint.setLowerAngle(m433);
                }
                get upperAngle() {
                    return this._upperAngle;
                }
                set upperAngle(l433) {
                    this._upperAngle = l433, this._joint && this._joint.setUpperAngle(l433);
                }
                get enableMotor() {
                    return this._enableMotor;
                }
                set enableMotor(k433) {
                    this._enableMotor = k433, this._joint && this._joint.enableMotor(k433);
                }
                get maxMotorTorque() {
                    return this._maxMotorTorque;
                }
                set maxMotorTorque(j433) {
                    this._maxMotorTorque = j433, this._joint && this._joint.setMaxMotorTorque(j433);
                }
                get motorSpeed() {
                    return this._motorSpeed;
                }
                set motorSpeed(i433) {
                    this._motorSpeed = i433, this._joint && this._joint.setMotorSpeed(i433);
                }
            }).prototype, "enableLimit", [j239], Object.getOwnPropertyDescriptor(q239.prototype, "enableLimit"), q239.prototype), i125(q239.prototype, "lowerAngle", [k239], Object.getOwnPropertyDescriptor(q239.prototype, "lowerAngle"), q239.prototype), i125(q239.prototype, "upperAngle", [l239], Object.getOwnPropertyDescriptor(q239.prototype, "upperAngle"), q239.prototype), i125(q239.prototype, "enableMotor", [m239], Object.getOwnPropertyDescriptor(q239.prototype, "enableMotor"), q239.prototype), i125(q239.prototype, "maxMotorTorque", [n239], Object.getOwnPropertyDescriptor(q239.prototype, "maxMotorTorque"), q239.prototype), i125(q239.prototype, "motorSpeed", [o239], Object.getOwnPropertyDescriptor(q239.prototype, "motorSpeed"), q239.prototype), r239 = p130(q239.prototype, "_enableLimit", [j151], function () {
                return !1;
            }), s239 = p130(q239.prototype, "_lowerAngle", [j151], function () {
                return 0;
            }), t239 = p130(q239.prototype, "_upperAngle", [j151], function () {
                return 0;
            }), u239 = p130(q239.prototype, "_enableMotor", [j151], function () {
                return !1;
            }), v239 = p130(q239.prototype, "_maxMotorTorque", [j151], function () {
                return 1e3;
            }), w239 = p130(q239.prototype, "_motorSpeed", [j151], function () {
                return 0;
            }), p239 = q239)) || p239)), g125("Physics2DUtils", {
                PolygonSeparator: c231,
                PolygonPartition: e231
            }), s143.internal.physics2d = {
                selector: p230
            };
            class a240 extends z230.RayCastCallback {
                constructor(...h433) {
                    super(...h433), this._type = l230.Closest, this._fixtures = [], this._points = [], this._normals = [], this._fractions = [], this._mask = 4294967295;
                }
                init(f433, g433) {
                    this._type = f433, this._mask = g433, this._fixtures.length = 0, this._points.length = 0, this._normals.length = 0, this._fractions.length = 0;
                }
                ReportFixture(b433, c433, d433, e433) {
                    return 0 == (b433.GetFilterData().categoryBits & this._mask) ? 0 : this._type === l230.Closest ? (this._fixtures[0] = b433, this._points[0] = c433, this._normals[0] = d433, this._fractions[0] = e433, e433) : (this._fixtures.push(b433), this._points.push(new s147(c433.x, c433.y)), this._normals.push(new s147(d433.x, d433.y)), this._fractions.push(e433), this._type === l230.Any ? 0 : this._type >= l230.All ? 1 : e433);
                }
                getFixtures() {
                    return this._fixtures;
                }
                getPoints() {
                    return this._points;
                }
                getNormals() {
                    return this._normals;
                }
                getFractions() {
                    return this._fractions;
                }
            }
            const b240 = [], c240 = [new s147(), new s147()], d240 = new z230.WorldManifold(), e240 = {
                points: [],
                separations: [],
                normal: new s147()
            };
            class f240 {
                constructor() {
                    this.localPoint = new s147(), this.normalImpulse = 0, this.tangentImpulse = 0;
                }
            }
            const g240 = [new f240(), new f240()], h240 = {
                type: 0,
                localPoint: new s147(),
                localNormal: new s147(),
                points: []
            }, i240 = {
                normalImpulses: [],
                tangentImpulses: []
            };
            class j240 {
                constructor() {
                    this.colliderA = null, this.colliderB = null, this.disabled = !1, this.disabledOnce = !1, this._impulse = null, this._inverted = !1, this._b2contact = null;
                }
                static get(z432) {
                    let a433 = b240.pop();
                    return a433 || (a433 = new j240()), a433.init(z432), a433;
                }
                static put(x432) {
                    const y432 = x432.m_userData;
                    y432 && (b240.push(y432), y432.reset());
                }
                _setImpulse(w432) {
                    this._impulse = w432;
                }
                init(v432) {
                    this.colliderA = v432.m_fixtureA.m_userData.collider, this.colliderB = v432.m_fixtureB.m_userData.collider, this.disabled = !1, this.disabledOnce = !1, this._impulse = null, this._inverted = !1, this._b2contact = v432, v432.m_userData = this;
                }
                reset() {
                    this.setTangentSpeed(0), this.resetFriction(), this.resetRestitution(), this.colliderA = null, this.colliderB = null, this.disabled = !1, this._impulse = null, this._b2contact.m_userData = null, this._b2contact = null;
                }
                getWorldManifold() {
                    const n432 = e240.points, o432 = e240.separations, p432 = e240.normal;
                    this._b2contact.GetWorldManifold(d240);
                    const q432 = d240.points, r432 = d240.separations, s432 = this._b2contact.GetManifold().pointCount;
                    n432.length = o432.length = s432;
                    for (let t432 = 0; t432 < s432; t432++) {
                        const u432 = c240[t432];
                        u432.x = q432[t432].x * o230, u432.y = q432[t432].y * o230, n432[t432] = u432, o432[t432] = r432[t432] * o230;
                    }
                    return p432.x = d240.normal.x, p432.y = d240.normal.y, this._inverted && (p432.x *= -1, p432.y *= -1), e240;
                }
                getManifold() {
                    const e432 = h240.points, f432 = h240.localNormal, g432 = h240.localPoint, h432 = this._b2contact.GetManifold(), i432 = h432.points, j432 = e432.length = h432.pointCount;
                    for (let k432 = 0; k432 < j432; k432++) {
                        const l432 = g240[k432], m432 = i432[k432];
                        l432.localPoint.x = m432.localPoint.x * o230, l432.localPoint.y = m432.localPoint.y * o230, l432.normalImpulse = m432.normalImpulse * o230, l432.tangentImpulse = m432.tangentImpulse, e432[k432] = l432;
                    }
                    return g432.x = h432.localPoint.x * o230, g432.y = h432.localPoint.y * o230, f432.x = h432.localNormal.x, f432.y = h432.localNormal.y, h240.type = h432.type, this._inverted && (f432.x *= -1, f432.y *= -1), h240;
                }
                getImpulse() {
                    const z431 = this._impulse;
                    if (!z431)
                        return null;
                    const a432 = i240.normalImpulses, b432 = i240.tangentImpulses, c432 = z431.count;
                    for (let d432 = 0; d432 < c432; d432++)
                        a432[d432] = z431.normalImpulses[d432] * o230, b432[d432] = z431.tangentImpulses[d432];
                    return b432.length = a432.length = c432, i240;
                }
                emit(u431) {
                    switch (u431) {
                        case m230.BEGIN_CONTACT:
                        case m230.END_CONTACT:
                        case m230.PRE_SOLVE:
                        case m230.POST_SOLVE:
                    }
                    const v431 = this.colliderA, w431 = this.colliderB, x431 = v431.body, y431 = w431.body;
                    x431.enabledContactListener && (null == v431 || v431.emit(u431, v431, w431, this)), y431.enabledContactListener && (null == w431 || w431.emit(u431, w431, v431, this)), (x431.enabledContactListener || y431.enabledContactListener) && t231.instance.emit(u431, v431, w431, this), (this.disabled || this.disabledOnce) && (this.setEnabled(!1), this.disabledOnce = !1);
                }
                setEnabled(t431) {
                    this._b2contact.SetEnabled(t431);
                }
                isTouching() {
                    return this._b2contact.IsTouching();
                }
                setTangentSpeed(s431) {
                    this._b2contact.SetTangentSpeed(s431);
                }
                getTangentSpeed() {
                    return this._b2contact.GetTangentSpeed();
                }
                setFriction(r431) {
                    this._b2contact.SetFriction(r431);
                }
                getFriction() {
                    return this._b2contact.GetFriction();
                }
                resetFriction() {
                    return this._b2contact.ResetFriction();
                }
                setRestitution(q431) {
                    this._b2contact.SetRestitution(q431);
                }
                getRestitution() {
                    return this._b2contact.GetRestitution();
                }
                resetRestitution() {
                    return this._b2contact.ResetRestitution();
                }
            }
            const k240 = new z230.Vec2(), l240 = new a147(), m240 = a147.GREEN, n240 = a147.RED;
            class o240 extends z230.Draw {
                constructor(p431) {
                    super(), this._drawer = null, this._xf = new z230.Transform(), this._dxf = new z230.Transform(), this._drawer = p431;
                }
                _DrawPolygon(j431, k431) {
                    const l431 = this._drawer;
                    for (let m431 = 0; m431 < k431; m431++) {
                        z230.Transform.MulXV(this._xf, j431[m431], k240);
                        const n431 = k240.x * o230, o431 = k240.y * o230;
                        0 === m431 ? l431.moveTo(n431, o431) : l431.lineTo(n431, o431);
                    }
                    l431.close();
                }
                DrawPolygon(g431, h431, i431) {
                    this._applyStrokeColor(i431), this._DrawPolygon(g431, h431), this._drawer.stroke();
                }
                DrawSolidPolygon(d431, e431, f431) {
                    this._applyFillColor(f431), this._DrawPolygon(d431, e431), this._drawer.fill(), this._drawer.stroke();
                }
                _DrawCircle(b431, c431) {
                    z230.Transform.MulXV(this._xf, b431, k240), this._drawer.circle(k240.x * o230, k240.y * o230, c431 * o230);
                }
                DrawCircle(y430, z430, a431) {
                    this._applyStrokeColor(a431), this._DrawCircle(y430, z430), this._drawer.stroke();
                }
                DrawSolidCircle(u430, v430, w430, x430) {
                    this._applyFillColor(x430), this._DrawCircle(u430, v430), this._drawer.fill();
                }
                DrawSegment(q430, r430, s430) {
                    const t430 = this._drawer;
                    if (q430.x === r430.x && q430.y === r430.y)
                        return this._applyFillColor(s430), this._DrawCircle(q430, 2 / o230), void t430.fill();
                    this._applyStrokeColor(s430), z230.Transform.MulXV(this._xf, q430, k240), t430.moveTo(k240.x * o230, k240.y * o230), z230.Transform.MulXV(this._xf, r430, k240), t430.lineTo(k240.x * o230, k240.y * o230), t430.stroke();
                }
                DrawTransform(o430) {
                    const p430 = this._drawer;
                    p430.strokeColor = n240, k240.x = k240.y = 0, z230.Transform.MulXV(o430, k240, k240), p430.moveTo(k240.x * o230, k240.y * o230), k240.x = 1, k240.y = 0, z230.Transform.MulXV(o430, k240, k240), p430.lineTo(k240.x * o230, k240.y * o230), p430.stroke(), p430.strokeColor = m240, k240.x = k240.y = 0, z230.Transform.MulXV(o430, k240, k240), p430.moveTo(k240.x * o230, k240.y * o230), k240.x = 0, k240.y = 1, z230.Transform.MulXV(o430, k240, k240), p430.lineTo(k240.x * o230, k240.y * o230), p430.stroke();
                }
                DrawPoint(l430, m430, n430) { }
                DrawParticles() { }
                _applyStrokeColor(k430) {
                    this._drawer.strokeColor = l240.set(255 * k430.r, 255 * k430.g, 255 * k430.b, 150);
                }
                _applyFillColor(j430) {
                    this._drawer.fillColor = l240.set(255 * j430.r, 255 * j430.g, 255 * j430.b, 150);
                }
                PushTransform(i430) {
                    this._xf = i430;
                }
                PopTransform() {
                    this._xf = this._dxf;
                }
            }
            const p240 = new w146(), q240 = new s147(), r240 = new s147(), s240 = new z230.BodyDef(), t240 = new z230.AABB(), u240 = [];
            class v240 {
                get impl() {
                    return this._world;
                }
                get groundBodyImpl() {
                    return this._physicsGroundBody;
                }
                constructor() {
                    this._world = void 0, this._bodies = [], this._animatedBodies = [], this._rotationAxis = new w146(), this._physicsGroundBody = void 0, this._contactListener = void 0, this._aabbQueryCallback = void 0, this._raycastQueryCallback = void 0, this._debugGraphics = null, this._b2DebugDrawer = null, this._debugDrawFlags = 0, this._world = new z230.World(new z230.Vec2(0, -10));
                    const g430 = new z230.BodyDef();
                    this._physicsGroundBody = this._world.CreateBody(g430);
                    const h430 = new a231();
                    h430.setBeginContact(this._onBeginContact), h430.setEndContact(this._onEndContact), h430.setPreSolve(this._onPreSolve), h430.setPostSolve(this._onPostSolve), this._world.SetContactListener(h430), this._contactListener = h430, this._aabbQueryCallback = new b231(), this._raycastQueryCallback = new a240();
                }
                get debugDrawFlags() {
                    return this._debugDrawFlags;
                }
                set debugDrawFlags(f430) {
                    f430 || this._debugGraphics && (this._debugGraphics.node.parent = null), this._debugDrawFlags = f430;
                }
                _checkDebugDrawValid() {
                    if (!this._debugGraphics || !this._debugGraphics.isValid) {
                        let b430 = x135("Canvas");
                        if (!b430) {
                            const e430 = t185.getScene();
                            if (!e430)
                                return;
                            b430 = new h175("Canvas"), b430.addComponent("cc.Canvas"), b430.parent = e430;
                        }
                        const c430 = new h175("PHYSICS_2D_DEBUG_DRAW");
                        c430.hideFlags |= m152.Flags.DontSave, c430.parent = b430, c430.worldPosition = w146.ZERO, c430.layer = w168.Enum.UI_2D, this._debugGraphics = c430.addComponent("cc.Graphics"), this._debugGraphics.lineWidth = 3;
                        const d430 = new o240(this._debugGraphics);
                        this._b2DebugDrawer = d430, this._world.SetDebugDraw(d430);
                    }
                    const a430 = this._debugGraphics.node.parent;
                    this._debugGraphics.node.setSiblingIndex(a430.children.length - 1), this._b2DebugDrawer && this._b2DebugDrawer.SetFlags(this.debugDrawFlags);
                }
                setGravity(z429) {
                    this._world.SetGravity(z429);
                }
                setAllowSleep(y429) {
                    this._world.SetAllowSleeping(!0);
                }
                step(s429, t429 = 10, u429 = 10) {
                    const v429 = this._animatedBodies;
                    for (let w429 = 0, x429 = v429.length; w429 < x429; w429++)
                        v429[w429].animate(s429);
                    this._world.Step(s429, t429, u429);
                }
                raycast(b429, c429, d429, e429) {
                    if (b429.equals(c429))
                        return [];
                    d429 = d429 || l230.Closest, q240.x = b429.x / o230, q240.y = b429.y / o230, r240.x = c429.x / o230, r240.y = c429.y / o230;
                    const f429 = this._raycastQueryCallback;
                    f429.init(d429, e429), this._world.RayCast(f429, q240, r240);
                    const g429 = f429.getFixtures();
                    if (g429.length > 0) {
                        const h429 = f429.getPoints(), i429 = f429.getNormals(), j429 = f429.getFractions(), k429 = [];
                        for (let l429 = 0, m429 = g429.length; l429 < m429; l429++) {
                            const n429 = g429[l429], o429 = n429.m_userData, p429 = o429.collider;
                            if (d429 === l230.AllClosest) {
                                let q429;
                                for (let r429 = 0; r429 < k429.length; r429++)
                                    k429[r429].collider === p429 && (q429 = k429[r429]);
                                if (q429) {
                                    j429[l429] < q429.fraction && (q429.fixtureIndex = o429.getFixtureIndex(n429), q429.point.x = h429[l429].x * o230, q429.point.y = h429[l429].y * o230, q429.normal.x = i429[l429].x, q429.normal.y = i429[l429].y, q429.fraction = j429[l429]);
                                    continue;
                                }
                            }
                            k429.push({
                                collider: p429,
                                fixtureIndex: o429.getFixtureIndex(n429),
                                point: new s147(h429[l429].x * o230, h429[l429].y * o230),
                                normal: new s147(i429[l429].x, i429[l429].y),
                                fraction: j429[l429]
                            });
                        }
                        return k429;
                    }
                    return [];
                }
                syncPhysicsToScene() {
                    const s428 = this._bodies;
                    for (let t428 = 0, u428 = s428.length; t428 < u428; t428++) {
                        const v428 = s428[t428], w428 = v428.rigidBody;
                        if (w428.type === h230.Animated) {
                            v428.resetVelocity();
                            continue;
                        }
                        const x428 = w428.node, y428 = v428.impl, z428 = y428.GetPosition();
                        p240.x = z428.x * o230, p240.y = z428.y * o230, p240.z = 0, x428.worldPosition = p240;
                        const a429 = b129(y428.GetAngle());
                        x428.setWorldRotationFromEuler(0, 0, a429);
                    }
                }
                syncSceneToPhysics() {
                    const q428 = this._bodies;
                    for (let r428 = 0; r428 < q428.length; r428++)
                        q428[r428].syncSceneToPhysics();
                }
                addBody(i428) {
                    if (this._bodies.includes(i428))
                        return;
                    const j428 = s240, k428 = i428.rigidBody;
                    j428.allowSleep = k428.allowSleep, j428.gravityScale = k428.gravityScale, j428.linearDamping = k428.linearDamping, j428.angularDamping = k428.angularDamping, j428.fixedRotation = k428.fixedRotation, j428.bullet = k428.bullet;
                    const l428 = k428.node, m428 = l428.worldPosition;
                    j428.position.Set(m428.x / o230, m428.y / o230), p240.z = g147.getAxisAngle(this._rotationAxis, l428.worldRotation), this._rotationAxis.z < 0 && (p240.z = 2 * Math.PI - p240.z), j428.angle = p240.z, j428.awake = k428.awakeOnLoad, k428.type === h230.Animated ? (j428.type = h230.Kinematic, this._animatedBodies.push(i428), i428._animatedPos.set(j428.position.x, j428.position.y), i428._animatedAngle = j428.angle) : j428.type = k428.type;
                    const n428 = k428, o428 = n428._linearVelocity;
                    j428.linearVelocity.Set(o428.x, o428.y), j428.angularVelocity = a129(n428._angularVelocity);
                    const p428 = this._world.CreateBody(j428);
                    p428.m_userData = i428, i428._imp = p428, this._bodies.push(i428);
                }
                removeBody(h428) {
                    this._bodies.includes(h428) && (h428.impl && (h428.impl.m_userData = null, this._world.DestroyBody(h428.impl), h428._imp = null), j127(this._bodies, h428), h428.rigidBody.type === h230.Animated && j127(this._animatedBodies, h428));
                }
                registerContactFixture(g428) {
                    this._contactListener.registerContactFixture(g428);
                }
                unregisterContactFixture(f428) {
                    this._contactListener.unregisterContactFixture(f428);
                }
                testPoint(x427) {
                    const y427 = q240.x = x427.x / o230, z427 = q240.y = x427.y / o230, a428 = .2 / o230;
                    t240.lowerBound.x = y427 - a428, t240.lowerBound.y = z427 - a428, t240.upperBound.x = y427 + a428, t240.upperBound.y = z427 + a428;
                    const b428 = this._aabbQueryCallback;
                    b428.init(q240), this._world.QueryAABB(b428, t240);
                    const c428 = b428.getFixtures();
                    u240.length = 0;
                    for (let d428 = 0; d428 < c428.length; d428++) {
                        const e428 = c428[d428].m_userData.collider;
                        u240.includes(e428) || u240.push(e428);
                    }
                    return u240;
                }
                testAABB(s427) {
                    t240.lowerBound.x = s427.xMin / o230, t240.lowerBound.y = s427.yMin / o230, t240.upperBound.x = s427.xMax / o230, t240.upperBound.y = s427.yMax / o230;
                    const t427 = this._aabbQueryCallback;
                    t427.init(), this._world.QueryAABB(t427, t240);
                    const u427 = t427.getFixtures();
                    u240.length = 0;
                    for (let v427 = 0; v427 < u427.length; v427++) {
                        const w427 = u427[v427].m_userData.collider;
                        u240.includes(w427) || u240.push(w427);
                    }
                    return u240;
                }
                drawDebug() {
                    this._checkDebugDrawValid(), this._debugGraphics && (this._debugGraphics.clear(), this._world.DrawDebugData());
                }
                _onBeginContact(r427) {
                    j240.get(r427).emit(m230.BEGIN_CONTACT);
                }
                _onEndContact(p427) {
                    const q427 = p427.m_userData;
                    q427 && (q427.emit(m230.END_CONTACT), j240.put(p427));
                }
                _onPreSolve(n427) {
                    const o427 = n427.m_userData;
                    o427 && o427.emit(m230.PRE_SOLVE);
                }
                _onPostSolve(k427, l427) {
                    const m427 = k427.m_userData;
                    m427 && (m427._setImpulse(l427), m427.emit(m230.POST_SOLVE), m427._setImpulse(null));
                }
            }
            const w240 = new w146(), x240 = new z230.Vec2();
            class y240 {
                constructor() {
                    this._animatedPos = new s147(), this._animatedAngle = 0, this._body = null, this._rigidBody = void 0, this._inited = !1;
                }
                get impl() {
                    return this._body;
                }
                set _imp(j427) {
                    this._body = j427;
                }
                get rigidBody() {
                    return this._rigidBody;
                }
                get isAwake() {
                    return this._body.IsAwake();
                }
                get isSleeping() {
                    return !this._body.IsAwake();
                }
                initialize(i427) {
                    this._rigidBody = i427, t231.instance._callAfterStep(this, this._init);
                }
                onDestroy() {
                    t231.instance._callAfterStep(this, this._destroy);
                }
                onEnable() {
                    this.setActive(!0);
                }
                onDisable() {
                    this.setActive(!1);
                }
                nodeTransformChanged(f427) {
                    if (!t231.instance.stepping) {
                        if (f427 & h175.TransformBit.SCALE) {
                            const g427 = this.rigidBody.getComponents(s233);
                            for (let h427 = 0; h427 < g427.length; h427++)
                                g427[h427].apply();
                        }
                        f427 & h175.TransformBit.POSITION && this.syncPositionToPhysics(!0), f427 & h175.TransformBit.ROTATION && this.syncRotationToPhysics(!0);
                    }
                }
                _init() {
                    this._inited || (t231.instance.physicsWorld.addBody(this), this.setActive(!1), this._inited = !0);
                }
                _destroy() {
                    this._inited && (t231.instance.physicsWorld.removeBody(this), this._inited = !1);
                }
                animate(z426) {
                    const a427 = this._body;
                    if (!a427)
                        return;
                    const b427 = a427.GetPosition();
                    a427.SetAwake(!0);
                    const c427 = 1 / z426;
                    x240.x = (this._animatedPos.x - b427.x) * c427, x240.y = (this._animatedPos.y - b427.y) * c427, a427.SetLinearVelocity(x240);
                    let d427 = a427.GetAngle() % p146;
                    d427 > Math.PI && (d427 -= p146);
                    let e427 = (this._animatedAngle - d427) * c427;
                    this._animatedAngle < -o146 && d427 > o146 && (e427 = (this._animatedAngle + p146 - d427) * c427), this._animatedAngle > o146 && d427 < -o146 && (e427 = (this._animatedAngle - p146 - d427) * c427), a427.SetAngularVelocity(e427);
                }
                syncSceneToPhysics() {
                    const y426 = this._rigidBody.node.hasChangedFlags;
                    y426 && this.nodeTransformChanged(y426);
                }
                syncPositionToPhysics(t426 = !1) {
                    const u426 = this._body;
                    if (!u426)
                        return;
                    const v426 = this._rigidBody.node.worldPosition;
                    let w426;
                    const x426 = this._rigidBody.type;
                    w426 = x426 === h230.Animated ? u426.GetLinearVelocity() : u426.GetPosition(), w426.x = v426.x / o230, w426.y = v426.y / o230, x426 === h230.Animated && t426 ? this._animatedPos.set(w426.x, w426.y) : u426.SetTransformVec(w426, u426.GetAngle());
                }
                syncRotationToPhysics(o426 = !1) {
                    const p426 = this._body;
                    if (!p426)
                        return;
                    const q426 = this._rigidBody.node.worldRotation, r426 = w240;
                    g147.toEulerInYXZOrder(r426, q426);
                    const s426 = a129(r426.z);
                    this._rigidBody.type === h230.Animated && o426 ? this._animatedAngle = s426 : p426.SetTransformVec(p426.GetPosition(), s426);
                }
                resetVelocity() {
                    const m426 = this._body;
                    if (!m426)
                        return;
                    const n426 = m426.m_linearVelocity;
                    n426.Set(0, 0), m426.SetLinearVelocity(n426), m426.SetAngularVelocity(0);
                }
                setType(l426) {
                    this._body.SetType(l426);
                }
                setLinearDamping(k426) {
                    this._body.SetLinearDamping(k426);
                }
                setAngularDamping(j426) {
                    this._body.SetAngularDamping(j426);
                }
                setGravityScale(i426) {
                    this._body.SetGravityScale(i426);
                }
                setFixedRotation(h426) {
                    this._body.SetFixedRotation(h426);
                }
                setAllowSleep(g426) {
                    this._body.SetSleepingAllowed(g426);
                }
                isActive() {
                    return this._body.IsActive();
                }
                setActive(f426) {
                    this._body.SetActive(f426);
                }
                wakeUp() {
                    this._body.SetAwake(!0);
                }
                sleep() {
                    this._body.SetAwake(!1);
                }
                getMass() {
                    return this._body.GetMass();
                }
                setLinearVelocity(e426) {
                    this._body.SetLinearVelocity(e426);
                }
                getLinearVelocity(c426) {
                    const d426 = this._body.GetLinearVelocity();
                    return c426.x = d426.x, c426.y = d426.y, c426;
                }
                getLinearVelocityFromWorldPoint(a426, b426) {
                    return x240.Set(a426.x / o230, a426.y / o230), this._body.GetLinearVelocityFromWorldPoint(x240, b426), b426.x *= o230, b426.y *= o230, b426;
                }
                setAngularVelocity(z425) {
                    this._body.SetAngularVelocity(z425);
                }
                getAngularVelocity() {
                    return b129(this._body.GetAngularVelocity());
                }
                getLocalVector(x425, y425) {
                    return y425 = y425 || new s147(), x240.Set(x425.x / o230, x425.y / o230), this._body.GetLocalVector(x240, y425), y425.x *= o230, y425.y *= o230, y425;
                }
                getWorldVector(v425, w425) {
                    return x240.Set(v425.x / o230, v425.y / o230), this._body.GetWorldVector(x240, w425), w425.x *= o230, w425.y *= o230, w425;
                }
                getLocalPoint(t425, u425) {
                    return u425 = u425 || new s147(), x240.Set(t425.x / o230, t425.y / o230), this._body.GetLocalPoint(x240, u425), u425.x *= o230, u425.y *= o230, u425;
                }
                getWorldPoint(r425, s425) {
                    return s425 = s425 || new s147(), x240.Set(r425.x / o230, r425.y / o230), this._body.GetWorldPoint(x240, s425), s425.x *= o230, s425.y *= o230, s425;
                }
                getLocalCenter(p425) {
                    p425 = p425 || new s147();
                    const q425 = this._body.GetLocalCenter();
                    return p425.x = q425.x * o230, p425.y = q425.y * o230, p425;
                }
                getWorldCenter(n425) {
                    n425 = n425 || new s147();
                    const o425 = this._body.GetWorldCenter();
                    return n425.x = o425.x * o230, n425.y = o425.y * o230, n425;
                }
                getInertia() {
                    return this._body.GetInertia();
                }
                applyForce(k425, l425, m425) {
                    this._body && (x240.Set(l425.x / o230, l425.y / o230), this._body.ApplyForce(k425, x240, m425));
                }
                applyForceToCenter(i425, j425) {
                    this._body && this._body.ApplyForceToCenter(i425, j425);
                }
                applyTorque(g425, h425) {
                    this._body && this._body.ApplyTorque(g425, h425);
                }
                applyLinearImpulse(d425, e425, f425) {
                    this._body && (x240.Set(e425.x / o230, e425.y / o230), this._body.ApplyLinearImpulse(d425, x240, f425));
                }
                applyLinearImpulseToCenter(b425, c425) {
                    this._body && this._body.ApplyLinearImpulse(b425, this._body.GetPosition(), c425);
                }
                applyAngularImpulse(z424, a425) {
                    this._body && this._body.ApplyAngularImpulse(z424, a425);
                }
            }
            const z240 = new z230.Filter(), a241 = new z230.Vec2(), b241 = new z230.Vec2();
            function q142(x424) {
                const y424 = x424.collider;
                return y424.body ? z240.categoryBits = y424.group === o231.DEFAULT ? y424.body.group : y424.group : z240.categoryBits = y424.group, z240.maskBits = t231.instance.collisionMatrix[z240.categoryBits], z240;
            }
            class c241 {
                constructor() {
                    this._shapes = [], this._fixtures = [], this._collider = null, this._body = null, this._inited = !1, this._rect = new y147();
                }
                get impl() {
                    return this._shapes;
                }
                get collider() {
                    return this._collider;
                }
                initialize(w424) {
                    this._collider = w424;
                }
                onLoad() { }
                onEnable() {
                    t231.instance._callAfterStep(this, this._init);
                }
                onDisable() {
                    t231.instance._callAfterStep(this, this._destroy);
                }
                start() { }
                onGroupChanged() {
                    const t424 = q142(this);
                    this._fixtures.forEach(v424 => {
                        v424.SetFilterData(t424);
                    });
                }
                apply() {
                    this._destroy(), this.collider.enabledInHierarchy && this._init();
                }
                get worldAABB() {
                    const h424 = 1e7;
                    let i424 = h424, j424 = h424, k424 = -h424, l424 = -h424;
                    const m424 = this._fixtures;
                    for (let o424 = 0; o424 < m424.length; o424++) {
                        const p424 = m424[o424], q424 = p424.GetShape().GetChildCount();
                        for (let r424 = 0; r424 < q424; r424++) {
                            if (a241.Copy(p424.GetAABB(r424).lowerBound), b241.Copy(p424.GetAABB(r424).upperBound), 2 === p424.GetShape().m_type) {
                                const s424 = p424.GetShape().m_radius;
                                a241.SelfAddXY(s424, s424), b241.SelfSubXY(s424, s424);
                            }
                            a241.x < i424 && (i424 = a241.x), a241.y < j424 && (j424 = a241.y), b241.x > k424 && (k424 = b241.x), b241.y > l424 && (l424 = b241.y);
                        }
                    }
                    i424 *= o230, j424 *= o230, k424 *= o230, l424 *= o230;
                    const n424 = this._rect;
                    return n424.x = i424, n424.y = j424, n424.width = k424 - i424, n424.height = l424 - j424, n424;
                }
                getFixtureIndex(g424) {
                    return this._fixtures.indexOf(g424);
                }
                _createShapes(c424, d424, e424, f424) {
                    return [];
                }
                _init() {
                    if (this._inited)
                        return;
                    const s423 = this.collider, t423 = s423.node.worldScale;
                    let u423 = w146.ZERO;
                    const v423 = s423.getComponent(w232);
                    v423 && v423.impl && v423.impl.impl ? this._body = v423.impl.impl : (this._body = t231.instance.physicsWorld.groundBodyImpl, u423 = s423.node.worldPosition);
                    const w423 = 0 === t423.x && 0 === t423.y ? [] : this._createShapes(t423.x, t423.y, u423.x, u423.y), x423 = q142(this);
                    for (let y423 = 0; y423 < w423.length; y423++) {
                        const z423 = w423[y423], a424 = {
                            density: s423.density,
                            isSensor: s423.sensor,
                            friction: s423.friction,
                            restitution: s423.restitution,
                            shape: z423,
                            filter: x423
                        }, b424 = this._body.CreateFixture(a424);
                        b424.m_userData = this, null != v423 && v423.enabledContactListener && t231.instance.physicsWorld.registerContactFixture(b424), this._shapes.push(z423), this._fixtures.push(b424);
                    }
                    this._inited = !0;
                }
                _destroy() {
                    if (!this._inited)
                        return;
                    const o423 = this._fixtures, p423 = this._body;
                    for (let q423 = o423.length - 1; q423 >= 0; q423--) {
                        const r423 = o423[q423];
                        r423.m_userData = null, t231.instance.physicsWorld.unregisterContactFixture(r423), p423 && p423.DestroyFixture(r423);
                    }
                    this._body = null, this._fixtures.length = 0, this._shapes.length = 0, this._inited = !1;
                }
            }
            const d241 = new y147();
            class e241 extends c241 {
                constructor(...n423) {
                    super(...n423), this._worldPoints = [new s147(), new s147(), new s147(), new s147()];
                }
                get worldPoints() {
                    const e423 = d241, f423 = this.collider, g423 = f423.size, h423 = f423.offset;
                    e423.x = h423.x - g423.width / 2, e423.y = h423.y - g423.height / 2, e423.width = g423.width, e423.height = g423.height;
                    const i423 = this._worldPoints, j423 = i423[0], k423 = i423[1], l423 = i423[2], m423 = i423[3];
                    return e423.transformMat4ToPoints(f423.node.worldMatrix, j423, k423, l423, m423), i423;
                }
                _createShapes(u422, v422, w422, x422) {
                    u422 = Math.abs(u422), v422 = Math.abs(v422);
                    const y422 = this.collider, z422 = y422.size.width / 2 / o230 * u422, a423 = y422.size.height / 2 / o230 * v422, b423 = (w422 + y422.offset.x * u422) / o230, c423 = (x422 + y422.offset.y * v422) / o230, d423 = new z230.PolygonShape();
                    return d423.SetAsBox(z422, a423, new z230.Vec2(b423, c423), 0), [d423];
                }
            }
            class f241 extends c241 {
                constructor(...t422) {
                    super(...t422), this._worldPosition = new s147();
                }
                get worldRadius() {
                    return this._shapes[0].m_radius * o230;
                }
                get worldPosition() {
                    const s422 = this._shapes[0].m_p;
                    return this._worldPosition.set(s422.x * o230, s422.y * o230);
                }
                _createShapes(k422, l422, m422, n422) {
                    k422 = Math.abs(k422), l422 = Math.abs(l422);
                    const o422 = this.collider, p422 = (m422 + o422.offset.x * k422) / o230, q422 = (n422 + o422.offset.y * l422) / o230, r422 = new z230.CircleShape();
                    return r422.m_radius = o422.radius / o230 * k422, r422.m_p.Set(p422, q422), [r422];
                }
            }
            class g241 extends c241 {
                constructor(...j422) {
                    super(...j422), this._worldPoints = [];
                }
                get worldPoints() {
                    const e422 = this.collider, f422 = e422.points, g422 = this._worldPoints, h422 = e422.node.worldMatrix;
                    for (let i422 = 0; i422 < f422.length; i422++)
                        g422[i422] || (g422[i422] = new s147()), s147.transformMat4(g422[i422], f422[i422], h422);
                    return g422.length = f422.length, this._worldPoints;
                }
                _createShapes(k421, l421, m421, n421) {
                    const o421 = [], p421 = this.collider, q421 = p421.points;
                    q421.length > 0 && q421[0].equals(q421[q421.length - 1]) && (q421.length -= 1);
                    const r421 = j142(q421);
                    if (!r421)
                        return console.log("[Physics2D] b2PolygonShape failed to decompose polygon into convex polygons, node name: ", p421.node.name), o421;
                    const s421 = p421.offset;
                    for (let t421 = 0; t421 < r421.length; t421++) {
                        const u421 = r421[t421];
                        let v421 = null, w421 = [], x421 = null;
                        for (let y421 = 0, z421 = u421.length; y421 < z421; y421++) {
                            v421 || (v421 = new z230.PolygonShape());
                            const a422 = u421[y421], b422 = (m421 + (a422.x + s421.x) * k421) / o230, c422 = (n421 + (a422.y + s421.y) * l421) / o230, d422 = new z230.Vec2(b422, c422);
                            w421.push(d422), x421 || (x421 = d422), w421.length === z230.maxPolygonVertices && (v421.Set(w421, w421.length), o421.push(v421), v421 = null, y421 < z421 - 1 && (w421 = [x421, w421[w421.length - 1]]));
                        }
                        v421 && (v421.Set(w421, w421.length), o421.push(v421));
                    }
                    return o421;
                }
            }
            class h241 {
                constructor() {
                    this._b2joint = null, this._jointComp = null, this._body = null, this._inited = !1;
                }
                get impl() {
                    return this._b2joint;
                }
                get comp() {
                    return this._jointComp;
                }
                get body() {
                    return this._body;
                }
                initialize(j421) {
                    this._jointComp = j421;
                }
                onEnable() {
                    t231.instance._callAfterStep(this, this._init);
                }
                onDisable() {
                    t231.instance._callAfterStep(this, this._destroy);
                }
                start() {
                    t231.instance._callAfterStep(this, this._init);
                }
                apply() {
                    t231.instance._callAfterStep(this, this._destroy), this.comp.enabledInHierarchy && t231.instance._callAfterStep(this, this._init);
                }
                _init() {
                    if (this._inited)
                        return;
                    const g421 = this._jointComp;
                    if (!g421.isValid)
                        return;
                    this._body = g421.getComponent(w232);
                    const h421 = this._createJointDef();
                    if (!h421)
                        return;
                    h421.bodyA = this._body.impl.impl;
                    const i421 = g421.connectedBody;
                    i421 && !i421.enabledInHierarchy || (h421.bodyB = i421 ? i421.impl.impl : t231.instance.physicsWorld.groundBodyImpl, h421.collideConnected = g421.collideConnected, this._b2joint = t231.instance.physicsWorld.impl.CreateJoint(h421), this._inited = !0);
                }
                _destroy() {
                    this._inited && (t231.instance.physicsWorld.impl.DestroyJoint(this._b2joint), this._b2joint = null, this._inited = !1);
                }
                _createJointDef() {
                    return null;
                }
                isValid() {
                    return this._b2joint && this._body && this._body.impl && this._jointComp;
                }
            }
            const i241 = new z230.Vec2();
            class j241 extends h241 {
                constructor(...f421) {
                    super(...f421), this._touchPoint = new s147(), this._isTouched = !1;
                }
                setTarget(e421) {
                    this._b2joint && (i241.x = e421.x / o230, i241.y = e421.y / o230, this._b2joint.SetTarget(i241));
                }
                setDampingRatio(d421) {
                    this._b2joint && this._b2joint.SetDampingRatio(d421);
                }
                setFrequency(c421) {
                    this._b2joint && this._b2joint.SetFrequency(c421);
                }
                setMaxForce(b421) {
                    this._b2joint && this._b2joint.SetMaxForce(b421);
                }
                _createJointDef() {
                    const z420 = new z230.MouseJointDef(), a421 = this._jointComp;
                    return z420.target.Set(this._touchPoint.x / o230, this._touchPoint.y / o230), z420.maxForce = a421.maxForce, z420.dampingRatio = a421.dampingRatio, z420.frequencyHz = a421.frequency, z420;
                }
                initialize(x420) {
                    super.initialize(x420);
                    const y420 = x135("Canvas");
                    y420 && (y420.on(z174.TOUCH_START, this.onTouchBegan, this), y420.on(z174.TOUCH_MOVE, this.onTouchMove, this), y420.on(z174.TOUCH_END, this.onTouchEnd, this), y420.on(z174.TOUCH_CANCEL, this.onTouchEnd, this));
                }
                onEnable() { }
                start() { }
                onTouchBegan(s420) {
                    this._isTouched = !0;
                    const t420 = this._touchPoint.set(s420.getUILocation()), u420 = t231.instance.physicsWorld.testPoint(t420);
                    if (u420.length <= 0)
                        return;
                    const v420 = u420[0].body;
                    v420.wakeUp();
                    const w420 = this._jointComp;
                    w420.connectedBody = v420, this._init(), this.setMaxForce(w420.maxForce * v420.getMass()), this.setTarget(t420);
                }
                onTouchMove(r420) {
                    this._touchPoint = r420.getUILocation();
                }
                onTouchEnd(q420) {
                    this._destroy(), this._isTouched = !1;
                }
                update() {
                    this._isTouched && this.isValid() && this.setTarget(this._touchPoint);
                }
            }
            class k241 extends h241 {
                setMaxLength(p420) {
                    this._b2joint && this._b2joint.SetMaxLength(p420);
                }
                _createJointDef() {
                    const n420 = this._jointComp, o420 = new z230.RopeJointDef();
                    return o420.localAnchorA.Set(n420.anchor.x / o230, n420.anchor.y / o230), o420.localAnchorB.Set(n420.connectedAnchor.x / o230, n420.connectedAnchor.y / o230), o420.maxLength = n420.maxLength / o230, o420;
                }
            }
            class l241 extends h241 {
                setDampingRatio(m420) {
                    this._b2joint && this._b2joint.SetDampingRatio(m420);
                }
                setFrequency(l420) {
                    this._b2joint && this._b2joint.SetFrequency(l420);
                }
                setDistance(k420) {
                    this._b2joint && this._b2joint.SetLength(k420);
                }
                _createJointDef() {
                    const i420 = this._jointComp, j420 = new z230.DistanceJointDef();
                    return j420.localAnchorA.Set(i420.anchor.x / o230, i420.anchor.y / o230), j420.localAnchorB.Set(i420.connectedAnchor.x / o230, i420.connectedAnchor.y / o230), j420.length = i420.distance / o230, j420.dampingRatio = i420.dampingRatio, j420.frequencyHz = i420.frequency, j420;
                }
            }
            class m241 extends h241 {
                setMaxForce(h420) {
                    this._b2joint && this._b2joint.SetMaxForce(h420);
                }
                setAngularOffset(g420) {
                    this._b2joint && this._b2joint.SetAngularOffset(a129(g420));
                }
                setLinearOffset(f420) {
                    this._b2joint && this._b2joint.SetLinearOffset(new z230.Vec2(f420.x / o230, f420.y / o230));
                }
                setCorrectionFactor(e420) {
                    this._b2joint && (this._b2joint.m_correctionFactor = e420);
                }
                setMaxTorque(d420) {
                    this._b2joint && this._b2joint.SetMaxTorque(d420);
                }
                _createJointDef() {
                    const b420 = this._jointComp, c420 = new z230.MotorJointDef();
                    return c420.linearOffset.Set(b420.linearOffset.x / o230, b420.linearOffset.y / o230), c420.angularOffset = a129(b420.angularOffset), c420.maxForce = b420.maxForce, c420.maxTorque = b420.maxTorque, c420.correctionFactor = b420.correctionFactor, c420;
                }
            }
            class n241 extends h241 {
                enableLimit(a420) {
                    this._b2joint && this._b2joint.EnableLimit(a420);
                }
                setLowerLimit(z419) {
                    this.updateLimits();
                }
                setUpperLimit(y419) {
                    this.updateLimits();
                }
                updateLimits() {
                    if (this._b2joint) {
                        const x419 = this._jointComp;
                        this._b2joint.SetLimits(x419.lowerLimit / o230, x419.upperLimit / o230);
                    }
                }
                enableMotor(w419) {
                    this._b2joint && this._b2joint.EnableMotor(w419);
                }
                setMaxMotorForce(v419) {
                    this._b2joint && this._b2joint.SetMaxMotorForce(v419);
                }
                setMotorSpeed(u419) {
                    this._b2joint && this._b2joint.SetMotorSpeed(u419);
                }
                _createJointDef() {
                    const r419 = this._jointComp, s419 = new z230.PrismaticJointDef();
                    s419.localAnchorA.Set(r419.anchor.x / o230, r419.anchor.y / o230), s419.localAnchorB.Set(r419.connectedAnchor.x / o230, r419.connectedAnchor.y / o230);
                    const t419 = a129(r419.angle);
                    return s419.localAxisA.Set(Math.cos(t419), Math.sin(t419)), s419.referenceAngle = 0, s419.enableLimit = r419.enableLimit, s419.lowerTranslation = r419.lowerLimit / o230, s419.upperTranslation = r419.upperLimit / o230, s419.enableMotor = r419.enableMotor, s419.maxMotorForce = r419.maxMotorForce, s419.motorSpeed = r419.motorSpeed, s419;
                }
            }
            class o241 extends h241 {
                setFrequency(q419) {
                    this._b2joint && this._b2joint.SetFrequency(q419);
                }
                setDampingRatio(p419) {
                    this._b2joint && this._b2joint.SetDampingRatio(p419);
                }
                _createJointDef() {
                    const n419 = this._jointComp, o419 = new z230.WeldJointDef();
                    return o419.localAnchorA.Set(n419.anchor.x / o230, n419.anchor.y / o230), o419.localAnchorB.Set(n419.connectedAnchor.x / o230, n419.connectedAnchor.y / o230), o419.referenceAngle = 0, o419.frequencyHz = n419.frequency, o419.dampingRatio = n419.dampingRatio, o419;
                }
            }
            class p241 extends h241 {
                setDampingRatio(m419) {
                    this._b2joint && this._b2joint.SetSpringDampingRatio(m419);
                }
                setFrequency(l419) {
                    this._b2joint && this._b2joint.SetSpringFrequencyHz(l419);
                }
                enableMotor(k419) {
                    this._b2joint && this._b2joint.EnableMotor(k419);
                }
                setMaxMotorTorque(j419) {
                    this._b2joint && this._b2joint.SetMaxMotorTorque(j419);
                }
                setMotorSpeed(i419) {
                    this._b2joint && this._b2joint.SetMotorSpeed(i419);
                }
                _createJointDef() {
                    const f419 = this._jointComp, g419 = new z230.WheelJointDef();
                    g419.localAnchorA.Set(f419.anchor.x / o230, f419.anchor.y / o230), g419.localAnchorB.Set(f419.connectedAnchor.x / o230, f419.connectedAnchor.y / o230);
                    const h419 = a129(f419.angle);
                    return g419.localAxisA.Set(Math.cos(h419), Math.sin(h419)), g419.maxMotorTorque = f419.maxMotorTorque, g419.motorSpeed = a129(f419.motorSpeed), g419.enableMotor = f419.enableMotor, g419.dampingRatio = f419.dampingRatio, g419.frequencyHz = f419.frequency, g419;
                }
            }
            class q241 extends h241 {
                enableLimit(e419) {
                    this._b2joint && this._b2joint.EnableLimit(e419);
                }
                setLowerAngle(d419) {
                    this.updateLimits();
                }
                setUpperAngle(c419) {
                    this.updateLimits();
                }
                updateLimits() {
                    if (this._b2joint) {
                        const b419 = this._jointComp;
                        this._b2joint.SetLimits(a129(b419.lowerAngle), a129(b419.upperAngle));
                    }
                }
                enableMotor(a419) {
                    this._b2joint && this._b2joint.EnableMotor(a419);
                }
                setMaxMotorTorque(z418) {
                    this._b2joint && this._b2joint.SetMaxMotorTorque(z418);
                }
                setMotorSpeed(y418) {
                    this._b2joint && this._b2joint.SetMotorSpeed(y418);
                }
                _createJointDef() {
                    const w418 = this._jointComp, x418 = new z230.RevoluteJointDef();
                    return x418.localAnchorA.Set(w418.anchor.x / o230, w418.anchor.y / o230), x418.localAnchorB.Set(w418.connectedAnchor.x / o230, w418.connectedAnchor.y / o230), x418.enableMotor = w418.enableMotor, x418.maxMotorTorque = w418.maxMotorTorque, x418.motorSpeed = a129(w418.motorSpeed), x418.enableLimit = w418.enableLimit, x418.lowerAngle = a129(w418.lowerAngle), x418.upperAngle = a129(w418.upperAngle), x418;
                }
            }
            e186.once(d186.EVENT_PRE_SUBSYSTEM_INIT, () => {
                p230.register("box2d", {
                    PhysicsWorld: v240,
                    RigidBody: y240,
                    BoxShape: e241,
                    CircleShape: f241,
                    PolygonShape: g241,
                    MouseJoint: j241,
                    DistanceJoint: k241,
                    SpringJoint: l241,
                    RelativeJoint: m241,
                    SliderJoint: n241,
                    FixedJoint: o241,
                    WheelJoint: p241,
                    HingeJoint: q241
                });
            });
            const r241 = jsb.Mesh, s241 = jsb.Mesh.IStruct.prototype;
            Object.defineProperty(s241, "minPosition", {
                configurable: !0,
                enumerable: !0,
                get() {
                    const v418 = this.getMinPosition();
                    return v418 ? this._minPositionCache ? this._minPositionCache.set(v418.x, v418.y, v418.z) : this._minPositionCache = new w146(v418.x, v418.y, v418.z) : this._minPositionCache = void 0, this._minPositionCache;
                },
                set(u418) {
                    this.setMinPosition(u418);
                }
            }), Object.defineProperty(s241, "maxPosition", {
                configurable: !0,
                enumerable: !0,
                get() {
                    const t418 = this.getMaxPosition();
                    return t418 ? this._maxPositionCache ? this._maxPositionCache.set(t418.x, t418.y, t418.z) : this._maxPositionCache = new w146(t418.x, t418.y, t418.z) : this._maxPositionCache = void 0, this._maxPositionCache;
                },
                set(s418) {
                    this.setMaxPosition(s418);
                }
            });
            const t241 = jsb.Mesh.prototype;
            t241.createNode = null;
            const u241 = t241.onLoaded;
            t241._ctor = function () {
                jsb.Asset.prototype._ctor.apply(this, arguments), this._struct = {
                    vertexBundles: [],
                    primitives: []
                }, this._minPosition = void 0, this._maxPosition = void 0;
            }, Object.defineProperty(t241, "struct", {
                configurable: !0,
                enumerable: !0,
                get() {
                    return this.getStruct();
                }
            }), Object.defineProperty(t241, "minPosition", {
                configurable: !0,
                enumerable: !0,
                get() {
                    const r418 = this.getMinPosition();
                    return r418 ? this._minPosition ? this._minPosition.set(r418.x, r418.y, r418.z) : this._minPosition = new w146(r418.x, r418.y, r418.z) : this._minPosition = void 0, this._minPosition;
                }
            }), Object.defineProperty(t241, "maxPosition", {
                configurable: !0,
                enumerable: !0,
                get() {
                    const q418 = this.getMaxPosition();
                    return q418 ? this._maxPosition ? this._maxPosition.set(q418.x, q418.y, q418.z) : this._maxPosition = new w146(q418.x, q418.y, q418.z) : this._maxPosition = void 0, this._maxPosition;
                }
            }), t241.onLoaded = function () {
                const p418 = this._struct;
                p418 && (0 === p418.vertexBundles.length && 0 === p418.primitives.length || this.setStruct(this._struct)), this._struct = null, u241.apply(this);
            }, s143.Mesh = jsb.Mesh, function (f418, g418 = r163) {
                const { Mesh: h418 } = {
                    ...f418
                };
                g418(() => {
                    j151(h418.prototype, "_struct", () => ({
                        vertexBundles: [],
                        primitives: []
                    }));
                }, "serializable", "_struct"), g418(() => {
                    j151(h418.prototype, "_hash", () => 0);
                }, "serializable", "_hash"), g418(() => {
                    j151(h418.prototype, "_allowDataAccess", () => !0);
                }, "serializable", "_allowDataAccess"), g418(() => {
                    e151("cc.Mesh")(h418);
                }, "ccclass", null);
            }({
                Mesh: r241
            });
            const v241 = jsb.MorphModel;
            let w241;
            var x241, y241, z241, a242, b242, c242, d242, e242, f242, g242, h242, i242, j242, k242, l242, m242, n242, o242, p242, q242, r242, s242, t242, u242, v242, w242, x242, y242, z242, a243, b243, c243, d243, e243, f243, g243, h243, i243, j243, k243, l243, m243;
            s143.MorphModel = jsb.MorphModel, function (e418) {
                e418[e418.NONE = 0] = "NONE", e418[e418.BAKED_CUBEMAP = 1] = "BAKED_CUBEMAP", e418[e418.PLANAR_REFLECTION = 2] = "PLANAR_REFLECTION", e418[e418.BLEND_PROBES = 3] = "BLEND_PROBES", e418[e418.BLEND_PROBES_AND_SKYBOX = 4] = "BLEND_PROBES_AND_SKYBOX";
            }(w241 || (w241 = {}));
            const { ccclass: n243, help: o243, executeInEditMode: p243, executionOrder: q243, menu: r243, visible: s243, type: t243, formerlySerializedAs: u243, serializable: v243, editable: w243, disallowAnimation: x243 } = k152;
            let y243 = t172("specular-pass");
            function r142(a418) {
                const b418 = a418.passes, c418 = s143.rendering;
                k135() && (y243 = c418.getPhaseID(c418.getPassID("specular-pass"), "default"));
                for (let d418 = 0; d418 < b418.length; d418++)
                    if ((!c418 || !c418.enableEffectImport) && b418[d418].phase === y243 || k135() && b418[d418].phaseID === y243)
                        return d418;
                return -1;
            }
            const z243 = p127({
                OFF: 0,
                ON: 1
            }), a244 = p127({
                OFF: 0,
                ON: 1
            });
            let b244 = (x241 = n243("cc.ModelBakeSettings"), y241 = u243("_recieveShadow"), z241 = t243(y145), a242 = t243(a146), b242 = t243(a146), c242 = t243(p127(w241)), d242 = t243(a146), x241(((q242 = class t extends o156 {
                constructor(...z417) {
                    super(...z417), this.texture = g242 && g242(), this.uvParam = h242 && h242(), this._bakeable = i242 && i242(), this._castShadow = j242 && j242(), this._receiveShadow = k242 && k242(), this._lightmapSize = l242 && l242(), this._useLightProbe = m242 && m242(), this._bakeToLightProbe = n242 && n242(), this._reflectionProbeType = o242 && o242(), this._bakeToReflectionProbe = p242 && p242(), this.probeCubemap = null, this.probeBlendCubemap = null, this.probePlanarmap = null;
                }
                get bakeable() {
                    return this._bakeable;
                }
                set bakeable(y417) {
                    this._bakeable = y417;
                }
                get castShadow() {
                    return this._castShadow;
                }
                set castShadow(x417) {
                    this._castShadow = x417;
                }
                get receiveShadow() {
                    return this._receiveShadow;
                }
                set receiveShadow(w417) {
                    this._receiveShadow = w417;
                }
                get lightmapSize() {
                    return this._lightmapSize;
                }
                set lightmapSize(v417) {
                    this._lightmapSize = v417;
                }
                get useLightProbe() {
                    return this._useLightProbe;
                }
                set useLightProbe(u417) {
                    this._useLightProbe = u417, this.emit(t.USE_LIGHT_PROBE_CHANGED);
                }
                get bakeToLightProbe() {
                    return this._bakeToLightProbe;
                }
                set bakeToLightProbe(t417) {
                    this._bakeToLightProbe = t417;
                }
                get reflectionProbe() {
                    return this._reflectionProbeType;
                }
                set reflectionProbe(s417) {
                    this._reflectionProbeType = s417, this.emit(t.REFLECTION_PROBE_CHANGED);
                }
                get bakeToReflectionProbe() {
                    return this._bakeToReflectionProbe;
                }
                set bakeToReflectionProbe(r417) {
                    this._bakeToReflectionProbe = r417, this.emit(t.BAKE_TO_REFLECTION_PROBE_CHANGED);
                }
            }).USE_LIGHT_PROBE_CHANGED = "use_light_probe_changed", q242.REFLECTION_PROBE_CHANGED = "reflection_probe_changed", q242.BAKE_TO_REFLECTION_PROBE_CHANGED = "bake_to_reflection_probe_changed", g242 = p130((f242 = q242).prototype, "texture", [v243], function () {
                return null;
            }), h242 = p130(f242.prototype, "uvParam", [v243], function () {
                return new v146();
            }), i242 = p130(f242.prototype, "_bakeable", [v243], function () {
                return !1;
            }), j242 = p130(f242.prototype, "_castShadow", [v243], function () {
                return !1;
            }), k242 = p130(f242.prototype, "_receiveShadow", [y241], function () {
                return !1;
            }), l242 = p130(f242.prototype, "_lightmapSize", [v243], function () {
                return 64;
            }), m242 = p130(f242.prototype, "_useLightProbe", [v243], function () {
                return !1;
            }), n242 = p130(f242.prototype, "_bakeToLightProbe", [v243], function () {
                return !0;
            }), o242 = p130(f242.prototype, "_reflectionProbeType", [v243], function () {
                return w241.NONE;
            }), p242 = p130(f242.prototype, "_bakeToReflectionProbe", [v243], function () {
                return !0;
            }), i125(f242.prototype, "lightmapSize", [z241], Object.getOwnPropertyDescriptor(f242.prototype, "lightmapSize"), f242.prototype), i125(f242.prototype, "useLightProbe", [a242], Object.getOwnPropertyDescriptor(f242.prototype, "useLightProbe"), f242.prototype), i125(f242.prototype, "bakeToLightProbe", [b242], Object.getOwnPropertyDescriptor(f242.prototype, "bakeToLightProbe"), f242.prototype), i125(f242.prototype, "reflectionProbe", [c242], Object.getOwnPropertyDescriptor(f242.prototype, "reflectionProbe"), f242.prototype), i125(f242.prototype, "bakeToReflectionProbe", [d242], Object.getOwnPropertyDescriptor(f242.prototype, "bakeToReflectionProbe"), f242.prototype), e242 = f242)) || e242), c244 = (r242 = n243("cc.MeshRenderer"), s242 = q243(100), t242 = t243(z145), u242 = t243(z145), v242 = t243(z243), w242 = t243(a244), x242 = t243(r241), y242 = t243(a146), r242(z242 = s242(((m243 = class extends r200 {
                get shadowBias() {
                    return this._shadowBias;
                }
                set shadowBias(q417) {
                    this._shadowBias = q417, this._updateShadowBias(), this._onUpdateLocalShadowBiasAndProbeId();
                }
                get shadowNormalBias() {
                    return this._shadowNormalBias;
                }
                set shadowNormalBias(p417) {
                    this._shadowNormalBias = p417, this._updateShadowNormalBias(), this._onUpdateLocalShadowBiasAndProbeId();
                }
                get shadowCastingMode() {
                    return this._shadowCastingMode;
                }
                set shadowCastingMode(o417) {
                    this._shadowCastingMode = o417, this._updateCastShadow();
                }
                get shadowCastingModeForInspector() {
                    return this.shadowCastingMode === z243.ON;
                }
                set shadowCastingModeForInspector(n417) {
                    this.shadowCastingMode = !0 === n417 ? z243.ON : z243.OFF;
                }
                onUpdateReceiveDirLight(l417, m417 = !1) {
                    this._model && (m417 ? this._model.receiveDirLight = !1 : this.node && (l417 & this.node.layer) === this.node.layer || l417 & this._model.visFlags ? this._model.receiveDirLight = !0 : this._model.receiveDirLight = !1);
                }
                get receiveShadow() {
                    return this._shadowReceivingMode;
                }
                set receiveShadow(k417) {
                    this._shadowReceivingMode = k417, this._updateReceiveShadow();
                }
                get receiveShadowForInspector() {
                    return this._shadowReceivingMode === a244.ON;
                }
                set receiveShadowForInspector(j417) {
                    this._shadowReceivingMode = !0 === j417 ? a244.ON : a244.OFF, this._updateReceiveShadow();
                }
                get mesh() {
                    return this._mesh;
                }
                set mesh(g417) {
                    const h417 = this._mesh, i417 = this._mesh = g417;
                    null == i417 || i417.initialize(), this._initSubMeshShapesWeights(), this._watchMorphInMesh(), this._onMeshChanged(h417), this._updateModels(), this.enabledInHierarchy && this._attachToScene(), this._updateCastShadow(), this._updateReceiveShadow(), this._updateUseLightProbe(), this._updateUseReflectionProbe(), this._updateReceiveDirLight();
                }
                get model() {
                    return this._model;
                }
                get enableMorph() {
                    return this._enableMorph;
                }
                set enableMorph(f417) {
                    this._enableMorph = f417;
                }
                get isGlobalStandardSkinObject() {
                    return this._enabledGlobalStandardSkinObject;
                }
                set isGlobalStandardSkinObject(e417) {
                    s143.director.root.pipeline.pipelineSceneData.standardSkinMeshRenderer = e417 ? this : null, this._enabledGlobalStandardSkinObject = e417;
                }
                clearGlobalStandardSkinObjectFlag() {
                    this._enabledGlobalStandardSkinObject = !1;
                }
                constructor() {
                    super(), this.bakeSettings = b243 && b243(), this._mesh = c243 && c243(), this._shadowCastingMode = d243 && d243(), this._shadowReceivingMode = e243 && e243(), this._shadowBias = f243 && f243(), this._shadowNormalBias = g243 && g243(), this._reflectionProbeId = h243 && h243(), this._reflectionProbeBlendId = i243 && i243(), this._reflectionProbeBlendWeight = j243 && j243(), this._enabledGlobalStandardSkinObject = k243 && k243(), this._reflectionProbeDataMap = null, this._subMeshShapesWeights = [], this._modelType = void 0, this._model = null, this._morphInstance = null, this._enableMorph = l243 && l243(), this._modelType = b176, r145.querySettings(q145.Category.RENDERING, "highQualityMode") && (this._shadowCastingMode = z243.ON, this.bakeSettings.castShadow = !0, this.bakeSettings.receiveShadow = !0);
                }
                onLoad() {
                    this._mesh && this._mesh.initialize(), this._validateShapeWeights() || this._initSubMeshShapesWeights(), this._watchMorphInMesh(), this._updateModels(), this._updateCastShadow(), this._updateReceiveShadow(), this._updateShadowBias(), this._updateShadowNormalBias(), this._updateUseLightProbe(), this._updateBakeToReflectionProbe(), this._updateUseReflectionProbe(), this._updateReceiveDirLight(), this._updateStandardSkin();
                }
                onRestore() {
                    this._updateModels(), this.enabledInHierarchy && this._attachToScene(), this._updateCastShadow(), this._updateReceiveShadow(), this._updateShadowBias(), this._updateShadowNormalBias(), this._updateUseLightProbe(), this._updateBakeToReflectionProbe(), this._updateUseReflectionProbe(), this._updateReceiveDirLight(), this._updateStandardSkin();
                }
                onEnable() {
                    super.onEnable(), this.node.on(z174.MOBILITY_CHANGED, this.onMobilityChanged, this), this.node.on(z174.LIGHT_PROBE_BAKING_CHANGED, this.onLightProbeBakingChanged, this), this.bakeSettings.on(b244.USE_LIGHT_PROBE_CHANGED, this.onUseLightProbeChanged, this), this.bakeSettings.on(b244.REFLECTION_PROBE_CHANGED, this.onReflectionProbeChanged, this), this.bakeSettings.on(b244.BAKE_TO_REFLECTION_PROBE_CHANGED, this.onBakeToReflectionProbeChanged, this), this._model || this._updateModels(), this._model.onGlobalPipelineStateChanged(), this._updateCastShadow(), this._updateReceiveShadow(), this._updateShadowBias(), this._updateShadowNormalBias(), this._updateBakeToReflectionProbe(), this._updateUseReflectionProbe(), this._onUpdateLocalShadowBiasAndProbeId(), this._updateUseLightProbe(), this._updateReceiveDirLight(), this._onUpdateReflectionProbeDataMap(), this._onUpdateLocalReflectionProbeData(), this._updateStandardSkin(), this._attachToScene();
                }
                onDisable() {
                    this._model && this._detachFromScene(), this.node.off(z174.MOBILITY_CHANGED, this.onMobilityChanged, this), this.node.off(z174.LIGHT_PROBE_BAKING_CHANGED, this.onLightProbeBakingChanged, this), this.bakeSettings.off(b244.USE_LIGHT_PROBE_CHANGED, this.onUseLightProbeChanged, this), this.bakeSettings.off(b244.REFLECTION_PROBE_CHANGED, this.onReflectionProbeChanged, this), this.bakeSettings.off(b244.BAKE_TO_REFLECTION_PROBE_CHANGED, this.onBakeToReflectionProbeChanged, this);
                }
                onDestroy() {
                    this._model && (s143.director.root.destroyModel(this._model), this._model = null, this._models.length = 0), this._morphInstance && this._morphInstance.destroy();
                }
                onGeometryChanged() {
                    if (this._model && this._mesh) {
                        const d417 = this._mesh.struct;
                        this._model.createBoundingShape(d417.minPosition, d417.maxPosition), this._model.updateWorldBound(), this._model.onGeometryChanged();
                    }
                }
                getWeight(z416, a417) {
                    const { _subMeshShapesWeights: b417 } = this;
                    b417.length;
                    const c417 = this._subMeshShapesWeights[z416];
                    return c417.length, c417[a417];
                }
                setWeights(w416, x416) {
                    const { _subMeshShapesWeights: y416 } = this;
                    x416 >= y416.length || y416[x416].length === w416.length && (y416[x416] = w416.slice(0), this._uploadSubMeshShapesWeights(x416));
                }
                setWeight(r416, s416, t416) {
                    const { _subMeshShapesWeights: u416 } = this;
                    if (s416 >= u416.length)
                        return;
                    const v416 = u416[s416];
                    t416 >= v416.length || (v416[t416] = r416, this._uploadSubMeshShapesWeights(s416));
                }
                setInstancedAttribute(p416, q416) {
                    this.model && this.model._setInstancedAttribute(p416, q416);
                }
                _updateLightmap(k416, l416, m416, n416, o416) {
                    this.bakeSettings.texture = k416, this.bakeSettings.uvParam.x = l416, this.bakeSettings.uvParam.y = m416, this.bakeSettings.uvParam.z = n416, this.bakeSettings.uvParam.w = o416, this._onUpdateLightingmap(), this._updateReceiveDirLight();
                }
                updateProbeCubemap(j416) {
                    this.bakeSettings.probeCubemap && this.bakeSettings.probeCubemap === j416 || (this.bakeSettings.probeCubemap = j416, null !== this.model && this.model.updateReflectionProbeCubemap(this.bakeSettings.probeCubemap));
                }
                updateProbeBlendCubemap(i416) {
                    this.bakeSettings.probeBlendCubemap && this.bakeSettings.probeBlendCubemap === i416 || (this.bakeSettings.probeBlendCubemap = i416, null !== this.model && this.model.updateReflectionProbeBlendCubemap(this.bakeSettings.probeBlendCubemap));
                }
                updateProbePlanarMap(h416) {
                    this.bakeSettings.probePlanarmap !== h416 && (this.bakeSettings.probePlanarmap = h416, null !== this.model && this.model.updateReflectionProbePlanarMap(this.bakeSettings.probePlanarmap));
                }
                updateReflectionProbeDataMap(g416) {
                    this._reflectionProbeDataMap = g416, null !== this.model && this.model.updateReflectionProbeDataMap(g416);
                }
                updateReflectionProbeId(f416) {
                    this._reflectionProbeId = f416, this.model && (this.model.reflectionProbeId = f416), this._onUpdateLocalShadowBiasAndProbeId();
                }
                updateReflectionProbeBlendId(e416) {
                    this._reflectionProbeBlendId = e416, this.model && (this.model.reflectionProbeBlendId = e416), this._onUpdateLocalShadowBiasAndProbeId();
                }
                updateReflectionProbeBlendWeight(d416) {
                    this._reflectionProbeBlendWeight = d416, this.model && (this.model.reflectionProbeBlendWeight = d416), this._onUpdateLocalReflectionProbeData();
                }
                _updateReflectionProbeTexture() {
                    if (!this.model)
                        return;
                    const y415 = this.bakeSettings, z415 = y415.reflectionProbe, a416 = y415.probeBlendCubemap, b416 = y415.probePlanarmap, c416 = y415.probeCubemap;
                    z415 === w241.BAKED_CUBEMAP ? (this.model.updateReflectionProbeCubemap(c416), this.model.updateReflectionProbePlanarMap(null), this.model.updateReflectionProbeBlendCubemap(null)) : z415 === w241.BLEND_PROBES || z415 === w241.BLEND_PROBES_AND_SKYBOX ? (this.model.updateReflectionProbeCubemap(c416), this.model.updateReflectionProbeBlendCubemap(a416), this.model.updateReflectionProbePlanarMap(null)) : z415 === w241.PLANAR_REFLECTION ? (this.model.updateReflectionProbePlanarMap(b416), this.model.updateReflectionProbeCubemap(null), this.model.updateReflectionProbeBlendCubemap(null)) : (this.model.updateReflectionProbeCubemap(null), this.model.updateReflectionProbePlanarMap(null), this.model.updateReflectionProbeBlendCubemap(null));
                }
                _updateModels() {
                    if (!this.enabledInHierarchy)
                        return;
                    const w415 = this._model;
                    if (w415 ? (w415.destroy(), w415.initialize(), w415.node = w415.transform = this.node) : this._createModel(), this._model) {
                        if (this._mesh) {
                            const x415 = this._mesh.struct;
                            this._model.createBoundingShape(x415.minPosition, x415.maxPosition), this._model.updateWorldBound();
                        }
                        this._model.initLightingmap(this.bakeSettings.texture, this.bakeSettings.uvParam), this._updateUseLightProbe(), this._updateUseReflectionProbeType(), this._updateModelParams(), this._onUpdateLightingmap(), this._onUpdateLocalShadowBiasAndProbeId(), this._updateUseReflectionProbe(), this._updateReceiveDirLight(), this._onUpdateReflectionProbeDataMap(), this._onUpdateLocalReflectionProbeData();
                    }
                }
                _updateReceiveDirLight() {
                    if (!this._model)
                        return;
                    const s415 = this.node.scene;
                    if (!s415 || !s415.renderScene)
                        return;
                    const t415 = s415.renderScene.mainLight;
                    if (!t415)
                        return;
                    const u415 = t415.visibility;
                    if (t415.node)
                        if (t415.node.mobility === d175.Static) {
                            let v415 = !1;
                            this.bakeSettings.texture && !this.node.scene.globals.disableLightmap && (v415 = !0), this.node.scene.globals.lightProbeInfo.data && this.node.scene.globals.lightProbeInfo.data.hasCoefficients() && this._model.useLightProbe && (v415 = !0), this.onUpdateReceiveDirLight(u415, v415);
                        }
                        else
                            this.onUpdateReceiveDirLight(u415);
                }
                _createModel() {
                    const q415 = this._morphInstance && this._modelType === b176 ? v241 : this._modelType, r415 = this._model = s143.director.root.createModel(q415);
                    r415.visFlags = this.visibility, r415.node = r415.transform = this.node, this._models.length = 0, this._models.push(this._model), this._morphInstance && r415 instanceof v241 && r415.setMorphRendering(this._morphInstance);
                }
                _attachToScene() {
                    if (!this.node.scene || !this._model)
                        return;
                    const p415 = this._getRenderScene();
                    null !== this._model.scene && this._detachFromScene(), p415.addModel(this._model);
                }
                _detachFromScene() {
                    this._model && this._model.scene && this._model.scene.removeModel(this._model);
                }
                _updateModelParams() {
                    if (!this._mesh || !this._model)
                        return;
                    this.node.hasChangedFlags |= b175.POSITION, this._model.transform.hasChangedFlags |= b175.POSITION, this._model.isDynamicBatching = this._isBatchingEnabled();
                    const k415 = this._mesh ? this._mesh.renderingSubMeshes.length : 0, l415 = this._mesh.renderingSubMeshes;
                    if (l415)
                        for (let m415 = 0; m415 < k415; ++m415) {
                            let n415 = this.getRenderMaterial(m415);
                            n415 && !n415.isValid && (n415 = null);
                            const o415 = l415[m415];
                            o415 && this._model.initSubModel(m415, o415, n415 || this._getBuiltinMaterial());
                        }
                    this._model.enabled = !0;
                }
                _onUpdateLightingmap() {
                    null !== this.model && this.model.updateLightingmap(this.bakeSettings.texture, this.bakeSettings.uvParam), this.setInstancedAttribute("a_lightingMapUVParam", [this.bakeSettings.uvParam.x, this.bakeSettings.uvParam.y, this.bakeSettings.uvParam.z, this.bakeSettings.uvParam.w]);
                }
                _onUpdateLocalShadowBiasAndProbeId() {
                    null !== this.model && (this.model.updateLocalShadowBias(), this.model.updateReflectionProbeId()), this.setInstancedAttribute("a_localShadowBiasAndProbeId", [this._shadowBias, this._shadowNormalBias, this._reflectionProbeId, this._reflectionProbeBlendId]);
                }
                _onUpdateLocalReflectionProbeData() {
                    this.bakeSettings.reflectionProbe !== w241.BAKED_CUBEMAP && this.bakeSettings.reflectionProbe !== w241.BLEND_PROBES && this.bakeSettings.reflectionProbe !== w241.BLEND_PROBES_AND_SKYBOX || (null !== this.model && this.model.updateReflectionProbeId(), this.setInstancedAttribute("a_reflectionProbeData", [this._reflectionProbeBlendWeight, 0, 0, 0]));
                }
                _onUpdateReflectionProbeDataMap() {
                    null !== this.model && this.model.updateReflectionProbeDataMap(this._reflectionProbeDataMap);
                }
                _onMaterialModified(i415, j415) {
                    this._model && this._model.inited && (this._onRebuildPSO(i415, j415 || this._getBuiltinMaterial()), this._updateStandardSkin());
                }
                _onRebuildPSO(g415, h415) {
                    this._model && this._model.inited && (this._model.isDynamicBatching = this._isBatchingEnabled(), this._model.setSubModelMaterial(g415, h415), this._onUpdateLightingmap(), this._onUpdateLocalShadowBiasAndProbeId(), this._updateReflectionProbeTexture(), this._onUpdateReflectionProbeDataMap(), this._onUpdateLocalReflectionProbeData());
                }
                _onMeshChanged(f415) { }
                _clearMaterials() {
                    if (!this._model)
                        return;
                    const d415 = this._model.subModels;
                    for (let e415 = 0; e415 < d415.length; ++e415)
                        this._onMaterialModified(e415, null);
                }
                _getBuiltinMaterial() {
                    return r185.get("missing-material");
                }
                _onVisibilityChange(c415) {
                    this._model && (this._model.visFlags = c415);
                }
                _updateShadowBias() {
                    this._model && (this._model.shadowBias = this._shadowBias);
                }
                _updateShadowNormalBias() {
                    this._model && (this._model.shadowNormalBias = this._shadowNormalBias);
                }
                _updateCastShadow() {
                    this._model && (this._shadowCastingMode === z243.OFF ? this._model.castShadow = !1 : (this._shadowCastingMode, z243.ON, this._shadowCastingMode, this._model.castShadow = !0));
                }
                _updateReceiveShadow() {
                    this._model && (this._shadowReceivingMode === a244.OFF ? this._model.receiveShadow = !1 : this._model.receiveShadow = !0);
                }
                onMobilityChanged() {
                    this._updateUseLightProbe(), this._updateReceiveDirLight();
                }
                onLightProbeBakingChanged() {
                    this._updateReceiveDirLight();
                }
                onUseLightProbeChanged() {
                    this._updateUseLightProbe();
                }
                onReflectionProbeChanged() {
                    this._updateUseReflectionProbe(), this._onUpdateLocalShadowBiasAndProbeId(), this.bakeSettings.reflectionProbe === w241.BAKED_CUBEMAP || this.bakeSettings.reflectionProbe === w241.BLEND_PROBES || this.bakeSettings.reflectionProbe === w241.BLEND_PROBES_AND_SKYBOX ? (s143.internal.reflectionProbeManager.selectReflectionProbe(this._model), s143.internal.reflectionProbeManager.getUsedReflectionProbe(this._model, !1) || y125(16302)) : this.bakeSettings.reflectionProbe === w241.PLANAR_REFLECTION && (s143.internal.reflectionProbeManager.selectPlanarReflectionProbe(this._model), s143.internal.reflectionProbeManager.getUsedReflectionProbe(this._model, !0) || y125(16302));
                }
                onBakeToReflectionProbeChanged() {
                    this._updateBakeToReflectionProbe();
                }
                _updateUseLightProbe() {
                    if (!this._model)
                        return;
                    const b415 = this.node;
                    this._mesh && b415 && b415.mobility === d175.Movable && this.bakeSettings.useLightProbe ? this._model.useLightProbe = !0 : this._model.useLightProbe = !1;
                }
                _isBatchingEnabled() {
                    for (let y414 = 0; y414 < this._materials.length; ++y414) {
                        const z414 = this._materials[y414];
                        if (z414)
                            for (let a415 = 0; a415 < z414.passes.length; ++a415)
                                if (z414.passes[a415].batchingScheme)
                                    return !0;
                    }
                    return !1;
                }
                _updateUseReflectionProbe() {
                    this._model && (this._model.reflectionProbeType = this.bakeSettings.reflectionProbe, this._updateReflectionProbeTexture());
                }
                _updateUseReflectionProbeType() {
                    this._model && (this._model.reflectionProbeType = this.bakeSettings.reflectionProbe);
                }
                _updateBakeToReflectionProbe() {
                    this._model && (this._model.bakeToReflectionProbe = this.bakeSettings.bakeToReflectionProbe);
                }
                _watchMorphInMesh() {
                    if (this._morphInstance && (this._morphInstance.destroy(), this._morphInstance = null), !this._enableMorph)
                        return;
                    if (!this._mesh || !this._mesh.struct.morph || !this._mesh.morphRendering)
                        return;
                    this._morphInstance = this._mesh.morphRendering.createInstance();
                    const w414 = this._mesh.struct.primitives.length;
                    for (let x414 = 0; x414 < w414; ++x414)
                        this._uploadSubMeshShapesWeights(x414);
                    this._model && this._model instanceof v241 && this._model.setMorphRendering(this._morphInstance);
                }
                _initSubMeshShapesWeights() {
                    const { _mesh: r414 } = this;
                    if (this._subMeshShapesWeights.length = 0, !r414)
                        return;
                    const s414 = r414.struct.morph;
                    if (!s414)
                        return;
                    const t414 = s414.weights;
                    this._subMeshShapesWeights = s414.subMeshMorphs.map(v414 => v414 ? v414.weights ? v414.weights.slice(0) : t414 ? (t414.length, v414.targets.length, t414.slice(0)) : new Array(v414.targets.length).fill(0) : []);
                }
                _validateShapeWeights() {
                    const { _mesh: j414, _subMeshShapesWeights: k414 } = this;
                    if (!j414 || !j414.struct.morph)
                        return 0 === k414.length;
                    const { morph: l414 } = j414.struct;
                    return l414.subMeshMorphs.length === k414.length && k414.every(({ length: n414 }, o414) => {
                        var p414, q414;
                        return (null !== (p414 = null === (q414 = l414.subMeshMorphs[o414]) || void 0 === q414 ? void 0 : q414.targets.length) && void 0 !== p414 ? p414 : 0) === n414;
                    });
                }
                _uploadSubMeshShapesWeights(h414) {
                    var i414;
                    null === (i414 = this._morphInstance) || void 0 === i414 || i414.setWeights(h414, this._subMeshShapesWeights[h414]);
                }
                _updateStandardSkin() {
                    const e414 = s143.director.root.pipeline.pipelineSceneData;
                    if (this._enabledGlobalStandardSkinObject && (e414.standardSkinMeshRenderer = this, e414.standardSkinModel = this.model), !e414.skinMaterialModel && this._model) {
                        const f414 = this._model.subModels;
                        for (let g414 = 0; g414 < f414.length; g414++)
                            if (!(r142(f414[g414]) < 0))
                                return void (e414.skinMaterialModel = this._model);
                    }
                }
            }).ShadowCastingMode = z243, m243.ShadowReceivingMode = a244, b243 = p130((a243 = m243).prototype, "bakeSettings", [v243], function () {
                return new b244(this);
            }), c243 = p130(a243.prototype, "_mesh", [v243], function () {
                return null;
            }), d243 = p130(a243.prototype, "_shadowCastingMode", [v243], function () {
                return z243.OFF;
            }), e243 = p130(a243.prototype, "_shadowReceivingMode", [v243], function () {
                return a244.ON;
            }), f243 = p130(a243.prototype, "_shadowBias", [v243], function () {
                return 0;
            }), g243 = p130(a243.prototype, "_shadowNormalBias", [v243], function () {
                return 0;
            }), h243 = p130(a243.prototype, "_reflectionProbeId", [v243], function () {
                return -1;
            }), i243 = p130(a243.prototype, "_reflectionProbeBlendId", [v243], function () {
                return -1;
            }), j243 = p130(a243.prototype, "_reflectionProbeBlendWeight", [v243], function () {
                return 0;
            }), k243 = p130(a243.prototype, "_enabledGlobalStandardSkinObject", [v243], function () {
                return !1;
            }), i125(a243.prototype, "shadowBias", [t242], Object.getOwnPropertyDescriptor(a243.prototype, "shadowBias"), a243.prototype), i125(a243.prototype, "shadowNormalBias", [u242], Object.getOwnPropertyDescriptor(a243.prototype, "shadowNormalBias"), a243.prototype), i125(a243.prototype, "shadowCastingMode", [v242], Object.getOwnPropertyDescriptor(a243.prototype, "shadowCastingMode"), a243.prototype), i125(a243.prototype, "receiveShadow", [w242], Object.getOwnPropertyDescriptor(a243.prototype, "receiveShadow"), a243.prototype), i125(a243.prototype, "mesh", [x242], Object.getOwnPropertyDescriptor(a243.prototype, "mesh"), a243.prototype), i125(a243.prototype, "isGlobalStandardSkinObject", [y242], Object.getOwnPropertyDescriptor(a243.prototype, "isGlobalStandardSkinObject"), a243.prototype), l243 = p130(a243.prototype, "_enableMorph", [v243], function () {
                return !0;
            }), z242 = a243)) || z242) || z242);
            var d244;
            let e244 = e151("cc.PerfCounter")(d244 = class extends class {
                get value() {
                    return this._value;
                }
                set value(d414) {
                    this._value = d414;
                }
                constructor(a414, b414, c414) {
                    this._opts = void 0, this._total = 0, this._value = 0, this._averageValue = 0, this._accumValue = 0, this._accumSamples = 0, this._id = a414, this._opts = b414, this._accumStart = c414;
                }
                sample(z413) {
                    this._average(this._value, z413);
                }
                human() {
                    const { average: w413, isInteger: x413 } = this._opts, y413 = w413 ? this._averageValue : this._value;
                    return x413 ? Math.round(y413) : Math.round(100 * y413) / 100;
                }
                alarm() {
                    return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
                }
                _average(t413, u413 = 0) {
                    if (this._opts.average) {
                        this._accumValue += t413, ++this._accumSamples;
                        const v413 = u413;
                        v413 - this._accumStart >= this._opts.average && (this._averageValue = this._accumValue / this._accumSamples, this._accumValue = 0, this._accumStart = v413, this._accumSamples = 0);
                    }
                }
            } {
                constructor(q413, r413, s413) {
                    super(q413, r413, s413), this._time = s413;
                }
                start(p413 = 0) {
                    this._time = p413;
                }
                end(o413 = 0) {
                    this._value = o413 - this._time, this._average(this._value);
                }
                tick() {
                    this.end(), this.start();
                }
                frame(l413) {
                    const m413 = l413, n413 = m413 - this._time;
                    this._total++, n413 > (this._opts.average || 1e3) && (this._value = 1e3 * this._total / n413, this._total = 0, this._time = m413, this._average(this._value));
                }
            }) || d244;
            const f244 = "0123456789. ", g244 = 500, h244 = {
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
                6: 6,
                7: 7,
                8: 8,
                9: 9,
                ".": 10
            }, i244 = {
                fps: {
                    desc: "Framerate (FPS)",
                    below: 30,
                    average: g244,
                    isInteger: !0
                },
                draws: {
                    desc: "Draw call",
                    isInteger: !0
                },
                frame: {
                    desc: "Frame time (ms)",
                    min: 0,
                    max: 50,
                    average: g244
                },
                instances: {
                    desc: "Instance Count",
                    isInteger: !0
                },
                tricount: {
                    desc: "Triangle",
                    isInteger: !0
                },
                logic: {
                    desc: "Game Logic (ms)",
                    min: 0,
                    max: 50,
                    average: g244,
                    color: "#080"
                },
                physics: {
                    desc: "Physics (ms)",
                    min: 0,
                    max: 50,
                    average: g244
                },
                render: {
                    desc: "Renderer (ms)",
                    min: 0,
                    max: 50,
                    average: g244,
                    color: "#f90"
                },
                present: {
                    desc: "Present (ms)",
                    min: 0,
                    max: 50,
                    average: g244,
                    color: "#f90"
                },
                textureMemory: {
                    desc: "GFX Texture Mem(M)"
                },
                bufferMemory: {
                    desc: "GFX Buffer Mem(M)"
                }
            }, j244 = {
                fontSize: 23,
                quadHeight: .4,
                segmentsPerLine: 8,
                textureWidth: 280,
                textureHeight: 280
            };
            class k244 extends a156 {
                constructor() {
                    super(), this._profilerStats = null, this._showFPS = !1, this._rootNode = null, this._device = null, this._swapchain = null, this._meshRenderer = null, this._canvas = null, this._ctx = null, this._texture = null, this._region = new r159(), this._canvasArr = [], this._regionArr = [this._region], this.digitsData = null, this.offsetData = null, this.pass = null, this._canvasDone = !1, this._statsDone = !1, this._inited = !1, this._lineHeight = j244.textureHeight / (Object.keys(i244).length + 1), this._wordHeight = 0, this._eachNumWidth = 0, this._totalLines = 0, this.lastTime = 0, this._canvas = u143.document.createElement("canvas"), this._ctx = this._canvas.getContext("2d"), this._canvasArr.push(this._canvas);
                }
                init() {
                    r145.querySettings(q145.Category.PROFILING, "showFPS") ? this.showStats() : this.hideStats();
                }
                get _stats() {
                    return q125("Profiler._stats is deprecated, please use Profiler.stats instead."), this._profilerStats;
                }
                get stats() {
                    return this._profilerStats;
                }
                isShowingStats() {
                    return this._showFPS;
                }
                hideStats() {
                    this._showFPS && (this._rootNode && (this._rootNode.active = !1), s143.director.off(s143.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this), s143.director.off(s143.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this), s143.director.off(s143.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this), s143.director.off(s143.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this), s143.director.off(s143.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this), s143.director.off(s143.Director.EVENT_AFTER_RENDER, this.afterRender, this), s143.director.off(s143.Director.EVENT_AFTER_DRAW, this.afterPresent, this), this._showFPS = !1, t185.root.pipeline.profiler = null, s143.game.config.showFPS = !1);
                }
                showStats() {
                    if (!this._showFPS) {
                        if (!this._device) {
                            const k413 = s143.director.root;
                            this._device = b162.gfxDevice, this._swapchain = k413.mainWindow.swapchain;
                        }
                        this.generateCanvas(), this.generateStats(), s143.game.once(s143.Game.EVENT_ENGINE_INITED, this.generateNode, this), s143.game.on(s143.Game.EVENT_RESTART, this.generateNode, this), this._rootNode && (this._rootNode.active = !0), s143.director.on(s143.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this), s143.director.on(s143.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this), s143.director.on(s143.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this), s143.director.on(s143.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this), s143.director.on(s143.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this), s143.director.on(s143.Director.EVENT_AFTER_RENDER, this.afterRender, this), s143.director.on(s143.Director.EVENT_AFTER_DRAW, this.afterPresent, this), this._showFPS = !0, this._canvasDone = !0, this._statsDone = !0, s143.game.config.showFPS = !0;
                    }
                }
                generateCanvas() {
                    if (this._canvasDone)
                        return;
                    const { textureWidth: i413, textureHeight: j413 } = j244;
                    this._ctx && this._canvas && (this._canvas.width = i413, this._canvas.height = j413, this._canvas.style.width = `${this._canvas.width}`, this._canvas.style.height = `${this._canvas.height}`, this._ctx.font = `${j244.fontSize}px Arial`, this._ctx.textBaseline = "top", this._ctx.fillStyle = "#fff", this._texture = this._device.createTexture(new c160(a158.TEX2D, b158.SAMPLED | b158.TRANSFER_DST, t157.RGBA8, i413, j413)), this._region.texExtent.width = i413, this._region.texExtent.height = j413);
                }
                generateStats() {
                    if (this._statsDone || !this._ctx || !this._canvas)
                        return;
                    this._profilerStats = null;
                    const b413 = performance.now();
                    this._ctx.textAlign = "left";
                    let c413 = 0;
                    for (const g413 in i244) {
                        const h413 = i244[g413];
                        this._ctx.fillText(h413.desc, 0, c413 * this._lineHeight), h413.counter = new e244(g413, h413, b413), c413++;
                    }
                    this._totalLines = c413, this._wordHeight = this._totalLines * this._lineHeight / this._canvas.height;
                    for (let e413 = 0; e413 < f244.length; ++e413) {
                        const f413 = this._ctx.measureText(f244[e413]).width;
                        this._eachNumWidth = Math.max(this._eachNumWidth, f413);
                    }
                    for (let d413 = 0; d413 < f244.length; ++d413)
                        this._ctx.fillText(f244[d413], d413 * this._eachNumWidth, this._totalLines * this._lineHeight);
                    this._eachNumWidth /= this._canvas.width, this._profilerStats = i244, this._canvasArr[0] = this._canvas, this._device.copyTexImagesToTexture(this._canvasArr, this._texture, this._regionArr);
                }
                generateNode() {
                    if (this._rootNode && this._rootNode.isValid)
                        return;
                    this._rootNode = new h175("PROFILER_NODE"), this._rootNode._objFlags = s143.Object.Flags.DontSave | s143.Object.Flags.HideInHierarchy, s143.game.addPersistRootNode(this._rootNode);
                    const h412 = new h175("Profiler_Root");
                    h412.parent = this._rootNode;
                    const i412 = j244.quadHeight, j412 = i412 / this._totalLines, k412 = i412 / this._wordHeight, l412 = j412 / j244.fontSize, m412 = this._eachNumWidth * this._canvas.width * l412, n412 = [0, i412, 0, k412, i412, 0, k412, 0, 0, 0, 0, 0], o412 = [0, 2, 1, 0, 3, 2], p412 = [0, 0, -1, 0, 1, 0, -1, 0, 1, this._wordHeight, -1, 0, 0, this._wordHeight, -1, 0];
                    let q412 = 0;
                    for (let w412 = 0; w412 < this._totalLines; w412++)
                        for (let x412 = 0; x412 < j244.segmentsPerLine; x412++) {
                            n412.push(k412 + x412 * m412, i412 - w412 * j412, 0), n412.push(k412 + (x412 + 1) * m412, i412 - w412 * j412, 0), n412.push(k412 + (x412 + 1) * m412, i412 - (w412 + 1) * j412, 0), n412.push(k412 + x412 * m412, i412 - (w412 + 1) * j412, 0), q412 = 4 * (w412 * j244.segmentsPerLine + x412 + 1), o412.push(0 + q412, 2 + q412, 1 + q412, 0 + q412, 3 + q412, 2 + q412);
                            const y412 = w412 * j244.segmentsPerLine + x412, z412 = Math.floor(y412 / 4), a413 = y412 - 4 * z412;
                            p412.push(0, this._wordHeight, z412, a413), p412.push(this._eachNumWidth, this._wordHeight, z412, a413), p412.push(this._eachNumWidth, 1, z412, a413), p412.push(0, 1, z412, a413);
                        }
                    this._meshRenderer = h412.addComponent(c244), this._meshRenderer.mesh = j186({
                        positions: n412,
                        indices: o412,
                        colors: p412
                    });
                    const r412 = new c178();
                    r412.initialize({
                        effectName: "util/profiler"
                    });
                    const s412 = this.pass = r412.passes[0], t412 = s412.getBinding("mainTexture"), u412 = s412.getBinding("digits"), v412 = s412.getBinding("offset");
                    s412.bindTexture(t412, this._texture), this.digitsData = s412.blocks[u412], this.offsetData = s412.blocks[v412], this.offsetData[3] = -1, this._meshRenderer.material = r412, this._meshRenderer.node.layer = w168.Enum.PROFILER, this._inited = !0;
                }
                beforeUpdate() {
                    if (!this._profilerStats)
                        return;
                    const g412 = performance.now();
                    this._profilerStats.frame.counter.start(g412), this._profilerStats.logic.counter.start(g412);
                }
                afterUpdate() {
                    if (!this._profilerStats)
                        return;
                    const f412 = performance.now();
                    s143.director.isPaused() ? this._profilerStats.frame.counter.start(f412) : this._profilerStats.logic.counter.end(f412);
                }
                beforePhysics() {
                    if (!this._profilerStats)
                        return;
                    const e412 = performance.now();
                    this._profilerStats.physics.counter.start(e412);
                }
                afterPhysics() {
                    if (!this._profilerStats)
                        return;
                    const d412 = performance.now();
                    this._profilerStats.physics.counter.end(d412);
                }
                beforeDraw() {
                    if (!this._profilerStats || !this._inited)
                        return;
                    const x411 = this._swapchain.surfaceTransform, y411 = this._device.capabilities.clipSpaceSignY;
                    if (x411 !== this.offsetData[3]) {
                        const a412 = n147[x411];
                        let b412 = -.9, c412 = -.9 * y411;
                        i157.isXR && (b412 = -.5, c412 = -.5 * y411), this.offsetData[0] = b412 * a412[0] + c412 * a412[2], this.offsetData[1] = b412 * a412[1] + c412 * a412[3], this.offsetData[2] = this._eachNumWidth, this.offsetData[3] = x411;
                    }
                    this.pass.setRootBufferDirty(!0), this._meshRenderer.model ? t185.root.pipeline.profiler = this._meshRenderer.model : t185.root.pipeline.profiler = null;
                    const z411 = performance.now();
                    this._profilerStats.render.counter.start(z411);
                }
                afterRender() {
                    if (!this._profilerStats || !this._inited)
                        return;
                    const w411 = performance.now();
                    this._profilerStats.render.counter.end(w411), this._profilerStats.present.counter.start(w411);
                }
                afterPresent() {
                    if (!this._profilerStats || !this._inited)
                        return;
                    const l411 = performance.now();
                    if (this._profilerStats.frame.counter.end(l411), this._profilerStats.fps.counter.frame(l411), this._profilerStats.present.counter.end(l411), l411 - this.lastTime < g244)
                        return;
                    this.lastTime = l411;
                    const m411 = this._device;
                    this._profilerStats.draws.counter.value = m411.numDrawCalls, this._profilerStats.instances.counter.value = m411.numInstances, this._profilerStats.bufferMemory.counter.value = m411.memoryStatus.bufferSize / 1048576, this._profilerStats.textureMemory.counter.value = m411.memoryStatus.textureSize / 1048576, this._profilerStats.tricount.counter.value = m411.numTris;
                    let n411 = 0;
                    const o411 = this.digitsData;
                    for (const p411 in this._profilerStats) {
                        const q411 = this._profilerStats[p411];
                        q411.counter.sample(l411);
                        const r411 = q411.counter.human().toString();
                        for (let s411 = j244.segmentsPerLine - 1; s411 >= 0; s411--) {
                            const t411 = n411 * j244.segmentsPerLine + s411, u411 = r411[r411.length - (j244.segmentsPerLine - s411)];
                            let v411 = h244[u411];
                            void 0 === v411 && (v411 = 11), o411[t411] = v411;
                        }
                        n411++;
                    }
                }
            }
            g125("Profiler", k244);
            const l244 = g125("profiler", new k244());
            var m244;
            t185.registerSystem("profiler", l244, 0), s143.profiler = l244, function (w410) {
                var x410, y410, z410, a411, b411, c411, d411, e411, f411, g411;
                (x410 = w410.MixBlend || (w410.MixBlend = {}))[x410.setup = 0] = "setup", x410[x410.first = 1] = "first", x410[x410.replace = 2] = "replace", x410[x410.add = 3] = "add", (y410 = w410.MixDirection || (w410.MixDirection = {}))[y410.mixIn = 0] = "mixIn", y410[y410.mixOut = 1] = "mixOut", (z410 = w410.TimelineType || (w410.TimelineType = {}))[z410.rotate = 0] = "rotate", z410[z410.translate = 1] = "translate", z410[z410.scale = 2] = "scale", z410[z410.shear = 3] = "shear", z410[z410.attachment = 4] = "attachment", z410[z410.color = 5] = "color", z410[z410.deform = 6] = "deform", z410[z410.event = 7] = "event", z410[z410.drawOrder = 8] = "drawOrder", z410[z410.ikConstraint = 9] = "ikConstraint", z410[z410.transformConstraint = 10] = "transformConstraint", z410[z410.pathConstraintPosition = 11] = "pathConstraintPosition", z410[z410.pathConstraintSpacing = 12] = "pathConstraintSpacing", z410[z410.pathConstraintMix = 13] = "pathConstraintMix", z410[z410.twoColor = 14] = "twoColor", function (k411) {
                    k411[k411.start = 0] = "start", k411[k411.interrupt = 1] = "interrupt", k411[k411.end = 2] = "end", k411[k411.dispose = 3] = "dispose", k411[k411.complete = 4] = "complete", k411[k411.event = 5] = "event";
                }(w410.EventType || (w410.EventType = {})), (a411 = w410.BlendMode || (w410.BlendMode = {}))[a411.Normal = 0] = "Normal", a411[a411.Additive = 1] = "Additive", a411[a411.Multiply = 2] = "Multiply", a411[a411.Screen = 3] = "Screen", (b411 = w410.TransformMode || (w410.TransformMode = {}))[b411.Normal = 0] = "Normal", b411[b411.OnlyTranslation = 1] = "OnlyTranslation", b411[b411.NoRotationOrReflection = 2] = "NoRotationOrReflection", b411[b411.NoScale = 3] = "NoScale", b411[b411.NoScaleOrReflection = 4] = "NoScaleOrReflection", (c411 = w410.PositionMode || (w410.PositionMode = {}))[c411.Fixed = 0] = "Fixed", c411[c411.Percent = 1] = "Percent", (d411 = w410.SpacingMode || (w410.SpacingMode = {}))[d411.Length = 0] = "Length", d411[d411.Fixed = 1] = "Fixed", d411[d411.Percent = 2] = "Percent", (e411 = w410.RotateMode || (w410.RotateMode = {}))[e411.Tangent = 0] = "Tangent", e411[e411.Chain = 1] = "Chain", e411[e411.ChainScale = 2] = "ChainScale", (f411 = w410.TextureFilter || (w410.TextureFilter = {}))[f411.Nearest = 9728] = "Nearest", f411[f411.Linear = 9729] = "Linear", f411[f411.MipMap = 9987] = "MipMap", f411[f411.MipMapNearestNearest = 9984] = "MipMapNearestNearest", f411[f411.MipMapLinearNearest = 9985] = "MipMapLinearNearest", f411[f411.MipMapNearestLinear = 9986] = "MipMapNearestLinear", f411[f411.MipMapLinearLinear = 9987] = "MipMapLinearLinear", (g411 = w410.TextureWrap || (w410.TextureWrap = {}))[g411.MirroredRepeat = 33648] = "MirroredRepeat", g411[g411.ClampToEdge = 33071] = "ClampToEdge", g411[g411.Repeat = 10497] = "Repeat", function (j411) {
                    j411[j411.Region = 0] = "Region", j411[j411.BoundingBox = 1] = "BoundingBox", j411[j411.Mesh = 2] = "Mesh", j411[j411.LinkedMesh = 3] = "LinkedMesh", j411[j411.Path = 4] = "Path", j411[j411.Point = 5] = "Point", j411[j411.Clipping = 6] = "Clipping";
                }(w410.AttachmentType || (w410.AttachmentType = {}));
            }(m244 || (m244 = {}));
            var n244 = m244;
            let o244 = 0, p244 = 0;
            class q244 {
                constructor() {
                    this.start = void 0, this.interrupt = void 0, this.end = void 0, this.dispose = void 0, this.complete = void 0, this.event = void 0;
                }
                static getListeners(t410, u410) {
                    if (!t410.listener) {
                        t410.listener = new q244();
                        const v410 = ++p244;
                        u410.setTrackEntryListener(v410, t410), q244._trackSet.set(v410, t410);
                    }
                    return t410.listener;
                }
                static emitListener(p410, q410, r410) {
                    const s410 = q244._listenerSet.get(p410);
                    s410 && s410 && s410(q410, r410);
                }
                static emitTrackEntryListener(k410, l410, m410, n410) {
                    const o410 = this._trackSet.get(k410);
                    if (o410)
                        switch (n410) {
                            case n244.EventType.start:
                                o410.listener.start && o410.listener.start(l410);
                                break;
                            case n244.EventType.interrupt:
                                o410.listener.interrupt && o410.listener.interrupt(l410);
                                break;
                            case n244.EventType.end:
                                o410.listener.end && o410.listener.end(l410);
                                break;
                            case n244.EventType.dispose:
                                o410.listener.dispose && o410.listener.dispose(l410), this._trackSet.delete(k410), o410.listener = null;
                                break;
                            case n244.EventType.complete:
                                o410.listener.complete && o410.listener.complete(l410);
                                break;
                            case n244.EventType.event:
                                o410.listener.event && o410.listener.event(l410, m410);
                                break;
                            default:
                                q125("TrackEntry doesn't handled", n410);
                        }
                }
                static addListener(i410) {
                    const j410 = ++o244;
                    return q244._listenerSet.set(j410, i410), j410;
                }
            }
            var r244;
            q244._listenerSet = new Map(), q244._trackSet = new Map(), globalThis.TrackEntryListeners = q244;
            const s244 = 1 / 60;
            u137(m188);
            const t244 = u137(o188);
            class u244 {
                constructor() {
                    this.a = 0, this.b = 0, this.c = 0, this.d = 0, this.worldX = 0, this.worldY = 0;
                }
            }
            class v244 {
                constructor() {
                    this.vCount = 0, this.iCount = 0, this.vData = null, this.iData = null, this.meshes = [];
                }
            }
            class w244 {
                constructor() {
                    this.iCount = 0, this.blendMode = 0, this.textureID = 0;
                }
            }
            class x244 {
                constructor(h410) {
                    this._instance = null, this._state = null, this._skeletonData = null, this._skeleton = null, this._privateMode = !1, this._curIndex = -1, this._isCompleted = !1, this._maxFrameIdex = 0, this._frameIdx = -1, this._inited = !1, this._invalid = !0, this._enableCacheAttachedInfo = !1, this._skeletonInfo = null, this._animationName = null, this.isCompleted = !1, this.totalTime = 0, this.frames = [], this._privateMode = !1, this._inited = !1, this._invalid = !0, this._instance = new n244.SkeletonInstance(), this._instance.isCache = !0, this._skeletonData = h410, this._skeleton = this._instance.initSkeleton(h410), this._instance.setUseTint(!0);
                }
                init(f410, g410) {
                    this._inited = !0, this._animationName = g410, this._skeletonInfo = f410;
                }
                get skeleton() {
                    return this._skeleton;
                }
                setSkin(e410) {
                    this._skeleton && this._skeleton.setSkinByName(e410), this._instance.setSkin(e410);
                }
                setAnimation(z409) {
                    const a410 = this._skeletonData.animations;
                    let b410 = null;
                    a410.forEach(d410 => {
                        d410.name === z409 && (b410 = d410);
                    }), b410 ? (this._maxFrameIdex = Math.floor(b410.duration / s244), this._maxFrameIdex <= 0 && (this._maxFrameIdex = 1), this._instance.setAnimation(0, z409, !1)) : q125(`find no animation named ${z409} !!!`);
                }
                updateToFrame(x409) {
                    if (this._inited && (this.begin(), this.needToUpdate(x409)))
                        do {
                            this._frameIdx++, this.totalTime += s244, this._instance.updateAnimation(s244);
                            const y409 = this._instance.updateRenderData();
                            this.updateRenderData(this._frameIdx, y409), this._frameIdx >= this._maxFrameIdex && (this.isCompleted = !0);
                        } while (this.needToUpdate(x409));
                }
                getFrame(v409) {
                    const w409 = v409 % this._maxFrameIdex;
                    return this.frames[w409];
                }
                invalidAnimationFrames() {
                    this._curIndex = -1, this._isCompleted = !1, this.frames.length = 0;
                }
                updateRenderData(z408, a409) {
                    const b409 = a409.vCount, c409 = a409.iCount, d409 = t244 / Float32Array.BYTES_PER_ELEMENT, e409 = new Uint8Array(Float32Array.BYTES_PER_ELEMENT * d409 * b409), f409 = new Uint16Array(c409), g409 = n244.wasmUtil.wasm.HEAPU8, h409 = a409.vPtr, i409 = b409 * Float32Array.BYTES_PER_ELEMENT * d409;
                    e409.set(g409.subarray(h409, h409 + i409));
                    const j409 = a409.iPtr, k409 = Uint16Array.BYTES_PER_ELEMENT * c409;
                    new Uint8Array(f409.buffer).set(g409.subarray(j409, j409 + k409));
                    const l409 = new v244();
                    l409.vCount = b409, l409.iCount = c409, l409.vData = e409, l409.iData = f409;
                    const m409 = a409.getData(), n409 = m409.size();
                    for (let t409 = 0; t409 < n409; t409 += 6) {
                        const u409 = new w244();
                        u409.iCount = m409.get(t409 + 3), u409.blendMode = m409.get(t409 + 4), u409.textureID = m409.get(t409 + 5), l409.meshes.push(u409);
                    }
                    const o409 = this._skeleton.bones, p409 = [];
                    o409.forEach(r409 => {
                        const s409 = new u244();
                        s409.a = r409.a, s409.b = r409.b, s409.c = r409.c, s409.d = r409.d, s409.worldX = r409.worldX, s409.worldY = r409.worldY, p409.push(s409);
                    }), this.frames[z408] = {
                        model: l409,
                        boneInfos: p409
                    };
                }
                begin() {
                    if (!this._invalid)
                        return;
                    const w408 = this._skeletonInfo, x408 = null == w408 ? void 0 : w408.curAnimationCache;
                    x408 && x408 !== this && (this._privateMode ? x408.invalidAllFrame() : x408.updateToFrame(0));
                    const y408 = null == w408 ? void 0 : w408.listener;
                    this._instance.setAnimation(0, this._animationName, !1), this.bind(y408), w408.curAnimationCache = this, this._frameIdx = -1, this.isCompleted = !1, this.totalTime = 0, this._invalid = !1;
                }
                end() {
                    this.needToUpdate() || (this._skeletonInfo.curAnimationCache = null, this.frames.length = this._frameIdx + 1, this.isCompleted = !0, this.unbind(this._skeletonInfo.listener));
                }
                bind(t408) {
                    t408.complete = v408 => {
                        v408 && v408.animation.name === this._animationName && (this.isCompleted = !0);
                    };
                }
                unbind(s408) {
                    s408.complete = null;
                }
                needToUpdate(r408) {
                    return !this.isCompleted && this.totalTime < 30 && (void 0 === r408 || this._frameIdx < r408);
                }
                isInited() {
                    return this._inited;
                }
                isInvalid() {
                    return this._invalid;
                }
                invalidAllFrame() {
                    this.isCompleted = !1, this._invalid = !0;
                }
                enableCacheAttachedInfo() {
                    this._enableCacheAttachedInfo || (this._enableCacheAttachedInfo = !0, this.invalidAllFrame());
                }
                clear() {
                    this._inited = !1, this.invalidAllFrame();
                }
                destroy() {
                    this._instance && (this._instance.destroy(), this._instance = null);
                }
            }
            class y244 {
                constructor() {
                    this._privateMode = void 0, this._skeletonCache = void 0, this._animationPool = void 0, this._sharedCacheMap = new Map(), this._privateMode = !1, this._animationPool = {}, this._skeletonCache = {};
                }
                enablePrivateMode() {
                    this._privateMode = !0;
                }
                clear() {
                    this._animationPool = {}, this._skeletonCache = {};
                }
                invalidAnimationCache(n408) {
                    const o408 = this._skeletonCache[n408];
                    if (!o408 || !o408.skeleton)
                        return;
                    const p408 = o408.animationsCache;
                    for (const q408 in p408)
                        p408[q408].invalidAllFrame();
                }
                destroySkeleton(a408) {
                    if (!this._privateMode) {
                        let m408 = this._sharedCacheMap.get(a408);
                        if (m408) {
                            if (m408 -= 1, m408 > 0)
                                return void this._sharedCacheMap.set(a408, m408);
                            this._sharedCacheMap.delete(a408);
                        }
                    }
                    const b408 = this._privateMode ? (k408, l408) => {
                        l408.destroy();
                    } : (i408, j408) => {
                        this._animationPool[`${a408}#${i408}`] = j408, j408.clear();
                    }, c408 = this._skeletonCache[a408];
                    if (!c408)
                        return;
                    const d408 = c408.animationsCache;
                    for (const g408 in d408) {
                        const h408 = d408[g408];
                        h408 && b408(g408, h408);
                    }
                    c408.skeleton && n244.wasmUtil.destroySpineSkeleton(c408.skeleton), delete this._skeletonCache[a408];
                }
                createSkeletonInfo(u407) {
                    const v407 = u407.uuid, w407 = u407.getRuntimeData();
                    if (!this._privateMode) {
                        let z407 = this._sharedCacheMap.get(v407);
                        z407 ? z407 += 1 : z407 = 1, this._sharedCacheMap.set(v407, z407);
                    }
                    if (this._skeletonCache[v407])
                        return this._skeletonCache[v407];
                    const x407 = new n244.Skeleton(w407), y407 = new q244();
                    return this._skeletonCache[v407] = {
                        skeleton: x407,
                        clipper: null,
                        state: null,
                        listener: y407,
                        animationsCache: {},
                        curAnimationCache: null,
                        assetUUID: v407
                    };
                }
                getSkeletonInfo(s407) {
                    const t407 = s407.uuid;
                    return this._skeletonCache[t407];
                }
                getAnimationCache(p407, q407) {
                    const r407 = this._skeletonCache[p407];
                    return r407 ? r407.animationsCache[q407] : null;
                }
                initAnimationCache(h407, i407, j407) {
                    const k407 = i407.getRuntimeData();
                    if (!k407)
                        return null;
                    const l407 = this._skeletonCache[h407];
                    if (!l407 || !l407.skeleton)
                        return null;
                    const m407 = l407.animationsCache;
                    let n407 = m407[j407];
                    if (!n407) {
                        const o407 = `${h407}#${j407}`;
                        n407 = this._animationPool[o407], n407 ? delete this._animationPool[o407] : (n407 = new x244(k407), n407._privateMode = this._privateMode), n407.init(l407, j407), m407[j407] = n407;
                    }
                    return n407.init(l407, j407), n407.setAnimation(j407), n407;
                }
                destroyCachedAnimations(c407) {
                    if (c407) {
                        const f407 = this._animationPool;
                        for (const g407 in f407)
                            g407.includes(c407) && (f407[g407].destroy(), delete f407[g407]);
                    }
                    else {
                        const d407 = this._animationPool;
                        for (const e407 in d407)
                            d407[e407].destroy(), delete d407[e407];
                    }
                }
            }
            var z244, a245, b245, c245, d245, e245, f245, g245, h245, i245;
            r244 = y244, y244.FrameTime = s244, y244.sharedCache = new r244();
            let j245 = (z244 = e151("sp.SkeletonData"), a245 = a131([j166]), b245 = a131([b146]), z244((d245 = class extends t163 {
                get skeletonJsonStr() {
                    return this._skeletonJson ? JSON.stringify(this._skeletonJson) : "";
                }
                get skeletonJson() {
                    return this._skeletonJson;
                }
                set skeletonJson(b407) {
                    this.reset(), this._skeletonJson = "string" == typeof b407 ? JSON.parse(b407) : b407, !this._uuid && b407.skeleton && (this._uuid = b407.skeleton.hash);
                }
                get atlasText() {
                    return this._atlasText;
                }
                set atlasText(a407) {
                    this._atlasText = a407, this.reset();
                }
                get _nativeAsset() {
                    return this._buffer;
                }
                set _nativeAsset(z406) {
                    this._buffer = z406, this.reset();
                }
                constructor() {
                    super(), this._skeletonJson = e245 && e245(), this.textures = f245 && f245(), this.textureNames = g245 && g245(), this.scale = h245 && h245(), this._atlasText = i245 && i245(), this._buffer = void 0, this._skeletonCache = null, this._skinsEnum = null, this._animsEnum = null, this.reset();
                }
                createNode(x406) {
                    const y406 = new h175(this.name);
                    return y406.addComponent("cc.Skeleton").skeletonData = this, x406(null, y406);
                }
                reset() {
                    this._skeletonCache = null;
                }
                resetEnums() { }
                getRuntimeData(s406) {
                    if (this._skeletonCache)
                        return this._skeletonCache;
                    if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0)
                        return s406 || r125(`${this.name} no textures found!`), null;
                    const t406 = n244.wasmUtil.querySpineSkeletonDataByUUID(this._uuid);
                    if (t406)
                        this._skeletonCache = t406;
                    else if (this.skeletonJsonStr)
                        this._skeletonCache = n244.wasmUtil.createSpineSkeletonDataWithJson(this.skeletonJsonStr, this._atlasText), n244.wasmUtil.registerSpineSkeletonDataWithUUID(this._skeletonCache, this._uuid);
                    else {
                        const u406 = new Uint8Array(this._nativeAsset), v406 = u406.length, w406 = n244.wasmUtil.queryStoreMemory(v406);
                        n244.wasmUtil.wasm.HEAPU8.subarray(w406, w406 + v406).set(u406), this._skeletonCache = n244.wasmUtil.createSpineSkeletonDataWithBinary(v406, this._atlasText), n244.wasmUtil.registerSpineSkeletonDataWithUUID(this._skeletonCache, this._uuid);
                    }
                    return this._skeletonCache;
                }
                getSkinsEnum() {
                    if (this._skinsEnum)
                        return this._skinsEnum;
                    const o406 = this.getRuntimeData(!0);
                    if (o406) {
                        const p406 = o406.skins, q406 = {};
                        for (let r406 = 0; r406 < p406.length; r406++)
                            q406[p406[r406].name] = r406;
                        return this._skinsEnum = p127(q406);
                    }
                    return null;
                }
                getAnimsEnum() {
                    if (this._animsEnum && Object.keys(this._animsEnum).length > 1)
                        return this._animsEnum;
                    const k406 = this.getRuntimeData(!0);
                    if (k406) {
                        const l406 = {
                            "<None>": 0
                        }, m406 = k406.animations;
                        for (let n406 = 0; n406 < m406.length; n406++)
                            l406[m406[n406].name] = n406 + 1;
                        return this._animsEnum = p127(l406);
                    }
                    return null;
                }
                destroy() {
                    return y244.sharedCache.destroyCachedAnimations(this._uuid), this._skeletonCache && n244.wasmUtil.registerSpineSkeletonDataWithUUID(this._skeletonCache, this._uuid), super.destroy();
                }
            }, e245 = p130(d245.prototype, "_skeletonJson", [j151], function () {
                return null;
            }), f245 = p130(d245.prototype, "textures", [j151, a245], function () {
                return [];
            }), g245 = p130(d245.prototype, "textureNames", [j151, b245], function () {
                return [];
            }), h245 = p130(d245.prototype, "scale", [j151], function () {
                return 1;
            }), i245 = p130(d245.prototype, "_atlasText", [j151], function () {
                return "";
            }), c245 = d245)) || c245);
            s143.internal.SpineSkeletonData = j245;
            class k245 extends a156 {
                constructor() {
                    super(), this._skeletons = new Set();
                }
                static getInstance() {
                    return k245._instance || (k245._instance = new k245(), t185.registerSystem(k245.ID, k245._instance, a156.Priority.HIGH)), k245._instance;
                }
                add(j406) {
                    j406 && (this._skeletons.has(j406) || this._skeletons.add(j406));
                }
                remove(i406) {
                    i406 && this._skeletons.has(i406) && this._skeletons.delete(i406);
                }
                postUpdate(f406) {
                    this._skeletons && this._skeletons.forEach(h406 => {
                        h406.updateAnimation(f406);
                    });
                }
                prepareRenderData() {
                    this._skeletons && this._skeletons.forEach(e406 => {
                        e406.markForUpdateRenderData();
                    });
                }
            }
            k245.ID = "SKELETON", k245._instance = void 0, s143.internal.SpineSkeletonSystem = k245;
            const l245 = new o147();
            class m245 {
                constructor() {
                    this._isInitialized = !1, this._skeletonBones = null, this._socketNodes = null, this._keysToDelete = [], this._isInitialized = !1;
                }
                init(b406) {
                    var c406;
                    this._isInitialized = !1, b406 && 0 !== (null === (c406 = b406.socketNodes) || void 0 === c406 ? void 0 : c406.size) && (this._skeletonBones = b406._skeleton.bones, !this._skeletonBones || this._skeletonBones.length < 1 || (this._socketNodes = b406.socketNodes, !this._socketNodes || this._socketNodes.size <= 0 || (this._isInitialized = !0, this._syncAttachedNode())));
                }
                updateSkeletonBones(a406) {
                    this._skeletonBones = a406;
                }
                reset() {
                    this._isInitialized = !1, this._skeletonBones = null, this._socketNodes = null, this._keysToDelete.length = 0;
                }
                _syncAttachedNode() {
                    if (!this._isInitialized)
                        return;
                    const v405 = this._socketNodes;
                    for (const [x405, y405] of v405) {
                        if (!y405 || !y405.isValid) {
                            this._keysToDelete.push(x405);
                            continue;
                        }
                        const z405 = this._skeletonBones[x405];
                        z405 && this.matrixHandle(y405, z405);
                    }
                    if (!(this._keysToDelete.length <= 0)) {
                        for (const w405 of this._keysToDelete)
                            v405.delete(w405);
                        this._keysToDelete.length = 0;
                    }
                }
                matrixHandle(s405, t405) {
                    const u405 = l245;
                    u405.m00 = t405.a, u405.m01 = t405.c, u405.m04 = t405.b, u405.m05 = t405.d, u405.m12 = t405.worldX, u405.m13 = t405.worldY, s405.matrix = l245;
                }
            }
            var n245, o245, p245, q245, r245, s245, t245, u245, v245, w245, x245, y245, z245, a246, b246, c246, d246, e246, f246, g246, h246, i246, j246, k246, l246, m246, n246, o246, p246, q246;
            let r246, s246, t246, u246, v246 = 1e4;
            !function (r405) {
                r405[r405.UNSET = -1] = "UNSET", r405[r405.REALTIME = 0] = "REALTIME", r405[r405.SHARED_CACHE = 1] = "SHARED_CACHE", r405[r405.PRIVATE_CACHE = 2] = "PRIVATE_CACHE";
            }(r246 || (r246 = {})), s127(r246), function (q405) {
                q405[q405.default = 0] = "default";
            }(s246 || (s246 = {})), s127(s246), function (p405) {
                p405[p405["<None>"] = 0] = "<None>";
            }(t246 || (t246 = {})), s127(t246), function (o405) {
                o405[o405.COLORED_TEXTURED = 0] = "COLORED_TEXTURED", o405[o405.TWO_COLORED = 1] = "TWO_COLORED";
            }(u246 || (u246 = {}));
            let w246 = (n245 = e151("sp.Skeleton.SpineSocket"), o245 = a131(h175), n245((q245 = class {
                constructor(m405 = "", n405 = null) {
                    this.path = r245 && r245(), this.target = s245 && s245(), this.path = m405, this.target = n405;
                }
            }, r245 = p130(q245.prototype, "path", [j151], function () {
                return "";
            }), s245 = p130(q245.prototype, "target", [o245, j151], function () {
                return null;
            }), p245 = q245)) || p245);
            a127(w246, "sp.Skeleton.SpineSocket");
            let x246 = (t245 = e151("sp.Skeleton"), u245 = a131(j245), v245 = a131(s246), w245 = a131(t246), x245 = a131(r246), y245 = a131([w246]), z245 = a131(c178), t245(((q246 = class t extends h191 {
                constructor() {
                    super(), this._skeletonData = c246 && c246(), this.defaultSkin = d246 && d246(), this.defaultAnimation = e246 && e246(), this._premultipliedAlpha = f246 && f246(), this._timeScale = g246 && g246(), this._preCacheMode = h246 && h246(), this._cacheMode = i246 && i246(), this._sockets = j246 && j246(), this._useTint = k246 && k246(), this._debugMesh = l246 && l246(), this._debugBones = m246 && m246(), this._debugSlots = n246 && n246(), this._enableBatch = o246 && o246(), this._runtimeData = null, this._skeleton = null, this._instance = null, this._state = null, this._textures = [], this._skeletonInfo = null, this._animationName = "", this._skinName = "", this._drawList = new y155(() => ({
                        material: null,
                        texture: null,
                        indexOffset: 0,
                        indexCount: 0
                    }), 1), this._materialCache = {}, this.paused = !1, this._enumSkins = p127({}), this._enumAnimations = p127({}), this.attachUtil = void 0, this._socketNodes = new Map(), this._cachedSockets = new Map(), this._startEntry = void 0, this._endEntry = void 0, this._paused = !1, this._accTime = 0, this._playCount = 0, this._skeletonCache = null, this._animCache = null, this._animationQueue = [], this._headAniInfo = null, this._isAniComplete = !0, this._playTimes = 0, this._curFrame = null, this._needUpdateSkeltonData = !0, this._listener = null, this._debugRenderer = null, this._startSlotIndex = void 0, this._endSlotIndex = void 0, this._slotTextures = null, this._vLength = 0, this._vBuffer = null, this._iLength = 0, this._iBuffer = null, this._model = void 0, this._tempColor = {
                        r: 0,
                        g: 0,
                        b: 0,
                        a: 0
                    }, this.loop = p246 && p246(), this._useVertexOpacity = !0, this._startEntry = {
                        animation: {
                            name: ""
                        },
                        trackIndex: 0
                    }, this._endEntry = {
                        animation: {
                            name: ""
                        },
                        trackIndex: 0
                    }, this._startSlotIndex = -1, this._endSlotIndex = -1, this.attachUtil = new m245();
                }
                get drawList() {
                    return this._drawList;
                }
                get skeletonData() {
                    return this._skeletonData;
                }
                set skeletonData(k405) {
                    k405 && k405.resetEnums(), this._skeletonData !== k405 && (this.destroyRenderData(), this._skeletonData = k405, this.defaultSkin = "", this.defaultAnimation = "", this._animationName = "", this._skinName = "", this._updateSkeletonData(), this._updateUITransform());
                }
                get _defaultSkinIndex() {
                    if (this.skeletonData) {
                        const i405 = this.skeletonData.getSkinsEnum();
                        if (i405)
                            if ("" === this.defaultSkin) {
                                if (i405.hasOwnProperty(0))
                                    return this._defaultSkinIndex = 0, 0;
                            }
                            else {
                                const j405 = i405[this.defaultSkin];
                                if (void 0 !== j405)
                                    return j405;
                            }
                    }
                    return 0;
                }
                set _defaultSkinIndex(f405) {
                    let g405;
                    if (this.skeletonData && (g405 = this.skeletonData.getSkinsEnum()), !g405)
                        return void r125(`${this.name} skin enums are invalid`);
                    const h405 = g405[f405];
                    void 0 !== h405 ? (this.defaultSkin = String(h405), this.setSkin(this.defaultSkin), this._refreshInspector(), this.markForUpdateRenderData()) : r125(`${this.name} skin enums are invalid`);
                }
                get _animationIndex() {
                    const z404 = this.animation;
                    if (this.skeletonData)
                        if (z404) {
                            const d405 = this.skeletonData.getAnimsEnum();
                            if (d405) {
                                const e405 = d405[z404];
                                if (void 0 !== e405)
                                    return e405;
                            }
                        }
                        else
                            this._refreshInspector();
                    return 0;
                }
                set _animationIndex(a405) {
                    let b405;
                    if (this.skeletonData && (b405 = this.skeletonData.getAnimsEnum()), !b405)
                        return void r125(`${this.name} animation enums are invalid`);
                    const c405 = String(b405[a405]);
                    void 0 !== c405 ? (this.animation = c405, this.animation = c405) : r125(`${this.name} animation enums are invalid`);
                }
                get defaultCacheMode() {
                    return this._cacheMode;
                }
                set defaultCacheMode(y404) {
                    this._cacheMode = y404, this.setAnimationCacheMode(this._cacheMode);
                }
                get premultipliedAlpha() {
                    return this._premultipliedAlpha;
                }
                set premultipliedAlpha(x404) {
                    x404 !== this._premultipliedAlpha && (this._premultipliedAlpha = x404, this._instance.setPremultipliedAlpha(x404), this.markForUpdateRenderData());
                }
                get timeScale() {
                    return this._timeScale;
                }
                set timeScale(w404) {
                    w404 !== this._timeScale && (this._timeScale = w404, this._instance && (this._instance.dtRate = 1 * this._timeScale));
                }
                get useTint() {
                    return this._useTint;
                }
                set useTint(v404) {
                    v404 !== this._useTint && (this._useTint = v404, this._updateUseTint());
                }
                get enableBatch() {
                    return this._enableBatch;
                }
                set enableBatch(u404) {
                    u404 !== this._enableBatch && (this._enableBatch = u404, this._updateBatch());
                }
                get sockets() {
                    return this._sockets;
                }
                set sockets(t404) {
                    this._sockets = t404, this._updateSocketBindings(), this.attachUtil.init(this);
                }
                get debugSlots() {
                    return this._debugSlots;
                }
                set debugSlots(s404) {
                    s404 !== this._debugSlots && (this._debugSlots = s404, this._updateDebugDraw(), this.markForUpdateRenderData());
                }
                get debugBones() {
                    return this._debugBones;
                }
                set debugBones(r404) {
                    r404 !== this._debugBones && (this._debugBones = r404, this._updateDebugDraw(), this.markForUpdateRenderData());
                }
                get debugMesh() {
                    return this._debugMesh;
                }
                set debugMesh(q404) {
                    q404 !== this._debugMesh && (this._debugMesh = q404, this._updateDebugDraw(), this.markForUpdateRenderData());
                }
                get socketNodes() {
                    return this._socketNodes;
                }
                get animation() {
                    return this._animationName;
                }
                set animation(p404) {
                    p404 ? this.setAnimation(0, p404, this.loop) : this.clearAnimation(0);
                }
                get customMaterial() {
                    return this._customMaterial;
                }
                set customMaterial(o404) {
                    this._customMaterial = o404, this.updateMaterial(), this.markForUpdateRenderData();
                }
                __preload() {
                    super.__preload(), this._updateSkeletonData(), this._updateDebugDraw();
                }
                onRestore() {
                    this.updateMaterial(), this.markForUpdateRenderData();
                }
                getState() {
                    return this._state;
                }
                onEnable() {
                    super.onEnable(), this._instance && (this._instance.enable = !0), this._flushAssembler(), k245.getInstance().add(this);
                }
                onDisable() {
                    super.onDisable(), this._instance && (this._instance.enable = !1), k245.getInstance().remove(this);
                }
                onDestroy() {
                    var n404;
                    this._drawList.destroy(), this.destroyRenderData(), this._cleanMaterialCache(), this._vBuffer = null, this._iBuffer = null, this.attachUtil.reset(), null === (n404 = this._slotTextures) || void 0 === n404 || n404.clear(), this._slotTextures = null, this._cachedSockets.clear(), this._socketNodes.clear(), this._animCache = null, k245.getInstance().remove(this), this._destroySkeletonInfo(this._skeletonCache), this._skeletonCache = null, super.onDestroy();
                }
                clearAnimation(m404) {
                    this.isAnimationCached() || (this.clearTrack(m404 || 0), this.setToSetupPose());
                }
                clearAnimations() {
                    this.isAnimationCached() || (this.clearTracks(), this.setToSetupPose());
                }
                _updateSkeletonData() {
                    const l404 = this._skeletonData;
                    if (!l404)
                        return this._runtimeData = null, this._state = null, this._skeleton = null, this._textures = [], void this._refreshInspector();
                    this._instance && (this._instance.dtRate = 1 * this._timeScale), this._needUpdateSkeltonData = !1, this._runtimeData = l404.getRuntimeData(), this._runtimeData && (this.setSkeletonData(this._runtimeData), this._textures = l404.textures, this._refreshInspector(), this.defaultAnimation && (this.animation = this.defaultAnimation.toString()), this.defaultSkin && "" !== this.defaultSkin && this.setSkin(this.defaultSkin), this._updateUseTint(), this._indexBoneSockets(), this._updateSocketBindings(), this.attachUtil.init(this), this._preCacheMode = this._cacheMode);
                }
                setSkeletonData(i404) {
                    {
                        const k404 = this._skeletonCache;
                        this._cacheMode === r246.SHARED_CACHE ? this._skeletonCache = y244.sharedCache : this._cacheMode === r246.PRIVATE_CACHE ? (this._skeletonCache = new y244(), this._skeletonCache.enablePrivateMode()) : this._skeletonCache = null, k404 !== this._skeletonCache && this._destroySkeletonInfo(k404);
                    }
                    if (this.isAnimationCached()) {
                        (this.debugBones || this.debugSlots) && q125("Debug bones or slots is invalid in cached mode");
                        const j404 = this._skeletonCache.getSkeletonInfo(this._skeletonData);
                        this._skeletonInfo !== j404 && (this._destroySkeletonInfo(this._skeletonCache), this._skeletonInfo = this._skeletonCache.createSkeletonInfo(this._skeletonData), this._skeleton = this._skeletonInfo.skeleton);
                    }
                    else
                        this._skeleton = this._instance.initSkeleton(i404), this._state = this._instance.getAnimationState(), this._instance.setPremultipliedAlpha(this._premultipliedAlpha);
                    this._flushAssembler();
                }
                setSlotsRange(g404, h404) {
                    this.isAnimationCached() ? q125("Slots visible range can not be modified in cached mode.") : (this._startSlotIndex = g404, this._endSlotIndex = h404);
                }
                getAttachment(e404, f404) {
                    return this._skeleton ? this._skeleton.getAttachmentByName(e404, f404) : null;
                }
                setAttachment(c404, d404) {
                    this._skeleton && this._skeleton.setAttachment(c404, d404), this.invalidAnimationCache();
                }
                getTextureAtlas(b404) {
                    return b404.region;
                }
                setAnimation(v403, w403, x403) {
                    if ("string" != typeof w403)
                        return x125(7511), null;
                    if (!this._skeleton.data.findAnimation(w403))
                        return x125(7509, w403), null;
                    let y403 = null;
                    if (void 0 === x403 && (x403 = !0), this._playTimes = x403 ? 0 : 1, this.isAnimationCached()) {
                        if (0 !== v403 && q125("Track index can not greater than 0 in cached mode."), !this._skeletonCache)
                            return null;
                        let a404 = this._skeletonCache.getAnimationCache(this._skeletonData.uuid, w403);
                        var z403;
                        a404 || (a404 = this._skeletonCache.initAnimationCache(this.skeletonData.uuid, this._skeletonData, w403), null === (z403 = a404) || void 0 === z403 || z403.setSkin(this._skinName)), a404 && (this._animationName = w403, this._isAniComplete = !1, this._accTime = 0, this._playCount = 0, this._animCache = a404, this._socketNodes.size > 0 && this._animCache.enableCacheAttachedInfo(), this._animCache.updateToFrame(0), this._curFrame = this._animCache.frames[0]);
                    }
                    else
                        this._animationName = w403, y403 = this._instance.setAnimation(v403, w403, x403);
                    return this.markForUpdateRenderData(), y403;
                }
                addAnimation(p403, q403, r403, s403) {
                    if (s403 = s403 || 0, this.isAnimationCached())
                        return 0 !== p403 && q125("Track index can not greater than 0 in cached mode."), this._animationQueue.push({
                            animationName: q403,
                            loop: r403,
                            delay: s403
                        }), null;
                    if (this._skeleton) {
                        var t403;
                        const u403 = this._skeleton.data.findAnimation(q403);
                        return u403 ? null === (t403 = this._state) || void 0 === t403 ? void 0 : t403.addAnimationWith(p403, u403, r403, s403) : (x125(7510, q403), null);
                    }
                    return null;
                }
                findAnimation(o403) {
                    return this._skeleton ? this._skeleton.data.findAnimation(o403) : null;
                }
                getCurrent(n403) {
                    if (this.isAnimationCached())
                        q125("'getCurrent' interface can not be invoked in cached mode.");
                    else if (this._state)
                        return this._state.getCurrent(n403);
                    return null;
                }
                setSkin(m403) {
                    this._skeleton && this._skeleton.setSkinByName(m403), this._instance.setSkin(m403), this.isAnimationCached() && this._animCache && this._animCache.setSkin(m403), this._skinName = m403, this.invalidAnimationCache();
                }
                updateAnimation(h403) {
                    if (this.markForUpdateRenderData(), !this.paused)
                        if (h403 *= 1 * this._timeScale, this.isAnimationCached()) {
                            if (this._isAniComplete) {
                                var i403;
                                if (0 === this._animationQueue.length && !this._headAniInfo) {
                                    const k403 = this._animCache;
                                    if (k403 && k403.isInvalid()) {
                                        k403.updateToFrame(0);
                                        const l403 = k403.frames;
                                        this._curFrame = l403[l403.length - 1];
                                    }
                                    return;
                                }
                                if (this._headAniInfo || (this._headAniInfo = this._animationQueue.shift()), this._accTime += h403, this._accTime > (null === (i403 = this._headAniInfo) || void 0 === i403 ? void 0 : i403.delay)) {
                                    const j403 = this._headAniInfo;
                                    this._headAniInfo = null, this.setAnimation(0, null == j403 ? void 0 : j403.animationName, null == j403 ? void 0 : j403.loop);
                                }
                                return;
                            }
                            this._updateCache(h403);
                        }
                        else
                            this._instance.updateAnimation(h403);
                }
                _updateCache(c403) {
                    const d403 = this._animCache;
                    if (!d403.isInited())
                        return;
                    const e403 = d403.frames, f403 = y244.FrameTime;
                    0 === this._accTime && 0 === this._playCount && (this._startEntry.animation.name = this._animationName, this._listener && this._listener.start && this._listener.start(this._startEntry)), this._accTime += c403;
                    let g403 = Math.floor(this._accTime / f403);
                    if (d403.isCompleted || d403.updateToFrame(g403), this._curFrame = e403[g403], void 0 !== this._curFrame && this.attachUtil.updateSkeletonBones(this._curFrame.boneInfos), d403.isCompleted && g403 >= e403.length) {
                        if (this._playCount++, this._playTimes > 0 && this._playCount >= this._playTimes)
                            return this._curFrame = e403[e403.length - 1], this._accTime = 0, this._playCount = 0, this._isAniComplete = !0, void this._emitCacheCompleteEvent();
                        this._accTime = 0, g403 = 0, this._curFrame = e403[g403], this._emitCacheCompleteEvent();
                    }
                }
                _emitCacheCompleteEvent() {
                    this._listener && (this._endEntry.animation.name = this._animationName, this._listener.complete && this._listener.complete(this._endEntry), this._listener.end && this._listener.end(this._endEntry));
                }
                updateRenderData() {
                    return this.isAnimationCached() ? this._curFrame ? this._curFrame.model : null : this._instance.updateRenderData();
                }
                _flushAssembler() {
                    const b403 = t.Assembler.getAssembler(this);
                    this._assembler !== b403 && (this._assembler = b403), this._skeleton && this._assembler && (this._renderData = this._assembler.createData(this), this.markForUpdateRenderData(), this._updateColor());
                }
                _render(r402) {
                    let s402 = 0;
                    if (this.renderData && this._drawList.length > 0) {
                        const t402 = this.renderData, u402 = t402.chunk, v402 = u402.vertexAccessor, w402 = t402.getMeshBuffer(), x402 = w402.indexOffset;
                        for (let z402 = 0; z402 < this._drawList.length; z402++) {
                            const a403 = this._drawList.data[z402];
                            a403.texture && r402.commitMiddleware(this, w402, x402 + a403.indexOffset, a403.indexCount, a403.texture, a403.material, this._enableBatch), s402 += a403.indexCount;
                        }
                        const y402 = t402.indices.subarray(0, s402);
                        v402.appendIndices(u402.bufferId, y402), v402.getMeshBuffer(u402.bufferId).setDirty();
                    }
                }
                requestDrawData(k402, l402, m402, n402) {
                    const o402 = this._drawList.add();
                    if (o402.material = k402, l402 < 1e4)
                        o402.texture = this._textures[l402];
                    else {
                        var p402;
                        const q402 = null === (p402 = this._slotTextures) || void 0 === p402 ? void 0 : p402.get(l402);
                        q402 && (o402.texture = q402);
                    }
                    return o402.indexOffset = m402, o402.indexCount = n402, o402;
                }
                _updateBuiltinMaterial() {
                    return r185.get("default-spine-material");
                }
                updateMaterial() {
                    let j402;
                    j402 = this._customMaterial ? this._customMaterial : this._updateBuiltinMaterial(), this.setSharedMaterial(j402, 0), this._cleanMaterialCache();
                }
                getMaterialTemplate() {
                    return null !== this.customMaterial ? this.customMaterial : (this.material || this.updateMaterial(), this.material);
                }
                _cleanMaterialCache() {
                    for (const i402 in this._materialCache)
                        this._materialCache[i402].destroy();
                    this._materialCache = {};
                }
                getMaterialForBlendAndTint(a402, b402, c402) {
                    const d402 = `${c402}/${a402}/${b402}`;
                    let e402 = this._materialCache[d402];
                    if (e402)
                        return e402;
                    const f402 = this.getMaterialTemplate();
                    e402 = new e190({
                        parent: f402,
                        subModelIdx: 0,
                        owner: this
                    }), this._materialCache[d402] = e402, e402.overridePipelineStates({
                        blendState: {
                            blendColor: a147.WHITE,
                            targets: [{
                                    blendEq: l158.ADD,
                                    blendAlphaEq: l158.ADD,
                                    blendSrc: a402,
                                    blendDst: b402,
                                    blendSrcAlpha: a402,
                                    blendDstAlpha: b402
                                }]
                        }
                    });
                    let g402 = !1;
                    c402 === u246.TWO_COLORED && (g402 = !0);
                    const h402 = !this._enableBatch;
                    return e402.recompileShaders({
                        TWO_COLORED: g402,
                        USE_LOCAL: h402
                    }), e402;
                }
                _updateAnimEnum() {
                    let z401;
                    z401 = this.skeletonData ? this.skeletonData.getAnimsEnum() : t246, this._enumAnimations = p127({}), Object.assign(this._enumAnimations, z401), p127.update(this._enumAnimations), n128(this, "_animationIndex", this._enumAnimations);
                }
                _updateSkinEnum() {
                    let y401;
                    y401 = this.skeletonData ? this.skeletonData.getSkinsEnum() : s246, this._enumSkins = p127({}), Object.assign(this._enumSkins, y401), p127.update(this._enumSkins), n128(this, "_defaultSkinIndex", this._enumSkins);
                }
                _refreshInspector() { }
                destroyRenderData() {
                    this._drawList.reset(), super.destroyRenderData();
                }
                createRenderEntity() {
                    const x401 = new l189(e189.DYNAMIC);
                    return x401.setUseLocal(!0), x401;
                }
                markForUpdateRenderData(w401 = !0) {
                    super.markForUpdateRenderData(w401), this._debugRenderer && this._debugRenderer.markForUpdateRenderData(w401);
                }
                syncAttachedNode() {
                    this.attachUtil._syncAttachedNode();
                }
                isAnimationCached() {
                    return this._cacheMode !== r246.REALTIME;
                }
                setAnimationCacheMode(v401) {
                    this._preCacheMode !== v401 && (this._cacheMode = v401, this._preCacheMode = v401, this._instance && (this._instance.isCache = this.isAnimationCached()), this._updateSkeletonData(), this.markForUpdateRenderData());
                }
                setToSetupPose() {
                    this._skeleton && this._skeleton.setToSetupPose();
                }
                setBonesToSetupPose() {
                    this._skeleton && this._skeleton.setBonesToSetupPose();
                }
                setSlotsToSetupPose() {
                    this._skeleton && this._skeleton.setSlotsToSetupPose();
                }
                invalidAnimationCache() {
                    this.isAnimationCached() && this._skeletonCache && this._skeletonCache.invalidAnimationCache(this._skeletonData.uuid);
                }
                findBone(u401) {
                    return this._skeleton ? this._skeleton.findBone(u401) : null;
                }
                findSlot(t401) {
                    return this._skeleton ? this._skeleton.findSlot(t401) : null;
                }
                setMix(q401, r401, s401) {
                    this.isAnimationCached() ? q125("cached mode not support setMix!!!") : this._state && this._instance.setMix(q401, r401, s401);
                }
                clearTracks() {
                    this.isAnimationCached() ? q125("'clearTracks' interface can not be invoked in cached mode.") : this._state && (this._state.clearTracks(), this.setToSetupPose());
                }
                clearTrack(p401) {
                    this.isAnimationCached() ? q125("'clearTrack' interface can not be invoked in cached mode.") : this._state && this._state.clearTrack(p401);
                }
                updateWorldTransform() {
                    this.isAnimationCached() && this._skeleton && this._skeleton.updateWorldTransform();
                }
                _verifySockets(i401) {
                    for (let m401 = 0, n401 = i401.length; m401 < n401; m401++) {
                        const o401 = i401[m401].target;
                        !o401 || o401.parent && o401.parent === this.node || r125(`Target node ${o401.name} is expected to be a direct child of ${this.node.name}`);
                    }
                    const j401 = new Map();
                    i401.forEach(l401 => {
                        l401.target && (j401.get(l401.target) ? r125(`Target node ${l401.target.name} has existed.`) : j401.set(l401.target, !0));
                    });
                }
                _updateSocketBindings() {
                    if (this._skeleton) {
                        this._socketNodes.clear();
                        for (let e401 = 0, f401 = this._sockets.length; e401 < f401; e401++) {
                            const g401 = this._sockets[e401];
                            if (g401.path && g401.target) {
                                const h401 = this._cachedSockets.get(g401.path);
                                if (!h401) {
                                    r125(`Skeleton data does not contain path ${g401.path}`);
                                    continue;
                                }
                                this._socketNodes.set(h401, g401.target);
                            }
                        }
                    }
                }
                _indexBoneSockets() {
                    if (!this._skeleton)
                        return;
                    this._cachedSockets.clear();
                    const w400 = this._skeleton.bones, x400 = d401 => null == d401.parent ? d401.data.name || "<Unamed>" : `${x400(w400[d401.parent.data.index])}/${d401.data.name}`;
                    for (let z400 = 0, a401 = w400.length; z400 < a401; z400++) {
                        const b401 = w400[z400].data, c401 = x400(w400[z400]);
                        this._cachedSockets.set(c401, b401.index);
                    }
                }
                querySockets() {
                    return this._skeleton ? (0 === this._cachedSockets.size && this._indexBoneSockets(), this._cachedSockets.size > 0 ? Array.from(this._cachedSockets.keys()).sort() : []) : [];
                }
                _updateUseTint() {
                    this._cleanMaterialCache(), this.destroyRenderData(), this._assembler && this._skeleton && (this._renderData = this._assembler.createData(this), this.markForUpdateRenderData());
                }
                _updateBatch() {
                    this._cleanMaterialCache(), this.markForUpdateRenderData();
                }
                _updateDebugDraw() {
                    if (this.debugBones || this.debugSlots || this.debugMesh) {
                        if (!this._debugRenderer) {
                            const u400 = new h175("DEBUG_DRAW_NODE");
                            u400.hideFlags |= m152.Flags.DontSave | m152.Flags.HideInHierarchy;
                            const v400 = u400.addComponent(x195);
                            v400.lineWidth = 1, v400.strokeColor = new a147(255, 0, 0, 255), this._debugRenderer = v400, u400.parent = this.node;
                        }
                        this.isAnimationCached() && q125("Debug bones or slots is invalid in cached mode");
                    }
                    else
                        this._debugRenderer && (this._debugRenderer.node.destroy(), this._debugRenderer = null, this.isAnimationCached() || this._instance && this._instance.setDebugMode(!1));
                }
                _updateUITransform() {
                    const q400 = this.node._uiProps.uiTransformComp, r400 = this._runtimeData;
                    if (!r400)
                        return q400.setContentSize(100, 100), q400.anchorX = .5, void (q400.anchorX = .5);
                    const s400 = r400.width, t400 = r400.height;
                    s400 && t400 && (q400.setContentSize(s400, t400), 0 !== s400 && (q400.anchorX = Math.abs(r400.x) / s400), 0 !== t400 && (q400.anchorY = Math.abs(r400.y) / t400));
                }
                _updateColor() {
                    const m400 = this.node._uiProps.opacity;
                    if (this._tempColor.r === this._color.r && this._tempColor.g === this.color.g && this._tempColor.b === this.color.b && this._tempColor.a === m400)
                        return;
                    this.node._uiProps.colorDirty = !0, this._tempColor.r = this._color.r, this._tempColor.g = this._color.g, this._tempColor.b = this._color.b, this._tempColor.a = m400;
                    const n400 = this._color.r / 255, o400 = this._color.g / 255, p400 = this._color.b / 255;
                    this._instance.setColor(n400, o400, p400, m400);
                }
                setVertexEffectDelegate(i400) {
                    if (!this._instance)
                        return;
                    if (!i400)
                        return void this._instance.clearEffect();
                    const j400 = null == i400 ? void 0 : i400.getEffectType();
                    if ("jitter" === j400) {
                        const l400 = null == i400 ? void 0 : i400.getJitterVertexEffect();
                        this._instance.setJitterEffect(l400);
                    }
                    else if ("swirl" === j400) {
                        const k400 = null == i400 ? void 0 : i400.getJitterVertexEffect();
                        this._instance.setSwirlEffect(k400);
                    }
                }
                _ensureListener() {
                    this._listener || (this._listener = new q244());
                }
                setStartListener(g400) {
                    this._ensureListener();
                    const h400 = q244.addListener(g400);
                    this._instance.setListener(h400, n244.EventType.start), this._listener.start = g400;
                }
                setInterruptListener(e400) {
                    this._ensureListener();
                    const f400 = q244.addListener(e400);
                    this._instance.setListener(f400, n244.EventType.interrupt), this._listener.interrupt = e400;
                }
                setEndListener(c400) {
                    this._ensureListener();
                    const d400 = q244.addListener(c400);
                    this._instance.setListener(d400, n244.EventType.end), this._listener.end = c400;
                }
                setDisposeListener(a400) {
                    this._ensureListener();
                    const b400 = q244.addListener(a400);
                    this._instance.setListener(b400, n244.EventType.dispose), this._listener.dispose = a400;
                }
                setCompleteListener(y399) {
                    this._ensureListener();
                    const z399 = q244.addListener(y399);
                    this._instance.setListener(z399, n244.EventType.complete), this._listener.complete = y399;
                }
                setEventListener(w399) {
                    this._ensureListener();
                    const x399 = q244.addListener(w399);
                    this._instance.setListener(x399, n244.EventType.event), this._listener.event = w399;
                }
                setTrackStartListener(u399, v399) {
                    q244.getListeners(u399, this._instance).start = v399;
                }
                setTrackInterruptListener(s399, t399) {
                    q244.getListeners(s399, this._instance).interrupt = t399;
                }
                setTrackEndListener(q399, r399) {
                    q244.getListeners(q399, this._instance).end = r399;
                }
                setTrackDisposeListener(o399, p399) {
                    q244.getListeners(o399, this._instance).dispose = p399;
                }
                setTrackCompleteListener(j399, k399) {
                    q244.getListeners(j399, this._instance).complete = m399 => {
                        const n399 = Math.floor(m399.trackTime / m399.animationEnd);
                        q244.addListener(k399), k399(m399, n399);
                    };
                }
                setTrackEventListener(h399, i399) {
                    q244.getListeners(h399, this._instance).event = i399;
                }
                getDebugShapes() {
                    return this._instance.getDebugShapes();
                }
                setSlotTexture(x398, y398, z398) {
                    if (this.isAnimationCached())
                        return void r125("Cached mode can't change texture of slot");
                    if (!this.findSlot(x398))
                        return void r125(`No slot named:${x398}`);
                    const a399 = y398.width, b399 = y398.height, c399 = z398 || !1;
                    this._instance.resizeSlotRegion(x398, a399, b399, c399), this._slotTextures || (this._slotTextures = new Map());
                    let d399 = 0;
                    this._slotTextures.forEach((f399, g399) => {
                        f399 === y398 && (d399 = g399);
                    }), 0 === d399 && (d399 = ++v246, this._slotTextures.set(d399, y398)), this._instance.setSlotTexture(x398, d399);
                }
                _destroySkeletonInfo(w398) {
                    w398 && this._skeletonInfo && (w398.destroySkeleton(this._skeletonInfo.assetUUID), this._skeletonInfo = null);
                }
            }).SpineSocket = w246, q246.AnimationCacheMode = r246, c246 = p130((b246 = q246).prototype, "_skeletonData", [j151], function () {
                return null;
            }), d246 = p130(b246.prototype, "defaultSkin", [j151], function () {
                return "";
            }), e246 = p130(b246.prototype, "defaultAnimation", [j151], function () {
                return "";
            }), f246 = p130(b246.prototype, "_premultipliedAlpha", [j151], function () {
                return !0;
            }), g246 = p130(b246.prototype, "_timeScale", [j151], function () {
                return 1;
            }), h246 = p130(b246.prototype, "_preCacheMode", [j151], function () {
                return r246.UNSET;
            }), i246 = p130(b246.prototype, "_cacheMode", [j151], function () {
                return r246.REALTIME;
            }), j246 = p130(b246.prototype, "_sockets", [j151], function () {
                return [];
            }), k246 = p130(b246.prototype, "_useTint", [j151], function () {
                return !1;
            }), l246 = p130(b246.prototype, "_debugMesh", [j151], function () {
                return !1;
            }), m246 = p130(b246.prototype, "_debugBones", [j151], function () {
                return !1;
            }), n246 = p130(b246.prototype, "_debugSlots", [j151], function () {
                return !1;
            }), o246 = p130(b246.prototype, "_enableBatch", [j151], function () {
                return !1;
            }), i125(b246.prototype, "skeletonData", [u245], Object.getOwnPropertyDescriptor(b246.prototype, "skeletonData"), b246.prototype), i125(b246.prototype, "_defaultSkinIndex", [v245], Object.getOwnPropertyDescriptor(b246.prototype, "_defaultSkinIndex"), b246.prototype), i125(b246.prototype, "_animationIndex", [w245], Object.getOwnPropertyDescriptor(b246.prototype, "_animationIndex"), b246.prototype), i125(b246.prototype, "defaultCacheMode", [x245], Object.getOwnPropertyDescriptor(b246.prototype, "defaultCacheMode"), b246.prototype), p246 = p130(b246.prototype, "loop", [j151], function () {
                return !0;
            }), i125(b246.prototype, "sockets", [y245], Object.getOwnPropertyDescriptor(b246.prototype, "sockets"), b246.prototype), i125(b246.prototype, "customMaterial", [h152, z245], Object.getOwnPropertyDescriptor(b246.prototype, "customMaterial"), b246.prototype), a246 = b246)) || a246);
            s143.internal.SpineSkeleton = x246;
            const y246 = new a147(0, 0, 255, 255), z246 = new a147(255, 0, 0, 255), a247 = new a147(0, 255, 0, 255), b247 = new a147(255, 255, 0, 255);
            let c247, d247, e247, f247, g247 = null, h247 = null, i247 = !1, j247 = !1;
            const k247 = u137(m188), l247 = u137(o188), m247 = new w146(0, 0, 0);
            function s142(s398, t398) {
                let u398, v398;
                switch (s398) {
                    case 1:
                        u398 = i247 ? k158.ONE : k158.SRC_ALPHA, v398 = k158.ONE;
                        break;
                    case 2:
                        u398 = k158.DST_COLOR, v398 = k158.ONE_MINUS_SRC_ALPHA;
                        break;
                    case 3:
                        u398 = k158.ONE, v398 = k158.ONE_MINUS_SRC_COLOR;
                        break;
                    case 0:
                    default:
                        u398 = i247 ? k158.ONE : k158.SRC_ALPHA, v398 = k158.ONE_MINUS_SRC_ALPHA;
                }
                return t398.getMaterialForBlendAndTint(u398, v398, j247 ? u246.TWO_COLORED : u246.COLORED_TEXTURED);
            }
            const n247 = {
                vCount: 32767,
                ensureAccessor(n398) {
                    let o398 = n398 ? h247 : g247;
                    if (!o398) {
                        const p398 = t185.root.device, q398 = t185.root.batcher2D, r398 = n398 ? o188 : m188;
                        n398 ? (o398 = h247 = new x188(p398, r398, this.vCount), q398.registerBufferAccessor(Number.parseInt("SPINETINT", 36), h247)) : (o398 = g247 = new x188(p398, r398, this.vCount), q398.registerBufferAccessor(Number.parseInt("SPINE", 36), g247));
                    }
                    return o398;
                },
                createData(j398) {
                    let k398 = j398.renderData;
                    if (!k398) {
                        const l398 = j398.useTint || j398.isAnimationCached(), m398 = this.ensureAccessor(l398);
                        k398 = o189.add(l398 ? o188 : m188, m398);
                    }
                    return k398;
                },
                updateRenderData(c395, d395) {
                    c395._skeleton && function (f395) {
                        if (f395.drawList.reset(), 0 === f395.color.a)
                            return;
                        f395._updateColor(), i247 = f395.premultipliedAlpha, j247 = f395.useTint || f395.isAnimationCached(), f395.isAnimationCached() ? function (f397) {
                            const g397 = f397.updateRenderData();
                            if (!g397)
                                return;
                            const h397 = g397.vCount, i397 = g397.iCount;
                            if (h397 < 1 || i397 < 1)
                                return;
                            const j397 = f397.renderData;
                            j397.vertexCount === h397 && j397.indexCount === i397 || (j397.resize(h397, i397), j397.indices = new Uint16Array(i397));
                            const k397 = j397.chunk.vb, l397 = new Uint8Array(k397.buffer, k397.byteOffset, Float32Array.BYTES_PER_ELEMENT * k397.length);
                            l397.set(g397.vData);
                            const m397 = f397.color;
                            if (4294967295 !== m397._val || i247) {
                                c247 = m397.r / 255, d247 = m397.g / 255, e247 = m397.b / 255, f247 = m397.a / 255;
                                for (let c398 = 0; c398 < h397; c398++) {
                                    const d398 = c398 * l247 + 5 * Float32Array.BYTES_PER_ELEMENT, e398 = l397[d398], f398 = l397[d398 + 1], g398 = l397[d398 + 2], h398 = l397[d398 + 3] * f247, i398 = i247 ? h398 / 255 : 1;
                                    l397[d398] = Math.floor(i398 * e398 * c247), l397[d398 + 1] = Math.floor(i398 * f398 * d247), l397[d398 + 2] = Math.floor(i398 * g398 * e247), l397[d398 + 3] = Math.floor(h398), l397[d398 + 4] = Math.floor(l397[d398 + 4] * c247), l397[d398 + 5] = Math.floor(l397[d398 + 5] * d247), l397[d398 + 6] = Math.floor(l397[d398 + 6] * e247), l397[d398 + 7] = i247 ? 255 : 0;
                                }
                            }
                            const n397 = j397.indices;
                            n397.set(g397.iData);
                            const o397 = j397.chunk.vertexOffset;
                            for (let b398 = 0; b398 < i397; b398++)
                                n397[b398] += o397;
                            const p397 = g397.meshes, q397 = p397.length;
                            let r397 = 0, s397 = 0;
                            for (let x397 = 0; x397 < q397; x397++) {
                                const y397 = p397[x397], z397 = s142(y397.blendMode, f397), a398 = y397.textureID;
                                s397 = y397.iCount, f397.requestDrawData(z397, a398, r397, s397), r397 += s397;
                            }
                            const t397 = l247 / Float32Array.BYTES_PER_ELEMENT;
                            if (f397.enableBatch) {
                                const u397 = f397.node.worldMatrix;
                                let v397 = 0;
                                for (let w397 = 0; w397 < h397; w397++)
                                    v397 = w397 * t397, m247.x = k397[v397], m247.y = k397[v397 + 1], m247.z = 0, m247.transformMat4(u397), k397[v397] = m247.x, k397[v397 + 1] = m247.y, k397[v397 + 2] = m247.z;
                            }
                        }(f395) : function (k395) {
                            var l395, m395;
                            const n395 = (k395.useTint ? l247 : k247) / Float32Array.BYTES_PER_ELEMENT, o395 = k395.updateRenderData(), p395 = o395.vCount, q395 = o395.iCount;
                            if (p395 < 1 || q395 < 1)
                                return;
                            const r395 = k395.renderData;
                            r395.vertexCount === p395 && r395.indexCount === q395 || (r395.resize(p395, q395), r395.indices = new Uint16Array(q395), k395._vLength = p395 * Float32Array.BYTES_PER_ELEMENT * n395, k395._vBuffer = new Uint8Array(r395.chunk.vb.buffer, r395.chunk.vb.byteOffset, Float32Array.BYTES_PER_ELEMENT * r395.chunk.vb.length), k395._iLength = Uint16Array.BYTES_PER_ELEMENT * q395, k395._iBuffer = new Uint8Array(r395.indices.buffer));
                            const s395 = r395.chunk.vb, t395 = o395.vPtr, u395 = o395.iPtr, v395 = r395.indices, w395 = n244.wasmUtil.wasm.HEAPU8;
                            null === (l395 = k395._vBuffer) || void 0 === l395 || l395.set(w395.subarray(t395, t395 + k395._vLength), 0), null === (m395 = k395._iBuffer) || void 0 === m395 || m395.set(w395.subarray(u395, u395 + k395._iLength), 0);
                            const x395 = r395.chunk.vertexOffset;
                            for (let e397 = 0; e397 < q395; e397++)
                                v395[e397] += x395;
                            const y395 = o395.getData(), z395 = y395.size();
                            let a396 = 0, b396 = 0;
                            for (let b397 = 0; b397 < z395; b397 += 6) {
                                b396 = y395.get(b397 + 3);
                                const c397 = s142(y395.get(b397 + 4), k395), d397 = y395.get(b397 + 5);
                                k395.requestDrawData(c397, d397, a396, b396), a396 += b396;
                            }
                            if (k395.enableBatch) {
                                const y396 = k395.node.worldMatrix;
                                let z396 = 0;
                                for (let a397 = 0; a397 < p395; a397++)
                                    z396 = a397 * n395, m247.x = s395[z396], m247.y = s395[z396 + 1], m247.transformMat4(y396), s395[z396] = m247.x, s395[z396 + 1] = m247.y, s395[z396 + 2] = 0;
                            }
                            const c396 = k395._debugRenderer, d396 = k395._skeleton;
                            if (c396 && (k395.debugBones || k395.debugSlots || k395.debugMesh)) {
                                c396.clear(), c396.lineWidth = 5;
                                const e396 = k395.getDebugShapes(), f396 = e396.size();
                                for (let l396 = 0; l396 < f396; l396++) {
                                    const m396 = e396.get(l396);
                                    if (0 === m396.type && k395.debugSlots) {
                                        c396.strokeColor = y246;
                                        const u396 = m396.vOffset * n395, v396 = m396.vCount * n395;
                                        c396.moveTo(s395[u396], s395[u396 + 1]);
                                        for (let w396 = u396 + n395, x396 = u396 + v396; w396 < x396; w396 += n395)
                                            c396.lineTo(s395[w396], s395[w396 + 1]);
                                        c396.close(), c396.stroke();
                                    }
                                    else if (1 === m396.type && k395.debugMesh) {
                                        c396.strokeColor = b247;
                                        const n396 = m396.iCount, o396 = m396.iOffset;
                                        for (let p396 = o396, q396 = o396 + n396; p396 < q396; p396 += 3) {
                                            const r396 = v395[p396] * n395, s396 = v395[p396 + 1] * n395, t396 = v395[p396 + 2] * n395;
                                            c396.moveTo(s395[r396], s395[r396 + 1]), c396.lineTo(s395[s396], s395[s396 + 1]), c396.lineTo(s395[t396], s395[t396 + 1]), c396.close(), c396.stroke();
                                        }
                                    }
                                }
                                if (k395.debugBones) {
                                    c396.strokeColor = z246, c396.fillColor = y246;
                                    for (let g396 = 0, h396 = d396.bones.length; g396 < h396; g396++) {
                                        const i396 = d396.bones[g396], j396 = i396.data.length * i396.a + i396.worldX, k396 = i396.data.length * i396.c + i396.worldY;
                                        c396.moveTo(i396.worldX, i396.worldY), c396.lineTo(j396, k396), c396.stroke(), c396.circle(i396.worldX, i396.worldY, 1.5 * Math.PI), c396.fill(), 0 === g396 && (c396.fillColor = a247);
                                    }
                                }
                            }
                        }(f395);
                        const g395 = f395.renderData, h395 = j247 ? h247 : g247;
                        f395.syncAttachedNode(), (g395.vertexCount > 0 || g395.indexCount > 0) && h395.getMeshBuffer(g395.chunk.bufferId).setDirty();
                    }(c395);
                }
            };
            s143.internal.SpineAssembler = n247;
            const o247 = {
                getAssembler: () => n247
            };
            x246.Assembler = o247;
            const p247 = globalThis.spine, q247 = p247.VertexEffectDelegate;
            let r247, s247, t247, u247, v247, w247, x247, y247, z247;
            !function (b395) {
                b395[b395.REGION = 0] = "REGION", b395[b395.BOUNDING_BOX = 1] = "BOUNDING_BOX", b395[b395.MESH = 2] = "MESH", b395[b395.SKINNED_MESH = 3] = "SKINNED_MESH";
            }(r247 || (r247 = {})), s127(r247), function (a395) {
                a395[a395.START = 0] = "START", a395[a395.INTERRUPT = 1] = "INTERRUPT", a395[a395.END = 2] = "END", a395[a395.DISPOSE = 3] = "DISPOSE", a395[a395.COMPLETE = 4] = "COMPLETE", a395[a395.EVENT = 5] = "EVENT";
            }(s247 || (s247 = {})), s127(s247), s143.internal.SpineAnimationEventType = s247, g125("sp", Object.freeze({
                __proto__: null,
                timeScale: 1,
                get AnimationCacheMode() {
                    return r246;
                },
                get DefaultSkinsEnum() {
                    return s246;
                },
                get DefaultAnimsEnum() {
                    return t246;
                },
                get SpineMaterialType() {
                    return u246;
                },
                SpineSocket: w246,
                Skeleton: x246,
                SkeletonData: j245,
                simpleSpineAssembler: o247,
                spine: p247,
                VertexEffectDelegate: q247,
                get ATTACHMENT_TYPE() {
                    return r247;
                },
                get AnimationEventType() {
                    return s247;
                }
            })), function (z394) {
                z394[z394.ORTHO = 0] = "ORTHO", z394[z394.HEX = 1] = "HEX", z394[z394.ISO = 2] = "ISO";
            }(t247 || (t247 = {})), s127(t247), function (y394) {
                y394[y394.NONE = 0] = "NONE", y394[y394.MAP = 1] = "MAP", y394[y394.LAYER = 2] = "LAYER", y394[y394.OBJECTGROUP = 3] = "OBJECTGROUP", y394[y394.OBJECT = 4] = "OBJECT", y394[y394.TILE = 5] = "TILE";
            }(u247 || (u247 = {})), s127(u247), function (x394) {
                x394[x394.HORIZONTAL = 2147483648] = "HORIZONTAL", x394[x394.VERTICAL = 1073741824] = "VERTICAL", x394[x394.DIAGONAL = 536870912] = "DIAGONAL", x394[x394.FLIPPED_ALL = 4026531840] = "FLIPPED_ALL", x394[x394.FLIPPED_MASK = 268435455] = "FLIPPED_MASK";
            }(v247 || (v247 = {})), s127(v247), function (w394) {
                w394[w394.STAGGERAXIS_X = 0] = "STAGGERAXIS_X", w394[w394.STAGGERAXIS_Y = 1] = "STAGGERAXIS_Y";
            }(w247 || (w247 = {})), s127(w247), function (v394) {
                v394[v394.STAGGERINDEX_ODD = 0] = "STAGGERINDEX_ODD", v394[v394.STAGGERINDEX_EVEN = 1] = "STAGGERINDEX_EVEN";
            }(x247 || (x247 = {})), s127(x247), function (u394) {
                u394[u394.RightDown = 0] = "RightDown", u394[u394.RightUp = 1] = "RightUp", u394[u394.LeftDown = 2] = "LeftDown", u394[u394.LeftUp = 3] = "LeftUp";
            }(y247 || (y247 = {})), s127(y247), function (t394) {
                t394[t394.RECT = 0] = "RECT", t394[t394.ELLIPSE = 1] = "ELLIPSE", t394[t394.POLYGON = 2] = "POLYGON", t394[t394.POLYLINE = 3] = "POLYLINE", t394[t394.IMAGE = 4] = "IMAGE", t394[t394.TEXT = 5] = "TEXT";
            }(z247 || (z247 = {})), s127(z247);
            class a248 {
                constructor() {
                    this.name = "", this.firstGid = 0, this.spacing = 0, this.margin = 0, this.sourceImage = void 0, this.imageName = null, this.imageOffset = null, this.imageSize = new x147(0, 0), this.tileOffset = new s147(0, 0), this._tileSize = new x147(0, 0), this.collection = !1;
                }
                rectForGID(o394, p394) {
                    const q394 = p394 || new y147(0, 0, 0, 0);
                    q394.width = this._tileSize.width, q394.height = this._tileSize.height;
                    let r394 = o394;
                    if (r394 &= v247.FLIPPED_MASK, r394 -= this.firstGid, this.imageOffset)
                        q394.x = this.imageOffset.x, q394.y = this.imageOffset.y;
                    else {
                        const s394 = Math.floor((this.imageSize.width - 2 * this.margin + this.spacing) / (this._tileSize.width + this.spacing));
                        q394.x = Math.round(r394 % s394 * (this._tileSize.width + this.spacing) + this.margin), q394.y = Math.round(Math.floor(r394 / s394) * (this._tileSize.height + this.spacing) + this.margin);
                    }
                    return q394;
                }
            }
            class b248 {
                constructor() {
                    this.properties = {}, this.name = "", this.objects = [], this.visible = !0, this.opacity = 0, this.color = new a147(255, 255, 255, 255), this.offset = new s147(0, 0), this.draworder = "topdown", this.tintColor = null;
                }
                getProperties() {
                    return this.properties;
                }
                setProperties(n394) {
                    this.properties = n394;
                }
            }
            class c248 {
                constructor() {
                    this.properties = {}, this.name = "", this.layerSize = null, this.tiles = [], this.visible = !0, this.opacity = 0, this.ownTiles = !0, this.minGID = 1e5, this.maxGID = 0, this.offset = new s147(0, 0), this.tintColor = null;
                }
                getProperties() {
                    return this.properties;
                }
                setProperties(m394) {
                    this.properties = m394;
                }
            }
            c248.ATTRIB_NONE = 1, c248.ATTRIB_BASE64 = 2, c248.ATTRIB_GZIP = 4, c248.ATTRIB_ZLIB = 8;
            class d248 {
                constructor() {
                    this.name = "", this.visible = !0, this.width = 0, this.height = 0, this.offset = new s147(0, 0), this.opacity = 0, this.trans = new a147(255, 255, 255, 255), this.sourceImage = void 0, this.tintColor = null;
                }
            }
            function t142(k394) {
                const l394 = z192.HorizontalAlign;
                switch (k394) {
                    case "center":
                        return l394.CENTER;
                    case "right":
                        return l394.RIGHT;
                    default:
                        return l394.LEFT;
                }
            }
            function u142(i394) {
                const j394 = z192.VerticalAlign;
                switch (i394) {
                    case "center":
                        return j394.CENTER;
                    case "bottom":
                        return j394.BOTTOM;
                    default:
                        return j394.TOP;
                }
            }
            function v142(a394) {
                if (!a394)
                    return new a147(0, 0, 0, 255);
                if (8 === (a394 = -1 !== a394.indexOf("#") ? a394.substring(1) : a394).length) {
                    const e394 = parseInt(a394.substr(0, 2), 16) || 255, f394 = parseInt(a394.substr(2, 2), 16) || 0, g394 = parseInt(a394.substr(4, 2), 16) || 0, h394 = parseInt(a394.substr(6, 2), 16) || 0;
                    return new a147(f394, g394, h394, e394);
                }
                {
                    const b394 = parseInt(a394.substr(0, 2), 16) || 0, c394 = parseInt(a394.substr(2, 2), 16) || 0, d394 = parseInt(a394.substr(4, 2), 16) || 0;
                    return new a147(b394, c394, d394, 255);
                }
            }
            function w142(o393, p393) {
                const q393 = [], r393 = o393.getElementsByTagName("properties");
                for (let x393 = 0; x393 < r393.length; ++x393) {
                    const y393 = r393[x393].getElementsByTagName("property");
                    for (let z393 = 0; z393 < y393.length; ++z393)
                        q393.push(y393[z393]);
                }
                p393 = p393 || {};
                for (let s393 = 0; s393 < q393.length; s393++) {
                    const t393 = q393[s393], u393 = t393.getAttribute("name"), v393 = t393.getAttribute("type") || "string";
                    let w393 = t393.getAttribute("value");
                    "int" === v393 ? w393 = parseInt(w393) : "float" === v393 ? w393 = parseFloat(w393) : "bool" === v393 ? w393 = "true" === w393 : "color" === v393 && (w393 = v142(w393)), p393[u393] = w393;
                }
                return p393;
            }
            class e248 {
                get mapSize() {
                    return this._mapSize;
                }
                get tileSize() {
                    return this._tileSize;
                }
                constructor(j393, k393, l393, m393, n393) {
                    this.properties = {}, this.orientation = null, this.parentElement = null, this.parentGID = 0, this.layerAttrs = 0, this.storingCharacters = !1, this.currentString = null, this.renderOrder = y247.RightDown, this._supportVersion = [1, 4, 0], this._objectGroups = [], this._allChildren = [], this._mapSize = new x147(0, 0), this._tileSize = new x147(0, 0), this._layers = [], this._tilesets = [], this._imageLayers = [], this._tileProperties = new Map(), this._tileAnimations = {}, this._tsxContentMap = null, this._spriteFrameMap = null, this._spfSizeMap = {}, this._staggerAxis = null, this._staggerIndex = null, this._hexSideLength = 0, this._imageLayerSPF = null, this.initWithXML(j393, k393, l393, m393, n393);
                }
                getOrientation() {
                    return this.orientation;
                }
                setOrientation(i393) {
                    this.orientation = i393;
                }
                getStaggerAxis() {
                    return this._staggerAxis;
                }
                setStaggerAxis(h393) {
                    this._staggerAxis = h393;
                }
                getStaggerIndex() {
                    return this._staggerIndex;
                }
                setStaggerIndex(g393) {
                    this._staggerIndex = g393;
                }
                getHexSideLength() {
                    return this._hexSideLength;
                }
                setHexSideLength(f393) {
                    this._hexSideLength = f393;
                }
                getMapSize() {
                    return new x147(this._mapSize.width, this._mapSize.height);
                }
                setMapSize(e393) {
                    this._mapSize.width = e393.width, this._mapSize.height = e393.height;
                }
                get mapWidth() {
                    return this._mapSize.width;
                }
                set mapWidth(d393) {
                    this._mapSize.width = d393;
                }
                get mapHeight() {
                    return this._mapSize.height;
                }
                set mapHeight(c393) {
                    this._mapSize.height = c393;
                }
                getTileSize() {
                    return new x147(this._tileSize.width, this._tileSize.height);
                }
                setTileSize(b393) {
                    this._tileSize.width = b393.width, this._tileSize.height = b393.height;
                }
                get tileWidth() {
                    return this._tileSize.width;
                }
                set tileWidth(a393) {
                    this._tileSize.width = a393;
                }
                get tileHeight() {
                    return this._tileSize.height;
                }
                set tileHeight(z392) {
                    this._tileSize.height = z392;
                }
                getLayers() {
                    return this._layers;
                }
                setLayers(y392) {
                    this._allChildren.push(y392), this._layers.push(y392);
                }
                getImageLayers() {
                    return this._imageLayers;
                }
                setImageLayers(x392) {
                    this._allChildren.push(x392), this._imageLayers.push(x392);
                }
                getTilesets() {
                    return this._tilesets;
                }
                setTilesets(w392) {
                    this._tilesets.push(w392);
                }
                getObjectGroups() {
                    return this._objectGroups;
                }
                setObjectGroups(v392) {
                    this._allChildren.push(v392), this._objectGroups.push(v392);
                }
                getAllChildren() {
                    return this._allChildren;
                }
                getParentElement() {
                    return this.parentElement;
                }
                setParentElement(u392) {
                    this.parentElement = u392;
                }
                getParentGID() {
                    return this.parentGID;
                }
                setParentGID(t392) {
                    this.parentGID = t392;
                }
                getLayerAttribs() {
                    return this.layerAttrs;
                }
                setLayerAttribs(s392) {
                    this.layerAttrs = s392;
                }
                getStoringCharacters() {
                    return this.storingCharacters;
                }
                setStoringCharacters(r392) {
                    this.storingCharacters = r392;
                }
                getProperties() {
                    return this.properties;
                }
                setProperties(q392) {
                    this.properties = q392;
                }
                initWithXML(l392, m392, n392, o392, p392) {
                    return this._tilesets.length = 0, this._layers.length = 0, this._imageLayers.length = 0, this._tsxContentMap = m392, this._spriteFrameMap = n392, this._imageLayerSPF = p392, this._spfSizeMap = o392, this._objectGroups.length = 0, this._allChildren.length = 0, this.properties = {}, this._tileProperties = new Map(), this._tileAnimations = new Map(), this.currentString = "", this.storingCharacters = !1, this.layerAttrs = c248.ATTRIB_NONE, this.parentElement = null, this.parseXMLString(l392);
                }
                parseXMLString(d390, e390) {
                    let f390;
                    const g390 = new v184().parse(d390).documentElement, h390 = g390.getAttribute("orientation"), i390 = g390.getAttribute("staggeraxis"), j390 = g390.getAttribute("staggerindex"), k390 = g390.getAttribute("hexsidelength"), l390 = g390.getAttribute("renderorder"), m390 = g390.getAttribute("version") || "1.0.0";
                    if ("map" === g390.nodeName) {
                        const h392 = m390.split("."), i392 = this._supportVersion;
                        for (f390 = 0; f390 < i392.length; f390++) {
                            const k392 = parseInt(h392[f390]) || 0;
                            if (i392[f390] < k392) {
                                x125(7216, m390);
                                break;
                            }
                        }
                        "orthogonal" === h390 ? this.orientation = t247.ORTHO : "isometric" === h390 ? this.orientation = t247.ISO : "hexagonal" === h390 ? this.orientation = t247.HEX : null !== h390 && x125(7217, h390), this.renderOrder = "right-up" === l390 ? y247.RightUp : "left-up" === l390 ? y247.LeftUp : "left-down" === l390 ? y247.LeftDown : y247.RightDown, "x" === i390 ? this.setStaggerAxis(w247.STAGGERAXIS_X) : "y" === i390 && this.setStaggerAxis(w247.STAGGERAXIS_Y), "odd" === j390 ? this.setStaggerIndex(x247.STAGGERINDEX_ODD) : "even" === j390 && this.setStaggerIndex(x247.STAGGERINDEX_EVEN), k390 && this.setHexSideLength(parseFloat(k390));
                        let j392 = new x147(0, 0);
                        j392.width = parseFloat(g390.getAttribute("width")), j392.height = parseFloat(g390.getAttribute("height")), this.setMapSize(j392), j392 = new x147(0, 0), j392.width = parseFloat(g390.getAttribute("tilewidth")), j392.height = parseFloat(g390.getAttribute("tileheight")), this.setTileSize(j392), this.properties = w142(g390);
                    }
                    let n390 = g390.getElementsByTagName("tileset");
                    for ("map" !== g390.nodeName && (n390 = [], n390.push(g390)), f390 = 0; f390 < n390.length; f390++) {
                        const t390 = n390[f390], u390 = t390.getAttribute("source");
                        if (u390) {
                            const f392 = parseInt(t390.getAttribute("firstgid")), g392 = this._tsxContentMap[u390];
                            g392 && this.parseXMLString(g392, f392);
                        }
                        else {
                            const v390 = t390.getElementsByTagName("image"), w390 = v390.length > 1, x390 = v390[0];
                            let y390 = x390.getAttribute("source");
                            y390 = y390.replace(/\\/g, "/");
                            const z390 = t390.getElementsByTagName("tile"), a391 = z390 && z390.length || 1;
                            let b391 = null;
                            const c391 = t390.getAttribute("name") || "", d391 = parseInt(t390.getAttribute("spacing")) || 0, e391 = parseInt(t390.getAttribute("margin")) || 0, f391 = e390 || parseInt(t390.getAttribute("firstgid")) || 0, g391 = new x147(0, 0);
                            g391.width = parseFloat(t390.getAttribute("tilewidth")), g391.height = parseFloat(t390.getAttribute("tileheight"));
                            const h391 = t390.getElementsByTagName("tileoffset")[0];
                            let i391 = 0, j391 = 0;
                            h391 && (i391 = parseFloat(h391.getAttribute("x")) || 0, j391 = parseFloat(h391.getAttribute("y")) || 0);
                            let k391 = null;
                            for (let l391 = 0; l391 < a391; l391++) {
                                const m391 = v390[l391] ? v390[l391] : x390;
                                if (!m391)
                                    continue;
                                let n391 = m391.getAttribute("source");
                                if (n391 = n391.replace(/\\/g, "/"), !k391 || w390) {
                                    if (k391 = new a248(), k391.name = c391, k391.firstGid = f391 & v247.FLIPPED_MASK, k391.tileOffset.x = i391, k391.tileOffset.y = j391, k391.collection = w390, !w390 && (k391.imageName = n391, k391.imageSize.width = parseFloat(m391.getAttribute("width")) || 0, k391.imageSize.height = parseFloat(m391.getAttribute("height")) || 0, k391.sourceImage = this._spriteFrameMap[n391], !k391.sourceImage)) {
                                        const d392 = e248.getNameWithPostfix(n391);
                                        if (k391.imageName = d392, k391.sourceImage = this._spriteFrameMap[d392], !k391.sourceImage) {
                                            const e392 = e248.getShortName(n391);
                                            k391.imageName = e392, k391.sourceImage = this._spriteFrameMap[e392], k391.sourceImage || (console.error(`[error]: ${e392} not find in [${Object.keys(this._spriteFrameMap).join(", ")}]`), z125(7221, n391), console.warn(`Please try asset type of ${n391} to 'sprite-frame'`));
                                        }
                                    }
                                    k391.spacing = d391, k391.margin = e391, k391._tileSize.width = g391.width, k391._tileSize.height = g391.height, this.setTilesets(k391);
                                }
                                if (b391 = z390 && z390[l391], !b391)
                                    continue;
                                this.parentGID = f391 + (parseInt(b391.getAttribute("id")) || 0);
                                const o391 = b391.getElementsByTagName("image");
                                b391.hasAttribute("x") && b391.hasAttribute("y") && (k391.imageOffset = new s147(parseFloat(b391.getAttribute("x")) || 0, parseFloat(b391.getAttribute("y")) || 0));
                                const p391 = b391.hasAttribute("width") && b391.hasAttribute("height");
                                if (p391 && (k391._tileSize.width = parseFloat(b391.getAttribute("width")) || 0, k391._tileSize.height = parseFloat(b391.getAttribute("height")) || 0), o391 && o391.length > 0) {
                                    const z391 = o391[0];
                                    let a392 = z391.getAttribute("source");
                                    if (a392 = a392.replace(/\\/g, "/"), k391.imageName = a392, k391.imageSize.width = parseFloat(z391.getAttribute("width")) || 0, k391.imageSize.height = parseFloat(z391.getAttribute("height")) || 0, p391 || (k391._tileSize.width = k391.imageSize.width, k391._tileSize.height = k391.imageSize.height), k391.sourceImage = this._spriteFrameMap[a392], !k391.sourceImage) {
                                        const b392 = e248.getNameWithPostfix(a392);
                                        if (k391.imageName = b392, k391.sourceImage = this._spriteFrameMap[b392], !k391.sourceImage) {
                                            const c392 = e248.getShortName(a392);
                                            k391.imageName = c392, k391.sourceImage = this._spriteFrameMap[c392], k391.sourceImage || (z125(7221, a392), console.warn(`Please try asset type of ${a392} to 'sprite-frame'`));
                                        }
                                    }
                                    k391.firstGid = this.parentGID & v247.FLIPPED_MASK;
                                }
                                const q391 = (v247.FLIPPED_MASK & this.parentGID) >>> 0;
                                this._tileProperties.set(q391, w142(b391));
                                const r391 = b391.getElementsByTagName("animation");
                                if (r391 && r391.length > 0) {
                                    const s391 = r391[0].getElementsByTagName("frame"), t391 = {
                                        frames: [],
                                        dt: 0,
                                        frameIdx: 0
                                    };
                                    this._tileAnimations.set(q391, t391);
                                    const u391 = t391.frames;
                                    for (let v391 = 0; v391 < s391.length; v391++) {
                                        const w391 = s391[v391], x391 = f391 + (parseInt(w391.getAttribute("tileid")) || 0), y391 = parseFloat(w391.getAttribute("duration")) || 0;
                                        u391.push({
                                            tileid: x391,
                                            duration: y391 / 1e3,
                                            grid: null
                                        });
                                    }
                                }
                            }
                        }
                    }
                    const o390 = g390.childNodes;
                    for (f390 = 0; f390 < o390.length; f390++) {
                        const p390 = o390[f390];
                        if (!this._shouldIgnoreNode(p390)) {
                            if ("imagelayer" === p390.nodeName) {
                                const s390 = this._parseImageLayer(p390);
                                s390 && this.setImageLayers(s390);
                            }
                            if ("layer" === p390.nodeName) {
                                const r390 = this._parseLayer(p390);
                                this.setLayers(r390);
                            }
                            if ("objectgroup" === p390.nodeName) {
                                const q390 = this._parseObjectGroup(p390);
                                this.setObjectGroups(q390);
                            }
                        }
                    }
                    return g390;
                }
                _shouldIgnoreNode(c390) {
                    return 3 === c390.nodeType || 8 === c390.nodeType || 4 === c390.nodeType;
                }
                _parseImageLayer(u389) {
                    const v389 = u389.getElementsByTagName("image");
                    if (!v389 || 0 === v389.length)
                        return null;
                    const w389 = new d248();
                    w389.name = u389.getAttribute("name"), w389.offset.x = parseFloat(u389.getAttribute("offsetx")) || 0, w389.offset.y = parseFloat(u389.getAttribute("offsety")) || 0;
                    const x389 = u389.getAttribute("visible");
                    w389.visible = !("0" === x389);
                    const y389 = u389.getAttribute("opacity");
                    w389.opacity = y389 ? Math.round(255 * parseFloat(y389)) : 255;
                    const z389 = u389.getAttribute("tintcolor");
                    w389.tintColor = z389 ? v142(z389) : null;
                    const a390 = v389[0], b390 = a390.getAttribute("source");
                    return w389.sourceImage = this._imageLayerSPF[b390], w389.width = parseInt(a390.getAttribute("width")) || 0, w389.height = parseInt(a390.getAttribute("height")) || 0, w389.trans = v142(a390.getAttribute("trans")), w389.sourceImage ? w389 : (z125(7221, b390), console.warn(`Please try asset type of ${b390} to 'sprite-frame'`), null);
                }
                _parseLayer(y388) {
                    const z388 = y388.getElementsByTagName("data")[0], a389 = new c248();
                    a389.name = y388.getAttribute("name");
                    const b389 = new x147(0, 0);
                    b389.width = parseFloat(y388.getAttribute("width")), b389.height = parseFloat(y388.getAttribute("height")), a389.layerSize = b389;
                    const c389 = y388.getAttribute("visible");
                    a389.visible = !("0" === c389);
                    const d389 = y388.getAttribute("opacity");
                    a389.opacity = d389 ? Math.round(255 * parseFloat(d389)) : 255, a389.offset = new s147(parseFloat(y388.getAttribute("offsetx")) || 0, parseFloat(y388.getAttribute("offsety")) || 0);
                    const e389 = y388.getAttribute("tintcolor");
                    a389.tintColor = e389 ? v142(e389) : null;
                    let f389 = "";
                    for (let t389 = 0; t389 < z388.childNodes.length; t389++)
                        f389 += z388.childNodes[t389].nodeValue;
                    f389 = f389.trim();
                    const g389 = z388.getAttribute("compression"), h389 = z388.getAttribute("encoding");
                    if (g389 && "gzip" !== g389 && "zlib" !== g389)
                        return x125(7218), null;
                    let i389;
                    switch (g389) {
                        case "gzip":
                            i389 = l229.unzipBase64AsArray(f389, 4);
                            break;
                        case "zlib":
                            i389 = function (o389) {
                                if (o389.length % 4 != 0)
                                    return null;
                                const p389 = o389.length / 4, q389 = window.Uint32Array ? new Uint32Array(p389) : [];
                                for (let r389 = 0; r389 < p389; r389++) {
                                    const s389 = 4 * r389;
                                    q389[r389] = o389[s389] + 256 * o389[s389 + 1] + 65536 * o389[s389 + 2] + o389[s389 + 3] * (1 << 24);
                                }
                                return q389;
                            }(new d227.Inflate(l229.Base64.decodeAsArray(f389, 1)).decompress());
                            break;
                        case null:
                        case "":
                            if ("base64" === h389)
                                i389 = l229.Base64.decodeAsArray(f389, 4);
                            else if ("csv" === h389) {
                                i389 = [];
                                const m389 = f389.split(",");
                                for (let n389 = 0; n389 < m389.length; n389++)
                                    i389.push(parseInt(m389[n389]));
                            }
                            else {
                                const k389 = z388.getElementsByTagName("tile");
                                i389 = [];
                                for (let l389 = 0; l389 < k389.length; l389++)
                                    i389.push(parseInt(k389[l389].getAttribute("gid")));
                            }
                            break;
                        default:
                            this.layerAttrs === c248.ATTRIB_NONE && x125(7219);
                    }
                    return i389 && (a389.tiles = new Uint32Array(i389)), a389.properties = w142(y388), a389;
                }
                _parseObjectGroup(b388) {
                    const c388 = new b248();
                    c388.name = b388.getAttribute("name") || "", c388.offset = new s147(parseFloat(b388.getAttribute("offsetx")), parseFloat(b388.getAttribute("offsety")));
                    const d388 = b388.getAttribute("opacity");
                    c388.opacity = d388 ? Math.round(255 * parseFloat(d388)) : 255;
                    const e388 = b388.getAttribute("tintcolor");
                    c388.tintColor = e388 ? v142(e388) : null;
                    const f388 = b388.getAttribute("visible");
                    f388 && 0 === parseInt(f388) && (c388.visible = !1);
                    const g388 = b388.getAttribute("color");
                    g388 && c388.color.fromHEX(g388);
                    const h388 = b388.getAttribute("draworder");
                    h388 && (c388.draworder = h388), c388.setProperties(w142(b388));
                    const i388 = b388.getElementsByTagName("object");
                    if (i388) {
                        for (let m388 = 0; m388 < i388.length; m388++) {
                            const n388 = i388[m388], o388 = {};
                            o388.id = n388.getAttribute("id") || m388, o388.name = n388.getAttribute("name") || "", o388.width = parseFloat(n388.getAttribute("width")) || 0, o388.height = parseFloat(n388.getAttribute("height")) || 0, o388.x = parseFloat(n388.getAttribute("x")) || 0, o388.y = parseFloat(n388.getAttribute("y")) || 0, o388.rotation = parseFloat(n388.getAttribute("rotation")) || 0, w142(n388, o388);
                            const p388 = n388.getAttribute("visible");
                            o388.visible = !(p388 && 0 === parseInt(p388));
                            const q388 = n388.getElementsByTagName("text");
                            if (q388 && q388.length > 0) {
                                const x388 = q388[0];
                                o388.type = z247.TEXT, o388.wrap = "1" === x388.getAttribute("wrap"), o388.color = v142(x388.getAttribute("color")), o388.halign = t142(x388.getAttribute("halign")), o388.valign = u142(x388.getAttribute("valign")), o388.pixelsize = parseInt(x388.getAttribute("pixelsize")) || 16, o388.text = x388.childNodes[0].nodeValue;
                            }
                            const r388 = n388.getAttribute("gid");
                            r388 && (o388.gid = parseInt(r388), o388.type = z247.IMAGE);
                            const s388 = n388.getElementsByTagName("ellipse");
                            s388 && s388.length > 0 && (o388.type = z247.ELLIPSE);
                            const t388 = n388.getElementsByTagName("polygon");
                            if (t388 && t388.length > 0) {
                                o388.type = z247.POLYGON;
                                const w388 = t388[0].getAttribute("points");
                                w388 && (o388.points = this._parsePointsString(w388));
                            }
                            const u388 = n388.getElementsByTagName("polyline");
                            if (u388 && u388.length > 0) {
                                o388.type = z247.POLYLINE;
                                const v388 = u388[0].getAttribute("points");
                                v388 && (o388.polylinePoints = this._parsePointsString(v388));
                            }
                            o388.type || (o388.type = z247.RECT), c388.objects.push(o388);
                        }
                        "index" !== h388 && c388.objects.sort((k388, l388) => k388.y - l388.y);
                    }
                    return c388;
                }
                _parsePointsString(w387) {
                    if (!w387)
                        return null;
                    const x387 = [], y387 = w387.split(" ");
                    for (let z387 = 0; z387 < y387.length; z387++) {
                        const a388 = y387[z387].split(",");
                        x387.push({
                            x: parseFloat(a388[0]),
                            y: parseFloat(a388[1])
                        });
                    }
                    return x387;
                }
                setTileAnimations(v387) {
                    this._tileAnimations = v387;
                }
                getTileAnimations() {
                    return this._tileAnimations;
                }
                getTileProperties() {
                    return this._tileProperties;
                }
                setTileProperties(u387) {
                    this._tileProperties = u387;
                }
                getCurrentString() {
                    return this.currentString;
                }
                setCurrentString(t387) {
                    this.currentString = t387;
                }
                static getNameWithPostfix(q387) {
                    const r387 = (q387 = q387.replace(/\\/g, "/")).lastIndexOf("/") + 1, s387 = q387.length;
                    return q387.substring(r387, s387);
                }
                static getShortName(n387) {
                    const o387 = (n387 = n387.replace(/\\/g, "/")).lastIndexOf("/") + 1;
                    let p387 = n387.lastIndexOf(".");
                    return p387 = p387 < 0 ? n387.length : p387, n387.substring(o387, p387);
                }
            }
            var f248, g248, h248, i248, j248, k248, l248, m248, n248, o248, p248;
            let q248 = g125("TiledTile", (f248 = e151("cc.TiledTile"), g248 = f151(d190), h248 = a131(y145), i248 = a131(y145), j248 = a131(y145), k248 = a131(y145), l248 = a131(y145), f248(m248 = g248((n248 = class extends a165 {
                constructor() {
                    super(), this._layer = null, this._x = o248 && o248(), this._y = p248 && p248();
                }
                get x() {
                    return this._x;
                }
                set x(m387) {
                    m387 !== this._x && (this._layer && this._layer.isInvalidPosition(m387, this._y) ? q125("Invalid x, the valid value is between [%s] ~ [%s]", 0, this._layer.layerSize.width) : (this._resetTile(), this._x = m387, this.updateInfo()));
                }
                get y() {
                    return this._y;
                }
                set y(l387) {
                    l387 !== this._y && (this._layer && this._layer.isInvalidPosition(this._x, l387) ? q125("Invalid y, the valid value is between [%s] ~ [%s]", 0, this._layer.layerSize.height) : (this._resetTile(), this._y = l387, this.updateInfo()));
                }
                get grid() {
                    return this._layer ? this._layer.getTileGIDAt(this._x, this._y) : 0;
                }
                set grid(k387) {
                    this._layer && this._layer.setTileGIDAt(k387, this._x, this._y);
                }
                onEnable() {
                    const j387 = this.node.parent;
                    this._layer = j387.getComponent("cc.TiledLayer"), this.node.on(z174.TRANSFORM_CHANGED, this._updatePosition, this), this.node.on(z174.SIZE_CHANGED, this._updatePosition, this), this._resetTile(), this.updateInfo();
                }
                onDisable() {
                    this._resetTile(), this.node.off(z174.TRANSFORM_CHANGED, this._updatePosition, this), this.node.off(z174.SIZE_CHANGED, this._updatePosition, this);
                }
                _resetTile() {
                    this._layer && this._layer.getTiledTileAt(this._x, this._y) === this && this._layer.setTiledTileAt(this._x, this._y, null);
                }
                updateInfo() {
                    if (!this._layer)
                        return;
                    const g387 = this._x, h387 = this._y;
                    if (this._layer.getTiledTileAt(g387, h387))
                        return void q125("There is already a TiledTile at [%s, %s]", g387, h387);
                    const i387 = this._layer.getPositionAt(g387, h387);
                    this.node.setPosition(i387.x, i387.y), this._layer.setTiledTileAt(g387, h387, this), this._layer.markForUpdateRenderData();
                }
                _updatePosition() {
                    this._layer.markForUpdateRenderData();
                }
            }, o248 = p130(n248.prototype, "_x", [h248], function () {
                return 0;
            }), p248 = p130(n248.prototype, "_y", [i248], function () {
                return 0;
            }), i125(n248.prototype, "x", [j248], Object.getOwnPropertyDescriptor(n248.prototype, "x"), n248.prototype), i125(n248.prototype, "y", [k248], Object.getOwnPropertyDescriptor(n248.prototype, "y"), n248.prototype), i125(n248.prototype, "grid", [l248], Object.getOwnPropertyDescriptor(n248.prototype, "grid"), n248.prototype), m248 = n248)) || m248) || m248));
            function x142(h386, i386, j386) {
                const k386 = j386 || h386.sourceImage, l386 = k386.texture, m386 = h386.collection;
                if (!h386.imageSize.width || !h386.imageSize.height) {
                    const f387 = h386.sourceImage;
                    h386.imageSize.width = f387.width, h386.imageSize.height = f387.height;
                }
                const n386 = h386.imageSize.width, o386 = h386.imageSize.height, p386 = h386._tileSize.width, q386 = h386._tileSize.height, r386 = k386.width, s386 = k386.height, t386 = h386.spacing, u386 = h386.margin;
                let v386 = 1;
                if (!m386) {
                    const d387 = Math.floor((n386 - 2 * u386 + t386) / (p386 + t386)), e387 = Math.floor((o386 - 2 * u386 + t386) / (q386 + t386));
                    v386 = Math.max(1, e387 * d387);
                }
                const w386 = h386.firstGid;
                let x386 = null, y386 = !!i386.get(w386);
                const z386 = h386.firstGid + v386;
                let a387 = w386;
                for (; a387 < z386 && (y386 && !i386.get(a387) && (y386 = !1), y386 || !i386.get(a387)); ++a387) {
                    if (x386 = {
                        tileset: h386,
                        x: 0,
                        y: 0,
                        width: p386,
                        height: q386,
                        t: 0,
                        l: 0,
                        r: 0,
                        b: 0,
                        cx: 0,
                        cy: 0,
                        offsetX: 0,
                        offsetY: 0,
                        rotated: !1,
                        gid: a387,
                        spriteFrame: k386,
                        texture: l386
                    }, h386.rectForGID(a387, x386), !j386 || v386 > 1 || h386.imageOffset) {
                        if (j386) {
                            x386._name = j386.name;
                            const b387 = j386.unbiasUV[0], c387 = j386.rotated ? j386.unbiasUV[1] : j386.unbiasUV[5];
                            x386.l = b387 + (x386.x + .5) / r386, x386.t = c387 + (x386.y + .5) / s386, x386.r = b387 + (x386.x + x386.width - .5) / r386, x386.b = c387 + (x386.y + x386.height - .5) / s386, x386._rect = new y147(x386.x, x386.y, x386.width, x386.height);
                        }
                        else
                            x386.l = x386.x / r386, x386.t = x386.y / s386, x386.r = (x386.x + x386.width) / r386, x386.b = (x386.y + x386.height) / s386, x386._rect = new y147(x386.x, x386.y, x386.width, x386.height);
                    }
                    else
                        j386.rotated ? (x386._rotated = !0, x386._name = j386.name, x386._rect = j386.getRect(), x386.l = j386.unbiasUV[0], x386.t = j386.unbiasUV[1], x386.r = j386.unbiasUV[4], x386.b = j386.unbiasUV[3]) : (x386._name = j386.name, x386._rect = j386.getRect(), x386.l = j386.unbiasUV[0], x386.t = j386.unbiasUV[5], x386.r = j386.unbiasUV[2], x386.b = j386.unbiasUV[1]);
                    x386.cx = (x386.l + x386.r) / 2, x386.cy = (x386.t + x386.b) / 2, i386.set(a387, x386);
                }
            }
            var r248, s248;
            const t248 = new o147(), u248 = new s147(), v248 = new w146(), w248 = new w146(), x248 = {
                row: 0,
                col: 0
            };
            let y248 = g125("TiledUserNodeData", e151("cc.TiledUserNodeData")(r248 = class extends a165 {
                constructor() {
                    super(), this._index = -1, this._row = -1, this._col = -1, this._tiledLayer = null;
                }
            }) || r248), z248 = g125("TiledLayer", e151("cc.TiledLayer")(s248 = class t extends h191 {
                get cullingRect() {
                    return this._cullingRect;
                }
                get rightTop() {
                    return this._rightTop;
                }
                get layerSize() {
                    return this._layerSize;
                }
                get tiledDataArray() {
                    return this._tiledDataArray;
                }
                get leftDownToCenterX() {
                    return this._leftDownToCenterX;
                }
                get leftDownToCenterY() {
                    return this._leftDownToCenterY;
                }
                requestDrawInfo(g386) {
                    return this._drawInfoList[g386] || (this._drawInfoList[g386] = new j189(), this._drawInfoList[g386].setDrawInfoType(b189.MIDDLEWARE)), this._drawInfoList[g386];
                }
                constructor() {
                    super(), this._userNodeGrid = {}, this._userNodeMap = {}, this._userNodeDirty = !1, this.tiledTiles = [], this._viewPort = {
                        x: -1,
                        y: -1,
                        width: -1,
                        height: -1
                    }, this._cullingRect = {
                        leftDown: {
                            row: -1,
                            col: -1
                        },
                        rightTop: {
                            row: -1,
                            col: -1
                        }
                    }, this._cullingDirty = !0, this._rightTop = {
                        row: -1,
                        col: -1
                    }, this._layerInfo = null, this._mapInfo = null, this._topOffset = 0, this._downOffset = 0, this._leftOffset = 0, this._rightOffset = 0, this.tiles = [], this.vertices = [], this._verticesDirty = !0, this._layerName = "", this._layerSize = void 0, this._minGID = void 0, this._maxGID = void 0, this._layerOrientation = null, this._opacity = void 0, this._tintColor = void 0, this.texGrids = null, this._textures = [], this._tilesets = [], this._leftDownToCenterX = 0, this._leftDownToCenterY = 0, this._hasTiledNodeGrid = !1, this._hasAniGrid = !1, this._animations = null, this._enableCulling = void 0, this.colorChanged = !1, this._properties = void 0, this.renderOrder = void 0, this._staggerAxis = void 0, this._staggerIndex = void 0, this._hexSideLength = void 0, this._mapTileSize = void 0, this._odd_even = void 0, this._diffX1 = void 0, this._diffY1 = void 0, this._useAutomaticVertexZ = void 0, this._vertexZvalue = void 0, this._offset = void 0, this._tiledDataArray = [], this._cameraNode = void 0, this._drawInfoList = [], this._tiledDataArrayIdx = 0;
                }
                hasTiledNode() {
                    return this._hasTiledNodeGrid;
                }
                hasAnimation() {
                    return this._hasAniGrid;
                }
                set enableCulling(f386) {
                    this._enableCulling !== f386 && (this._enableCulling = f386, this._cullingDirty = !0, this.markForUpdateRenderData());
                }
                get enableCulling() {
                    return this._enableCulling;
                }
                addUserNode(d386) {
                    let e386 = d386.getComponent(y248);
                    return e386 ? (q125("CCTiledLayer:addUserNode node has been added"), !1) : (e386 = d386.addComponent(y248), d386.parent = this.node, this._userNodeMap[d386.uuid] = e386, e386._row = -1, e386._col = -1, e386._tiledLayer = this, this._nodeLocalPosToLayerPos(d386.getPosition(), u248), this._positionToRowCol(u248.x, u248.y, x248), this._addUserNodeToGrid(e386, x248), this._updateCullingOffsetByUserNode(d386), d386.on(z174.TRANSFORM_CHANGED, this._userNodePosChange, e386), d386.on(z174.SIZE_CHANGED, this._userNodeSizeChange, e386), !0);
                }
                removeUserNode(b386) {
                    const c386 = b386.getComponent(y248);
                    return c386 ? (b386.off(z174.TRANSFORM_CHANGED, this._userNodePosChange, c386), b386.off(z174.SIZE_CHANGED, this._userNodeSizeChange, c386), this._removeUserNodeFromGrid(c386), delete this._userNodeMap[b386.uuid], b386._removeComponent(c386), c386.destroy(), b386.removeFromParent(), !0) : (q125("CCTiledLayer:removeUserNode node is not exist"), !1);
                }
                destroyUserNode(a386) {
                    this.removeUserNode(a386), a386.destroy();
                }
                _nodeLocalPosToLayerPos(y385, z385) {
                    z385.x = y385.x + this._leftDownToCenterX, z385.y = y385.y + this._leftDownToCenterY;
                }
                getNodesByRowCol(v385, w385) {
                    const x385 = this._userNodeGrid[v385];
                    return x385 ? x385[w385] : null;
                }
                getNodesCountByRow(t385) {
                    const u385 = this._userNodeGrid[t385];
                    return u385 ? u385.count : 0;
                }
                _updateAllUserNode() {
                    this._userNodeGrid = {};
                    for (const r385 in this._userNodeMap) {
                        const s385 = this._userNodeMap[r385];
                        this._nodeLocalPosToLayerPos(s385.node.getPosition(), u248), this._positionToRowCol(u248.x, u248.y, x248), this._addUserNodeToGrid(s385, x248), this._updateCullingOffsetByUserNode(s385.node);
                    }
                }
                _updateCullingOffsetByUserNode(p385) {
                    const q385 = p385._uiProps.uiTransformComp.contentSize;
                    this._topOffset < q385.height && (this._topOffset = q385.height), this._downOffset < q385.height && (this._downOffset = q385.height), this._leftOffset < q385.width && (this._leftOffset = q385.width), this._rightOffset < q385.width && (this._rightOffset = q385.width);
                }
                _userNodeSizeChange() {
                    const n385 = this.node, o385 = this._tiledLayer;
                    o385._updateCullingOffsetByUserNode(n385), o385._userNodeDirty = !0, o385.markForUpdateRenderData();
                }
                _userNodePosChange() {
                    const k385 = this, l385 = k385.node, m385 = k385._tiledLayer;
                    m385._nodeLocalPosToLayerPos(l385.getPosition(), u248), m385._positionToRowCol(u248.x, u248.y, x248), m385._limitInLayer(x248), x248.row === k385._row && x248.col === k385._col || (m385._removeUserNodeFromGrid(k385), m385._addUserNodeToGrid(k385, x248));
                }
                _removeUserNodeFromGrid(e385) {
                    const f385 = e385._row, g385 = e385._col, h385 = e385._index, i385 = this._userNodeGrid[f385], j385 = i385 && i385[g385];
                    j385 && (i385.count--, j385.count--, j385.list[h385] = null, j385.count <= 0 && (j385.list.length = 0, j385.count = 0)), e385._row = -1, e385._col = -1, e385._index = -1, this._userNodeDirty = !0, this.markForUpdateRenderData();
                }
                _limitInLayer(b385) {
                    const c385 = b385.row, d385 = b385.col;
                    c385 < 0 && (b385.row = 0), c385 > this._rightTop.row && (b385.row = this._rightTop.row), d385 < 0 && (b385.col = 0), d385 > this._rightTop.col && (b385.col = this._rightTop.col);
                }
                _addUserNodeToGrid(v384, w384) {
                    const x384 = w384.row, y384 = w384.col, z384 = this._userNodeGrid[x384] = this._userNodeGrid[x384] || {
                        count: 0
                    }, a385 = z384[y384] = z384[y384] || {
                        count: 0,
                        list: []
                    };
                    v384._row = x384, v384._col = y384, v384._index = a385.list.length, z384.count++, a385.count++, a385.list.push(v384), this._userNodeDirty = !0;
                }
                isUserNodeDirty() {
                    return this._userNodeDirty;
                }
                setUserNodeDirty(u384) {
                    this._userNodeDirty = u384;
                }
                _reinstallCamera() {
                    const s384 = t185.root.batcher2D.getFirstRenderCamera(this.node), t384 = null == s384 ? void 0 : s384.node;
                    return this._cameraNode !== t384 && (this._uninstallCamera(), t384 && (t384.on(z174.TRANSFORM_CHANGED, this.updateCulling, this), t384.on(z174.SIZE_CHANGED, this.updateCulling, this), this._cameraNode = t384)), s384;
                }
                _uninstallCamera() {
                    this._cameraNode && (this._cameraNode.off(z174.TRANSFORM_CHANGED, this.updateCulling, this), this._cameraNode.off(z174.SIZE_CHANGED, this.updateCulling, this), delete this._cameraNode);
                }
                onEnable() {
                    super.onEnable(), this.node.on(z174.ANCHOR_CHANGED, this._syncAnchorPoint, this), this.node.on(z174.TRANSFORM_CHANGED, this.updateCulling, this), this.node.on(z174.SIZE_CHANGED, this.updateCulling, this), this.node.parent.on(z174.TRANSFORM_CHANGED, this.updateCulling, this), this.node.parent.on(z174.SIZE_CHANGED, this.updateCulling, this), this.markForUpdateRenderData(), this.scheduleOnce(this.updateCulling.bind(this));
                }
                onDisable() {
                    var q384, r384;
                    super.onDisable(), null === (q384 = this.node.parent) || void 0 === q384 || q384.off(z174.SIZE_CHANGED, this.updateCulling, this), null === (r384 = this.node.parent) || void 0 === r384 || r384.off(z174.TRANSFORM_CHANGED, this.updateCulling, this), this.node.off(z174.SIZE_CHANGED, this.updateCulling, this), this.node.off(z174.TRANSFORM_CHANGED, this.updateCulling, this), this.node.off(z174.ANCHOR_CHANGED, this._syncAnchorPoint, this), this._uninstallCamera();
                }
                _syncAnchorPoint() {
                    const n384 = this.node, o384 = n384._uiProps.uiTransformComp, p384 = n384.getScale();
                    this._leftDownToCenterX = o384.width * o384.anchorX * p384.x, this._leftDownToCenterY = o384.height * o384.anchorY * p384.y, this._cullingDirty = !0, this.markForUpdateRenderData();
                }
                getLayerName() {
                    return this._layerName;
                }
                setLayerName(m384) {
                    this._layerName = m384;
                }
                getProperty(l384) {
                    return this._properties[l384];
                }
                getPositionAt(i384, j384) {
                    let k384;
                    switch ((void 0 !== j384 ? (k384 = Math.floor(i384), j384 = Math.floor(j384)) : (k384 = Math.floor(i384.x), j384 = Math.floor(i384.y)), this._layerOrientation)) {
                        case t247.ORTHO:
                            return this._positionForOrthoAt(k384, j384);
                        case t247.ISO:
                            return this._positionForIsoAt(k384, j384);
                        case t247.HEX:
                            return this._positionForHexAt(k384, j384);
                    }
                    return null;
                }
                isInvalidPosition(g384, h384) {
                    return g384 >= this._layerSize.width || h384 >= this._layerSize.height || g384 < 0 || h384 < 0;
                }
                _positionForIsoAt(y383, z383) {
                    let a384 = 0, b384 = 0;
                    const c384 = Math.floor(y383) + Math.floor(z383) * this._layerSize.width, d384 = this.tiles[c384];
                    if (d384) {
                        const e384 = (d384 & v247.FLIPPED_MASK) >>> 0, f384 = this.texGrids.get(e384).tileset.tileOffset;
                        a384 = f384.x, b384 = f384.y;
                    }
                    return new s147(.5 * this._mapTileSize.width * (this._layerSize.height + y383 - z383 - 1) + a384, .5 * this._mapTileSize.height * (this._layerSize.width - y383 + this._layerSize.height - z383 - 2) - b384);
                }
                _positionForOrthoAt(q383, r383) {
                    let s383 = 0, t383 = 0;
                    const u383 = Math.floor(q383) + Math.floor(r383) * this._layerSize.width, v383 = this.tiles[u383];
                    if (v383) {
                        const w383 = (v383 & v247.FLIPPED_MASK) >>> 0, x383 = this.texGrids.get(w383).tileset.tileOffset;
                        s383 = x383.x, t383 = x383.y;
                    }
                    return new s147(q383 * this._mapTileSize.width + s383, (this._layerSize.height - r383 - 1) * this._mapTileSize.height - t383);
                }
                _positionForHexAt(d383, e383) {
                    const f383 = this._mapTileSize.width, g383 = this._mapTileSize.height, h383 = this._layerSize.height, i383 = Math.floor(d383) + Math.floor(e383) * this._layerSize.width, j383 = (this.tiles[i383] & v247.FLIPPED_MASK) >>> 0;
                    let k383;
                    k383 = this.texGrids.get(j383) ? this.texGrids.get(j383).tileset.tileOffset : {
                        x: 0,
                        y: 0
                    };
                    const l383 = this._staggerIndex === x247.STAGGERINDEX_ODD ? 1 : -1;
                    let m383 = 0, n383 = 0, o383 = 0, p383 = 0;
                    switch (this._staggerAxis) {
                        case w247.STAGGERAXIS_Y:
                            o383 = 0, e383 % 2 == 1 && (o383 = f383 / 2 * l383), m383 = d383 * f383 + o383 + k383.x, n383 = (h383 - e383 - 1) * (g383 - (g383 - this._hexSideLength) / 2) - k383.y;
                            break;
                        case w247.STAGGERAXIS_X:
                            p383 = 0, d383 % 2 == 1 && (p383 = g383 / 2 * -l383), m383 = d383 * (f383 - (f383 - this._hexSideLength) / 2) + k383.x, n383 = (h383 - e383 - 1) * g383 + p383 - k383.y;
                    }
                    return new s147(m383, n383);
                }
                setTilesGIDAt(v382, w382, x382, y382) {
                    if (!v382 || 0 === v382.length || y382 <= 0)
                        return;
                    x382 < 0 && (x382 = 0), w382 < 0 && (w382 = 0);
                    let z382 = 0;
                    const a383 = w382 + y382;
                    for (let b383 = x382;; b383++)
                        for (let c383 = w382; c383 < a383; c383++) {
                            if (z382 >= v382.length)
                                return;
                            this._updateTileForGID(v382[z382], c383, b383), z382++;
                        }
                }
                setTileGIDAt(q382, r382, s382, t382) {
                    const u382 = (q382 & v247.FLIPPED_MASK) >>> 0;
                    if (r382 = Math.floor(r382), s382 = Math.floor(s382), this.isInvalidPosition(r382, s382))
                        throw new Error("cc.TiledLayer.setTileGIDAt(): invalid position");
                    this.tiles && this._tilesets && 0 !== this._tilesets.length ? 0 !== u382 && u382 < this._tilesets[0].firstGid ? x125(7239, q382) : (t382 = t382 || 0, this._updateTileForGID((u382 | t382) >>> 0, r382, s382)) : x125(7238);
                }
                _updateTileForGID(l382, m382, n382) {
                    const o382 = 0 | m382 + n382 * this._layerSize.width;
                    if (o382 >= this.tiles.length)
                        return;
                    if (l382 === this.tiles[o382])
                        return;
                    const p382 = (l382 & v247.FLIPPED_MASK) >>> 0;
                    this.texGrids.get(p382) ? (this.tiles[o382] = l382, this._updateVertex(m382, n382)) : this.tiles[o382] = 0, this._cullingDirty = !0;
                }
                getTileGIDAt(i382, j382) {
                    if (this.isInvalidPosition(i382, j382))
                        throw new Error("cc.TiledLayer.getTileGIDAt(): invalid position");
                    if (!this.tiles)
                        return x125(7237), null;
                    const k382 = Math.floor(i382) + Math.floor(j382) * this._layerSize.width;
                    return (this.tiles[k382] & v247.FLIPPED_MASK) >>> 0;
                }
                getTileFlagsAt(f382, g382) {
                    if (this.isInvalidPosition(f382, g382))
                        throw new Error("TiledLayer.getTileFlagsAt: invalid position");
                    if (!this.tiles)
                        return x125(7240), null;
                    const h382 = Math.floor(f382) + Math.floor(g382) * this._layerSize.width;
                    return (this.tiles[h382] & v247.FLIPPED_ALL) >>> 0;
                }
                setCullingDirty(e382) {
                    this._cullingDirty = e382;
                }
                isCullingDirty() {
                    return this._cullingDirty;
                }
                updateViewPort(r381, s381, t381, u381) {
                    if (this._viewPort.width === t381 && this._viewPort.height === u381 && this._viewPort.x === r381 && this._viewPort.y === s381)
                        return;
                    this._viewPort.x = r381, this._viewPort.y = s381, this._viewPort.width = t381, this._viewPort.height = u381;
                    let v381 = 1;
                    this._layerOrientation === t247.ISO && (v381 = 2);
                    const w381 = this._viewPort.x - this._offset.x + this._leftDownToCenterX, x381 = this._viewPort.y - this._offset.y + this._leftDownToCenterY;
                    let y381 = w381 - this._leftOffset, z381 = x381 - this._downOffset;
                    const a382 = w381 + t381 + this._rightOffset, b382 = x381 + u381 + this._topOffset, c382 = this._cullingRect.leftDown, d382 = this._cullingRect.rightTop;
                    y381 < 0 && (y381 = 0), z381 < 0 && (z381 = 0), this._positionToRowCol(y381, z381, x248), x248.row -= v381, x248.col -= v381, x248.row = x248.row > 0 ? x248.row : 0, x248.col = x248.col > 0 ? x248.col : 0, x248.row === c382.row && x248.col === c382.col || (c382.row = x248.row, c382.col = x248.col, this._cullingDirty = !0), a382 < 0 || b382 < 0 ? (x248.row = -1, x248.col = -1) : (this._positionToRowCol(a382, b382, x248), x248.row++, x248.col++), x248.row === d382.row && x248.col === d382.col || (d382.row = x248.row, d382.col = x248.col, this._cullingDirty = !0), this._cullingDirty && this.markForUpdateRenderData();
                }
                _positionToRowCol(f381, g381, h381) {
                    const i381 = this._mapTileSize.width, j381 = this._mapTileSize.height, k381 = .5 * i381, l381 = .5 * j381;
                    let m381 = 0, n381 = 0, o381 = 0, p381 = 0;
                    const q381 = this._staggerAxis;
                    switch (this._layerOrientation) {
                        case t247.ORTHO:
                            n381 = Math.floor(f381 / i381), m381 = Math.floor(g381 / j381);
                            break;
                        case t247.ISO:
                            n381 = Math.floor(f381 / k381), m381 = Math.floor(g381 / l381);
                            break;
                        case t247.HEX:
                            q381 === w247.STAGGERAXIS_Y ? (m381 = Math.floor(g381 / (j381 - this._diffY1)), o381 = m381 % 2 == 1 ? k381 * this._odd_even : 0, n381 = Math.floor((f381 - o381) / i381)) : (n381 = Math.floor(f381 / (i381 - this._diffX1)), p381 = n381 % 2 == 1 ? l381 * -this._odd_even : 0, m381 = Math.floor((g381 - p381) / j381));
                    }
                    return h381.row = m381, h381.col = n381, h381;
                }
                updateCulling() {
                    if (this._enableCulling) {
                        this.node.updateWorldTransform(), o147.invert(t248, this.node.getWorldMatrix());
                        const e381 = this._reinstallCamera();
                        e381 && (v248.x = 0, v248.y = 0, v248.z = 0, w248.x = e381.width, w248.y = e381.height, w248.z = 0, e381.screenToWorld(v248, v248), e381.screenToWorld(w248, w248), w146.transformMat4(v248, v248, t248), w146.transformMat4(w248, w248, t248), this.updateViewPort(v248.x, v248.y, w248.x - v248.x, w248.y - v248.y));
                    }
                }
                getLayerOrientation() {
                    return this._layerOrientation;
                }
                getProperties() {
                    return this._properties;
                }
                _updateVertex(w379, x379) {
                    const y379 = v247.FLIPPED_MASK, z379 = this.vertices, a380 = this._layerOrientation, b380 = this.tiles;
                    if (!b380)
                        return;
                    const c380 = this._rightTop, d380 = this._mapTileSize.width, e380 = this._mapTileSize.height, f380 = .5 * d380, g380 = .5 * e380, h380 = this._layerSize.height, i380 = this._layerSize.width, j380 = this.texGrids;
                    let k380, l380, m380, n380, o380, p380, q380 = 0, r380 = 0;
                    a380 === t247.HEX && (k380 = this._staggerAxis, l380 = this._diffX1, m380 = this._diffY1, n380 = this._odd_even);
                    let s380 = 0, t380 = 0, u380 = 0, v380 = 0, w380 = 0, x380 = 0, y380 = 0;
                    const z380 = x379 * i380 + w379;
                    u380 = (b380[z380] & y379) >>> 0;
                    const a381 = j380.get(u380);
                    if (!a381)
                        return;
                    switch ((this._animations.get(u380) && (this._hasAniGrid = this._hasAniGrid || !0), a380)) {
                        case t247.ORTHO:
                            s380 = w379, t380 = h380 - x379 - 1, q380 = s380 * d380, r380 = t380 * e380;
                            break;
                        case t247.ISO:
                            s380 = h380 + w379 - x379 - 1, t380 = h380 + i380 - w379 - x379 - 2, q380 = f380 * s380, r380 = g380 * t380;
                            break;
                        case t247.HEX:
                            o380 = k380 === w247.STAGGERAXIS_Y && x379 % 2 == 1 ? f380 * n380 : 0, p380 = k380 === w247.STAGGERAXIS_X && w379 % 2 == 1 ? g380 * -n380 : 0, q380 = w379 * (d380 - l380) + o380, r380 = (h380 - x379 - 1) * (e380 - m380) + p380, s380 = w379, t380 = h380 - x379 - 1;
                    }
                    const b381 = z379[t380] = z379[t380] || {
                        minCol: 0,
                        maxCol: 0
                    }, c381 = b381[s380] = b381[s380] || {
                        left: 0,
                        bottom: 0,
                        index: 0
                    };
                    b381.minCol > s380 && (b381.minCol = s380), b381.maxCol < s380 && (b381.maxCol = s380), c380.row < t380 && (c380.row = t380, a380 === t247.ISO && (c380.row += 1)), c380.col < s380 && (c380.col = s380, a380 === t247.ISO && (c380.col += 1));
                    const d381 = a381.tileset.tileOffset;
                    q380 += this._offset.x + d381.x + a381.offsetX, r380 += this._offset.y - d381.y - a381.offsetY, v380 = -d381.y + a381.tileset._tileSize.height - e380, v380 = v380 < 0 ? 0 : v380, w380 = d381.y < 0 ? 0 : d381.y, x380 = -d381.x < 0 ? 0 : -d381.x, y380 = d381.x + a381.tileset._tileSize.width - d380, y380 = y380 < 0 ? 0 : y380, this._rightOffset < x380 && (this._rightOffset = x380), this._leftOffset < y380 && (this._leftOffset = y380), this._topOffset < w380 && (this._topOffset = w380), this._downOffset < v380 && (this._downOffset = v380), c381.left = q380, c381.bottom = r380, c381.index = z380, this._cullingDirty = !0;
                }
                _updateVertices() {
                    if (this.vertices.length = 0, !this.tiles)
                        return;
                    const r379 = this._rightTop;
                    r379.row = -1, r379.col = -1;
                    const s379 = this._layerSize.height, t379 = this._layerSize.width;
                    this._topOffset = 0, this._downOffset = 0, this._leftOffset = 0, this._rightOffset = 0, this._hasAniGrid = !1;
                    for (let u379 = 0; u379 < s379; ++u379)
                        for (let v379 = 0; v379 < t379; ++v379)
                            this._updateVertex(v379, u379);
                    this._verticesDirty = !1;
                }
                getTiledTileAt(l379, m379, n379) {
                    if (this.isInvalidPosition(l379, m379))
                        throw new Error("TiledLayer.getTiledTileAt: invalid position");
                    if (!this.tiles)
                        return x125(7236), null;
                    const o379 = Math.floor(l379) + Math.floor(m379) * this._layerSize.width;
                    let p379 = this.tiledTiles[o379];
                    if (!p379 && n379) {
                        const q379 = new h175();
                        return p379 = q379.addComponent(q248), p379._x = l379, p379._y = m379, p379._layer = this, p379.updateInfo(), q379.parent = this.node, p379;
                    }
                    return p379;
                }
                setTiledTileAt(f379, g379, h379) {
                    if (this.isInvalidPosition(f379, g379))
                        throw new Error("TiledLayer.setTiledTileAt: invalid position");
                    if (!this.tiles)
                        return x125(7236), null;
                    const i379 = Math.floor(f379) + Math.floor(g379) * this._layerSize.width;
                    return this.tiledTiles[i379] = h379, this._cullingDirty = !0, this._hasTiledNodeGrid = !!h379 || this.tiledTiles.some(k379 => !!k379), h379;
                }
                getTexture(e379) {
                    return e379 = e379 || 0, this._textures && e379 >= 0 && this._textures.length > e379 ? this._textures[e379] : null;
                }
                getTextures() {
                    return this._textures;
                }
                setTexture(d379) {
                    this.setTextures([d379]);
                }
                setTextures(c379) {
                    this._textures = c379, this.markForUpdateRenderData();
                }
                getLayerSize() {
                    return this._layerSize;
                }
                getMapTileSize() {
                    return this._mapTileSize;
                }
                getTileSet(b379) {
                    return b379 = b379 || 0, this._tilesets && b379 >= 0 && this._tilesets.length > b379 ? this._tilesets[b379] : null;
                }
                getTileSets() {
                    return this._tilesets;
                }
                setTileSet(a379) {
                    this.setTileSets([a379]);
                }
                setTileSets(s378) {
                    this._tilesets = s378;
                    const t378 = this._textures = [], u378 = this.texGrids;
                    u378.clear();
                    for (let y378 = 0; y378 < s378.length; y378++) {
                        const z378 = s378[y378];
                        z378 && (t378[y378] = z378.sourceImage);
                    }
                    for (let v378 = 0, w378 = s378.length; v378 < w378; ++v378) {
                        const x378 = s378[v378];
                        x378 && x142(x378, u378, x378.sourceImage);
                    }
                    this._prepareToRender();
                }
                init(d378, e378, f378, g378, h378) {
                    this._cullingDirty = !0, this._layerInfo = d378, this._mapInfo = e378;
                    const i378 = d378.layerSize;
                    this._layerName = d378.name, this.tiles = d378.tiles, this._properties = d378.properties, this._layerSize = i378, this._minGID = d378.minGID, this._maxGID = d378.maxGID, this._opacity = d378.opacity, d378.tintColor && (this._tintColor = d378.tintColor), this.renderOrder = e378.renderOrder, this._staggerAxis = e378.getStaggerAxis(), this._staggerIndex = e378.getStaggerIndex(), this._hexSideLength = e378.getHexSideLength(), this._animations = e378.getTileAnimations(), this._tilesets = f378, this._textures = g378, this.texGrids = h378, this._layerOrientation = e378.orientation, this._mapTileSize = e378.getTileSize();
                    const j378 = this._mapTileSize.width, k378 = this._mapTileSize.height, l378 = this._layerSize.width, m378 = this._layerSize.height;
                    if (this._layerOrientation === t247.HEX) {
                        let o378 = 0, p378 = 0;
                        const q378 = -2 & j378, r378 = -2 & k378;
                        this._odd_even = this._staggerIndex === x247.STAGGERINDEX_ODD ? 1 : -1, this._staggerAxis === w247.STAGGERAXIS_X ? (this._diffX1 = (q378 - this._hexSideLength) / 2, this._diffY1 = 0, o378 = (this._diffX1 + this._hexSideLength) * l378 + this._diffX1, p378 = r378 * m378 + r378 / 2) : (this._diffX1 = 0, this._diffY1 = (r378 - this._hexSideLength) / 2, o378 = q378 * l378 + q378 / 2, p378 = (this._diffY1 + this._hexSideLength) * m378 + this._diffY1), this.node._uiProps.uiTransformComp.setContentSize(o378, p378);
                    }
                    else if (this._layerOrientation === t247.ISO) {
                        const n378 = l378 + m378;
                        this.node._uiProps.uiTransformComp.setContentSize(.5 * j378 * n378, .5 * k378 * n378);
                    }
                    else
                        this.node._uiProps.uiTransformComp.setContentSize(l378 * j378, m378 * k378);
                    this._offset = new s147(d378.offset.x, -d378.offset.y), this._useAutomaticVertexZ = !1, this._vertexZvalue = 0, this._syncAnchorPoint(), this._prepareToRender();
                }
                _prepareToRender() {
                    this._updateVertices(), this._updateAllUserNode();
                }
                requestTiledRenderData() {
                    const a378 = this._tiledDataArray;
                    for (; a378.length > 0 && a378[a378.length - 1].subNodes && 0 === a378[a378.length - 1].subNodes.length;)
                        a378.pop();
                    if (a378.length > 0) {
                        const c378 = a378[a378.length - 1];
                        if (c378.renderData && 0 === c378.renderData.vertexCount)
                            return c378;
                    }
                    const b378 = {
                        renderData: null,
                        texture: null
                    };
                    return this._tiledDataArray.push(b378), b378;
                }
                requestSubNodesData() {
                    const y377 = this._tiledDataArray;
                    if (y377.length > 0 && y377[y377.length - 1].subNodes && 0 === y377[y377.length - 1].subNodes.length)
                        return y377[y377.length - 1];
                    const z377 = {
                        subNodes: []
                    };
                    return this._tiledDataArray.push(z377), z377;
                }
                destroyRenderData() {
                    this._tiledDataArray.forEach(w377 => {
                        const x377 = w377.renderData;
                        x377 && o189.remove(x377);
                    }), this._tiledDataArray.length = 0, super.destroyRenderData();
                }
                _flushAssembler() {
                    const u377 = t.Assembler.getAssembler(this);
                    this._assembler !== u377 && (this._assembler = u377, this._assembler.createData(this)), 0 === this._tiledDataArray.length && (this.markForUpdateRenderData(), this._updateColor());
                }
                _render(o377) {
                    for (let p377 = 0; p377 < this._tiledDataArray.length; p377++) {
                        this._tiledDataArrayIdx = p377;
                        const q377 = this._tiledDataArray[p377];
                        if (q377.subNodes)
                            q377.subNodes.forEach(t377 => {
                                t377 && o377.walk(t377.node);
                            });
                        else {
                            const s377 = q377;
                            s377.texture && o377.commitComp(this, s377.renderData, s377.texture, this._assembler, null);
                        }
                    }
                    this.node._static = !0;
                }
                createRenderEntity() {
                    return new l189(e189.CROSSED);
                }
                fillIndicesBuffer(h377, i377) {
                    const j377 = h377.chunk.meshBuffer.iData;
                    let k377 = h377.chunk.meshBuffer.indexOffset;
                    i377.setIndexOffset(k377);
                    let l377 = h377.chunk.vertexOffset;
                    const m377 = h377.vertexCount / 4;
                    for (let n377 = 0; n377 < m377; n377 += 1)
                        j377[k377] = l377, j377[k377 + 1] = l377 + 1, j377[k377 + 2] = l377 + 2, j377[k377 + 3] = l377 + 2, j377[k377 + 4] = l377 + 1, j377[k377 + 5] = l377 + 3, k377 += 6, l377 += 4;
                    h377.chunk.meshBuffer.indexOffset = k377, i377.setIBCount(6 * m377);
                }
                prepareDrawData() {
                    this._drawInfoList.length = 0;
                    const x376 = this.renderEntity;
                    x376.clearDynamicRenderDrawInfos();
                    const y376 = this._tiledDataArray;
                    let z376 = 0;
                    y376.forEach(b377 => {
                        if (b377.subNodes)
                            b377.subNodes.forEach(f377 => {
                                if (f377) {
                                    this._drawInfoList[z376] || (this._drawInfoList[z376] = new j189());
                                    const g377 = this._drawInfoList[z376];
                                    g377.setDrawInfoType(b189.SUB_NODE), g377.setSubNode(f377.node), x376.setDynamicRenderDrawInfo(g377, z376), z376++;
                                }
                            });
                        else {
                            const d377 = b377;
                            if (d377.texture) {
                                this._drawInfoList[z376] || (this._drawInfoList[z376] = new j189());
                                const e377 = this._drawInfoList[z376];
                                d377.renderData.fillDrawInfoAttributes(e377), e377.setTexture(d377.texture.getGFXTexture()), e377.setSampler(d377.texture.getGFXSampler()), e377.setMaterial(this.getRenderMaterial(0)), this.fillIndicesBuffer(d377.renderData, e377), x376.setDynamicRenderDrawInfo(e377, z376), z376++;
                            }
                        }
                    });
                }
            }) || s248);
            var a249, b249, c249, d249, e249;
            let f249 = g125("TiledObjectGroup", (a249 = e151("cc.TiledObjectGroup"), b249 = f151(d190), c249 = a131(a146), a249(d249 = b249((i125((e249 = class extends a165 {
                constructor(...w376) {
                    super(...w376), this._premultiplyAlpha = !1, this._groupName = void 0, this._positionOffset = void 0, this._mapInfo = void 0, this._properties = void 0, this._offset = void 0, this._opacity = void 0, this._tintColor = null, this._animations = void 0, this._hasAniObj = void 0, this._texGrids = void 0, this.aniObjects = void 0, this._objects = [];
                }
                get premultiplyAlpha() {
                    return this._premultiplyAlpha;
                }
                set premultiplyAlpha(v376) {
                    this._premultiplyAlpha = v376;
                }
                getPositionOffset() {
                    return this._positionOffset;
                }
                getProperties() {
                    return this._properties;
                }
                getGroupName() {
                    return this._groupName;
                }
                getProperty(u376) {
                    return this._properties[u376.toString()];
                }
                getObject(q376) {
                    for (let r376 = 0, s376 = this._objects.length; r376 < s376; r376++) {
                        const t376 = this._objects[r376];
                        if (t376 && t376.name === q376)
                            return t376;
                    }
                    return null;
                }
                getObjects() {
                    return this._objects;
                }
                get offset() {
                    return this._offset;
                }
                _init(u374, v374, w374) {
                    const x374 = v247.FLIPPED_MASK, y374 = v247.HORIZONTAL, z374 = v247.VERTICAL;
                    this._groupName = u374.name, this._positionOffset = u374.offset, this._mapInfo = v374, this._properties = u374.getProperties(), this._offset = new s147(u374.offset.x, -u374.offset.y), this._opacity = u374.opacity, u374.tintColor && (this._tintColor = u374.tintColor), this._texGrids = w374, this._animations = v374.getTileAnimations(), this.aniObjects = [], this._hasAniObj = !1;
                    const a375 = v374.mapSize, b375 = v374.tileSize;
                    let c375 = 0, d375 = 0;
                    const e375 = new a147(), f375 = t247.ISO === v374.orientation;
                    if (v374.orientation === t247.HEX)
                        v374.getStaggerAxis() === w247.STAGGERAXIS_X ? (d375 = b375.height * (a375.height + .5), c375 = (b375.width + v374.getHexSideLength()) * Math.floor(a375.width / 2) + b375.width * (a375.width % 2)) : (c375 = b375.width * (a375.width + .5), d375 = (b375.height + v374.getHexSideLength()) * Math.floor(a375.height / 2) + b375.height * (a375.height % 2));
                    else if (f375) {
                        const p376 = a375.width + a375.height;
                        c375 = .5 * b375.width * p376, d375 = .5 * b375.height * p376;
                    }
                    else
                        c375 = a375.width * b375.width, d375 = a375.height * b375.height;
                    const g375 = this.node._uiProps.uiTransformComp;
                    g375.setContentSize(c375, d375);
                    const h375 = c375 * g375.anchorX, i375 = d375 * (1 - g375.anchorY), j375 = u374.objects, k375 = {};
                    for (let r375 = 0, s375 = j375.length; r375 < s375; r375++) {
                        const t375 = j375[r375], u375 = t375.type;
                        t375.offset = new s147(t375.x, t375.y);
                        const v375 = t375.points || t375.polylinePoints;
                        if (v375)
                            for (let o376 = 0; o376 < v375.length; o376++)
                                v375[o376].y *= -1;
                        if (f375) {
                            const m376 = t375.x / b375.height, n376 = t375.y / b375.height;
                            t375.x = .5 * b375.width * (a375.height + m376 - n376), t375.y = .5 * b375.height * (a375.width + a375.height - m376 - n376);
                        }
                        else
                            t375.y = d375 - t375.y;
                        if (u375 === z247.TEXT) {
                            const i376 = `text${t375.id}`;
                            k375[i376] = !0;
                            let j376 = this.node.getChildByName(i376);
                            j376 || (j376 = new h175()), j376.setRotationFromEuler(0, 0, -t375.rotation), j376.setPosition(t375.x - h375, t375.y - i375), j376.name = i376, j376.parent = this.node, j376.setSiblingIndex(r375), j376.layer = this.node.layer;
                            let k376 = j376.getComponent(z192);
                            k376 || (k376 = j376.addComponent(z192));
                            const l376 = j376._uiProps.uiTransformComp;
                            j376.active = t375.visible, l376.anchorX = 0, l376.anchorY = 1, this._tintColor ? (e375.set(this._tintColor), e375.a *= this._opacity / 255, k376.color.set(e375)) : k376.color.a *= this._opacity / 255, k376.overflow = z192.Overflow.SHRINK, k376.lineHeight = t375.height, k376.string = t375.text, k376.horizontalAlign = t375.halign, k376.verticalAlign = t375.valign, k376.fontSize = t375.pixelsize, l376.setContentSize(t375.width, t375.height);
                        }
                        else if (u375 === z247.IMAGE) {
                            const w375 = t375.gid, x375 = (w375 & x374) >>> 0, y375 = w374.get(x375);
                            if (!y375)
                                continue;
                            const z375 = y375.tileset, a376 = `img${t375.id}`;
                            k375[a376] = !0;
                            let b376 = this.node.getChildByName(a376);
                            t375.width = t375.width || y375.width, t375.height = t375.height || y375.height, b376 && b376._objFlags & m152.Flags.HideInHierarchy && (b376.removeFromParent(), b376.hideFlags |= m152.Flags.DontSave, b376.destroy(), b376 = null), b376 || (b376 = new h175()), this._animations.get(x375) && (this.aniObjects.push({
                                object: t375,
                                imgNode: b376,
                                gridGID: x375
                            }), this._hasAniObj = !0);
                            const c376 = z375.tileOffset.x, d376 = z375.tileOffset.y;
                            b376.active = t375.visible, b376.setRotationFromEuler(0, 0, -t375.rotation), b376.setPosition(t375.x - h375, t375.y - i375), b376.name = a376, b376.parent = this.node, b376.setSiblingIndex(r375), b376.layer = this.node.layer;
                            let e376 = b376.getComponent(w196);
                            e376 || (e376 = b376.addComponent(w196));
                            const f376 = b376._uiProps.uiTransformComp;
                            f375 ? (f376.anchorX = .5 + c376 / t375.width, f376.anchorY = d376 / t375.height) : (f376.anchorX = c376 / t375.width, f376.anchorY = d376 / t375.height), this._tintColor ? (e375.set(this._tintColor), e375.a *= this._opacity / 255, e376.color.set(e375)) : e376.color.a *= this._opacity / 255, e376.sizeMode = w196.SizeMode.CUSTOM;
                            const g376 = this._premultiplyAlpha ? k158.ONE : k158.SRC_ALPHA;
                            e376.srcBlendFactor !== g376 && (e376.srcBlendFactor = g376, e376.material && e376._updateBlendFunc());
                            let h376 = y375.spriteFrame;
                            h376 = h376 ? h376.clone() : new q186(), (w375 & y374) >>> 0 && (h376.flipUVX = !h376.flipUVX), (w375 & z374) >>> 0 && (h376.flipUVY = !h376.flipUVY), h376.rotated = y375._rotated, h376.rect = y375._rect, e376.spriteFrame = h376, f376.setContentSize(t375.width, t375.height), e376.markForUpdateRenderData();
                        }
                    }
                    this._objects = j375;
                    const l375 = this.node.children, m375 = /^(?:img|text)\d+$/;
                    for (let n375 = 0, o375 = l375.length; n375 < o375; n375++) {
                        const p375 = l375[n375], q375 = p375.name;
                        m375.test(q375) && !k375[q375] && p375.destroy();
                    }
                }
                update(d374) {
                    if (!this._hasAniObj)
                        return;
                    const e374 = this.aniObjects, f374 = this._texGrids, g374 = t247.ISO === this._mapInfo.orientation;
                    for (let h374 = 0, i374 = e374.length; h374 < i374; h374++) {
                        const j374 = e374[h374], k374 = j374.gridGID, l374 = f374.get(k374);
                        if (!l374)
                            continue;
                        const m374 = l374.tileset, n374 = j374.object, o374 = j374.imgNode, p374 = m374.tileOffset.x, q374 = m374.tileOffset.y, r374 = o374._uiProps.uiTransformComp;
                        g374 ? (r374.anchorX = .5 + p374 / n374.width, r374.anchorY = q374 / n374.height) : (r374.anchorX = p374 / n374.width, r374.anchorY = q374 / n374.height);
                        const s374 = o374.getComponent(w196), t374 = s374.spriteFrame;
                        t374.rotated = l374._rotated, t374.rect = l374._rect, s374.spriteFrame = t374, s374.markForUpdateRenderData();
                    }
                }
            }).prototype, "premultiplyAlpha", [c249], Object.getOwnPropertyDescriptor(e249.prototype, "premultiplyAlpha"), e249.prototype), d249 = e249)) || d249) || d249));
            var g249, h249, i249, j249, k249, l249, m249, n249, o249, p249, q249, r249, s249, t249, u249, v249, w249, x249;
            let y249 = g125("TiledMapAsset", (g249 = e151("cc.TiledMapAsset"), h249 = a131([r184]), i249 = a131([b146]), j249 = a131([q186]), k249 = a131([q186]), l249 = a131([b146]), m249 = a131([b146]), n249 = a131([x147]), g249((p249 = class extends t163 {
                constructor(...c374) {
                    super(...c374), this.tmxXmlStr = q249 && q249(), this.tsxFiles = r249 && r249(), this.tsxFileNames = s249 && s249(), this.spriteFrames = t249 && t249(), this.imageLayerSpriteFrame = u249 && u249(), this.imageLayerSpriteFrameNames = v249 && v249(), this.spriteFrameNames = w249 && w249(), this.spriteFrameSizes = x249 && x249();
                }
            }, q249 = p130(p249.prototype, "tmxXmlStr", [j151], function () {
                return "";
            }), r249 = p130(p249.prototype, "tsxFiles", [j151, h249], function () {
                return [];
            }), s249 = p130(p249.prototype, "tsxFileNames", [j151, i249], function () {
                return [];
            }), t249 = p130(p249.prototype, "spriteFrames", [j151, j249], function () {
                return [];
            }), u249 = p130(p249.prototype, "imageLayerSpriteFrame", [j151, k249], function () {
                return [];
            }), v249 = p130(p249.prototype, "imageLayerSpriteFrameNames", [j151, l249], function () {
                return [];
            }), w249 = p130(p249.prototype, "spriteFrameNames", [j151, m249], function () {
                return [];
            }), x249 = p130(p249.prototype, "spriteFrameSizes", [j151, n249], function () {
                return [];
            }), o249 = p249)) || o249));
            var z249, a250, b250, c250, d250, e250, f250, g250, h250;
            g125("TiledMap", (z249 = e151("cc.TiledMap"), a250 = f151(d190), b250 = a131(y249), z249(c250 = a250(((h250 = class extends a165 {
                constructor(...b374) {
                    super(...b374), this._texGrids = new Map(), this._textures = [], this._tilesets = [], this._animations = new Map(), this._imageLayers = [], this._layers = [], this._groups = [], this._images = [], this._properties = {}, this._tileProperties = new Map(), this._mapInfo = null, this._mapSize = new x147(0, 0), this._tileSize = new x147(0, 0), this._mapOrientation = t247.ORTHO, this._isApplied = !1, this._tmxFile = e250 && e250(), this._enableCulling = f250 && f250(), this.cleanupImageCache = g250 && g250();
                }
                get tmxAsset() {
                    return this._tmxFile;
                }
                set tmxAsset(a374) {
                    this._tmxFile !== a374 && (this._tmxFile = a374, this._applyFile(), this._isApplied = !0);
                }
                get enableCulling() {
                    return this._enableCulling;
                }
                set enableCulling(x373) {
                    this._enableCulling = x373;
                    const y373 = this._layers;
                    for (let z373 = 0; z373 < y373.length; ++z373)
                        y373[z373].enableCulling = x373;
                }
                getMapSize() {
                    return this._mapSize;
                }
                getTileSize() {
                    return this._tileSize;
                }
                getMapOrientation() {
                    return this._mapOrientation;
                }
                getObjectGroups() {
                    return this._groups;
                }
                getObjectGroup(s373) {
                    const t373 = this._groups;
                    for (let u373 = 0, v373 = t373.length; u373 < v373; u373++) {
                        const w373 = t373[u373];
                        if (w373 && w373.getGroupName() === s373)
                            return w373;
                    }
                    return null;
                }
                getProperties() {
                    return this._properties;
                }
                getLayers() {
                    return this._layers;
                }
                getLayer(n373) {
                    const o373 = this._layers;
                    for (let p373 = 0, q373 = o373.length; p373 < q373; p373++) {
                        const r373 = o373[p373];
                        if (r373 && r373.getLayerName() === n373)
                            return r373;
                    }
                    return null;
                }
                _changeLayer(h373, i373) {
                    const j373 = this._layers;
                    for (let k373 = 0, l373 = j373.length; k373 < l373; k373++) {
                        const m373 = j373[k373];
                        if (m373 && m373.getLayerName() === h373)
                            return void (j373[k373] = i373);
                    }
                }
                getProperty(g373) {
                    return this._properties[g373.toString()];
                }
                getPropertiesForGID(f373) {
                    return this._tileProperties.get(f373);
                }
                __preload() {
                    this._tmxFile && !1 === this._isApplied && (this._applyFile(), this._isApplied = !0);
                }
                onEnable() {
                    this.node.on(z174.ANCHOR_CHANGED, this._syncAnchorPoint, this);
                }
                onDisable() {
                    this.node.off(z174.ANCHOR_CHANGED, this._syncAnchorPoint, this);
                }
                _applyFile() {
                    const l372 = [], m372 = {}, n372 = this._tmxFile;
                    if (n372) {
                        let o372 = n372.spriteFrameNames;
                        const p372 = n372.spriteFrameSizes, q372 = n372.spriteFrames, r372 = {}, s372 = {};
                        for (let c373 = 0; c373 < o372.length; ++c373) {
                            const d373 = o372[c373];
                            s372[d373] = p372[c373], l372[c373] = q372[c373];
                            const e373 = l372[c373];
                            e373 && (m372[e373.name] = e373, r372[d373] = e373);
                        }
                        const t372 = {}, u372 = n372.imageLayerSpriteFrame;
                        o372 = n372.imageLayerSpriteFrameNames;
                        for (let b373 = 0; b373 < u372.length; ++b373)
                            t372[o372[b373]] = u372[b373];
                        const v372 = n372.tsxFileNames, w372 = n372.tsxFiles, x372 = {};
                        for (let a373 = 0; a373 < v372.length; ++a373)
                            v372[a373].length > 0 && (x372[v372[a373]] = w372[a373].text);
                        const y372 = new e248(n372.tmxXmlStr, x372, r372, s372, t372), z372 = y372.getTilesets();
                        z372 && 0 !== z372.length || x125(7241), this._buildWithMapInfo(y372);
                    }
                    else
                        this._releaseMapInfo();
                }
                _releaseMapInfo() {
                    const a372 = this._layers;
                    for (let j372 = 0, k372 = a372.length; j372 < k372; j372++) {
                        var b372, c372;
                        null === (b372 = a372[j372].node.parent) || void 0 === b372 || b372.off(z174.SIZE_CHANGED, a372[j372].updateCulling, a372[j372]), null === (c372 = a372[j372].node.parent) || void 0 === c372 || c372.off(z174.TRANSFORM_CHANGED, a372[j372].updateCulling, a372[j372]), a372[j372].node.removeFromParent(), a372[j372].node.destroy();
                    }
                    a372.length = 0;
                    const d372 = this._groups;
                    for (let h372 = 0, i372 = d372.length; h372 < i372; h372++)
                        d372[h372].node.removeFromParent(), d372[h372].node.destroy();
                    d372.length = 0;
                    const e372 = this._images;
                    for (let f372 = 0, g372 = e372.length; f372 < g372; f372++)
                        e372[f372].removeFromParent(), e372[f372].destroy();
                    e372.length = 0;
                }
                _syncAnchorPoint() {
                    const o371 = this.node._uiProps.uiTransformComp.anchorPoint, p371 = this.node._uiProps.uiTransformComp.width * o371.x, q371 = this.node._uiProps.uiTransformComp.height * (1 - o371.y);
                    let r371, s371;
                    for (r371 = 0, s371 = this._layers.length; r371 < s371; r371++)
                        this._layers[r371].node._uiProps.uiTransformComp.setAnchorPoint(o371);
                    for (r371 = 0, s371 = this._groups.length; r371 < s371; r371++) {
                        const w371 = this._groups[r371], x371 = w371.node._uiProps.uiTransformComp;
                        x371.anchorX = .5, x371.anchorY = .5;
                        const y371 = w371.offset.x - p371 + x371.width * x371.anchorX, z371 = w371.offset.y + q371 - x371.height * x371.anchorY;
                        w371.node.setPosition(y371, z371);
                    }
                    for (r371 = 0, s371 = this._images.length; r371 < s371; r371++) {
                        const t371 = this._images[r371]._uiProps.uiTransformComp;
                        t371.anchorX = .5, t371.anchorY = .5;
                        const u371 = this._images[r371]._offset.x - p371 + t371.width * t371.anchorX, v371 = this._images[r371]._offset.y + q371 - t371.height * t371.anchorY;
                        this._images[r371].setPosition(u371, v371);
                    }
                }
                _fillAniGrids(h371, i371) {
                    for (const j371 of i371.keys()) {
                        const k371 = i371.get(j371);
                        if (!k371)
                            continue;
                        const l371 = k371.frames;
                        for (let m371 = 0; m371 < l371.length; m371++) {
                            const n371 = l371[m371];
                            n371.grid = h371.get(n371.tileid);
                        }
                    }
                }
                _buildLayerAndGroup() {
                    const w369 = this._tilesets, x369 = this._texGrids, y369 = this._animations;
                    x369.clear();
                    for (let e371 = 0, f371 = w369.length; e371 < f371; ++e371) {
                        const g371 = w369[e371];
                        g371 && (g371.sourceImage ? x142(g371, x369, g371.sourceImage) : console.warn(`Can't find the spriteFrame of tilesets ${e371}`));
                    }
                    this._fillAniGrids(x369, y369);
                    let z369 = this._layers, a370 = this._groups, b370 = this._images;
                    const c370 = {};
                    for (let c371 = 0, d371 = z369.length; c371 < d371; c371++)
                        c370[z369[c371].node.name] = !0;
                    for (let a371 = 0, b371 = a370.length; a371 < b371; a371++)
                        c370[a370[a371].node.name] = !0;
                    for (let y370 = 0, z370 = b370.length; y370 < z370; y370++)
                        c370[b370[y370].name] = !0;
                    z369 = this._layers = [], a370 = this._groups = [], b370 = this._images = [];
                    const d370 = this._mapInfo, e370 = this.node, f370 = d370.getAllChildren(), g370 = this._textures;
                    let h370 = 0, i370 = 0;
                    if (f370 && f370.length > 0)
                        for (let n370 = 0, o370 = f370.length; n370 < o370; n370++) {
                            const p370 = f370[n370], q370 = p370.name;
                            let r370 = this.node.getChildByName(q370);
                            if (c370[q370] = !1, r370 || (r370 = new h175(), r370.name = q370, r370.layer = e370.layer, e370.addChild(r370)), r370.setSiblingIndex(n370), r370.active = p370.visible, p370 instanceof c248) {
                                let x370 = r370.getComponent(z248);
                                x370 || (x370 = r370.addComponent(z248)), x370.init(p370, d370, w369, g370, x369), x370.enableCulling = this._enableCulling, p370.ownTiles = !1, z369.push(x370);
                            }
                            else if (p370 instanceof b248) {
                                let w370 = r370.getComponent(f249);
                                w370 || (w370 = r370.addComponent(f249)), w370._init(p370, d370, x369), a370.push(w370);
                            }
                            else if (p370 instanceof d248) {
                                const s370 = p370.sourceImage;
                                r370.layerInfo = p370, r370._offset = new s147(p370.offset.x, -p370.offset.y);
                                let t370 = r370.getComponent(w196);
                                t370 || (t370 = r370.addComponent(w196)), t370.color.a *= p370.opacity, t370.spriteFrame = s370;
                                let u370 = s370.width, v370 = s370.height;
                                s370.original && (u370 = s370.originalSize.width, v370 = s370.originalSize.height), r370._uiProps.uiTransformComp.setContentSize(u370, v370), b370.push(r370);
                            }
                            h370 = Math.max(h370, r370._uiProps.uiTransformComp.width), i370 = Math.max(i370, r370._uiProps.uiTransformComp.height);
                        }
                    const j370 = e370.children;
                    for (let k370 = 0, l370 = j370.length; k370 < l370; k370++) {
                        const m370 = j370[k370];
                        c370[m370.name] && m370.destroy();
                    }
                    this.node._uiProps.uiTransformComp.setContentSize(h370, i370), this._syncAnchorPoint();
                }
                _buildWithMapInfo(m369) {
                    this._mapInfo = m369, this._mapSize = m369.getMapSize(), this._tileSize = m369.getTileSize(), this._mapOrientation = m369.orientation, this._properties = m369.properties, this._tileProperties = m369.getTileProperties(), this._imageLayers = m369.getImageLayers(), this._animations = m369.getTileAnimations(), this._tilesets = m369.getTilesets();
                    const n369 = this._tilesets;
                    this._textures.length = 0;
                    const o369 = [];
                    for (let t369 = 0, u369 = n369.length; t369 < u369; ++t369) {
                        const v369 = n369[t369];
                        v369 && v369.sourceImage && (this._textures[t369] = v369.sourceImage, o369.push(v369.sourceImage));
                    }
                    for (let r369 = 0; r369 < this._imageLayers.length; r369++) {
                        const s369 = this._imageLayers[r369];
                        s369 && s369.sourceImage && o369.push(s369.sourceImage);
                    }
                    this._buildLayerAndGroup(), this.cleanupImageCache && this._textures.forEach(q369 => {
                        this.doCleanupImageCache(q369);
                    });
                }
                doCleanupImageCache(l369) {
                    l369._image instanceof HTMLImageElement ? (l369._image.src = "", l369._image.destroy()) : i157.hasFeature(i157.Feature.IMAGE_BITMAP) && l369._image instanceof ImageBitmap && l369._image.close && l369._image.close(), l369._image = null;
                }
                lateUpdate(a369) {
                    const b369 = this._animations, c369 = this._texGrids;
                    for (const h369 of b369.keys()) {
                        const i369 = b369.get(h369), j369 = i369.frames;
                        let k369 = j369[i369.frameIdx];
                        i369.dt += a369, k369.duration < i369.dt && (i369.dt = 0, i369.frameIdx++, i369.frameIdx >= j369.length && (i369.frameIdx = 0), k369 = j369[i369.frameIdx]), c369.set(h369, k369.grid);
                    }
                    const d369 = this.getLayers();
                    for (let e369 = 0, f369 = d369.length; e369 < f369; e369++) {
                        const g369 = d369[e369];
                        (g369.hasAnimation() || g369.node.hasChangedFlags) && g369.markForUpdateRenderData();
                    }
                }
            }).Orientation = t247, h250.Property = u247, h250.TileFlag = v247, h250.StaggerAxis = w247, h250.StaggerIndex = x247, h250.TMXObjectType = z247, h250.RenderOrder = y247, e250 = p130((d250 = h250).prototype, "_tmxFile", [j151], function () {
                return null;
            }), i125(d250.prototype, "tmxAsset", [b250], Object.getOwnPropertyDescriptor(d250.prototype, "tmxAsset"), d250.prototype), f250 = p130(d250.prototype, "_enableCulling", [j151], function () {
                return !0;
            }), g250 = p130(d250.prototype, "cleanupImageCache", [j151], function () {
                return !0;
            }), c250 = d250)) || c250) || c250));
            const i250 = Math.ceil(10922.5), j250 = [];
            for (let z368 = 0; z368 < 4; z368++)
                j250.push(new w146());
            const k250 = new o147(), l250 = new w146(), m250 = {
                row: 0,
                col: 0
            };
            let n250, o250, p250, q250 = {
                x: 0,
                y: 0
            }, r250 = {
                x: 0,
                y: 0
            }, s250 = {
                x: 0,
                y: 0
            }, t250 = {
                x: 0,
                y: 0
            }, u250 = 0, v250 = 0, w250 = 0, x250 = 0, y250 = null, z250 = null;
            const a251 = {
                ensureAccessor() {
                    if (!z250) {
                        const x368 = t185.root.device;
                        t185.root.batcher2D, z250 = new x188(x368, l188, this.vCount), t185.on(s185.EVENT_BEFORE_DRAW, () => {
                            z250.reset();
                        });
                    }
                },
                createData(w368) {
                    this.ensureAccessor();
                },
                fillBuffers(o368, p368) {
                    if (!o368 || 0 === o368.tiledDataArray.length)
                        return;
                    const q368 = o368.tiledDataArray[o368._tiledDataArrayIdx].renderData, r368 = q368.chunk.meshBuffer.iData;
                    let s368 = q368.chunk.meshBuffer.indexOffset, t368 = q368.chunk.vertexOffset;
                    const u368 = q368.vertexCount / 4;
                    for (let v368 = 0; v368 < u368; v368 += 1)
                        r368[s368] = t368, r368[s368 + 1] = t368 + 1, r368[s368 + 2] = t368 + 2, r368[s368 + 3] = t368 + 2, r368[s368 + 4] = t368 + 1, r368[s368 + 5] = t368 + 3, s368 += 6, t368 += 4;
                    q368.chunk.meshBuffer.indexOffset = s368;
                },
                updateRenderData(k368) {
                    if (k368.updateCulling(), v250 = k368.leftDownToCenterX, w250 = k368.leftDownToCenterY, k368.colorChanged || k368.isCullingDirty() || k368.isUserNodeDirty() || k368.hasAnimation() || k368.hasTiledNode() || k368.node.hasChangedFlags) {
                        let l368, m368;
                        if (k368.colorChanged = !1, k368.destroyRenderData(), k368.enableCulling) {
                            const n368 = k368.cullingRect;
                            l368 = n368.leftDown, m368 = n368.rightTop;
                        }
                        else
                            l368 = m250, m368 = k368.rightTop;
                        switch (k368.renderOrder) {
                            case y247.RightDown:
                                a143(l368, m368, -1, 1, k368);
                                break;
                            case y247.LeftDown:
                                a143(l368, m368, -1, -1, k368);
                                break;
                            case y247.RightUp:
                                a143(l368, m368, 1, 1, k368);
                                break;
                            case y247.LeftUp:
                            default:
                                a143(l368, m368, 1, -1, k368);
                        }
                        k368.setCullingDirty(!1), k368.setUserNodeDirty(!1);
                    }
                    k368.prepareDrawData();
                },
                updateColor(b368) {
                    const c368 = b368.color, d368 = new Float32Array(4);
                    d368[0] = c368.r / 255, d368[1] = c368.g / 255, d368[2] = c368.b / 255, d368[3] = c368.a / 255;
                    const e368 = b368.tiledDataArray;
                    for (const f368 of e368) {
                        if (!f368.renderData)
                            continue;
                        const g368 = f368.renderData, h368 = g368.vData;
                        for (let i368 = g368.vertexStart, j368 = g368.vertexCount; i368 < j368; i368++)
                            h368.set(d368, 9 * i368 + 5);
                    }
                }
            };
            function y142(y367, z367) {
                let a368;
                y367._rotated ? (q250.x = y367.r, q250.y = y367.t, r250.x = y367.l, r250.y = y367.t, s250.x = y367.r, s250.y = y367.b, t250.x = y367.l, t250.y = y367.b) : (q250.x = y367.l, q250.y = y367.t, r250.x = y367.l, r250.y = y367.b, s250.x = y367.r, s250.y = y367.t, t250.x = y367.r, t250.y = y367.b), (z367 & v247.DIAGONAL) >>> 0 && (a368 = r250, r250 = s250, s250 = a368), (z367 & v247.HORIZONTAL) >>> 0 && (a368 = q250, q250 = s250, s250 = a368, a368 = r250, r250 = t250, t250 = a368), (z367 & v247.VERTICAL) >>> 0 && (a368 = q250, q250 = r250, r250 = a368, a368 = s250, s250 = t250, t250 = a368);
            }
            function z142() {
                if (x250 < 1 || !y250)
                    return;
                const u367 = 4 * x250, v367 = 6 * x250, w367 = o250.requestTiledRenderData();
                w367.renderData = o189.add(l188, z250), w367.renderData.drawInfoType = b189.MIDDLEWARE, w367.texture = y250;
                const x367 = w367.renderData;
                x367.resize(u367, v367), x367.chunk.vb.set(n250.subarray(0, 9 * u367), 0), x250 = 0, y250 = null;
            }
            function a143(m366, n366, o366, p366, q366) {
                if (n366.row < 0 || n366.col < 0)
                    return;
                o250 = q366;
                const r366 = q366.node.worldMatrix;
                u250 = 0;
                const s366 = q366.tiledTiles, t366 = q366.texGrids, u366 = q366.tiles, v366 = 18, w366 = 27, x366 = q366.vertices;
                let y366, z366, a367, b367, c367, d367, e367, f367, g367, h367 = 0, i367 = 0, j367 = 0, k367 = 0, l367 = 0, m367 = 0, n367 = !0;
                p250 = y142;
                const o367 = new Float32Array(4);
                o367[0] = q366.color.r / 255, o367[1] = q366.color.g / 255, o367[2] = q366.color.b / 255, o367[3] = q366.color.a / 255, -1 === o366 ? (b367 = n366.row, c367 = m366.row) : (b367 = m366.row, c367 = n366.row);
                const p367 = Math.abs(m366.row - n366.row) + 1, q367 = Math.abs(n366.col - m366.col) + 1;
                n250 = new Float32Array(p367 * q367 * 36), x250 = 0;
                const r367 = n250;
                for (; (c367 - b367) * o366 >= 0; b367 += o366)
                    for (y366 = x366[b367], m367 = q366.getNodesCountByRow(b367), n367 = y366 && 0 === m367, 1 === p366 ? (z366 = n367 && m366.col < y366.minCol ? y366.minCol : m366.col, a367 = n367 && n366.col > y366.maxCol ? y366.maxCol : n366.col) : (z366 = n367 && n366.col > y366.maxCol ? y366.maxCol : n366.col, a367 = n367 && m366.col < y366.minCol ? y366.minCol : m366.col); (a367 - z366) * p366 >= 0; z366 += p366) {
                        if (d367 = y366 && y366[z366], m367 > 0) {
                            z142();
                            const s367 = q366.requestSubNodesData(), t367 = q366.getNodesByRowCol(b367, z366);
                            t367 && t367.count > 0 && (s367.subNodes = t367.list);
                        }
                        d367 && (h367 = u366[d367.index], f367 = t366.get((h367 & v247.FLIPPED_MASK) >>> 0), f367 && (y250 !== f367.texture && (z142(), y250 = f367.texture), e367 = f367.tileset._tileSize, i367 = d367.left - v250, j367 = d367.bottom - w250, k367 = i367 + e367.width, l367 = j367 + e367.height, g367 = s366[d367.index], u250 = 36 * x250, g367 ? g367.node.active && b143(g367.node, o367, r367, i367, k367, l367, j367, !1) : (j250[0].x = i367, j250[0].y = l367, j250[1].x = i367, j250[1].y = j367, j250[2].x = k367, j250[2].y = l367, j250[3].x = k367, j250[3].y = j367, j250[0].transformMat4(r366), r367[u250] = j250[0].x, r367[u250 + 1] = j250[0].y, r367[u250 + 2] = j250[0].z, j250[1].transformMat4(r366), r367[u250 + 9] = j250[1].x, r367[u250 + 9 + 1] = j250[1].y, r367[u250 + 9 + 2] = j250[1].z, j250[2].transformMat4(r366), r367[u250 + v366] = j250[2].x, r367[u250 + v366 + 1] = j250[2].y, r367[u250 + v366 + 2] = j250[2].z, j250[3].transformMat4(r366), r367[u250 + w366] = j250[3].x, r367[u250 + w366 + 1] = j250[3].y, r367[u250 + w366 + 2] = j250[3].z, r367.set(o367, u250 + 5), r367.set(o367, u250 + 9 + 5), r367.set(o367, u250 + v366 + 5), r367.set(o367, u250 + w366 + 5)), p250(f367, h367), r367[u250 + 3] = q250.x, r367[u250 + 4] = q250.y, r367[u250 + 9 + 3] = r250.x, r367[u250 + 9 + 4] = r250.y, r367[u250 + v366 + 3] = s250.x, r367[u250 + v366 + 4] = s250.y, r367[u250 + w366 + 3] = t250.x, r367[u250 + w366 + 4] = t250.y, x250++, x250 >= i250 && z142()));
                    }
                z142();
            }
            function b143(s365, t365, u365, v365, w365, x365, y365, z365) {
                const a366 = 18, b366 = 27;
                s365.updateWorldTransform(), o147.fromRTS(k250, s365.rotation, s365.position, s365.scale), w146.set(l250, -(v365 + v250), -(y365 + w250), 0), o147.transform(k250, k250, l250), o147.multiply(k250, s365.parent.worldMatrix, k250);
                const c366 = k250, d366 = c366.m12, e366 = c366.m13, f366 = c366.m00, g366 = c366.m01, h366 = c366.m04, i366 = c366.m05, j366 = 1 === f366 && 0 === g366 && 0 === h366 && 1 === i366;
                if (z365) {
                    const k366 = (v365 + w365) / 2, l366 = (x365 + y365) / 2;
                    j366 ? (u365[u250] = k366 + d366, u365[u250 + 1] = x365 + e366, u365[u250 + 9] = v365 + d366, u365[u250 + 9 + 1] = l366 + e366, u365[u250 + a366] = w365 + d366, u365[u250 + a366 + 1] = l366 + e366, u365[u250 + b366] = k366 + d366, u365[u250 + b366 + 1] = y365 + e366) : (u365[u250] = k366 * f366 + x365 * h366 + d366, u365[u250 + 1] = k366 * g366 + x365 * i366 + e366, u365[u250 + 9] = v365 * f366 + l366 * h366 + d366, u365[u250 + 9 + 1] = v365 * g366 + l366 * i366 + e366, u365[u250 + a366] = w365 * f366 + l366 * h366 + d366, u365[u250 + a366 + 1] = w365 * g366 + l366 * i366 + e366, u365[u250 + b366] = k366 * f366 + y365 * h366 + d366, u365[u250 + b366 + 1] = k366 * g366 + y365 * i366 + e366);
                }
                else
                    j366 ? (u365[u250] = v365 + d366, u365[u250 + 1] = x365 + e366, u365[u250 + 9] = v365 + d366, u365[u250 + 9 + 1] = y365 + e366, u365[u250 + a366] = w365 + d366, u365[u250 + a366 + 1] = x365 + e366, u365[u250 + b366] = w365 + d366, u365[u250 + b366 + 1] = y365 + e366) : (u365[u250] = v365 * f366 + x365 * h366 + d366, u365[u250 + 1] = v365 * g366 + x365 * i366 + e366, u365[u250 + 9] = v365 * f366 + y365 * h366 + d366, u365[u250 + 9 + 1] = v365 * g366 + y365 * i366 + e366, u365[u250 + a366] = w365 * f366 + x365 * h366 + d366, u365[u250 + a366 + 1] = w365 * g366 + x365 * i366 + e366, u365[u250 + b366] = w365 * f366 + y365 * h366 + d366, u365[u250 + b366 + 1] = w365 * g366 + y365 * i366 + e366);
                u365.set(t365, u250 + 5), u365.set(t365, u250 + 9 + 5), u365.set(t365, u250 + a366 + 5), u365.set(t365, u250 + b366 + 5);
            }
            const b251 = g125("tiledLayerAssembler", {
                getAssembler: () => a251
            });
            z248.Assembler = b251;
            class c251 {
                constructor() {
                    this.originalTarget = null, this.target = null, this.tag = c251.TAG_INVALID;
                }
                clone() {
                    const r365 = new c251();
                    return r365.originalTarget = null, r365.target = null, r365.tag = this.tag, r365;
                }
                isDone() {
                    return !0;
                }
                startWithTarget(q365) {
                    this.originalTarget = q365, this.target = q365;
                }
                stop() {
                    this.target = null;
                }
                step(p365) {
                    x125(1006);
                }
                update(o365) {
                    x125(1007);
                }
                getTarget() {
                    return this.target;
                }
                setTarget(n365) {
                    this.target = n365;
                }
                getOriginalTarget() {
                    return this.originalTarget;
                }
                setOriginalTarget(m365) {
                    this.originalTarget = m365;
                }
                getTag() {
                    return this.tag;
                }
                setTag(l365) {
                    this.tag = l365;
                }
                reverse() {
                    return x125(1008), null;
                }
                retain() { }
                release() { }
            }
            c251.TAG_INVALID = -1;
            class d251 extends c251 {
                constructor(...k365) {
                    super(...k365), this._duration = 0, this._timesForRepeat = 1;
                }
                getDuration() {
                    return this._duration * (this._timesForRepeat || 1);
                }
                setDuration(j365) {
                    this._duration = j365;
                }
                clone() {
                    return new d251();
                }
            }
            let e251 = 0;
            class f251 {
                constructor() {
                    this.actions = [], this.target = null, this.actionIndex = 0, this.currentAction = null, this.paused = !1, this.lock = !1;
                }
            }
            class g251 {
                constructor() {
                    this._hashTargets = new Map(), this._arrayTargets = [], this._currentTarget = void 0, this._elementPool = [];
                }
                _searchElementByTarget(g365, h365) {
                    for (let i365 = 0; i365 < g365.length; i365++)
                        if (h365 === g365[i365].target)
                            return g365[i365];
                    return null;
                }
                _getElement(d365, e365) {
                    let f365 = this._elementPool.pop();
                    return f365 || (f365 = new f251()), f365.target = d365, f365.paused = !!e365, f365;
                }
                _putElement(c365) {
                    c365.actions.length = 0, c365.actionIndex = 0, c365.currentAction = null, c365.paused = !1, c365.target = null, c365.lock = !1, this._elementPool.push(c365);
                }
                addAction(y364, z364, a365) {
                    if (!y364 || !z364)
                        return void z125(1e3);
                    null == z364.uuid && (z364.uuid = "_TWEEN_UUID_" + e251++);
                    let b365 = this._hashTargets.get(z364);
                    b365 ? b365.actions || (b365.actions = []) : (b365 = this._getElement(z364, a365), this._hashTargets.set(z364, b365), this._arrayTargets.push(b365)), b365.target = z364, b365.actions.push(y364), y364.startWithTarget(z364);
                }
                removeAllActions() {
                    const v364 = this._arrayTargets;
                    for (let w364 = 0; w364 < v364.length; w364++) {
                        const x364 = v364[w364];
                        x364 && this._putElement(x364);
                    }
                    this._arrayTargets.length = 0, this._hashTargets = new Map();
                }
                removeAllActionsFromTarget(t364) {
                    if (null == t364)
                        return;
                    const u364 = this._hashTargets.get(t364);
                    u364 && (u364.actions.length = 0, this._deleteHashElement(u364));
                }
                removeAction(p364) {
                    if (null == p364)
                        return;
                    const q364 = p364.getOriginalTarget(), r364 = this._hashTargets.get(q364);
                    if (r364)
                        for (let s364 = 0; s364 < r364.actions.length; s364++)
                            if (r364.actions[s364] === p364) {
                                r364.actions.splice(s364, 1), r364.actionIndex >= s364 && r364.actionIndex--;
                                break;
                            }
                }
                _removeActionByTag(j364, k364, l364) {
                    for (let m364 = 0, n364 = k364.actions.length; m364 < n364; ++m364) {
                        const o364 = k364.actions[m364];
                        if (o364 && o364.getTag() === j364) {
                            if (l364 && o364.getOriginalTarget() !== l364)
                                continue;
                            this._removeActionAtIndex(m364, k364);
                            break;
                        }
                    }
                }
                _removeAllActionsByTag(e364, f364, g364) {
                    for (let h364 = f364.actions.length - 1; h364 >= 0; --h364) {
                        const i364 = f364.actions[h364];
                        if (i364 && i364.getTag() === e364) {
                            if (g364 && i364.getOriginalTarget() !== g364)
                                continue;
                            this._removeActionAtIndex(h364, f364);
                        }
                    }
                }
                removeActionByTag(y363, z363) {
                    y363 === c251.TAG_INVALID && x125(1002);
                    const a364 = this._hashTargets;
                    if (z363) {
                        const d364 = a364.get(z363);
                        d364 && this._removeActionByTag(y363, d364, z363);
                    }
                    else
                        a364.forEach(c364 => {
                            this._removeActionByTag(y363, c364);
                        });
                }
                removeAllActionsByTag(s363, t363) {
                    s363 === c251.TAG_INVALID && x125(1002);
                    const u363 = this._hashTargets;
                    if (t363) {
                        const x363 = u363.get(t363);
                        x363 && this._removeAllActionsByTag(s363, x363, t363);
                    }
                    else
                        u363.forEach(w363 => {
                            this._removeAllActionsByTag(s363, w363);
                        });
                }
                getActionByTag(n363, o363) {
                    n363 === c251.TAG_INVALID && x125(1004);
                    const p363 = this._hashTargets.get(o363);
                    if (p363) {
                        if (null != p363.actions)
                            for (let q363 = 0; q363 < p363.actions.length; ++q363) {
                                const r363 = p363.actions[q363];
                                if (r363 && r363.getTag() === n363)
                                    return r363;
                            }
                        x125(1005, n363);
                    }
                    return null;
                }
                getNumberOfRunningActionsInTarget(l363) {
                    const m363 = this._hashTargets.get(l363);
                    return m363 && m363.actions ? m363.actions.length : 0;
                }
                pauseTarget(j363) {
                    const k363 = this._hashTargets.get(j363);
                    k363 && (k363.paused = !0);
                }
                resumeTarget(h363) {
                    const i363 = this._hashTargets.get(h363);
                    i363 && (i363.paused = !1);
                }
                pauseAllRunningActions() {
                    const d363 = [], e363 = this._arrayTargets;
                    for (let f363 = 0; f363 < e363.length; f363++) {
                        const g363 = e363[f363];
                        g363 && !g363.paused && (g363.paused = !0, d363.push(g363.target));
                    }
                    return d363;
                }
                resumeTargets(b363) {
                    if (b363)
                        for (let c363 = 0; c363 < b363.length; c363++)
                            b363[c363] && this.resumeTarget(b363[c363]);
                }
                pauseTargets(z362) {
                    if (z362)
                        for (let a363 = 0; a363 < z362.length; a363++)
                            z362[a363] && this.pauseTarget(z362[a363]);
                }
                purgeSharedManager() {
                    s143.director.getScheduler().unscheduleUpdate(this);
                }
                _removeActionAtIndex(x362, y362) {
                    y362.actions[x362], y362.actions.splice(x362, 1), y362.actionIndex >= x362 && y362.actionIndex--, 0 === y362.actions.length && this._deleteHashElement(y362);
                }
                _deleteHashElement(s362) {
                    let t362 = !1;
                    if (s362 && !s362.lock && this._hashTargets.get(s362.target)) {
                        this._hashTargets.delete(s362.target);
                        const u362 = this._arrayTargets;
                        for (let v362 = 0, w362 = u362.length; v362 < w362; v362++)
                            if (u362[v362] === s362) {
                                u362.splice(v362, 1);
                                break;
                            }
                        this._putElement(s362), t362 = !0;
                    }
                    return t362;
                }
                update(m362) {
                    const n362 = this._arrayTargets;
                    let o362;
                    for (let p362 = 0; p362 < n362.length; p362++) {
                        this._currentTarget = n362[p362], o362 = this._currentTarget;
                        const q362 = o362.target;
                        if (!b131(q362) || q362.isValid) {
                            if (!o362.paused && o362.actions) {
                                for (o362.lock = !0, o362.actionIndex = 0; o362.actionIndex < o362.actions.length; o362.actionIndex++)
                                    if (o362.currentAction = o362.actions[o362.actionIndex], o362.currentAction) {
                                        if (o362.currentAction.step(m362 * (this._isActionInternal(o362.currentAction) ? o362.currentAction.getSpeed() : 1)), o362.currentAction && o362.currentAction.isDone()) {
                                            o362.currentAction.stop();
                                            const r362 = o362.currentAction;
                                            o362.currentAction = null, this.removeAction(r362);
                                        }
                                        o362.currentAction = null;
                                    }
                                o362.lock = !1;
                            }
                            0 === o362.actions.length && this._deleteHashElement(o362) && p362--;
                        }
                        else
                            this.removeAllActionsFromTarget(q362), p362--;
                    }
                }
                _isActionInternal(l362) {
                    return void 0 !== l362._speedMethod;
                }
            }
            class h251 extends a156 {
                constructor(...k362) {
                    super(...k362), this.actionMgr = new g251();
                }
                get ActionManager() {
                    return this.actionMgr;
                }
                update(j362) {
                    this.actionMgr.update(j362);
                }
            }
            g125("TweenSystem", h251), h251.ID = "TWEEN", h251.instance = void 0, t185.on(s185.EVENT_INIT, () => {
                const i362 = new h251();
                h251.instance = i362, t185.registerSystem(h251.ID, i362, a156.Priority.MEDIUM);
            });
            class i251 extends d251 {
                isDone() {
                    return !0;
                }
                step(h362) {
                    this.update(1);
                }
                update(g362) { }
                reverse() {
                    return this.clone();
                }
                clone() {
                    return new i251();
                }
            }
            class j251 extends i251 {
                update(d362) {
                    const e362 = this.target.getComponentsInChildren(t190);
                    for (let f362 = 0; f362 < e362.length; ++f362)
                        e362[f362].enabled = !0;
                }
                reverse() {
                    return new k251();
                }
                clone() {
                    return new j251();
                }
            }
            class k251 extends i251 {
                update(a362) {
                    const b362 = this.target.getComponentsInChildren(t190);
                    for (let c362 = 0; c362 < b362.length; ++c362)
                        b362[c362].enabled = !1;
                }
                reverse() {
                    return new j251();
                }
                clone() {
                    return new k251();
                }
            }
            class l251 extends i251 {
                constructor(z361) {
                    super(), this._isNeedCleanUp = !0, void 0 !== z361 && this.init(z361);
                }
                update(y361) {
                    this.target.removeFromParent(), this._isNeedCleanUp && this.target.destroy();
                }
                init(x361) {
                    return this._isNeedCleanUp = x361, !0;
                }
                reverse() {
                    return new l251(this._isNeedCleanUp);
                }
                clone() {
                    return new l251(this._isNeedCleanUp);
                }
            }
            function c143(w361) {
                return new l251(w361);
            }
            class m251 extends i251 {
                constructor(t361, u361, v361) {
                    super(), this._selectorTarget = null, this._function = null, this._data = null, this.initWithFunction(t361, u361, v361);
                }
                initWithFunction(q361, r361, s361) {
                    return q361 && (this._function = q361), r361 && (this._selectorTarget = r361), void 0 !== s361 && (this._data = s361), !0;
                }
                execute() {
                    this._function && this._function.call(this._selectorTarget, this.target, this._data);
                }
                update(p361) {
                    this.execute();
                }
                getTargetCallback() {
                    return this._selectorTarget;
                }
                setTargetCallback(o361) {
                    o361 !== this._selectorTarget && (this._selectorTarget && (this._selectorTarget = null), this._selectorTarget = o361);
                }
                clone() {
                    const n361 = new m251();
                    return n361.initWithFunction(this._function, this._selectorTarget, this._data), n361;
                }
            }
            var n251, o251;
            class p251 extends d251 {
                constructor(m361) {
                    super(), this.MAX_VALUE = 2, this._elapsed = 0, this._firstTick = !1, this._easeList = [], this._speed = 1, this._repeatForever = !1, this._repeatMethod = !1, this._speedMethod = !1, void 0 === m361 || Number.isNaN(m361) || this.initWithDuration(m361);
                }
                getElapsed() {
                    return this._elapsed;
                }
                initWithDuration(l361) {
                    return this._duration = 0 === l361 ? s145.FLT_EPSILON : l361, this._elapsed = 0, this._firstTick = !0, !0;
                }
                isDone() {
                    return this._elapsed >= this._duration;
                }
                _cloneDecoration(k361) {
                    k361._repeatForever = this._repeatForever, k361._speed = this._speed, k361._timesForRepeat = this._timesForRepeat, k361._easeList = this._easeList, k361._speedMethod = this._speedMethod, k361._repeatMethod = this._repeatMethod;
                }
                _reverseEaseList(i361) {
                    if (this._easeList) {
                        i361._easeList = [];
                        for (let j361 = 0; j361 < this._easeList.length; j361++)
                            i361._easeList.push(this._easeList[j361]);
                    }
                }
                clone() {
                    const h361 = new p251(this._duration);
                    return this._cloneDecoration(h361), h361;
                }
                easing(f361) {
                    this._easeList ? this._easeList.length = 0 : this._easeList = [];
                    for (let g361 = 0; g361 < arguments.length; g361++)
                        this._easeList.push(arguments[g361]);
                    return this;
                }
                _computeEaseTime(e361) {
                    return e361;
                }
                step(c361) {
                    this._firstTick ? (this._firstTick = !1, this._elapsed = 0) : this._elapsed += c361;
                    let d361 = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
                    d361 = d361 < 1 ? d361 : 1, this.update(d361 > 0 ? d361 : 0), this._repeatMethod && this._timesForRepeat > 1 && this.isDone() && (this._repeatForever || this._timesForRepeat--, this.startWithTarget(this.target), this.step(this._elapsed - this._duration));
                }
                startWithTarget(b361) {
                    c251.prototype.startWithTarget.call(this, b361), this._elapsed = 0, this._firstTick = !0;
                }
                reverse() {
                    return x125(1010), this;
                }
                setAmplitudeRate(a361) {
                    x125(1011);
                }
                getAmplitudeRate() {
                    return x125(1012), 0;
                }
                speed(z360) {
                    return z360 <= 0 ? (x125(1013), this) : (this._speedMethod = !0, this._speed *= z360, this);
                }
                getSpeed() {
                    return this._speed;
                }
                setSpeed(y360) {
                    return this._speed = y360, this;
                }
                repeat(x360) {
                    return x360 = Math.round(x360), Number.isNaN(x360) || x360 < 1 ? (x125(1014), this) : (this._repeatMethod = !0, this._timesForRepeat *= x360, this);
                }
                repeatForever() {
                    return this._repeatMethod = !0, this._timesForRepeat = this.MAX_VALUE, this._repeatForever = !0, this;
                }
            }
            class q251 extends p251 {
                constructor(r360) {
                    super(), this._actions = [], this._split = 0, this._last = 0, this._reversed = !1;
                    const s360 = r360 instanceof Array ? r360 : arguments;
                    if (1 === s360.length)
                        return void z125(1019);
                    const t360 = s360.length - 1;
                    if (t360 >= 0 && null == s360[t360] && x125(1015), t360 >= 0) {
                        let u360, v360 = s360[0];
                        for (let w360 = 1; w360 < t360; w360++)
                            s360[w360] && (u360 = v360, v360 = q251._actionOneTwo(u360, s360[w360]));
                        this.initWithTwoActions(v360, s360[t360]);
                    }
                }
                initWithTwoActions(m360, n360) {
                    if (!m360 || !n360)
                        return z125(1025), !1;
                    let o360 = m360._duration, p360 = n360._duration;
                    o360 *= m360._repeatMethod ? m360._timesForRepeat : 1, p360 *= n360._repeatMethod ? n360._timesForRepeat : 1;
                    const q360 = o360 + p360;
                    return this.initWithDuration(q360), this._actions[0] = m360, this._actions[1] = n360, !0;
                }
                clone() {
                    const l360 = new q251();
                    return this._cloneDecoration(l360), l360.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone()), l360;
                }
                startWithTarget(k360) {
                    p251.prototype.startWithTarget.call(this, k360), this._split = this._actions[0]._duration / this._duration, this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1, this._last = -1;
                }
                stop() {
                    -1 !== this._last && this._actions[this._last].stop(), c251.prototype.stop.call(this);
                }
                update(d360) {
                    let e360, f360 = 0;
                    const g360 = this._split, h360 = this._actions, i360 = this._last;
                    let j360;
                    (d360 = this._computeEaseTime(d360)) < g360 ? (e360 = 0 !== g360 ? d360 / g360 : 1, 0 === f360 && 1 === i360 && this._reversed && (h360[1].update(0), h360[1].stop())) : (f360 = 1, e360 = 1 === g360 ? 1 : (d360 - g360) / (1 - g360), -1 === i360 && (h360[0].startWithTarget(this.target), h360[0].update(1), h360[0].stop()), 0 === i360 && (h360[0].update(1), h360[0].stop())), j360 = h360[f360], i360 === f360 && j360.isDone() || (i360 !== f360 && j360.startWithTarget(this.target), e360 *= j360._timesForRepeat, j360.update(e360 > 1 ? e360 % 1 : e360), this._last = f360);
                }
                reverse() {
                    const c360 = q251._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
                    return this._cloneDecoration(c360), this._reverseEaseList(c360), c360._reversed = !0, c360;
                }
            }
            function d143(x359) {
                const y359 = x359 instanceof Array ? x359 : arguments;
                if (1 === y359.length)
                    return y359[0];
                const z359 = y359.length - 1;
                z359 >= 0 && null == y359[z359] && x125(1015);
                let a360 = null;
                if (z359 >= 0) {
                    a360 = y359[0];
                    for (let b360 = 1; b360 <= z359; b360++)
                        y359[b360] && (a360 = q251._actionOneTwo(a360, y359[b360]));
                }
                return a360;
            }
            n251 = q251, q251._actionOneTwo = function (u359, v359) {
                const w359 = new n251();
                return w359.initWithTwoActions(u359, v359), w359;
            };
            class r251 extends p251 {
                constructor(s359, t359) {
                    super(), this._times = 0, this._total = 0, this._nextDt = 0, this._actionInstant = !1, this._innerAction = null, void 0 !== t359 && this.initWithAction(s359, t359);
                }
                initWithAction(p359, q359) {
                    const r359 = p359._duration * q359;
                    return !!this.initWithDuration(r359) && (this._times = q359, this._innerAction = p359, p359 instanceof i251 && (this._actionInstant = !0, this._times -= 1), this._total = 0, !0);
                }
                clone() {
                    const o359 = new r251();
                    return this._cloneDecoration(o359), o359.initWithAction(this._innerAction.clone(), this._times), o359;
                }
                startWithTarget(n359) {
                    this._total = 0, this._nextDt = this._innerAction._duration / this._duration, p251.prototype.startWithTarget.call(this, n359), this._innerAction.startWithTarget(n359);
                }
                stop() {
                    this._innerAction.stop(), c251.prototype.stop.call(this);
                }
                update(i359) {
                    i359 = this._computeEaseTime(i359);
                    const j359 = this._innerAction, k359 = this._duration, l359 = this._times;
                    let m359 = this._nextDt;
                    if (i359 >= m359) {
                        for (; i359 > m359 && this._total < l359;)
                            j359.update(1), this._total++, j359.stop(), j359.startWithTarget(this.target), m359 += j359._duration / k359, this._nextDt = m359 > 1 ? 1 : m359;
                        i359 >= 1 && this._total < l359 && (j359.update(1), this._total++), this._actionInstant || (this._total === l359 ? j359.stop() : j359.update(i359 - (m359 - j359._duration / k359)));
                    }
                    else
                        j359.update(i359 * l359 % 1);
                }
                isDone() {
                    return this._total === this._times;
                }
                reverse() {
                    const h359 = new r251(this._innerAction.reverse(), this._times);
                    return this._cloneDecoration(h359), this._reverseEaseList(h359), h359;
                }
                setInnerAction(g359) {
                    this._innerAction !== g359 && (this._innerAction = g359);
                }
                getInnerAction() {
                    return this._innerAction;
                }
            }
            class s251 extends p251 {
                constructor(f359) {
                    super(), this._innerAction = null, f359 && this.initWithAction(f359);
                }
                initWithAction(e359) {
                    return e359 ? (this._innerAction = e359, !0) : (z125(1026), !1);
                }
                clone() {
                    const d359 = new s251();
                    return this._cloneDecoration(d359), d359.initWithAction(this._innerAction.clone()), d359;
                }
                startWithTarget(c359) {
                    p251.prototype.startWithTarget.call(this, c359), this._innerAction.startWithTarget(c359);
                }
                step(a359) {
                    const b359 = this._innerAction;
                    b359.step(a359), b359.isDone() && (b359.startWithTarget(this.target), b359.step(b359.getElapsed() - b359._duration));
                }
                isDone() {
                    return !1;
                }
                reverse() {
                    const z358 = new s251(this._innerAction.reverse());
                    return this._cloneDecoration(z358), this._reverseEaseList(z358), z358;
                }
                setInnerAction(y358) {
                    this._innerAction !== y358 && (this._innerAction = y358);
                }
                getInnerAction() {
                    return this._innerAction;
                }
            }
            class t251 extends p251 {
                constructor(s358) {
                    super(), this._one = null, this._two = null;
                    const t358 = s358 instanceof Array ? s358 : arguments;
                    if (1 === t358.length)
                        return void z125(1020);
                    const u358 = t358.length - 1;
                    if (u358 >= 0 && null == t358[u358] && x125(1015), u358 >= 0) {
                        let v358, w358 = t358[0];
                        for (let x358 = 1; x358 < u358; x358++)
                            t358[x358] && (v358 = w358, w358 = t251._actionOneTwo(v358, t358[x358]));
                        this.initWithTwoActions(w358, t358[u358]);
                    }
                }
                initWithTwoActions(n358, o358) {
                    if (!n358 || !o358)
                        return z125(1027), !1;
                    let p358 = !1;
                    const q358 = n358._duration, r358 = o358._duration;
                    return this.initWithDuration(Math.max(q358, r358)) && (this._one = n358, this._two = o358, q358 > r358 ? this._two = q251._actionOneTwo(o358, f143(q358 - r358)) : q358 < r358 && (this._one = q251._actionOneTwo(n358, f143(r358 - q358))), p358 = !0), p358;
                }
                clone() {
                    const m358 = new t251();
                    return this._cloneDecoration(m358), m358.initWithTwoActions(this._one.clone(), this._two.clone()), m358;
                }
                startWithTarget(l358) {
                    p251.prototype.startWithTarget.call(this, l358), this._one.startWithTarget(l358), this._two.startWithTarget(l358);
                }
                stop() {
                    this._one.stop(), this._two.stop(), c251.prototype.stop.call(this);
                }
                update(k358) {
                    k358 = this._computeEaseTime(k358), this._one && this._one.update(k358), this._two && this._two.update(k358);
                }
                reverse() {
                    const j358 = t251._actionOneTwo(this._one.reverse(), this._two.reverse());
                    return this._cloneDecoration(j358), this._reverseEaseList(j358), j358;
                }
            }
            function e143(f358) {
                const g358 = f358 instanceof Array ? f358 : arguments;
                if (1 === g358.length)
                    return z125(1020), null;
                g358.length > 0 && null == g358[g358.length - 1] && x125(1015);
                let h358 = g358[0];
                for (let i358 = 1; i358 < g358.length; i358++)
                    null != g358[i358] && (h358 = t251._actionOneTwo(h358, g358[i358]));
                return h358;
            }
            o251 = t251, t251._actionOneTwo = function (c358, d358) {
                const e358 = new o251();
                return e358.initWithTwoActions(c358, d358), e358;
            };
            class u251 extends p251 {
                update(b358) { }
                reverse() {
                    const a358 = new u251(this._duration);
                    return this._cloneDecoration(a358), this._reverseEaseList(a358), a358;
                }
                clone() {
                    const z357 = new u251();
                    return this._cloneDecoration(z357), z357.initWithDuration(this._duration), z357;
                }
            }
            function f143(y357) {
                return new u251(y357);
            }
            class v251 extends p251 {
                constructor(x357) {
                    super(), this._other = null, x357 && this.initWithAction(x357);
                }
                initWithAction(w357) {
                    return w357 ? w357 === this._other ? (z125(1029), !1) : !!p251.prototype.initWithDuration.call(this, w357._duration) && (this._other = w357, !0) : (z125(1028), !1);
                }
                clone() {
                    const v357 = new v251();
                    return this._cloneDecoration(v357), v357.initWithAction(this._other.clone()), v357;
                }
                startWithTarget(u357) {
                    p251.prototype.startWithTarget.call(this, u357), this._other.startWithTarget(u357);
                }
                update(t357) {
                    t357 = this._computeEaseTime(t357), this._other && this._other.update(1 - t357);
                }
                reverse() {
                    return this._other.clone();
                }
                stop() {
                    this._other.stop(), c251.prototype.stop.call(this);
                }
            }
            class w251 extends p251 {
                constructor(z356, a357, b357) {
                    if (super(), this._opts = void 0, this._props = void 0, this._originProps = void 0, null == b357)
                        b357 = Object.create(null);
                    else if (function (p357) {
                        const q357 = " [Tween:] ", r357 = ` option is not support in v + ${t143}`, s357 = p357;
                        s357.delay && q125(`${q357}delay${r357}`), s357.repeat && q125(`${q357}repeat${r357}`), s357.repeatDelay && q125(`${q357}repeatDelay${r357}`), s357.interpolation && q125(`${q357}interpolation${r357}`), s357.onStop && q125(`${q357}onStop${r357}`);
                    }(b357), b357.easing && "string" == typeof b357.easing && (b357.easing = function (k357) {
                        const l357 = k357.charAt(0);
                        if (/[A-Z]/.test(l357)) {
                            const m357 = (k357 = k357.replace(l357, l357.toLowerCase())).split("-");
                            if (2 === m357.length) {
                                const n357 = m357[0];
                                if ("linear" === n357)
                                    k357 = "linear";
                                else {
                                    const o357 = m357[1];
                                    switch (n357) {
                                        case "quadratic":
                                            k357 = `quad${o357}`;
                                            break;
                                        case "quartic":
                                            k357 = `quart${o357}`;
                                            break;
                                        case "quintic":
                                            k357 = `quint${o357}`;
                                            break;
                                        case "sinusoidal":
                                            k357 = `sine${o357}`;
                                            break;
                                        case "exponential":
                                            k357 = `expo${o357}`;
                                            break;
                                        case "circular":
                                            k357 = `circ${o357}`;
                                            break;
                                        default:
                                            k357 = n357 + o357;
                                    }
                                }
                            }
                        }
                        return k357;
                    }(b357.easing)), b357.progress || (b357.progress = this.progress), b357.easing && "string" == typeof b357.easing) {
                        const j357 = b357.easing;
                        b357.easing = j153[j357], b357.easing || y125(1031, j357);
                    }
                    this._opts = b357, this._props = Object.create(null);
                    for (const e357 in a357) {
                        if (!a357.hasOwnProperty(e357))
                            continue;
                        let f357, g357, h357 = a357[e357];
                        if ("function" == typeof h357 && (h357 = h357()), null == h357 || "string" == typeof h357)
                            continue;
                        void 0 !== h357.value && (h357.easing || h357.progress) && ("string" == typeof h357.easing ? (f357 = j153[h357.easing], f357 || y125(1031, h357.easing)) : f357 = h357.easing, g357 = h357.progress, h357 = h357.value);
                        const i357 = Object.create(null);
                        i357.value = h357, i357.easing = f357, i357.progress = g357, this._props[e357] = i357;
                    }
                    this._originProps = a357, this.initWithDuration(z356);
                }
                clone() {
                    const y356 = new w251(this._duration, this._originProps, this._opts);
                    return this._cloneDecoration(y356), y356;
                }
                startWithTarget(q356) {
                    p251.prototype.startWithTarget.call(this, q356);
                    const r356 = !!this._opts.relative, s356 = this._props;
                    for (const t356 in s356) {
                        const u356 = q356[t356];
                        if (void 0 === u356)
                            continue;
                        const v356 = s356[t356], w356 = v356.value;
                        if ("number" == typeof u356)
                            v356.start = u356, v356.current = u356, v356.end = r356 ? u356 + w356 : w356;
                        else if ("object" == typeof u356) {
                            null == v356.start && (v356.start = {}, v356.current = {}, v356.end = {});
                            for (const x356 in w356)
                                isNaN(u356[x356]) || (v356.start[x356] = u356[x356], v356.current[x356] = u356[x356], v356.end[x356] = r356 ? u356[x356] + w356[x356] : w356[x356]);
                        }
                    }
                    this._opts.onStart && this._opts.onStart(this.target);
                }
                update(d356) {
                    const e356 = this.target;
                    if (!e356)
                        return;
                    const f356 = this._props, g356 = this._opts;
                    let h356 = d356;
                    g356.easing && (h356 = g356.easing(d356));
                    const i356 = g356.progress;
                    for (const j356 in f356) {
                        const k356 = f356[j356], l356 = k356.easing ? k356.easing(d356) : h356, m356 = k356.progress ? k356.progress : i356, n356 = k356.start, o356 = k356.end;
                        if ("number" == typeof n356)
                            k356.current = m356(n356, o356, k356.current, l356);
                        else if ("object" == typeof n356)
                            for (const p356 in n356)
                                k356.current[p356] = m356(n356[p356], o356[p356], k356.current[p356], l356);
                        e356[j356] = k356.current;
                    }
                    g356.onUpdate && g356.onUpdate(this.target, d356), 1 === d356 && g356.onComplete && g356.onComplete(this.target);
                }
                progress(z355, a356, b356, c356) {
                    return z355 + (a356 - z355) * c356;
                }
            }
            g125("TweenAction", w251);
            class x251 extends i251 {
                constructor(y355) {
                    super(), this._props = void 0, this._props = {}, void 0 !== y355 && this.init(y355);
                }
                init(w355) {
                    for (const x355 in w355)
                        this._props[x355] = w355[x355];
                    return !0;
                }
                update() {
                    const t355 = this._props, u355 = this.target;
                    for (const v355 in t355)
                        u355[v355] = t355[v355];
                }
                clone() {
                    const s355 = new x251();
                    return s355.init(this._props), s355;
                }
            }
            class y251 {
                constructor(r355) {
                    this._actions = [], this._finalAction = null, this._target = null, this._tag = c251.TAG_INVALID, this._target = void 0 === r355 ? null : r355;
                }
                tag(q355) {
                    return this._tag = q355, this;
                }
                then(p355) {
                    return p355 instanceof c251 ? this._actions.push(p355.clone()) : this._actions.push(p355._union()), this;
                }
                target(o355) {
                    return this._target = o355, this;
                }
                start() {
                    return this._target ? (this._finalAction && h251.instance.ActionManager.removeAction(this._finalAction), this._finalAction = this._union(), this._finalAction.setTag(this._tag), h251.instance.ActionManager.addAction(this._finalAction, this._target, !1), this) : (q125("Please set target to tween first"), this);
                }
                stop() {
                    return this._finalAction && h251.instance.ActionManager.removeAction(this._finalAction), this;
                }
                clone(m355) {
                    const n355 = this._union();
                    return g143(m355).then(n355.clone());
                }
                union() {
                    const l355 = this._union();
                    return this._actions.length = 0, this._actions.push(l355), this;
                }
                to(h355, i355, j355) {
                    (j355 = j355 || Object.create(null)).relative = !1;
                    const k355 = new w251(h355, i355, j355);
                    return this._actions.push(k355), this;
                }
                by(d355, e355, f355) {
                    (f355 = f355 || Object.create(null)).relative = !0;
                    const g355 = new w251(d355, e355, f355);
                    return this._actions.push(g355), this;
                }
                set(b355) {
                    const c355 = new x251(b355);
                    return this._actions.push(c355), this;
                }
                delay(z354) {
                    const a355 = f143(z354);
                    return this._actions.push(a355), this;
                }
                call(v354) {
                    const w354 = function (y354) {
                        return new m251(y354, void 0, void 0);
                    }(v354);
                    return this._actions.push(w354), this;
                }
                sequence(...t354) {
                    const u354 = y251._wrappedSequence(...t354);
                    return this._actions.push(u354), this;
                }
                parallel(...r354) {
                    const s354 = y251._wrappedParallel(...r354);
                    return this._actions.push(s354), this;
                }
                repeat(k354, l354) {
                    if (k354 === 1 / 0)
                        return this.repeatForever(l354);
                    const m354 = this._actions;
                    let n354;
                    return n354 = l354 instanceof y251 ? l354._union() : m354.pop(), m354.push(function (p354, q354) {
                        return new r251(p354, q354);
                    }(n354, k354)), this;
                }
                repeatForever(f354) {
                    const g354 = this._actions;
                    let h354;
                    return h354 = f354 instanceof y251 ? f354._union() : g354.pop(), g354.push(function (j354) {
                        return new s251(j354);
                    }(h354)), this;
                }
                reverseTime(a354) {
                    const b354 = this._actions;
                    let c354;
                    return c354 = a354 instanceof y251 ? a354._union() : b354.pop(), b354.push(function (e354) {
                        return new v251(e354);
                    }(c354)), this;
                }
                hide() {
                    const z353 = new k251();
                    return this._actions.push(z353), this;
                }
                show() {
                    const y353 = new j251();
                    return this._actions.push(y353), this;
                }
                removeSelf() {
                    const x353 = c143(!1);
                    return this._actions.push(x353), this;
                }
                destroySelf() {
                    const w353 = c143(!0);
                    return this._actions.push(w353), this;
                }
                static stopAll() {
                    h251.instance.ActionManager.removeAllActions();
                }
                static stopAllByTag(u353, v353) {
                    h251.instance.ActionManager.removeAllActionsByTag(u353, v353);
                }
                static stopAllByTarget(t353) {
                    h251.instance.ActionManager.removeAllActionsFromTarget(t353);
                }
                _union() {
                    const r353 = this._actions;
                    let s353;
                    return s353 = 1 === r353.length ? r353[0] : d143(r353), s353;
                }
                _destroy() {
                    this.stop();
                }
                static _wrappedSequence(...m353) {
                    const n353 = y251._tmp_args;
                    n353.length = 0;
                    for (let o353 = m353.length, p353 = 0; p353 < o353; p353++) {
                        const q353 = n353[p353] = m353[p353];
                        q353 instanceof y251 && (n353[p353] = q353._union());
                    }
                    return d143.apply(d143, n353);
                }
                static _wrappedParallel(...h353) {
                    const i353 = y251._tmp_args;
                    i353.length = 0;
                    for (let j353 = h353.length, k353 = 0; k353 < j353; k353++) {
                        const l353 = i353[k353] = h353[k353];
                        l353 instanceof y251 && (i353[k353] = l353._union());
                    }
                    return e143.apply(e143, i353);
                }
            }
            function g143(t) {
                return new y251(t);
            }
            function h143(g353) {
                return q125("tweenUtil' is deprecated, please use 'tween' instead "), new y251(g353);
            }
            let z251, a252, b252;
            var c252, d252, e252, f252, g252, h252, i252, j252, k252, l252, m252, n252, o252, p252, q252, r252, s252, t252, u252, v252, w252, x252, y252, z252, a253, b253, c253;
            g125("Tween", y251), y251._tmp_args = [], s143.Tween = y251, s143.tween = g143, s143.tweenUtil = h143, function (f353) {
                f353[f353.Other = 0] = "Other", f353[f353.Left = 1] = "Left", f353[f353.Right = 2] = "Right";
            }(z251 || (z251 = {})), function (e353) {
                e353.XRUI_HOVER_ENTERED = "xrui-hover-entered", e353.XRUI_HOVER_EXITED = "xrui-hover-exited", e353.XRUI_HOVER_STAY = "xrui-hover-stay", e353.XRUI_CLICK = "xrui-click", e353.XRUI_UNCLICK = "xrui-unclick";
            }(a252 || (a252 = {})), function (d353) {
                d353.XR_CAPS_LOCK = "xr-caps-lock", d353.XR_KEYBOARD_INIT = "xr-keyboard-init", d353.XR_KEYBOARD_INPUT = "xr-keyboard-input", d353.TO_LATIN = "to-latin", d353.TO_SYMBOL = "to-symbol", d353.TO_MATH_SYMBOL = "to-math-symbol";
            }(b252 || (b252 = {}));
            const d253 = new a147();
            var e253, f253;
            let g253;
            !function (c353) {
                c353[c353.NONE = 0] = "NONE", c353[c353.COLOR = 1] = "COLOR", c353[c353.SPRITE = 2] = "SPRITE", c353[c353.SCALE = 3] = "SCALE";
            }(e253 || (e253 = {})), s127(e253), function (b353) {
                b353.NORMAL = "normal", b353.HOVER = "hover", b353.PRESSED = "pressed", b353.DISABLED = "disabled";
            }(f253 || (f253 = {})), function (a353) {
                a353.CLICK = "click";
            }(g253 || (g253 = {}));
            let h253, i253, j253, k253 = (c252 = e151("cc.Button"), d252 = g151(110), e252 = f151(d190), f252 = a131(h175), g252 = a131(e253), h252 = a131(q186), i252 = a131(q186), j252 = a131(q186), k252 = a131(q186), l252 = a131([p164]), c252(m252 = d252(m252 = e252(((c253 = class extends a165 {
                constructor(...z352) {
                    super(...z352), this.clickEvents = o252 && o252(), this._interactable = p252 && p252(), this._transition = q252 && q252(), this._normalColor = r252 && r252(), this._hoverColor = s252 && s252(), this._pressedColor = t252 && t252(), this._disabledColor = u252 && u252(), this._normalSprite = v252 && v252(), this._hoverSprite = w252 && w252(), this._pressedSprite = x252 && x252(), this._disabledSprite = y252 && y252(), this._duration = z252 && z252(), this._zoomScale = a253 && a253(), this._target = b253 && b253(), this._pressed = !1, this._hovered = !1, this._fromColor = new a147(), this._toColor = new a147(), this._time = 0, this._transitionFinished = !0, this._fromScale = new w146(), this._toScale = new w146(), this._originalScale = null, this._sprite = null, this._targetScale = new w146();
                }
                get target() {
                    return this._target || this.node;
                }
                set target(y352) {
                    this._target !== y352 && (this._target && this._unregisterTargetEvent(this._target), this._target = y352, this._applyTarget());
                }
                get interactable() {
                    return this._interactable;
                }
                set interactable(x352) {
                    this._interactable !== x352 && (this._interactable = x352, this._updateState(), this._interactable || this._resetState());
                }
                set _resizeToTarget(w352) {
                    w352 && this._resizeNodeToTargetNode();
                }
                get transition() {
                    return this._transition;
                }
                set transition(v352) {
                    this._transition !== v352 && (this._transition === e253.COLOR ? this._updateColorTransition(f253.NORMAL) : this._transition === e253.SPRITE && this._updateSpriteTransition(f253.NORMAL), this._transition = v352, this._updateState());
                }
                get normalColor() {
                    return this._normalColor;
                }
                set normalColor(u352) {
                    this._normalColor !== u352 && (this._normalColor.set(u352), this._updateState());
                }
                get pressedColor() {
                    return this._pressedColor;
                }
                set pressedColor(t352) {
                    this._pressedColor !== t352 && this._pressedColor.set(t352);
                }
                get hoverColor() {
                    return this._hoverColor;
                }
                set hoverColor(s352) {
                    this._hoverColor !== s352 && this._hoverColor.set(s352);
                }
                get disabledColor() {
                    return this._disabledColor;
                }
                set disabledColor(r352) {
                    this._disabledColor !== r352 && (this._disabledColor.set(r352), this._updateState());
                }
                get duration() {
                    return this._duration;
                }
                set duration(q352) {
                    this._duration !== q352 && (this._duration = q352);
                }
                get zoomScale() {
                    return this._zoomScale;
                }
                set zoomScale(p352) {
                    this._zoomScale !== p352 && (this._zoomScale = p352);
                }
                get normalSprite() {
                    return this._normalSprite;
                }
                set normalSprite(n352) {
                    if (this._normalSprite === n352)
                        return;
                    this._normalSprite = n352;
                    const o352 = this.node.getComponent(w196);
                    o352 && (o352.spriteFrame = n352), this._updateState();
                }
                get pressedSprite() {
                    return this._pressedSprite;
                }
                set pressedSprite(m352) {
                    this._pressedSprite !== m352 && (this._pressedSprite = m352, this._updateState());
                }
                get hoverSprite() {
                    return this._hoverSprite;
                }
                set hoverSprite(l352) {
                    this._hoverSprite !== l352 && (this._hoverSprite = l352, this._updateState());
                }
                get disabledSprite() {
                    return this._disabledSprite;
                }
                set disabledSprite(k352) {
                    this._disabledSprite !== k352 && (this._disabledSprite = k352, this._updateState());
                }
                __preload() {
                    this.target || (this.target = this.node), this._applyTarget(), this._resetState();
                }
                onEnable() {
                    this._registerNodeEvent();
                }
                onDisable() {
                    this._resetState(), this._unregisterNodeEvent();
                }
                onDestroy() {
                    this.target.isValid && this._unregisterTargetEvent(this.target);
                }
                update(g352) {
                    const h352 = this.target;
                    if (this._transitionFinished || !h352)
                        return;
                    if (this._transition !== e253.COLOR && this._transition !== e253.SCALE)
                        return;
                    this._time += g352;
                    let i352 = 1;
                    if (this._duration > 0 && (i352 = this._time / this._duration), i352 >= 1 && (i352 = 1), this._transition === e253.COLOR) {
                        const j352 = h352._uiProps.uiComp;
                        a147.lerp(d253, this._fromColor, this._toColor, i352), j352 && (j352.color = d253);
                    }
                    else
                        this.transition === e253.SCALE && (h352.getScale(this._targetScale), this._targetScale.x = z128(this._fromScale.x, this._toScale.x, i352), this._targetScale.y = z128(this._fromScale.y, this._toScale.y, i352), h352.setScale(this._targetScale));
                    1 === i352 && (this._transitionFinished = !0);
                }
                _resizeNodeToTargetNode() {
                    this.target && this.target._uiProps.uiTransformComp;
                }
                _resetState() {
                    this._pressed = !1, this._hovered = !1;
                    const d352 = this.target;
                    if (!d352)
                        return;
                    const e352 = this._transition;
                    if (e352 === e253.COLOR && this._interactable) {
                        const f352 = d352.getComponent(h191);
                        f352 && (f352.color = this._normalColor);
                    }
                    else
                        e352 === e253.SCALE && this._originalScale && d352.setScale(this._originalScale);
                    this._transitionFinished = !0;
                }
                _registerNodeEvent() {
                    this.node.on(z174.TOUCH_START, this._onTouchBegan, this), this.node.on(z174.TOUCH_MOVE, this._onTouchMove, this), this.node.on(z174.TOUCH_END, this._onTouchEnded, this), this.node.on(z174.TOUCH_CANCEL, this._onTouchCancel, this), this.node.on(z174.MOUSE_ENTER, this._onMouseMoveIn, this), this.node.on(z174.MOUSE_LEAVE, this._onMouseMoveOut, this), this.node.on(a252.XRUI_HOVER_ENTERED, this._xrHoverEnter, this), this.node.on(a252.XRUI_HOVER_EXITED, this._xrHoverExit, this), this.node.on(a252.XRUI_CLICK, this._xrClick, this), this.node.on(a252.XRUI_UNCLICK, this._xrUnClick, this);
                }
                _registerTargetEvent(c352) {
                    c352.on(z174.TRANSFORM_CHANGED, this._onTargetTransformChanged, this);
                }
                _unregisterNodeEvent() {
                    this.node.off(z174.TOUCH_START, this._onTouchBegan, this), this.node.off(z174.TOUCH_MOVE, this._onTouchMove, this), this.node.off(z174.TOUCH_END, this._onTouchEnded, this), this.node.off(z174.TOUCH_CANCEL, this._onTouchCancel, this), this.node.off(z174.MOUSE_ENTER, this._onMouseMoveIn, this), this.node.off(z174.MOUSE_LEAVE, this._onMouseMoveOut, this), this.node.off(a252.XRUI_HOVER_ENTERED, this._xrHoverEnter, this), this.node.off(a252.XRUI_HOVER_EXITED, this._xrHoverExit, this), this.node.off(a252.XRUI_CLICK, this._xrClick, this), this.node.off(a252.XRUI_UNCLICK, this._xrUnClick, this);
                }
                _unregisterTargetEvent(b352) {
                    b352.off(z174.TRANSFORM_CHANGED);
                }
                _getTargetSprite(z351) {
                    let a352 = null;
                    return z351 && (a352 = z351.getComponent(w196)), a352;
                }
                _applyTarget() {
                    this.target && (this._sprite = this._getTargetSprite(this.target), this._originalScale || (this._originalScale = new w146()), w146.copy(this._originalScale, this.target.getScale()), this._registerTargetEvent(this.target));
                }
                _onTargetSpriteFrameChanged(y351) {
                    this._transition === e253.SPRITE && this._setCurrentStateSpriteFrame(y351.spriteFrame);
                }
                _setCurrentStateSpriteFrame(x351) {
                    if (x351)
                        switch (this._getButtonState()) {
                            case f253.NORMAL:
                                this._normalSprite = x351;
                                break;
                            case f253.HOVER:
                                this._hoverSprite = x351;
                                break;
                            case f253.PRESSED:
                                this._pressedSprite = x351;
                                break;
                            case f253.DISABLED:
                                this._disabledSprite = x351;
                        }
                }
                _onTargetColorChanged(w351) {
                    this._transition === e253.COLOR && this._setCurrentStateColor(w351);
                }
                _setCurrentStateColor(v351) {
                    switch (this._getButtonState()) {
                        case f253.NORMAL:
                            this._normalColor = v351;
                            break;
                        case f253.HOVER:
                            this._hoverColor = v351;
                            break;
                        case f253.PRESSED:
                            this._pressedColor = v351;
                            break;
                        case f253.DISABLED:
                            this._disabledColor = v351;
                    }
                }
                _onTargetTransformChanged(u351) {
                    u351 & b175.SCALE && this._originalScale && this._transition === e253.SCALE && this._transitionFinished && w146.copy(this._originalScale, this.target.getScale());
                }
                _onTouchBegan(t351) {
                    this._interactable && this.enabledInHierarchy && (this._pressed = !0, this._updateState(), t351 && (t351.propagationStopped = !0));
                }
                _onTouchMove(p351) {
                    if (!this._interactable || !this.enabledInHierarchy || !this._pressed)
                        return;
                    if (!p351)
                        return;
                    const q351 = p351.touch;
                    if (!q351)
                        return;
                    const r351 = this.node._uiProps.uiTransformComp.hitTest(q351.getLocation(), p351.windowId);
                    if (this._transition === e253.SCALE && this.target && this._originalScale)
                        r351 ? (w146.copy(this._fromScale, this._originalScale), w146.multiplyScalar(this._toScale, this._originalScale, this._zoomScale), this._transitionFinished = !1) : (this._time = 0, this._transitionFinished = !0, this.target.setScale(this._originalScale));
                    else {
                        let s351;
                        s351 = r351 ? f253.PRESSED : f253.NORMAL, this._applyTransition(s351);
                    }
                    p351 && (p351.propagationStopped = !0);
                }
                _onTouchEnded(o351) {
                    this._interactable && this.enabledInHierarchy && (this._pressed && (p164.emitEvents(this.clickEvents, o351), this.node.emit(g253.CLICK, this)), this._pressed = !1, this._updateState(), o351 && (o351.propagationStopped = !0));
                }
                _onTouchCancel(n351) {
                    this._interactable && this.enabledInHierarchy && (this._pressed = !1, this._updateState());
                }
                _onMouseMoveIn(m351) {
                    !this._pressed && this.interactable && this.enabledInHierarchy && (this._transition !== e253.SPRITE || this._hoverSprite) && (this._hovered || (this._hovered = !0, this._updateState()));
                }
                _onMouseMoveOut(l351) {
                    this._hovered && (this._hovered = !1, this._updateState());
                }
                _updateState() {
                    const k351 = this._getButtonState();
                    this._applyTransition(k351);
                }
                _getButtonState() {
                    let j351 = f253.NORMAL;
                    return this._interactable ? this._pressed ? j351 = f253.PRESSED : this._hovered && (j351 = f253.HOVER) : j351 = f253.DISABLED, j351.toString();
                }
                _updateColorTransition(f351) {
                    var g351;
                    const h351 = this[`${f351}Color`], i351 = null === (g351 = this.target) || void 0 === g351 ? void 0 : g351.getComponent(h191);
                    i351 && (f351 === f253.DISABLED.toString() ? i351.color = h351 : (this._fromColor = i351.color.clone(), this._toColor = h351, this._time = 0, this._transitionFinished = !1));
                }
                _updateSpriteTransition(d351) {
                    const e351 = this[`${d351}Sprite`];
                    this._sprite && e351 && (this._sprite.spriteFrame = e351);
                }
                _updateScaleTransition(c351) {
                    this._interactable && (c351 === f253.PRESSED.toString() ? this._zoomUp() : this._zoomBack());
                }
                _zoomUp() {
                    this._originalScale && (w146.copy(this._fromScale, this._originalScale), w146.multiplyScalar(this._toScale, this._originalScale, this._zoomScale), this._time = 0, this._transitionFinished = !1);
                }
                _zoomBack() {
                    this.target && this._originalScale && (w146.copy(this._fromScale, this.target.getScale()), w146.copy(this._toScale, this._originalScale), this._time = 0, this._transitionFinished = !1);
                }
                _applyTransition(a351) {
                    const b351 = this._transition;
                    b351 === e253.COLOR ? this._updateColorTransition(a351) : b351 === e253.SPRITE ? this._updateSpriteTransition(a351) : b351 === e253.SCALE && this._updateScaleTransition(a351);
                }
                _xrHoverEnter() {
                    this._onMouseMoveIn(), this._updateState();
                }
                _xrHoverExit() {
                    this._onMouseMoveOut(), this._pressed && (this._pressed = !1, this._updateState());
                }
                _xrClick() {
                    this._interactable && this.enabledInHierarchy && (this._pressed = !0, this._updateState());
                }
                _xrUnClick() {
                    this._interactable && this.enabledInHierarchy && (this._pressed && (p164.emitEvents(this.clickEvents, this), this.node.emit(g253.CLICK, this)), this._pressed = !1, this._updateState());
                }
            }).Transition = e253, c253.EventType = g253, i125((n252 = c253).prototype, "target", [f252], Object.getOwnPropertyDescriptor(n252.prototype, "target"), n252.prototype), i125(n252.prototype, "transition", [g252], Object.getOwnPropertyDescriptor(n252.prototype, "transition"), n252.prototype), i125(n252.prototype, "normalSprite", [h252], Object.getOwnPropertyDescriptor(n252.prototype, "normalSprite"), n252.prototype), i125(n252.prototype, "pressedSprite", [i252], Object.getOwnPropertyDescriptor(n252.prototype, "pressedSprite"), n252.prototype), i125(n252.prototype, "hoverSprite", [j252], Object.getOwnPropertyDescriptor(n252.prototype, "hoverSprite"), n252.prototype), i125(n252.prototype, "disabledSprite", [k252], Object.getOwnPropertyDescriptor(n252.prototype, "disabledSprite"), n252.prototype), o252 = p130(n252.prototype, "clickEvents", [l252, j151], function () {
                return [];
            }), p252 = p130(n252.prototype, "_interactable", [j151], function () {
                return !0;
            }), q252 = p130(n252.prototype, "_transition", [j151], function () {
                return e253.NONE;
            }), r252 = p130(n252.prototype, "_normalColor", [j151], function () {
                return a147.WHITE.clone();
            }), s252 = p130(n252.prototype, "_hoverColor", [j151], function () {
                return new a147(211, 211, 211, 255);
            }), t252 = p130(n252.prototype, "_pressedColor", [j151], function () {
                return a147.WHITE.clone();
            }), u252 = p130(n252.prototype, "_disabledColor", [j151], function () {
                return new a147(124, 124, 124, 255);
            }), v252 = p130(n252.prototype, "_normalSprite", [j151], function () {
                return null;
            }), w252 = p130(n252.prototype, "_hoverSprite", [j151], function () {
                return null;
            }), x252 = p130(n252.prototype, "_pressedSprite", [j151], function () {
                return null;
            }), y252 = p130(n252.prototype, "_disabledSprite", [j151], function () {
                return null;
            }), z252 = p130(n252.prototype, "_duration", [j151], function () {
                return .1;
            }), a253 = p130(n252.prototype, "_zoomScale", [j151], function () {
                return 1.2;
            }), b253 = p130(n252.prototype, "_target", [j151], function () {
                return null;
            }), m252 = n252)) || m252) || m252) || m252);
            g125({
                Button: k253,
                ButtonComponent: k253
            }), s143.Button = k253;
            (function (z350) {
                z350[z350.DEFAULT = 0] = "DEFAULT", z350[z350.DONE = 1] = "DONE", z350[z350.SEND = 2] = "SEND", z350[z350.SEARCH = 3] = "SEARCH", z350[z350.GO = 4] = "GO", z350[z350.NEXT = 5] = "NEXT";
            })(h253 || (h253 = {})), p127(h253), function (y350) {
                y350[y350.ANY = 0] = "ANY", y350[y350.EMAIL_ADDR = 1] = "EMAIL_ADDR", y350[y350.NUMERIC = 2] = "NUMERIC", y350[y350.PHONE_NUMBER = 3] = "PHONE_NUMBER", y350[y350.URL = 4] = "URL", y350[y350.DECIMAL = 5] = "DECIMAL", y350[y350.SINGLE_LINE = 6] = "SINGLE_LINE";
            }(i253 || (i253 = {})), p127(i253), function (x350) {
                x350[x350.PASSWORD = 0] = "PASSWORD", x350[x350.SENSITIVE = 1] = "SENSITIVE", x350[x350.INITIAL_CAPS_WORD = 2] = "INITIAL_CAPS_WORD", x350[x350.INITIAL_CAPS_SENTENCE = 3] = "INITIAL_CAPS_SENTENCE", x350[x350.INITIAL_CAPS_ALL_CHARACTERS = 4] = "INITIAL_CAPS_ALL_CHARACTERS", x350[x350.DEFAULT = 5] = "DEFAULT";
            }(j253 || (j253 = {})), p127(j253);
            var l253, m253, n253, o253, p253, q253, r253, s253, t253, u253, v253, w253, x253, y253, z253, a254, b254, c254, d254, e254, f254, g254, h254, i254, j254, k254, l254, m254, n254, o254;
            u143.document, new o147(), new o147(), new w146(), function (w350) {
                w350.EDITING_DID_BEGAN = "editing-did-began", w350.EDITING_DID_ENDED = "editing-did-ended", w350.TEXT_CHANGED = "text-changed", w350.EDITING_RETURN = "editing-return", w350.XR_EDITING_DID_BEGAN = "xr-editing-did-began", w350.XR_EDITING_DID_ENDED = "xr-editing-did-ended";
            }(o254 || (o254 = {}));
            let p254 = (l253 = e151("cc.EditBox"), m253 = g151(110), n253 = f151(d190), o253 = a131(z192), p253 = a131(z192), q253 = a131(q186), r253 = a131(j253), s253 = a131(i253), t253 = a131(h253), u253 = a131([p164]), v253 = a131([p164]), w253 = a131([p164]), x253 = a131([p164]), l253(y253 = m253(y253 = n253(((n254 = class t extends a165 {
                constructor(...v350) {
                    super(...v350), this.editingDidBegan = a254 && a254(), this.textChanged = b254 && b254(), this.editingDidEnded = c254 && c254(), this.editingReturn = d254 && d254(), this._impl = null, this._background = null, this._textLabel = e254 && e254(), this._placeholderLabel = f254 && f254(), this._returnType = g254 && g254(), this._string = h254 && h254(), this._tabIndex = i254 && i254(), this._backgroundImage = j254 && j254(), this._inputFlag = k254 && k254(), this._inputMode = l254 && l254(), this._maxLength = m254 && m254(), this._isLabelVisible = !1;
                }
                get string() {
                    return this._string;
                }
                set string(u350) {
                    this._maxLength >= 0 && u350.length >= this._maxLength && (u350 = u350.slice(0, this._maxLength)), this._string !== u350 && (this._string = u350, this._updateString(u350));
                }
                get placeholder() {
                    return this._placeholderLabel ? this._placeholderLabel.string : "";
                }
                set placeholder(t350) {
                    this._placeholderLabel && (this._placeholderLabel.string = t350);
                }
                get textLabel() {
                    return this._textLabel;
                }
                set textLabel(s350) {
                    this._textLabel !== s350 && (this._textLabel = s350, this._textLabel && (this._updateTextLabel(), this._updateLabels()));
                }
                get placeholderLabel() {
                    return this._placeholderLabel;
                }
                set placeholderLabel(r350) {
                    this._placeholderLabel !== r350 && (this._placeholderLabel = r350, this._placeholderLabel && (this._updatePlaceholderLabel(), this._updateLabels()));
                }
                get backgroundImage() {
                    return this._backgroundImage;
                }
                set backgroundImage(q350) {
                    this._backgroundImage !== q350 && (this._backgroundImage = q350, this._ensureBackgroundSprite(), this._background.spriteFrame = q350);
                }
                get inputFlag() {
                    return this._inputFlag;
                }
                set inputFlag(p350) {
                    this._inputFlag !== p350 && (this._inputFlag = p350, this._updateString(this._string));
                }
                get inputMode() {
                    return this._inputMode;
                }
                set inputMode(o350) {
                    this._inputMode !== o350 && (this._inputMode = o350, this._updateTextLabel(), this._updatePlaceholderLabel());
                }
                get returnType() {
                    return this._returnType;
                }
                set returnType(n350) {
                    this._returnType = n350;
                }
                get maxLength() {
                    return this._maxLength;
                }
                set maxLength(m350) {
                    this._maxLength = m350;
                }
                get tabIndex() {
                    return this._tabIndex;
                }
                set tabIndex(l350) {
                    this._tabIndex !== l350 && (this._tabIndex = l350, this._impl && this._impl.setTabIndex(l350));
                }
                __preload() {
                    this._init();
                }
                onEnable() {
                    this._registerEvent(), this._ensureBackgroundSprite(), this._impl && this._impl.onEnable();
                }
                update() {
                    this._impl && this._impl.update();
                }
                onDisable() {
                    this._unregisterEvent(), this._unregisterBackgroundEvent(), this._impl && this._impl.onDisable();
                }
                onDestroy() {
                    this._impl && this._impl.clear();
                }
                setFocus() {
                    this._impl && this._impl.setFocus(!0);
                }
                focus() {
                    this._impl && this._impl.setFocus(!0);
                }
                blur() {
                    this._impl && this._impl.setFocus(!1);
                }
                isFocused() {
                    return !!this._impl && this._impl.isFocused();
                }
                _editBoxEditingDidBegan() {
                    p164.emitEvents(this.editingDidBegan, this), this.node.emit(o254.EDITING_DID_BEGAN, this);
                }
                _editBoxEditingDidEnded(k350) {
                    p164.emitEvents(this.editingDidEnded, this), this.node.emit(o254.EDITING_DID_ENDED, this, k350);
                }
                _editBoxTextChanged(j350) {
                    j350 = this._updateLabelStringStyle(j350, !0), this.string = j350, p164.emitEvents(this.textChanged, j350, this), this.node.emit(o254.TEXT_CHANGED, this);
                }
                _editBoxEditingReturn(i350) {
                    p164.emitEvents(this.editingReturn, this), this.node.emit(o254.EDITING_RETURN, this, i350);
                }
                _showLabels() {
                    this._isLabelVisible = !0, this._updateLabels();
                }
                _hideLabels() {
                    this._isLabelVisible = !1, this._textLabel && (this._textLabel.node.active = !1), this._placeholderLabel && (this._placeholderLabel.node.active = !1);
                }
                _onTouchBegan(h350) {
                    h350.propagationStopped = !0;
                }
                _onTouchCancel(g350) {
                    g350.propagationStopped = !0;
                }
                _onTouchEnded(f350) {
                    this._impl && this._impl.beginEditing(), f350.propagationStopped = !0;
                }
                _init() {
                    this._updatePlaceholderLabel(), this._updateTextLabel(), this._isLabelVisible = !0, this.node.on(z174.SIZE_CHANGED, this._resizeChildNodes, this), (this._impl = new t._EditBoxImpl()).init(this), this._updateString(this._string), this._syncSize();
                }
                _ensureBackgroundSprite() {
                    if (!this._background) {
                        let e350 = this.node.getComponent(w196);
                        e350 || (e350 = this.node.addComponent(w196)), e350 !== this._background && (e350.type = w196.Type.SLICED, e350.spriteFrame = this._backgroundImage, this._background = e350, this._registerBackgroundEvent());
                    }
                }
                _updateTextLabel() {
                    let c350 = this._textLabel;
                    if (!c350) {
                        let d350 = this.node.getChildByName("TEXT_LABEL");
                        d350 || (d350 = new h175("TEXT_LABEL"), d350.layer = this.node.layer), c350 = d350.getComponent(z192), c350 || (c350 = d350.addComponent(z192)), d350.parent = this.node, this._textLabel = c350;
                    }
                    this._inputMode === i253.ANY ? (c350.verticalAlign = w192.TOP, c350.enableWrapText = !0) : c350.enableWrapText = !1, c350.string = this._updateLabelStringStyle(this._string);
                }
                _updatePlaceholderLabel() {
                    let a350 = this._placeholderLabel;
                    if (!a350) {
                        let b350 = this.node.getChildByName("PLACEHOLDER_LABEL");
                        b350 || (b350 = new h175("PLACEHOLDER_LABEL"), b350.layer = this.node.layer), a350 = b350.getComponent(z192), a350 || (a350 = b350.addComponent(z192)), b350.parent = this.node, this._placeholderLabel = a350;
                    }
                    this._inputMode === i253.ANY ? a350.enableWrapText = !0 : a350.enableWrapText = !1, a350.string = this.placeholder;
                }
                _syncSize() {
                    const x349 = this.node._uiProps.uiTransformComp, y349 = x349.contentSize;
                    if (this._background) {
                        const z349 = this._background.node._uiProps.uiTransformComp;
                        z349.anchorPoint = x349.anchorPoint, z349.setContentSize(y349);
                    }
                    this._updateLabelPosition(y349), this._impl && this._impl.setSize(y349.width, y349.height);
                }
                _updateLabels() {
                    if (this._isLabelVisible) {
                        const w349 = this._string;
                        this._textLabel && (this._textLabel.node.active = "" !== w349), this._placeholderLabel && (this._placeholderLabel.node.active = "" === w349);
                    }
                }
                _updateString(t349) {
                    const u349 = this._textLabel;
                    if (!u349)
                        return;
                    let v349 = t349;
                    v349 && (v349 = this._updateLabelStringStyle(v349)), u349.string = v349, this._updateLabels();
                }
                _updateLabelStringStyle(k349, l349 = !1) {
                    const m349 = this._inputFlag;
                    if (l349 || m349 !== j253.PASSWORD)
                        m349 === j253.INITIAL_CAPS_ALL_CHARACTERS ? k349 = k349.toUpperCase() : m349 === j253.INITIAL_CAPS_WORD ? k349 = k349.replace(/(?:^|\s)\S/g, s349 => s349.toUpperCase()) : m349 === j253.INITIAL_CAPS_SENTENCE && (k349 = (n349 = k349).charAt(0).toUpperCase() + n349.slice(1));
                    else {
                        let p349 = "";
                        const q349 = k349.length;
                        for (let r349 = 0; r349 < q349; ++r349)
                            p349 += "●";
                        k349 = p349;
                    }
                    var n349;
                    return k349;
                }
                _registerEvent() {
                    this.node.on(z174.TOUCH_START, this._onTouchBegan, this), this.node.on(z174.TOUCH_END, this._onTouchEnded, this), this.node.on(a252.XRUI_UNCLICK, this._xrUnClick, this), this.node.on(b252.XR_KEYBOARD_INPUT, this._xrKeyBoardInput, this);
                }
                _unregisterEvent() {
                    this.node.off(z174.TOUCH_START, this._onTouchBegan, this), this.node.off(z174.TOUCH_END, this._onTouchEnded, this), this.node.off(a252.XRUI_UNCLICK, this._xrUnClick, this), this.node.off(b252.XR_KEYBOARD_INPUT, this._xrKeyBoardInput, this);
                }
                _onBackgroundSpriteFrameChanged() {
                    this._background && (this.backgroundImage = this._background.spriteFrame);
                }
                _registerBackgroundEvent() {
                    const j349 = this._background && this._background.node;
                    null == j349 || j349.on(w196.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this);
                }
                _unregisterBackgroundEvent() {
                    const i349 = this._background && this._background.node;
                    null == i349 || i349.off(w196.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this);
                }
                _updateLabelPosition(c349) {
                    const d349 = this.node._uiProps.uiTransformComp, e349 = -d349.anchorX * d349.width, f349 = -d349.anchorY * d349.height, g349 = this._placeholderLabel, h349 = this._textLabel;
                    h349 && (h349.node._uiProps.uiTransformComp.setContentSize(c349.width - 2, c349.height), h349.node.setPosition(e349 + 2, f349 + c349.height, h349.node.position.z), this._inputMode === i253.ANY && (h349.verticalAlign = w192.TOP), h349.enableWrapText = this._inputMode === i253.ANY), g349 && (g349.node._uiProps.uiTransformComp.setContentSize(c349.width - 2, c349.height), g349.node.setPosition(e349 + 2, f349 + c349.height, g349.node.position.z), g349.enableWrapText = this._inputMode === i253.ANY);
                }
                _resizeChildNodes() {
                    const y348 = this.node._uiProps.uiTransformComp, z348 = this._textLabel && this._textLabel.node;
                    z348 && (z348.setPosition(-y348.width / 2, y348.height / 2, z348.position.z), z348._uiProps.uiTransformComp.setContentSize(y348.contentSize));
                    const a349 = this._placeholderLabel && this._placeholderLabel.node;
                    a349 && (a349.setPosition(-y348.width / 2, y348.height / 2, a349.position.z), a349._uiProps.uiTransformComp.setContentSize(y348.contentSize));
                    const b349 = this._background && this._background.node;
                    b349 && b349._uiProps.uiTransformComp.setContentSize(y348.contentSize), this._syncSize();
                }
                _xrUnClick() {
                    this.node.emit(o254.XR_EDITING_DID_BEGAN, this._maxLength, this.string);
                }
                _xrKeyBoardInput(x348) {
                    this.string = x348;
                }
            })._EditBoxImpl = class {
                constructor() {
                    this._editing = !1, this._delegate = null;
                }
                init(w348) { }
                onEnable() { }
                update() { }
                onDisable() {
                    this._editing && this.endEditing();
                }
                clear() {
                    this._delegate = null;
                }
                setTabIndex(v348) { }
                setSize(t348, u348) { }
                setFocus(s348) {
                    s348 ? this.beginEditing() : this.endEditing();
                }
                isFocused() {
                    return this._editing;
                }
                beginEditing() { }
                endEditing() { }
            }, n254.KeyboardReturnType = h253, n254.InputFlag = j253, n254.InputMode = i253, n254.EventType = o254, i125((z253 = n254).prototype, "textLabel", [o253], Object.getOwnPropertyDescriptor(z253.prototype, "textLabel"), z253.prototype), i125(z253.prototype, "placeholderLabel", [p253], Object.getOwnPropertyDescriptor(z253.prototype, "placeholderLabel"), z253.prototype), i125(z253.prototype, "backgroundImage", [q253], Object.getOwnPropertyDescriptor(z253.prototype, "backgroundImage"), z253.prototype), i125(z253.prototype, "inputFlag", [r253], Object.getOwnPropertyDescriptor(z253.prototype, "inputFlag"), z253.prototype), i125(z253.prototype, "inputMode", [s253], Object.getOwnPropertyDescriptor(z253.prototype, "inputMode"), z253.prototype), i125(z253.prototype, "returnType", [t253], Object.getOwnPropertyDescriptor(z253.prototype, "returnType"), z253.prototype), a254 = p130(z253.prototype, "editingDidBegan", [u253, j151], function () {
                return [];
            }), b254 = p130(z253.prototype, "textChanged", [v253, j151], function () {
                return [];
            }), c254 = p130(z253.prototype, "editingDidEnded", [w253, j151], function () {
                return [];
            }), d254 = p130(z253.prototype, "editingReturn", [x253, j151], function () {
                return [];
            }), e254 = p130(z253.prototype, "_textLabel", [j151], function () {
                return null;
            }), f254 = p130(z253.prototype, "_placeholderLabel", [j151], function () {
                return null;
            }), g254 = p130(z253.prototype, "_returnType", [j151], function () {
                return h253.DEFAULT;
            }), h254 = p130(z253.prototype, "_string", [j151], function () {
                return "";
            }), i254 = p130(z253.prototype, "_tabIndex", [j151], function () {
                return 0;
            }), j254 = p130(z253.prototype, "_backgroundImage", [j151], function () {
                return null;
            }), k254 = p130(z253.prototype, "_inputFlag", [j151], function () {
                return j253.DEFAULT;
            }), l254 = p130(z253.prototype, "_inputMode", [j151], function () {
                return i253.ANY;
            }), m254 = p130(z253.prototype, "_maxLength", [j151], function () {
                return 20;
            }), y253 = z253)) || y253) || y253) || y253);
            var q254, r254, s254, t254, u254, v254, w254, x254, y254, z254, a255, b255, c255, d255, e255, f255, g255, h255, i255, j255, k255, l255, m255, n255, o255, p255, q255, r255, s255, t255, u255, v255, w255, x255;
            g125({
                EditBox: p254,
                EditBoxComponent: p254
            }), s143.internal.EditBox = p254, function (r348) {
                r348[r348.NONE = 0] = "NONE", r348[r348.HORIZONTAL = 1] = "HORIZONTAL", r348[r348.VERTICAL = 2] = "VERTICAL", r348[r348.GRID = 3] = "GRID";
            }(s255 || (s255 = {})), s127(s255), function (q348) {
                q348[q348.NONE = 0] = "NONE", q348[q348.CONTAINER = 1] = "CONTAINER", q348[q348.CHILDREN = 2] = "CHILDREN";
            }(t255 || (t255 = {})), s127(t255), function (p348) {
                p348[p348.HORIZONTAL = 0] = "HORIZONTAL", p348[p348.VERTICAL = 1] = "VERTICAL";
            }(u255 || (u255 = {})), s127(u255), function (o348) {
                o348[o348.BOTTOM_TO_TOP = 0] = "BOTTOM_TO_TOP", o348[o348.TOP_TO_BOTTOM = 1] = "TOP_TO_BOTTOM";
            }(v255 || (v255 = {})), s127(v255), function (n348) {
                n348[n348.LEFT_TO_RIGHT = 0] = "LEFT_TO_RIGHT", n348[n348.RIGHT_TO_LEFT = 1] = "RIGHT_TO_LEFT";
            }(w255 || (w255 = {})), s127(w255), function (m348) {
                m348[m348.NONE = 0] = "NONE", m348[m348.FIXED_ROW = 1] = "FIXED_ROW", m348[m348.FIXED_COL = 2] = "FIXED_COL";
            }(x255 || (x255 = {})), s127(x255);
            const y255 = new w146();
            let z255 = (q254 = e151("cc.Layout"), r254 = g151(110), s254 = f151(d190), t254 = a131(s255), u254 = a131(t255), v254 = a131(u255), w254 = a131(v255), x254 = a131(w255), y254 = a131(x255), q254(z254 = r254(z254 = s254(((r255 = class extends a165 {
                constructor(...l348) {
                    super(...l348), this._resizeMode = b255 && b255(), this._layoutType = c255 && c255(), this._cellSize = d255 && d255(), this._startAxis = e255 && e255(), this._paddingLeft = f255 && f255(), this._paddingRight = g255 && g255(), this._paddingTop = h255 && h255(), this._paddingBottom = i255 && i255(), this._spacingX = j255 && j255(), this._spacingY = k255 && k255(), this._verticalDirection = l255 && l255(), this._horizontalDirection = m255 && m255(), this._constraint = n255 && n255(), this._constraintNum = o255 && o255(), this._affectedByScale = p255 && p255(), this._isAlign = q255 && q255(), this._layoutSize = new x147(300, 200), this._layoutDirty = !0, this._childrenDirty = !1, this._usefulLayoutObj = [], this._init = !1;
                }
                get alignHorizontal() {
                    return this._isAlign;
                }
                set alignHorizontal(k348) {
                    this._layoutType === s255.HORIZONTAL && (this._isAlign = k348, this._doLayoutDirty());
                }
                get alignVertical() {
                    return this._isAlign;
                }
                set alignVertical(j348) {
                    this._layoutType === s255.VERTICAL && (this._isAlign = j348, this._doLayoutDirty());
                }
                get type() {
                    return this._layoutType;
                }
                set type(i348) {
                    this._layoutType = i348, this._doLayoutDirty();
                }
                get resizeMode() {
                    return this._resizeMode;
                }
                set resizeMode(h348) {
                    this._layoutType !== s255.NONE && (this._resizeMode = h348, this._doLayoutDirty());
                }
                get cellSize() {
                    return this._cellSize;
                }
                set cellSize(g348) {
                    this._cellSize !== g348 && (this._cellSize.set(g348), this._doLayoutDirty());
                }
                get startAxis() {
                    return this._startAxis;
                }
                set startAxis(f348) {
                    this._startAxis !== f348 && (this._startAxis = f348, this._doLayoutDirty());
                }
                get paddingLeft() {
                    return this._paddingLeft;
                }
                set paddingLeft(e348) {
                    this._paddingLeft !== e348 && (this._paddingLeft = e348, this._doLayoutDirty());
                }
                get paddingRight() {
                    return this._paddingRight;
                }
                set paddingRight(d348) {
                    this._paddingRight !== d348 && (this._paddingRight = d348, this._doLayoutDirty());
                }
                get paddingTop() {
                    return this._paddingTop;
                }
                set paddingTop(c348) {
                    this._paddingTop !== c348 && (this._paddingTop = c348, this._doLayoutDirty());
                }
                get paddingBottom() {
                    return this._paddingBottom;
                }
                set paddingBottom(b348) {
                    this._paddingBottom !== b348 && (this._paddingBottom = b348, this._doLayoutDirty());
                }
                get spacingX() {
                    return this._spacingX;
                }
                set spacingX(a348) {
                    this._spacingX !== a348 && (this._spacingX = a348, this._doLayoutDirty());
                }
                get spacingY() {
                    return this._spacingY;
                }
                set spacingY(z347) {
                    this._spacingY !== z347 && (this._spacingY = z347, this._doLayoutDirty());
                }
                get verticalDirection() {
                    return this._verticalDirection;
                }
                set verticalDirection(y347) {
                    this._verticalDirection !== y347 && (this._verticalDirection = y347, this._doLayoutDirty());
                }
                get horizontalDirection() {
                    return this._horizontalDirection;
                }
                set horizontalDirection(x347) {
                    this._horizontalDirection !== x347 && (this._horizontalDirection = x347, this._doLayoutDirty());
                }
                get padding() {
                    return this._paddingLeft;
                }
                set padding(w347) {
                    this.paddingLeft === w347 && this._paddingRight === w347 && this._paddingTop === w347 && this._paddingBottom === w347 || (this._paddingLeft = this._paddingRight = this._paddingTop = this._paddingBottom = w347, this._doLayoutDirty());
                }
                get constraint() {
                    return this._constraint;
                }
                set constraint(v347) {
                    this._layoutType !== s255.NONE && this._constraint !== v347 && (this._constraint = v347, this._doLayoutDirty());
                }
                get constraintNum() {
                    return this._constraintNum;
                }
                set constraintNum(u347) {
                    this._constraint !== x255.NONE && this._constraintNum !== u347 && (u347 <= 0 && q125("Limit values to be greater than 0"), this._constraintNum = u347, this._doLayoutDirty());
                }
                get affectedByScale() {
                    return this._affectedByScale;
                }
                set affectedByScale(t347) {
                    this._affectedByScale = t347, this._doLayoutDirty();
                }
                updateLayout(s347 = !1) {
                    (this._layoutDirty || s347) && (this._doLayout(), this._layoutDirty = !1);
                }
                onEnable() {
                    this._addEventListeners();
                    const r347 = this.node._uiProps.uiTransformComp;
                    r347.contentSize.equals(x147.ZERO) && r347.setContentSize(this._layoutSize), this._childrenChanged();
                }
                onDisable() {
                    this._usefulLayoutObj.length = 0, this._removeEventListeners();
                }
                _checkUsefulObj() {
                    this._usefulLayoutObj.length = 0;
                    const n347 = this.node.children;
                    for (let o347 = 0; o347 < n347.length; ++o347) {
                        const p347 = n347[o347], q347 = p347._uiProps.uiTransformComp;
                        p347.activeInHierarchy && q347 && this._usefulLayoutObj.push(q347);
                    }
                }
                _addEventListeners() {
                    t185.on(s185.EVENT_AFTER_UPDATE, this.updateLayout, this), this.node.on(z174.SIZE_CHANGED, this._resized, this), this.node.on(z174.ANCHOR_CHANGED, this._doLayoutDirty, this), this.node.on(z174.CHILD_ADDED, this._childAdded, this), this.node.on(z174.CHILD_REMOVED, this._childRemoved, this), this.node.on(z174.CHILDREN_ORDER_CHANGED, this._childrenChanged, this), this.node.on("childrenSiblingOrderChanged", this.updateLayout, this), this._addChildrenEventListeners();
                }
                _removeEventListeners() {
                    t185.off(s185.EVENT_AFTER_UPDATE, this.updateLayout, this), this.node.off(z174.SIZE_CHANGED, this._resized, this), this.node.off(z174.ANCHOR_CHANGED, this._doLayoutDirty, this), this.node.off(z174.CHILD_ADDED, this._childAdded, this), this.node.off(z174.CHILD_REMOVED, this._childRemoved, this), this.node.off(z174.CHILDREN_ORDER_CHANGED, this._childrenChanged, this), this.node.off("childrenSiblingOrderChanged", this.updateLayout, this), this._removeChildrenEventListeners();
                }
                _addChildrenEventListeners() {
                    const k347 = this.node.children;
                    for (let l347 = 0; l347 < k347.length; ++l347) {
                        const m347 = k347[l347];
                        m347.on(z174.SIZE_CHANGED, this._doLayoutDirty, this), m347.on(z174.TRANSFORM_CHANGED, this._transformDirty, this), m347.on(z174.ANCHOR_CHANGED, this._doLayoutDirty, this), m347.on(z174.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);
                    }
                }
                _removeChildrenEventListeners() {
                    const h347 = this.node.children;
                    for (let i347 = 0; i347 < h347.length; ++i347) {
                        const j347 = h347[i347];
                        j347.off(z174.SIZE_CHANGED, this._doLayoutDirty, this), j347.off(z174.TRANSFORM_CHANGED, this._transformDirty, this), j347.off(z174.ANCHOR_CHANGED, this._doLayoutDirty, this), j347.off(z174.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);
                    }
                }
                _childAdded(g347) {
                    g347.on(z174.SIZE_CHANGED, this._doLayoutDirty, this), g347.on(z174.TRANSFORM_CHANGED, this._transformDirty, this), g347.on(z174.ANCHOR_CHANGED, this._doLayoutDirty, this), g347.on(z174.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this), this._childrenChanged();
                }
                _childRemoved(f347) {
                    f347.off(z174.SIZE_CHANGED, this._doLayoutDirty, this), f347.off(z174.TRANSFORM_CHANGED, this._transformDirty, this), f347.off(z174.ANCHOR_CHANGED, this._doLayoutDirty, this), f347.off(z174.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this), this._childrenChanged();
                }
                _resized() {
                    this._layoutSize.set(this.node._uiProps.uiTransformComp.contentSize), this._doLayoutDirty();
                }
                _doLayoutHorizontally(z345, a346, b346, c346) {
                    const d346 = this.node._uiProps.uiTransformComp.anchorPoint, e346 = this._getFixedBreakingNum();
                    let f346 = 1, g346 = this._paddingLeft;
                    this._horizontalDirection === w255.RIGHT_TO_LEFT && (f346 = -1, g346 = this._paddingRight);
                    const h346 = (this._horizontalDirection - d346.x) * z345 + f346 * g346;
                    let i346 = h346 - f346 * this._spacingX, j346 = 0, k346 = 0, l346 = 0, m346 = 0, n346 = !1;
                    const o346 = this._usefulLayoutObj.length;
                    let p346 = this._cellSize.width;
                    const q346 = this._getPaddingH();
                    this._layoutType !== s255.GRID && this._resizeMode === t255.CHILDREN && (p346 = (z345 - q346 - (o346 - 1) * this._spacingX) / o346);
                    const r346 = this._usefulLayoutObj;
                    for (let s346 = 0; s346 < r346.length; ++s346) {
                        const t346 = r346[s346], u346 = t346.node, v346 = u346.scale, w346 = this._getUsedScaleValue(v346.x), x346 = this._getUsedScaleValue(v346.y);
                        this._resizeMode === t255.CHILDREN && (t346.width = p346 / w346, this._layoutType === s255.GRID && (t346.height = this._cellSize.height / x346));
                        const y346 = Math.abs(this._horizontalDirection - t346.anchorX), z346 = t346.width * w346, a347 = t346.height * x346;
                        a347 > l346 && (m346 = Math.max(l346, m346), k346 = l346 || a347, l346 = a347), i346 += f346 * (y346 * z346 + this._spacingX);
                        const b347 = f346 * (1 - y346) * z346;
                        if (a346) {
                            if (e346 > 0)
                                n346 = s346 / e346 > 0 && s346 % e346 == 0, n346 && (k346 = l346 > a347 ? l346 : k346);
                            else if (z346 > z345 - q346)
                                i346 > h346 + f346 * y346 * z346 && (n346 = !0);
                            else {
                                const d347 = (1 - this._horizontalDirection - d346.x) * z345, e347 = i346 + b347 + f346 * (f346 > 0 ? this._paddingRight : this._paddingLeft);
                                n346 = Math.abs(e347) > Math.abs(d347);
                            }
                            n346 && (i346 = h346 + f346 * y346 * z346, a347 !== l346 && (k346 = l346), j346 += k346 + this._spacingY, k346 = l346 = a347);
                        }
                        const c347 = b346(u346, t346, j346);
                        c346 && u346.setPosition(i346, c347), i346 += b347;
                    }
                    return k346 = Math.max(k346, l346), Math.max(m346, j346 + k346) + this._getPaddingV();
                }
                _doLayoutVertically(t344, u344, v344, w344) {
                    const x344 = this.node._uiProps.uiTransformComp.anchorPoint, y344 = this._getFixedBreakingNum();
                    let z344 = 1, a345 = this._paddingBottom;
                    this._verticalDirection === v255.TOP_TO_BOTTOM && (z344 = -1, a345 = this._paddingTop);
                    const b345 = (this._verticalDirection - x344.y) * t344 + z344 * a345;
                    let c345 = b345 - z344 * this._spacingY, d345 = 0, e345 = 0, f345 = 0, g345 = 0, h345 = !1;
                    const i345 = this._usefulLayoutObj.length;
                    let j345 = this._cellSize.height;
                    const k345 = this._getPaddingV();
                    this._layoutType !== s255.GRID && this._resizeMode === t255.CHILDREN && (j345 = (t344 - k345 - (i345 - 1) * this._spacingY) / i345);
                    const l345 = this._usefulLayoutObj;
                    for (let m345 = 0; m345 < l345.length; ++m345) {
                        const n345 = l345[m345], o345 = n345.node, p345 = o345.scale, q345 = this._getUsedScaleValue(p345.x), r345 = this._getUsedScaleValue(p345.y);
                        this._resizeMode === t255.CHILDREN && (n345.height = j345 / r345, this._layoutType === s255.GRID && (n345.width = this._cellSize.width / q345));
                        const s345 = Math.abs(this._verticalDirection - n345.anchorY), t345 = n345.width * q345, u345 = n345.height * r345;
                        t345 > d345 && (e345 = Math.max(d345, e345), f345 = d345 || t345, d345 = t345), c345 += z344 * (s345 * u345 + this._spacingY);
                        const v345 = z344 * (1 - s345) * u345;
                        if (u344) {
                            if (y344 > 0)
                                h345 = m345 / y344 > 0 && m345 % y344 == 0, h345 && (f345 = d345 > u345 ? d345 : f345);
                            else if (u345 > t344 - k345)
                                c345 > b345 + z344 * s345 * u345 && (h345 = !0);
                            else {
                                const x345 = (1 - this._verticalDirection - x344.y) * t344, y345 = c345 + v345 + z344 * (z344 > 0 ? this._paddingTop : this._paddingBottom);
                                h345 = Math.abs(y345) > Math.abs(x345);
                            }
                            h345 && (c345 = b345 + z344 * s345 * u345, t345 !== d345 && (f345 = d345), g345 += f345 + this._spacingX, f345 = d345 = t345);
                        }
                        const w345 = v344(o345, n345, g345);
                        w344 && (o345.getPosition(y255), o345.setPosition(w345, c345, y255.z)), c345 += v345;
                    }
                    return f345 = Math.max(f345, d345), Math.max(e345, g345 + f345) + this._getPaddingH();
                }
                _doLayoutGridAxisHorizontal(h344, i344) {
                    const j344 = i344.width;
                    let k344 = 1, l344 = -h344.y * i344.height, m344 = this._paddingBottom;
                    this._verticalDirection === v255.TOP_TO_BOTTOM && (k344 = -1, l344 = (1 - h344.y) * i344.height, m344 = this._paddingTop);
                    const n344 = (q344, r344, s344) => l344 + k344 * (s344 + (1 - r344.anchorY) * r344.height * this._getUsedScaleValue(q344.scale.y) + m344);
                    let o344 = 0;
                    this._resizeMode === t255.CONTAINER && (o344 = this._doLayoutHorizontally(j344, !0, n344, !1), l344 = -h344.y * o344, this._verticalDirection === v255.TOP_TO_BOTTOM && (k344 = -1, l344 = (1 - h344.y) * o344)), this._doLayoutHorizontally(j344, !0, n344, !0), this._resizeMode === t255.CONTAINER && this.node._uiProps.uiTransformComp.setContentSize(j344, o344);
                }
                _doLayoutGridAxisVertical(v343, w343) {
                    const x343 = w343.height;
                    let y343 = 1, z343 = -v343.x * w343.width, a344 = this._paddingLeft;
                    this._horizontalDirection === w255.RIGHT_TO_LEFT && (y343 = -1, z343 = (1 - v343.x) * w343.width, a344 = this._paddingRight);
                    const b344 = (e344, f344, g344) => z343 + y343 * (g344 + (1 - f344.anchorX) * f344.width * this._getUsedScaleValue(e344.scale.x) + a344);
                    let c344 = 0;
                    this._resizeMode === t255.CONTAINER && (c344 = this._doLayoutVertically(x343, !0, b344, !1), z343 = -v343.x * c344, this._horizontalDirection === w255.RIGHT_TO_LEFT && (y343 = -1, z343 = (1 - v343.x) * c344)), this._doLayoutVertically(x343, !0, b344, !0), this._resizeMode === t255.CONTAINER && this.node._uiProps.uiTransformComp.setContentSize(c344, x343);
                }
                _doLayoutGrid() {
                    const s343 = this.node._uiProps.uiTransformComp, t343 = s343.anchorPoint, u343 = s343.contentSize;
                    this.startAxis === u255.HORIZONTAL ? this._doLayoutGridAxisHorizontal(t343, u343) : this.startAxis === u255.VERTICAL && this._doLayoutGridAxisVertical(t343, u343);
                }
                _getHorizontalBaseWidth(l343 = !0) {
                    const m343 = this._usefulLayoutObj;
                    let n343 = 0;
                    const o343 = m343.length;
                    if (this._resizeMode === t255.CONTAINER) {
                        for (let p343 = 0; p343 < m343.length; ++p343) {
                            const q343 = m343[p343], r343 = q343.node.scale;
                            n343 += q343.width * this._getUsedScaleValue(r343.x);
                        }
                        n343 += (o343 - 1) * this._spacingX + this._getPaddingH();
                    }
                    else
                        n343 = this.node._uiProps.uiTransformComp.width;
                    return n343;
                }
                _getVerticalBaseHeight() {
                    const f343 = this._usefulLayoutObj;
                    let g343 = 0;
                    const h343 = f343.length;
                    if (this._resizeMode === t255.CONTAINER) {
                        for (let i343 = 0; i343 < f343.length; ++i343) {
                            const j343 = f343[i343], k343 = j343.node.scale;
                            g343 += j343.height * this._getUsedScaleValue(k343.y);
                        }
                        g343 += (h343 - 1) * this._spacingY + this._getPaddingV();
                    }
                    else
                        g343 = this.node._uiProps.uiTransformComp.height;
                    return g343;
                }
                _doLayout() {
                    if (this._init && !this._childrenDirty || (this._checkUsefulObj(), this._init = !0, this._childrenDirty = !1), this._layoutType === s255.HORIZONTAL) {
                        const b343 = this._getHorizontalBaseWidth(), c343 = e343 => (this._isAlign ? w146.ZERO : e343.position).y;
                        this._doLayoutHorizontally(b343, !1, c343, !0), this.node._uiProps.uiTransformComp.width = b343;
                    }
                    else if (this._layoutType === s255.VERTICAL) {
                        const x342 = this._getVerticalBaseHeight(), y342 = a343 => (this._isAlign ? w146.ZERO : a343.position).x;
                        this._doLayoutVertically(x342, !1, y342, !0), this.node._uiProps.uiTransformComp.height = x342;
                    }
                    else
                        this._layoutType === s255.GRID && this._doLayoutGrid();
                }
                _getUsedScaleValue(w342) {
                    return this._affectedByScale ? Math.abs(w342) : 1;
                }
                _transformDirty(v342) {
                    v342 & b175.SCALE && v342 & b175.POSITION && this._affectedByScale && this._doLayoutDirty();
                }
                _doLayoutDirty() {
                    this._layoutDirty = !0;
                }
                _childrenChanged() {
                    this._childrenDirty = !0, this._doLayoutDirty();
                }
                _getPaddingH() {
                    return this._paddingLeft + this._paddingRight;
                }
                _getPaddingV() {
                    return this._paddingTop + this._paddingBottom;
                }
                _getFixedBreakingNum() {
                    if (this._layoutType !== s255.GRID || this._constraint === x255.NONE || this._constraintNum <= 0)
                        return 0;
                    let u342 = this._constraint === x255.FIXED_ROW ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum;
                    return this._startAxis === u255.VERTICAL && (u342 = this._constraint === x255.FIXED_COL ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum), u342;
                }
            }).Type = s255, r255.VerticalDirection = v255, r255.HorizontalDirection = w255, r255.ResizeMode = t255, r255.AxisDirection = u255, r255.Constraint = x255, i125((a255 = r255).prototype, "type", [t254], Object.getOwnPropertyDescriptor(a255.prototype, "type"), a255.prototype), i125(a255.prototype, "resizeMode", [u254], Object.getOwnPropertyDescriptor(a255.prototype, "resizeMode"), a255.prototype), i125(a255.prototype, "startAxis", [v254], Object.getOwnPropertyDescriptor(a255.prototype, "startAxis"), a255.prototype), i125(a255.prototype, "verticalDirection", [w254], Object.getOwnPropertyDescriptor(a255.prototype, "verticalDirection"), a255.prototype), i125(a255.prototype, "horizontalDirection", [x254], Object.getOwnPropertyDescriptor(a255.prototype, "horizontalDirection"), a255.prototype), i125(a255.prototype, "constraint", [y254], Object.getOwnPropertyDescriptor(a255.prototype, "constraint"), a255.prototype), b255 = p130(a255.prototype, "_resizeMode", [j151], function () {
                return t255.NONE;
            }), c255 = p130(a255.prototype, "_layoutType", [j151], function () {
                return s255.NONE;
            }), d255 = p130(a255.prototype, "_cellSize", [j151], function () {
                return new x147(40, 40);
            }), e255 = p130(a255.prototype, "_startAxis", [j151], function () {
                return u255.HORIZONTAL;
            }), f255 = p130(a255.prototype, "_paddingLeft", [j151], function () {
                return 0;
            }), g255 = p130(a255.prototype, "_paddingRight", [j151], function () {
                return 0;
            }), h255 = p130(a255.prototype, "_paddingTop", [j151], function () {
                return 0;
            }), i255 = p130(a255.prototype, "_paddingBottom", [j151], function () {
                return 0;
            }), j255 = p130(a255.prototype, "_spacingX", [j151], function () {
                return 0;
            }), k255 = p130(a255.prototype, "_spacingY", [j151], function () {
                return 0;
            }), l255 = p130(a255.prototype, "_verticalDirection", [j151], function () {
                return v255.TOP_TO_BOTTOM;
            }), m255 = p130(a255.prototype, "_horizontalDirection", [j151], function () {
                return w255.LEFT_TO_RIGHT;
            }), n255 = p130(a255.prototype, "_constraint", [j151], function () {
                return x255.NONE;
            }), o255 = p130(a255.prototype, "_constraintNum", [j151], function () {
                return 2;
            }), p255 = p130(a255.prototype, "_affectedByScale", [j151], function () {
                return !1;
            }), q255 = p130(a255.prototype, "_isAlign", [j151], function () {
                return !1;
            }), z254 = a255)) || z254) || z254) || z254);
            var a256, b256, c256, d256, e256, f256, g256, h256, i256, j256, k256, l256, m256, n256;
            g125({
                Layout: z255,
                LayoutComponent: z255
            }), s143.Layout = z255, function (t342) {
                t342[t342.HORIZONTAL = 0] = "HORIZONTAL", t342[t342.VERTICAL = 1] = "VERTICAL", t342[t342.FILLED = 2] = "FILLED";
            }(n256 || (n256 = {})), p127(n256);
            let o256 = (a256 = e151("cc.ProgressBar"), b256 = g151(110), c256 = f151(d190), d256 = a131(w196), e256 = a131(n256), a256(f256 = b256(f256 = c256(((m256 = class extends a165 {
                constructor(...s342) {
                    super(...s342), this._barSprite = h256 && h256(), this._mode = i256 && i256(), this._totalLength = j256 && j256(), this._progress = k256 && k256(), this._reverse = l256 && l256();
                }
                get barSprite() {
                    return this._barSprite;
                }
                set barSprite(r342) {
                    this._barSprite !== r342 && (this._barSprite = r342, this._initBarSprite());
                }
                get mode() {
                    return this._mode;
                }
                set mode(o342) {
                    if (this._mode !== o342 && (this._mode = o342, this._barSprite)) {
                        const p342 = this._barSprite.node;
                        if (!p342)
                            return;
                        const q342 = p342._uiProps.uiTransformComp.contentSize;
                        this._mode === n256.HORIZONTAL ? this.totalLength = q342.width : this._mode === n256.VERTICAL ? this.totalLength = q342.height : this._mode === n256.FILLED && (this.totalLength = this._barSprite.fillRange);
                    }
                }
                get totalLength() {
                    return this._totalLength;
                }
                set totalLength(n342) {
                    this._mode === n256.FILLED && (n342 = y128(n342)), this._totalLength !== n342 && (this._totalLength = n342, this._updateBarStatus());
                }
                get progress() {
                    return this._progress;
                }
                set progress(m342) {
                    this._progress !== m342 && (this._progress = m342, this._updateBarStatus());
                }
                get reverse() {
                    return this._reverse;
                }
                set reverse(l342) {
                    this._reverse !== l342 && (this._reverse = l342, this._barSprite && (this._barSprite.fillStart = 1 - this._barSprite.fillStart), this._updateBarStatus());
                }
                _initBarSprite() {
                    if (this._barSprite) {
                        const f342 = this._barSprite.node;
                        if (!f342)
                            return;
                        const g342 = this.node._uiProps.uiTransformComp, h342 = g342.contentSize, i342 = g342.anchorPoint, j342 = f342._uiProps.uiTransformComp.contentSize;
                        if (this._barSprite.fillType === w196.FillType.RADIAL && (this._mode = n256.FILLED), this._mode === n256.HORIZONTAL ? this.totalLength = j342.width : this._mode === n256.VERTICAL ? this.totalLength = j342.height : this.totalLength = this._barSprite.fillRange, f342.parent === this.node) {
                            const k342 = -h342.width * i342.x;
                            f342.setPosition(k342, 0, 0);
                        }
                    }
                }
                _updateBarStatus() {
                    if (this._barSprite) {
                        const r341 = this._barSprite.node;
                        if (!r341)
                            return;
                        const s341 = r341._uiProps.uiTransformComp, t341 = s341.anchorPoint, u341 = s341.contentSize, v341 = r341.getPosition();
                        let w341 = new s147(0, .5);
                        const x341 = y128(this._progress);
                        let y341 = this._totalLength * x341, z341 = u341, a342 = 0, b342 = 0;
                        switch (this._mode) {
                            case n256.HORIZONTAL:
                                this._reverse && (w341 = new s147(1, .5)), z341 = new x147(y341, u341.height), a342 = this._totalLength, b342 = u341.height;
                                break;
                            case n256.VERTICAL:
                                w341 = this._reverse ? new s147(.5, 1) : new s147(.5, 0), z341 = new x147(u341.width, y341), a342 = u341.width, b342 = this._totalLength;
                        }
                        if (this._mode === n256.FILLED)
                            this._barSprite.type !== w196.Type.FILLED ? q125("ProgressBar FILLED mode only works when barSprite's Type is FILLED!") : (this._reverse && (y341 *= -1), this._barSprite.fillRange = y341);
                        else if (this._barSprite.type !== w196.Type.FILLED) {
                            const c342 = w341.x - t341.x, d342 = w341.y - t341.y, e342 = new w146(a342 * c342, b342 * d342, 0);
                            r341.setPosition(v341.x + e342.x, v341.y + e342.y, v341.z), s341.setAnchorPoint(w341), s341.setContentSize(z341);
                        }
                        else
                            q125("ProgressBar non-FILLED mode only works when barSprite's Type is non-FILLED!");
                    }
                }
            }).Mode = n256, i125((g256 = m256).prototype, "barSprite", [d256], Object.getOwnPropertyDescriptor(g256.prototype, "barSprite"), g256.prototype), i125(g256.prototype, "mode", [e256], Object.getOwnPropertyDescriptor(g256.prototype, "mode"), g256.prototype), h256 = p130(g256.prototype, "_barSprite", [j151], function () {
                return null;
            }), i256 = p130(g256.prototype, "_mode", [j151], function () {
                return n256.HORIZONTAL;
            }), j256 = p130(g256.prototype, "_totalLength", [j151], function () {
                return 1;
            }), k256 = p130(g256.prototype, "_progress", [j151], function () {
                return .1;
            }), l256 = p130(g256.prototype, "_reverse", [j151], function () {
                return !1;
            }), f256 = g256)) || f256) || f256) || f256);
            var p256, q256, r256, s256, t256, u256, v256, w256, x256, y256, z256, a257, b257;
            g125({
                ProgressBar: o256,
                ProgressBarComponent: o256
            }), s143.ProgressBar = o256;
            const c257 = new w146(), d257 = new w146(), e257 = new w146(), f257 = new s147(), g257 = new a147(), h257 = new s147();
            var i257;
            !function (q341) {
                q341[q341.HORIZONTAL = 0] = "HORIZONTAL", q341[q341.VERTICAL = 1] = "VERTICAL";
            }(i257 || (i257 = {})), s127(i257);
            let j257 = (p256 = e151("cc.ScrollBar"), q256 = g151(110), r256 = f151(d190), s256 = a131(w196), t256 = a131(i257), p256(u256 = q256(u256 = r256(((b257 = class extends a165 {
                constructor(...p341) {
                    super(...p341), this._scrollView = w256 && w256(), this._handle = x256 && x256(), this._direction = y256 && y256(), this._enableAutoHide = z256 && z256(), this._autoHideTime = a257 && a257(), this._touching = !1, this._opacity = 255, this._autoHideRemainingTime = 0;
                }
                get handle() {
                    return this._handle;
                }
                set handle(o341) {
                    this._handle !== o341 && (this._handle = o341, this.onScroll(s147.ZERO));
                }
                get direction() {
                    return this._direction;
                }
                set direction(n341) {
                    this._direction !== n341 && (this._direction = n341, this.onScroll(s147.ZERO));
                }
                get enableAutoHide() {
                    return this._enableAutoHide;
                }
                set enableAutoHide(m341) {
                    this._enableAutoHide !== m341 && (this._enableAutoHide = m341, this._enableAutoHide && this._setOpacity(0));
                }
                get autoHideTime() {
                    return this._autoHideTime;
                }
                set autoHideTime(l341) {
                    this._autoHideTime !== l341 && (this._autoHideTime = l341);
                }
                hide() {
                    this._autoHideRemainingTime = 0, this._setOpacity(0);
                }
                show() {
                    this._autoHideRemainingTime = this._autoHideTime, this._opacity = 255, this._setOpacity(this._opacity);
                }
                onScroll(y340) {
                    if (!this._scrollView)
                        return;
                    const z340 = this._scrollView.content;
                    if (!z340)
                        return;
                    const a341 = z340._uiProps.uiTransformComp.contentSize, b341 = this._scrollView.node._uiProps.uiTransformComp.contentSize, c341 = this.node._uiProps.uiTransformComp.contentSize;
                    if (this._conditionalDisableScrollBar(a341, b341))
                        return;
                    this._enableAutoHide && (this._autoHideRemainingTime = this._autoHideTime, this._setOpacity(this._opacity));
                    let d341 = 0, e341 = 0, f341 = 0, g341 = 0, h341 = 0;
                    const i341 = h257;
                    i341.set(0, 0), this._direction === i257.HORIZONTAL ? (d341 = a341.width, e341 = b341.width, h341 = c341.width, f341 = y340.x, this._convertToScrollViewSpace(i341, z340), g341 = -i341.x) : this._direction === i257.VERTICAL && (d341 = a341.height, e341 = b341.height, h341 = c341.height, f341 = y340.y, this._convertToScrollViewSpace(i341, z340), g341 = -i341.y);
                    const j341 = this._calculateLength(d341, e341, h341, f341), k341 = h257;
                    this._calculatePosition(k341, d341, e341, h341, g341, f341, j341), this._updateLength(j341), this._updateHandlerPosition(k341);
                }
                setScrollView(x340) {
                    this._scrollView = x340;
                }
                onTouchBegan() {
                    this._enableAutoHide && (this._touching = !0);
                }
                onTouchEnded() {
                    if (this._enableAutoHide && (this._touching = !1, !(this._autoHideTime <= 0))) {
                        if (this._scrollView) {
                            const u340 = this._scrollView.content;
                            if (u340) {
                                const v340 = u340._uiProps.uiTransformComp.contentSize, w340 = this._scrollView.node._uiProps.uiTransformComp.contentSize;
                                if (this._conditionalDisableScrollBar(v340, w340))
                                    return;
                            }
                        }
                        this._autoHideRemainingTime = this._autoHideTime;
                    }
                }
                onEnable() {
                    const t340 = this.node.getComponent(w196);
                    t340 && (this._opacity = t340.color.a);
                }
                start() {
                    this._enableAutoHide && this._setOpacity(0);
                }
                update(s340) {
                    this._processAutoHide(s340);
                }
                _convertToScrollViewSpace(n340, o340) {
                    const p340 = this._scrollView && this._scrollView.node._uiProps.uiTransformComp, q340 = o340._uiProps.uiTransformComp;
                    if (p340 && q340) {
                        c257.set(-q340.anchorX * q340.width, -q340.anchorY * q340.height, 0), q340.convertToWorldSpaceAR(c257, d257);
                        const r340 = p340.convertToNodeSpaceAR(d257);
                        r340.x += p340.anchorX * p340.width, r340.y += p340.anchorY * p340.height, n340.set(r340.x, r340.y);
                    }
                    else
                        n340.set(s147.ZERO);
                }
                _setOpacity(l340) {
                    if (this._handle) {
                        let m340 = this.node.getComponent(w196);
                        m340 && (g257.set(m340.color), g257.a = l340, m340.color = g257), m340 = this._handle.getComponent(w196), m340 && (g257.set(m340.color), g257.a = l340, m340.color = g257);
                    }
                }
                _updateHandlerPosition(j340) {
                    if (this._handle) {
                        const k340 = e257;
                        this._fixupHandlerPosition(k340), this._handle.node.setPosition(j340.x + k340.x, j340.y + k340.y, k340.z);
                    }
                }
                _fixupHandlerPosition(b340) {
                    const c340 = this.node._uiProps.uiTransformComp, d340 = c340.contentSize, e340 = c340.anchorPoint, f340 = this.handle.node._uiProps.uiTransformComp.contentSize, g340 = this.handle.node.parent;
                    w146.set(c257, -d340.width * e340.x, -d340.height * e340.y, 0);
                    const h340 = this.node._uiProps.uiTransformComp.convertToWorldSpaceAR(c257, d257), i340 = b340;
                    i340.set(0, 0, 0), g340._uiProps.uiTransformComp.convertToNodeSpaceAR(h340, i340), this.direction === i257.HORIZONTAL ? i340.set(i340.x, i340.y + (d340.height - f340.height) / 2, i340.z) : this.direction === i257.VERTICAL && i340.set(i340.x + (d340.width - f340.width) / 2, i340.y, i340.z), this.handle.node.setPosition(i340);
                }
                _conditionalDisableScrollBar(z339, a340) {
                    return z339.width <= a340.width && this._direction === i257.HORIZONTAL || z339.height <= a340.height && this._direction === i257.VERTICAL;
                }
                _calculateLength(u339, v339, w339, x339) {
                    let y339 = u339;
                    return x339 && (y339 += 20 * (x339 > 0 ? x339 : -x339)), w339 * (v339 / y339);
                }
                _calculatePosition(k339, l339, m339, n339, o339, p339, q339) {
                    let r339 = l339 - m339;
                    p339 && (r339 += Math.abs(p339));
                    let s339 = 0;
                    r339 && (s339 = o339 / r339, s339 = y128(s339));
                    const t339 = (n339 - q339) * s339;
                    this._direction === i257.VERTICAL ? k339.set(0, t339) : k339.set(t339, 0);
                }
                _updateLength(g339) {
                    if (this._handle) {
                        const h339 = this._handle.node._uiProps.uiTransformComp, i339 = h339.contentSize, j339 = h339.anchorPoint;
                        j339.x === f257.x && j339.y === f257.y || h339.setAnchorPoint(f257), this._direction === i257.HORIZONTAL ? h339.setContentSize(g339, i339.height) : h339.setContentSize(i339.width, g339);
                    }
                }
                _processAutoHide(e339) {
                    if (this._enableAutoHide && !(this._autoHideRemainingTime <= 0) && !this._touching && (this._autoHideRemainingTime -= e339, this._autoHideRemainingTime <= this._autoHideTime)) {
                        this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
                        const f339 = this._opacity * (this._autoHideRemainingTime / this._autoHideTime);
                        this._setOpacity(f339);
                    }
                }
            }).Direction = i257, i125((v256 = b257).prototype, "handle", [s256], Object.getOwnPropertyDescriptor(v256.prototype, "handle"), v256.prototype), i125(v256.prototype, "direction", [t256], Object.getOwnPropertyDescriptor(v256.prototype, "direction"), v256.prototype), w256 = p130(v256.prototype, "_scrollView", [j151], function () {
                return null;
            }), x256 = p130(v256.prototype, "_handle", [j151], function () {
                return null;
            }), y256 = p130(v256.prototype, "_direction", [j151], function () {
                return i257.HORIZONTAL;
            }), z256 = p130(v256.prototype, "_enableAutoHide", [j151], function () {
                return !1;
            }), a257 = p130(v256.prototype, "_autoHideTime", [j151], function () {
                return 1;
            }), u256 = v256)) || u256) || u256) || u256);
            var k257;
            g125({
                ScrollBar: j257,
                ScrollBarComponent: j257
            }), s143.ScrollBar = j257;
            let l257 = g125("ViewGroup", e151("cc.ViewGroup")(k257 = g151(110)(k257 = class extends a165 {
            }) || k257) || k257);
            var m257, n257, o257, p257, q257, r257, s257, t257, u257, v257, w257, x257, y257, z257, a258, b258, c258, d258, e258, f258, g258;
            s143.ViewGroup = l257;
            const h258 = 1e-4, i258 = new w146(), j258 = new w146(), k258 = new s147(), l258 = new s147(), m258 = () => new Date().getMilliseconds(), n258 = {
                "scroll-to-top": 0,
                "scroll-to-bottom": 1,
                "scroll-to-left": 2,
                "scroll-to-right": 3,
                scrolling: 4,
                "bounce-bottom": 6,
                "bounce-left": 7,
                "bounce-right": 8,
                "bounce-top": 5,
                "scroll-ended": 9,
                "touch-up": 10,
                "scroll-ended-with-threshold": 11,
                "scroll-began": 12
            };
            let o258;
            var p258;
            !function (d339) {
                d339.NONE = "", d339.SCROLL_TO_TOP = "scroll-to-top", d339.SCROLL_TO_BOTTOM = "scroll-to-bottom", d339.SCROLL_TO_LEFT = "scroll-to-left", d339.SCROLL_TO_RIGHT = "scroll-to-right", d339.SCROLL_BEGAN = "scroll-began", d339.SCROLL_ENDED = "scroll-ended", d339.BOUNCE_TOP = "bounce-top", d339.BOUNCE_BOTTOM = "bounce-bottom", d339.BOUNCE_LEFT = "bounce-left", d339.BOUNCE_RIGHT = "bounce-right", d339.SCROLLING = "scrolling", d339.SCROLL_ENG_WITH_THRESHOLD = "scroll-ended-with-threshold", d339.TOUCH_UP = "touch-up";
            }(o258 || (o258 = {})), function (c339) {
                c339[c339.NONE = 0] = "NONE", c339[c339.LEFT = 1] = "LEFT", c339[c339.RIGHT = 2] = "RIGHT";
            }(p258 || (p258 = {}));
            let q258 = (m257 = e151("cc.ScrollView"), n257 = g151(110), o257 = f151(d190), p257 = a131(h175), q257 = a131(j257), r257 = a131(j257), s257 = a131([p164]), m257(t257 = n257(t257 = o257(((g258 = class extends l257 {
                constructor(...b339) {
                    super(...b339), this.bounceDuration = v257 && v257(), this.brake = w257 && w257(), this.elastic = x257 && x257(), this.inertia = y257 && y257(), this.horizontal = z257 && z257(), this.vertical = a258 && a258(), this.cancelInnerEvents = b258 && b258(), this.scrollEvents = c258 && c258(), this._autoScrolling = !1, this._scrolling = !1, this._content = d258 && d258(), this._horizontalScrollBar = e258 && e258(), this._verticalScrollBar = f258 && f258(), this._topBoundary = 0, this._bottomBoundary = 0, this._leftBoundary = 0, this._rightBoundary = 0, this._touchMoveDisplacements = [], this._touchMoveTimeDeltas = [], this._touchMovePreviousTimestamp = 0, this._touchMoved = !1, this._autoScrollAttenuate = !1, this._autoScrollStartPosition = new w146(), this._autoScrollTargetDelta = new w146(), this._autoScrollTotalTime = 0, this._autoScrollAccumulatedTime = 0, this._autoScrollCurrentlyOutOfBoundary = !1, this._autoScrollBraking = !1, this._autoScrollBrakingStartPosition = new w146(), this._outOfBoundaryAmount = new w146(), this._outOfBoundaryAmountDirty = !0, this._stopMouseWheel = !1, this._mouseWheelEventElapsedTime = 0, this._isScrollEndedWithThresholdEventFired = !1, this._scrollEventEmitMask = 0, this._isBouncing = !1, this._contentPos = new w146(), this._deltaPos = new w146(), this._deltaAmount = new w146(), this._hoverIn = p258.NONE;
                }
                get content() {
                    return this._content;
                }
                set content(z338) {
                    if (this._content === z338)
                        return;
                    const a339 = z338 && z338.parent && z338.parent._uiProps.uiTransformComp;
                    !z338 || z338 && a339 ? (this._content = z338, this._calculateBoundary()) : x125(4302);
                }
                get horizontalScrollBar() {
                    return this._horizontalScrollBar && !this._horizontalScrollBar.isValid && z125(4303, "horizontal", this.node.name), this._horizontalScrollBar;
                }
                set horizontalScrollBar(y338) {
                    this._horizontalScrollBar !== y338 && (this._horizontalScrollBar = y338, this._horizontalScrollBar && (this._horizontalScrollBar.setScrollView(this), this._updateScrollBar(s147.ZERO)));
                }
                get verticalScrollBar() {
                    return this._verticalScrollBar && !this._verticalScrollBar.isValid && z125(4303, "vertical", this.node.name), this._verticalScrollBar;
                }
                set verticalScrollBar(x338) {
                    this._verticalScrollBar !== x338 && (this._verticalScrollBar = x338, this._verticalScrollBar && (this._verticalScrollBar.setScrollView(this), this._updateScrollBar(s147.ZERO)));
                }
                get view() {
                    const w338 = this._content && this._content.parent;
                    return w338 ? w338._uiProps.uiTransformComp : null;
                }
                scrollToBottom(t338, u338 = !0) {
                    const v338 = this._calculateMovePercentDelta({
                        anchor: new s147(0, 0),
                        applyToHorizontal: !1,
                        applyToVertical: !0
                    });
                    t338 ? this._startAutoScroll(v338, t338, !1 !== u338) : this._moveContent(v338, !0);
                }
                scrollToTop(q338, r338 = !0) {
                    const s338 = this._calculateMovePercentDelta({
                        anchor: new s147(0, 1),
                        applyToHorizontal: !1,
                        applyToVertical: !0
                    });
                    q338 ? this._startAutoScroll(s338, q338, !1 !== r338) : this._moveContent(s338);
                }
                scrollToLeft(n338, o338 = !0) {
                    const p338 = this._calculateMovePercentDelta({
                        anchor: new s147(0, 0),
                        applyToHorizontal: !0,
                        applyToVertical: !1
                    });
                    n338 ? this._startAutoScroll(p338, n338, !1 !== o338) : this._moveContent(p338);
                }
                scrollToRight(k338, l338 = !0) {
                    const m338 = this._calculateMovePercentDelta({
                        anchor: new s147(1, 0),
                        applyToHorizontal: !0,
                        applyToVertical: !1
                    });
                    k338 ? this._startAutoScroll(m338, k338, !1 !== l338) : this._moveContent(m338);
                }
                scrollToTopLeft(h338, i338 = !0) {
                    const j338 = this._calculateMovePercentDelta({
                        anchor: new s147(0, 1),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    h338 ? this._startAutoScroll(j338, h338, !1 !== i338) : this._moveContent(j338);
                }
                scrollToTopRight(e338, f338 = !0) {
                    const g338 = this._calculateMovePercentDelta({
                        anchor: new s147(1, 1),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    e338 ? this._startAutoScroll(g338, e338, !1 !== f338) : this._moveContent(g338);
                }
                scrollToBottomLeft(b338, c338 = !0) {
                    const d338 = this._calculateMovePercentDelta({
                        anchor: new s147(0, 0),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    b338 ? this._startAutoScroll(d338, b338, !1 !== c338) : this._moveContent(d338);
                }
                scrollToBottomRight(y337, z337 = !0) {
                    const a338 = this._calculateMovePercentDelta({
                        anchor: new s147(1, 0),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    y337 ? this._startAutoScroll(a338, y337, !1 !== z337) : this._moveContent(a338);
                }
                scrollToOffset(t337, u337, v337 = !0) {
                    const w337 = this.getMaxScrollOffset(), x337 = new s147(0, 0);
                    0 === w337.x ? x337.x = 0 : x337.x = t337.x / w337.x, 0 === w337.y ? x337.y = 1 : x337.y = (w337.y - t337.y) / w337.y, this.scrollTo(x337, u337, v337);
                }
                getScrollOffset() {
                    const r337 = this._getContentTopBoundary() - this._topBoundary, s337 = this._getContentLeftBoundary() - this._leftBoundary;
                    return new s147(s337, r337);
                }
                getMaxScrollOffset() {
                    if (!this._content || !this.view)
                        return s147.ZERO;
                    const o337 = this._content._uiProps.uiTransformComp.contentSize;
                    let p337 = o337.width - this.view.width, q337 = o337.height - this.view.height;
                    return p337 = p337 >= 0 ? p337 : 0, q337 = q337 >= 0 ? q337 : 0, new s147(p337, q337);
                }
                scrollToPercentHorizontal(k337, l337, m337) {
                    const n337 = this._calculateMovePercentDelta({
                        anchor: new s147(k337, 0),
                        applyToHorizontal: !0,
                        applyToVertical: !1
                    });
                    l337 ? this._startAutoScroll(n337, l337, !1 !== m337) : this._moveContent(n337);
                }
                scrollTo(g337, h337, i337) {
                    const j337 = this._calculateMovePercentDelta({
                        anchor: new s147(g337),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    h337 ? this._startAutoScroll(j337, h337, i337) : this._moveContent(j337);
                }
                scrollToPercentVertical(c337, d337, e337) {
                    const f337 = this._calculateMovePercentDelta({
                        anchor: new s147(0, c337),
                        applyToHorizontal: !1,
                        applyToVertical: !0
                    });
                    d337 ? this._startAutoScroll(f337, d337, e337) : this._moveContent(f337);
                }
                stopAutoScroll() {
                    this._autoScrolling = !1, this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
                }
                setContentPosition(b337) {
                    this._setContentPosition(b337);
                }
                _setContentPosition(z336) {
                    if (!this._content)
                        return;
                    const a337 = this._getContentPosition();
                    Math.abs(z336.x - a337.x) < h258 && Math.abs(z336.y - a337.y) < h258 || (this._content.setPosition(z336), this._outOfBoundaryAmountDirty = !0);
                }
                getContentPosition() {
                    return this._getContentPosition();
                }
                _getContentPosition() {
                    return this._content ? (this._contentPos.set(this._content.position), this._contentPos) : w146.ZERO.clone();
                }
                isScrolling() {
                    return this._scrolling;
                }
                isAutoScrolling() {
                    return this._autoScrolling;
                }
                getScrollEndedEventTiming() {
                    return h258;
                }
                start() {
                    this._calculateBoundary(), this._content && t185.once(s185.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
                }
                onEnable() {
                    this._registerEvent(), this._content && (this._content.on(z174.SIZE_CHANGED, this._calculateBoundary, this), this._content.on(z174.TRANSFORM_CHANGED, this._scaleChanged, this), this.view && (this.view.node.on(z174.TRANSFORM_CHANGED, this._scaleChanged, this), this.view.node.on(z174.SIZE_CHANGED, this._calculateBoundary, this))), this._calculateBoundary(), this._updateScrollBarState();
                }
                update(x336) {
                    const y336 = this._deltaAmount;
                    this._autoScrolling ? (this._processAutoScrolling(x336), y336.x = 0, y336.y = 0) : 0 === y336.x && 0 === y336.y || (this._processDeltaMove(y336), y336.x = 0, y336.y = 0);
                }
                onDisable() {
                    this._unregisterEvent(), this._content && (this._content.off(z174.SIZE_CHANGED, this._calculateBoundary, this), this._content.off(z174.TRANSFORM_CHANGED, this._scaleChanged, this), this.view && (this.view.node.off(z174.TRANSFORM_CHANGED, this._scaleChanged, this), this.view.node.off(z174.SIZE_CHANGED, this._calculateBoundary, this))), this._deltaAmount.set(0, 0), this._hideScrollBar(), this.stopAutoScroll();
                }
                _registerEvent() {
                    this.node.on(z174.TOUCH_START, this._onTouchBegan, this, !0), this.node.on(z174.TOUCH_MOVE, this._onTouchMoved, this, !0), this.node.on(z174.TOUCH_END, this._onTouchEnded, this, !0), this.node.on(z174.TOUCH_CANCEL, this._onTouchCancelled, this, !0), this.node.on(z174.MOUSE_WHEEL, this._onMouseWheel, this, !0), this.node.on(a252.XRUI_HOVER_ENTERED, this._xrHoverEnter, this), this.node.on(a252.XRUI_HOVER_EXITED, this._xrHoverExit, this), s168.on(r168.EventType.HANDLE_INPUT, this._dispatchEventHandleInput, this), s168.on(r168.EventType.GAMEPAD_INPUT, this._dispatchEventHandleInput, this);
                }
                _unregisterEvent() {
                    this.node.off(z174.TOUCH_START, this._onTouchBegan, this, !0), this.node.off(z174.TOUCH_MOVE, this._onTouchMoved, this, !0), this.node.off(z174.TOUCH_END, this._onTouchEnded, this, !0), this.node.off(z174.TOUCH_CANCEL, this._onTouchCancelled, this, !0), this.node.off(z174.MOUSE_WHEEL, this._onMouseWheel, this, !0), this.node.off(a252.XRUI_HOVER_ENTERED, this._xrHoverEnter, this), this.node.off(a252.XRUI_HOVER_EXITED, this._xrHoverExit, this), s168.off(r168.EventType.HANDLE_INPUT, this._dispatchEventHandleInput, this), s168.off(r168.EventType.GAMEPAD_INPUT, this._dispatchEventHandleInput, this);
                }
                _onMouseWheel(t336, u336) {
                    if (!this.enabledInHierarchy)
                        return;
                    if (this._hasNestedViewGroup(t336, u336))
                        return;
                    const v336 = new w146(), w336 = t336.getScrollY();
                    this.vertical ? v336.set(0, -.1 * w336, 0) : this.horizontal && v336.set(-.1 * w336, 0, 0), this._mouseWheelEventElapsedTime = 0, this._deltaAmount.add(v336), this._stopMouseWheel || (this._handlePressLogic(), this.schedule(this._checkMouseWheel, 1 / 60), this._stopMouseWheel = !0), this._stopPropagationIfTargetIsMe(t336);
                }
                _onTouchBegan(r336, s336) {
                    this.enabledInHierarchy && this._content && (this._hasNestedViewGroup(r336, s336) || (this._handlePressLogic(), this._touchMoved = !1, this._stopPropagationIfTargetIsMe(r336)));
                }
                _onTouchMoved(m336, n336) {
                    if (!this.enabledInHierarchy || !this._content)
                        return;
                    if (this._hasNestedViewGroup(m336, n336))
                        return;
                    const o336 = m336.touch;
                    if (this._handleMoveLogic(o336), !this.cancelInnerEvents)
                        return;
                    const p336 = o336.getUILocation(k258);
                    if (p336.subtract(o336.getUIStartLocation(l258)), p336.length() > 7 && !this._touchMoved && m336.target !== this.node) {
                        const q336 = new w166(m336.getTouches(), m336.bubbles, q166.TOUCH_CANCEL);
                        q336.touch = m336.touch, q336.simulate = !0, m336.target.dispatchEvent(q336), this._touchMoved = !0;
                    }
                    this._stopPropagationIfTargetIsMe(m336);
                }
                _onTouchEnded(j336, k336) {
                    if (!this.enabledInHierarchy || !this._content || !j336)
                        return;
                    if (this._hasNestedViewGroup(j336, k336))
                        return;
                    this._dispatchEvent(o258.TOUCH_UP);
                    const l336 = j336.touch;
                    this._handleReleaseLogic(l336), this._touchMoved ? j336.propagationStopped = !0 : this._stopPropagationIfTargetIsMe(j336);
                }
                _onTouchCancelled(g336, h336) {
                    if (this.enabledInHierarchy && this._content && !this._hasNestedViewGroup(g336, h336)) {
                        if (g336 && !g336.simulate) {
                            const i336 = g336.touch;
                            this._handleReleaseLogic(i336);
                        }
                        this._stopPropagationIfTargetIsMe(g336);
                    }
                }
                _calculateBoundary() {
                    if (this._content && this.view) {
                        const c336 = this._content.getComponent(z255);
                        c336 && c336.enabledInHierarchy && c336.updateLayout();
                        const d336 = this.view, e336 = d336.width * d336.anchorX, f336 = d336.height * d336.anchorY;
                        this._leftBoundary = -e336, this._bottomBoundary = -f336, this._rightBoundary = this._leftBoundary + d336.width, this._topBoundary = this._bottomBoundary + d336.height, this._moveContentToTopLeft(d336.contentSize);
                    }
                }
                _hasNestedViewGroup(y335, z335) {
                    if (!y335 || y335.eventPhase !== p166.CAPTURING_PHASE)
                        return !1;
                    if (z335)
                        for (const a336 of z335) {
                            const b336 = a336;
                            if (this.node === b336)
                                return !(!y335.target || !y335.target.getComponent(l257));
                            if (b336.getComponent(l257))
                                return !0;
                        }
                    return !1;
                }
                _startInertiaScroll(w335) {
                    const x335 = new w146(w335);
                    x335.multiplyScalar(.7), this._startAttenuatingAutoScroll(x335, w335);
                }
                _calculateAttenuatedFactor(v335) {
                    return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * v335 + v335 * v335 * 8e-9));
                }
                _startAttenuatingAutoScroll(i335, j335) {
                    const k335 = i335.clone();
                    if (k335.normalize(), this._content && this.view) {
                        const p335 = this._content._uiProps.uiTransformComp.contentSize, q335 = this.view.contentSize, r335 = p335.width - q335.width, s335 = p335.height - q335.height, t335 = this._calculateAttenuatedFactor(r335), u335 = this._calculateAttenuatedFactor(s335);
                        k335.x = k335.x * r335 * (1 - this.brake) * t335, k335.y = k335.y * s335 * u335 * (1 - this.brake), k335.z = 0;
                    }
                    const l335 = i335.length();
                    let m335 = k335.length() / l335;
                    if (k335.add(i335), this.brake > 0 && m335 > 7) {
                        m335 = Math.sqrt(m335);
                        const o335 = i335.clone();
                        o335.multiplyScalar(m335), k335.set(o335), k335.add(i335);
                    }
                    let n335 = this._calculateAutoScrollTimeByInitialSpeed(j335.length());
                    this.brake > 0 && m335 > 3 && (m335 = 3, n335 *= m335), 0 === this.brake && m335 > 1 && (n335 *= m335), this._startAutoScroll(k335, n335, !0);
                }
                _calculateAutoScrollTimeByInitialSpeed(h335) {
                    return Math.sqrt(Math.sqrt(h335 / 5));
                }
                _startAutoScroll(d335, e335, f335 = !1) {
                    const g335 = this._flattenVectorByDirection(d335);
                    this._autoScrolling = !0, this._autoScrollTargetDelta = g335, this._autoScrollAttenuate = f335, w146.copy(this._autoScrollStartPosition, this._getContentPosition()), this._autoScrollTotalTime = e335, this._autoScrollAccumulatedTime = 0, this._autoScrollBraking = !1, this._isScrollEndedWithThresholdEventFired = !1, this._autoScrollBrakingStartPosition.set(0, 0, 0), this._getHowMuchOutOfBoundary().equals(w146.ZERO, h258) || (this._autoScrollCurrentlyOutOfBoundary = !0);
                }
                _calculateTouchMoveVelocity() {
                    const u334 = new w146();
                    let v334 = 0;
                    if (v334 = this._touchMoveTimeDeltas.reduce((b335, c335) => b335 + c335, v334), v334 <= 0 || v334 >= .5)
                        u334.set(w146.ZERO);
                    else {
                        let x334 = new w146();
                        x334 = this._touchMoveDisplacements.reduce((z334, a335) => (z334.add(a335), z334), x334), u334.set(x334.x * (1 - this.brake) / v334, x334.y * (1 - this.brake) / v334, x334.z);
                    }
                    return u334;
                }
                _flattenVectorByDirection(s334) {
                    const t334 = s334;
                    return t334.x = this.horizontal ? t334.x : 0, t334.y = this.vertical ? t334.y : 0, t334;
                }
                _moveContent(o334, p334) {
                    const q334 = this._flattenVectorByDirection(o334);
                    i258.set(this._getContentPosition()), i258.add(q334), i258.set(Math.round(1e4 * i258.x) * h258, Math.round(1e4 * i258.y) * h258, i258.z), this._setContentPosition(i258);
                    const r334 = this._getHowMuchOutOfBoundary();
                    k258.set(r334.x, r334.y), this._updateScrollBar(k258), this.elastic && p334 && this._startBounceBackIfNeeded();
                }
                _getContentLeftBoundary() {
                    if (!this._content)
                        return -1;
                    const m334 = this._getContentPosition(), n334 = this._content._uiProps.uiTransformComp;
                    return m334.x - n334.anchorX * n334.width;
                }
                _getContentRightBoundary() {
                    if (!this._content)
                        return -1;
                    const l334 = this._content._uiProps.uiTransformComp;
                    return this._getContentLeftBoundary() + l334.width;
                }
                _getContentTopBoundary() {
                    if (!this._content)
                        return -1;
                    const k334 = this._content._uiProps.uiTransformComp;
                    return this._getContentBottomBoundary() + k334.height;
                }
                _getContentBottomBoundary() {
                    if (!this._content)
                        return -1;
                    const i334 = this._getContentPosition(), j334 = this._content._uiProps.uiTransformComp;
                    return i334.y - j334.anchorY * j334.height;
                }
                _getHowMuchOutOfBoundary(c334) {
                    if ((c334 = c334 || new w146()).equals(w146.ZERO, h258) && !this._outOfBoundaryAmountDirty)
                        return this._outOfBoundaryAmount;
                    const d334 = new w146(), e334 = this._getContentLeftBoundary(), f334 = this._getContentRightBoundary();
                    e334 + c334.x > this._leftBoundary ? d334.x = this._leftBoundary - (e334 + c334.x) : f334 + c334.x < this._rightBoundary && (d334.x = this._rightBoundary - (f334 + c334.x));
                    const g334 = this._getContentTopBoundary(), h334 = this._getContentBottomBoundary();
                    return g334 + c334.y < this._topBoundary ? d334.y = this._topBoundary - (g334 + c334.y) : h334 + c334.y > this._bottomBoundary && (d334.y = this._bottomBoundary - (h334 + c334.y)), c334.equals(w146.ZERO, h258) && (this._outOfBoundaryAmount = d334, this._outOfBoundaryAmountDirty = !1), this._clampDelta(d334), d334;
                }
                _updateScrollBar(b334) {
                    this._horizontalScrollBar && this._horizontalScrollBar.isValid && this._horizontalScrollBar.onScroll(b334), this._verticalScrollBar && this._verticalScrollBar.isValid && this._verticalScrollBar.onScroll(b334);
                }
                _onScrollBarTouchBegan() {
                    this._horizontalScrollBar && this._horizontalScrollBar.isValid && this._horizontalScrollBar.onTouchBegan(), this._verticalScrollBar && this._verticalScrollBar.isValid && this._verticalScrollBar.onTouchBegan();
                }
                _onScrollBarTouchEnded() {
                    this._horizontalScrollBar && this._horizontalScrollBar.isValid && this._horizontalScrollBar.onTouchEnded(), this._verticalScrollBar && this._verticalScrollBar.isValid && this._verticalScrollBar.onTouchEnded();
                }
                _dispatchEvent(z333) {
                    if (z333 === o258.SCROLL_ENDED)
                        this._scrollEventEmitMask = 0;
                    else if (z333 === o258.SCROLL_TO_TOP || z333 === o258.SCROLL_TO_BOTTOM || z333 === o258.SCROLL_TO_LEFT || z333 === o258.SCROLL_TO_RIGHT) {
                        const a334 = 1 << n258[z333];
                        if (this._scrollEventEmitMask & a334)
                            return;
                        this._scrollEventEmitMask |= a334;
                    }
                    p164.emitEvents(this.scrollEvents, this, n258[z333]), this.node.emit(z333, this);
                }
                _adjustContentOutOfBoundary() {
                    if (!this._content)
                        return;
                    this._outOfBoundaryAmountDirty = !0;
                    const y333 = this._getHowMuchOutOfBoundary();
                    !y333.equals(w146.ZERO, h258) && (i258.set(this._getContentPosition()), i258.add(y333), this._setContentPosition(i258), this._updateScrollBar(s147.ZERO));
                }
                _hideScrollBar() {
                    this._horizontalScrollBar && this._horizontalScrollBar.isValid && this._horizontalScrollBar.hide(), this._verticalScrollBar && this._verticalScrollBar.isValid && this._verticalScrollBar.hide();
                }
                _updateScrollBarState() {
                    if (!this._content || !this.view)
                        return;
                    const w333 = this.view, x333 = this._content._uiProps.uiTransformComp;
                    this._verticalScrollBar && this._verticalScrollBar.isValid && (x333.height < w333.height || w128(x333.height, w333.height) ? this._verticalScrollBar.hide() : this._verticalScrollBar.show()), this._horizontalScrollBar && this._horizontalScrollBar.isValid && (x333.width < w333.width || w128(x333.width, w333.width) ? this._horizontalScrollBar.hide() : this._horizontalScrollBar.show());
                }
                _stopPropagationIfTargetIsMe(v333) {
                    v333.eventPhase === p166.AT_TARGET && v333.target === this.node && (v333.propagationStopped = !0);
                }
                _processDeltaMove(u333) {
                    this._scrollChildren(u333), this._gatherTouchMove(u333);
                }
                _handleMoveLogic(t333) {
                    this._getLocalAxisAlignDelta(this._deltaPos, t333), this._deltaAmount.add(this._deltaPos);
                }
                _handleReleaseLogic(s333) {
                    this._getLocalAxisAlignDelta(this._deltaPos, s333), this._gatherTouchMove(this._deltaPos), this._processInertiaScroll(), this._scrolling && (this._scrolling = !1, this._autoScrolling || this._dispatchEvent(o258.SCROLL_ENDED));
                }
                _getLocalAxisAlignDelta(o333, p333) {
                    const q333 = this.node._uiProps.uiTransformComp, r333 = new w146();
                    q333 && (p333.getUILocation(k258), p333.getUIPreviousLocation(l258), i258.set(k258.x, k258.y, 0), j258.set(l258.x, l258.y, 0), q333.convertToNodeSpaceAR(i258, i258), q333.convertToNodeSpaceAR(j258, j258), w146.subtract(r333, i258, j258)), o333.set(r333);
                }
                _scrollChildren(e333) {
                    this._clampDelta(e333);
                    const f333 = e333;
                    let g333;
                    this.elastic && (g333 = this._getHowMuchOutOfBoundary(), f333.x *= 0 === g333.x ? 1 : .5, f333.y *= 0 === g333.y ? 1 : .5), this.elastic || (g333 = this._getHowMuchOutOfBoundary(f333), f333.add(g333));
                    let h333 = o258.NONE, i333 = o258.NONE;
                    if (this._content) {
                        const { anchorX: j333, anchorY: k333, width: l333, height: m333 } = this._content._uiProps.uiTransformComp, n333 = this._content.position || w146.ZERO;
                        this.vertical && (f333.y > 0 ? n333.y - k333 * m333 + f333.y >= this._bottomBoundary && (h333 = o258.SCROLL_TO_BOTTOM) : f333.y < 0 && n333.y - k333 * m333 + m333 + f333.y <= this._topBoundary && (h333 = o258.SCROLL_TO_TOP)), this.horizontal && (f333.x < 0 ? n333.x - j333 * l333 + l333 + f333.x <= this._rightBoundary && (i333 = o258.SCROLL_TO_RIGHT) : f333.x > 0 && n333.x - j333 * l333 + f333.x >= this._leftBoundary && (i333 = o258.SCROLL_TO_LEFT));
                    }
                    this._moveContent(f333, !1), (this.horizontal && 0 !== f333.x || this.vertical && 0 !== f333.y) && (this._scrolling || (this._scrolling = !0, this._dispatchEvent(o258.SCROLL_BEGAN)), this._dispatchEvent(o258.SCROLLING)), h333 !== o258.NONE && this._dispatchEvent(h333), i333 !== o258.NONE && this._dispatchEvent(i333);
                }
                _handlePressLogic() {
                    this._autoScrolling && this._dispatchEvent(o258.SCROLL_ENDED), this._autoScrolling = !1, this._isBouncing = !1, this._touchMovePreviousTimestamp = m258(), this._touchMoveDisplacements.length = 0, this._touchMoveTimeDeltas.length = 0, this._onScrollBarTouchBegan();
                }
                _clampDelta(b333) {
                    if (this._content && this.view) {
                        const c333 = this.view.contentSize, d333 = this._content._uiProps.uiTransformComp;
                        d333.width < c333.width && (b333.x = 0), d333.height < c333.height && (b333.y = 0);
                    }
                }
                _gatherTouchMove(y332) {
                    const z332 = y332.clone();
                    for (this._clampDelta(z332); this._touchMoveDisplacements.length >= 5;)
                        this._touchMoveDisplacements.shift(), this._touchMoveTimeDeltas.shift();
                    this._touchMoveDisplacements.push(z332);
                    const a333 = m258();
                    this._touchMoveTimeDeltas.push((a333 - this._touchMovePreviousTimestamp) / 1e3), this._touchMovePreviousTimestamp = a333;
                }
                _startBounceBackIfNeeded() {
                    if (!this.elastic)
                        return !1;
                    const w332 = this._getHowMuchOutOfBoundary();
                    if (this._clampDelta(w332), w332.equals(w146.ZERO, h258))
                        return !1;
                    const x332 = Math.max(this.bounceDuration, 0);
                    return this._startAutoScroll(w332, x332, !0), this._isBouncing || (w332.y > 0 && this._dispatchEvent(o258.BOUNCE_TOP), w332.y < 0 && this._dispatchEvent(o258.BOUNCE_BOTTOM), w332.x > 0 && this._dispatchEvent(o258.BOUNCE_RIGHT), w332.x < 0 && this._dispatchEvent(o258.BOUNCE_LEFT), this._isBouncing = !0), !0;
                }
                _processInertiaScroll() {
                    if (!this._startBounceBackIfNeeded() && this.inertia) {
                        const v332 = this._calculateTouchMoveVelocity();
                        !v332.equals(i258, h258) && this.brake < 1 && this._startInertiaScroll(v332);
                    }
                    this._onScrollBarTouchEnded();
                }
                _isOutOfBoundary() {
                    return !this._getHowMuchOutOfBoundary().equals(w146.ZERO, h258);
                }
                _isNecessaryAutoScrollBrake() {
                    if (this._autoScrollBraking)
                        return !0;
                    if (this._isOutOfBoundary()) {
                        if (!this._autoScrollCurrentlyOutOfBoundary)
                            return this._autoScrollCurrentlyOutOfBoundary = !0, this._autoScrollBraking = !0, w146.copy(this._autoScrollBrakingStartPosition, this._getContentPosition()), !0;
                    }
                    else
                        this._autoScrollCurrentlyOutOfBoundary = !1;
                    return !1;
                }
                _processAutoScrolling(j332) {
                    const k332 = this._isNecessaryAutoScrollBrake(), l332 = k332 ? .05 : 1;
                    this._autoScrollAccumulatedTime += j332 * (1 / l332);
                    let m332 = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
                    var n332;
                    this._autoScrollAttenuate && (n332 = m332, m332 = (n332 -= 1) * n332 * n332 * n332 * n332 + 1);
                    const o332 = this._autoScrollTargetDelta.clone();
                    o332.multiplyScalar(m332);
                    const p332 = this._autoScrollStartPosition.clone();
                    p332.add(o332);
                    let q332 = Math.abs(m332 - 1) <= h258;
                    if (Math.abs(m332 - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired && (this._dispatchEvent(o258.SCROLL_ENG_WITH_THRESHOLD), this._isScrollEndedWithThresholdEventFired = !0), this.elastic) {
                        const u332 = p332.clone();
                        u332.subtract(this._autoScrollBrakingStartPosition), k332 && u332.multiplyScalar(l332), p332.set(this._autoScrollBrakingStartPosition), p332.add(u332);
                    }
                    else {
                        const s332 = p332.clone();
                        s332.subtract(this.getContentPosition());
                        const t332 = this._getHowMuchOutOfBoundary(s332);
                        t332.equals(w146.ZERO, h258) || (p332.add(t332), q332 = !0);
                    }
                    q332 && (this._autoScrolling = !1);
                    const r332 = p332.clone();
                    r332.subtract(this._getContentPosition()), this._clampDelta(r332), this._moveContent(r332, q332), this._dispatchEvent(o258.SCROLLING), this._autoScrolling || (this._isBouncing = !1, this._scrolling = !1, this._dispatchEvent(o258.SCROLL_ENDED));
                }
                _checkMouseWheel(i332) {
                    if (!this._getHowMuchOutOfBoundary().equals(w146.ZERO, h258))
                        return this._processInertiaScroll(), this._scrolling && (this._scrolling = !1, this._autoScrolling || this._dispatchEvent(o258.SCROLL_ENDED)), this.unschedule(this._checkMouseWheel), void (this._stopMouseWheel = !1);
                    this._mouseWheelEventElapsedTime += i332, this._mouseWheelEventElapsedTime > .1 && (this._onScrollBarTouchEnded(), this._scrolling && (this._scrolling = !1, this._autoScrolling || this._dispatchEvent(o258.SCROLL_ENDED)), this.unschedule(this._checkMouseWheel), this._stopMouseWheel = !1);
                }
                _calculateMovePercentDelta(y331) {
                    const z331 = y331.anchor, a332 = y331.applyToHorizontal, b332 = y331.applyToVertical;
                    this._calculateBoundary(), z331.clampf(s147.ZERO, s147.ONE);
                    let c332 = this._getContentBottomBoundary() - this._bottomBoundary;
                    c332 = -c332;
                    let d332 = this._getContentLeftBoundary() - this._leftBoundary;
                    d332 = -d332;
                    const e332 = new w146();
                    if (this._content && this.view) {
                        let f332 = 0;
                        const g332 = this._content._uiProps.uiTransformComp.contentSize, h332 = this.view.contentSize;
                        a332 && (f332 = g332.width - h332.width, e332.x = d332 - f332 * z331.x), b332 && (f332 = g332.height - h332.height, e332.y = c332 - f332 * z331.y);
                    }
                    return e332;
                }
                _moveContentToTopLeft(s331) {
                    let t331 = this._getContentBottomBoundary() - this._bottomBoundary;
                    t331 = -t331;
                    const u331 = new w146();
                    let v331 = 0, w331 = this._getContentLeftBoundary() - this._leftBoundary;
                    if (w331 = -w331, this._content) {
                        const x331 = this._content._uiProps.uiTransformComp.contentSize;
                        x331.height < s331.height && (v331 = x331.height - s331.height, u331.y = t331 - v331), x331.width < s331.width && (v331 = x331.width - s331.width, u331.x = w331);
                    }
                    this._updateScrollBarState(), this._moveContent(u331), this._adjustContentOutOfBoundary();
                }
                _scaleChanged(r331) {
                    r331 === b175.SCALE && this._calculateBoundary();
                }
                _xrHoverEnter(q331) {
                    q331.deviceType === z251.Left ? this._hoverIn = p258.LEFT : q331.deviceType === z251.Right && (this._hoverIn = p258.RIGHT);
                }
                _xrHoverExit(p331) {
                    this._hoverIn = p258.NONE;
                }
                _dispatchEventHandleInput(m331) {
                    let n331, o331;
                    m331 instanceof x166 ? n331 = m331.gamepad : m331 instanceof y166 && (n331 = m331.handleInputDevice), this.enabledInHierarchy && this._hoverIn !== p258.NONE && (this._hoverIn === p258.LEFT ? (o331 = n331.leftStick.getValue(), o331.equals(s147.ZERO) || this._xrThumbStickMove(o331)) : this._hoverIn === p258.RIGHT && (o331 = n331.rightStick.getValue(), o331.equals(s147.ZERO) || this._xrThumbStickMove(o331)));
                }
                _xrThumbStickMove(j331) {
                    if (!this.enabledInHierarchy)
                        return;
                    const k331 = new w146(), l331 = j331.y;
                    this.vertical ? k331.set(0, -62.5 * l331, 0) : this.horizontal && k331.set(-62.5 * l331, 0, 0), this._mouseWheelEventElapsedTime = 0, this._deltaAmount.add(k331), this._stopMouseWheel || (this._handlePressLogic(), this.schedule(this._checkMouseWheel, 1 / 60, NaN, 0), this._stopMouseWheel = !0);
                }
            }).EventType = o258, v257 = p130((u257 = g258).prototype, "bounceDuration", [j151], function () {
                return 1;
            }), w257 = p130(u257.prototype, "brake", [j151], function () {
                return .5;
            }), x257 = p130(u257.prototype, "elastic", [j151], function () {
                return !0;
            }), y257 = p130(u257.prototype, "inertia", [j151], function () {
                return !0;
            }), i125(u257.prototype, "content", [p257], Object.getOwnPropertyDescriptor(u257.prototype, "content"), u257.prototype), z257 = p130(u257.prototype, "horizontal", [j151], function () {
                return !0;
            }), i125(u257.prototype, "horizontalScrollBar", [q257], Object.getOwnPropertyDescriptor(u257.prototype, "horizontalScrollBar"), u257.prototype), a258 = p130(u257.prototype, "vertical", [j151], function () {
                return !0;
            }), i125(u257.prototype, "verticalScrollBar", [r257], Object.getOwnPropertyDescriptor(u257.prototype, "verticalScrollBar"), u257.prototype), b258 = p130(u257.prototype, "cancelInnerEvents", [j151], function () {
                return !0;
            }), c258 = p130(u257.prototype, "scrollEvents", [s257, j151], function () {
                return [];
            }), d258 = p130(u257.prototype, "_content", [j151], function () {
                return null;
            }), e258 = p130(u257.prototype, "_horizontalScrollBar", [j151], function () {
                return null;
            }), f258 = p130(u257.prototype, "_verticalScrollBar", [j151], function () {
                return null;
            }), t257 = u257)) || t257) || t257) || t257);
            var r258, s258, t258, u258, v258, w258, x258, y258, z258, a259, b259, c259, d259;
            g125({
                ScrollView: q258,
                ScrollViewComponent: q258
            }), s143.ScrollView = q258;
            const e259 = new w146();
            var f259;
            !function (i331) {
                i331[i331.Horizontal = 0] = "Horizontal", i331[i331.Vertical = 1] = "Vertical";
            }(f259 || (f259 = {})), s127(f259);
            let g259 = (r258 = e151("cc.Slider"), s258 = g151(110), t258 = f151(d190), u258 = a131(w196), v258 = a131(f259), w258 = a131([p164]), r258(x258 = s258(x258 = t258(((d259 = class extends a165 {
                constructor(...h331) {
                    super(...h331), this.slideEvents = z258 && z258(), this._handle = a259 && a259(), this._direction = b259 && b259(), this._progress = c259 && c259(), this._offset = new w146(), this._dragging = !1, this._touchHandle = !1, this._handleLocalPos = new w146(), this._touchPos = new w146();
                }
                get handle() {
                    return this._handle;
                }
                set handle(g331) {
                    this._handle !== g331 && (this._handle = g331);
                }
                get direction() {
                    return this._direction;
                }
                set direction(f331) {
                    this._direction !== f331 && (this._direction = f331, this._changeLayout());
                }
                get progress() {
                    return this._progress;
                }
                set progress(e331) {
                    this._progress !== e331 && (this._progress = e331, this._updateHandlePosition());
                }
                __preload() {
                    this._updateHandlePosition();
                }
                onEnable() {
                    this._updateHandlePosition(), this.node.on(z174.TOUCH_START, this._onTouchBegan, this), this.node.on(z174.TOUCH_MOVE, this._onTouchMoved, this), this.node.on(z174.TOUCH_END, this._onTouchEnded, this), this.node.on(z174.TOUCH_CANCEL, this._onTouchCancelled, this), this.node.on(a252.XRUI_HOVER_STAY, this._xrHoverStay, this), this.node.on(a252.XRUI_CLICK, this._xrClick, this), this.node.on(a252.XRUI_UNCLICK, this._xrUnClick, this), this._handle && this._handle.isValid && (this._handle.node.on(z174.TOUCH_START, this._onHandleDragStart, this), this._handle.node.on(z174.TOUCH_MOVE, this._onTouchMoved, this), this._handle.node.on(z174.TOUCH_END, this._onTouchEnded, this));
                }
                onDisable() {
                    this.node.off(z174.TOUCH_START, this._onTouchBegan, this), this.node.off(z174.TOUCH_MOVE, this._onTouchMoved, this), this.node.off(z174.TOUCH_END, this._onTouchEnded, this), this.node.off(z174.TOUCH_CANCEL, this._onTouchCancelled, this), this.node.off(a252.XRUI_HOVER_STAY, this._xrHoverStay, this), this.node.off(a252.XRUI_CLICK, this._xrClick, this), this.node.off(a252.XRUI_UNCLICK, this._xrUnClick, this), this._handle && this._handle.isValid && (this._handle.node.off(z174.TOUCH_START, this._onHandleDragStart, this), this._handle.node.off(z174.TOUCH_MOVE, this._onTouchMoved, this), this._handle.node.off(z174.TOUCH_END, this._onTouchEnded, this));
                }
                _onHandleDragStart(c331) {
                    if (!c331 || !this._handle || !this._handle.node._uiProps.uiTransformComp)
                        return;
                    this._dragging = !0, this._touchHandle = !0;
                    const d331 = c331.touch.getUILocation();
                    w146.set(this._touchPos, d331.x, d331.y, 0), this._handle.node._uiProps.uiTransformComp.convertToNodeSpaceAR(this._touchPos, this._offset), c331.propagationStopped = !0;
                }
                _onTouchBegan(b331) {
                    this._handle && b331 && (this._dragging = !0, this._touchHandle || this._handleSliderLogic(b331.touch), b331.propagationStopped = !0);
                }
                _onTouchMoved(a331) {
                    this._dragging && a331 && (this._handleSliderLogic(a331.touch), a331.propagationStopped = !0);
                }
                _onTouchEnded(z330) {
                    this._dragging = !1, this._touchHandle = !1, this._offset = new w146(), z330 && (z330.propagationStopped = !0);
                }
                _onTouchCancelled(y330) {
                    this._dragging = !1, y330 && (y330.propagationStopped = !0);
                }
                _handleSliderLogic(x330) {
                    this._updateProgress(x330), this._emitSlideEvent();
                }
                _emitSlideEvent() {
                    p164.emitEvents(this.slideEvents, this), this.node.emit("slide", this);
                }
                _updateProgress(t330) {
                    if (!this._handle || !t330)
                        return;
                    const u330 = t330.getUILocation();
                    w146.set(this._touchPos, u330.x, u330.y, 0);
                    const v330 = this.node._uiProps.uiTransformComp, w330 = v330.convertToNodeSpaceAR(this._touchPos, e259);
                    this.direction === f259.Horizontal ? this.progress = y128(.5 + (w330.x - this._offset.x) / v330.width) : this.progress = y128(.5 + (w330.y - this._offset.y) / v330.height);
                }
                _updateHandlePosition() {
                    if (!this._handle)
                        return;
                    this._handleLocalPos.set(this._handle.node.getPosition());
                    const s330 = this.node._uiProps.uiTransformComp;
                    this._direction === f259.Horizontal ? this._handleLocalPos.x = -s330.width * s330.anchorX + this.progress * s330.width : this._handleLocalPos.y = -s330.height * s330.anchorY + this.progress * s330.height, this._handle.node.setPosition(this._handleLocalPos);
                }
                _changeLayout() {
                    const p330 = this.node._uiProps.uiTransformComp, q330 = p330.contentSize;
                    if (p330.setContentSize(q330.height, q330.width), this._handle) {
                        const r330 = this._handle.node.position;
                        this._direction === f259.Horizontal ? this._handle.node.setPosition(r330.x, 0, r330.z) : this._handle.node.setPosition(0, r330.y, r330.z), this._updateHandlePosition();
                    }
                }
                _xrHandleProgress(n330) {
                    if (!this._touchHandle) {
                        const o330 = this.node._uiProps.uiTransformComp;
                        o330.convertToNodeSpaceAR(n330, e259), this.direction === f259.Horizontal ? this.progress = y128(.5 + (e259.x - this.node.position.x) / o330.width) : this.progress = y128(.5 + (e259.y - this.node.position.y) / o330.height);
                    }
                }
                _xrClick(m330) {
                    this._handle && (this._dragging = !0, this._xrHandleProgress(m330.hitPoint), this._emitSlideEvent());
                }
                _xrUnClick() {
                    this._dragging = !1, this._touchHandle = !1;
                }
                _xrHoverStay(l330) {
                    this._dragging && (this._xrHandleProgress(l330.hitPoint), this._emitSlideEvent());
                }
            }).Direction = f259, i125((y258 = d259).prototype, "handle", [u258], Object.getOwnPropertyDescriptor(y258.prototype, "handle"), y258.prototype), i125(y258.prototype, "direction", [v258], Object.getOwnPropertyDescriptor(y258.prototype, "direction"), y258.prototype), z258 = p130(y258.prototype, "slideEvents", [w258, j151], function () {
                return [];
            }), a259 = p130(y258.prototype, "_handle", [j151], function () {
                return null;
            }), b259 = p130(y258.prototype, "_direction", [j151], function () {
                return f259.Horizontal;
            }), c259 = p130(y258.prototype, "_progress", [j151], function () {
                return .1;
            }), x258 = y258)) || x258) || x258) || x258);
            function i143(...k330) {
                return Object.assign({}, ...k330);
            }
            var h259, i259, j259, k259, l259, m259, n259, o259, p259, q259, r259, s259;
            g125({
                Slider: g259,
                SliderComponent: g259
            }), s143.Slider = g259, function (j330) {
                j330.TOGGLE = "toggle";
            }(s259 || (s259 = {}));
            let t259 = (h259 = e151("cc.Toggle"), i259 = g151(110), j259 = f151(d190), k259 = a131(w196), l259 = a131([p164]), h259(m259 = i259(m259 = j259(((r259 = class t extends k253 {
                constructor(...i330) {
                    super(...i330), this.checkEvents = o259 && o259(), this._isChecked = p259 && p259(), this._checkMark = q259 && q259();
                }
                get isChecked() {
                    return this._isChecked;
                }
                set isChecked(h330) {
                    this._set(h330);
                }
                get checkMark() {
                    return this._checkMark;
                }
                set checkMark(g330) {
                    this._checkMark !== g330 && (this._checkMark = g330);
                }
                set _resizeToTarget(f330) {
                    f330 && this._resizeNodeToTargetNode();
                }
                get _toggleContainer() {
                    const e330 = this.node.parent;
                    return s143.Node.isNode(e330) ? e330.getComponent("cc.ToggleContainer") : null;
                }
                _internalToggle() {
                    this.isChecked = !this.isChecked;
                }
                _set(b330, c330 = !0) {
                    if (this._isChecked == b330)
                        return;
                    this._isChecked = b330;
                    const d330 = this._toggleContainer;
                    d330 && d330.enabled && this.enabled && (b330 || !d330.anyTogglesChecked() && !d330.allowSwitchOff) && (this._isChecked = !0, d330.notifyToggleCheck(this, c330)), this.playEffect(), c330 && this._emitToggleEvents();
                }
                playEffect() {
                    this._checkMark && (this._checkMark.node.active = this._isChecked);
                }
                setIsCheckedWithoutNotify(a330) {
                    this._set(a330, !1);
                }
                onEnable() {
                    super.onEnable(), this.playEffect(), this.node.on(t.EventType.CLICK, this._internalToggle, this);
                }
                onDisable() {
                    super.onDisable(), this.node.off(t.EventType.CLICK, this._internalToggle, this);
                }
                _emitToggleEvents() {
                    this.node.emit(t.EventType.TOGGLE, this), this.checkEvents && p164.emitEvents(this.checkEvents, this);
                }
            }).EventType = i143(s259, g253), i125((n259 = r259).prototype, "checkMark", [k259], Object.getOwnPropertyDescriptor(n259.prototype, "checkMark"), n259.prototype), o259 = p130(n259.prototype, "checkEvents", [l259, j151], function () {
                return [];
            }), p259 = p130(n259.prototype, "_isChecked", [j151], function () {
                return !0;
            }), q259 = p130(n259.prototype, "_checkMark", [j151], function () {
                return null;
            }), m259 = n259)) || m259) || m259) || m259);
            var u259, v259, w259, x259, y259, z259, a260;
            g125({
                Toggle: t259,
                ToggleComponent: t259
            }), s143.Toggle = t259;
            let b260 = (u259 = e151("cc.ToggleContainer"), v259 = g151(110), w259 = a131([p164]), u259(x259 = v259((y259 = class extends a165 {
                constructor(...z329) {
                    super(...z329), this._allowSwitchOff = z259 && z259(), this.checkEvents = a260 && a260();
                }
                get allowSwitchOff() {
                    return this._allowSwitchOff;
                }
                set allowSwitchOff(y329) {
                    this._allowSwitchOff = y329;
                }
                get toggleItems() {
                    return this.node.children.map(w329 => {
                        const x329 = w329.getComponent("cc.Toggle");
                        return x329 && x329.enabled ? x329 : null;
                    }).filter(Boolean);
                }
                onEnable() {
                    this.ensureValidState(), this.node.on(z174.CHILD_ADDED, this.ensureValidState, this), this.node.on(z174.CHILD_REMOVED, this.ensureValidState, this);
                }
                onDisable() {
                    this.node.off(z174.CHILD_ADDED, this.ensureValidState, this), this.node.off(z174.CHILD_REMOVED, this.ensureValidState, this);
                }
                activeToggles() {
                    return this.toggleItems.filter(u329 => u329.isChecked);
                }
                anyTogglesChecked() {
                    return !!this.toggleItems.find(s329 => s329.isChecked);
                }
                notifyToggleCheck(n329, o329 = !0) {
                    if (this.enabledInHierarchy) {
                        for (let p329 = 0; p329 < this.toggleItems.length; p329++) {
                            const q329 = this.toggleItems[p329];
                            q329 !== n329 && (o329 ? q329.isChecked = !1 : q329.setIsCheckedWithoutNotify(!1));
                        }
                        this.checkEvents && s143.Component.EventHandler.emitEvents(this.checkEvents, n329);
                    }
                }
                ensureValidState() {
                    const h329 = this.toggleItems;
                    if (!this._allowSwitchOff && !this.anyTogglesChecked() && 0 !== h329.length) {
                        const m329 = h329[0];
                        m329.isChecked = !0, this.notifyToggleCheck(m329);
                    }
                    const i329 = this.activeToggles();
                    if (i329.length > 1) {
                        const j329 = i329[0];
                        for (let k329 = 0; k329 < i329.length; ++k329) {
                            const l329 = i329[k329];
                            l329 !== j329 && (l329.isChecked = !1);
                        }
                    }
                }
            }, z259 = p130(y259.prototype, "_allowSwitchOff", [j151], function () {
                return !1;
            }), a260 = p130(y259.prototype, "checkEvents", [w259, j151], function () {
                return [];
            }), x259 = y259)) || x259) || x259);
            var c260, d260, e260, f260, g260, h260, i260, j260, k260, l260, m260, n260, o260, p260, q260, r260, s260, t260, u260, v260, w260, x260, y260, z260, a261, b261;
            g125({
                ToggleContainer: b260,
                ToggleContainerComponent: b260
            }), s143.ToggleContainer = b260;
            const c261 = new s147();
            function j143(g329) {
                return g329 instanceof y181 ? j157 : g329._uiProps.uiTransformComp ? g329._uiProps.uiTransformComp.contentSize : x147.ZERO;
            }
            function k143(u328, v328, w328, x328) {
                u328.parent ? c261.set(u328.parent.getScale().x, u328.parent.getScale().y) : c261.set(0, 0);
                let y328 = c261.x, z328 = c261.y, a329 = 0, b329 = 0;
                for (let c329 = u328.parent;;) {
                    if (!c329)
                        return w328.x = w328.y = 0, void (x328.x = x328.y = 1);
                    const d329 = c329.getPosition();
                    if (a329 += d329.x, b329 += d329.y, c329 = c329.parent, c329 === v328)
                        break;
                    {
                        c329 ? c261.set(c329.getScale().x, c329.getScale().y) : c261.set(0, 0);
                        const e329 = c261.x, f329 = c261.y;
                        a329 *= e329, b329 *= f329, y328 *= e329, z328 *= f329;
                    }
                }
                x328.x = 0 !== y328 ? 1 / y328 : 1, x328.y = 0 !== z328 ? 1 / z328 : 1, w328.x = -a329, w328.y = -b329;
            }
            let d261, e261;
            !function (t328) {
                t328[t328.ONCE = 0] = "ONCE", t328[t328.ALWAYS = 1] = "ALWAYS", t328[t328.ON_WINDOW_RESIZE = 2] = "ON_WINDOW_RESIZE";
            }(d261 || (d261 = {})), s127(d261), function (s328) {
                s328[s328.TOP = 1] = "TOP", s328[s328.MID = 2] = "MID", s328[s328.BOT = 4] = "BOT", s328[s328.LEFT = 8] = "LEFT", s328[s328.CENTER = 16] = "CENTER", s328[s328.RIGHT = 32] = "RIGHT", s328[s328.HORIZONTAL = 56] = "HORIZONTAL", s328[s328.VERTICAL = 7] = "VERTICAL";
            }(e261 || (e261 = {}));
            const f261 = e261.TOP | e261.BOT, g261 = e261.LEFT | e261.RIGHT;
            let h261 = (c260 = e151("cc.Widget"), d260 = g151(110), e260 = f151(d190), f260 = a131(h175), g260 = a131(d261), c260(h260 = d260(h260 = e260(((b261 = class extends a165 {
                constructor(...r328) {
                    super(...r328), this._lastPos = new w146(), this._lastSize = new x147(), this._dirty = !0, this._hadAlignOnce = !1, this._alignFlags = j260 && j260(), this._target = k260 && k260(), this._left = l260 && l260(), this._right = m260 && m260(), this._top = n260 && n260(), this._bottom = o260 && o260(), this._horizontalCenter = p260 && p260(), this._verticalCenter = q260 && q260(), this._isAbsLeft = r260 && r260(), this._isAbsRight = s260 && s260(), this._isAbsTop = t260 && t260(), this._isAbsBottom = u260 && u260(), this._isAbsHorizontalCenter = v260 && v260(), this._isAbsVerticalCenter = w260 && w260(), this._originalWidth = x260 && x260(), this._originalHeight = y260 && y260(), this._alignMode = z260 && z260(), this._lockFlags = a261 && a261();
                }
                get target() {
                    return this._target;
                }
                set target(q328) {
                    this._target !== q328 && (this._unregisterTargetEvents(), this._target = q328, this._registerTargetEvents(), this._validateTargetInDEV(), this._recursiveDirty());
                }
                get isAlignTop() {
                    return (this._alignFlags & e261.TOP) > 0;
                }
                set isAlignTop(p328) {
                    this._setAlign(e261.TOP, p328), this._recursiveDirty();
                }
                get isAlignBottom() {
                    return (this._alignFlags & e261.BOT) > 0;
                }
                set isAlignBottom(o328) {
                    this._setAlign(e261.BOT, o328), this._recursiveDirty();
                }
                get isAlignLeft() {
                    return (this._alignFlags & e261.LEFT) > 0;
                }
                set isAlignLeft(n328) {
                    this._setAlign(e261.LEFT, n328), this._recursiveDirty();
                }
                get isAlignRight() {
                    return (this._alignFlags & e261.RIGHT) > 0;
                }
                set isAlignRight(m328) {
                    this._setAlign(e261.RIGHT, m328), this._recursiveDirty();
                }
                get isAlignVerticalCenter() {
                    return (this._alignFlags & e261.MID) > 0;
                }
                set isAlignVerticalCenter(l328) {
                    l328 ? (this.isAlignTop = !1, this.isAlignBottom = !1, this._alignFlags |= e261.MID) : this._alignFlags &= ~e261.MID, this._recursiveDirty();
                }
                get isAlignHorizontalCenter() {
                    return (this._alignFlags & e261.CENTER) > 0;
                }
                set isAlignHorizontalCenter(k328) {
                    k328 ? (this.isAlignLeft = !1, this.isAlignRight = !1, this._alignFlags |= e261.CENTER) : this._alignFlags &= ~e261.CENTER, this._recursiveDirty();
                }
                get isStretchWidth() {
                    return (this._alignFlags & g261) === g261;
                }
                get isStretchHeight() {
                    return (this._alignFlags & f261) === f261;
                }
                get top() {
                    return this._top;
                }
                set top(j328) {
                    this._top = j328, this._recursiveDirty();
                }
                get editorTop() {
                    return this._isAbsTop ? this._top : 100 * this._top;
                }
                set editorTop(i328) {
                    this._top = this._isAbsTop ? i328 : i328 / 100, this._recursiveDirty();
                }
                get bottom() {
                    return this._bottom;
                }
                set bottom(h328) {
                    this._bottom = h328, this._recursiveDirty();
                }
                get editorBottom() {
                    return this._isAbsBottom ? this._bottom : 100 * this._bottom;
                }
                set editorBottom(g328) {
                    this._bottom = this._isAbsBottom ? g328 : g328 / 100, this._recursiveDirty();
                }
                get left() {
                    return this._left;
                }
                set left(f328) {
                    this._left = f328, this._recursiveDirty();
                }
                get editorLeft() {
                    return this._isAbsLeft ? this._left : 100 * this._left;
                }
                set editorLeft(e328) {
                    this._left = this._isAbsLeft ? e328 : e328 / 100, this._recursiveDirty();
                }
                get right() {
                    return this._right;
                }
                set right(d328) {
                    this._right = d328, this._recursiveDirty();
                }
                get editorRight() {
                    return this._isAbsRight ? this._right : 100 * this._right;
                }
                set editorRight(c328) {
                    this._right = this._isAbsRight ? c328 : c328 / 100, this._recursiveDirty();
                }
                get horizontalCenter() {
                    return this._horizontalCenter;
                }
                set horizontalCenter(b328) {
                    this._horizontalCenter = b328, this._recursiveDirty();
                }
                get editorHorizontalCenter() {
                    return this._isAbsHorizontalCenter ? this._horizontalCenter : 100 * this._horizontalCenter;
                }
                set editorHorizontalCenter(a328) {
                    this._horizontalCenter = this._isAbsHorizontalCenter ? a328 : a328 / 100, this._recursiveDirty();
                }
                get verticalCenter() {
                    return this._verticalCenter;
                }
                set verticalCenter(z327) {
                    this._verticalCenter = z327, this._recursiveDirty();
                }
                get editorVerticalCenter() {
                    return this._isAbsVerticalCenter ? this._verticalCenter : 100 * this._verticalCenter;
                }
                set editorVerticalCenter(y327) {
                    this._verticalCenter = this._isAbsVerticalCenter ? y327 : y327 / 100, this._recursiveDirty();
                }
                get isAbsoluteTop() {
                    return this._isAbsTop;
                }
                set isAbsoluteTop(x327) {
                    this._isAbsTop !== x327 && (this._isAbsTop = x327, this._autoChangedValue(e261.TOP, this._isAbsTop));
                }
                get isAbsoluteBottom() {
                    return this._isAbsBottom;
                }
                set isAbsoluteBottom(w327) {
                    this._isAbsBottom !== w327 && (this._isAbsBottom = w327, this._autoChangedValue(e261.BOT, this._isAbsBottom));
                }
                get isAbsoluteLeft() {
                    return this._isAbsLeft;
                }
                set isAbsoluteLeft(v327) {
                    this._isAbsLeft !== v327 && (this._isAbsLeft = v327, this._autoChangedValue(e261.LEFT, this._isAbsLeft));
                }
                get isAbsoluteRight() {
                    return this._isAbsRight;
                }
                set isAbsoluteRight(u327) {
                    this._isAbsRight !== u327 && (this._isAbsRight = u327, this._autoChangedValue(e261.RIGHT, this._isAbsRight));
                }
                get isAbsoluteHorizontalCenter() {
                    return this._isAbsHorizontalCenter;
                }
                set isAbsoluteHorizontalCenter(t327) {
                    this._isAbsHorizontalCenter !== t327 && (this._isAbsHorizontalCenter = t327, this._autoChangedValue(e261.CENTER, this._isAbsHorizontalCenter));
                }
                get isAbsoluteVerticalCenter() {
                    return this._isAbsVerticalCenter;
                }
                set isAbsoluteVerticalCenter(s327) {
                    this._isAbsVerticalCenter !== s327 && (this._isAbsVerticalCenter = s327, this._autoChangedValue(e261.MID, this._isAbsVerticalCenter));
                }
                get alignMode() {
                    return this._alignMode;
                }
                set alignMode(r327) {
                    this._alignMode = r327, this._recursiveDirty();
                }
                get alignFlags() {
                    return this._alignFlags;
                }
                set alignFlags(q327) {
                    this._alignFlags !== q327 && (this._alignFlags = q327, this._recursiveDirty());
                }
                updateAlignment() {
                    s143._widgetManager.updateAlignment(this.node);
                }
                _validateTargetInDEV() { }
                setDirty() {
                    this._recursiveDirty();
                }
                onEnable() {
                    this.node.getPosition(this._lastPos), this._lastSize.set(this.node._uiProps.uiTransformComp.contentSize), s143._widgetManager.add(this), this._hadAlignOnce = !1, this._registerEvent(), this._registerTargetEvents();
                }
                onDisable() {
                    s143._widgetManager.remove(this), this._unregisterEvent(), this._unregisterTargetEvents();
                }
                onDestroy() {
                    this._removeParentEvent();
                }
                _adjustWidgetToAllowMovingInEditor(p327) { }
                _adjustWidgetToAllowResizingInEditor() { }
                _adjustWidgetToAnchorChanged() {
                    this.setDirty();
                }
                _adjustTargetToParentChanged(o327) {
                    o327 && this._unregisterOldParentEvents(o327), this.node.getParent() && this._registerTargetEvents(), this._setDirtyByMode();
                }
                _registerEvent() {
                    this.node.on(z174.TRANSFORM_CHANGED, this._setDirtyByMode, this), this.node.on(z174.SIZE_CHANGED, this._setDirtyByMode, this), this.node.on(z174.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this), this.node.on(z174.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
                }
                _unregisterEvent() {
                    this.node.off(z174.TRANSFORM_CHANGED, this._setDirtyByMode, this), this.node.off(z174.SIZE_CHANGED, this._setDirtyByMode, this), this.node.off(z174.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this);
                }
                _removeParentEvent() {
                    this.node.off(z174.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
                }
                _autoChangedValue(j327, k327) {
                    if (!((this._alignFlags & j327) > 0))
                        return;
                    const l327 = this.node.parent && this.node.parent._uiProps, m327 = l327 && l327.uiTransformComp, n327 = m327 ? m327.contentSize : j157;
                    this.isAlignLeft && j327 === e261.LEFT ? this._left = k327 ? this._left * n327.width : this._left / n327.width : this.isAlignRight && j327 === e261.RIGHT ? this._right = k327 ? this._right * n327.width : this._right / n327.width : this.isAlignHorizontalCenter && j327 === e261.CENTER ? this._horizontalCenter = k327 ? this._horizontalCenter * n327.width : this._horizontalCenter / n327.width : this.isAlignTop && j327 === e261.TOP ? this._top = k327 ? this._top * n327.height : this._top / n327.height : this.isAlignBottom && j327 === e261.BOT ? this._bottom = k327 ? this._bottom * n327.height : this._bottom / n327.height : this.isAbsoluteVerticalCenter && j327 === e261.MID && (this._verticalCenter = this._verticalCenter / n327.height), this._recursiveDirty();
                }
                _registerTargetEvents() {
                    const i327 = this._target || this.node.parent;
                    i327 && i327.getComponent(d190) && (i327.on(z174.TRANSFORM_CHANGED, this._setDirtyByMode, this), i327.on(z174.SIZE_CHANGED, this._setDirtyByMode, this), i327.on(z174.ANCHOR_CHANGED, this._setDirtyByMode, this));
                }
                _unregisterTargetEvents() {
                    const h327 = this._target || this.node.parent;
                    h327 && (h327.off(z174.TRANSFORM_CHANGED, this._setDirtyByMode, this), h327.off(z174.SIZE_CHANGED, this._setDirtyByMode, this), h327.off(z174.ANCHOR_CHANGED, this._setDirtyByMode, this));
                }
                _unregisterOldParentEvents(f327) {
                    const g327 = this._target || f327;
                    g327 && (g327.off(z174.TRANSFORM_CHANGED, this._setDirtyByMode, this), g327.off(z174.SIZE_CHANGED, this._setDirtyByMode, this));
                }
                _setDirtyByMode() {
                    this.alignMode === d261.ALWAYS && this._recursiveDirty();
                }
                _setAlign(b327, c327) {
                    if (c327 === (this._alignFlags & b327) > 0)
                        return;
                    const d327 = (b327 & g261) > 0, e327 = this.node._uiProps.uiTransformComp;
                    c327 ? (this._alignFlags |= b327, d327 ? (this.isAlignHorizontalCenter = !1, this.isStretchWidth && (this._originalWidth = e327.width)) : (this.isAlignVerticalCenter = !1, this.isStretchHeight && (this._originalHeight = e327.height))) : (d327 ? this.isStretchWidth && (e327.width = this._originalWidth) : this.isStretchHeight && (e327.height = this._originalHeight), this._alignFlags &= ~b327);
                }
                _recursiveDirty() {
                    this._dirty || (this._dirty = !0);
                }
            }).AlignMode = d261, i125((i260 = b261).prototype, "target", [f260], Object.getOwnPropertyDescriptor(i260.prototype, "target"), i260.prototype), i125(i260.prototype, "alignMode", [g260], Object.getOwnPropertyDescriptor(i260.prototype, "alignMode"), i260.prototype), j260 = p130(i260.prototype, "_alignFlags", [j151], function () {
                return 0;
            }), k260 = p130(i260.prototype, "_target", [j151], function () {
                return null;
            }), l260 = p130(i260.prototype, "_left", [j151], function () {
                return 0;
            }), m260 = p130(i260.prototype, "_right", [j151], function () {
                return 0;
            }), n260 = p130(i260.prototype, "_top", [j151], function () {
                return 0;
            }), o260 = p130(i260.prototype, "_bottom", [j151], function () {
                return 0;
            }), p260 = p130(i260.prototype, "_horizontalCenter", [j151], function () {
                return 0;
            }), q260 = p130(i260.prototype, "_verticalCenter", [j151], function () {
                return 0;
            }), r260 = p130(i260.prototype, "_isAbsLeft", [j151], function () {
                return !0;
            }), s260 = p130(i260.prototype, "_isAbsRight", [j151], function () {
                return !0;
            }), t260 = p130(i260.prototype, "_isAbsTop", [j151], function () {
                return !0;
            }), u260 = p130(i260.prototype, "_isAbsBottom", [j151], function () {
                return !0;
            }), v260 = p130(i260.prototype, "_isAbsHorizontalCenter", [j151], function () {
                return !0;
            }), w260 = p130(i260.prototype, "_isAbsVerticalCenter", [j151], function () {
                return !0;
            }), x260 = p130(i260.prototype, "_originalWidth", [j151], function () {
                return 0;
            }), y260 = p130(i260.prototype, "_originalHeight", [j151], function () {
                return 0;
            }), z260 = p130(i260.prototype, "_alignMode", [j151], function () {
                return d261.ON_WINDOW_RESIZE;
            }), a261 = p130(i260.prototype, "_lockFlags", [j151, k151], function () {
                return 0;
            }), h260 = i260)) || h260) || h260) || h260);
            var i261, j261, k261, l261, m261, n261, o261, p261, q261, r261, s261, t261;
            g125({
                Widget: h261,
                WidgetComponent: h261
            }), s143.internal.computeInverseTransForTarget = k143, s143.internal.getReadonlyNodeSize = j143, s143.Widget = h261;
            const u261 = new a147();
            var v261;
            !function (a327) {
                a327[a327.HORIZONTAL = 0] = "HORIZONTAL", a327[a327.VERTICAL = 1] = "VERTICAL";
            }(v261 || (v261 = {})), s127(v261);
            let w261 = (i261 = e151("cc.PageViewIndicator"), j261 = g151(110), k261 = a131(q186), l261 = a131(v261), m261 = a131(x147), i261(n261 = j261(((t261 = class extends a165 {
                constructor(...z326) {
                    super(...z326), this.spacing = p261 && p261(), this._spriteFrame = q261 && q261(), this._direction = r261 && r261(), this._cellSize = s261 && s261(), this._layout = null, this._pageView = null, this._indicators = [];
                }
                get spriteFrame() {
                    return this._spriteFrame;
                }
                set spriteFrame(y326) {
                    this._spriteFrame !== y326 && (this._spriteFrame = y326);
                }
                get direction() {
                    return this._direction;
                }
                set direction(x326) {
                    this._direction !== x326 && (this._direction = x326);
                }
                get cellSize() {
                    return this._cellSize;
                }
                set cellSize(w326) {
                    this._cellSize !== w326 && (this._cellSize = w326);
                }
                onLoad() {
                    this._updateLayout();
                }
                setPageView(v326) {
                    this._pageView = v326, this._refresh();
                }
                _updateLayout() {
                    this._layout = this.getComponent(z255), this._layout || (this._layout = this.addComponent(z255));
                    const u326 = this._layout;
                    this.direction === v261.HORIZONTAL ? (u326.type = z255.Type.HORIZONTAL, u326.spacingX = this.spacing) : this.direction === v261.VERTICAL && (u326.type = z255.Type.VERTICAL, u326.spacingY = this.spacing), u326.resizeMode = z255.ResizeMode.CONTAINER;
                }
                _createIndicator() {
                    const s326 = new h175();
                    s326.layer = this.node.layer;
                    const t326 = s326.addComponent(w196);
                    return t326.spriteFrame = this.spriteFrame, t326.sizeMode = w196.SizeMode.CUSTOM, s326.parent = this.node, s326._uiProps.uiTransformComp.setContentSize(this._cellSize), s326;
                }
                _changedState() {
                    const m326 = this._indicators;
                    if (0 === m326.length || !this._pageView)
                        return;
                    const n326 = this._pageView.curPageIdx;
                    if (!(n326 >= m326.length)) {
                        for (let p326 = 0; p326 < m326.length; ++p326) {
                            const q326 = m326[p326];
                            if (!q326._uiProps.uiComp)
                                continue;
                            const r326 = q326._uiProps.uiComp;
                            u261.set(r326.color), u261.a = 127.5, r326.color = u261;
                        }
                        if (m326[n326]._uiProps.uiComp) {
                            const o326 = m326[n326]._uiProps.uiComp;
                            u261.set(o326.color), u261.a = 255, o326.color = u261;
                        }
                    }
                }
                _refresh() {
                    if (!this._pageView)
                        return;
                    const i326 = this._indicators, j326 = this._pageView.getPages();
                    if (j326.length === i326.length)
                        return;
                    let k326 = 0;
                    if (j326.length > i326.length)
                        for (k326 = 0; k326 < j326.length; ++k326)
                            i326[k326] || (i326[k326] = this._createIndicator());
                    else
                        for (k326 = i326.length - j326.length; k326 > 0; --k326) {
                            const l326 = i326[k326 - 1];
                            this.node.removeChild(l326), i326.splice(k326 - 1, 1);
                        }
                    this._layout && this._layout.enabledInHierarchy && this._layout.updateLayout(), this._changedState();
                }
            }).Direction = v261, i125((o261 = t261).prototype, "spriteFrame", [k261], Object.getOwnPropertyDescriptor(o261.prototype, "spriteFrame"), o261.prototype), i125(o261.prototype, "direction", [l261], Object.getOwnPropertyDescriptor(o261.prototype, "direction"), o261.prototype), i125(o261.prototype, "cellSize", [m261], Object.getOwnPropertyDescriptor(o261.prototype, "cellSize"), o261.prototype), p261 = p130(o261.prototype, "spacing", [j151], function () {
                return 0;
            }), q261 = p130(o261.prototype, "_spriteFrame", [j151], function () {
                return null;
            }), r261 = p130(o261.prototype, "_direction", [j151], function () {
                return v261.HORIZONTAL;
            }), s261 = p130(o261.prototype, "_cellSize", [j151], function () {
                return new x147(20, 20);
            }), n261 = o261)) || n261) || n261);
            var x261, y261, z261, a262, b262, c262, d262, e262, f262, g262, h262, i262, j262, k262, l262, m262, n262, o262, p262, q262, r262, s262, t262, u262;
            g125({
                PageViewIndicator: w261,
                PageViewIndicatorComponent: w261
            }), s143.PageViewIndicator = w261;
            const v262 = new s147();
            var w262, x262, y262;
            !function (h326) {
                h326[h326.Unified = 0] = "Unified", h326[h326.Free = 1] = "Free";
            }(w262 || (w262 = {})), s127(w262), function (g326) {
                g326[g326.Horizontal = 0] = "Horizontal", g326[g326.Vertical = 1] = "Vertical";
            }(x262 || (x262 = {})), s127(x262), function (f326) {
                f326.PAGE_TURNING = "page-turning";
            }(y262 || (y262 = {}));
            let z262 = (x261 = e151("cc.PageView"), y261 = g151(110), z261 = a131(w262), a262 = a131(x262), b262 = a131(w261), c262 = a131(j257), d262 = a131(j257), e262 = a131([p164]), f262 = a131([p164]), x261(g262 = y261(((u262 = class t extends q258 {
                constructor(...e326) {
                    super(...e326), this.autoPageTurningThreshold = i262 && i262(), this.horizontal = j262 && j262(), this.vertical = k262 && k262(), this.cancelInnerEvents = l262 && l262(), this.scrollEvents = m262 && m262(), this.pageTurningSpeed = n262 && n262(), this.pageEvents = o262 && o262(), this._sizeMode = p262 && p262(), this._direction = q262 && q262(), this._scrollThreshold = r262 && r262(), this._pageTurningEventTiming = s262 && s262(), this._indicator = t262 && t262(), this._curPageIdx = 0, this._lastPageIdx = 0, this._pages = [], this._initContentPos = new w146(), this._scrollCenterOffsetX = [], this._scrollCenterOffsetY = [], this._touchBeganPosition = new s147(), this._touchEndPosition = new s147();
                }
                get sizeMode() {
                    return this._sizeMode;
                }
                set sizeMode(d326) {
                    this._sizeMode !== d326 && (this._sizeMode = d326, this._syncSizeMode());
                }
                get direction() {
                    return this._direction;
                }
                set direction(c326) {
                    this._direction !== c326 && (this._direction = c326, this._syncScrollDirection());
                }
                get scrollThreshold() {
                    return this._scrollThreshold;
                }
                set scrollThreshold(b326) {
                    this._scrollThreshold !== b326 && (this._scrollThreshold = b326);
                }
                get pageTurningEventTiming() {
                    return this._pageTurningEventTiming;
                }
                set pageTurningEventTiming(a326) {
                    this._pageTurningEventTiming !== a326 && (this._pageTurningEventTiming = a326);
                }
                get indicator() {
                    return this._indicator;
                }
                set indicator(z325) {
                    this._indicator !== z325 && (this._indicator = z325, this.indicator && this.indicator.setPageView(this));
                }
                get curPageIdx() {
                    return this._curPageIdx;
                }
                get verticalScrollBar() {
                    return super.verticalScrollBar;
                }
                set verticalScrollBar(y325) {
                    super.verticalScrollBar = y325;
                }
                get horizontalScrollBar() {
                    return super.horizontalScrollBar;
                }
                set horizontalScrollBar(x325) {
                    super.horizontalScrollBar = x325;
                }
                onEnable() {
                    super.onEnable(), this.node.on(z174.SIZE_CHANGED, this._updateAllPagesSize, this), this.node.on(t.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
                }
                onDisable() {
                    super.onDisable(), this.node.off(z174.SIZE_CHANGED, this._updateAllPagesSize, this), this.node.off(t.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
                }
                onLoad() {
                    this._initPages(), this.indicator && this.indicator.setPageView(this);
                }
                getCurrentPageIndex() {
                    return this._curPageIdx;
                }
                setCurrentPageIndex(w325) {
                    this.scrollToPage(w325, 1);
                }
                getPages() {
                    return this._pages;
                }
                addPage(v325) {
                    v325 && -1 === this._pages.indexOf(v325) && this.content && (v325._uiProps.uiTransformComp ? (this.content.addChild(v325), this._pages.push(v325), this._updatePageView()) : x125(4301));
                }
                insertPage(t325, u325) {
                    if (!(u325 < 0) && t325 && -1 === this._pages.indexOf(t325) && this.content)
                        if (u325 >= this._pages.length)
                            this.addPage(t325);
                        else {
                            if (!t325._uiProps.uiTransformComp)
                                return void x125(4301);
                            this._pages.splice(u325, 0, t325), this.content.insertChild(t325, u325), this._updatePageView();
                        }
                }
                removePage(r325) {
                    if (!r325 || !this.content)
                        return;
                    const s325 = this._pages.indexOf(r325);
                    -1 !== s325 ? this.removePageAtIndex(s325) : y125(4300, r325.name);
                }
                removePageAtIndex(o325) {
                    const p325 = this._pages;
                    if (o325 < 0 || o325 >= p325.length)
                        return;
                    const q325 = p325[o325];
                    q325 && this.content && (this.content.removeChild(q325), p325.splice(o325, 1), this._updatePageView());
                }
                removeAllPages() {
                    if (!this.content)
                        return;
                    const l325 = this._pages;
                    for (let m325 = 0, n325 = l325.length; m325 < n325; m325++)
                        this.content.removeChild(l325[m325]);
                    this._pages.length = 0, this._updatePageView();
                }
                scrollToPage(j325, k325 = .3) {
                    j325 < 0 || j325 >= this._pages.length || (this._curPageIdx = j325, this.scrollToOffset(this._moveOffsetValue(j325), k325, !0), this.indicator && this.indicator._changedState());
                }
                getScrollEndedEventTiming() {
                    return this.pageTurningEventTiming;
                }
                _updatePageView() {
                    if (!this.content)
                        return;
                    const e325 = this.content.getComponent(z255);
                    e325 && e325.enabled && e325.updateLayout();
                    const f325 = this._pages.length;
                    this._curPageIdx >= f325 && (this._curPageIdx = 0 === f325 ? 0 : f325 - 1, this._lastPageIdx = this._curPageIdx);
                    const g325 = this._initContentPos;
                    for (let h325 = 0; h325 < f325; ++h325) {
                        const i325 = this._pages[h325].position;
                        this.direction === x262.Horizontal ? this._scrollCenterOffsetX[h325] = Math.abs(g325.x + i325.x) : this._scrollCenterOffsetY[h325] = Math.abs(g325.y + i325.y);
                    }
                    this.indicator && this.indicator._refresh();
                }
                _updateAllPagesSize() {
                    const z324 = this.view;
                    if (!this.content || !z324)
                        return;
                    if (this._sizeMode !== w262.Unified)
                        return;
                    const a325 = this._pages, b325 = z324.contentSize;
                    for (let c325 = 0, d325 = a325.length; c325 < d325; c325++)
                        a325[c325]._uiProps.uiTransformComp.setContentSize(b325);
                }
                _handleReleaseLogic() {
                    this._autoScrollToPage(), this._scrolling && (this._scrolling = !1, this._autoScrolling || this._dispatchEvent(t.EventType.SCROLL_ENDED));
                }
                _onTouchBegan(x324, y324) {
                    x324.touch.getUILocation(v262), s147.set(this._touchBeganPosition, v262.x, v262.y), super._onTouchBegan(x324, y324);
                }
                _onTouchMoved(v324, w324) {
                    super._onTouchMoved(v324, w324);
                }
                _onTouchEnded(t324, u324) {
                    t324.touch.getUILocation(v262), s147.set(this._touchEndPosition, v262.x, v262.y), super._onTouchEnded(t324, u324);
                }
                _onTouchCancelled(r324, s324) {
                    r324.touch.getUILocation(v262), s147.set(this._touchEndPosition, v262.x, v262.y), super._onTouchCancelled(r324, s324);
                }
                _onMouseWheel() { }
                _syncScrollDirection() {
                    this.horizontal = this.direction === x262.Horizontal, this.vertical = this.direction === x262.Vertical;
                }
                _syncSizeMode() {
                    const n324 = this.view;
                    if (!this.content || !n324)
                        return;
                    const o324 = this.content.getComponent(z255);
                    if (o324) {
                        if (this._sizeMode === w262.Free && this._pages.length > 0) {
                            const p324 = this._pages[0]._uiProps.uiTransformComp, q324 = this._pages[this._pages.length - 1]._uiProps.uiTransformComp;
                            this.direction === x262.Horizontal ? (o324.paddingLeft = (n324.width - p324.width) / 2, o324.paddingRight = (n324.width - q324.width) / 2) : this.direction === x262.Vertical && (o324.paddingTop = (n324.height - p324.height) / 2, o324.paddingBottom = (n324.height - q324.height) / 2);
                        }
                        o324.updateLayout();
                    }
                }
                _initPages() {
                    if (!this.content)
                        return;
                    this._initContentPos = this.content.position;
                    const k324 = this.content.children;
                    for (let l324 = 0; l324 < k324.length; ++l324) {
                        const m324 = k324[l324];
                        this._pages.indexOf(m324) >= 0 || this._pages.push(m324);
                    }
                    this._syncScrollDirection(), this._syncSizeMode(), this._updatePageView();
                }
                _dispatchPageTurningEvent() {
                    this._lastPageIdx !== this._curPageIdx && (this._lastPageIdx = this._curPageIdx, p164.emitEvents(this.pageEvents, this, y262.PAGE_TURNING), this.node.emit(y262.PAGE_TURNING, this));
                }
                _isQuicklyScrollable(j324) {
                    if (this.direction === x262.Horizontal) {
                        if (Math.abs(j324.x) > this.autoPageTurningThreshold)
                            return !0;
                    }
                    else if (this.direction === x262.Vertical && Math.abs(j324.y) > this.autoPageTurningThreshold)
                        return !0;
                    return !1;
                }
                _moveOffsetValue(g324) {
                    const h324 = new s147();
                    if (this._sizeMode === w262.Free)
                        this.direction === x262.Horizontal ? h324.x = this._scrollCenterOffsetX[g324] : this.direction === x262.Vertical && (h324.y = this._scrollCenterOffsetY[g324]);
                    else {
                        const i324 = this.view;
                        if (!i324)
                            return h324;
                        this.direction === x262.Horizontal ? h324.x = g324 * i324.width : this.direction === x262.Vertical && (h324.y = g324 * i324.height);
                    }
                    return h324;
                }
                _getDragDirection(f324) {
                    return this._direction === x262.Horizontal ? 0 === f324.x ? 0 : f324.x > 0 ? 1 : -1 : 0 === f324.y ? 0 : f324.y < 0 ? 1 : -1;
                }
                _isScrollable(z323, a324, b324) {
                    if (this._sizeMode === w262.Free) {
                        let d324 = 0, e324 = 0;
                        if (this.direction === x262.Horizontal)
                            return d324 = this._scrollCenterOffsetX[a324], e324 = this._scrollCenterOffsetX[b324], Math.abs(z323.x) >= Math.abs(d324 - e324) * this.scrollThreshold;
                        if (this.direction === x262.Vertical)
                            return d324 = this._scrollCenterOffsetY[a324], e324 = this._scrollCenterOffsetY[b324], Math.abs(z323.y) >= Math.abs(d324 - e324) * this.scrollThreshold;
                    }
                    else {
                        const c324 = this.view;
                        if (!c324)
                            return !1;
                        if (this.direction === x262.Horizontal)
                            return Math.abs(z323.x) >= c324.width * this.scrollThreshold;
                        if (this.direction === x262.Vertical)
                            return Math.abs(z323.y) >= c324.height * this.scrollThreshold;
                    }
                    return !1;
                }
                _autoScrollToPage() {
                    if (this._startBounceBackIfNeeded()) {
                        const y323 = this._getHowMuchOutOfBoundary();
                        this._clampDelta(y323), (y323.x > 0 || y323.y < 0) && (this._curPageIdx = 0 === this._pages.length ? 0 : this._pages.length - 1), (y323.x < 0 || y323.y > 0) && (this._curPageIdx = 0), this.indicator && this.indicator._changedState();
                    }
                    else {
                        const t323 = new s147();
                        s147.subtract(t323, this._touchBeganPosition, this._touchEndPosition);
                        const u323 = this._curPageIdx, v323 = u323 + this._getDragDirection(t323), w323 = this.pageTurningSpeed * Math.abs(u323 - v323);
                        if (v323 < this._pages.length) {
                            if (this._isScrollable(t323, u323, v323))
                                return void this.scrollToPage(v323, w323);
                            {
                                const x323 = this._calculateTouchMoveVelocity();
                                if (this._isQuicklyScrollable(x323))
                                    return void this.scrollToPage(v323, w323);
                            }
                        }
                        this.scrollToPage(u323, w323);
                    }
                }
            }).SizeMode = w262, u262.Direction = x262, u262.EventType = i143(y262, o258), i125((h262 = u262).prototype, "sizeMode", [z261], Object.getOwnPropertyDescriptor(h262.prototype, "sizeMode"), h262.prototype), i125(h262.prototype, "direction", [a262], Object.getOwnPropertyDescriptor(h262.prototype, "direction"), h262.prototype), i125(h262.prototype, "indicator", [b262], Object.getOwnPropertyDescriptor(h262.prototype, "indicator"), h262.prototype), i262 = p130(h262.prototype, "autoPageTurningThreshold", [j151], function () {
                return 100;
            }), i125(h262.prototype, "verticalScrollBar", [c262, h152], Object.getOwnPropertyDescriptor(h262.prototype, "verticalScrollBar"), h262.prototype), i125(h262.prototype, "horizontalScrollBar", [d262, h152], Object.getOwnPropertyDescriptor(h262.prototype, "horizontalScrollBar"), h262.prototype), j262 = p130(h262.prototype, "horizontal", [h152, j151], function () {
                return !0;
            }), k262 = p130(h262.prototype, "vertical", [h152, j151], function () {
                return !0;
            }), l262 = p130(h262.prototype, "cancelInnerEvents", [h152, j151], function () {
                return !0;
            }), m262 = p130(h262.prototype, "scrollEvents", [e262, j151, h152], function () {
                return [];
            }), n262 = p130(h262.prototype, "pageTurningSpeed", [j151], function () {
                return .3;
            }), o262 = p130(h262.prototype, "pageEvents", [f262, j151], function () {
                return [];
            }), p262 = p130(h262.prototype, "_sizeMode", [j151], function () {
                return w262.Unified;
            }), q262 = p130(h262.prototype, "_direction", [j151], function () {
                return x262.Horizontal;
            }), r262 = p130(h262.prototype, "_scrollThreshold", [j151], function () {
                return .5;
            }), s262 = p130(h262.prototype, "_pageTurningEventTiming", [j151], function () {
                return .1;
            }), t262 = p130(h262.prototype, "_indicator", [j151], function () {
                return null;
            }), g262 = h262)) || g262) || g262);
            g125({
                PageView: z262,
                PageViewComponent: z262
            }), s143.PageView = z262;
            const a263 = new w146(), b263 = new s147(), c263 = new s147(), d263 = new s147(1, 1), e263 = new s147(), f263 = new s147();
            function l143(o322, p322) {
                if (p322._hadAlignOnce)
                    return;
                p322.alignMode === d261.ONCE && (p322._hadAlignOnce = !0);
                const q322 = p322.target;
                let r322;
                const s322 = c263, t322 = d263;
                q322 ? (r322 = q322, k143(o322, r322, s322, t322)) : r322 = o322.parent;
                const u322 = j143(r322), v322 = r322 instanceof y181 || !r322.getComponent(d190), w322 = v322 ? b263 : r322.getComponent(d190).anchorPoint, x322 = v322;
                o322.getPosition(a263);
                const y322 = o322._uiProps.uiTransformComp;
                let z322 = a263.x, a323 = a263.y;
                const b323 = y322.anchorPoint, c323 = o322.getScale();
                if (p322.alignFlags & e261.HORIZONTAL) {
                    let l323 = 0, m323 = 0;
                    const n323 = u322.width;
                    x322 ? (l323 = j157.left.x, m323 = j157.right.x) : (l323 = -w322.x * n323, m323 = l323 + n323), l323 += p322.isAbsoluteLeft ? p322.left : p322.left * n323, m323 -= p322.isAbsoluteRight ? p322.right : p322.right * n323, q322 && (l323 += s322.x, l323 *= t322.x, m323 += s322.x, m323 *= t322.x);
                    let o323 = 0, p323 = b323.x, q323 = c323.x;
                    if (q323 < 0 && (p323 = 1 - p323, q323 = -q323), p322.isStretchWidth)
                        o323 = m323 - l323, 0 !== q323 && (y322.width = o323 / q323), z322 = l323 + p323 * o323;
                    else {
                        if (o323 = y322.width * q323, p322.isAlignHorizontalCenter) {
                            let r323 = p322.isAbsoluteHorizontalCenter ? p322.horizontalCenter : p322.horizontalCenter * n323, s323 = (.5 - w322.x) * u322.width;
                            q322 && (r323 *= t322.x, s323 += s322.x, s323 *= t322.x), z322 = s323 + (p323 - .5) * o323 + r323;
                        }
                        else
                            z322 = p322.isAlignLeft ? l323 + p323 * o323 : m323 + (p323 - 1) * o323;
                        w128(q323, 0, q146) ? o323 = y322.width : o323 /= q323;
                    }
                    p322._lastSize.width = o323;
                }
                if (p322.alignFlags & e261.VERTICAL) {
                    let d323 = 0, e323 = 0;
                    const f323 = u322.height;
                    x322 ? (e323 = j157.bottom.y, d323 = j157.top.y) : (e323 = -w322.y * f323, d323 = e323 + f323), e323 += p322.isAbsoluteBottom ? p322.bottom : p322.bottom * f323, d323 -= p322.isAbsoluteTop ? p322.top : p322.top * f323, q322 && (e323 += s322.y, e323 *= t322.y, d323 += s322.y, d323 *= t322.y);
                    let g323 = 0, h323 = b323.y, i323 = c323.y;
                    if (i323 < 0 && (h323 = 1 - h323, i323 = -i323), p322.isStretchHeight)
                        g323 = d323 - e323, 0 !== i323 && (y322.height = g323 / i323), a323 = e323 + h323 * g323;
                    else {
                        if (g323 = y322.height * i323, p322.isAlignVerticalCenter) {
                            let j323 = p322.isAbsoluteVerticalCenter ? p322.verticalCenter : p322.verticalCenter * f323, k323 = (.5 - w322.y) * u322.height;
                            q322 && (j323 *= t322.y, k323 += s322.y, k323 *= t322.y), a323 = k323 + (h323 - .5) * g323 + j323;
                        }
                        else
                            a323 = p322.isAlignBottom ? e323 + h323 * g323 : d323 + (h323 - 1) * g323;
                        w128(i323, 0, q146) ? g323 = y322.height : g323 /= i323;
                    }
                    p322._lastSize.height = g323;
                }
                o322.setPosition(z322, a323, a263.z), w146.set(p322._lastPos, z322, a323, a263.z);
            }
            function m143(k322) {
                const l322 = k322.getComponent(h261);
                if (l322 && l322.enabled) {
                    if (!s143.isValid(k322, !0))
                        return;
                    g263.push(l322);
                }
                const m322 = k322.children;
                for (const n322 of m322)
                    n322.active && m143(n322);
            }
            function n143() {
                const h322 = t185.getScene();
                if (h322) {
                    h263.isAligning = !0, h263._nodesOrderDirty && (g263.length = 0, m143(h322), h263._nodesOrderDirty = !1);
                    let i322 = null;
                    const j322 = h263._activeWidgetsIterator;
                    for (j322.i = 0; j322.i < g263.length; ++j322.i)
                        i322 = g263[j322.i], i322._dirty && (l143(i322.node, i322), i322._dirty = !1);
                    h263.isAligning = !1;
                }
            }
            const g263 = [], h263 = g125("widgetManager", s143._widgetManager = {
                isAligning: !1,
                _nodesOrderDirty: !1,
                _activeWidgetsIterator: new k145(g263),
                animationState: null,
                init() {
                    t185.on(s185.EVENT_AFTER_SCENE_LAUNCH, n143), t185.on(s185.EVENT_AFTER_UPDATE, n143), s199.instance.on("design-resolution-changed", this.onResized, this);
                    {
                        const g322 = this.onResized.bind(this);
                        s199.instance.on("canvas-resize", g322), g157.on("window-resize", g322);
                    }
                },
                add(f322) {
                    this._nodesOrderDirty = !0;
                },
                remove(e322) {
                    this._activeWidgetsIterator.remove(e322);
                },
                onResized() {
                    const d322 = t185.getScene();
                    d322 && this.refreshWidgetOnResized(d322);
                },
                refreshWidgetOnResized(z321) {
                    const a322 = h175.isNode(z321) && z321.getComponent(h261);
                    a322 && a322.enabled && (a322.alignMode === d261.ON_WINDOW_RESIZE || a322.alignMode === d261.ALWAYS) && a322.setDirty();
                    const b322 = z321.children;
                    for (const c322 of b322)
                        this.refreshWidgetOnResized(c322);
                },
                updateOffsetsToStayPut(d321, e321) {
                    function f321(x321, y321) {
                        return Math.abs(x321 - y321) > 1e-10 ? y321 : x321;
                    }
                    const g321 = d321.node;
                    let h321 = g321.parent;
                    if (h321) {
                        const i321 = e263;
                        i321.set(0, 0);
                        const j321 = f263;
                        if (j321.set(1, 1), d321.target && (h321 = d321.target, k143(g321, h321, i321, j321)), !e321)
                            return;
                        const k321 = h321._uiProps && h321._uiProps.uiTransformComp, l321 = k321 ? k321.anchorPoint : b263, m321 = g321._uiProps.uiTransformComp, n321 = j143(h321), o321 = m321.anchorPoint, p321 = g321.getPosition(), q321 = e261, r321 = g321.getScale();
                        let s321 = 0;
                        if (e321 & q321.LEFT) {
                            let w321 = -l321.x * n321.width;
                            w321 += i321.x, w321 *= j321.x, s321 = p321.x - o321.x * m321.width * Math.abs(r321.x) - w321, d321.isAbsoluteLeft || (s321 /= n321.width), s321 /= j321.x, d321.left = f321(d321.left, s321);
                        }
                        if (e321 & q321.RIGHT) {
                            let v321 = (1 - l321.x) * n321.width;
                            v321 += i321.x, s321 = (v321 *= j321.x) - (p321.x + (1 - o321.x) * m321.width * Math.abs(r321.x)), d321.isAbsoluteRight || (s321 /= n321.width), s321 /= j321.x, d321.right = f321(d321.right, s321);
                        }
                        if (e321 & q321.TOP) {
                            let u321 = (1 - l321.y) * n321.height;
                            u321 += i321.y, s321 = (u321 *= j321.y) - (p321.y + (1 - o321.y) * m321.height * Math.abs(r321.y)), d321.isAbsoluteTop || (s321 /= n321.height), s321 /= j321.y, d321.top = f321(d321.top, s321);
                        }
                        if (e321 & q321.BOT) {
                            let t321 = -l321.y * n321.height;
                            t321 += i321.y, t321 *= j321.y, s321 = p321.y - o321.y * m321.height * Math.abs(r321.y) - t321, d321.isAbsoluteBottom || (s321 /= n321.height), s321 /= j321.y, d321.bottom = f321(d321.bottom, s321);
                        }
                    }
                },
                updateAlignment: function t(a321) {
                    const b321 = a321.parent;
                    b321 && h175.isNode(b321) && t(b321);
                    const c321 = a321.getComponent(h261);
                    c321 && b321 && l143(a321, c321);
                },
                AlignMode: d261,
                AlignFlags: e261
            });
            var i263;
            t185.on(s185.EVENT_INIT, () => {
                h263.init();
            });
            let j263 = e151("cc.SafeArea")(i263 = g151(110)(i263 = f151(h261)(i263 = class extends a165 {
                onEnable() {
                    this.updateArea(), g157.on("window-resize", this.updateArea, this), g157.on("orientation-change", this.updateArea, this);
                }
                onDisable() {
                    g157.off("window-resize", this.updateArea, this), g157.off("orientation-change", this.updateArea, this);
                }
                updateArea() {
                    const p320 = this.node.getComponent(h261), q320 = this.node.getComponent(d190);
                    if (!p320 || !q320)
                        return;
                    p320.updateAlignment();
                    const r320 = this.node.position.clone(), s320 = q320.anchorPoint.clone();
                    p320.isAlignTop = p320.isAlignBottom = p320.isAlignLeft = p320.isAlignRight = !0;
                    const t320 = w199.getVisibleSize(), u320 = t320.width, v320 = t320.height, w320 = i157.getSafeAreaRect();
                    p320.top = v320 - w320.y - w320.height, p320.bottom = w320.y, p320.left = w320.x, p320.right = u320 - w320.x - w320.width, p320.updateAlignment();
                    const x320 = this.node.position.clone(), y320 = s320.x - (x320.x - r320.x) / q320.width, z320 = s320.y - (x320.y - r320.y) / q320.height;
                    q320.setAnchorPoint(y320, z320), h263.add(p320);
                }
            }) || i263) || i263) || i263;
            var k263, l263, m263, n263, o263, p263, q263, r263, s263, t263, u263, v263;
            g125({
                SafeArea: j263,
                SafeAreaComponent: j263
            }), s143.SafeArea = j263;
            let w263 = (k263 = e151("cc.UICoordinateTracker"), l263 = g151(110), m263 = a131(h175), n263 = a131(p199), o263 = a131([p164]), k263(p263 = l263((i125((q263 = class extends a165 {
                constructor(...o320) {
                    super(...o320), this.syncEvents = r263 && r263(), this._target = s263 && s263(), this._camera = t263 && t263(), this._useScale = u263 && u263(), this._distance = v263 && v263(), this._transformPos = new w146(), this._viewPos = new w146(), this._canMove = !0, this._lastWPos = new w146(), this._lastCameraPos = new w146();
                }
                get target() {
                    return this._target;
                }
                set target(n320) {
                    this._target !== n320 && (this._target = n320, this._checkCanMove());
                }
                get camera() {
                    return this._camera;
                }
                set camera(m320) {
                    this._camera !== m320 && (this._camera = m320, this._checkCanMove());
                }
                get useScale() {
                    return this._useScale;
                }
                set useScale(l320) {
                    this._useScale !== l320 && (this._useScale = l320);
                }
                get distance() {
                    return this._distance;
                }
                set distance(k320) {
                    this._distance !== k320 && (this._distance = k320);
                }
                onEnable() {
                    this._checkCanMove();
                }
                update() {
                    const h320 = this.node.worldPosition, i320 = this._camera;
                    if (this._canMove && i320 && i320.camera && (!this._lastWPos.equals(h320) || !this._lastCameraPos.equals(i320.node.worldPosition)) && (this._lastWPos.set(h320), this._lastCameraPos.set(i320.node.worldPosition), i320.camera.update(), i320.convertToUINode(h320, this._target, this._transformPos), this._useScale && w146.transformMat4(this._viewPos, this.node.worldPosition, i320.camera.matView), this.syncEvents.length > 0)) {
                        const j320 = this._distance / Math.abs(this._viewPos.z);
                        p164.emitEvents(this.syncEvents, this._transformPos, j320);
                    }
                }
                _checkCanMove() {
                    this._canMove = !(!this._camera || !this._target);
                }
            }).prototype, "target", [m263], Object.getOwnPropertyDescriptor(q263.prototype, "target"), q263.prototype), i125(q263.prototype, "camera", [n263], Object.getOwnPropertyDescriptor(q263.prototype, "camera"), q263.prototype), r263 = p130(q263.prototype, "syncEvents", [o263, j151], function () {
                return [];
            }), s263 = p130(q263.prototype, "_target", [j151], function () {
                return null;
            }), t263 = p130(q263.prototype, "_camera", [j151], function () {
                return null;
            }), u263 = p130(q263.prototype, "_useScale", [j151], function () {
                return !0;
            }), v263 = p130(q263.prototype, "_distance", [j151], function () {
                return 1;
            }), p263 = q263)) || p263) || p263);
            var x263;
            g125({
                UICoordinateTracker: w263,
                UICoordinateTrackerComponent: w263
            });
            const y263 = [z174.TOUCH_START, z174.TOUCH_END, z174.TOUCH_MOVE, z174.MOUSE_DOWN, z174.MOUSE_MOVE, z174.MOUSE_UP, z174.MOUSE_ENTER, z174.MOUSE_LEAVE, z174.MOUSE_WHEEL];
            function o143(g320) {
                g320.propagationStopped = !0;
            }
            let z263 = e151("cc.BlockInputEvents")(x263 = class extends a165 {
                onEnable() {
                    for (let f320 = 0; f320 < y263.length; f320++)
                        this.node.on(y263[f320], o143, this);
                }
                onDisable() {
                    for (let e320 = 0; e320 < y263.length; e320++)
                        this.node.off(y263[e320], o143, this);
                }
            }) || x263;
            var a264, b264, c264, d264;
            g125({
                BlockInputEvents: z263,
                BlockInputEventsComponent: z263
            });
            let e264 = g125("SubContextView", e151("cc.SubContextView")(a264 = g151(110)(a264 = f151(d190)((b264 = class extends a165 {
                get designResolutionSize() {
                    return this._designResolutionSize;
                }
                set designResolutionSize(d320) { }
                get fps() {
                    return this._fps;
                }
                set fps(c320) {
                    this._fps !== c320 && (this._fps = c320, this._updateInterval = 1e3 / c320);
                }
                constructor() {
                    super(), this._fps = c264 && c264(), this._sprite = void 0, this._imageAsset = void 0, this._texture = void 0, this._updatedTime = 0, this._updateInterval = 0, this._openDataContext = void 0, this._content = void 0, this._designResolutionSize = d264 && d264(), this._content = new h175("content"), this._content.hideFlags |= m152.Flags.DontSave | m152.Flags.HideInHierarchy, this._sprite = null, this._imageAsset = new x163(), this._openDataContext = null, this._updatedTime = performance.now(), this._texture = new j166();
                }
                onLoad() {
                    w162.getOpenDataContext ? (this._updateInterval = 1e3 / this._fps, this._openDataContext = w162.getOpenDataContext(), this._initSharedCanvas(), this._initContentNode(), this._updateSubContextView(), this._updateContentLayer()) : this.enabled = !1;
                }
                onEnable() {
                    this._registerNodeEvent();
                }
                onDisable() {
                    this._unregisterNodeEvent();
                }
                _initSharedCanvas() {
                    if (this._openDataContext) {
                        const z319 = this._openDataContext.canvas;
                        let a320 = this._designResolutionSize.width, b320 = this._designResolutionSize.height;
                        z319.width = a320, z319.height = b320;
                    }
                }
                _initContentNode() {
                    if (this._openDataContext) {
                        const w319 = this._openDataContext.canvas, x319 = this._imageAsset;
                        if (x319.reset(w319), this._texture.image = x319, this._texture.create(w319.width, w319.height), this._sprite = this._content.getComponent(w196), this._sprite || (this._sprite = this._content.addComponent(w196)), this._sprite.spriteFrame)
                            this._sprite.spriteFrame.texture = this._texture;
                        else {
                            const y319 = new q186();
                            y319.texture = this._texture, this._sprite.spriteFrame = y319;
                        }
                        this._content.parent = this.node;
                    }
                }
                _updateSubContextView() {
                    if (!this._openDataContext)
                        return;
                    const j319 = this.node.getComponent(d190), k319 = this._content.getComponent(d190), l319 = j319.width / k319.width, m319 = j319.height / k319.height, n319 = l319 > m319 ? m319 : l319;
                    k319.width *= n319, k319.height *= n319;
                    const o319 = w199.getViewportRect(), p319 = k319.getBoundingBoxToWorld(), q319 = w199.getVisibleSize(), r319 = g157.devicePixelRatio, s319 = (o319.width * (p319.x / q319.width) + o319.x) / r319, t319 = (o319.height * (p319.y / q319.height) + o319.y) / r319, u319 = o319.width * (p319.width / q319.width) / r319, v319 = o319.height * (p319.height / q319.height) / r319;
                    this._openDataContext.postMessage({
                        fromEngine: !0,
                        type: "engine",
                        event: "viewport",
                        x: s319,
                        y: t319,
                        width: u319,
                        height: v319
                    });
                }
                _updateSubContextTexture() {
                    const h319 = this._imageAsset;
                    if (!h319 || !this._openDataContext)
                        return;
                    if (h319.width <= 0 || h319.height <= 0)
                        return;
                    const i319 = this._openDataContext.canvas;
                    h319.reset(i319), (i319.width > h319.width || i319.height > h319.height) && this._texture.create(i319.width, i319.height), this._texture.uploadData(i319);
                }
                _registerNodeEvent() {
                    this.node.on(z174.TRANSFORM_CHANGED, this._updateSubContextView, this), this.node.on(z174.SIZE_CHANGED, this._updateSubContextView, this), this.node.on(z174.LAYER_CHANGED, this._updateContentLayer, this);
                }
                _unregisterNodeEvent() {
                    this.node.off(z174.TRANSFORM_CHANGED, this._updateSubContextView, this), this.node.off(z174.SIZE_CHANGED, this._updateSubContextView, this), this.node.off(z174.LAYER_CHANGED, this._updateContentLayer, this);
                }
                _updateContentLayer() {
                    this._content.layer = this.node.layer;
                }
                update(g319) {
                    void 0 !== g319 ? performance.now() - this._updatedTime >= this._updateInterval && (this._updatedTime += this._updateInterval, this._updateSubContextTexture()) : this._updateSubContextTexture();
                }
                onDestroy() {
                    this._content.destroy(), this._texture.destroy(), this._sprite && this._sprite.destroy(), this._imageAsset.destroy(), this._openDataContext = null;
                }
            }, c264 = p130(b264.prototype, "_fps", [j151], function () {
                return 60;
            }), d264 = p130(b264.prototype, "_designResolutionSize", [j151], function () {
                return new x147(640, 960);
            }), a264 = b264)) || a264) || a264) || a264);
            var f264;
            s143.SubContextView = e264, e126({
                ButtonComponent: {
                    newName: "Button",
                    since: "1.2.0",
                    removed: !1
                },
                EditBoxComponent: {
                    newName: "EditBox",
                    since: "1.2.0",
                    removed: !1
                },
                LayoutComponent: {
                    newName: "Layout",
                    since: "1.2.0",
                    removed: !1
                },
                ProgressBarComponent: {
                    newName: "ProgressBar",
                    since: "1.2.0",
                    removed: !1
                },
                ScrollViewComponent: {
                    newName: "ScrollView",
                    since: "1.2.0",
                    removed: !1
                },
                ScrollBarComponent: {
                    newName: "ScrollBar",
                    since: "1.2.0",
                    removed: !1
                },
                SliderComponent: {
                    newName: "Slider",
                    since: "1.2.0",
                    removed: !1
                },
                ToggleComponent: {
                    newName: "Toggle",
                    since: "1.2.0",
                    removed: !1
                },
                ToggleContainerComponent: {
                    newName: "ToggleContainer",
                    since: "1.2.0",
                    removed: !1
                },
                WidgetComponent: {
                    newName: "Widget",
                    since: "1.2.0",
                    removed: !1
                },
                PageViewComponent: {
                    newName: "PageView",
                    since: "1.2.0",
                    removed: !1
                },
                PageViewIndicatorComponent: {
                    newName: "PageViewIndicator",
                    since: "1.2.0",
                    removed: !1
                },
                SafeAreaComponent: {
                    newName: "SafeArea",
                    since: "1.2.0",
                    removed: !1
                },
                UICoordinateTrackerComponent: {
                    newName: "UICoordinateTracker",
                    since: "1.2.0",
                    removed: !1
                },
                BlockInputEventsComponent: {
                    newName: "BlockInputEvents",
                    since: "1.2.0",
                    removed: !1
                }
            });
            let g264 = g125("UIReorderComponent", e151("cc.UIReorderComponent")(f264 = class {
                constructor() {
                    y125(1408, "UIReorderComponent");
                }
            }) || f264);
            var h264, i264, j264;
            s143.UIReorderComponent = g264, s143.ButtonComponent = k253, a127(k253, "cc.ButtonComponent"), s143.EditBoxComponent = p254, a127(p254, "cc.EditBoxComponent"), s143.LayoutComponent = z255, a127(z255, "cc.LayoutComponent"), s143.ProgressBarComponent = o256, a127(o256, "cc.ProgressBarComponent"), s143.ScrollViewComponent = q258, a127(q258, "cc.ScrollViewComponent"), s143.ScrollBarComponent = j257, a127(j257, "cc.ScrollBarComponent"), s143.SliderComponent = g259, a127(g259, "cc.SliderComponent"), s143.ToggleComponent = t259, a127(t259, "cc.ToggleComponent"), s143.ToggleContainerComponent = b260, a127(b260, "cc.ToggleContainerComponent"), s143.WidgetComponent = h261, a127(h261, "cc.WidgetComponent"), s143.PageViewComponent = z262, a127(z262, "cc.PageViewComponent"), s143.PageViewIndicatorComponent = w261, a127(w261, "cc.PageViewIndicatorComponent"), s143.SafeAreaComponent = j263, a127(j263, "cc.SafeAreaComponent"), a127(w263, "cc.UICoordinateTrackerComponent"), s143.BlockInputEventsComponent = z263, a127(z263, "cc.BlockInputEventsComponent"), l144(s199.prototype, "View.prototype", [{
                    name: "isAntiAliasEnabled",
                    suggest: "The API of Texture2d have been largely modified, no alternative"
                }, {
                    name: "enableAntiAlias",
                    suggest: "The API of Texture2d have been largely modified, no alternative"
                }]), m144(s199.prototype, "View.prototype", [{
                    name: "adjustViewportMeta"
                }, {
                    name: "enableAutoFullScreen",
                    suggest: "use screen.requestFullScreen() instead."
                }, {
                    name: "isAutoFullScreenEnabled"
                }, {
                    name: "setCanvasSize",
                    suggest: "setting size in CSS pixels is not recommended, please use screen.windowSize instead."
                }, {
                    name: "getCanvasSize",
                    suggest: "please use screen.windowSize instead."
                }, {
                    name: "getFrameSize",
                    suggest: "getting size in CSS pixels is not recommended, please use screen.windowSize instead."
                }, {
                    name: "setFrameSize",
                    suggest: "setting size in CSS pixels is not recommended, please use screen.windowSize instead."
                }, {
                    name: "getDevicePixelRatio",
                    suggest: "use screen.devicePixelRatio instead."
                }, {
                    name: "convertToLocationInView"
                }, {
                    name: "enableRetina"
                }, {
                    name: "isRetinaEnabled"
                }, {
                    name: "setRealPixelResolution"
                }]);
            let k264 = g125("VideoClip", e151("cc.VideoClip")((i264 = class extends t163 {
                constructor() {
                    super(), this._duration = j264 && j264(), this._video = null;
                }
                set _nativeAsset(f319) {
                    this._video = f319, this._duration = f319 ? f319.duration : 0;
                }
                get _nativeAsset() {
                    return this._video;
                }
            }, j264 = p130(i264.prototype, "_duration", [j151], function () {
                return 0;
            }), h264 = i264)) || h264);
            const l264 = u143.document;
            function p143(w318, x318, y318) {
                const z318 = l264.createElement("video"), a319 = l264.createElement("source");
                z318.appendChild(a319);
                const b319 = new XMLHttpRequest();
                b319.open("GET", w318, !0), b319.responseType = "blob", b319.onload = function () {
                    200 === this.status || 0 === this.status ? (a319.src = URL.createObjectURL(this.response), y318(null, z318)) : y318(new Error(`${b319.status}(no response)`));
                }, b319.onerror = function () {
                    const e319 = `load video failure - ${w318}`;
                    p125(e319), y318(new Error(e319));
                }, b319.send();
            }
            function q143(r318, s318, t318, u318) {
                const v318 = new k264();
                v318._nativeUrl = r318, v318._nativeAsset = s318, u318(null, v318);
            }
            m184.register({
                ".mp4": p143,
                ".avi": p143,
                ".mov": p143,
                ".mpg": p143,
                ".mpeg": p143,
                ".rm": p143,
                ".rmvb": p143
            }), t184.register({
                ".mp4": q143,
                ".avi": q143,
                ".mov": q143,
                ".mpg": q143,
                ".mpeg": q143,
                ".rm": q143,
                ".rmvb": q143
            });
            const m264 = p127({
                REMOTE: 0,
                LOCAL: 1
            });
            let n264, o264;
            !function (q318) {
                q318.NONE = "none", q318.PLAYING = "playing", q318.PAUSED = "paused", q318.STOPPED = "stopped", q318.COMPLETED = "completed", q318.META_LOADED = "meta-loaded", q318.READY_TO_PLAY = "ready-to-play", q318.ERROR = "error", q318.CLICKED = "clicked";
            }(n264 || (n264 = {})), function (p318) {
                p318[p318.HAVE_NOTHING = 0] = "HAVE_NOTHING", p318[p318.HAVE_METADATA = 1] = "HAVE_METADATA", p318[p318.HAVE_CURRENT_DATA = 2] = "HAVE_CURRENT_DATA", p318[p318.HAVE_FUTURE_DATA = 3] = "HAVE_FUTURE_DATA", p318[p318.HAVE_ENOUGH_DATA = 4] = "HAVE_ENOUGH_DATA";
            }(o264 || (o264 = {}));
            class p264 {
                constructor(m318) {
                    this._componentEventList = new Map(), this._state = n264.NONE, this._video = null, this._onInterruptedBegin = void 0, this._onInterruptedEnd = void 0, this._interrupted = !1, this._loaded = !1, this._loadedMeta = !1, this._ignorePause = !1, this._fullScreenOnAwake = !1, this._visible = !0, this._playing = !1, this._cachedCurrentTime = -1, this._waitingFullscreen = !1, this._waitingPlay = !1, this._keepAspectRatio = !1, this._component = null, this._uiTrans = null, this._node = null, this._stayOnBottom = !1, this._dirty = !1, this._forceUpdate = !1, this._w = 0, this._h = 0, this._m00 = 0, this._m01 = 0, this._m04 = 0, this._m05 = 0, this._m12 = 0, this._m13 = 0, this._component = m318, this._node = m318.node, this._uiTrans = m318.node.getComponent(d190), this._onInterruptedBegin = () => {
                        this.video && this._state === n264.PLAYING && (this.video.pause(), this._interrupted = !0);
                    }, this._onInterruptedEnd = () => {
                        this._interrupted && this.video && (this.video.play(), this._interrupted = !1);
                    }, s143.game.on(s143.Game.EVENT_PAUSE, this._onInterruptedBegin), s143.game.on(s143.Game.EVENT_RESUME, this._onInterruptedEnd);
                }
                get fullScreenOnAwake() {
                    return this._fullScreenOnAwake;
                }
                get loaded() {
                    return this._loaded;
                }
                get componentEventList() {
                    return this._componentEventList;
                }
                get video() {
                    return this._video;
                }
                get state() {
                    return this._state;
                }
                get isPlaying() {
                    return this._playing;
                }
                get UICamera() {
                    return t185.root.batcher2D.getFirstRenderCamera(this._node);
                }
                onLoadedMetadata(k318) {
                    this._loadedMeta = !0, this._forceUpdate = !0, this._visible ? this.enable() : this.disable(), this.dispatchEvent(n264.META_LOADED);
                    const l318 = k318.target;
                    this._keepAspectRatio && l318 && this.syncUITransform(l318.videoWidth, l318.videoHeight), this.delayedFullScreen(), this.delayedPlay();
                }
                onCanPlay(j318) {
                    this._loaded = !0, this.dispatchEvent(n264.READY_TO_PLAY);
                }
                onPlay(i318) {
                    this._playing = !0, this.dispatchEvent(n264.PLAYING);
                }
                onPlaying(h318) {
                    this.dispatchEvent(n264.PLAYING);
                }
                onPause(g318) {
                    this._playing = !1, this._ignorePause ? this._ignorePause = !1 : this.dispatchEvent(n264.PAUSED);
                }
                onStoped(f318) {
                    this._playing = !1, this._ignorePause = !1, this.dispatchEvent(n264.STOPPED);
                }
                onEnded(e318) {
                    this._playing = !1, this.dispatchEvent(n264.COMPLETED);
                }
                onClick(d318) {
                    this.dispatchEvent(n264.CLICKED);
                }
                onError(b318) {
                    this.dispatchEvent(n264.ERROR);
                    const c318 = b318.target;
                    c318 && c318.error && r125(`Error ${c318.error.code}; details: ${c318.error.message}`);
                }
                play() {
                    this._loadedMeta || this._loaded ? this.canPlay() : this._waitingPlay = !0;
                }
                delayedPlay() {
                    this._waitingPlay && (this.canPlay(), this._waitingPlay = !1);
                }
                syncFullScreenOnAwake(a318) {
                    this._fullScreenOnAwake = a318, this._loadedMeta || this._loaded ? this.canFullScreen(a318) : this._waitingFullscreen = !0;
                }
                delayedFullScreen() {
                    this._waitingFullscreen && (this.canFullScreen(this._fullScreenOnAwake), this._waitingFullscreen = !1);
                }
                dispatchEvent(y317) {
                    const z317 = this._componentEventList.get(y317);
                    z317 && (this._state = y317, z317.call(this));
                }
                syncUITransform(w317, x317) {
                    this._uiTrans && (this._uiTrans.width = w317, this._uiTrans.height = x317);
                }
                syncCurrentTime() {
                    this.video && -1 !== this._cachedCurrentTime && this.video.currentTime !== this._cachedCurrentTime && (this.seekTo(this._cachedCurrentTime), this._cachedCurrentTime = -1);
                }
                destroy() {
                    this.removeVideoPlayer(), this._componentEventList.clear(), s143.game.off(s143.Game.EVENT_PAUSE, this._onInterruptedBegin), s143.game.off(s143.Game.EVENT_RESUME, this._onInterruptedEnd);
                }
            }
            s143.internal.VideoPlayerImpl = p264;
            const q264 = u143.document, r264 = w129();
            class s264 extends p264 {
                constructor(v317) {
                    super(v317), this._eventList = new Map(), this._clearColorA = -1, this._clearFlag = void 0;
                }
                addListener(t317, u317) {
                    this._video && (this._eventList.set(t317, u317), this._video.addEventListener(t317, u317));
                }
                removeAllListeners() {
                    this._eventList.forEach((r317, s317) => {
                        this._video && this._video.removeEventListener(s317, r317);
                    }), this._eventList.clear();
                }
                canPlay() {
                    if (this.video) {
                        const n317 = this.video.play();
                        u143.Promise && n317 instanceof Promise && n317.catch(() => { }).then(() => {
                            this.syncCurrentTime();
                        });
                    }
                }
                pause() {
                    this.video && (this.video.pause(), this._cachedCurrentTime = this.video.currentTime);
                }
                resume() {
                    this.play();
                }
                stop() {
                    this.video && (this._ignorePause = !0, this.video.currentTime = 0, this.video.pause(), this._cachedCurrentTime = 0, setTimeout(() => {
                        this._ignorePause = !1, this.dispatchEvent(n264.STOPPED);
                    }, 0));
                }
                syncClip(l317) {
                    this.removeVideoPlayer(), l317 && this.createVideoPlayer(l317.nativeUrl);
                }
                syncURL(k317) {
                    this.removeVideoPlayer(), k317 && this.createVideoPlayer(k317);
                }
                syncPlaybackRate(j317) {
                    i157.browserType !== q156.UC ? this.video && (this.video.playbackRate = j317) : q125("playbackRate is not supported by the uc mobile browser.");
                }
                syncVolume(i317) {
                    this.video && (this.video.volume = i317);
                }
                syncMute(h317) {
                    this.video && (this.video.muted = h317);
                }
                syncLoop(g317) {
                    this.video && (this.video.loop = g317);
                }
                getDuration() {
                    return this.video ? this.video.duration : 0;
                }
                getCurrentTime() {
                    return this.video ? this.video.currentTime : -1;
                }
                seekTo(f317) {
                    this.video && (this.video.currentTime = f317, this._cachedCurrentTime = this.video.currentTime);
                }
                canFullScreen(z316) {
                    const a317 = this._video;
                    if (a317 && a317.readyState === o264.HAVE_ENOUGH_DATA)
                        return i157.os === t156.IOS && i157.isBrowser ? (z316 ? a317.webkitEnterFullscreen && a317.webkitEnterFullscreen() : a317.webkitExitFullscreen && a317.webkitExitFullscreen(), void (this._fullScreenOnAwake = a317.webkitDisplayingFullscreen)) : h157.supportsFullScreen ? void (z316 ? (i157.browserType === q156.IE && (a317.style.transform = ""), a317.setAttribute("x5-video-player-fullscreen", "true"), h157.requestFullScreen(a317, d317 => {
                            const e317 = i157.browserType === q156.IE ? d317.msFullscreenElement : d317.fullscreenElement;
                            this._fullScreenOnAwake = e317 === a317;
                        }, () => {
                            this._fullScreenOnAwake = !1;
                        })) : (a317.removeAttribute("x5-video-player-fullscreen"), h157.exitFullScreen())) : (this._fullScreenOnAwake = z316, this._forceUpdate = !0, void this.syncMatrix());
                }
                syncStayOnBottom(y316) {
                    this._video && (this._video.style["z-index"] = y316 ? -32768 : 0, this._stayOnBottom = y316), this._dirty = !0;
                }
                syncKeepAspectRatio(x316) {
                    this._keepAspectRatio = x316, x316 && this._loadedMeta && this._video && this.syncUITransform(this._video.videoWidth, this._video.videoHeight);
                }
                removeVideoPlayer() {
                    const w316 = this._video;
                    w316 && v127(e186.container, w316) && (e186.container.removeChild(w316), this.removeAllListeners()), this._cachedCurrentTime = 0, this._playing = !1, this._loaded = !1, this._loadedMeta = !1, this._video = null;
                }
                createVideoPlayer(t316) {
                    const u316 = this._video = q264.createElement("video");
                    u316.className = "cocosVideo", u316.style.visibility = "hidden", u316.style.position = "absolute", u316.style.bottom = "0px", u316.style.left = "0px", u316.style["transform-origin"] = "0px 100% 0px", u316.style["-webkit-transform-origin"] = "0px 100% 0px", u316.setAttribute("preload", "auto"), u316.setAttribute("webkit-playsinline", ""), u316.setAttribute("x5-playsinline", ""), u316.setAttribute("playsinline", ""), this._bindDomEvent(), e186.container.appendChild(u316);
                    const v316 = q264.createElement("source");
                    u316.appendChild(v316), v316.src = t316;
                }
                _bindDomEvent() {
                    this._video, this.addListener("loadedmetadata", this.onLoadedMetadata.bind(this)), this.addListener("canplay", this.onCanPlay.bind(this)), this.addListener("canplaythrough", this.onCanPlay.bind(this)), this.addListener("play", this.onPlay.bind(this)), this.addListener("playing", this.onPlaying.bind(this)), this.addListener("pause", this.onPause.bind(this)), this.addListener("click", this.onClick.bind(this)), this.addListener("ended", this.onEnded.bind(this)), this.addListener("error", this.onError.bind(this));
                }
                onCanPlay(r316) {
                    const s316 = r316.target;
                    if (!this._loaded || !s316)
                        switch (s316.readyState) {
                            case o264.HAVE_METADATA:
                            case o264.HAVE_ENOUGH_DATA:
                                super.onCanPlay(r316);
                        }
                }
                enable() {
                    if (this._video) {
                        if (this._visible = !0, "visible" === this._video.style.visibility)
                            return;
                        this._video.style.visibility = "visible";
                    }
                }
                disable(q316) {
                    if (this._video) {
                        if (!q316 && this._playing && this._video.pause(), this._visible = !1, "hidden" === this._video.style.visibility)
                            return;
                        this._video.style.visibility = "hidden";
                    }
                }
                syncMatrix() {
                    if (!this._video || !this._visible || !this._component)
                        return;
                    const w315 = this.UICamera;
                    if (!w315)
                        return;
                    if (h157.fullScreen())
                        return;
                    this._dirty && (this._dirty = !1, this._stayOnBottom ? (this._clearColorA = w315.clearColor.w, this._clearFlag = w315.clearFlag, w315.clearColor.w = 0, w315.clearFlag = d159.ALL) : this._clearFlag && (w315.clearColor.w = this._clearColorA, w315.clearFlag = this._clearFlag, this._clearColorA = -1, this._clearFlag = null)), this._component.node.getWorldMatrix(r264), w315.update(!0), w315.worldMatrixToScreen(r264, r264, e186.canvas.width, e186.canvas.height);
                    let x315 = 0, y315 = 0;
                    if (this._fullScreenOnAwake ? (x315 = j157.width, y315 = j157.height) : (x315 = this._uiTrans.contentSize.width, y315 = this._uiTrans.contentSize.height), !this._forceUpdate && this._m00 === r264.m00 && this._m01 === r264.m01 && this._m04 === r264.m04 && this._m05 === r264.m05 && this._m12 === r264.m12 && this._m13 === r264.m13 && this._w === x315 && this._h === y315)
                        return;
                    this._m00 = r264.m00, this._m01 = r264.m01, this._m04 = r264.m04, this._m05 = r264.m05, this._m12 = r264.m12, this._m13 = r264.m13, this._w = x315, this._h = y315;
                    const z315 = g157.devicePixelRatio, a316 = 1 / z315, b316 = 1 / z315, c316 = e186.container, d316 = r264.m00 * a316, e316 = r264.m01, f316 = r264.m04, g316 = r264.m05 * b316;
                    this._video.style.width = `${this._w}px`, this._video.style.height = `${this._h}px`, i157.browserType !== q156.MOBILE_QQ ? this._video.style.objectFit = this._keepAspectRatio ? "none" : "fill" : q125("keepAspectRatio is not supported by the qq mobile browser.");
                    const h316 = this._w * a316, i316 = this._h * b316, { x: j316, y: k316 } = this._uiTrans.anchorPoint, l316 = h316 * r264.m00 * j316, m316 = i316 * r264.m05 * k316, n316 = c316 && c316.style.paddingLeft ? parseInt(c316.style.paddingLeft) : 0, o316 = c316 && c316.style.paddingBottom ? parseInt(c316.style.paddingBottom) : 0, p316 = `matrix(${d316},${-e316},${-f316},${g316},${r264.m12 * a316 - l316 + n316},${-(r264.m13 * b316 - m316 + o316)})`;
                    this._video.style.transform = p316, this._video.style["-webkit-transform"] = p316, i157.browserType !== q156.IE && (this._forceUpdate = !1);
                }
            }
            class t264 {
                static getImpl(v315) {
                    return new s264(v315);
                }
            }
            var u264, v264, w264, x264, y264, z264, a265, b265, c265, d265, e265, f265, g265, h265, i265, j265, k265, l265, m265, n265, o265;
            s143.internal.VideoPlayerImplManager = t264;
            let p265, q265 = g125("VideoPlayer", (u264 = e151("cc.VideoPlayer"), v264 = f151(d190), w264 = a131(k264), x264 = a131(m264), y264 = a131(k264), z264 = a131([p164]), u264(a265 = v264(((o265 = class extends a165 {
                constructor(...u315) {
                    super(...u315), this._resourceType = c265 && c265(), this._remoteURL = d265 && d265(), this._clip = e265 && e265(), this._playOnAwake = f265 && f265(), this._volume = g265 && g265(), this._mute = h265 && h265(), this._playbackRate = i265 && i265(), this._loop = j265 && j265(), this._fullScreenOnAwake = k265 && k265(), this._stayOnBottom = l265 && l265(), this._keepAspectRatio = m265 && m265(), this._impl = null, this._cachedCurrentTime = 0, this.videoPlayerEvent = n265 && n265();
                }
                get resourceType() {
                    return this._resourceType;
                }
                set resourceType(t315) {
                    this._resourceType !== t315 && (this._resourceType = t315, this.syncSource());
                }
                get remoteURL() {
                    return this._remoteURL;
                }
                set remoteURL(s315) {
                    this._remoteURL !== s315 && (this._remoteURL = s315, this.syncSource());
                }
                get clip() {
                    return this._clip;
                }
                set clip(r315) {
                    this._clip !== r315 && (this._clip = r315, this.syncSource());
                }
                get playOnAwake() {
                    return this._playOnAwake;
                }
                set playOnAwake(q315) {
                    this._playOnAwake = q315;
                }
                get playbackRate() {
                    return this._playbackRate;
                }
                set playbackRate(p315) {
                    this._playbackRate = p315, this._impl && this._impl.syncPlaybackRate(p315);
                }
                get volume() {
                    return this._volume;
                }
                set volume(o315) {
                    this._volume = o315, this._impl && this._impl.syncVolume(o315);
                }
                get mute() {
                    return this._mute;
                }
                set mute(n315) {
                    this._mute = n315, this._impl && this._impl.syncMute(n315);
                }
                get loop() {
                    return this._loop;
                }
                set loop(m315) {
                    this._loop = m315, this._impl && this._impl.syncLoop(m315);
                }
                get keepAspectRatio() {
                    return this._keepAspectRatio;
                }
                set keepAspectRatio(l315) {
                    this._keepAspectRatio !== l315 && (this._keepAspectRatio = l315, this._impl && this._impl.syncKeepAspectRatio(l315));
                }
                get fullScreenOnAwake() {
                    return this._impl ? (this._fullScreenOnAwake = this._impl.fullScreenOnAwake, this._fullScreenOnAwake) : this._fullScreenOnAwake;
                }
                set fullScreenOnAwake(k315) {
                    this._fullScreenOnAwake !== k315 && (this._fullScreenOnAwake = k315, this._impl && this._impl.syncFullScreenOnAwake(k315));
                }
                get stayOnBottom() {
                    return this._stayOnBottom;
                }
                set stayOnBottom(j315) {
                    this._stayOnBottom !== j315 && (this._stayOnBottom = j315, this._impl && this._impl.syncStayOnBottom(j315));
                }
                get nativeVideo() {
                    return this._impl && this._impl.video || null;
                }
                get currentTime() {
                    return this._impl ? this._impl.getCurrentTime() : this._cachedCurrentTime;
                }
                set currentTime(i315) {
                    Number.isNaN(i315) ? q125(`illegal video time! value:${i315}`) : (i315 = x128(i315, 0, this.duration), this._cachedCurrentTime = i315, this._impl && this._impl.seekTo(i315));
                }
                get duration() {
                    return this._impl ? this._impl.getDuration() : 0;
                }
                get state() {
                    return this._impl ? this._impl.state : n264.NONE;
                }
                get isPlaying() {
                    return !!this._impl && this._impl.isPlaying;
                }
                syncSource() {
                    this._impl && (this._resourceType === m264.REMOTE ? this._impl.syncURL(this._remoteURL) : this._impl.syncClip(this._clip), this._cachedCurrentTime = 0, this._impl.syncLoop(this._loop), this._impl.syncVolume(this._volume), this._impl.syncMute(this._mute), this._impl.seekTo(this._cachedCurrentTime), this._impl.syncPlaybackRate(this._playbackRate), this._impl.syncStayOnBottom(this._stayOnBottom), this._impl.syncKeepAspectRatio(this._keepAspectRatio), this._impl.syncFullScreenOnAwake(this._fullScreenOnAwake));
                }
                __preload() {
                    this._impl = t264.getImpl(this), this.syncSource(), this._impl.componentEventList.set(n264.META_LOADED, this.onMetaLoaded.bind(this)), this._impl.componentEventList.set(n264.READY_TO_PLAY, this.onReadyToPlay.bind(this)), this._impl.componentEventList.set(n264.PLAYING, this.onPlaying.bind(this)), this._impl.componentEventList.set(n264.PAUSED, this.onPaused.bind(this)), this._impl.componentEventList.set(n264.STOPPED, this.onStopped.bind(this)), this._impl.componentEventList.set(n264.COMPLETED, this.onCompleted.bind(this)), this._impl.componentEventList.set(n264.ERROR, this.onError.bind(this)), this._impl.componentEventList.set(n264.CLICKED, this.onClicked.bind(this)), this._playOnAwake && this._impl.loaded && this.play();
                }
                onEnable() {
                    this._impl && this._impl.enable();
                }
                onDisable() {
                    this._impl && this._impl.disable();
                }
                onDestroy() {
                    this._impl && (this._impl.destroy(), this._impl = null);
                }
                update(h315) {
                    this._impl && this._impl.syncMatrix();
                }
                onMetaLoaded() {
                    p164.emitEvents(this.videoPlayerEvent, this, n264.META_LOADED), this.node.emit("meta-loaded", this);
                }
                onReadyToPlay() {
                    this._playOnAwake && !this.isPlaying && this.play(), p164.emitEvents(this.videoPlayerEvent, this, n264.READY_TO_PLAY), this.node.emit(n264.READY_TO_PLAY, this);
                }
                onPlaying() {
                    p164.emitEvents(this.videoPlayerEvent, this, n264.PLAYING), this.node.emit(n264.PLAYING, this);
                }
                onPaused() {
                    p164.emitEvents(this.videoPlayerEvent, this, n264.PAUSED), this.node.emit(n264.PAUSED, this);
                }
                onStopped() {
                    p164.emitEvents(this.videoPlayerEvent, this, n264.STOPPED), this.node.emit(n264.STOPPED, this);
                }
                onCompleted() {
                    p164.emitEvents(this.videoPlayerEvent, this, n264.COMPLETED), this.node.emit(n264.COMPLETED, this);
                }
                onError() {
                    p164.emitEvents(this.videoPlayerEvent, this, n264.ERROR), this.node.emit(n264.ERROR, this);
                }
                onClicked() {
                    p164.emitEvents(this.videoPlayerEvent, this, n264.CLICKED), this.node.emit(n264.CLICKED, this);
                }
                play() {
                    this._impl && this._impl.play();
                }
                resume() {
                    this._impl && this._impl.resume();
                }
                pause() {
                    this._impl && this._impl.pause();
                }
                stop() {
                    this._impl && this._impl.stop();
                }
            }).EventType = n264, o265.ResourceType = m264, c265 = p130((b265 = o265).prototype, "_resourceType", [j151], function () {
                return m264.LOCAL;
            }), d265 = p130(b265.prototype, "_remoteURL", [j151], function () {
                return "";
            }), e265 = p130(b265.prototype, "_clip", [w264, j151], function () {
                return null;
            }), f265 = p130(b265.prototype, "_playOnAwake", [j151], function () {
                return !0;
            }), g265 = p130(b265.prototype, "_volume", [j151], function () {
                return 1;
            }), h265 = p130(b265.prototype, "_mute", [j151], function () {
                return !1;
            }), i265 = p130(b265.prototype, "_playbackRate", [j151], function () {
                return 1;
            }), j265 = p130(b265.prototype, "_loop", [j151], function () {
                return !1;
            }), k265 = p130(b265.prototype, "_fullScreenOnAwake", [j151], function () {
                return !1;
            }), l265 = p130(b265.prototype, "_stayOnBottom", [j151], function () {
                return !1;
            }), m265 = p130(b265.prototype, "_keepAspectRatio", [j151], function () {
                return !0;
            }), i125(b265.prototype, "resourceType", [x264], Object.getOwnPropertyDescriptor(b265.prototype, "resourceType"), b265.prototype), i125(b265.prototype, "clip", [y264], Object.getOwnPropertyDescriptor(b265.prototype, "clip"), b265.prototype), n265 = p130(b265.prototype, "videoPlayerEvent", [j151, z264], function () {
                return [];
            }), a265 = b265)) || a265) || a265));
            s143.internal.VideoPlayer = q265, k144(q265.prototype, "VideoPlayer.prototype", [{
                    name: "onPasued",
                    newName: "onPaused"
                }]), function (g315) {
                g315.NONE = "none", g315.LOADING = "loading", g315.LOADED = "loaded", g315.ERROR = "error";
            }(p265 || (p265 = {}));
            class r265 {
                constructor(f315) {
                    this._componentEventList = new Map(), this._state = p265.NONE, this._wrapper = void 0, this._webview = null, this._loaded = !1, this._forceUpdate = !1, this._component = null, this._uiTrans = null, this._node = null, this._w = 0, this._h = 0, this._m00 = 0, this._m01 = 0, this._m04 = 0, this._m05 = 0, this._m12 = 0, this._m13 = 0, this._component = f315, this._node = f315.node, this._uiTrans = f315.node.getComponent(d190), this.reset(), this.createWebView();
                }
                reset() {
                    this._wrapper = null, this._webview = null, this._loaded = !1, this._w = 0, this._h = 0, this._m00 = 0, this._m01 = 0, this._m04 = 0, this._m05 = 0, this._m12 = 0, this._m13 = 0, this._state = p265.NONE, this._forceUpdate = !1;
                }
                get loaded() {
                    return this._loaded;
                }
                get componentEventList() {
                    return this._componentEventList;
                }
                get webview() {
                    return this._webview;
                }
                get state() {
                    return this._state;
                }
                get UICamera() {
                    return t185.root.batcher2D.getFirstRenderCamera(this._node);
                }
                dispatchEvent(c315, ...d315) {
                    const e315 = this._componentEventList.get(c315);
                    e315 && (this._state = c315, e315.call(this, d315));
                }
                destroy() {
                    this.removeWebView(), this._wrapper = null, this._webview = null, this._loaded = !1, this._component = null, this._uiTrans = null, this._forceUpdate = !1, this._componentEventList.clear();
                }
            }
            s143.internal.WebViewImpl = r265;
            const s265 = u143.document, t265 = w129();
            class u265 extends r265 {
                constructor(b315) {
                    super(b315);
                }
                _bindDomEvent() {
                    this.webview && this.webview.addEventListener("load", y314 => {
                        this._forceUpdate = !0, this.dispatchEvent(p265.LOADED);
                        const z314 = y314.target, a315 = z314.contentDocument && z314.contentDocument.body;
                        a315 && a315.innerHTML.includes("404") && this.dispatchEvent(p265.ERROR, a315.innerHTML);
                    });
                }
                loadURL(w314) {
                    this.webview && (this.webview.src = w314, this.dispatchEvent(p265.LOADING));
                }
                createWebView() {
                    const u314 = s265.createElement("div");
                    this._wrapper = u314, u314.id = "webview-wrapper", u314.style["-webkit-overflow"] = "auto", u314.style["-webkit-overflow-scrolling"] = "touch", u314.style.position = "absolute", u314.style.bottom = "0px", u314.style.left = "0px", u314.style.transformOrigin = "0px 100% 0px", u314.style["-webkit-transform-origin"] = "0px 100% 0px", e186.container.appendChild(u314);
                    const v314 = s265.createElement("iframe");
                    this._webview = v314, v314.id = "webview", v314.style.border = "none", v314.style.width = "100%", v314.style.height = "100%", u314.appendChild(v314), this._bindDomEvent();
                }
                removeWebView() {
                    const t314 = this._wrapper;
                    v127(e186.container, t314) && e186.container.removeChild(t314), this.reset();
                }
                enable() {
                    this._wrapper && (this._wrapper.style.visibility = "visible");
                }
                disable() {
                    this._wrapper && (this._wrapper.style.visibility = "hidden");
                }
                evaluateJS(q314) {
                    if (this.webview) {
                        const r314 = this.webview.contentWindow;
                        if (r314)
                            try {
                                r314.eval(q314);
                            }
                            catch (s314) {
                                this.dispatchEvent(p265.ERROR, s314), r125(s314);
                            }
                    }
                }
                setOnJSCallback(p314) {
                    q125("The platform does not support");
                }
                setJavascriptInterfaceScheme(o314) {
                    q125("The platform does not support");
                }
                syncMatrix() {
                    if (!this._wrapper || !this._uiTrans || !this._component || "hidden" === this._wrapper.style.visibility)
                        return;
                    const w313 = this.UICamera;
                    if (!w313)
                        return;
                    this._component.node.getWorldMatrix(t265), w313.update(!0), w313.worldMatrixToScreen(t265, t265, e186.canvas.width, e186.canvas.height);
                    const { width: x313, height: y313 } = this._uiTrans.contentSize;
                    if (!this._forceUpdate && this._m00 === t265.m00 && this._m01 === t265.m01 && this._m04 === t265.m04 && this._m05 === t265.m05 && this._m12 === t265.m12 && this._m13 === t265.m13 && this._w === x313 && this._h === y313)
                        return;
                    this._m00 = t265.m00, this._m01 = t265.m01, this._m04 = t265.m04, this._m05 = t265.m05, this._m12 = t265.m12, this._m13 = t265.m13, this._w = x313, this._h = y313;
                    const z313 = g157.devicePixelRatio, a314 = 1 / z313, b314 = 1 / z313, c314 = e186.container, d314 = t265.m00 * a314, e314 = t265.m01, f314 = t265.m04, g314 = t265.m05 * b314;
                    this._wrapper.style.width = `${x313}px`, this._wrapper.style.height = `${y313}px`;
                    const h314 = this._w * a314, i314 = this._h * b314, j314 = h314 * t265.m00 * this._uiTrans.anchorX, k314 = i314 * t265.m05 * this._uiTrans.anchorY, l314 = c314 && c314.style.paddingLeft ? parseInt(c314.style.paddingLeft) : 0, m314 = c314 && c314.style.paddingBottom ? parseInt(c314.style.paddingBottom) : 0, n314 = `matrix(${d314},${-e314},${-f314},${g314},${t265.m12 * a314 - j314 + l314},${-(t265.m13 * b314 - k314 + m314)})`;
                    this._wrapper.style.transform = n314, this._wrapper.style["-webkit-transform"] = n314, this._forceUpdate = !1;
                }
            }
            class v265 {
                static getImpl(v313) {
                    return new u265(v313);
                }
            }
            var w265, x265, y265, z265, a266, b266, c266, d266;
            s143.internal.WebViewImplManager = v265;
            let e266 = g125("WebView", (w265 = e151("cc.WebView"), x265 = f151(d190), y265 = a131([p164]), w265(z265 = x265(((d266 = class extends a165 {
                constructor(...u313) {
                    super(...u313), this._url = b266 && b266(), this._impl = null, this.webviewEvents = c266 && c266();
                }
                get url() {
                    return this._url;
                }
                set url(t313) {
                    this._url = t313, this._impl && this._impl.loadURL(t313);
                }
                get nativeWebView() {
                    return this._impl && this._impl.webview || null;
                }
                get state() {
                    return this._impl ? this._impl.state : p265.NONE;
                }
                setJavascriptInterfaceScheme(s313) {
                    this._impl && this._impl.setJavascriptInterfaceScheme(s313);
                }
                setOnJSCallback(r313) {
                    this._impl && this._impl.setOnJSCallback(r313);
                }
                evaluateJS(q313) {
                    this._impl && this._impl.evaluateJS(q313);
                }
                __preload() {
                    this._impl = v265.getImpl(this), this._impl.componentEventList.set(p265.LOADING, this.onLoading.bind(this)), this._impl.componentEventList.set(p265.LOADED, this.onLoaded.bind(this)), this._impl.componentEventList.set(p265.ERROR, this.onError.bind(this)), this._impl.loadURL(this._url);
                }
                onLoading() {
                    p164.emitEvents(this.webviewEvents, this, p265.LOADING), this.node.emit(p265.LOADING, this);
                }
                onLoaded() {
                    p164.emitEvents(this.webviewEvents, this, p265.LOADED), this.node.emit(p265.LOADED, this);
                }
                onError(...p313) {
                    p164.emitEvents(this.webviewEvents, this, p265.ERROR, p313), this.node.emit(p265.ERROR, this, p313);
                }
                onEnable() {
                    this._impl && this._impl.enable();
                }
                onDisable() {
                    this._impl && this._impl.disable();
                }
                onDestroy() {
                    this._impl && (this._impl.destroy(), this._impl = null);
                }
                update(o313) {
                    this._impl && this._impl.syncMatrix();
                }
            }).EventType = p265, b266 = p130((a266 = d266).prototype, "_url", [j151], function () {
                return "https://cocos.com";
            }), c266 = p130(a266.prototype, "webviewEvents", [j151, y265], function () {
                return [];
            }), z265 = a266)) || z265) || z265));
            s143.internal.WebView = e266;
        }
    };
});
