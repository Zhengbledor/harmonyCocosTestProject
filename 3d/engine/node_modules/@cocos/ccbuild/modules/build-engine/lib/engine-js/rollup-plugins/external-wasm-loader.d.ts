import { rollup as Bundler } from "../../../../bundler/lib/index";
import rollup = Bundler.core;
/**
 * This plugin enable to load script or wasm with url based on 'external://' origin.
 */
export declare function externalWasmLoader(options: externalWasmLoader.Options): rollup.Plugin;
export declare namespace externalWasmLoader {
  interface Options {
    /**
     * The root path of external repository
     */
    externalRoot: string;
    /**
     * The wasm support mode:
     * 0. not support
     * 1. support
     * 2. maybe support
     */
    wasmSupportMode: number;
    /**
     * Whether need a fallback of wasm.
     * If true, we need to build a wasm fallback module for the compatibility of wasm files compiled by different version of emscripten.
     */
    wasmFallback: boolean;
    /**
     * Whether force banning to emit bullet wasm.
     */
    forceBanningBulletWasm: boolean;
    /**
     * Whether cull asm js module.
     */
    cullAsmJsModule: boolean;
    /**
     * Whether cull meshopt module, including wasm and asm.js.
     */
    cullMeshopt: boolean;
    /**
     * Build external wasm module as minigame subpackage.
     * This feature is for minigame platforms.
     */
    wasmSubpackage: boolean;
    format?: Format;
  }
  /**
   * How to generate the reference to external assets:
   * - `'relative-from-out'`
   * Generate the path relative from `out` directory, does not contain the leading './'.
   *
   * - `'relative-from-chunk'`
   * Generate the path relative from the referencing output chunk.
   *
   * - `'dynamic'`(default)
   * Use runtime `URL` API to resolve the absolute URL.
   * This requires `URL` and `import.meta.url` to be valid.
   */
  type Format = 'relative-from-out' | 'relative-from-chunk' | 'runtime-resolved';
}
/**
 * Convert the file path to asset ref URL.
 * @param file File path in absolute.
 */
export declare function pathToAssetRefURL(file: string): string;