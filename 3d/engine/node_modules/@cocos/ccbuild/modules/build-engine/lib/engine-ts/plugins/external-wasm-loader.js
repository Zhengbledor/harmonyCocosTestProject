"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.externalWasmLoaderFactory = void 0;
const fs = __importStar(require("fs-extra"));
const path_1 = require("path");
const crypto_1 = require("crypto");
const utils_1 = require("../../../../utils/lib/index.js");
const bundler_1 = require("../../../../bundler/lib/index.js");
var rollup = bundler_1.rollup.core;
const rpCjs = bundler_1.rollup.plugins.commonjs;
const externalOrigin = 'external:';
function resolveExternalProtocol(options, source) {
  return path_1.posix.join(options.engineRoot, source.replace(externalOrigin, 'native/external/'));
}
function emitAsset(options, id) {
  if (options.outDir) {
    const buffer = fs.readFileSync(id);
    const base = (0, utils_1.formatPath)(path_1.posix.join('assets', path_1.posix.basename(id)));
    const outputFile = path_1.posix.join(options.outDir, base);
    fs.outputFileSync(outputFile, buffer);
    return `export default '${base}';`;
  }
  return `throw new Error('Failed to build wasm assets');`;
}
function shouldCullMeshoptModule(options, id) {
  return options.cullMeshopt && id.includes('meshopt');
}
const loadConfig = {
  '.wasm': {
    shouldCullModule(options, id) {
      return true; // OH platform doesn't support wasm
    },

    shouldEmitAsset(options, id) {
      return !this.shouldCullModule(options, id);
    },
    cullingContent: `export default '';`
  },
  '.js.mem': {
    shouldCullModule(options, id) {
      return shouldCullMeshoptModule(options, id); // we can only use asm.js on OH platform
    },

    shouldEmitAsset(options, id) {
      return !this.shouldCullModule(options, id);
    },
    cullingContent: `export default '';`
  },
  '.wasm.js': {
    shouldCullModule(options, id) {
      return true; // OH platform doesn't support wasm
    },

    shouldEmitAsset(options, id) {
      return false;
    },
    cullingContent: `let $: any;export default $;`
  },
  '.asm.js': {
    shouldCullModule(options, id) {
      return shouldCullMeshoptModule(options, id); // we can only use asm.js on OH platform
    },

    shouldEmitAsset(options, id) {
      return false;
    },
    cullingContent: `let $: any;export default $;`
  },
  '.wasm.fallback': {
    shouldCullModule(options, id) {
      return true; // we don't need wasm.fallback module for OH platform
    },

    shouldEmitAsset(options, id) {
      return !this.shouldCullModule(options, id);
    },
    cullingContent: `export default '';`
  },
  '.wasm.fallback.js': {
    shouldCullModule(options, id) {
      return true; // we don't need wasm.fallback module for OH platform
    },

    shouldEmitAsset(options, id) {
      return false;
    },
    cullingContent: `export default function () {}`
  }
};
// NOTE: we use rollup to transform CommonJS to ES Module.
function _transformESM(id) {
  return __awaiter(this, void 0, void 0, function* () {
    const res = yield rollup.rollup({
      input: id,
      plugins: [rpCjs()]
    });
    const output = yield res.generate({
      format: 'esm'
    });
    yield res.close();
    return '// @ts-nocheck\n' + output.output[0].code;
  });
}
function externalWasmLoaderFactory(options) {
  const id2Source = {};
  const source2Id = {};
  const externalWasmLoader = {
    resolve(source, importer) {
      return __awaiter(this, void 0, void 0, function* () {
        if (source.startsWith(externalOrigin)) {
          const id = resolveExternalProtocol(options, source);
          id2Source[id] = source;
          source2Id[source] = id;
          return id;
        }
        return undefined;
      });
    },
    load(id) {
      return __awaiter(this, void 0, void 0, function* () {
        if (id in id2Source) {
          for (const suffix in loadConfig) {
            if (id.endsWith(suffix)) {
              const config = loadConfig[suffix];
              if (config.shouldCullModule(options, id)) {
                return config.cullingContent;
              } else if (config.shouldEmitAsset(options, id)) {
                return emitAsset(options, id);
              } else {
                return yield _transformESM(id);
              }
            }
          }
          // fallback
          return fs.readFileSync(id, 'utf8');
        }
      });
    },
    transformId(source, importer) {
      if (source in source2Id) {
        let id = source2Id[source];
        const shasum = (0, crypto_1.createHash)('sha1');
        shasum.update(fs.readFileSync(id, 'utf8').replace(/\r\n/g, '\n'));
        const hash = shasum.digest('hex').slice(0, 5);
        id = `${id}.${hash}.ts`;
        return id;
      }
    }
  };
  return externalWasmLoader;
}
exports.externalWasmLoaderFactory = externalWasmLoaderFactory;